[{"original_method":"@Override\n\tprotected void setAttributes(HttpServletRequest request) {\n\t\tsuper.setAttributes(request);\n\n\t\tObject bean = getBean();\n\n\t\tif (bean == null) {\n\t\t\tbean = pageContext.getAttribute(\"aui:model-context:bean\");\n\t\t}\n\n\t\tString name = getName();\n\n\t\tint pos = name.indexOf(StringPool.DOUBLE_DASH);\n\n\t\tif (pos != -1) {\n\t\t\tname = name.substring(pos + 2, name.length() - 2);\n\t\t}\n\n\t\tString id = getId();\n\n\t\tif (Validator.isNull(id)) {\n\t\t\tid = name;\n\t\t}\n\n\t\tString label = getLabel();\n\n\t\tif (label == null) {\n\t\t\tlabel = TextFormatter.format(name, TextFormatter.K);\n\t\t}\n\n\t\tString listType = getListType();\n\t\tString listTypeFieldName = getListTypeFieldName();\n\n\t\tif (Validator.isNotNull(listType) &&\n\t\t\tValidator.isNull(listTypeFieldName)) {\n\n\t\t\tlistTypeFieldName = \"typeId\";\n\t\t}\n\n\t\tString title = getTitle();\n\n\t\tif ((title == null) && Validator.isNull(label)) {\n\t\t\ttitle = TextFormatter.format(name, TextFormatter.K);\n\t\t}\n\n\t\tString value = String.valueOf(getValue());\n\n\t\tif (Validator.isNull(listType)) {\n\t\t\tif (bean != null) {\n\t\t\t\tvalue = BeanPropertiesUtil.getStringSilent(bean, name, value);\n\t\t\t}\n\n\t\t\tif (!getIgnoreRequestValue()) {\n\t\t\t\tvalue = ParamUtil.getString(request, name, value);\n\t\t\t}\n\t\t}\n\n\t\tsetNamespacedAttribute(request, \"bean\", bean);\n\t\tsetNamespacedAttribute(request, \"id\", id);\n\t\tsetNamespacedAttribute(request, \"label\", label);\n\t\tsetNamespacedAttribute(request, \"listTypeFieldName\", listTypeFieldName);\n\t\tsetNamespacedAttribute(request, \"title\", String.valueOf(title));\n\t\tsetNamespacedAttribute(request, \"value\", value);\n\t}","id":64000,"modified_method":"@Override\n\tprotected void setAttributes(HttpServletRequest request) {\n\t\tsuper.setAttributes(request);\n\n\t\tObject bean = getBean();\n\n\t\tif (bean == null) {\n\t\t\tbean = pageContext.getAttribute(\"aui:model-context:bean\");\n\t\t}\n\n\t\tString name = getName();\n\n\t\tint pos = name.indexOf(StringPool.DOUBLE_DASH);\n\n\t\tif (pos != -1) {\n\t\t\tname = name.substring(pos + 2, name.length() - 2);\n\t\t}\n\n\t\tString id = getId();\n\n\t\tif (Validator.isNull(id)) {\n\t\t\tid = name;\n\t\t}\n\n\t\tString label = getLabel();\n\n\t\tif (label == null) {\n\t\t\tlabel = TextFormatter.format(name, TextFormatter.P);\n\t\t}\n\n\t\tString listType = getListType();\n\t\tString listTypeFieldName = getListTypeFieldName();\n\n\t\tif (Validator.isNotNull(listType) &&\n\t\t\tValidator.isNull(listTypeFieldName)) {\n\n\t\t\tlistTypeFieldName = \"typeId\";\n\t\t}\n\n\t\tString title = getTitle();\n\n\t\tif ((title == null) && Validator.isNull(label)) {\n\t\t\ttitle = TextFormatter.format(name, TextFormatter.P);\n\t\t}\n\n\t\tString value = String.valueOf(getValue());\n\n\t\tif (Validator.isNull(listType)) {\n\t\t\tif (bean != null) {\n\t\t\t\tvalue = BeanPropertiesUtil.getStringSilent(bean, name, value);\n\t\t\t}\n\n\t\t\tif (!getIgnoreRequestValue()) {\n\t\t\t\tvalue = ParamUtil.getString(request, name, value);\n\t\t\t}\n\t\t}\n\n\t\tsetNamespacedAttribute(request, \"bean\", bean);\n\t\tsetNamespacedAttribute(request, \"id\", id);\n\t\tsetNamespacedAttribute(request, \"label\", label);\n\t\tsetNamespacedAttribute(request, \"listTypeFieldName\", listTypeFieldName);\n\t\tsetNamespacedAttribute(request, \"title\", String.valueOf(title));\n\t\tsetNamespacedAttribute(request, \"value\", value);\n\t}","commit_id":"e6fa8fb69da1f78143c15986eda927888f6cd227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static String _formatP(String s) {\n\t\tStringBuilder sb = new StringBuilder(StringUtil.toLowerCase(s));\n\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\n\t\t\tif (Character.isUpperCase(c) && (i > 0) && ((i + 1) < s.length())) {\n\t\t\t\tint delta = sb.length() - s.length();\n\n\t\t\t\tif (Character.isLowerCase(s.charAt(i + 1))) {\n\t\t\t\t\tsb.insert(i + delta, CharPool.DASH);\n\t\t\t\t}\n\t\t\t\telse if (Character.isLowerCase(s.charAt(i - 1))) {\n\t\t\t\t\tsb.insert(i + delta, CharPool.DASH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sb.toString();\n\t}","id":64001,"modified_method":"private static String _formatP(String s) {\n\t\tStringBuilder sb = new StringBuilder(s.length() + s.length() / 2);\n\n\t\tfor (int i = 0; i < s.length() - 1; i++) {\n\t\t\tchar c1 = s.charAt(i);\n\t\t\tchar c2 = s.charAt(i + 1);\n\n\t\t\tif (Character.isLowerCase(c1) && Character.isUpperCase(c2)) {\n\t\t\t\tsb.append(c1);\n\t\t\t\tsb.append(CharPool.DASH);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsb.append(Character.toLowerCase(c1));\n\t\t\t}\n\t\t}\n\n\t\tsb.append(Character.toLowerCase(s.charAt(s.length() - 1)));\n\n\t\treturn sb.toString();\n\t}","commit_id":"e6fa8fb69da1f78143c15986eda927888f6cd227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Converts ThisIsATest to this_is_a_test\n     * @param camelString the StringWithCaps\n     * @return the string_with_underscores\n     */\n    public static String camelCaseToUnderscore(String camelString) {\n    \tStringBuffer underscore = new StringBuffer();\n    \tfor (int i = 0; i < camelString.length(); i ++) {\n    \t\tchar ch = camelString.charAt(i);\n    \t\tif (Character.isUpperCase(ch) && i > 0) {\n    \t\t\tunderscore.append(\"_\");\n    \t\t}\n    \t\tunderscore.append(Character.toLowerCase(ch));\n    \t}\n    \treturn underscore.toString();\n    }","id":64002,"modified_method":"/**\n     * Converts ThisIsATest to this_is_a_test\n     * @param camelString the StringWithCaps\n     * @return the string_with_underscores\n     */\n    public static String camelCaseToUnderscore(String camelString, boolean lowercase) {\n    \tStringBuffer underscore = new StringBuffer();\n    \tboolean lastCharacterWasWordBreak = false;\n    \tboolean lastCharacterWasCapital = false;\n    \tint length = camelString.length();\n    \tfor (int i = 0; i < length; i ++) {\n    \t\tchar ch = camelString.charAt(i);\n    \t\tif (Character.isUpperCase(ch)) {\n    \t\t\tboolean nextCharacterIsCapital =  (i < length - 1 && Character.isUpperCase(camelString.charAt(i + 1)));\n    \t\t\tif (i > 0 && ((!lastCharacterWasWordBreak && !lastCharacterWasCapital) || !nextCharacterIsCapital)) {\n    \t\t\t\tunderscore.append(\"_\");\n    \t\t\t\tlastCharacterWasWordBreak = true;\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tlastCharacterWasWordBreak = false;\n    \t\t\t}\n    \t\t\tlastCharacterWasCapital = true;\n    \t\t}\n    \t\telse if (ch == '_') {\n    \t\t\tlastCharacterWasWordBreak = true;\n    \t\t}\n    \t\telse {\n    \t\t\tlastCharacterWasWordBreak = false;\n    \t\t}\n    \t\tif (lowercase) {\n    \t\t\tunderscore.append(Character.toLowerCase(ch));\n    \t\t}\n    \t\telse {\n    \t\t\tunderscore.append(ch);\n    \t\t}\n    \t}\n    \treturn underscore.toString();\n    }","commit_id":"dacfcc1119d7d767f77a565dd57dc3cafb47ffed","url":"https://github.com/wocommunity/wonder"},{"original_method":"public BuildDataManager(final File dataStorageRoot, final boolean useMemoryTempCaches) throws IOException {\n    myDataStorageRoot = dataStorageRoot;\n    mySrcToFormMap = new SourceToFormMapping(new File(getSourceToFormsRoot(), \"data\"));\n    myMappings = new Mappings(getMappingsRoot(), useMemoryTempCaches);\n    myArtifactsBuildData = new ArtifactsBuildData(new File(dataStorageRoot, \"artifacts\"));\n  }","id":64003,"modified_method":"public BuildDataManager(final File dataStorageRoot, final boolean useMemoryTempCaches) throws IOException {\n    myDataStorageRoot = dataStorageRoot;\n    mySrcToFormMap = new SourceToFormMapping(new File(getSourceToFormsRoot(), \"data\"));\n    myMappings = new Mappings(getMappingsRoot(), useMemoryTempCaches);\n    myArtifactsBuildData = new ArtifactsBuildData(new File(dataStorageRoot, \"artifacts\"));\n    myVersionFile = new File(myDataStorageRoot, \"version.dat\");\n  }","commit_id":"22b665baf86ab4fffe4ba3d6d19d022f57487922","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void build(CompileScope scope, final boolean isMake, final boolean isProjectRebuild) {\n    final LowMemoryWatcher memWatcher = LowMemoryWatcher.register(new Forceable() {\n      @Override\n      public boolean isDirty() {\n        return true; // always perform flush when not enough memory\n      }\n\n      @Override\n      public void force() {\n        myProjectDescriptor.dataManager.flush(false);\n        myProjectDescriptor.timestamps.getStorage().force();\n      }\n    });\n    CompileContext context = null;\n    try {\n      try {\n        context = createContext(scope, isMake, isProjectRebuild);\n        runBuild(context);\n      }\n      catch (ProjectBuildException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof PersistentEnumerator.CorruptedException || cause instanceof MappingFailedException || cause instanceof IOException) {\n          // force rebuild\n          myMessageDispatcher.processMessage(new CompilerMessage(\n            COMPILE_SERVER_NAME, BuildMessage.Kind.INFO,\n            \"Internal caches are corrupted or have outdated format, forcing project rebuild: \" +\n            e.getMessage())\n          );\n          flushContext(context);\n          if (isMake || isProjectRebuild) {\n            context = createContext(new AllProjectScope(scope.getProject(), scope.getArtifacts(), true), false, true);\n          }\n          else {\n            //in case of forced compilation keep the scope, but remove all caches\n            context = createContext(scope, false, false);\n            cleanOutputRoots(context);\n          }\n          runBuild(context);\n        }\n        else {\n          throw e;\n        }\n      }\n    }\n    catch (ProjectBuildException e) {\n      final Throwable cause = e.getCause();\n      if (cause == null) {\n        final String msg = e.getMessage();\n        if (!StringUtil.isEmpty(msg)) {\n          myMessageDispatcher.processMessage(new ProgressMessage(msg));\n        }\n      }\n      else {\n        myMessageDispatcher.processMessage(new CompilerMessage(COMPILE_SERVER_NAME, cause));\n      }\n    }\n    finally {\n      memWatcher.stop();\n      flushContext(context);\n    }\n  }","id":64004,"modified_method":"public void build(CompileScope scope, final boolean isMake, final boolean isProjectRebuild) {\n    final LowMemoryWatcher memWatcher = LowMemoryWatcher.register(new Forceable() {\n      @Override\n      public boolean isDirty() {\n        return true; // always perform flush when not enough memory\n      }\n\n      @Override\n      public void force() {\n        myProjectDescriptor.dataManager.flush(false);\n        myProjectDescriptor.timestamps.getStorage().force();\n      }\n    });\n    CompileContext context = null;\n    try {\n      try {\n        if (myProjectDescriptor.dataManager.versionDiffers()) {\n          myMessageDispatcher.processMessage(new CompilerMessage(\n            COMPILE_SERVER_NAME, BuildMessage.Kind.INFO, \"Dependency data format has changed, project rebuild required\"\n          ));\n          context = createContextForForcedRebuild(scope, isMake, isProjectRebuild);\n        }\n        else {\n          context = createContext(scope, isMake, isProjectRebuild);\n        }\n        runBuild(context);\n      }\n      catch (ProjectBuildException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof PersistentEnumerator.CorruptedException || cause instanceof MappingFailedException || cause instanceof IOException) {\n          // force rebuild\n          myMessageDispatcher.processMessage(new CompilerMessage(\n            COMPILE_SERVER_NAME, BuildMessage.Kind.INFO,\n            \"Internal caches are corrupted or have outdated format, forcing project rebuild: \" +\n            e.getMessage())\n          );\n          flushContext(context);\n          context = createContextForForcedRebuild(scope, isMake, isProjectRebuild);\n          runBuild(context);\n        }\n        else {\n          throw e;\n        }\n      }\n      myProjectDescriptor.dataManager.saveVersion();\n    }\n    catch (ProjectBuildException e) {\n      final Throwable cause = e.getCause();\n      if (cause == null) {\n        final String msg = e.getMessage();\n        if (!StringUtil.isEmpty(msg)) {\n          myMessageDispatcher.processMessage(new ProgressMessage(msg));\n        }\n      }\n      else {\n        myMessageDispatcher.processMessage(new CompilerMessage(COMPILE_SERVER_NAME, cause));\n      }\n    }\n    finally {\n      memWatcher.stop();\n      flushContext(context);\n    }\n  }","commit_id":"22b665baf86ab4fffe4ba3d6d19d022f57487922","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void doBuild(boolean force, final boolean shouldFail, Artifact... artifacts) {\n    if (myDescriptor == null) {\n      myDescriptor = createProjectDescriptor();\n      myDescriptor.incUsageCounter();\n    }\n    myArtifactBuilderLogger.clear();\n    IncProjectBuilder builder = new IncProjectBuilder(myDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL);\n    final List<BuildMessage> errorMessages = new ArrayList<BuildMessage>();\n    final List<BuildMessage> infoMessages = new ArrayList<BuildMessage>();\n    builder.addMessageHandler(new MessageHandler() {\n      @Override\n      public void processMessage(BuildMessage msg) {\n        if (msg.getKind() == BuildMessage.Kind.ERROR) {\n          errorMessages.add(msg);\n        }\n        else {\n          infoMessages.add(msg);\n        }\n      }\n    });\n    builder.build(new AllProjectScope(myDescriptor.project, new HashSet<Artifact>(Arrays.asList(artifacts)), force), !force, false);\n    if (shouldFail) {\n      assertFalse(\"Build not failed as expected\", errorMessages.isEmpty());\n    }\n    else {\n      assertTrue(\"Build failed. \\nErrors:\\n\" + errorMessages + \"\\nInfo messages:\\n\" + infoMessages, errorMessages.isEmpty());\n    }\n  }","id":64005,"modified_method":"private void doBuild(boolean force, final boolean shouldFail, Artifact... artifacts) {\n    if (myDescriptor == null) {\n      myDescriptor = createProjectDescriptor();\n      myDescriptor.incUsageCounter();\n    }\n    myArtifactBuilderLogger.clear();\n    IncProjectBuilder builder = new IncProjectBuilder(myDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL);\n    final List<BuildMessage> errorMessages = new ArrayList<BuildMessage>();\n    final List<BuildMessage> infoMessages = new ArrayList<BuildMessage>();\n    builder.addMessageHandler(new MessageHandler() {\n      @Override\n      public void processMessage(BuildMessage msg) {\n        if (msg.getKind() == BuildMessage.Kind.ERROR) {\n          errorMessages.add(msg);\n        }\n        else {\n          infoMessages.add(msg);\n        }\n      }\n    });\n    try {\n      builder.build(new AllProjectScope(myDescriptor.project, new HashSet<Artifact>(Arrays.asList(artifacts)), force), !force, false, false);\n    }\n    catch (RebuildRequestedException e) {\n      fail(e.getMessage());\n    }\n    if (shouldFail) {\n      assertFalse(\"Build not failed as expected\", errorMessages.isEmpty());\n    }\n    else {\n      assertTrue(\"Build failed. \\nErrors:\\n\" + errorMessages + \"\\nInfo messages:\\n\" + infoMessages, errorMessages.isEmpty());\n    }\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void runBuild(String projectPath, BuildType buildType, Set<String> modules, Collection<String> artifacts, Map<String, String> builderParams, Collection<String> paths, final MessageHandler msgHandler, CanceledStatus cs) throws Throwable{\n    ProjectDescriptor pd;\n    final Project project = loadProject(projectPath);\n    final BuildFSState fsState = new BuildFSState(false);\n    ProjectTimestamps timestamps = null;\n    BuildDataManager dataManager = null;\n    final File dataStorageRoot = Utils.getDataStorageRoot(project);\n    try {\n      timestamps = new ProjectTimestamps(dataStorageRoot);\n      dataManager = new BuildDataManager(dataStorageRoot, true);\n    }\n    catch (Exception e) {\n      // second try\n      e.printStackTrace(System.err);\n      if (timestamps != null) {\n        timestamps.close();\n      }\n      if (dataManager != null) {\n        dataManager.close();\n      }\n      buildType = BuildType.PROJECT_REBUILD; // force project rebuild\n      FileUtil.delete(dataStorageRoot);\n      timestamps = new ProjectTimestamps(dataStorageRoot);\n      dataManager = new BuildDataManager(dataStorageRoot, true);\n      // second attempt succeded\n      msgHandler.processMessage(new CompilerMessage(\"compile-server\", BuildMessage.Kind.INFO, \"Project rebuild forced: \" + e.getMessage()));\n    }\n\n    pd = new ProjectDescriptor(project, fsState, timestamps, dataManager, BuildLoggingManager.DEFAULT);\n\n    try {\n      final CompileScope compileScope = createCompilationScope(buildType, pd, modules, artifacts, paths);\n      final IncProjectBuilder builder = new IncProjectBuilder(pd, BuilderRegistry.getInstance(), builderParams, cs);\n      if (msgHandler != null) {\n        builder.addMessageHandler(msgHandler);\n      }\n      switch (buildType) {\n        case PROJECT_REBUILD:\n          builder.build(compileScope, false, true);\n          break;\n\n        case FORCED_COMPILATION:\n          builder.build(compileScope, false, false);\n          break;\n\n        case MAKE:\n          builder.build(compileScope, true, false);\n          break;\n\n        case CLEAN:\n          //todo[nik]\n  //        new ProjectBuilder(new GantBinding(), project).clean();\n          break;\n      }\n    }\n    finally {\n      pd.release();\n    }\n  }","id":64006,"modified_method":"private void runBuild(String projectPath, BuildType buildType, Set<String> modules, Collection<String> artifacts, Map<String, String> builderParams, Collection<String> paths, final MessageHandler msgHandler, CanceledStatus cs) throws Throwable{\n    boolean forceCleanCaches = false;\n    ProjectDescriptor pd;\n    final Project project = loadProject(projectPath);\n    final BuildFSState fsState = new BuildFSState(false);\n    ProjectTimestamps timestamps = null;\n    BuildDataManager dataManager = null;\n    final File dataStorageRoot = Utils.getDataStorageRoot(project);\n    try {\n      timestamps = new ProjectTimestamps(dataStorageRoot);\n      dataManager = new BuildDataManager(dataStorageRoot, true);\n      if (dataManager.versionDiffers()) {\n        forceCleanCaches = true;\n        msgHandler.processMessage(new CompilerMessage(\"build\", BuildMessage.Kind.INFO, \"Dependency data format has changed, project rebuild required\"));\n      }\n    }\n    catch (Exception e) {\n      // second try\n      LOG.info(e);\n      if (timestamps != null) {\n        timestamps.close();\n      }\n      if (dataManager != null) {\n        dataManager.close();\n      }\n      forceCleanCaches = true;\n      FileUtil.delete(dataStorageRoot);\n      timestamps = new ProjectTimestamps(dataStorageRoot);\n      dataManager = new BuildDataManager(dataStorageRoot, true);\n      // second attempt succeded\n      msgHandler.processMessage(new CompilerMessage(\"build\", BuildMessage.Kind.INFO, \"Project rebuild forced: \" + e.getMessage()));\n    }\n\n    pd = new ProjectDescriptor(project, fsState, timestamps, dataManager, BuildLoggingManager.DEFAULT);\n\n    try {\n      for (int attempt = 0; attempt < 2; attempt++) {\n        if (forceCleanCaches && modules.isEmpty() && paths.isEmpty()) {\n          // if compilation scope is the whole project and cache rebuild is forced, use PROJECT_REBUILD for faster compilation\n          buildType = BuildType.PROJECT_REBUILD;\n        }\n        final CompileScope compileScope = createCompilationScope(buildType, pd, modules, artifacts, paths);\n        final IncProjectBuilder builder = new IncProjectBuilder(pd, BuilderRegistry.getInstance(), builderParams, cs);\n        builder.addMessageHandler(msgHandler);\n        try {\n          switch (buildType) {\n            case PROJECT_REBUILD:\n              builder.build(compileScope, false, true, forceCleanCaches);\n              break;\n\n            case FORCED_COMPILATION:\n              builder.build(compileScope, false, false, forceCleanCaches);\n              break;\n\n            case MAKE:\n              builder.build(compileScope, true, false, forceCleanCaches);\n              break;\n\n            case CLEAN:\n              //todo[nik]\n      //        new ProjectBuilder(new GantBinding(), project).clean();\n              break;\n          }\n          break; // break attempts loop\n        }\n        catch (RebuildRequestedException e) {\n          // todo: do not try second attempt here; just notify the calling process about \"rebuild requested\" and end the session\n          if (attempt == 0) {\n            LOG.info(e);\n            forceCleanCaches = true;\n          }\n          else {\n            throw e;\n          }\n        }\n      }\n    }\n    finally {\n      pd.release();\n    }\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void runBuild(CompileContext context) throws ProjectBuildException {\n    context.setDone(0.0f);\n\n    LOG.info(\"Building project '\" + context.getProject().getProjectName() + \"'; isRebuild:\" +context.isProjectRebuild() + \"; isMake:\" + context.isMake());\n\n    if (context.isProjectRebuild()) {\n      cleanOutputRoots(context);\n    }\n\n    context.processMessage(new ProgressMessage(\"Running 'before' tasks\"));\n    runTasks(context, myBuilderRegistry.getBeforeTasks());\n\n    context.setCompilingTests(false);\n    context.processMessage(new ProgressMessage(\"Checking production sources\"));\n    buildChunks(context, myProductionChunks);\n\n    context.setCompilingTests(true);\n    context.processMessage(new ProgressMessage(\"Checking test sources\"));\n    buildChunks(context, myTestChunks);\n\n    context.processMessage(new ProgressMessage(\"Building project\"));\n    runProjectLevelBuilders(context);\n\n    context.processMessage(new ProgressMessage(\"Running 'after' tasks\"));\n    runTasks(context, myBuilderRegistry.getAfterTasks());\n\n    context.processMessage(new ProgressMessage(\"Finished, saving caches...\"));\n  }","id":64007,"modified_method":"private void runBuild(CompileContext context, boolean forceCleanCaches) throws ProjectBuildException {\n    context.setDone(0.0f);\n\n    LOG.info(\"Building project '\" + context.getProject().getProjectName() + \"'; isRebuild:\" +context.isProjectRebuild() + \"; isMake:\" + context.isMake());\n\n    if (context.isProjectRebuild() || forceCleanCaches) {\n      cleanOutputRoots(context);\n    }\n\n    context.processMessage(new ProgressMessage(\"Running 'before' tasks\"));\n    runTasks(context, myBuilderRegistry.getBeforeTasks());\n\n    context.setCompilingTests(false);\n    context.processMessage(new ProgressMessage(\"Checking production sources\"));\n    buildChunks(context, myProductionChunks);\n\n    context.setCompilingTests(true);\n    context.processMessage(new ProgressMessage(\"Checking test sources\"));\n    buildChunks(context, myTestChunks);\n\n    context.processMessage(new ProgressMessage(\"Building project\"));\n    runProjectLevelBuilders(context);\n\n    context.processMessage(new ProgressMessage(\"Running 'after' tasks\"));\n    runTasks(context, myBuilderRegistry.getAfterTasks());\n\n    context.processMessage(new ProgressMessage(\"Finished, saving caches...\"));\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void build(CompileScope scope, final boolean isMake, final boolean isProjectRebuild) {\n    final LowMemoryWatcher memWatcher = LowMemoryWatcher.register(new Forceable() {\n      @Override\n      public boolean isDirty() {\n        return true; // always perform flush when not enough memory\n      }\n\n      @Override\n      public void force() {\n        myProjectDescriptor.dataManager.flush(false);\n        myProjectDescriptor.timestamps.getStorage().force();\n      }\n    });\n    CompileContext context = null;\n    try {\n      try {\n        if (myProjectDescriptor.dataManager.versionDiffers()) {\n          myMessageDispatcher.processMessage(new CompilerMessage(\n            COMPILE_SERVER_NAME, BuildMessage.Kind.INFO, \"Dependency data format has changed, project rebuild required\"\n          ));\n          context = createContextForForcedRebuild(scope, isMake, isProjectRebuild);\n        }\n        else {\n          context = createContext(scope, isMake, isProjectRebuild);\n        }\n        runBuild(context);\n      }\n      catch (ProjectBuildException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof PersistentEnumerator.CorruptedException || cause instanceof MappingFailedException || cause instanceof IOException) {\n          // force rebuild\n          myMessageDispatcher.processMessage(new CompilerMessage(\n            COMPILE_SERVER_NAME, BuildMessage.Kind.INFO,\n            \"Internal caches are corrupted or have outdated format, forcing project rebuild: \" +\n            e.getMessage())\n          );\n          flushContext(context);\n          context = createContextForForcedRebuild(scope, isMake, isProjectRebuild);\n          runBuild(context);\n        }\n        else {\n          throw e;\n        }\n      }\n      myProjectDescriptor.dataManager.saveVersion();\n    }\n    catch (ProjectBuildException e) {\n      final Throwable cause = e.getCause();\n      if (cause == null) {\n        final String msg = e.getMessage();\n        if (!StringUtil.isEmpty(msg)) {\n          myMessageDispatcher.processMessage(new ProgressMessage(msg));\n        }\n      }\n      else {\n        myMessageDispatcher.processMessage(new CompilerMessage(COMPILE_SERVER_NAME, cause));\n      }\n    }\n    finally {\n      memWatcher.stop();\n      flushContext(context);\n      // wait for the async tasks\n      for (Future task : myAsyncTasks) {\n        try {\n          task.get();\n        }\n        catch (Throwable th) {\n          LOG.info(th);\n        }\n      }\n    }\n  }","id":64008,"modified_method":"public void build(CompileScope scope, final boolean isMake, final boolean isProjectRebuild, boolean forceCleanCaches) throws RebuildRequestedException{\n    final LowMemoryWatcher memWatcher = LowMemoryWatcher.register(new Forceable() {\n      @Override\n      public boolean isDirty() {\n        return true; // always perform flush when not enough memory\n      }\n\n      @Override\n      public void force() {\n        myProjectDescriptor.dataManager.flush(false);\n        myProjectDescriptor.timestamps.getStorage().force();\n      }\n    });\n    CompileContext context = null;\n    try {\n      context = createContext(scope, isMake, isProjectRebuild);\n      runBuild(context, forceCleanCaches);\n      myProjectDescriptor.dataManager.saveVersion();\n    }\n    catch (ProjectBuildException e) {\n      final Throwable cause = e.getCause();\n      if (cause instanceof PersistentEnumerator.CorruptedException || cause instanceof MappingFailedException || cause instanceof IOException) {\n        myMessageDispatcher.processMessage(new CompilerMessage(\n          COMPILE_SERVER_NAME, BuildMessage.Kind.INFO,\n          \"Internal caches are corrupted or have outdated format, forcing project rebuild: \" +\n          e.getMessage())\n        );\n        throw new RebuildRequestedException(cause);\n      }\n      else {\n        if (cause == null) {\n          final String msg = e.getMessage();\n          if (!StringUtil.isEmpty(msg)) {\n            myMessageDispatcher.processMessage(new ProgressMessage(msg));\n          }\n        }\n        else {\n          myMessageDispatcher.processMessage(new CompilerMessage(COMPILE_SERVER_NAME, cause));\n        }\n      }\n    }\n    finally {\n      memWatcher.stop();\n      flushContext(context);\n      // wait for the async tasks\n      for (Future task : myAsyncTasks) {\n        try {\n          task.get();\n        }\n        catch (Throwable th) {\n          LOG.info(th);\n        }\n      }\n    }\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doTest() throws Exception {\n    final String projectPath = getWorkDir() + File.separator + \".idea\";\n    final Project project = new Project();\n\n    final Sdk jdk = project.createSdk(\"JavaSDK\", \"IDEA jdk\", \"1.6\", System.getProperty(\"java.home\"), null);\n    final List<String> paths = new LinkedList<String>();\n\n    paths.add(FileUtil.toSystemIndependentName(ClasspathBootstrap.getResourcePath(Object.class).getCanonicalPath()));\n\n    jdk.setClasspath(paths);\n\n    IdeaProjectLoader.loadFromPath(project, projectPath, \"\");\n\n    final File dataStorageRoot = Utils.getDataStorageRoot(project);\n    final TestJavaBuilderLogger javaBuilderLogger = new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(getWorkDir() + File.separator));\n    final ProjectDescriptor projectDescriptor =\n      new ProjectDescriptor(project, new BuildFSState(true), new ProjectTimestamps(dataStorageRoot),\n                            new BuildDataManager(dataStorageRoot, true), new BuildLoggingManager(new ArtifactBuilderLoggerImpl(), javaBuilderLogger));\n    try {\n      new IncProjectBuilder(\n        projectDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL\n      ).build(\n        new AllProjectScope(project, Collections.<Artifact>emptySet(), true), false, true\n      );\n\n      modify();\n\n      if (SystemInfo.isUnix) {\n        Thread.sleep(1000L);\n      }\n\n      new IncProjectBuilder(\n        projectDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL\n      ).build(\n        new AllProjectScope(project, Collections.<Artifact>emptySet(), false), true, false\n      );\n\n      final String expected = StringUtil.convertLineSeparators(FileUtil.loadFile(new File(getBaseDir() + \".log\")));\n      final String actual = javaBuilderLogger.myLog.toString();\n      assertEquals(expected, actual);\n    }\n    finally {\n      projectDescriptor.release();\n    }\n  }","id":64009,"modified_method":"public void doTest() throws Exception {\n    final String projectPath = getWorkDir() + File.separator + \".idea\";\n    final Project project = new Project();\n\n    final Sdk jdk = project.createSdk(\"JavaSDK\", \"IDEA jdk\", \"1.6\", System.getProperty(\"java.home\"), null);\n    final List<String> paths = new LinkedList<String>();\n\n    paths.add(FileUtil.toSystemIndependentName(ClasspathBootstrap.getResourcePath(Object.class).getCanonicalPath()));\n\n    jdk.setClasspath(paths);\n\n    IdeaProjectLoader.loadFromPath(project, projectPath, \"\");\n\n    final File dataStorageRoot = Utils.getDataStorageRoot(project);\n    final TestJavaBuilderLogger javaBuilderLogger = new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(getWorkDir() + File.separator));\n    final ProjectDescriptor projectDescriptor =\n      new ProjectDescriptor(project, new BuildFSState(true), new ProjectTimestamps(dataStorageRoot),\n                            new BuildDataManager(dataStorageRoot, true), new BuildLoggingManager(new ArtifactBuilderLoggerImpl(), javaBuilderLogger));\n    try {\n      new IncProjectBuilder(\n        projectDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL\n      ).build(\n        new AllProjectScope(project, Collections.<Artifact>emptySet(), true), false, true, false\n      );\n\n      modify();\n\n      if (SystemInfo.isUnix) {\n        Thread.sleep(1000L);\n      }\n\n      new IncProjectBuilder(\n        projectDescriptor, BuilderRegistry.getInstance(), Collections.<String, String>emptyMap(), CanceledStatus.NULL\n      ).build(\n        new AllProjectScope(project, Collections.<Artifact>emptySet(), false), true, false, false\n      );\n\n      final String expected = StringUtil.convertLineSeparators(FileUtil.loadFile(new File(getBaseDir() + \".log\")));\n      final String actual = javaBuilderLogger.myLog.toString();\n      assertEquals(expected, actual);\n    }\n    finally {\n      projectDescriptor.release();\n    }\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void startBuild(String projectPath, BuildType buildType, Set<String> modules, Collection<String> artifacts,\n                         Map<String, String> builderParams, Collection<String> paths, final MessageHandler msgHandler, CanceledStatus cs) throws Throwable{\n\n\n    ProjectDescriptor pd;\n    synchronized (myConfigurationLock) {\n      pd = myProjects.get(projectPath);\n      if (pd == null) {\n        final Project project = loadProject(projectPath);\n        final BuildFSState fsState = new BuildFSState(false);\n        ProjectTimestamps timestamps = null;\n        BuildDataManager dataManager = null;\n        final File dataStorageRoot = Utils.getDataStorageRoot(project);\n        try {\n          timestamps = new ProjectTimestamps(dataStorageRoot);\n          dataManager = new BuildDataManager(dataStorageRoot, myKeepTempCachesInMemory);\n        }\n        catch (Exception e) {\n          // second try\n          e.printStackTrace(System.err);\n          if (timestamps != null) {\n            timestamps.close();\n          }\n          if (dataManager != null) {\n            dataManager.close();\n          }\n          buildType = BuildType.PROJECT_REBUILD; // force project rebuild\n          FileUtil.delete(dataStorageRoot);\n          timestamps = new ProjectTimestamps(dataStorageRoot);\n          dataManager = new BuildDataManager(dataStorageRoot, myKeepTempCachesInMemory);\n          // second attempt succeded\n          msgHandler.processMessage(new CompilerMessage(\"compile-server\", BuildMessage.Kind.INFO, \"Project rebuild forced: \" + e.getMessage()));\n        }\n\n        pd = new ProjectDescriptor(project, fsState, timestamps, dataManager, BuildLoggingManager.DEFAULT);\n        myProjects.put(projectPath, pd);\n      }\n      pd.incUsageCounter();\n    }\n\n    try {\n      final CompileScope compileScope = createCompilationScope(buildType, pd, modules, artifacts, paths);\n      final IncProjectBuilder builder = new IncProjectBuilder(pd, BuilderRegistry.getInstance(), builderParams, cs);\n      if (msgHandler != null) {\n        builder.addMessageHandler(msgHandler);\n      }\n      switch (buildType) {\n        case PROJECT_REBUILD:\n          builder.build(compileScope, false, true);\n          break;\n\n        case FORCED_COMPILATION:\n          builder.build(compileScope, false, false);\n          break;\n\n        case MAKE:\n          builder.build(compileScope, true, false);\n          break;\n\n        case CLEAN:\n          //todo[nik]\n  //        new ProjectBuilder(new GantBinding(), project).clean();\n          break;\n      }\n    }\n    finally {\n      pd.release();\n      clearZipIndexCache();\n    }\n  }","id":64010,"modified_method":"public void startBuild(String projectPath, BuildType buildType, Set<String> modules, Collection<String> artifacts,\n                         Map<String, String> builderParams, Collection<String> paths, final MessageHandler msgHandler, CanceledStatus cs) throws Throwable{\n\n    boolean forceCleanCaches = false;\n    ProjectDescriptor pd;\n    synchronized (myConfigurationLock) {\n      pd = myProjects.get(projectPath);\n      if (pd == null) {\n        final Project project = loadProject(projectPath);\n        final BuildFSState fsState = new BuildFSState(false);\n        ProjectTimestamps timestamps = null;\n        BuildDataManager dataManager = null;\n        final File dataStorageRoot = Utils.getDataStorageRoot(project);\n        try {\n          timestamps = new ProjectTimestamps(dataStorageRoot);\n          dataManager = new BuildDataManager(dataStorageRoot, myKeepTempCachesInMemory);\n          if (dataManager.versionDiffers()) {\n            forceCleanCaches = true;\n            msgHandler.processMessage(new CompilerMessage(\"compile-server\", BuildMessage.Kind.INFO, \"Dependency data format has changed, project rebuild required\"));\n          }\n        }\n        catch (Exception e) {\n          // second try\n          LOG.info(e);\n          if (timestamps != null) {\n            timestamps.close();\n          }\n          if (dataManager != null) {\n            dataManager.close();\n          }\n          forceCleanCaches = true;\n          FileUtil.delete(dataStorageRoot);\n          timestamps = new ProjectTimestamps(dataStorageRoot);\n          dataManager = new BuildDataManager(dataStorageRoot, myKeepTempCachesInMemory);\n          // second attempt succeded\n          msgHandler.processMessage(new CompilerMessage(\"compile-server\", BuildMessage.Kind.INFO, \"Project rebuild forced: \" + e.getMessage()));\n        }\n\n        pd = new ProjectDescriptor(project, fsState, timestamps, dataManager, BuildLoggingManager.DEFAULT);\n        myProjects.put(projectPath, pd);\n      }\n      pd.incUsageCounter();\n    }\n\n    try {\n      for (int attempt = 0; attempt < 2; attempt++) {\n        if (forceCleanCaches && modules.isEmpty() && paths.isEmpty()) {\n          // if compilation scope is the whole project and cache rebuild is forced, use PROJECT_REBUILD for faster compilation\n          buildType = BuildType.PROJECT_REBUILD;\n        }\n        final CompileScope compileScope = createCompilationScope(buildType, pd, modules, artifacts, paths);\n        final IncProjectBuilder builder = new IncProjectBuilder(pd, BuilderRegistry.getInstance(), builderParams, cs);\n        builder.addMessageHandler(msgHandler);\n        try {\n          switch (buildType) {\n            case PROJECT_REBUILD:\n              builder.build(compileScope, false, true, forceCleanCaches);\n              break;\n\n            case FORCED_COMPILATION:\n              builder.build(compileScope, false, false, forceCleanCaches);\n              break;\n\n            case MAKE:\n              builder.build(compileScope, true, false, forceCleanCaches);\n              break;\n\n            case CLEAN:\n              //todo[nik]\n      //        new ProjectBuilder(new GantBinding(), project).clean();\n              break;\n          }\n          break; // break attempts loop\n        }\n        catch (RebuildRequestedException e) {\n          if (attempt == 0) {\n            LOG.info(e);\n            forceCleanCaches = true;\n          }\n          else {\n            throw e;\n          }\n        }\n      }\n    }\n    finally {\n      pd.release();\n      clearZipIndexCache();\n    }\n  }","commit_id":"a3c603ebf577c14e0b107a37be528e220ab8a1ca","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void runBuild(final Set<String> modulesSet, boolean includeTests) {\n    if (!myDryRun) {\n      info(\"Starting build, caches are saved to \" + myDataStorageRoot.getAbsolutePath());\n      Standalone.runBuild(myModelLoader, myDataStorageRoot, BuildType.PROJECT_REBUILD, modulesSet, Collections.<String>emptyList(),\n                          includeTests);\n    }\n    else {\n      info(\"Building skipped as we're running dry\");\n    }\n  }","id":64011,"modified_method":"private void runBuild(final Set<String> modulesSet, boolean includeTests) {\n    if (!myDryRun) {\n      final AntMessageHandler messageHandler = new AntMessageHandler();\n      Logger.setFactory(new AntLoggerFactory(messageHandler));\n      info(\"Starting build: modules = \" + modulesSet + \", caches are saved to \" + myDataStorageRoot.getAbsolutePath());\n      try {\n        Standalone.runBuild(myModelLoader, myDataStorageRoot, BuildType.PROJECT_REBUILD, modulesSet, Collections.<String>emptyList(),\n                            includeTests, messageHandler);\n      }\n      catch (Throwable e) {\n        error(e);\n      }\n    }\n    else {\n      info(\"Building skipped as we're running dry\");\n    }\n  }","commit_id":"870d9e7d801c81e924d2bd2a76ef2815c4ee0ec3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void info(String message) {\n    myProject.log(message, Project.MSG_INFO);\n  }","id":64012,"modified_method":"public void setUseInProcessJavac(boolean value) {\n    //doesn't make sense for new builders\n  }","commit_id":"870d9e7d801c81e924d2bd2a76ef2815c4ee0ec3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void stage(String message) {\n    if (myBuildInfoPrinter != null) {\n      myBuildInfoPrinter.printProgressMessage(this, message);\n    }\n    else {\n      myProject.log(message, Project.MSG_INFO);\n    }\n  }","id":64013,"modified_method":"public void stage(String message) {\n    myBuildInfoPrinter.printProgressMessage(this, message);\n  }","commit_id":"870d9e7d801c81e924d2bd2a76ef2815c4ee0ec3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void loadAndRunBuild(final String projectPath) {\n    String globalOptionsPath = null;\n    if (configPath != null) {\n      File optionsDir = new File(configPath, \"options\");\n      if (!optionsDir.isDirectory()) {\n        System.err.println(\"'\" + configPath + \"' is not valid config path: \" + optionsDir.getAbsolutePath() + \" not found\");\n        return;\n      }\n      globalOptionsPath = optionsDir.getAbsolutePath();\n    }\n\n    ParameterizedRunnable<JpsModel> initializer = null;\n    String scriptPath = initializationScriptPath;\n    if (scriptPath != null) {\n      File scriptFile = new File(scriptPath);\n      if (!scriptFile.isFile()) {\n        System.err.println(\"Script '\" + scriptPath + \"' not found\");\n        return;\n      }\n      initializer = new GroovyModelInitializer(scriptFile);\n    }\n\n    Map<String, String> pathVars = new HashMap<String, String>();\n    pathVars.put(\"USER_HOME\", System.getProperty(\"user.home\"));\n    JpsModelLoaderImpl loader = new JpsModelLoaderImpl(projectPath, globalOptionsPath, pathVars, null, \"\", initializer);\n    BuildType buildType = incremental ? BuildType.MAKE : BuildType.PROJECT_REBUILD;\n    Set<String> modulesSet = new HashSet<String>(Arrays.asList(modules));\n    List<String> artifactsList = Arrays.asList(artifacts);\n    File dataStorageRoot = Utils.getDataStorageRoot(projectPath);\n    if (dataStorageRoot == null) {\n      System.err.println(\"Error: Cannot determine build data storage root for project \" + projectPath);\n      return;\n    }\n\n    runBuild(loader, dataStorageRoot, buildType, modulesSet, artifactsList, true);\n  }","id":64014,"modified_method":"public void loadAndRunBuild(final String projectPath) {\n    String globalOptionsPath = null;\n    if (configPath != null) {\n      File optionsDir = new File(configPath, \"options\");\n      if (!optionsDir.isDirectory()) {\n        System.err.println(\"'\" + configPath + \"' is not valid config path: \" + optionsDir.getAbsolutePath() + \" not found\");\n        return;\n      }\n      globalOptionsPath = optionsDir.getAbsolutePath();\n    }\n\n    ParameterizedRunnable<JpsModel> initializer = null;\n    String scriptPath = initializationScriptPath;\n    if (scriptPath != null) {\n      File scriptFile = new File(scriptPath);\n      if (!scriptFile.isFile()) {\n        System.err.println(\"Script '\" + scriptPath + \"' not found\");\n        return;\n      }\n      initializer = new GroovyModelInitializer(scriptFile);\n    }\n\n    Map<String, String> pathVars = new HashMap<String, String>();\n    pathVars.put(\"USER_HOME\", System.getProperty(\"user.home\"));\n    JpsModelLoaderImpl loader = new JpsModelLoaderImpl(projectPath, globalOptionsPath, pathVars, null, \"\", initializer);\n    BuildType buildType = incremental ? BuildType.MAKE : BuildType.PROJECT_REBUILD;\n    Set<String> modulesSet = new HashSet<String>(Arrays.asList(modules));\n    List<String> artifactsList = Arrays.asList(artifacts);\n    File dataStorageRoot = Utils.getDataStorageRoot(projectPath);\n    if (dataStorageRoot == null) {\n      System.err.println(\"Error: Cannot determine build data storage root for project \" + projectPath);\n      return;\n    }\n\n    try {\n      runBuild(loader, dataStorageRoot, buildType, modulesSet, artifactsList, true, new ConsoleMessageHandler());\n    }\n    catch (Throwable t) {\n      System.err.println(\"Internal error: \" + t.getMessage());\n      t.printStackTrace();\n    }\n  }","commit_id":"870d9e7d801c81e924d2bd2a76ef2815c4ee0ec3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, BuildType buildType, Set<String> modulesSet,\n                              List<String> artifactsList, final boolean includeTests) {\n    final BuildRunner buildRunner = new BuildRunner(loader, modulesSet, buildType, artifactsList, Collections.<String>emptyList(), Collections.<String, String>emptyMap());\n    final ConsoleMessageHandler messageHandler = new ConsoleMessageHandler();\n    try {\n      ProjectDescriptor descriptor = buildRunner.load(messageHandler, dataStorageRoot, new BuildFSState(true));\n      buildRunner.runBuild(descriptor, CanceledStatus.NULL, null, messageHandler, includeTests);\n    }\n    catch (Throwable t) {\n      System.err.println(\"Internal error: \" + t.getMessage());\n      t.printStackTrace();\n    }\n  }","id":64015,"modified_method":"public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, BuildType buildType, Set<String> modulesSet,\n                              List<String> artifactsList, final boolean includeTests, final MessageHandler messageHandler) throws Exception {\n    final BuildRunner buildRunner = new BuildRunner(loader, modulesSet, buildType, artifactsList, Collections.<String>emptyList(), Collections.<String, String>emptyMap());\n    ProjectDescriptor descriptor = buildRunner.load(messageHandler, dataStorageRoot, new BuildFSState(true));\n    buildRunner.runBuild(descriptor, CanceledStatus.NULL, null, messageHandler, includeTests);\n  }","commit_id":"870d9e7d801c81e924d2bd2a76ef2815c4ee0ec3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            print(\"(\");\n            printExprs(tree.args);\n            print(\")\");\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","id":64016,"modified_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            if (tree.args != null) {\n\t            print(\"(\");\n\t            printExprs(tree.args);\n\t            print(\")\");\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","commit_id":"3ec6e21244064b5ad5b37696fd970d5634f5410a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            if (tree.args.length() > 0) {\n\t            print(\"(\");\n\t            printExprs(tree.args);\n\t            print(\")\");\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","id":64017,"modified_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            if (tree.args.length() > 0) {\n\t            print(\"(\");\n\t            if (tree.args.length() == 1) {\n\t                JCExpression annot = tree.args.head;\n\t                if (annot instanceof JCAssign) {\n\t                    JCAssign assign = (JCAssign)annot;\n\t                    if (\"value\".equals(assign.lhs.toString())) {\n                            printExpr(assign.rhs);\n\t                    } else {\n\t                        printExpr(assign);\n\t                    }\n\t                } else {\n\t                    printExpr(annot);\n\t                }\n\t            } else {\n\t                printExprs(tree.args);\n\t            }\n\t            print(\")\");\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","commit_id":"88a3489e2826309e581867cda3d8fe6058323bdf","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            print(\"(\");\n            printExprs(tree.args);\n            print(\")\");\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","id":64018,"modified_method":"public void visitAnnotation(JCAnnotation tree) {\n        try {\n            print(\"@\");\n            printExpr(tree.annotationType);\n            if (tree.args != null) {\n\t            print(\"(\");\n\t            printExprs(tree.args);\n\t            print(\")\");\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","commit_id":"e457e2f0ebd3b4a67711b6e3c2572ae12485c723","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"protected Iterator<IEObjectDescription> getExportedObjects(String model) throws Exception {\n\t\tXtendFile file = file(model);\n\t\tIResourceDescription rd = resourceDescriptionManager.getResourceDescription(file.eResource());\n\t\tIterable<IEObjectDescription> exportedObjects = rd.getExportedObjects();\n\t\treturn exportedObjects.iterator();\n\t}","id":64019,"modified_method":"protected Iterator<IEObjectDescription> getExportedObjects(String model) throws Exception {\n\t\tIResourceDescription rd = getResourceDescription(model);\n\t\tIterable<IEObjectDescription> exportedObjects = rd.getExportedObjects();\n\t\treturn exportedObjects.iterator();\n\t}","commit_id":"8a94526fceb8ff7bbf909423e84d88bf92df57a7","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n   * Acquires a resource of type {code T} from the pool.\n   *\n   * This method is like {@link #acquire()}, but it will time out if an object cannot be\n   * acquired before the specified amount of time.\n   *\n   * @param time an amount of time to wait\n   * @param unit the unit to use for time\n   * @return a resource taken from the pool\n   * @throws IOException if it fails to acquire because of the failure to create a new resource\n   * @throws TimeoutException if it fails to acquire because of time out\n   */\n  @Override\n  public T acquire(long time, TimeUnit unit) throws IOException, TimeoutException {\n    long endTimeMs = System.currentTimeMillis() + unit.toMillis(time);\n\n    // Try to take a resource without blocking\n    ResourceInternal<T> resource = poll();\n    if (resource != null) {\n      if (isHealthy(resource.mResource)) {\n        return resource.mResource;\n      } else {\n        LOG.info(\"Clearing unhealthy resource {}.\", resource.mResource);\n        closeResource(resource.mResource);\n        remove(resource.mResource);\n        return acquire(time, unit);\n      }\n    }\n\n    if (!isFull()) {\n      // If the resource pool is empty but capacity is not yet full, create a new resource.\n      T newResource = createNewResource();\n      ResourceInternal<T> resourceInternal = new ResourceInternal<>(newResource);\n      if (add(resourceInternal)) {\n        return newResource;\n      } else {\n        closeResource(newResource);\n      }\n    }\n\n    // Otherwise, try to take a resource from the pool, blocking if none are available.\n    try {\n      mLock.lock();\n      while (true) {\n        resource = poll();\n        if (resource != null) {\n          break;\n        }\n        long currTimeMs = System.currentTimeMillis();\n        if (currTimeMs >= endTimeMs || !mNotEmpty\n            .await(endTimeMs - currTimeMs, TimeUnit.MILLISECONDS)) {\n          throw new TimeoutException(\"Acquire resource times out.\");\n        }\n      }\n    } catch (InterruptedException e) {\n      throw Throwables.propagate(e);\n    } finally {\n      mLock.unlock();\n    }\n\n    if (isHealthy(resource.mResource)) {\n      return resource.mResource;\n    } else {\n      closeResource(resource.mResource);\n      remove(resource.mResource);\n      // Acquire without waiting.\n      return acquire(endTimeMs - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n  }","id":64020,"modified_method":"/**\n   * Acquires a resource of type {code T} from the pool.\n   *\n   * This method is like {@link #acquire()}, but it will time out if an object cannot be\n   * acquired before the specified amount of time.\n   *\n   * @param time an amount of time to wait\n   * @param unit the unit to use for time\n   * @return a resource taken from the pool\n   * @throws IOException if it fails to acquire because of the failure to create a new resource\n   * @throws TimeoutException if it fails to acquire because of time out\n   */\n  @Override\n  public T acquire(long time, TimeUnit unit) throws IOException, TimeoutException {\n    long endTimeMs = System.currentTimeMillis() + unit.toMillis(time);\n\n    // Try to take a resource without blocking\n    ResourceInternal<T> resource = poll();\n    if (resource != null) {\n      checkHealthyAndRetry(resource.mResource, endTimeMs);\n    }\n\n    if (!isFull()) {\n      // If the resource pool is empty but capacity is not yet full, create a new resource.\n      T newResource = createNewResource();\n      ResourceInternal<T> resourceInternal = new ResourceInternal<>(newResource);\n      if (add(resourceInternal)) {\n        return newResource;\n      } else {\n        closeResource(newResource);\n      }\n    }\n\n    // Otherwise, try to take a resource from the pool, blocking if none are available.\n    try {\n      mLock.lock();\n      while (true) {\n        resource = poll();\n        if (resource != null) {\n          break;\n        }\n        long currTimeMs = System.currentTimeMillis();\n        if (currTimeMs >= endTimeMs || !mNotEmpty\n            .await(endTimeMs - currTimeMs, TimeUnit.MILLISECONDS)) {\n          throw new TimeoutException(\"Acquire resource times out.\");\n        }\n      }\n    } catch (InterruptedException e) {\n      throw Throwables.propagate(e);\n    } finally {\n      mLock.unlock();\n    }\n\n    return checkHealthyAndRetry(resource.mResource, endTimeMs);\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"private RPCResponse request(RPCRequest rpcBlockWriteRequest) throws Exception {\n    InetSocketAddress address =\n        new InetSocketAddress(mNettyDataServer.getBindHost(), mNettyDataServer.getPort());\n    Bootstrap clientBootstrap = NettyClient.createClientBootstrap();\n    ChannelFuture f = clientBootstrap.connect(address).sync();\n    Channel channel = f.channel();\n    try {\n      SingleResponseListener listener = new SingleResponseListener();\n      ((ClientHandler) channel.pipeline().last()).addListener(listener);\n      channel.writeAndFlush(rpcBlockWriteRequest);\n      return listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    } finally {\n      channel.close().sync();\n    }\n  }","id":64021,"modified_method":"private RPCResponse request(RPCRequest rpcBlockWriteRequest) throws Exception {\n    InetSocketAddress address =\n        new InetSocketAddress(mNettyDataServer.getBindHost(), mNettyDataServer.getPort());\n    Bootstrap clientBootstrap = NettyClient.createClientBootstrap();\n    ChannelFuture f = clientBootstrap.connect(address).sync();\n    Channel channel = f.channel();\n    try {\n      SingleResponseListener listener = new SingleResponseListener();\n      channel.pipeline().get(ClientHandler.class).addListener(listener);\n      channel.writeAndFlush(rpcBlockWriteRequest);\n      return listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    } finally {\n      channel.close().sync();\n    }\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public ByteBuffer readRemoteBlock(InetSocketAddress address, long blockId, long offset,\n      long length, long lockId, long sessionId) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_BLOCK_READ_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      ((ClientHandler) channel.pipeline().last()).addListener(listener);\n      ChannelFuture channelFuture = channel\n          .writeAndFlush(new RPCBlockReadRequest(blockId, offset, length, lockId, sessionId));\n      channelFuture = channelFuture.sync();\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to write to %s for block %d with error %s.\", address.toString(), blockId,\n            channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_BLOCK_READ_RESPONSE:\n          RPCBlockReadResponse blockResponse = (RPCBlockReadResponse) response;\n          LOG.debug(\"Data {} from remote machine {} received\", blockId, address);\n\n          RPCResponse.Status status = blockResponse.getStatus();\n          if (status == RPCResponse.Status.SUCCESS) {\n            // always clear the previous response before reading another one\n            close();\n            mReadResponse = blockResponse;\n            return blockResponse.getPayloadDataBuffer().getReadOnlyByteBuffer();\n          }\n          throw new IOException(status.getMessage() + \" response: \" + blockResponse);\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_BLOCK_READ_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_BLOCK_READ_FAILURES.inc();\n      try {\n        channel.close().sync();\n      } catch (InterruptedException ee) {\n        throw Throwables.propagate(ee);\n      }\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        ((ClientHandler) channel.pipeline().last()).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","id":64022,"modified_method":"@Override\n  public ByteBuffer readRemoteBlock(InetSocketAddress address, long blockId, long offset,\n      long length, long lockId, long sessionId) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_BLOCK_READ_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      channel.pipeline().get(ClientHandler.class).addListener(listener);\n      ChannelFuture channelFuture = channel\n          .writeAndFlush(new RPCBlockReadRequest(blockId, offset, length, lockId, sessionId));\n      channelFuture = channelFuture.sync();\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to write to %s for block %d with error %s.\", address.toString(), blockId,\n            channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_BLOCK_READ_RESPONSE:\n          RPCBlockReadResponse blockResponse = (RPCBlockReadResponse) response;\n          LOG.debug(\"Data {} from remote machine {} received\", blockId, address);\n\n          RPCResponse.Status status = blockResponse.getStatus();\n          if (status == RPCResponse.Status.SUCCESS) {\n            // always clear the previous response before reading another one\n            close();\n            mReadResponse = blockResponse;\n            return blockResponse.getPayloadDataBuffer().getReadOnlyByteBuffer();\n          }\n          throw new IOException(status.getMessage() + \" response: \" + blockResponse);\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_BLOCK_READ_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_BLOCK_READ_FAILURES.inc();\n      try {\n        channel.close().sync();\n      } catch (InterruptedException ee) {\n        throw Throwables.propagate(ee);\n      }\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        channel.pipeline().get(ClientHandler.class).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Set up.\n   */\n  @Before\n  public void before() throws InterruptedException {\n    mNettyRemoteBlockReader = new NettyRemoteBlockReader(sBootstrap);\n\n    mChannel = Mockito.mock(Channel.class);\n    mChannelFuture = Mockito.mock(ChannelFuture.class);\n    mChannelPipeline = Mockito.mock(ChannelPipeline.class);\n\n    Mockito.when(mChannel.close()).thenReturn(mChannelFuture);\n    Mockito.when(mChannelFuture.sync()).thenReturn(mChannelFuture);\n    Mockito.when(mChannelFuture.channel()).thenReturn(mChannel);\n    Mockito.when(mChannelFuture.isDone()).thenReturn(true);\n    Mockito.when(mChannelFuture.isSuccess()).thenReturn(true);\n    Mockito.when(sBootstrap.connect(Mockito.any(SocketAddress.class))).thenReturn(mChannelFuture);\n    Mockito.when(sBootstrap.connect()).thenReturn(mChannelFuture);\n    Mockito.when(sBootstrap.clone()).thenReturn(sBootstrap);\n    Mockito.when(sBootstrap.remoteAddress(Mockito.any(InetSocketAddress.class)))\n        .thenReturn(sBootstrap);\n    Mockito.when(mChannel.pipeline()).thenReturn(mChannelPipeline);\n    Mockito.when(mChannelPipeline.last()).thenReturn(sClientHandler);\n  }","id":64023,"modified_method":"/**\n   * Set up.\n   */\n  @Before\n  public void before() throws InterruptedException {\n    mNettyRemoteBlockReader = new NettyRemoteBlockReader(sBootstrap);\n\n    mChannel = Mockito.mock(Channel.class);\n    mChannelFuture = Mockito.mock(ChannelFuture.class);\n    mChannelPipeline = Mockito.mock(ChannelPipeline.class);\n\n    Mockito.when(mChannel.close()).thenReturn(mChannelFuture);\n    Mockito.when(mChannelFuture.sync()).thenReturn(mChannelFuture);\n    Mockito.when(mChannelFuture.channel()).thenReturn(mChannel);\n    Mockito.when(mChannelFuture.isDone()).thenReturn(true);\n    Mockito.when(mChannelFuture.isSuccess()).thenReturn(true);\n    Mockito.when(sBootstrap.connect(Mockito.any(SocketAddress.class))).thenReturn(mChannelFuture);\n    Mockito.when(sBootstrap.connect()).thenReturn(mChannelFuture);\n    Mockito.when(sBootstrap.clone()).thenReturn(sBootstrap);\n    Mockito.when(sBootstrap.remoteAddress(Mockito.any(InetSocketAddress.class)))\n        .thenReturn(sBootstrap);\n    Mockito.when(mChannel.pipeline()).thenReturn(mChannelPipeline);\n    Mockito.when(mChannelPipeline.get(Mockito.any(Class.class))).thenReturn(sClientHandler);\n\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public void write(byte[] bytes, int offset, int length) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_BLOCK_WRITE_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(mAddress, mClientBootstrap);\n      listener = new SingleResponseListener();\n      ((ClientHandler) channel.pipeline().last()).addListener(listener);\n      ChannelFuture channelFuture = channel.writeAndFlush(\n          new RPCBlockWriteRequest(mSessionId, mBlockId, mWrittenBytes, length,\n              new DataByteArrayChannel(bytes, offset, length))).sync();\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to write to %s for block %d with error %s.\", mAddress.toString(),\n            mBlockId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_BLOCK_WRITE_RESPONSE:\n          RPCBlockWriteResponse resp = (RPCBlockWriteResponse) response;\n          RPCResponse.Status status = resp.getStatus();\n          LOG.debug(\"status: {} from remote machine {} received\", status, mAddress);\n\n          if (status != RPCResponse.Status.SUCCESS) {\n            throw new IOException(ExceptionMessage.BLOCK_WRITE_ERROR.getMessage(mBlockId,\n                mSessionId, mAddress, status.getMessage()));\n          }\n          mWrittenBytes += length;\n          break;\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_BLOCK_WRITE_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_BLOCK_WRITE_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        ((ClientHandler) channel.pipeline().last()).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(mAddress, channel);\n      }\n    }\n  }","id":64024,"modified_method":"@Override\n  public void write(byte[] bytes, int offset, int length) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_BLOCK_WRITE_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(mAddress, mClientBootstrap);\n      listener = new SingleResponseListener();\n      channel.pipeline().get(ClientHandler.class).addListener(listener);\n      ChannelFuture channelFuture = channel.writeAndFlush(\n          new RPCBlockWriteRequest(mSessionId, mBlockId, mWrittenBytes, length,\n              new DataByteArrayChannel(bytes, offset, length))).sync();\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to write to %s for block %d with error %s.\", mAddress.toString(),\n            mBlockId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_BLOCK_WRITE_RESPONSE:\n          RPCBlockWriteResponse resp = (RPCBlockWriteResponse) response;\n          RPCResponse.Status status = resp.getStatus();\n          LOG.debug(\"status: {} from remote machine {} received\", status, mAddress);\n\n          if (status != RPCResponse.Status.SUCCESS) {\n            throw new IOException(ExceptionMessage.BLOCK_WRITE_ERROR.getMessage(mBlockId,\n                mSessionId, mAddress, status.getMessage()));\n          }\n          mWrittenBytes += length;\n          break;\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_BLOCK_WRITE_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_BLOCK_WRITE_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        channel.pipeline().get(ClientHandler.class).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(mAddress, channel);\n      }\n    }\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public ByteBuffer read(InetSocketAddress address, long ufsFileId, long offset, long length)\n      throws IOException {\n    // For a zero length read, directly return without trying the Netty call.\n    if (length == 0) {\n      return ByteBuffer.allocate(0);\n    }\n\n    Metrics.NETTY_UFS_READ_OPS.inc();\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      ((ClientHandler) channel.pipeline().last()).addListener(listener);\n      ChannelFuture channelFuture =\n          channel.writeAndFlush(new RPCFileReadRequest(ufsFileId, offset, length)).sync();\n\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to read ufs file from %s for ufsFilId %d with error %s.\",\n            address.toString(), ufsFileId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_FILE_READ_RESPONSE:\n          RPCFileReadResponse resp = (RPCFileReadResponse) response;\n          LOG.debug(\"Data for ufs file id {} from machine {} received\", ufsFileId, address);\n          RPCResponse.Status status = resp.getStatus();\n          if (status == RPCResponse.Status.SUCCESS) {\n            // always clear the previous response before reading another one\n            cleanup();\n            // End of file reached\n            if (resp.isEOF()) {\n              return null;\n            }\n            mReadResponse = resp;\n            return resp.getPayloadDataBuffer().getReadOnlyByteBuffer();\n          }\n          throw new IOException(status.getMessage() + \" response: \" + resp);\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE.getMessage(\n              response.getType(), RPCMessage.Type.RPC_FILE_READ_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_UFS_READ_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        ((ClientHandler) channel.pipeline().last()).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","id":64025,"modified_method":"@Override\n  public ByteBuffer read(InetSocketAddress address, long ufsFileId, long offset, long length)\n      throws IOException {\n    // For a zero length read, directly return without trying the Netty call.\n    if (length == 0) {\n      return ByteBuffer.allocate(0);\n    }\n\n    Metrics.NETTY_UFS_READ_OPS.inc();\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      channel.pipeline().get(ClientHandler.class).addListener(listener);\n      ChannelFuture channelFuture =\n          channel.writeAndFlush(new RPCFileReadRequest(ufsFileId, offset, length)).sync();\n\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to read ufs file from %s for ufsFilId %d with error %s.\",\n            address.toString(), ufsFileId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_FILE_READ_RESPONSE:\n          RPCFileReadResponse resp = (RPCFileReadResponse) response;\n          LOG.debug(\"Data for ufs file id {} from machine {} received\", ufsFileId, address);\n          RPCResponse.Status status = resp.getStatus();\n          if (status == RPCResponse.Status.SUCCESS) {\n            // always clear the previous response before reading another one\n            cleanup();\n            // End of file reached\n            if (resp.isEOF()) {\n              return null;\n            }\n            mReadResponse = resp;\n            return resp.getPayloadDataBuffer().getReadOnlyByteBuffer();\n          }\n          throw new IOException(status.getMessage() + \" response: \" + resp);\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE.getMessage(\n              response.getType(), RPCMessage.Type.RPC_FILE_READ_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_UFS_READ_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        channel.pipeline().get(ClientHandler.class).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public void write(InetSocketAddress address, long ufsFileId, long fileOffset, byte[] source,\n      int offset, int length) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_UFS_WRITE_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      ((ClientHandler) channel.pipeline().last()).addListener(listener);\n      ChannelFuture channelFuture = channel.writeAndFlush(\n          new RPCFileWriteRequest(ufsFileId, fileOffset, length,\n              new DataByteArrayChannel(source, offset, length))).sync();\n\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to read ufs file from %s for ufsFilId %d with error %s.\",\n            address.toString(), ufsFileId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_FILE_WRITE_RESPONSE:\n          RPCFileWriteResponse resp = (RPCFileWriteResponse) response;\n          RPCResponse.Status status = resp.getStatus();\n          LOG.debug(\"status: {} from remote machine {} received\", status, address);\n\n          if (status != RPCResponse.Status.SUCCESS) {\n            throw new IOException(ExceptionMessage.UNDER_FILE_WRITE_ERROR.getMessage(ufsFileId,\n                address, status.getMessage()));\n          }\n          break;\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_FILE_WRITE_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_UFS_WRITE_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        ((ClientHandler) channel.pipeline().last()).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","id":64026,"modified_method":"@Override\n  public void write(InetSocketAddress address, long ufsFileId, long fileOffset, byte[] source,\n      int offset, int length) throws IOException {\n    SingleResponseListener listener = null;\n    Channel channel = null;\n    Metrics.NETTY_UFS_WRITE_OPS.inc();\n    try {\n      channel = BlockStoreContext.acquireNettyChannel(address, mClientBootstrap);\n      listener = new SingleResponseListener();\n      channel.pipeline().get(ClientHandler.class).addListener(listener);\n      ChannelFuture channelFuture = channel.writeAndFlush(\n          new RPCFileWriteRequest(ufsFileId, fileOffset, length,\n              new DataByteArrayChannel(source, offset, length))).sync();\n\n      if (channelFuture.isDone() && !channelFuture.isSuccess()) {\n        LOG.error(\"Failed to read ufs file from %s for ufsFilId %d with error %s.\",\n            address.toString(), ufsFileId, channelFuture.cause());\n        throw new IOException(channelFuture.cause());\n      }\n\n      RPCResponse response = listener.get(NettyClient.TIMEOUT_MS, TimeUnit.MILLISECONDS);\n\n      switch (response.getType()) {\n        case RPC_FILE_WRITE_RESPONSE:\n          RPCFileWriteResponse resp = (RPCFileWriteResponse) response;\n          RPCResponse.Status status = resp.getStatus();\n          LOG.debug(\"status: {} from remote machine {} received\", status, address);\n\n          if (status != RPCResponse.Status.SUCCESS) {\n            throw new IOException(ExceptionMessage.UNDER_FILE_WRITE_ERROR.getMessage(ufsFileId,\n                address, status.getMessage()));\n          }\n          break;\n        case RPC_ERROR_RESPONSE:\n          RPCErrorResponse error = (RPCErrorResponse) response;\n          throw new IOException(error.getStatus().getMessage());\n        default:\n          throw new IOException(ExceptionMessage.UNEXPECTED_RPC_RESPONSE\n              .getMessage(response.getType(), RPCMessage.Type.RPC_FILE_WRITE_RESPONSE));\n      }\n    } catch (Exception e) {\n      Metrics.NETTY_UFS_WRITE_FAILURES.inc();\n      throw new IOException(e);\n    } finally {\n      if (channel != null && listener != null) {\n        channel.pipeline().get(ClientHandler.class).removeListener(listener);\n      }\n      if (channel != null) {\n        BlockStoreContext.releaseNettyChannel(address, channel);\n      }\n    }\n  }","commit_id":"d0460ff23c3ce3dea35f616c5c7a242d121edf27","url":"https://github.com/amplab/tachyon"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n        WOComponent component = context.component();\n        String linkID = (String)valueForBinding(\"id\", component);\n        if (linkID == null) {\n        \tlinkID=ERXWOContext.safeIdentifierName(context, false);\n        }\n        String containerID = (String)valueForBinding(\"containerID\", linkID + \"Container\", component);\n        response.appendContentString(\"<a\");\n        String href = (String) valueForBinding(\"href\", component);\n        if (href == null) {\n        \tString directActionName = stringValueForBinding(\"directActionName\", component);\n        \tif (directActionName != null) {\n        \t\tNSDictionary queryDictionary = (NSDictionary)valueForBinding(\"queryDictionary\", component);\n        \t\tboolean secure = booleanValueForBinding(\"secure\", ERXRequest.isRequestSecure(context.request()), component);\n        \t\tif (secure) {\n              boolean generatingCompleteURLs = (context instanceof ERXWOContext) ? ((ERXWOContext)context)._generatingCompleteURLs() : false;\n              if (!generatingCompleteURLs) {\n        \t\t\t\tcontext._generateCompleteURLs();\n        \t\t\t}\n              try {\n          \t\t\thref = context._directActionURL(directActionName, queryDictionary, secure);\n          \t\t\tERXMutableURL u = new ERXMutableURL(href);\n          \t\t\tu.addQueryParameter(String.valueOf(System.currentTimeMillis()), null);\n          \t\t\thref = u.toExternalForm();\n              }\n              catch (MalformedURLException e) {\n                throw new NSForwardException(e);\n              }\n              finally {\n          \t\t\tif (!generatingCompleteURLs) {\n          \t\t\t\tcontext._generateRelativeURLs();\n          \t\t\t}\n              }\n        \t\t}\n        \t\telse {\n              href = context.directActionURLForActionNamed(directActionName, queryDictionary);\n        \t\t}\n        \t}\n        }\n        if(href == null) {\n            if (booleanValueForBinding(\"ajax\", false, component)) {\n            \tif (valueForBinding(\"id\", component) == null) {\n    \t\t\t\tthrow new IllegalArgumentException(\"If ajax = 'true', you must also bind 'id'.\");\n            \t}\n            \thref = AjaxUtils.ajaxComponentActionUrl(context);\n            }\n            else if(associations().objectForKey(\"action\") != null) {\n            \t// don't use ajax request handler here\n                href = context.componentActionURL();\n            }\n            if(href == null) {\n                href = \"#\" + containerID;\n            }\n        }\n        appendTagAttributeToResponse(response, \"href\", href);\n\t\tString relAttributeValue = \"ibox\";\n\t\tObject height = valueForBinding(\"height\", component);\n\t\tObject width = valueForBinding(\"width\", component);\n\t\tObject closeLabel = valueForBinding(\"closeLabel\", component);\n\t\tif (height != null) {\n\t\t\trelAttributeValue += \"&height=\" +  ERXStringUtilities.urlEncode(height.toString());\n\t\t}\n\t\tif (width != null) {\n\t\t\trelAttributeValue += \"&width=\" +  ERXStringUtilities.urlEncode(width.toString());\n\t\t}\n\t\tif (closeLabel != null) {\n\t\t\trelAttributeValue += \"&closeLabel=\" + ERXStringUtilities.urlEncode(closeLabel.toString());\n\t\t}\n\t\tif (booleanValueForBinding(\"locked\", false, component)) {\n\t\t\trelAttributeValue += \"&locked=true\";\n\t\t}\n\t\tresponse._appendTagAttributeAndValue(\"rel\", relAttributeValue, false); // don't escape the ampersands\n        appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n        appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n        appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n        appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n        appendTagAttributeToResponse(response, \"id\", linkID);\n        response.appendContentString(\">\");\n        if(!href.startsWith(\"#\") && childrenElements() != null && childrenElements().count() > 0) {\n        \tappendChildrenToResponse(response, context);\n        } else {\n            Object label = valueForBinding(\"label\", \"\", component);\n            response.appendContentString(label.toString());\n        }\n        response.appendContentString(\"<\/a>\");\n        if (AjaxUtils.isAjaxRequest(context.request())) {\n\t        NSMutableDictionary userInfo = AjaxUtils.mutableUserInfo(response);\n\t        if (!userInfo.containsKey(\"er.ajax.AjaxModalContainer.init\")) {\n\t            AjaxUtils.appendScriptHeader(response);\n\t            response.appendContentString(\"iBox.init()\");\n\t            AjaxUtils.appendScriptFooter(response);\n\t            userInfo.setObjectForKey(Boolean.TRUE, \"er.ajax.AjaxModalContainer.init\");\n\t        }\n        }\n        if (booleanValueForBinding(\"open\", false, component)) {\n        \tif (AjaxUtils.isAjaxRequest(context.request())) {\n        \t\t// PROTOTYPE FUNCTIONS\n        \t\tresponse.appendContentString(\"<script>iBox.handleTag.bind($wi('\" + linkID + \"'))()<\/script>\");\n        \t}\n        \telse {\n        \t\t// PROTOTYPE FUNCTIONS\n        \t\tresponse.appendContentString(\"<script>Event.observe(window, 'load', iBox.handleTag.bind($wi('\" + linkID + \"')))<\/script>\");\n        \t}\n        }\n        if(href.startsWith(\"#\")) {\n        \tresponse.appendContentString(\"<div\");\n\n        \tappendTagAttributeToResponse(response, \"id\", containerID);\n        \tappendTagAttributeToResponse(response, \"style\", \"display:none;\");\n        \tresponse.appendContentString(\">\");\n        \tappendChildrenToResponse(response, context);\n        \tresponse.appendContentString(\"<\/div>\");\n        }\n        super.appendToResponse(response, context);\n    }","id":64027,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n        WOComponent component = context.component();\n        String linkID = (String)valueForBinding(\"id\", component);\n        if (linkID == null) {\n        \tlinkID=ERXWOContext.safeIdentifierName(context, false);\n        }\n        String containerID = (String)valueForBinding(\"containerID\", linkID + \"Container\", component);\n        response.appendContentString(\"<a\");\n        String href = (String) valueForBinding(\"href\", component);\n        if (href == null) {\n        \tString directActionName = stringValueForBinding(\"directActionName\", component);\n        \tif (directActionName != null) {\n        \t\tNSDictionary queryDictionary = (NSDictionary)valueForBinding(\"queryDictionary\", component);\n        \t\tboolean secure = booleanValueForBinding(\"secure\", ERXRequest.isRequestSecure(context.request()), component);\n        \t\tif (secure) {\n              boolean generatingCompleteURLs = (context instanceof ERXWOContext) ? ((ERXWOContext)context)._generatingCompleteURLs() : false;\n              if (!generatingCompleteURLs) {\n        \t\t\t\tcontext._generateCompleteURLs();\n        \t\t\t}\n              try {\n          \t\t\thref = context._directActionURL(directActionName, queryDictionary, secure);\n          \t\t\tERXMutableURL u = new ERXMutableURL(href);\n          \t\t\tu.addQueryParameter(String.valueOf(System.currentTimeMillis()), null);\n          \t\t\thref = u.toExternalForm();\n              }\n              catch (MalformedURLException e) {\n                throw new NSForwardException(e);\n              }\n              finally {\n          \t\t\tif (!generatingCompleteURLs) {\n          \t\t\t\tcontext._generateRelativeURLs();\n          \t\t\t}\n              }\n        \t\t}\n        \t\telse {\n              href = context.directActionURLForActionNamed(directActionName, queryDictionary);\n        \t\t}\n        \t}\n        }\n        boolean isAjax = booleanValueForBinding(\"ajax\", false, component);\n        if(href == null) {\n\t\t\tif (isAjax) {\n            \tif (valueForBinding(\"id\", component) == null) {\n    \t\t\t\tthrow new IllegalArgumentException(\"If ajax = 'true', you must also bind 'id'.\");\n            \t}\n            \thref = AjaxUtils.ajaxComponentActionUrl(context);\n            }\n            else if(associations().objectForKey(\"action\") != null) {\n            \t// don't use ajax request handler here\n                href = context.componentActionURL();\n            }\n            if(href == null) {\n                href = \"#\" + containerID;\n            }\n        }\n        appendTagAttributeToResponse(response, \"href\", href);\n\t\tString relAttributeValue = \"ibox\";\n\t\tObject height = valueForBinding(\"height\", component);\n\t\tObject width = valueForBinding(\"width\", component);\n\t\tObject closeLabel = valueForBinding(\"closeLabel\", component);\n\t\tif (height != null) {\n\t\t\trelAttributeValue += \"&height=\" +  ERXStringUtilities.urlEncode(height.toString());\n\t\t}\n\t\tif (width != null) {\n\t\t\trelAttributeValue += \"&width=\" +  ERXStringUtilities.urlEncode(width.toString());\n\t\t}\n\t\tif (closeLabel != null) {\n\t\t\trelAttributeValue += \"&closeLabel=\" + ERXStringUtilities.urlEncode(closeLabel.toString());\n\t\t}\n\t\tif (booleanValueForBinding(\"locked\", false, component)) {\n\t\t\trelAttributeValue += \"&locked=true\";\n\t\t}\n\t\tresponse._appendTagAttributeAndValue(\"rel\", relAttributeValue, false); // don't escape the ampersands\n        appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n        appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n        appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n        appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n        appendTagAttributeToResponse(response, \"id\", linkID);\n        response.appendContentString(\">\");\n        if(!href.startsWith(\"#\") && !isAjax && childrenElements() != null && childrenElements().count() > 0) {\n        \tappendChildrenToResponse(response, context);\n        } else {\n            Object label = valueForBinding(\"label\", \"\", component);\n            response.appendContentString(label.toString());\n        }\n        response.appendContentString(\"<\/a>\");\n        if (AjaxUtils.isAjaxRequest(context.request())) {\n\t        NSMutableDictionary userInfo = AjaxUtils.mutableUserInfo(response);\n\t        if (!userInfo.containsKey(\"er.ajax.AjaxModalContainer.init\")) {\n\t            AjaxUtils.appendScriptHeader(response);\n\t            response.appendContentString(\"iBox.init()\");\n\t            AjaxUtils.appendScriptFooter(response);\n\t            userInfo.setObjectForKey(Boolean.TRUE, \"er.ajax.AjaxModalContainer.init\");\n\t        }\n        }\n        if (booleanValueForBinding(\"open\", false, component)) {\n        \tif (AjaxUtils.isAjaxRequest(context.request())) {\n        \t\t// PROTOTYPE FUNCTIONS\n        \t\tresponse.appendContentString(\"<script>iBox.handleTag.bind($wi('\" + linkID + \"'))()<\/script>\");\n        \t}\n        \telse {\n        \t\t// PROTOTYPE FUNCTIONS\n        \t\tresponse.appendContentString(\"<script>Event.observe(window, 'load', iBox.handleTag.bind($wi('\" + linkID + \"')))<\/script>\");\n        \t}\n        }\n        if(href.startsWith(\"#\")) {\n        \tresponse.appendContentString(\"<div\");\n\n        \tappendTagAttributeToResponse(response, \"id\", containerID);\n        \tappendTagAttributeToResponse(response, \"style\", \"display:none;\");\n        \tresponse.appendContentString(\">\");\n        \tappendChildrenToResponse(response, context);\n        \tresponse.appendContentString(\"<\/div>\");\n        }\n        super.appendToResponse(response, context);\n    }","commit_id":"7bdae8d5cb573be3a52387e9b4f1bdd712b20925","url":"https://github.com/wocommunity/wonder"},{"original_method":"public WOActionResults uploadSucceeded() {\n\t\tAjaxUploadProgress progress = uploadProgress();\n\t\ttry {\n\t\t\tboolean deleteFile = true;\n\t\t\tif (hasBinding(\"filePath\")) {\n\t\t\t\tsetValueForBinding(progress.fileName(), \"filePath\");\n\t\t\t}\n\n\t\t\tif (hasBinding(\"data\")) {\n\t\t\t\tNSData data = new NSData(progress.tempFile().toURL());\n\t\t\t\tsetValueForBinding(data, \"data\");\n\t\t\t}\n\n\t\t\tif (hasBinding(\"inputStream\")) {\n\t\t\t\tsetValueForBinding(new FileInputStream(progress.tempFile()), \"inputStream\");\n\t\t\t\tdeleteFile = false;\n\t\t\t}\n\n\t\t\tif (hasBinding(\"outputStream\")) {\n\t\t\t\tOutputStream outputStream = (OutputStream) valueForBinding(\"outputStream\");\n\t\t\t\tif (outputStream != null) {\n\t\t\t\t\tERXFileUtilities.writeInputStreamToOutputStream(new FileInputStream(progress.tempFile()), outputStream);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasBinding(\"streamToFilePath\")) {\n\t\t\t\tFile streamToFile = new File((String) valueForBinding(\"streamToFilePath\"));\n\t\t\t\tboolean renamedFile;\n\t\t\t\tboolean renameFile;\n\t\t\t\tif (streamToFile.exists()) {\n\t\t\t\t\trenameFile = ERXComponentUtilities.booleanValueForBinding(this, \"overwrite\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trenameFile = true;\n\t\t\t\t}\n\t\t\t\tif (renameFile && !streamToFile.isDirectory()) {\n\t\t\t\t\tERXFileUtilities.renameTo(progress.tempFile(), streamToFile);\n\t\t\t\t\trenamedFile = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trenamedFile = false;\n\t\t\t\t\tprogress.setFailure(new Exception (\"Could not rename file.\"));\n\t\t\t\t\treturn this.uploadFailed();\n\t\t\t\t}\n\t\t\t\tif (hasBinding(\"finalFilePath\")) {\n\t\t\t\t\tString finalFilePath;\n\t\t\t\t\tif (renamedFile) {\n\t\t\t\t\t\tfinalFilePath = streamToFile.getAbsolutePath();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfinalFilePath = progress.tempFile().getAbsolutePath();\n\t\t\t\t\t}\n\t\t\t\t\tsetValueForBinding(finalFilePath, \"finalFilePath\");\n\t\t\t\t}\n\t\t\t\tdeleteFile = false;\n\t\t\t}\n\n\t\t\tif (deleteFile) {\n\t\t\t\tprogress.dispose();\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tprogress.setFailure(t);\n\t\t\treturn this.uploadFailed();\n\t\t}\n\t\tfinally {\n\t\t\tuploadFinished();\n\t\t}\n\t\tWOActionResults results = (WOActionResults) valueForBinding(\"succeededAction\");\n\t\treturn results;\n\t}","id":64028,"modified_method":"public WOActionResults uploadSucceeded() {\n\t\tAjaxUploadProgress progress = uploadProgress();\n\t\ttry {\n\t\t\tboolean deleteFile = true;\n\t\t\tif (hasBinding(\"filePath\")) {\n\t\t\t\tsetValueForBinding(progress.fileName(), \"filePath\");\n\t\t\t}\n\n\t\t\tif (hasBinding(\"data\")) {\n\t\t\t\tNSData data = new NSData(progress.tempFile().toURL());\n\t\t\t\tsetValueForBinding(data, \"data\");\n\t\t\t}\n\n\t\t\tif (hasBinding(\"inputStream\")) {\n\t\t\t\tsetValueForBinding(new FileInputStream(progress.tempFile()), \"inputStream\");\n\t\t\t\tdeleteFile = false;\n\t\t\t}\n\n\t\t\tif (hasBinding(\"outputStream\")) {\n\t\t\t\tOutputStream outputStream = (OutputStream) valueForBinding(\"outputStream\");\n\t\t\t\tif (outputStream != null) {\n\t\t\t\t\tERXFileUtilities.writeInputStreamToOutputStream(new FileInputStream(progress.tempFile()), outputStream);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasBinding(\"streamToFilePath\")) {\n\t\t\t\tFile streamToFile = new File((String) valueForBinding(\"streamToFilePath\"));\n\t\t\t\tboolean renamedFile;\n\t\t\t\tboolean renameFile;\n\t\t\t\tif (streamToFile.exists()) {\n\t\t\t\t\tboolean overwrite = ERXComponentUtilities.booleanValueForBinding(this, \"overwrite\");\n\t\t\t\t\t\n\t\t\t\t\tif (streamToFile.isDirectory()) {\n\t\t\t\t\t\tFile parentDir = streamToFile;\n\t\t\t\t\t\tString fileName = fileNameFromBrowserSubmittedPath(progress.fileName());\n\t\t\t\t\t\tstreamToFile = new File(parentDir, fileName);\n\t\t\t\t\t\tif (!overwrite) {\n\t\t\t\t\t\t\t// try to reserve file name\n\t\t\t\t\t\t\tif (!streamToFile.createNewFile()) {\n\t\t\t\t\t\t\t\t// didn't work, so try new name consisting of\n\t\t\t\t\t\t\t\t// prefix + number + suffix\n\t\t\t\t\t\t\t\tint dotIndex = fileName.lastIndexOf('.');\n\t\t\t\t\t\t\t\tString prefix, suffix;\n\n\t\t\t\t\t\t\t\tif (dotIndex < 0) {\n\t\t\t\t\t\t\t\t\tprefix = fileName;\n\t\t\t\t\t\t\t\t\tsuffix = \"\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tprefix = fileName.substring(0, dotIndex);\n\t\t\t\t\t\t\t\t\tsuffix = fileName.substring(dotIndex);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// try until we can reserve a file\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t// using System.currentTimeMillis() as number for now\n\t\t\t\t\t\t\t\t\tstreamToFile = new File(parentDir, prefix + \"-\" + System.currentTimeMillis() + suffix);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twhile (!streamToFile.createNewFile());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trenameFile = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\trenameFile = overwrite;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trenameFile = true;\n\t\t\t\t}\n\n\t\t\t\tif (renameFile && !streamToFile.isDirectory()) {\n\t\t\t\t\tERXFileUtilities.renameTo(progress.tempFile(), streamToFile);\n\t\t\t\t\trenamedFile = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trenamedFile = false;\n\t\t\t\t\tprogress.setFailure(new Exception (\"Could not rename file.\"));\n\t\t\t\t\treturn this.uploadFailed();\n\t\t\t\t}\n\t\t\t\tif (hasBinding(\"finalFilePath\")) {\n\t\t\t\t\tString finalFilePath;\n\t\t\t\t\tif (renamedFile) {\n\t\t\t\t\t\tfinalFilePath = streamToFile.getAbsolutePath();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfinalFilePath = progress.tempFile().getAbsolutePath();\n\t\t\t\t\t}\n\t\t\t\t\tsetValueForBinding(finalFilePath, \"finalFilePath\");\n\t\t\t\t}\n\t\t\t\tdeleteFile = false;\n\t\t\t}\n\n\t\t\tif (deleteFile) {\n\t\t\t\tprogress.dispose();\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tprogress.setFailure(t);\n\t\t\treturn this.uploadFailed();\n\t\t}\n\t\tfinally {\n\t\t\tuploadFinished();\n\t\t}\n\t\tWOActionResults results = (WOActionResults) valueForBinding(\"succeededAction\");\n\t\treturn results;\n\t}","commit_id":"f6e01d5f2b76f00faa28329a0c3bbf8bd3b5aaec","url":"https://github.com/wocommunity/wonder"},{"original_method":"public NSArray nodes() {\n\t\tObject rootNode = treeModel().rootTreeNode();\n\t\tif (_nodes == null || rootNode == null || !rootNode.equals(_lastParent) || !AjaxUtils.booleanValueForBinding(\"cache\", true, _keyAssociations, parent())) {\n\t\t\tNSMutableArray nodes = new NSMutableArray();\n\t\t\tboolean showRoot = AjaxUtils.booleanValueForBinding(\"showRoot\", true, _keyAssociations, parent());\n\t\t\t_fillInOpenNodes(treeModel().rootTreeNode(), nodes, showRoot);\n\t\t\t_nodes = nodes;\n\t\t\t_lastRootNode = rootNode;\n\t\t}\n\t\treturn _nodes;\n\t}","id":64029,"modified_method":"public NSArray nodes() {\n\t\tObject rootNode = treeModel().rootTreeNode();\n\t\tboolean useCache = AjaxUtils.booleanValueForBinding(\"cache\", true, _keyAssociations, parent());\n\t\tif (_nodes == null || rootNode == null || !rootNode.equals(_lastRootNode) || !useCache) {\n\t\t\tNSMutableArray nodes = new NSMutableArray();\n\t\t\tboolean showRoot = AjaxUtils.booleanValueForBinding(\"showRoot\", true, _keyAssociations, parent());\n\t\t\t_fillInOpenNodes(treeModel().rootTreeNode(), nodes, showRoot);\n\t\t\t_nodes = nodes;\n\t\t\t_lastRootNode = rootNode;\n\t\t}\n\t\treturn _nodes;\n\t}","commit_id":"515208d7e22edb5fe93d050edfedf306282f5ed8","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n\tpublic boolean supports(HandlerResult result) {\n\t\tObject handler = result.getHandler();\n\t\tif (handler instanceof HandlerMethod) {\n\t\t\tMethod method = ((HandlerMethod) handler).getMethod();\n\t\t\treturn AnnotatedElementUtils.isAnnotated(method, ResponseBody.class.getName());\n\t\t}\n\t\treturn false;\n\t}","id":64030,"modified_method":"@Override\n\tpublic boolean supports(HandlerResult result) {\n\t\tObject handler = result.getHandler();\n\t\tif (handler instanceof HandlerMethod) {\n\t\t\tMethodParameter returnType = ((HandlerMethod) handler).getReturnType();\n\t\t\tClass<?> containingClass = returnType.getContainingClass();\n\t\t\treturn (AnnotationUtils.findAnnotation(containingClass, ResponseBody.class) != null ||\n\t\t\t\t\treturnType.getMethodAnnotation(ResponseBody.class) != null);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"da90f03f4c7e192a23aaf64680cccf1c51c2b0f5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public static boolean hasTest(PsiModifierListOwner element, boolean checkHierarchy, boolean checkDisabled, boolean checkJavadoc) {\n    //LanguageLevel effectiveLanguageLevel = element.getManager().getEffectiveLanguageLevel();\n    //boolean is15 = effectiveLanguageLevel != LanguageLevel.JDK_1_4 && effectiveLanguageLevel != LanguageLevel.JDK_1_3;\n    boolean hasAnnotation = AnnotationUtil.isAnnotated(element, TEST_ANNOTATION_FQN, checkHierarchy, true);\n    if (hasAnnotation) {\n      if (checkDisabled) {\n        PsiAnnotation annotation = AnnotationUtil.findAnnotation(element, true, TEST_ANNOTATION_FQN);\n        if (annotation != null) {\n          if (isDisabled(annotation)) return false;\n        }\n      }\n      return true;\n    }\n    if (element instanceof PsiDocCommentOwner && hasTestJavaDoc((PsiDocCommentOwner) element, checkJavadoc))\n      return true;\n    //now we check all methods for the test annotation\n    if (element instanceof PsiClass) {\n      PsiClass psiClass = (PsiClass) element;\n      for (PsiMethod method : psiClass.getAllMethods()) {\n        if (AnnotationUtil.isAnnotated(method, TEST_ANNOTATION_FQN, false, true)) return true;\n        if (AnnotationUtil.isAnnotated(method, FACTORY_ANNOTATION_FQN, false, true)) return true;\n        if (hasTestJavaDoc(method, checkJavadoc)) return true;\n      }\n      return AnnotationUtil.isAnnotated(element, TEST_ANNOTATION_FQN, true, true);\n    } else if (element instanceof PsiMethod) {\n      //if it's a method, we check if the class it's in has a global @Test annotation\n      PsiClass psiClass = ((PsiMethod)element).getContainingClass();\n      if (psiClass != null) {\n        if (AnnotationUtil.isAnnotated(psiClass, TEST_ANNOTATION_FQN, true, true)) {\n          //even if it has a global test, we ignore private methods\n          boolean isPrivate = element.hasModifierProperty(PsiModifier.PRIVATE);\n          return !isPrivate && !element.hasModifierProperty(PsiModifier.STATIC) && !hasConfig(element);\n        }\n        if (hasTestJavaDoc(psiClass, checkJavadoc)) return true;\n      }\n    }\n    return false;\n  }","id":64031,"modified_method":"public static boolean hasTest(PsiModifierListOwner element, boolean checkHierarchy, boolean checkDisabled, boolean checkJavadoc) {\n    //LanguageLevel effectiveLanguageLevel = element.getManager().getEffectiveLanguageLevel();\n    //boolean is15 = effectiveLanguageLevel != LanguageLevel.JDK_1_4 && effectiveLanguageLevel != LanguageLevel.JDK_1_3;\n    boolean hasAnnotation = AnnotationUtil.isAnnotated(element, TEST_ANNOTATION_FQN, checkHierarchy, true);\n    if (hasAnnotation) {\n      if (checkDisabled) {\n        PsiAnnotation annotation = AnnotationUtil.findAnnotation(element, true, TEST_ANNOTATION_FQN);\n        if (annotation != null) {\n          if (isDisabled(annotation)) return false;\n        }\n      }\n      return true;\n    }\n    if (element instanceof PsiDocCommentOwner && hasTestJavaDoc((PsiDocCommentOwner) element, checkJavadoc))\n      return true;\n    //now we check all methods for the test annotation\n    if (element instanceof PsiClass) {\n      PsiClass psiClass = (PsiClass) element;\n      for (PsiMethod method : psiClass.getAllMethods()) {\n        PsiAnnotation annotation = AnnotationUtil.findAnnotation(method, true, TEST_ANNOTATION_FQN);\n        if (annotation != null) {\n          if (checkDisabled) {\n            if (isDisabled(annotation)) continue;\n          }\n          return true;\n        }\n        if (AnnotationUtil.isAnnotated(method, FACTORY_ANNOTATION_FQN, false, true)) return true;\n        if (hasTestJavaDoc(method, checkJavadoc)) return true;\n      }\n      return false;\n    } else if (element instanceof PsiMethod) {\n      //if it's a method, we check if the class it's in has a global @Test annotation\n      PsiClass psiClass = ((PsiMethod)element).getContainingClass();\n      if (psiClass != null) {\n        final PsiAnnotation annotation = AnnotationUtil.findAnnotation(psiClass, true, TEST_ANNOTATION_FQN);\n        if (annotation != null) {\n          if (checkDisabled && isDisabled(annotation)) return false;\n          //even if it has a global test, we ignore private methods\n          boolean isPrivate = element.hasModifierProperty(PsiModifier.PRIVATE);\n          return !isPrivate && !element.hasModifierProperty(PsiModifier.STATIC) && !hasConfig(element);\n        }\n        else if (hasTestJavaDoc(psiClass, checkJavadoc)) return true;\n      }\n    }\n    return false;\n  }","commit_id":"8ddbfb53ed40dc38b5f999eb0d924f7ff67749c8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public <T extends DatasetDefinition> T get(String datasetTypeName) {\n      T def = registry.get(datasetTypeName);\n      if (def == null) {\n        DatasetTypeMeta typeMeta = datasets.getTypeMDS().getType(datasetTypeName);\n        if (typeMeta == null) {\n          throw new RuntimeException(\n            new IllegalArgumentException(\"Requested dataset type is not available: \" + datasetTypeName));\n        }\n        try {\n          def = new DatasetDefinitionLoader(locationFactory).load(typeMeta, registry);\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n      }\n      usedTypes.add(datasetTypeName);\n      return def;\n    }","id":64032,"modified_method":"@Override\n    public <T extends DatasetDefinition> T get(String datasetTypeName) {\n      T def;\n      if (registry.hasType(datasetTypeName)) {\n        def = registry.get(datasetTypeName);\n      } else {\n        DatasetTypeMeta typeMeta = datasets.getTypeMDS().getType(datasetTypeName);\n        if (typeMeta == null) {\n          throw new IllegalArgumentException(\"Requested dataset type is not available: \" + datasetTypeName);\n        }\n        try {\n          def = new DatasetDefinitionLoader(locationFactory).load(typeMeta, registry);\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n      }\n      usedTypes.add(datasetTypeName);\n      return def;\n    }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void add(DatasetDefinition def) {\n      String typeName = def.getName();\n      if (datasets.getTypeMDS().getType(typeName) != null) {\n        throw new RuntimeException(\n          new DatasetModuleConflictException(\"Cannot add dataset type: it already exists: \" + typeName));\n      }\n      types.add(typeName);\n      registry.add(def);\n    }","id":64033,"modified_method":"@Override\n    public void add(DatasetDefinition def) {\n      String typeName = def.getName();\n      if (datasets.getTypeMDS().getType(typeName) != null) {\n        String msg = \"Cannot add dataset type: it already exists: \" + typeName;\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      types.add(typeName);\n      registry.add(def);\n    }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void add(DatasetDefinition def) {\n    datasetTypes.put(def.getName(), def);\n  }","id":64034,"modified_method":"@Override\n  public void add(DatasetDefinition def) {\n    String typeName = def.getName();\n    if (datasetTypes.containsKey(typeName)) {\n      throw new IllegalArgumentException(\"Cannot add dataset type: it already exists: \" + typeName);\n    }\n    datasetTypes.put(typeName, def);\n  }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public <T extends DatasetDefinition> T get(String datasetType) {\n    DatasetDefinition def = datasetTypes.get(datasetType);\n    if (def == null) {\n      LOG.warn(\"Requested dataset type does NOT exist: \" + datasetType);\n      // we still return null, as client logic may use info about presence of specific type\n      return null;\n    }\n    return (T) def;\n  }","id":64035,"modified_method":"@Override\n  public <T extends DatasetDefinition> T get(String datasetType) {\n    DatasetDefinition def = datasetTypes.get(datasetType);\n    if (def == null) {\n      String msg = \"Requested dataset type does NOT exist: \" + datasetType;\n      LOG.debug(msg);\n      throw new IllegalArgumentException(msg);\n    }\n    return (T) def;\n  }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public synchronized void updateInstance(String datasetInstanceName, DatasetProperties props)\n    throws InstanceConflictException, IOException {\n    DatasetSpecification oldSpec = instances.get(datasetInstanceName);\n    if (oldSpec == null) {\n      throw new InstanceConflictException(\"Dataset instance with name does not exist: \" + datasetInstanceName);\n    }\n    String datasetType = oldSpec.getType();\n    DatasetDefinition def = registry.get(datasetType);\n    Preconditions.checkNotNull(def, \"Dataset type '%s' is not registered\", datasetType);\n    DatasetSpecification spec = def.configure(datasetInstanceName, props);\n    instances.put(datasetInstanceName, spec);\n    def.getAdmin(spec, null).upgrade();\n  }","id":64036,"modified_method":"@Override\n  public synchronized void updateInstance(String datasetInstanceName, DatasetProperties props)\n    throws InstanceConflictException, IOException {\n    DatasetSpecification oldSpec = instances.get(datasetInstanceName);\n    if (oldSpec == null) {\n      throw new InstanceConflictException(\"Dataset instance with name does not exist: \" + datasetInstanceName);\n    }\n    String datasetType = oldSpec.getType();\n    Preconditions.checkNotNull(registry.hasType(datasetType), \"Dataset type '%s' is not registered\", datasetType);\n    DatasetDefinition def = registry.get(datasetType);\n    DatasetSpecification spec = def.configure(datasetInstanceName, props);\n    instances.put(datasetInstanceName, spec);\n    def.getAdmin(spec, null).upgrade();\n  }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void add(DatasetDefinition def) {\n      String typeName = def.getName();\n      if (delegate.get(typeName) != null) {\n        throw new RuntimeException(\n          new DatasetModuleConflictException(\"Cannot add dataset type: it already exists: \" + typeName));\n      }\n      types.add(typeName);\n      delegate.add(def);\n    }","id":64037,"modified_method":"@Override\n    public void add(DatasetDefinition def) {\n      delegate.add(def);\n      types.add(def.getName());\n    }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public synchronized void addInstance(String datasetType, String datasetInstanceName, DatasetProperties props)\n    throws InstanceConflictException, IOException {\n    if (instances.get(datasetInstanceName) != null) {\n      throw new InstanceConflictException(\"Dataset instance with name already exists: \" + datasetInstanceName);\n    }\n\n    DatasetDefinition def = registry.get(datasetType);\n    Preconditions.checkNotNull(def, \"Dataset type '%s' is not registered\", datasetType);\n    DatasetSpecification spec = def.configure(datasetInstanceName, props);\n    instances.put(datasetInstanceName, spec);\n    def.getAdmin(spec, null).create();\n    instances.put(datasetInstanceName, spec);\n    LOG.info(\"Created dataset {} of type {}\", datasetInstanceName, datasetType);\n  }","id":64038,"modified_method":"@Override\n  public synchronized void addInstance(String datasetType, String datasetInstanceName, DatasetProperties props)\n    throws InstanceConflictException, IOException {\n    if (instances.get(datasetInstanceName) != null) {\n      throw new InstanceConflictException(\"Dataset instance with name already exists: \" + datasetInstanceName);\n    }\n\n    Preconditions.checkNotNull(registry.hasType(datasetType), \"Dataset type '%s' is not registered\", datasetType);\n    DatasetDefinition def = registry.get(datasetType);\n    DatasetSpecification spec = def.configure(datasetInstanceName, props);\n    instances.put(datasetInstanceName, spec);\n    def.getAdmin(spec, null).create();\n    instances.put(datasetInstanceName, spec);\n    LOG.info(\"Created dataset {} of type {}\", datasetInstanceName, datasetType);\n  }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public synchronized boolean hasType(String typeName) throws DatasetManagementException {\n    return registry.get(typeName) != null;\n  }","id":64039,"modified_method":"@Override\n  public synchronized boolean hasType(String typeName) throws DatasetManagementException {\n    return registry.hasType(typeName);\n  }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public <T extends DatasetDefinition> T get(String datasetTypeName) {\n      T def = delegate.get(datasetTypeName);\n      if (def == null) {\n        throw new RuntimeException(\n          new IllegalArgumentException(\"Requested dataset type is not available: \" + datasetTypeName));\n      }\n      usedTypes.add(datasetTypeName);\n      return def;\n    }","id":64040,"modified_method":"@Override\n    public <T extends DatasetDefinition> T get(String datasetTypeName) {\n      T def = delegate.get(datasetTypeName);\n      usedTypes.add(datasetTypeName);\n      return def;\n    }","commit_id":"e321dea03be36289b4c9209db2b27361df9ee70c","url":"https://github.com/caskdata/cdap"},{"original_method":"public Connection(String source, String destination) {\n    this.source = source;\n    this.destination = destination;\n  }","id":64041,"modified_method":"public Connection(String from, String to) {\n    this.from = from;\n    this.to = to;\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"public ETLConfig(ETLStage source, List<ETLStage> sinks, List<ETLStage> transforms,\n                   List<Connection> connections, Resources resources) {\n    this.source = source;\n    this.sinks = sinks;\n    this.transforms = transforms;\n    this.connections = connections;\n    this.resources = resources;\n  }","id":64042,"modified_method":"public ETLConfig(ETLStage source, List<ETLStage> sinks, List<ETLStage> transforms,\n                   List<Connection> connections, Resources resources) {\n    this.source = source;\n    this.sinks = sinks;\n    this.transforms = transforms;\n    this.connections = getValidConnections(connections);\n    this.resources = resources;\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void beforeSubmit(MapReduceContext context) throws Exception {\n    Job job = context.getHadoopJob();\n    Configuration hConf = job.getConfiguration();\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n\n    batchSource = context.newPluginInstance(sourcePluginId);\n    sourceContext = new MapReduceSourceContext(context, mrMetrics, new DatasetContextLookupProvider(context),\n                                               sourcePluginId, context.getRuntimeArguments());\n    batchSource.prepareRun(sourceContext);\n\n    hConf.set(RUNTIME_ARGS_KEY_PREFIX + sourcePluginId,\n                      GSON.toJson(sourceContext.getRuntimeArguments(), RUNTIME_ARGS_TYPE));\n\n    String transformInfosStr = properties.get(Constants.Transform.PLUGINIDS);\n    Preconditions.checkNotNull(transformInfosStr, \"Transform plugin ids not found in program properties.\");\n\n    List<TransformInfo> transformInfos = GSON.fromJson(transformInfosStr, TRANSFORMINFO_LIST_TYPE);\n\n    // setup time partition for each error dataset\n    for (TransformInfo transformInfo : transformInfos) {\n      if (transformInfo.getErrorDatasetName() != null) {\n        addPropertiesToErrorDataset(transformInfo.getErrorDatasetName(), context);\n      }\n    }\n\n    List<SinkOutput> sinkOutputs = new ArrayList<>();\n    String sinkPluginIdsStr = properties.get(Constants.Sink.PLUGINIDS);\n    // should never happen\n    Preconditions.checkNotNull(sinkPluginIdsStr, \"Sink plugin ids could not be found in program properties.\");\n\n    List<SinkInfo> sinkInfos = GSON.fromJson(sinkPluginIdsStr, SINK_INFO_TYPE);\n    batchSinks = new HashMap<>(sinkInfos.size());\n    sinkContexts = new HashMap<>(sinkInfos.size());\n    for (SinkInfo sinkInfo : sinkInfos) {\n      BatchConfigurable<BatchSinkContext> batchSink = context.newPluginInstance(sinkInfo.getSinkId());\n      MapReduceSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics,\n                                                                  new DatasetContextLookupProvider(context),\n                                                                  sinkInfo.getSinkId(), context.getRuntimeArguments());\n      sinkContexts.put(sinkInfo.getSinkId(), sinkContext);\n      batchSinks.put(sinkInfo.getSinkId(), batchSink);\n\n      batchSink.prepareRun(sinkContext);\n      sinkOutputs.add(new SinkOutput(sinkInfo.getSinkId(), sinkContext.getOutputNames(),\n                                     sinkInfo.getErrorDatasetName()));\n\n      if (sinkInfo.getErrorDatasetName() != null) {\n        addPropertiesToErrorDataset(sinkInfo.getErrorDatasetName(), context);\n      }\n      hConf.set(RUNTIME_ARGS_KEY_PREFIX + sinkInfo.getSinkId(),\n                GSON.toJson(sinkContext.getRuntimeArguments(), RUNTIME_ARGS_TYPE));\n    }\n    hConf.set(SINK_OUTPUTS_KEY, GSON.toJson(sinkOutputs));\n\n    job.setMapperClass(ETLMapper.class);\n    job.setNumReduceTasks(0);\n  }","id":64043,"modified_method":"@Override\n  public void beforeSubmit(MapReduceContext context) throws Exception {\n    Job job = context.getHadoopJob();\n    Configuration hConf = job.getConfiguration();\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    Pipeline pipeline = GSON.fromJson(properties.get(Constants.PIPELINEID), Pipeline.class);\n    // following should never happen\n    Preconditions.checkNotNull(pipeline, \"Pipeline is null\");\n    Preconditions.checkNotNull(pipeline.getSinks(), \"Sinks could not be found in program properties\");\n    // empty transform list is created during pipeline register\n    Preconditions.checkNotNull(pipeline.getTransforms());\n    Preconditions.checkNotNull(pipeline.getConnections(), \"Connections could not be found in program properties\");\n\n    String sourcePluginId = pipeline.getSource();\n\n    batchSource = context.newPluginInstance(sourcePluginId);\n    sourceContext = new MapReduceSourceContext(context, mrMetrics, new DatasetContextLookupProvider(context),\n                                               sourcePluginId, context.getRuntimeArguments());\n    batchSource.prepareRun(sourceContext);\n\n    hConf.set(RUNTIME_ARGS_KEY_PREFIX + sourcePluginId,\n              GSON.toJson(sourceContext.getRuntimeArguments(), RUNTIME_ARGS_TYPE));\n\n\n    List<TransformInfo> transformInfos = pipeline.getTransforms();\n\n\n    // setup time partition for each error dataset\n    for (TransformInfo transformInfo : transformInfos) {\n      if (transformInfo.getErrorDatasetName() != null) {\n        addPropertiesToErrorDataset(transformInfo.getErrorDatasetName(), context);\n      }\n    }\n\n    List<SinkOutput> sinkOutputs = new ArrayList<>();\n\n    List<SinkInfo> sinkInfos = pipeline.getSinks();\n    batchSinks = new HashMap<>(sinkInfos.size());\n    sinkContexts = new HashMap<>(sinkInfos.size());\n\n\n    for (SinkInfo sinkInfo : sinkInfos) {\n      BatchConfigurable<BatchSinkContext> batchSink = context.newPluginInstance(sinkInfo.getSinkId());\n      MapReduceSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics,\n                                                                  new DatasetContextLookupProvider(context),\n                                                                  sinkInfo.getSinkId(), context.getRuntimeArguments());\n      sinkContexts.put(sinkInfo.getSinkId(), sinkContext);\n      batchSinks.put(sinkInfo.getSinkId(), batchSink);\n\n      batchSink.prepareRun(sinkContext);\n      sinkOutputs.add(new SinkOutput(sinkInfo.getSinkId(), sinkContext.getOutputNames(),\n                                     sinkInfo.getErrorDatasetName()));\n\n      if (sinkInfo.getErrorDatasetName() != null) {\n        addPropertiesToErrorDataset(sinkInfo.getErrorDatasetName(), context);\n      }\n      hConf.set(RUNTIME_ARGS_KEY_PREFIX + sinkInfo.getSinkId(),\n                GSON.toJson(sinkContext.getRuntimeArguments(), RUNTIME_ARGS_TYPE));\n    }\n    hConf.set(SINK_OUTPUTS_KEY, GSON.toJson(sinkOutputs));\n\n    job.setMapperClass(ETLMapper.class);\n    job.setNumReduceTasks(0);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private void onRunFinishSinks(MapReduceContext context, boolean succeeded) {\n    String sinkPluginIdsStr = context.getSpecification().getProperty(Constants.Sink.PLUGINIDS);\n    // should never happen\n    Preconditions.checkNotNull(sinkPluginIdsStr, \"Sink plugin ids could not be found in program properties.\");\n\n    List<SinkInfo> sinkInfos = GSON.fromJson(sinkPluginIdsStr, SINK_INFO_TYPE);\n    for (SinkInfo sinkInfo : sinkInfos) {\n      BatchConfigurable<BatchSinkContext> batchSink = batchSinks.get(sinkInfo.getSinkId());\n      MapReduceSinkContext sinkContext = sinkContexts.get(sinkInfo.getSinkId());\n      try {\n        batchSink.onRunFinish(succeeded, sinkContext);\n      } catch (Throwable t) {\n        LOG.warn(\"Exception when calling onRunFinish on {}\", batchSink, t);\n      }\n    }\n  }","id":64044,"modified_method":"private void onRunFinishSinks(MapReduceContext context, boolean succeeded) {\n    String pipelineStr = context.getSpecification().getProperty(Constants.PIPELINEID);\n    // should never happen\n    Preconditions.checkNotNull(pipelineStr, \"pipeline could not be found in program properties.\");\n\n    List<SinkInfo> sinkInfos = GSON.fromJson(pipelineStr, Pipeline.class).getSinks();\n    for (SinkInfo sinkInfo : sinkInfos) {\n      BatchConfigurable<BatchSinkContext> batchSink = batchSinks.get(sinkInfo.getSinkId());\n      MapReduceSinkContext sinkContext = sinkContexts.get(sinkInfo.getSinkId());\n      try {\n        batchSink.onRunFinish(succeeded, sinkContext);\n      } catch (Throwable t) {\n        LOG.warn(\"Exception when calling onRunFinish on {}\", batchSink, t);\n      }\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize(MapReduceTaskContext<Object, Object> context) throws Exception {\n      // get the list of sinks, and the names of the outputs each sink writes to\n      Context hadoopContext = context.getHadoopContext();\n      Configuration hConf = hadoopContext.getConfiguration();\n\n      // get source, transform, sink ids from program properties\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n      // should never happen\n      String transformInfosStr = properties.get(Constants.Transform.PLUGINIDS);\n      Preconditions.checkNotNull(transformInfosStr, \"Transform plugin ids not found in program properties.\");\n\n      //should never happen\n      String connectionsInfoStr = properties.get(Constants.Connections.PLUGINID);\n      Preconditions.checkNotNull(connectionsInfoStr, \"Connections plugin ids not found in program properties.\");\n\n      List<TransformInfo> transformInfos = GSON.fromJson(transformInfosStr, TRANSFORMDETAILS_LIST_TYPE);\n      Map<String, List<String>> connectionsMap = GSON.fromJson(connectionsInfoStr, CONNECTIONSDETAILS_MAP_TYPE);\n      Map<String, Transformation> transformations = new HashMap<>();\n\n      BatchSource source = context.newPluginInstance(sourcePluginId);\n      BatchRuntimeContext runtimeContext = new MapReduceRuntimeContext(\n        context, mapperMetrics, new DatasetContextLookupProvider(context), sourcePluginId,\n        GSON.<Map<String, String>>fromJson(hConf.get(RUNTIME_ARGS_KEY_PREFIX + sourcePluginId), RUNTIME_ARGS_TYPE));\n      source.initialize(runtimeContext);\n      transformations.put(sourcePluginId, source);\n\n      transformErrorSinkMap = new HashMap<>();\n      transformsWithoutErrorDataset = new HashSet<>();\n      addTransforms(transformations, transformInfos, context);\n\n      String sinkOutputsStr = hadoopContext.getConfiguration().get(SINK_OUTPUTS_KEY);\n      // should never happen, this is set in beforeSubmit\n      Preconditions.checkNotNull(sinkOutputsStr, \"Sink outputs not found in Hadoop conf.\");\n\n      List<SinkOutput> sinkOutputs = GSON.fromJson(sinkOutputsStr, SINK_OUTPUTS_TYPE);\n\n      // should never happen, this is checked and set in beforeSubmit\n      Preconditions.checkArgument(!sinkOutputs.isEmpty(), \"Sink outputs not found in Hadoop conf.\");\n\n      boolean hasOneOutput = hasOneOutput(transformInfos, sinkOutputs);\n      sinks = new HashMap<>(sinkOutputs.size());\n      for (SinkOutput sinkOutput : sinkOutputs) {\n        String sinkPluginId = sinkOutput.getSinkPluginId();\n        Set<String> sinkOutputNames = sinkOutput.getSinkOutputs();\n\n        BatchSink<Object, Object, Object> sink = context.newPluginInstance(sinkPluginId);\n        runtimeContext = new MapReduceRuntimeContext(\n          context, mapperMetrics, new DatasetContextLookupProvider(context), sinkPluginId,\n          GSON.<Map<String, String>>fromJson(hConf.get(RUNTIME_ARGS_KEY_PREFIX + sinkPluginId), RUNTIME_ARGS_TYPE));\n        sink.initialize(runtimeContext);\n        if (hasOneOutput) {\n          sinks.put(sinkPluginId, new SingleOutputSink<>(sink, context, runtimeContext.getMetrics()));\n        } else {\n          sinks.put(sinkPluginId, new MultiOutputSink<>(sink, context, runtimeContext.getMetrics(), sinkOutputNames));\n        }\n        transformations.put(sinkPluginId, sink);\n      }\n\n      TransformDetail transformDetail = new TransformDetail(transformations, mapperMetrics);\n      transformExecutor = new TransformExecutor(transformDetail, connectionsMap, sourcePluginId);\n    }","id":64045,"modified_method":"@Override\n    public void initialize(MapReduceTaskContext<Object, Object> context) throws Exception {\n      // get the list of sinks, and the names of the outputs each sink writes to\n      Context hadoopContext = context.getHadoopContext();\n      Configuration hConf = hadoopContext.getConfiguration();\n\n      // get source, transform, sink ids from program properties\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      Pipeline pipeline = GSON.fromJson(properties.get(Constants.PIPELINEID), Pipeline.class);\n      // following should never happen\n      Preconditions.checkNotNull(pipeline, \"Pipeline is null\");\n      Preconditions.checkNotNull(pipeline.getSinks(), \"Sinks could not be found in program properties\");\n      // empty transform list is created during pipeline register\n      Preconditions.checkNotNull(pipeline.getTransforms());\n      Preconditions.checkNotNull(pipeline.getConnections(), \"Connections could not be found in program properties\");\n\n\n\n      String sourcePluginId = pipeline.getSource();\n\n      List<TransformInfo> transformInfos = pipeline.getTransforms();\n      Map<String, List<String>> connectionsMap = pipeline.getConnections();\n      Map<String, Transformation> transformations = new HashMap<>();\n\n      BatchSource source = context.newPluginInstance(sourcePluginId);\n      BatchRuntimeContext runtimeContext = new MapReduceRuntimeContext(\n        context, mapperMetrics, new DatasetContextLookupProvider(context), sourcePluginId,\n        GSON.<Map<String, String>>fromJson(hConf.get(RUNTIME_ARGS_KEY_PREFIX + sourcePluginId), RUNTIME_ARGS_TYPE));\n      source.initialize(runtimeContext);\n      transformations.put(sourcePluginId, source);\n\n      transformErrorSinkMap = new HashMap<>();\n      transformsWithoutErrorDataset = new HashSet<>();\n      addTransforms(transformations, transformInfos, context);\n\n      String sinkOutputsStr = hadoopContext.getConfiguration().get(SINK_OUTPUTS_KEY);\n      // should never happen, this is set in beforeSubmit\n      Preconditions.checkNotNull(sinkOutputsStr, \"Sink outputs not found in Hadoop conf.\");\n\n      List<SinkOutput> sinkOutputs = GSON.fromJson(sinkOutputsStr, SINK_OUTPUTS_TYPE);\n\n      // should never happen, this is checked and set in beforeSubmit\n      Preconditions.checkArgument(!sinkOutputs.isEmpty(), \"Sink outputs not found in Hadoop conf.\");\n\n      boolean hasOneOutput = hasOneOutput(transformInfos, sinkOutputs);\n      sinks = new HashMap<>(sinkOutputs.size());\n      for (SinkOutput sinkOutput : sinkOutputs) {\n        String sinkPluginId = sinkOutput.getSinkPluginId();\n        Set<String> sinkOutputNames = sinkOutput.getSinkOutputs();\n\n        BatchSink<Object, Object, Object> sink = context.newPluginInstance(sinkPluginId);\n        runtimeContext = new MapReduceRuntimeContext(\n          context, mapperMetrics, new DatasetContextLookupProvider(context), sinkPluginId,\n          GSON.<Map<String, String>>fromJson(hConf.get(RUNTIME_ARGS_KEY_PREFIX + sinkPluginId), RUNTIME_ARGS_TYPE));\n        sink.initialize(runtimeContext);\n        if (hasOneOutput) {\n          sinks.put(sinkPluginId, new SingleOutputSink<>(sink, context, runtimeContext.getMetrics()));\n        } else {\n          sinks.put(sinkPluginId, new MultiOutputSink<>(sink, context, runtimeContext.getMetrics(), sinkOutputNames));\n        }\n        transformations.put(sinkPluginId, sink);\n      }\n\n      transformExecutor = new TransformExecutor(transformations, mapperMetrics, connectionsMap, sourcePluginId);\n    }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"MapReduce Driver for ETL Batch Applications\");\n\n    PipelineRegisterer pipelineRegisterer = new PipelineRegisterer(getConfigurer(), \"batch\");\n\n    Pipeline pipelineIds =\n      pipelineRegisterer.registerPlugins(\n        config, TimePartitionedFileSet.class,\n        FileSetProperties.builder()\n          .setInputFormat(AvroKeyInputFormat.class)\n          .setOutputFormat(AvroKeyOutputFormat.class)\n          .setEnableExploreOnCreate(true)\n          .setSerDe(\"org.apache.hadoop.hive.serde2.avro.AvroSerDe\")\n          .setExploreInputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat\")\n          .setExploreOutputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat\")\n          .setTableProperty(\"avro.schema.literal\", ERROR_SCHEMA.toString())\n          .build(), true);\n\n    if (config.getResources() != null) {\n      setMapperResources(config.getResources());\n    }\n\n    // add source, sink, transform ids to the properties. These are needed at runtime to instantiate the plugins\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pipelineIds.getSource());\n    properties.put(Constants.Sink.PLUGINIDS, GSON.toJson(pipelineIds.getSinks()));\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pipelineIds.getTransforms()));\n    properties.put(Constants.Connections.PLUGINID, GSON.toJson(pipelineIds.getConnections()));\n    setProperties(properties);\n  }","id":64046,"modified_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"MapReduce Driver for ETL Batch Applications\");\n\n    PipelineRegisterer pipelineRegisterer = new PipelineRegisterer(getConfigurer(), \"batch\");\n\n    Pipeline pipeline =\n      pipelineRegisterer.registerPlugins(\n        config, TimePartitionedFileSet.class,\n        FileSetProperties.builder()\n          .setInputFormat(AvroKeyInputFormat.class)\n          .setOutputFormat(AvroKeyOutputFormat.class)\n          .setEnableExploreOnCreate(true)\n          .setSerDe(\"org.apache.hadoop.hive.serde2.avro.AvroSerDe\")\n          .setExploreInputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat\")\n          .setExploreOutputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat\")\n          .setTableProperty(\"avro.schema.literal\", ERROR_SCHEMA.toString())\n          .build(), true);\n\n    if (config.getResources() != null) {\n      setMapperResources(config.getResources());\n    }\n\n    // add source, sink, transform ids to the properties. These are needed at runtime to instantiate the plugins\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.PIPELINEID, GSON.toJson(pipeline));\n    setProperties(properties);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private WorkerRealtimeContext initializeSource(WorkerContext context) throws Exception {\n    String sourcePluginId = context.getSpecification().getProperty(Constants.Source.PLUGINID);\n    source = context.newPluginInstance(sourcePluginId);\n    WorkerRealtimeContext sourceContext = new WorkerRealtimeContext(\n      context, metrics, new TxLookupProvider(context), sourcePluginId);\n    sourceStageName = sourcePluginId;\n    LOG.debug(\"Source Class : {}\", source.getClass().getName());\n    source.initialize(sourceContext);\n    sourceEmitter = new DefaultEmitter(sourceContext.getMetrics());\n    return sourceContext;\n  }","id":64047,"modified_method":"private WorkerRealtimeContext initializeSource(WorkerContext context) throws Exception {\n    String sourcePluginId =\n      GSON.fromJson(context.getSpecification().getProperty(Constants.PIPELINEID), Pipeline.class).getSource();\n    source = context.newPluginInstance(sourcePluginId);\n    WorkerRealtimeContext sourceContext = new WorkerRealtimeContext(\n      context, metrics, new TxLookupProvider(context), sourcePluginId);\n    sourceStageName = sourcePluginId;\n    LOG.debug(\"Source Class : {}\", source.getClass().getName());\n    source.initialize(sourceContext);\n    sourceEmitter = new DefaultEmitter(sourceContext.getMetrics());\n    return sourceContext;\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"Worker Driver for Realtime ETL Adapters\");\n    int instances = config.getInstances() != null ? config.getInstances() : 1;\n    if (instances < 1) {\n      throw new IllegalArgumentException(\"instances must be greater than 0.\");\n    }\n    setInstances(instances);\n    if (config.getResources() != null) {\n      setResources(config.getResources());\n    }\n\n    PipelineRegisterer registerer = new PipelineRegisterer(getConfigurer(), \"realtime\");\n    // using table dataset type for error dataset\n    Pipeline pluginIDs = registerer.registerPlugins(config, Table.class, DatasetProperties.builder()\n      .add(Table.PROPERTY_SCHEMA, ERROR_SCHEMA.toString())\n      .build(), false);\n\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pluginIDs.getSource());\n    properties.put(Constants.Sink.PLUGINIDS, GSON.toJson(pluginIDs.getSinks()));\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pluginIDs.getTransforms()));\n    properties.put(Constants.Connections.PLUGINID, GSON.toJson(pluginIDs.getConnections()));\n    // Generate unique id for this app creation.\n    properties.put(Constants.Realtime.UNIQUE_ID, String.valueOf(System.currentTimeMillis()));\n    setProperties(properties);\n  }","id":64048,"modified_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"Worker Driver for Realtime ETL Adapters\");\n    int instances = config.getInstances() != null ? config.getInstances() : 1;\n    if (instances < 1) {\n      throw new IllegalArgumentException(\"instances must be greater than 0.\");\n    }\n    setInstances(instances);\n    if (config.getResources() != null) {\n      setResources(config.getResources());\n    }\n\n    PipelineRegisterer registerer = new PipelineRegisterer(getConfigurer(), \"realtime\");\n    // using table dataset type for error dataset\n    Pipeline pipeline = registerer.registerPlugins(config, Table.class, DatasetProperties.builder()\n      .add(Table.PROPERTY_SCHEMA, ERROR_SCHEMA.toString())\n      .build(), false);\n\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.PIPELINEID, GSON.toJson(pipeline));\n    // Generate unique id for this app creation.\n    properties.put(Constants.Realtime.UNIQUE_ID, String.valueOf(System.currentTimeMillis()));\n    setProperties(properties);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> properties = context.getSpecification().getProperties();\n    appName = context.getApplicationSpecification().getName();\n    Preconditions.checkArgument(properties.containsKey(Constants.Source.PLUGINID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Sink.PLUGINIDS));\n    Preconditions.checkArgument(properties.containsKey(Constants.Transform.PLUGINIDS));\n    Preconditions.checkArgument(properties.containsKey(Constants.Realtime.UNIQUE_ID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Connections.PLUGINID));\n\n    String uniqueId = properties.get(Constants.Realtime.UNIQUE_ID);\n\n    // Each worker instance should have its own unique state.\n    final String appName = context.getApplicationSpecification().getName();\n    stateStoreKey = String.format(\"%s%s%s%s%s\", appName, SEPARATOR, uniqueId, SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", appName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    WorkerRealtimeContext source = initializeSource(context);\n    Map<String, List<String>> connectionsMap =\n      GSON.fromJson(properties.get(Constants.Connections.PLUGINID), CONNECTIONSDETAILS_MAP_TYPE);\n    Map<String, Transformation> transformationMap = new HashMap<>();\n    initializeTransforms(context, transformationMap);\n    initializeSinks(context);\n    TransformDetail transformDetail = new TransformDetail(transformationMap, metrics);\n    transformExecutor = new TransformExecutor(transformDetail, connectionsMap, source.getStageName());\n  }","id":64049,"modified_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> properties = context.getSpecification().getProperties();\n    appName = context.getApplicationSpecification().getName();\n    Preconditions.checkArgument(properties.containsKey(Constants.PIPELINEID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Realtime.UNIQUE_ID));\n\n    String uniqueId = properties.get(Constants.Realtime.UNIQUE_ID);\n\n    // Each worker instance should have its own unique state.\n    final String appName = context.getApplicationSpecification().getName();\n    stateStoreKey = String.format(\"%s%s%s%s%s\", appName, SEPARATOR, uniqueId, SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", appName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    WorkerRealtimeContext source = initializeSource(context);\n    Map<String, List<String>> connectionsMap =\n      GSON.fromJson(properties.get(Constants.PIPELINEID), Pipeline.class).getConnections();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n    initializeTransforms(context, transformationMap);\n    initializeSinks(context);\n    transformExecutor = new TransformExecutor(transformationMap, metrics, connectionsMap, source.getStageName());\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private void initializeTransforms(WorkerContext context,\n                                    Map<String, Transformation> transformDetailMap) throws Exception {\n    List<TransformInfo> transformInfos =\n      GSON.fromJson(context.getSpecification().getProperty(Constants.Transform.PLUGINIDS), TRANSFORMDETAILS_LIST_TYPE);\n    Preconditions.checkArgument(transformInfos != null);\n    tranformIdToDatasetName = new HashMap<>(transformInfos.size());\n\n    for (TransformInfo transformInfo : transformInfos) {\n      String transformId = transformInfo.getTransformId();\n      try {\n        Transform transform = context.newPluginInstance(transformId);\n        WorkerRealtimeContext transformContext = new WorkerRealtimeContext(\n          context, metrics, new TxLookupProvider(context), transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        transformDetailMap.put(transformId, transform);\n        if (transformInfo.getErrorDatasetName() != null) {\n          tranformIdToDatasetName.put(transformId, transformInfo.getErrorDatasetName());\n        }\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform\", e);\n        Throwables.propagate(e);\n      }\n    }\n  }","id":64050,"modified_method":"private void initializeTransforms(WorkerContext context,\n                                    Map<String, Transformation> transformDetailMap) throws Exception {\n    List<TransformInfo> transformInfos =\n      GSON.fromJson(context.getSpecification().getProperty(Constants.PIPELINEID), Pipeline.class).getTransforms();\n    Preconditions.checkArgument(transformInfos != null);\n    tranformIdToDatasetName = new HashMap<>(transformInfos.size());\n\n    for (TransformInfo transformInfo : transformInfos) {\n      String transformId = transformInfo.getTransformId();\n      try {\n        Transform transform = context.newPluginInstance(transformId);\n        WorkerRealtimeContext transformContext = new WorkerRealtimeContext(\n          context, metrics, new TxLookupProvider(context), transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        transformDetailMap.put(transformId, transform);\n        if (transformInfo.getErrorDatasetName() != null) {\n          tranformIdToDatasetName.put(transformId, transformInfo.getErrorDatasetName());\n        }\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform\", e);\n        Throwables.propagate(e);\n      }\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\n  private void initializeSinks(WorkerContext context) throws Exception {\n    List<SinkInfo> sinkInfos = GSON.fromJson(context.getSpecification().getProperty(Constants.Sink.PLUGINIDS),\n                                             SINK_INFO_TYPE);\n    sinks = new HashMap<>(sinkInfos.size());\n    for (SinkInfo sinkInfo : sinkInfos) {\n      RealtimeSink sink = context.newPluginInstance(sinkInfo.getSinkId());\n      WorkerRealtimeContext sinkContext = new WorkerRealtimeContext(\n        context, metrics, new TxLookupProvider(context), sinkInfo.getSinkId());\n      LOG.debug(\"Sink Class : {}\", sink.getClass().getName());\n      sink.initialize(sinkContext);\n      sink = new TrackedRealtimeSink(sink, sinkContext.getMetrics());\n      sinks.put(sinkInfo.getSinkId(), sink);\n    }\n  }","id":64051,"modified_method":"@SuppressWarnings(\"unchecked\")\n  private void initializeSinks(WorkerContext context) throws Exception {\n    List<SinkInfo> sinkInfos = GSON.fromJson(context.getSpecification().getProperty(Constants.PIPELINEID),\n                                             Pipeline.class).getSinks();\n    sinks = new HashMap<>(sinkInfos.size());\n    for (SinkInfo sinkInfo : sinkInfos) {\n      RealtimeSink sink = context.newPluginInstance(sinkInfo.getSinkId());\n      WorkerRealtimeContext sinkContext = new WorkerRealtimeContext(\n        context, metrics, new TxLookupProvider(context), sinkInfo.getSinkId());\n      LOG.debug(\"Sink Class : {}\", sink.getClass().getName());\n      sink.initialize(sinkContext);\n      sink = new TrackedRealtimeSink(sink, sinkContext.getMetrics());\n      sinks.put(sinkInfo.getSinkId(), sink);\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private static void connectionsReachabilityValidation(\n    Map<String, List<ETLStage>> mapStageToConnections, ETLConfig config,\n    ETLStage stage, Set<String> visited, Set<String> sinksVisited, Set<String> sinksFromConfig) {\n\n    if (mapStageToConnections.get(stage.getName()) == null) {\n      // check if this stage is a sink, if its not a sink, throw an exception.\n      if (!sinksFromConfig.contains(stage.getName())) {\n        throw new IllegalArgumentException(\n          String.format(\n            \"Stage : %s is not connected to any transform or sink, please check the config\", stage.getName()));\n      }\n      // this is a sink, add it to sinks visited set\n      sinksVisited.add(stage.getName());\n      return;\n    }\n\n    for (ETLStage nextConnection : mapStageToConnections.get(stage.getName())) {\n      if (visited.contains(nextConnection.getName())) {\n        // already been visited, cycle exists, throw exception\n        throw new IllegalArgumentException(\"Cycle exists in the graph connections\");\n      }\n      HashSet<String> nextVisited = new HashSet<>(visited);\n      nextVisited.add(nextConnection.getName());\n      connectionsReachabilityValidation(mapStageToConnections, config, nextConnection, nextVisited,\n                                        sinksVisited, sinksFromConfig);\n    }\n    // check if we have visited all the sinks, check this only when we are at source iteration level\n    if (config.getSource().getName().equals(stage.getName())) {\n      for (ETLStage sink : config.getSinks()) {\n        if (!sinksVisited.contains(sink.getName())) {\n          // if the sink hasn't been visited, throw exception\n          throw new IllegalArgumentException(\n            String.format(\"Sink %s is not connected, please check the connections\", sink.getName()));\n        }\n      }\n    }\n  }","id":64052,"modified_method":"private static void connectionsReachabilityValidation(\n    Map<String, List<String>> mapStageToConnections, ETLConfig config,\n    String stageName, Set<String> visited, Set<String> sinksVisited, Set<String> sinksFromConfig) {\n\n    if (mapStageToConnections.get(stageName) == null) {\n      // check if this stage is a sink, if its not a sink, throw an exception.\n      if (!sinksFromConfig.contains(stageName)) {\n        throw new IllegalArgumentException(\n          String.format(\n            \"Stage : %s is not connected to any transform or sink, please check the config\", stageName));\n      }\n      // this is a sink, add it to sinks visited set\n      sinksVisited.add(stageName);\n      return;\n    }\n\n    for (String nextConnection : mapStageToConnections.get(stageName)) {\n      if (visited.contains(nextConnection)) {\n        // already been visited, cycle exists, throw exception\n        throw new IllegalArgumentException(\n          String.format(\n            \"Connection %s --> %s causes a cycle, Graph has to be a DAG, \" +\n              \"please check the graph connections\", stageName, nextConnection));\n      }\n      HashSet<String> nextVisited = new HashSet<>(visited);\n      nextVisited.add(nextConnection);\n      connectionsReachabilityValidation(mapStageToConnections, config, nextConnection, nextVisited,\n                                        sinksVisited, sinksFromConfig);\n    }\n    // check if we have visited all the sinks, check this only when we are at source iteration level\n    if (config.getSource().getName().equals(stageName)) {\n      for (ETLStage sink : config.getSinks()) {\n        if (!sinksVisited.contains(sink.getName())) {\n          // if the sink hasn't been visited, throw exception\n          throw new IllegalArgumentException(\n            String.format(\"Sink %s is not connected, please check the connections\", sink.getName()));\n        }\n      }\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@VisibleForTesting\n  static Map<String, List<ETLStage>> validateConnections(ETLConfig config) {\n    Map<String, List<ETLStage>> mapSourceToNextStages = new HashMap<>();\n    if (config.getConnections().isEmpty()) {\n      // connections list is empty, default pipeline, source->transforms(serial)-> sinks\n      String previous = config.getSource().getName();\n      for (ETLStage stage : config.getTransforms()) {\n        mapSourceToNextStages.put(previous, ImmutableList.of(stage));\n        previous = stage.getName();\n      }\n      mapSourceToNextStages.put(previous, ImmutableList.copyOf(config.getSinks()));\n    } else {\n      // there are connections provided perform validation\n      // 1) basic validation, # of connections >= (source + #transform + sink - 1)\n      if (config.getConnections().size() < (config.getTransforms().size() + config.getSinks().size())) {\n        throw new IllegalArgumentException(\n          \"Number of edges connecting the pipeline is less than the number of vertices, please check the connections\");\n      }\n      // 2) connections end up in a sink and all sinks are covered also check there are no cycles.\n\n      Map<String, ETLStage> mapStringToETLStage = new HashMap<>();\n      for (ETLStage stage : config.getTransforms()) {\n        mapStringToETLStage.put(stage.getName(), stage);\n      }\n      for (ETLStage stage : config.getSinks()) {\n        mapStringToETLStage.put(stage.getName(), stage);\n      }\n\n      for (Connection connection : config.getConnections()) {\n        if (mapSourceToNextStages.containsKey(connection.getSource())) {\n          mapSourceToNextStages.get(connection.getSource()).add(mapStringToETLStage.get(connection.getDestination()));\n        } else {\n          List<ETLStage> destinations = new ArrayList<>();\n          destinations.add(mapStringToETLStage.get(connection.getDestination()));\n          mapSourceToNextStages.put(connection.getSource(), destinations);\n        }\n      }\n\n      Set<String> visited = new HashSet<>();\n      visited.add(config.getSource().getName());\n      Set<String> sinksFromConfig = new HashSet<>();\n      for (ETLStage sink : config.getSinks()) {\n        sinksFromConfig.add(sink.getName());\n      }\n      connectionsReachabilityValidation(mapSourceToNextStages, config,\n                                        config.getSource(), visited, new HashSet<String>(), sinksFromConfig);\n    }\n    return mapSourceToNextStages;\n  }","id":64053,"modified_method":"@VisibleForTesting\n  static Map<String, List<String>> validateConnections(ETLConfig config) {\n    Map<String, List<String>> stageConnections = new HashMap<>();\n\n    // 1) basic validation, # of connections >= (source + #transform + sink - 1)\n    if (config.getConnections().size() < (config.getTransforms().size() + config.getSinks().size())) {\n      throw new IllegalArgumentException(\n        \"Number of edges connecting the pipeline is less than the number of vertices, please check the connections\");\n    }\n    // 2) connections end up in a sink and all sinks are covered also check there are no cycles.\n\n    // set containing names of stages.\n    Set<String> stageNamesFromConfig = new HashSet<>();\n\n    stageNamesFromConfig.add(config.getSource().getName());\n    for (ETLStage stage : config.getTransforms()) {\n      stageNamesFromConfig.add(stage.getName());\n    }\n    for (ETLStage stage : config.getSinks()) {\n      stageNamesFromConfig.add(stage.getName());\n    }\n\n    for (Connection connection : config.getConnections()) {\n      // check if this connections's from and to belong to actual stage\n      Preconditions.checkState(\n        stageNamesFromConfig.contains(connection.getFrom()),\n        String.format(\"Connection from : %s does not belong to an actual stage name, please check the config\",\n                      connection.getFrom()));\n      Preconditions.checkState(\n        stageNamesFromConfig.contains(connection.getTo()),\n        String.format(\"Connection to : %s does not belong to an actual stage name, please check the config\",\n                      connection.getFrom()));\n      Preconditions.checkState(stageNamesFromConfig.contains(connection.getTo()));\n      if (stageConnections.containsKey(connection.getFrom())) {\n        stageConnections.get(connection.getFrom()).add(connection.getTo());\n      } else {\n        List<String> destinations = new ArrayList<>();\n        destinations.add(connection.getTo());\n        stageConnections.put(connection.getFrom(), destinations);\n      }\n    }\n\n    Set<String> visited = new HashSet<>();\n    visited.add(config.getSource().getName());\n    Set<String> sinksFromConfig = new HashSet<>();\n    for (ETLStage sink : config.getSinks()) {\n      sinksFromConfig.add(sink.getName());\n    }\n    connectionsReachabilityValidation(stageConnections, config,\n                                      config.getSource().getName(), visited, new HashSet<String>(), sinksFromConfig);\n    return stageConnections;\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Registers the plugins that will be used in the pipeline\n   *\n   * @param config the config containing pipeline information\n   * @param errorDatasetType error dataset type class\n   * @param errorDatasetProperties properties of the error dataset\n   * @param sinkWithErrorDataset boolean flag to indicate if the sinks uses error dataset\n   * @return the ids of each plugin used in the pipeline\n   */\n  public Pipeline registerPlugins(ETLConfig config, Class errorDatasetType, DatasetProperties errorDatasetProperties,\n                                  boolean sinkWithErrorDataset) {\n    config = config.getCompatibleConfig();\n    ETLStage sourceConfig = config.getSource();\n    List<ETLStage> transformConfigs = config.getTransforms();\n    List<ETLStage> sinkConfigs = config.getSinks();\n    if (sinkConfigs == null || sinkConfigs.isEmpty()) {\n      throw new IllegalArgumentException(\"At least one sink must be specified.\");\n    }\n    if (sourceConfig == null) {\n      throw new IllegalArgumentException(\"A source must be specified.\");\n    }\n\n    // validate that the stage names are unique\n    validateStageNames(sourceConfig, config.getTransforms(), config.getSinks());\n\n    // validate connections, there are no-cycles, all sinks are reachable, etc.\n    Map<String, List<ETLStage>> connectionsMap = validateConnections(config);\n    String sourcePluginId = sourceConfig.getName();\n\n    // instantiate source\n    PipelineConfigurable source = configurer.usePlugin(sourcePluginType,\n                                                       sourceConfig.getPlugin().getName(),\n                                                       sourcePluginId, getPluginProperties(sourceConfig));\n    if (source == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Source.PLUGINTYPE,\n                                                       sourceConfig.getPlugin().getName()));\n    }\n    // configure source, allowing it to add datasets, streams, etc\n    PipelineConfigurer sourceConfigurer = new DefaultPipelineConfigurer(configurer, sourcePluginId);\n    source.configurePipeline(sourceConfigurer);\n\n    // transform id list will eventually be serialized and passed to the driver program\n    List<TransformInfo> transformInfos = new ArrayList<>(transformConfigs.size());\n    List<Transformation> transforms = new ArrayList<>(transformConfigs.size());\n    for (ETLStage transformConfig : transformConfigs) {\n      String transformId = transformConfig.getName();\n\n      PluginProperties transformProperties = getPluginProperties(transformConfig);\n      Transform transformObj = configurer.usePlugin(Constants.Transform.PLUGINTYPE,\n                                                    transformConfig.getPlugin().getName(),\n                                                    transformId, transformProperties);\n      if (transformObj == null) {\n        throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found\",\n                                                         Constants.Transform.PLUGINTYPE,\n                                                         transformConfig.getPlugin().getName()));\n      }\n      // if the transformation is configured to write filtered records to error dataset, we create that dataset.\n      if (transformConfig.getErrorDatasetName() != null) {\n        configurer.createDataset(transformConfig.getErrorDatasetName(), errorDatasetType, errorDatasetProperties);\n      }\n\n      PipelineConfigurer transformConfigurer = new DefaultPipelineConfigurer(configurer, transformId);\n      transformObj.configurePipeline(transformConfigurer);\n      transformInfos.add(new TransformInfo(transformId, transformConfig.getErrorDatasetName()));\n      transforms.add(transformObj);\n    }\n\n    List<SinkInfo> sinksInfo = new ArrayList<>();\n    List<PipelineConfigurable> sinks = new ArrayList<>();\n    for (ETLStage sinkConfig : sinkConfigs) {\n      String sinkPluginId = sinkConfig.getName();\n\n      // create error dataset for sink - if the sink supports it and error dataset is configured for it.\n      if (sinkWithErrorDataset && sinkConfig.getErrorDatasetName() != null) {\n        configurer.createDataset(sinkConfig.getErrorDatasetName(), errorDatasetType, errorDatasetProperties);\n      }\n\n      sinksInfo.add(new SinkInfo(sinkPluginId, sinkConfig.getErrorDatasetName()));\n\n      // try to instantiate the sink\n      PipelineConfigurable sink = configurer.usePlugin(sinkPluginType, sinkConfig.getPlugin().getName(),\n                                                       sinkPluginId, getPluginProperties(sinkConfig));\n      if (sink == null) {\n        throw new IllegalArgumentException(\n          String.format(\n            \"No Plugin of type '%s' named '%s' was found\" +\n              \"Please check that an artifact containing the plugin exists, \" +\n              \"and that it extends the etl application.\",\n            Constants.Sink.PLUGINTYPE, sinkConfig.getPlugin().getName()));\n      }\n      // run configure pipeline on sink to let it add datasets, etc.\n      PipelineConfigurer sinkConfigurer = new DefaultPipelineConfigurer(configurer, sinkPluginId);\n      sink.configurePipeline(sinkConfigurer);\n      sinks.add(sink);\n    }\n\n    // Validate Source -> Transform -> Sink hookup\n    try {\n      validateStages(source, sinks, transforms);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    Map<String, List<String>> connectionsMapString =\n      Maps.transformEntries(connectionsMap, new Maps.EntryTransformer<String, List<ETLStage>, List<String>>() {\n        @Override\n        public List<String> transformEntry(String key, List<ETLStage> stages) {\n          List<String> stageNames = new ArrayList<String>();\n          for (ETLStage stage : stages) {\n            stageNames.add(stage.getName());\n          }\n          return stageNames;\n        }\n      });\n\n    return new Pipeline(sourcePluginId, sinksInfo, transformInfos, connectionsMapString);\n  }","id":64054,"modified_method":"/**\n   * Registers the plugins that will be used in the pipeline\n   *\n   * @param config the config containing pipeline information\n   * @param errorDatasetType error dataset type class\n   * @param errorDatasetProperties properties of the error dataset\n   * @param sinkWithErrorDataset boolean flag to indicate if the sinks uses error dataset\n   * @return the ids of each plugin used in the pipeline\n   */\n  public Pipeline registerPlugins(ETLConfig config, Class errorDatasetType, DatasetProperties errorDatasetProperties,\n                                  boolean sinkWithErrorDataset) {\n    config = config.getCompatibleConfig();\n    ETLStage sourceConfig = config.getSource();\n    List<ETLStage> transformConfigs = config.getTransforms();\n    List<ETLStage> sinkConfigs = config.getSinks();\n    if (sinkConfigs == null || sinkConfigs.isEmpty()) {\n      throw new IllegalArgumentException(\"At least one sink must be specified.\");\n    }\n    if (sourceConfig == null) {\n      throw new IllegalArgumentException(\"A source must be specified.\");\n    }\n\n    // validate that the stage names are unique\n    validateStageNames(sourceConfig, config.getTransforms(), config.getSinks());\n\n    // validate connections, there are no-cycles, all sinks are reachable, etc.\n    Map<String, List<String>> connectionsMap = validateConnections(config);\n    String sourcePluginId = sourceConfig.getName();\n\n    // instantiate source\n    PipelineConfigurable source = configurer.usePlugin(sourcePluginType,\n                                                       sourceConfig.getPlugin().getName(),\n                                                       sourcePluginId, getPluginProperties(sourceConfig));\n    if (source == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Source.PLUGINTYPE,\n                                                       sourceConfig.getPlugin().getName()));\n    }\n    // configure source, allowing it to add datasets, streams, etc\n    PipelineConfigurer sourceConfigurer = new DefaultPipelineConfigurer(configurer, sourcePluginId);\n    source.configurePipeline(sourceConfigurer);\n\n    // transform id list will eventually be serialized and passed to the driver program\n    List<TransformInfo> transformInfos = new ArrayList<>(transformConfigs.size());\n    List<Transformation> transforms = new ArrayList<>(transformConfigs.size());\n    for (ETLStage transformConfig : transformConfigs) {\n      String transformId = transformConfig.getName();\n\n      PluginProperties transformProperties = getPluginProperties(transformConfig);\n      Transform transformObj = configurer.usePlugin(Constants.Transform.PLUGINTYPE,\n                                                    transformConfig.getPlugin().getName(),\n                                                    transformId, transformProperties);\n      if (transformObj == null) {\n        throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found\",\n                                                         Constants.Transform.PLUGINTYPE,\n                                                         transformConfig.getPlugin().getName()));\n      }\n      // if the transformation is configured to write filtered records to error dataset, we create that dataset.\n      if (transformConfig.getErrorDatasetName() != null) {\n        configurer.createDataset(transformConfig.getErrorDatasetName(), errorDatasetType, errorDatasetProperties);\n      }\n\n      PipelineConfigurer transformConfigurer = new DefaultPipelineConfigurer(configurer, transformId);\n      transformObj.configurePipeline(transformConfigurer);\n      transformInfos.add(new TransformInfo(transformId, transformConfig.getErrorDatasetName()));\n      transforms.add(transformObj);\n    }\n\n    List<SinkInfo> sinksInfo = new ArrayList<>();\n    List<PipelineConfigurable> sinks = new ArrayList<>();\n    for (ETLStage sinkConfig : sinkConfigs) {\n      String sinkPluginId = sinkConfig.getName();\n\n      // create error dataset for sink - if the sink supports it and error dataset is configured for it.\n      if (sinkWithErrorDataset && sinkConfig.getErrorDatasetName() != null) {\n        configurer.createDataset(sinkConfig.getErrorDatasetName(), errorDatasetType, errorDatasetProperties);\n      }\n\n      sinksInfo.add(new SinkInfo(sinkPluginId, sinkConfig.getErrorDatasetName()));\n\n      // try to instantiate the sink\n      PipelineConfigurable sink = configurer.usePlugin(sinkPluginType, sinkConfig.getPlugin().getName(),\n                                                       sinkPluginId, getPluginProperties(sinkConfig));\n      if (sink == null) {\n        throw new IllegalArgumentException(\n          String.format(\n            \"No Plugin of type '%s' named '%s' was found\" +\n              \"Please check that an artifact containing the plugin exists, \" +\n              \"and that it extends the etl application.\",\n            Constants.Sink.PLUGINTYPE, sinkConfig.getPlugin().getName()));\n      }\n      // run configure pipeline on sink to let it add datasets, etc.\n      PipelineConfigurer sinkConfigurer = new DefaultPipelineConfigurer(configurer, sinkPluginId);\n      sink.configurePipeline(sinkConfigurer);\n      sinks.add(sink);\n    }\n\n    // Validate Source -> Transform -> Sink hookup\n    try {\n      validateStages(source, sinks, transforms);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return new Pipeline(sourcePluginId, sinksInfo, transformInfos, connectionsMap);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private <T> void executeTransformation(final String stageName, List<T> input) throws Exception {\n    Transformation<T, Object> transformation = trackedTransformDetail.getTransformation(stageName);\n\n    // clear old data for this stageName if its not a terminal node\n    if (input == null) {\n      return;\n    }\n\n    if (connectionsMap.containsKey(stageName) && defaultEmitter.getEntriesMap().containsKey(stageName)) {\n      // clear old data if this node was used in a different path earlier during execution.\n      defaultEmitter.getEntries(stageName).clear();\n    }\n\n    if (trackedTransformDetail.getTransformationMap().containsKey(stageName)) {\n      // has transformation (could be source or transform or sink)\n      for (T inputEntry : input) {\n        transformation.transform(inputEntry, new Emitter<Object>() {\n          @Override\n          public void emit(Object value) {\n            defaultEmitter.emit(stageName, value);\n          }\n\n          @Override\n          public void emitError(InvalidEntry<Object> invalidEntry) {\n            defaultEmitter.emitError(stageName, invalidEntry);\n          }\n        });\n      }\n    }\n\n    List<String> nextStages = connectionsMap.get(stageName);\n    if (nextStages != null) {\n      // transform or source\n      for (String nextStage : nextStages) {\n        executeTransformation(nextStage, defaultEmitter.getEntries(stageName));\n      }\n    } else {\n      // terminal node, pass on the input if transformation for this terminal node is not already executed.\n      if (!trackedTransformDetail.getTransformationMap().containsKey(stageName)) {\n        for (T inputEntry : input) {\n          defaultEmitter.emit(stageName, inputEntry);\n        }\n      }\n    }\n  }","id":64055,"modified_method":"private <T> void executeTransformation(final String stageName, List<T> input) throws Exception {\n    Transformation<T, Object> transformation = trackedTransformation.get(stageName);\n\n    // clear old data for this stageName if its not a terminal node\n    if (input == null) {\n      return;\n    }\n\n    if (connectionsMap.containsKey(stageName) && defaultEmitter.getEntriesMap().containsKey(stageName)) {\n      // clear old data if this node was used in a different path earlier during execution.\n      defaultEmitter.getEntries(stageName).clear();\n    }\n\n    if (trackedTransformation.containsKey(stageName)) {\n      // has transformation (could be source or transform or sink)\n      for (T inputEntry : input) {\n        transformation.transform(inputEntry, new Emitter<Object>() {\n          @Override\n          public void emit(Object value) {\n            defaultEmitter.emit(stageName, value);\n          }\n\n          @Override\n          public void emitError(InvalidEntry<Object> invalidEntry) {\n            defaultEmitter.emitError(stageName, invalidEntry);\n          }\n        });\n      }\n    }\n\n    List<String> nextStages = connectionsMap.get(stageName);\n    if (nextStages != null) {\n      // transform or source\n      for (String nextStage : nextStages) {\n        executeTransformation(nextStage, defaultEmitter.getEntries(stageName));\n      }\n    } else {\n      // terminal node, pass on the input if transformation for this terminal node is not already executed.\n      if (!trackedTransformation.containsKey(stageName)) {\n        for (T inputEntry : input) {\n          defaultEmitter.emit(stageName, inputEntry);\n        }\n      }\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void destroy() {\n    for (Transformation transformation : trackedTransformDetail.getTransformationMap().values()) {\n      if (transformation instanceof Destroyable) {\n        Destroyables.destroyQuietly((Destroyable) transformation);\n      }\n    }\n  }","id":64056,"modified_method":"@Override\n  public void destroy() {\n    for (Transformation transformation : trackedTransformation.values()) {\n      if (transformation instanceof Destroyable) {\n        Destroyables.destroyQuietly((Destroyable) transformation);\n      }\n    }\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"public TransformResponse runOneIteration(IN input) throws Exception {\n    if (trackedTransformDetail.getTransformationMap().containsKey(start)) {\n      executeTransformation(start, ImmutableList.of(input));\n    } else {\n      List<String> nextToStart = connectionsMap.get(start);\n      Preconditions.checkNotNull(nextToStart);\n\n      for (String stage : nextToStart) {\n        executeTransformation(stage, ImmutableList.of(input));\n      }\n    }\n\n    Map<String, List<Object>> terminalNodeEntriesMap = new HashMap<>();\n    Map<String, List<Object>> emitterEntries = defaultEmitter.getEntriesMap();\n    for (String key : emitterEntries.keySet()) {\n      if (!connectionsMap.containsKey(key)) {\n        // terminal node\n        terminalNodeEntriesMap.put(key, emitterEntries.get(key));\n      }\n    }\n\n    Map<String, List<InvalidEntry<Object>>> errors = defaultEmitter.getErrors();\n    return new TransformResponse(terminalNodeEntriesMap, errors);\n  }","id":64057,"modified_method":"public TransformResponse runOneIteration(IN input) throws Exception {\n    if (trackedTransformation.containsKey(start)) {\n      executeTransformation(start, ImmutableList.of(input));\n    } else {\n      List<String> nextToStart = connectionsMap.get(start);\n      Preconditions.checkNotNull(nextToStart);\n\n      for (String stage : nextToStart) {\n        executeTransformation(stage, ImmutableList.of(input));\n      }\n    }\n\n    Map<String, List<Object>> terminalNodeEntriesMap = new HashMap<>();\n    Map<String, List<Object>> emitterEntries = defaultEmitter.getEntriesMap();\n    for (String key : emitterEntries.keySet()) {\n      if (!connectionsMap.containsKey(key)) {\n        // terminal node\n        terminalNodeEntriesMap.put(key, emitterEntries.get(key));\n      }\n    }\n\n    Map<String, List<InvalidEntry<Object>>> errors = defaultEmitter.getErrors();\n    return new TransformResponse(terminalNodeEntriesMap, errors);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"public TransformExecutor(TransformDetail transformDetail, Map<String, List<String>> connectionsMap, String start) {\n    this.start = start;\n    this.connectionsMap = connectionsMap;\n    Map<String, Transformation> trackedTransformation = new HashMap<>();\n    for (Map.Entry<String, Transformation> transformationEntry : transformDetail.getTransformationMap().entrySet()) {\n      trackedTransformation.put(transformationEntry.getKey(),\n                                new TrackedTransform<>(transformationEntry.getValue(),\n                                                     new DefaultStageMetrics(transformDetail.getMetrics(),\n                                                                             transformationEntry.getKey())));\n    }\n    trackedTransformDetail = new TransformDetail(transformDetail, trackedTransformation);\n    defaultEmitter = new DefaultEmitter<>(transformDetail.getMetrics());\n  }","id":64058,"modified_method":"public TransformExecutor(Map<String, Transformation> transformationMap, Metrics metrics,\n                           Map<String, List<String>> connectionsMap, String start) {\n    this.start = start;\n    this.connectionsMap = connectionsMap;\n    this.trackedTransformation = new HashMap<>();\n    for (Map.Entry<String, Transformation> transformationEntry : transformationMap.entrySet()) {\n      trackedTransformation.put(transformationEntry.getKey(),\n                                new TrackedTransform<>(transformationEntry.getValue(),\n                                                     new DefaultStageMetrics(metrics, transformationEntry.getKey())));\n    }\n    defaultEmitter = new DefaultEmitter<>(metrics);\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testTransformsWithMerge() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n\n    transformationMap.put(\"conversion\", new IntToDouble());\n    transformationMap.put(\"filter1\", new Filter(100d, Threshold.LOWER));\n    transformationMap.put(\"filter2\", new Filter(1000d, Threshold.LOWER));\n    transformationMap.put(\"limiter1\", new Filter(5000d, Threshold.UPPER));\n    transformationMap.put(\"sink1\", new DoubleToString());\n    transformationMap.put(\"sink2\", new DoubleToString());\n    transformationMap.put(\"sink3\", new DoubleToString());\n\n    TransformDetail transformDetail = new TransformDetail(transformationMap, mockMetrics);\n\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n\n    connectionsMap.put(\"source\", ImmutableList.of(\"conversion\"));\n    connectionsMap.put(\"conversion\", ImmutableList.of(\"filter1\", \"filter2\"));\n    connectionsMap.put(\"filter1\", ImmutableList.of(\"limiter1\", \"sink1\"));\n    connectionsMap.put(\"filter2\", ImmutableList.of(\"limiter1\", \"sink2\"));\n    connectionsMap.put(\"limiter1\", ImmutableList.of(\"sink3\"));\n\n    TransformExecutor<Integer> executor = new TransformExecutor<>(transformDetail, connectionsMap, \"source\");\n    TransformResponse transformResponse = executor.runOneIteration(200);\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 2, \"sink3\", 3));\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"filter2\", 1, \"limiter1\", 2));\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter1.records.in\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter1.records.out\"));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter2.records.in\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"filter2.records.out\"));\n\n    Assert.assertEquals(5, mockMetrics.getCount(\"limiter1.records.in\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"limiter1.records.out\"));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"sink2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink3.records.out\"));\n  }","id":64059,"modified_method":"@Test\n  public void testTransformsWithMerge() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n\n    transformationMap.put(\"conversion\", new IntToDouble());\n    transformationMap.put(\"filter1\", new Filter(100d, Threshold.LOWER));\n    transformationMap.put(\"filter2\", new Filter(1000d, Threshold.LOWER));\n    transformationMap.put(\"limiter1\", new Filter(5000d, Threshold.UPPER));\n    transformationMap.put(\"sink1\", new DoubleToString());\n    transformationMap.put(\"sink2\", new DoubleToString());\n    transformationMap.put(\"sink3\", new DoubleToString());\n\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n\n    connectionsMap.put(\"source\", ImmutableList.of(\"conversion\"));\n    connectionsMap.put(\"conversion\", ImmutableList.of(\"filter1\", \"filter2\"));\n    connectionsMap.put(\"filter1\", ImmutableList.of(\"limiter1\", \"sink1\"));\n    connectionsMap.put(\"filter2\", ImmutableList.of(\"limiter1\", \"sink2\"));\n    connectionsMap.put(\"limiter1\", ImmutableList.of(\"sink3\"));\n\n    TransformExecutor<Integer> executor = new TransformExecutor<>(transformationMap, mockMetrics,\n                                                                  connectionsMap, \"source\");\n    TransformResponse transformResponse = executor.runOneIteration(200);\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 2, \"sink3\", 3));\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"filter2\", 1, \"limiter1\", 2));\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter1.records.in\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter1.records.out\"));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"filter2.records.in\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"filter2.records.out\"));\n\n    Assert.assertEquals(5, mockMetrics.getCount(\"limiter1.records.in\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"limiter1.records.out\"));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"sink2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink3.records.out\"));\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n\n    transformationMap.put(\"transform1\", new IntToDouble());\n    transformationMap.put(\"transform2\", new Filter(100d, Threshold.LOWER));\n    transformationMap.put(\"sink1\", new DoubleToString());\n    transformationMap.put(\"sink2\", new DoubleToString());\n\n    TransformDetail transformDetail = new TransformDetail(transformationMap, mockMetrics);\n\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n\n    connectionsMap.put(\"source\", ImmutableList.of(\"transform1\"));\n    connectionsMap.put(\"transform1\", ImmutableList.of(\"transform2\", \"sink1\"));\n    connectionsMap.put(\"transform2\", ImmutableList.of(\"sink2\"));\n\n    TransformExecutor<Integer> executor = new TransformExecutor<>(transformDetail, connectionsMap, \"source\");\n\n    TransformResponse transformResponse = executor.runOneIteration(1);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 3));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n\n    transformResponse = executor.runOneIteration(10);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 1));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 2));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n    transformResponse = executor.runOneIteration(100);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 2));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 1));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n    transformResponse = executor.runOneIteration(2000);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 3));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), new HashMap<String, Integer>());\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n  }","id":64060,"modified_method":"@Test\n  public void testTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n\n    transformationMap.put(\"transform1\", new IntToDouble());\n    transformationMap.put(\"transform2\", new Filter(100d, Threshold.LOWER));\n    transformationMap.put(\"sink1\", new DoubleToString());\n    transformationMap.put(\"sink2\", new DoubleToString());\n\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n\n    connectionsMap.put(\"source\", ImmutableList.of(\"transform1\"));\n    connectionsMap.put(\"transform1\", ImmutableList.of(\"transform2\", \"sink1\"));\n    connectionsMap.put(\"transform2\", ImmutableList.of(\"sink2\"));\n\n    TransformExecutor<Integer> executor = new TransformExecutor<>(transformationMap, mockMetrics,\n                                                                  connectionsMap, \"source\");\n\n    TransformResponse transformResponse = executor.runOneIteration(1);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 3));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n\n    transformResponse = executor.runOneIteration(10);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 1));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 2));\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n    transformResponse = executor.runOneIteration(100);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 2));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), ImmutableMap.of(\"transform2\", 1));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(2, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n\n    transformResponse = executor.runOneIteration(2000);\n\n    assertResults(transformResponse.getSinksResults(), ImmutableMap.of(\"sink1\", 3, \"sink2\", 3));\n\n    assertResults(transformResponse.getMapTransformIdToErrorEmitter(), new HashMap<String, Integer>());\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink2.records.out\"));\n    executor.resetEmitter();\n    mockMetrics.clearMetrics();\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testEmptyTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n    transformationMap.put(\"sink\", new DoubleToString());\n    TransformDetail transformDetail = new TransformDetail(transformationMap, mockMetrics);\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n    connectionsMap.put(\"source\", ImmutableList.of(\"sink\"));\n\n    TransformExecutor executor =\n      new TransformExecutor(transformDetail, connectionsMap, \"source\");\n    TransformResponse transformResponse = executor.runOneIteration(1d);\n    Map<String, List<Object>> sinkResult = transformResponse.getSinksResults();\n    Assert.assertTrue(sinkResult.containsKey(\"sink\"));\n    List<Object> sinkResultList = sinkResult.get(\"sink\");\n    Assert.assertEquals(1, sinkResultList.size());\n    // note : sink transform would have exectued, so the expected is string and not integer\n    Assert.assertEquals(\"1.0\", sinkResultList.get(0));\n    executor.resetEmitter();\n  }","id":64061,"modified_method":"@Test\n  public void testEmptyTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    Map<String, Transformation> transformationMap = new HashMap<>();\n    transformationMap.put(\"sink\", new DoubleToString());\n    Map<String, List<String>> connectionsMap = new HashMap<>();\n    connectionsMap.put(\"source\", ImmutableList.of(\"sink\"));\n\n    TransformExecutor executor =\n      new TransformExecutor(transformationMap, mockMetrics, connectionsMap, \"source\");\n    TransformResponse transformResponse = executor.runOneIteration(1d);\n    Map<String, List<Object>> sinkResult = transformResponse.getSinksResults();\n    Assert.assertTrue(sinkResult.containsKey(\"sink\"));\n    List<Object> sinkResultList = sinkResult.get(\"sink\");\n    Assert.assertEquals(1, sinkResultList.size());\n    // note : sink transform would have exectued, so the expected is string and not integer\n    Assert.assertEquals(\"1.0\", sinkResultList.get(0));\n    executor.resetEmitter();\n  }","commit_id":"741ea9e7e9c4bdf3639a11d307208eae0aa0b2dc","url":"https://github.com/caskdata/cdap"},{"original_method":"private Map<String,List<Long>> buildTimestampMap( final ReportArtEntity report, final Iterator<? extends ReportingEventSupport> eventIterator ) {\n\t\tfinal Map<String,List<Long>> ipToTimesMap = Maps.newHashMap();\n\t\twhile ( eventIterator.hasNext() ) {\n\t\t\tfinal ReportingEventSupport event = eventIterator.next();\n\t\t\tif ( event.getTimestampMs() <= report.getEndMs() ) {\n\t\t\t\tList<Long> endTimes = ipToTimesMap.get( getIpUuid( event ) );\n\t\t\t\tif ( endTimes == null ) {\n\t\t\t\t\tendTimes = Lists.newArrayList( event.getTimestampMs() );\n\t\t\t\t\tipToTimesMap.put( getIpUuid( event ), endTimes );\n\t\t\t\t} else if ( endTimes.size() == 1 && event.getTimestampMs() < report.getBeginMs() ) {\n\t\t\t\t\tendTimes.set( 0, event.getTimestampMs() );\n\t\t\t\t} else {\n\t\t\t\t\tendTimes.add( event.getTimestampMs() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ipToTimesMap;\n\t}","id":64062,"modified_method":"private Map<String,List<Long>> buildTimestampMap( final ReportArtEntity report, final Iterator<? extends ReportingEventSupport> eventIterator ) {\n\t\tfinal Map<String,List<Long>> ipToTimesMap = Maps.newHashMap();\n\t\twhile ( eventIterator.hasNext() ) {\n\t\t\tfinal ReportingEventSupport event = eventIterator.next();\n\t\t\tif ( event.getTimestampMs() <= report.getEndMs() ) {\n\t\t\t\tList<Long> endTimes = ipToTimesMap.get( getIpUuid( event ) );\n\t\t\t\tif ( endTimes == null ) {\n\t\t\t\t\tendTimes = Lists.newArrayList( event.getTimestampMs() );\n\t\t\t\t\tipToTimesMap.put( getIpUuid( event ), endTimes );\n\t\t\t\t} else if ( endTimes.size() == 1 && event.getTimestampMs() < report.getBeginMs() ) {\n\t\t\t\t\tendTimes.set( 0, event.getTimestampMs() );\n\t\t\t\t} else {\n\t\t\t\t\tendTimes.add( event.getTimestampMs() );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak; // end of relevant data\n\t\t\t}\n\t\t}\n\t\treturn ipToTimesMap;\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic ReportArtEntity generateReportArt( final ReportArtEntity report )\n\t{\n\t\tlog.debug(\"GENERATING REPORT ART\");\n\n\t\t// Find end times for the elastic ips (key is uuid)\n\t\tfinal Map<String,List<Long>> ipToDeleteTimesMap = buildTimestampMap( report, getElasticIpDeleteEventIterator() );\n\n\t\t/* Create super-tree of availZones, clusters, accounts, users, and instances;\n\t\t\t\t * and create a Map of the instance nodes at the bottom.\n\t\t\t\t */\n\t\tfinal Map<String,List<ElasticIpAllocation>> ipUuidToAllocationListMap = Maps.newHashMap();\n\t\tfinal Iterator<ReportingElasticIpCreateEvent> createEventIterator = getElasticIpCreateEventIterator();\n\t\twhile ( createEventIterator.hasNext() ) {\n\t\t\tfinal ReportingElasticIpCreateEvent createEvent = createEventIterator.next();\n\t\t\tfinal Long deleteTime = findTimeAfter( ipToDeleteTimesMap, createEvent.getUuid(), createEvent.getTimestampMs() );\n\t\t\tif ( deleteTime < report.getBeginMs() ) {\n\t\t\t\tcontinue; // usage not relevant for this report\n\t\t\t}\n\t\t\tfinal ReportingUser reportingUser = getUserById( createEvent.getUserId() );\n\t\t\tif (reportingUser==null) {\n\t\t\t\tlog.error(\"No user corresponding to event:\" + createEvent.getUserId() + \" \" + createEvent.getNaturalId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal ReportingAccount reportingAccount = getAccountById( reportingUser.getAccountId() );\n\t\t\tif (reportingAccount==null) {\n\t\t\t\tlog.error(\"No account corresponding to user:\" + reportingUser.getAccountId()+ \" \" + createEvent.getNaturalId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tList<ElasticIpAllocation> allocations = ipUuidToAllocationListMap.get( createEvent.getUuid() );\n\t\t\tif ( allocations == null ) {\n\t\t\t\tallocations = Lists.newArrayList();\n\t\t\t\tipUuidToAllocationListMap.put( createEvent.getUuid(), allocations );\n\t\t\t}\n\t\t\tallocations.add( new ElasticIpAllocation( reportingAccount.getName(), reportingUser.getName(), createEvent.getIp(), createEvent.getTimestampMs(), deleteTime ) );\n\t\t\tfinal AccountArtEntity account;\n\t\t\tif (!report.getAccounts().containsKey(reportingAccount.getName())) {\n\t\t\t\taccount = new AccountArtEntity();\n\t\t\t\treport.getAccounts().put(reportingAccount.getName(), account);\n\t\t\t} else {\n\t\t\t\taccount = report.getAccounts().get(reportingAccount.getName());\n\t\t\t}\n\t\t\tfinal UserArtEntity user;\n\t\t\tif (!account.getUsers().containsKey(reportingUser.getName())) {\n\t\t\t\tuser = new UserArtEntity();\n\t\t\t\taccount.getUsers().put(reportingUser.getName(), user);\n\t\t\t} else {\n\t\t\t\tuser = account.getUsers().get(reportingUser.getName());\n\t\t\t}\n\t\t\tfinal ElasticIpArtEntity elasticIp;\n\t\t\tif (!user.getElasticIps().containsKey(createEvent.getIp())) {\n\t\t\t\telasticIp = new ElasticIpArtEntity();\n\t\t\t\telasticIp.getUsage().setIpNum(1);\n\t\t\t\tuser.getElasticIps().put(createEvent.getIp(), elasticIp);\n\t\t\t} else {\n\t\t\t\telasticIp = user.getElasticIps().get(createEvent.getIp());\n\t\t\t}\n\t\t\telasticIp.getUsage().setDurationMs( elasticIp.getUsage().getDurationMs() + calculateDuration( report, createEvent.getTimestampMs(), deleteTime ) );\n\t\t}\n\n\t\t\n\t\t/* Scan instance entities so we can get the instance id from the uuid\n\t\t */\n\t\tfinal Map<String,InstanceArtEntity> instanceEntities = Maps.newHashMap();\n\t\tfinal Iterator<ReportingInstanceCreateEvent> instanceIterator = getInstanceCreateEventIterator();\n\t\twhile ( instanceIterator.hasNext() ) {\n\t\t\tfinal ReportingInstanceCreateEvent createEvent = instanceIterator.next();\n\t\t\tfinal InstanceArtEntity instance = new InstanceArtEntity(createEvent.getInstanceType(), createEvent.getInstanceId());\n\t\t\tinstanceEntities.put(createEvent.getUuid(), instance);\n\t\t}\n\n\t\t// Find end times for the elastic ips (key is uuid)\n\t\tfinal Map<String,List<Long>> ipToDetachTimesMap = buildTimestampMap( report, getElasticIpDetachEventIterator() );\n\n\t\t/* Find attachment start times\n\t\t */\n\t\tfinal Iterator<ReportingElasticIpAttachEvent> attachEventIterator = getElasticIpAttachEventIterator();\n\t\twhile (attachEventIterator.hasNext()) {\n\t\t\tfinal ReportingElasticIpAttachEvent attachEvent = attachEventIterator.next();\n\t\t\t// tolerate missing detach events by accounting for delete events also\n\t\t\tfinal Long deleteTime = findTimeAfter( ipToDeleteTimesMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() );\n\t\t\tfinal Long detachTime = Math.min( deleteTime, findTimeAfter( ipToDetachTimesMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() ));\n\t\t\tif ( detachTime < report.getBeginMs() ) {\n\t\t\t\tcontinue; // usage not relevant for this report\n\t\t\t}\n\t\t\tfinal Long attachmentDuration = calculateDuration( report, attachEvent.getTimestampMs(), detachTime );\n\t\t\tfinal ElasticIpArtEntity entity = findEntityForTimestamp( report, ipUuidToAllocationListMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() );\n\t\t\tif ( entity == null ) {\n\t\t\t\tlog.error(\"Unable to find elastic ip owner for attachment, instance uuid: \" + attachEvent.getInstanceUuid() );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal InstanceArtEntity instance = instanceEntities.get( attachEvent.getInstanceUuid() );\n\t\t\tif ( instance == null ) {\n\t\t\t\tlog.error(\"Unable to find instance for attachment, instance uuid: \" + attachEvent.getInstanceUuid() );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tElasticIpUsageArtEntity usage = entity.getInstanceAttachments().get( instance.getInstanceId() );\n\t\t\tif ( usage == null ) {\n\t\t\t\tusage = new ElasticIpUsageArtEntity();\n\t\t\t\tusage.setIpNum( 1 );\n\t\t\t\tentity.getInstanceAttachments().put(  instance.getInstanceId(), usage );\n\t\t\t}\n\t\t\tusage.setDurationMs( usage.getDurationMs() + attachmentDuration );\n\t\t}\n\n\t\t/* Perform totals and summations for user, account, and global\n\t\t */\n\t\tfor( final AccountArtEntity account : report.getAccounts().values() ) {\n\t\t\tfor( final UserArtEntity user  : account.getUsers().values() ) {\n\t\t\t\tfor( final ElasticIpArtEntity ip : user.getElasticIps().values() ) {\n\t\t\t\t\tupdateUsageTotals(user.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t\tupdateUsageTotals(account.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t\tupdateUsageTotals(report.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn report;\n\t}","id":64063,"modified_method":"@Override\n\tpublic ReportArtEntity generateReportArt( final ReportArtEntity report )\n\t{\n\t\tlog.debug(\"GENERATING REPORT ART\");\n\n\t\t// Find end times for the elastic ips (key is uuid)\n\t\tfinal Map<String,List<Long>> ipToDeleteTimesMap = buildTimestampMap( report, getElasticIpDeleteEventIterator() );\n\n\t\t/* Create super-tree of availZones, clusters, accounts, users, and instances;\n\t\t\t\t * and create a Map of the instance nodes at the bottom.\n\t\t\t\t */\n\t\tfinal Map<String,List<ElasticIpAllocation>> ipUuidToAllocationListMap = Maps.newHashMap();\n\t\tfinal Iterator<ReportingElasticIpCreateEvent> createEventIterator = getElasticIpCreateEventIterator();\n\t\twhile ( createEventIterator.hasNext() ) {\n\t\t\tfinal ReportingElasticIpCreateEvent createEvent = createEventIterator.next();\n\t\t\tfinal Long deleteTime = findTimeAfter( ipToDeleteTimesMap, createEvent.getUuid(), createEvent.getTimestampMs() );\n\t\t\tif ( deleteTime < report.getBeginMs() ) {\n\t\t\t\tcontinue; // usage not relevant for this report\n\t\t\t}\n\t\t\tif ( createEvent.getTimestampMs() > report.getEndMs() ) {\n\t\t\t\tbreak; // end of relevant events for this report\n\t\t\t}\n\t\t\tfinal ReportingUser reportingUser = getUserById( createEvent.getUserId() );\n\t\t\tif (reportingUser==null) {\n\t\t\t\tlog.error(\"No user corresponding to event:\" + createEvent.getUserId() + \" \" + createEvent.getNaturalId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal ReportingAccount reportingAccount = getAccountById( reportingUser.getAccountId() );\n\t\t\tif (reportingAccount==null) {\n\t\t\t\tlog.error(\"No account corresponding to user:\" + reportingUser.getAccountId()+ \" \" + createEvent.getNaturalId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tList<ElasticIpAllocation> allocations = ipUuidToAllocationListMap.get( createEvent.getUuid() );\n\t\t\tif ( allocations == null ) {\n\t\t\t\tallocations = Lists.newArrayList();\n\t\t\t\tipUuidToAllocationListMap.put( createEvent.getUuid(), allocations );\n\t\t\t}\n\t\t\tallocations.add( new ElasticIpAllocation( reportingAccount.getName(), reportingUser.getName(), createEvent.getIp(), createEvent.getTimestampMs(), deleteTime ) );\n\t\t\tfinal AccountArtEntity account;\n\t\t\tif (!report.getAccounts().containsKey(reportingAccount.getName())) {\n\t\t\t\taccount = new AccountArtEntity();\n\t\t\t\treport.getAccounts().put(reportingAccount.getName(), account);\n\t\t\t} else {\n\t\t\t\taccount = report.getAccounts().get(reportingAccount.getName());\n\t\t\t}\n\t\t\tfinal UserArtEntity user;\n\t\t\tif (!account.getUsers().containsKey(reportingUser.getName())) {\n\t\t\t\tuser = new UserArtEntity();\n\t\t\t\taccount.getUsers().put(reportingUser.getName(), user);\n\t\t\t} else {\n\t\t\t\tuser = account.getUsers().get(reportingUser.getName());\n\t\t\t}\n\t\t\tfinal ElasticIpArtEntity elasticIp;\n\t\t\tif (!user.getElasticIps().containsKey(createEvent.getIp())) {\n\t\t\t\telasticIp = new ElasticIpArtEntity();\n\t\t\t\telasticIp.getUsage().setIpNum(1);\n\t\t\t\tuser.getElasticIps().put(createEvent.getIp(), elasticIp);\n\t\t\t} else {\n\t\t\t\telasticIp = user.getElasticIps().get(createEvent.getIp());\n\t\t\t}\n\t\t\telasticIp.getUsage().setDurationMs( elasticIp.getUsage().getDurationMs() + calculateDuration( report, createEvent.getTimestampMs(), deleteTime ) );\n\t\t}\n\n\t\t\n\t\t/* Scan instance entities so we can get the instance id from the uuid\n\t\t */\n\t\tfinal Map<String,InstanceArtEntity> instanceEntities = Maps.newHashMap();\n\t\tfinal Iterator<ReportingInstanceCreateEvent> instanceIterator = getInstanceCreateEventIterator();\n\t\twhile ( instanceIterator.hasNext() ) {\n\t\t\tfinal ReportingInstanceCreateEvent createEvent = instanceIterator.next();\n\t\t\tif ( createEvent.getTimestampMs() > report.getEndMs() ) {\n\t\t\t\tbreak; // end of relevant events for this report\n\t\t\t}\n\t\t\tfinal InstanceArtEntity instance = new InstanceArtEntity(createEvent.getInstanceType(), createEvent.getInstanceId());\n\t\t\tinstanceEntities.put(createEvent.getUuid(), instance);\n\t\t}\n\n\t\t// Find end times for the elastic ips (key is uuid)\n\t\tfinal Map<String,List<Long>> ipToDetachTimesMap = buildTimestampMap( report, getElasticIpDetachEventIterator() );\n\n\t\t/* Find attachment start times\n\t\t */\n\t\tfinal Iterator<ReportingElasticIpAttachEvent> attachEventIterator = getElasticIpAttachEventIterator();\n\t\twhile (attachEventIterator.hasNext()) {\n\t\t\tfinal ReportingElasticIpAttachEvent attachEvent = attachEventIterator.next();\n\t\t\t// tolerate missing detach events by accounting for delete events also\n\t\t\tfinal Long deleteTime = findTimeAfter( ipToDeleteTimesMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() );\n\t\t\tfinal Long detachTime = Math.min( deleteTime, findTimeAfter( ipToDetachTimesMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() ));\n\t\t\tif ( detachTime < report.getBeginMs() ) {\n\t\t\t\tcontinue; // usage not relevant for this report\n\t\t\t}\n\t\t\tif ( attachEvent.getTimestampMs() > report.getEndMs() ) {\n\t\t\t\tbreak; // end of relevant events for this report\n\t\t\t}\n\t\t\tfinal Long attachmentDuration = calculateDuration( report, attachEvent.getTimestampMs(), detachTime );\n\t\t\tfinal ElasticIpArtEntity entity = findEntityForTimestamp( report, ipUuidToAllocationListMap, attachEvent.getIpUuid(), attachEvent.getTimestampMs() );\n\t\t\tif ( entity == null ) {\n\t\t\t\tlog.error(\"Unable to find elastic ip owner for attachment, instance uuid: \" + attachEvent.getInstanceUuid() );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal InstanceArtEntity instance = instanceEntities.get( attachEvent.getInstanceUuid() );\n\t\t\tif ( instance == null ) {\n\t\t\t\tlog.error(\"Unable to find instance for attachment, instance uuid: \" + attachEvent.getInstanceUuid() );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tElasticIpUsageArtEntity usage = entity.getInstanceAttachments().get( instance.getInstanceId() );\n\t\t\tif ( usage == null ) {\n\t\t\t\tusage = new ElasticIpUsageArtEntity();\n\t\t\t\tusage.setIpNum( 1 );\n\t\t\t\tentity.getInstanceAttachments().put(  instance.getInstanceId(), usage );\n\t\t\t}\n\t\t\tusage.setDurationMs( usage.getDurationMs() + attachmentDuration );\n\t\t}\n\n\t\t/* Perform totals and summations for user, account, and global\n\t\t */\n\t\tfor( final AccountArtEntity account : report.getAccounts().values() ) {\n\t\t\tfor( final UserArtEntity user  : account.getUsers().values() ) {\n\t\t\t\tfor( final ElasticIpArtEntity ip : user.getElasticIps().values() ) {\n\t\t\t\t\tupdateUsageTotals(user.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t\tupdateUsageTotals(account.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t\tupdateUsageTotals(report.getUsageTotals().getElasticIpTotals(), ip.getUsage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn report;\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateFalseData()\n\t{\n\t\tlog.debug(\" ----> GENERATING FALSE DATA\");\n\t\t\n\n\t\t/* Generate every combination of zones, clusters, accounts, and users */\n\t\tint uniqueUserId = 0;\n\t\tint uniqueAccountId = 0;\n\t\tint uniqueClusterId = 0;\n\t\tfor (int availZoneNum = 0; availZoneNum<NUM_AVAIL_ZONE; availZoneNum++) {\n\t\t\tString availZone = \"zone-\" + availZoneNum;\n\t\t\tfor (int clusterNum=0; clusterNum<NUM_CLUSTERS_PER_ZONE; clusterNum++) {\n\t\t\t\tuniqueClusterId++;\n\t\t\t\tString cluster = \"cluster-\" + uniqueClusterId;\n\t\t\t\tfor (int accountNum=0; accountNum<NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {\n\t\t\t\t\tuniqueAccountId++;\n\t\t\t\t\tString accountId = \"acct-\" + uniqueAccountId;\n\t\t\t\t\tString accountName = \"account-\" + uniqueAccountId;\n\t\t\t\t\tReportingAccountCrud.getInstance().createOrUpdateAccount(accountId, accountName);\n\t\t\t\t\tfor (int userNum=0; userNum<NUM_USERS_PER_ACCOUNT; userNum++) {\n\t\t\t\t\t\tlog.debug(String.format(\"Generating usage for user %d\\n\", userNum));\n\t\t\t\t\t\tString user = \"user-\" + userNum;\n\t\t\t\t\t\tuniqueUserId++;\n\t\t\t\t\t\tList<Attachment> attachments = new ArrayList<Attachment>();\n\n\t\t\t\t\t\t/* For every zone/cluster/account/user combination, generate instances,\n\t\t\t\t\t\t * volumes, IPs, buckets, and objects. \n\t\t\t\t\t\t * Also generate usage.\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tString userId = \"u-\" + uniqueUserId;\n\t\t\t\t\t\tString userName = \"user-\" + uniqueUserId;\n\t\t\t\t\t\tReportingUserCrud.getInstance().createOrUpdateUser(userId, accountId, userName);\n\n\t\t\t\t\t\t/* These uuids must not overlap as we want the userNum/uuidNum combo to be\n\t\t\t\t\t\t * unique here. We need to know the full range of every instance, volume,\n\t\t\t\t\t\t * snapshot, ip, and object uuids generated so far, for each user, in order\n\t\t\t\t\t\t * to generate usage later. As a result we must have non-overlapping start\n\t\t\t\t\t\t * values for each of them.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlong instanceUuidNum   = INSTANCE_UUID_START;\n\t\t\t\t\t\tlong volumeUuidNum     = VOLUME_UUID_START;\n\t\t\t\t\t\tlong elasticIpUuidNum  = ELASTIC_IP_UUID_START;\n\t\t\t\t\t\tlong snapshotUuidNum   = SNAPSHOT_UUID_START;\n\t\t\t\t\t\tlong bucketUuidNum     = BUCKET_UUID_START;\n\t\t\t\t\t\tlong objectUuidNum     = OBJECT_UUID_START;\n\n\t\t\t\t\t\tString instanceUuid  = \"(none)\";\n\t\t\t\t\t\tString volumeUuid    = \"(none)\";\n\t\t\t\t\t\tString elasticIpUuid = \"(none)\";\n\t\t\t\t\t\tString bucketName    = \"(none)\";\n\t\t\t\t\t\tint createdInstanceNum = 0;\n\t\t\t\t\t\tfor (int periodNum=0; periodNum<NUM_PERIODS; periodNum++) {\n\t\t\t\t\t\t\tlog.debug(String.format(\" Generating usage for period %d\\n\", periodNum));\n\t\t\t\t\t\t\tlong timeMs = START_TIME + (PERIOD_DURATION*periodNum);\n\n\t\t\t\t\t\t\t/* Create a fake instance, a fake volume, and a fake elastic IP if they should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_ENTITY == 0) {\n\t\t\t\t\t\t\t\t/* cycle thru instance types */\n\t\t\t\t\t\t\t\tint typeNum = createdInstanceNum%FalseInstanceType.values().length;\n\t\t\t\t\t\t\t\tFalseInstanceType type = FalseInstanceType.values()[typeNum];\n\t\t\t\t\t\t\t\tinstanceUuid = String.format(UUID_FORMAT, uniqueUserId, instanceUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating instance uuid %s\\n\", instanceUuid));\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid, timeMs,\n\t\t\t\t\t\t\t\t\t\t(\"i-\" + userNum + \"-\" + periodNum), type.toString(), userId, userName,\n\t\t\t\t\t\t\t\t\t\taccountName, accountId, availZone);\n\t\t\t\t\t\t\t\tcreatedInstanceNum++;\n\n\t\t\t\t\t\t\t\tvolumeUuid = String.format(UUID_FORMAT, uniqueUserId, volumeUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating volume uuid %s\\n\", volumeUuid));\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid, (\"vol-\" + userNum + \"-\" + periodNum),\n\t\t\t\t\t\t\t\t\t\ttimeMs, userId, availZone, VOLUME_SIZE);\n\n\t\t\t\t\t\t\t\telasticIpUuid = String.format(UUID_FORMAT, uniqueUserId, elasticIpUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating elastic ip uuid %s\\n\", elasticIpUuid));\n\t\t\t\t\t\t\t\tString ip = String.format(\"%d.%d.%d.%d\",\n\t\t\t\t\t\t\t\t\t\t(userNum >> 8) % 256,\n\t\t\t\t\t\t\t\t\t\tuserNum % 256,\n\t\t\t\t\t\t\t\t\t\t(periodNum >> 8) % 256,\n\t\t\t\t\t\t\t\t\t\tperiodNum % 256);\n\t\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid, timeMs, userId, ip);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Create a fake snapshot if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, snapshotUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating snapshot uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,\n\t\t\t\t\t\t\t\t\t\tvolumeUuid, (\"snap-\" + userNum + \"-\" + periodNum),\n\t\t\t\t\t\t\t\t\t\ttimeMs, userId, SNAPSHOT_SIZE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t/* Create a fake bucket if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_BUCKET == 0) {\n\t\t\t\t\t\t\t\tbucketName = \"bucket-\" + bucketUuidNum++;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Create a fake object if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_OBJECT == 0) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, objectUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating object uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName, uuid, \"0\",\n\t\t\t\t\t\t\t\t\t\tOBJECT_SIZE, timeMs, userId);\n\t\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t\t/* Generate instance usage in this period for every instance running from before */\n\t\t\t\t\t\t\tdouble oneMB = 1024d*11024d;\n\t\t\t\t\t\t\tfor (long i=INSTANCE_UUID_START; i<instanceUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating instance usage uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"NetworkIn\", 0, \"total\", oneMB*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"NetworkIn\", 0, \"internal\", oneMB*2*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"NetworkOut\", 0, \"total\", oneMB*3*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"NetworkOut\", 0, \"internal\", oneMB*4*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"DiskReadBytes\", 0, \"root\", oneMB*5*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"DiskWriteBytes\", 0, \"root\", oneMB*6*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"DiskReadBytes\", 0, \"ephemeral0\", oneMB*7*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"DiskWriteBytes\", 0, \"ephemeral0\", oneMB*8*periodNum, timeMs);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"\", \"CPUUtilizationMs\", 0, \"default\", (double)(PERIOD_DURATION/2), timeMs);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Generate volume usage in this period for every volume that was created before */\n\t\t\t\t\t\t\tfor (long i=VOLUME_UUID_START; i<volumeUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating volume usage uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertUsageEvent(uuid, timeMs,\n\t\t\t\t\t\t\t\t\t\tVOLUME_CUMULATIVE_READ_PER_PERIOD,\n\t\t\t\t\t\t\t\t\t\tVOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Generate object usage in this period for every object that was created before */\n\t\t\t\t\t\t\tfor (long i=OBJECT_UUID_START; i<objectUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\t//TODO: divide by zero here\n\t\t\t\t\t\t\t\tlong bucketNum = i/(NUM_PERIODS_PER_BUCKET/NUM_PERIODS_PER_OBJECT);\n\t\t\t\t\t\t\t\tbucketName = String.format(UUID_FORMAT, uniqueUserId, bucketNum);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating object usage, bucket uuid %s, object uuid %s\\n\", bucketName, uuid));\n\t\t\t\t\t\t\t\tReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(\n\t\t\t\t\t\t\t\t\t\tbucketName,\tuuid, \"0\", OBJECT_SIZE, timeMs, userId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Attach Volumes and Elastic IPs to Instances */\n\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid, instanceUuid, VOLUME_SIZE, timeMs);\n\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid, instanceUuid, timeMs);\n\t\t\t\t\t\t\tlog.debug(String.format(\"  Attaching volume %s and ip %s to instance %s\\n\", volumeUuid, elasticIpUuid, instanceUuid));\n\t\t\t\t\t\t\tattachments.add(new Attachment(instanceUuid, volumeUuid, elasticIpUuid));\n\n\t\t\t\t\t\t\t/* Detach old Volumes and Elastic IPs from old Instances */\n\t\t\t\t\t\t\tif (attachments.size() >= ATTACH_PERIODS_DURATION) {\n\t\t\t\t\t\t\t\tAttachment attachment = attachments.remove(0);\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),\n\t\t\t\t\t\t\t\t\t\tattachment.getInstanceUuid(), VOLUME_SIZE, timeMs);\n\t\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),\n\t\t\t\t\t\t\t\t\t\tattachment.getInstanceUuid(), timeMs);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Detaching volume %s and ip %s to instance %s\\n\",\n\t\t\t\t\t\t\t\t\t\tattachment.getVolumeUuid(), attachment.getElasticIpUuid(), attachment.getInstanceUuid()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\n\t\t}\n\t}","id":64064,"modified_method":"@ExposedCommand\n\tpublic static void generateFalseData()\n\t{\n\t\tlog.debug(\" ----> GENERATING FALSE DATA\");\n\t\t\n\n\t\t/* Generate every combination of zones, clusters, accounts, and users */\n\t\tint uniqueUserId = 0;\n\t\tint uniqueAccountId = 0;\n\t\tint uniqueClusterId = 0;\n\t\tfor (int availZoneNum = 0; availZoneNum<NUM_AVAIL_ZONE; availZoneNum++) {\n\t\t\tString availZone = \"zone-\" + availZoneNum;\n\t\t\tfor (int clusterNum=0; clusterNum<NUM_CLUSTERS_PER_ZONE; clusterNum++) {\n\t\t\t\tuniqueClusterId++;\n\t\t\t\tString cluster = \"cluster-\" + uniqueClusterId;\n\t\t\t\tfor (int accountNum=0; accountNum<NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {\n\t\t\t\t\tuniqueAccountId++;\n\t\t\t\t\tString accountId = \"acct-\" + uniqueAccountId;\n\t\t\t\t\tString accountName = \"account-\" + uniqueAccountId;\n\t\t\t\t\tReportingAccountCrud.getInstance().createOrUpdateAccount(accountId, accountName);\n\t\t\t\t\tfor (int userNum=0; userNum<NUM_USERS_PER_ACCOUNT; userNum++) {\n\t\t\t\t\t\tlog.debug(String.format(\"Generating usage for user %d\\n\", userNum));\n\t\t\t\t\t\tString user = \"user-\" + userNum;\n\t\t\t\t\t\tuniqueUserId++;\n\t\t\t\t\t\tList<Attachment> attachments = new ArrayList<Attachment>();\n\n\t\t\t\t\t\t/* For every zone/cluster/account/user combination, generate instances,\n\t\t\t\t\t\t * volumes, IPs, buckets, and objects. \n\t\t\t\t\t\t * Also generate usage.\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tString userId = \"u-\" + uniqueUserId;\n\t\t\t\t\t\tString userName = \"user-\" + uniqueUserId;\n\t\t\t\t\t\tReportingUserCrud.getInstance().createOrUpdateUser(userId, accountId, userName);\n\n\t\t\t\t\t\t/* These uuids must not overlap as we want the userNum/uuidNum combo to be\n\t\t\t\t\t\t * unique here. We need to know the full range of every instance, volume,\n\t\t\t\t\t\t * snapshot, ip, and object uuids generated so far, for each user, in order\n\t\t\t\t\t\t * to generate usage later. As a result we must have non-overlapping start\n\t\t\t\t\t\t * values for each of them.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlong instanceUuidNum   = INSTANCE_UUID_START;\n\t\t\t\t\t\tlong volumeUuidNum     = VOLUME_UUID_START;\n\t\t\t\t\t\tlong elasticIpUuidNum  = ELASTIC_IP_UUID_START;\n\t\t\t\t\t\tlong snapshotUuidNum   = SNAPSHOT_UUID_START;\n\t\t\t\t\t\tlong bucketUuidNum     = BUCKET_UUID_START;\n\t\t\t\t\t\tlong objectUuidNum     = OBJECT_UUID_START;\n\n\t\t\t\t\t\tString instanceUuid  = \"(none)\";\n\t\t\t\t\t\tString volumeUuid    = \"(none)\";\n\t\t\t\t\t\tString elasticIpUuid = \"(none)\";\n\t\t\t\t\t\tString bucketName    = \"(none)\";\n\t\t\t\t\t\tint createdInstanceNum = 0;\n\t\t\t\t\t\tfor (int periodNum=0; periodNum<NUM_PERIODS; periodNum++) {\n\t\t\t\t\t\t\tlog.debug(String.format(\" Generating usage for period %d\\n\", periodNum));\n\t\t\t\t\t\t\tlong timeMs = START_TIME + (PERIOD_DURATION*periodNum);\n\n\t\t\t\t\t\t\t/* Create a fake instance, a fake volume, and a fake elastic IP if they should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_ENTITY == 0) {\n\t\t\t\t\t\t\t\t/* cycle thru instance types */\n\t\t\t\t\t\t\t\tint typeNum = createdInstanceNum%FalseInstanceType.values().length;\n\t\t\t\t\t\t\t\tFalseInstanceType type = FalseInstanceType.values()[typeNum];\n\t\t\t\t\t\t\t\tinstanceUuid = String.format(UUID_FORMAT, uniqueUserId, instanceUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating instance uuid %s\\n\", instanceUuid));\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,\n\t\t\t\t\t\t\t\t\t\t(\"i-\" + userNum + \"-\" + periodNum), timeMs, type.toString(), userId, availZone);\n\t\t\t\t\t\t\t\tcreatedInstanceNum++;\n\n\t\t\t\t\t\t\t\tvolumeUuid = String.format(UUID_FORMAT, uniqueUserId, volumeUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating volume uuid %s\\n\", volumeUuid));\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid, (\"vol-\" + userNum + \"-\" + periodNum),\n\t\t\t\t\t\t\t\t\t\ttimeMs, userId, availZone, VOLUME_SIZE);\n\n\t\t\t\t\t\t\t\telasticIpUuid = String.format(UUID_FORMAT, uniqueUserId, elasticIpUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating elastic ip uuid %s\\n\", elasticIpUuid));\n\t\t\t\t\t\t\t\tString ip = String.format(\"%d.%d.%d.%d\",\n\t\t\t\t\t\t\t\t\t\t(userNum >> 8) % 256,\n\t\t\t\t\t\t\t\t\t\tuserNum % 256,\n\t\t\t\t\t\t\t\t\t\t(periodNum >> 8) % 256,\n\t\t\t\t\t\t\t\t\t\tperiodNum % 256);\n\t\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid, timeMs, userId, ip);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Create a fake snapshot if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, snapshotUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating snapshot uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,\n\t\t\t\t\t\t\t\t\t\tvolumeUuid, (\"snap-\" + userNum + \"-\" + periodNum),\n\t\t\t\t\t\t\t\t\t\ttimeMs, userId, SNAPSHOT_SIZE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t/* Create a fake bucket if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_BUCKET == 0) {\n\t\t\t\t\t\t\t\tbucketName = \"bucket-\" + bucketUuidNum++;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Create a fake object if one should be created in this period. */\n\t\t\t\t\t\t\tif (periodNum % NUM_PERIODS_PER_OBJECT == 0) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, objectUuidNum++);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating object uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName, uuid, \"0\",\n\t\t\t\t\t\t\t\t\t\tOBJECT_SIZE, timeMs, userId);\n\t\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t\t/* Generate instance usage in this period for every instance running from before */\n\t\t\t\t\t\t\tdouble oneMB = 1024d*11024d;\n\t\t\t\t\t\t\tfor (long i=INSTANCE_UUID_START; i<instanceUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating instance usage uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"NetworkIn\", 0, \"total\", oneMB*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"NetworkIn\", 0, \"internal\", oneMB*2*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"NetworkOut\", 0, \"total\", oneMB*3*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"NetworkOut\", 0, \"internal\", oneMB*4*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"DiskReadBytes\", 0, \"root\", oneMB*5*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"DiskWriteBytes\", 0, \"root\", oneMB*6*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"DiskReadBytes\", 0, \"ephemeral0\", oneMB*7*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"DiskWriteBytes\", 0, \"ephemeral0\", oneMB*8*periodNum);\n\t\t\t\t\t\t\t\tReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,\n\t\t\t\t\t\t\t\t\t\ttimeMs, \"CPUUtilizationMs\", 0, \"default\", (double)(PERIOD_DURATION/2));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Generate volume usage in this period for every volume that was created before */\n\t\t\t\t\t\t\tfor (long i=VOLUME_UUID_START; i<volumeUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating volume usage uuid %s\\n\", uuid));\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertUsageEvent(uuid, timeMs,\n\t\t\t\t\t\t\t\t\t\tVOLUME_CUMULATIVE_READ_PER_PERIOD,\n\t\t\t\t\t\t\t\t\t\tVOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Generate object usage in this period for every object that was created before */\n\t\t\t\t\t\t\tfor (long i=OBJECT_UUID_START; i<objectUuidNum-2; i++) {\n\t\t\t\t\t\t\t\tString uuid = String.format(UUID_FORMAT, uniqueUserId, i);\n\t\t\t\t\t\t\t\t//TODO: divide by zero here\n\t\t\t\t\t\t\t\tlong bucketNum = i/(NUM_PERIODS_PER_BUCKET/NUM_PERIODS_PER_OBJECT);\n\t\t\t\t\t\t\t\tbucketName = String.format(UUID_FORMAT, uniqueUserId, bucketNum);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Generating object usage, bucket uuid %s, object uuid %s\\n\", bucketName, uuid));\n\t\t\t\t\t\t\t\tReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(\n\t\t\t\t\t\t\t\t\t\tbucketName,\tuuid, \"0\", OBJECT_SIZE, timeMs, userId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/* Attach Volumes and Elastic IPs to Instances */\n\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid, instanceUuid, VOLUME_SIZE, timeMs);\n\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid, instanceUuid, timeMs);\n\t\t\t\t\t\t\tlog.debug(String.format(\"  Attaching volume %s and ip %s to instance %s\\n\", volumeUuid, elasticIpUuid, instanceUuid));\n\t\t\t\t\t\t\tattachments.add(new Attachment(instanceUuid, volumeUuid, elasticIpUuid));\n\n\t\t\t\t\t\t\t/* Detach old Volumes and Elastic IPs from old Instances */\n\t\t\t\t\t\t\tif (attachments.size() >= ATTACH_PERIODS_DURATION) {\n\t\t\t\t\t\t\t\tAttachment attachment = attachments.remove(0);\n\t\t\t\t\t\t\t\tReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),\n\t\t\t\t\t\t\t\t\t\tattachment.getInstanceUuid(), VOLUME_SIZE, timeMs);\n\t\t\t\t\t\t\t\tReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),\n\t\t\t\t\t\t\t\t\t\tattachment.getInstanceUuid(), timeMs);\n\t\t\t\t\t\t\t\tlog.debug(String.format(\"  Detaching volume %s and ip %s to instance %s\\n\",\n\t\t\t\t\t\t\t\t\t\tattachment.getVolumeUuid(), attachment.getElasticIpUuid(), attachment.getInstanceUuid()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\n\t\t}\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public ReportArtEntity generateReportArt(ReportArtEntity report)\n\t{\n\t\tlog.debug(\"GENERATING REPORT ART\");\n\t\tEntityWrapper wrapper = EntityWrapper.get( ReportingInstanceCreateEvent.class );\n\n\t\t/* Create super-tree of availZones, clusters, accounts, users, and instances;\n\t\t * and create a Map of the instance usage nodes at the bottom.\n\t\t */\n\t\tMap<String,InstanceUsageArtEntity> usageEntities = new HashMap<String,InstanceUsageArtEntity>();\n\t\tIterator iter = wrapper.scanWithNativeQuery( \"scanInstanceCreateEvents\" );\n\t\twhile (iter.hasNext()) {\n\t\t\tReportingInstanceCreateEvent createEvent = (ReportingInstanceCreateEvent) iter.next();\n\n\t\t\tif (! report.getZones().containsKey(createEvent.getAvailabilityZone())) {\n\t\t\t\treport.getZones().put(createEvent.getAvailabilityZone(), new AvailabilityZoneArtEntity());\n\t\t\t}\n\t\t\tAvailabilityZoneArtEntity zone = report.getZones().get(createEvent.getAvailabilityZone());\n\t\t\t\n\t\t\tReportingUser reportingUser = ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());\n\t\t\tif (reportingUser==null) {\n\t\t\t\tlog.error(\"No user corresponding to event:\" + createEvent.getUserId());\n\t\t\t}\n\t\t\tReportingAccount reportingAccount = ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());\n\t\t\tif (reportingAccount==null) {\n\t\t\t\tlog.error(\"No account corresponding to user:\" + reportingUser.getAccountId());\n\t\t\t}\n\t\t\tif (! zone.getAccounts().containsKey(reportingAccount.getName())) {\n\t\t\t\tzone.getAccounts().put(reportingAccount.getName(), new AccountArtEntity());\n\t\t\t}\n\t\t\tAccountArtEntity account = zone.getAccounts().get(reportingAccount.getName());\n\t\t\tif (! account.getUsers().containsKey(reportingUser.getName())) {\n\t\t\t\taccount.getUsers().put(reportingUser.getName(), new UserArtEntity());\n\t\t\t}\n\t\t\tUserArtEntity user = account.getUsers().get(reportingUser.getName());\n\t\t\tif (! user.getInstances().containsKey(createEvent.getUuid())) {\n\t\t\t\tuser.getInstances().put(createEvent.getUuid(), new InstanceArtEntity(createEvent.getInstanceType(), createEvent.getInstanceId()));\n\t\t\t}\n\t\t\tInstanceArtEntity instance = user.getInstances().get(createEvent.getUuid());\n\t\t\tinstance.getUsage().addInstanceCnt(1);\n\t\t\tusageEntities.put(createEvent.getUuid(), instance.getUsage());\n\t\t}\n\n\t\t\n\t\t\n\t\t/* Scan through instance usage and update instance usage nodes. Also,\n\t\t * find start and end times.\n\t\t */\n\t\tMap<UsageEventKey,ReportingInstanceUsageEvent> lastEvents =\n\t\t\tnew HashMap<UsageEventKey,ReportingInstanceUsageEvent>();\n\t\tMap<String,StartEndTimes> startEndTimes =\n\t\t\tnew HashMap<String,StartEndTimes>();\n\t\titer = wrapper.scanWithNativeQuery( \"scanInstanceUsageEvents\" );\n\t\twhile (iter.hasNext()) {\n\n\t\t\tReportingInstanceUsageEvent usageEvent = (ReportingInstanceUsageEvent) iter.next();\n\n\t\t\t/* Update instance start and end times */\n\t\t\tif (! startEndTimes.containsKey(usageEvent.getUuid())) {\n\t\t\t\tstartEndTimes.put(usageEvent.getUuid(),\n\t\t\t\t\tnew StartEndTimes(usageEvent.getTimestampMs(), usageEvent.getTimestampMs()));\n\t\t\t} else {\n\t\t\t\tStartEndTimes seTime = startEndTimes.get(usageEvent.getUuid());\n\t\t\t\tseTime.setStartTime(Math.min(seTime.getStartTime(), usageEvent.getTimestampMs()));\n\t\t\t\tseTime.setEndTime(Math.max(seTime.getEndTime(), usageEvent.getTimestampMs()));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t/* Grab last event for this metric/dim combo, and usage entity to update */\n\t\t\tUsageEventKey key = new UsageEventKey(usageEvent.getUuid(), usageEvent.getMetric(),\n\t\t\t\t\tusageEvent.getDimension());\n\t\t\tif (! lastEvents.containsKey(key)) {\n\t\t\t\tlastEvents.put(key, usageEvent);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tReportingInstanceUsageEvent lastEvent = lastEvents.get(key);\n\t\t\tif (! usageEntities.containsKey(usageEvent.getUuid())) {\n\t\t\t\tlog.error(\"usage event without corresponding instance:\" + usageEvent.getUuid());\n\t\t\t\tcontinue;\t\t\t\t\n\t\t\t}\n\t\t\tInstanceUsageArtEntity usage = usageEntities.get(usageEvent.getUuid());\n\t\t\tString metric = usageEvent.getMetric();\n\t\t\tString dim    = usageEvent.getDimension();\n\t\t\tif (usageEvent.getValue()==null || lastEvent.getValue()==null) {\n\t\t\t\tlog.debug(\"Null metric values shouldn't occur\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t/* We sometimes miss events here. Last event is dropped. Last event is last event for this metric/dim combo?? */\n\n\t\t\t/* Update metrics in usage */\n\t\t\tDouble value = null;\n\t\t\t/* Subtract last usage from this usage because all these statistics are CUMULATIVE.\t */\n\t\t\tif (usageEvent.getValue()!=null && lastEvent.getValue()!=null) {\n\t\t\t\tvalue = usageEvent.getValue() - lastEvent.getValue();\n\t\t\t} else if (usageEvent.getValue()!=null) {\n\t\t\t\tvalue = usageEvent.getValue();\n\t\t\t}\n\t\t\tDouble valueMB = (value==null) ? null : value/1024/1024; //don't bitshift a double\n\n\t\t\tif (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {\n\t\t\t\tusage.addNetTotalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {\n\t\t\t\tusage.addNetTotalOutMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_IN_BYTES)  && dim.equals(DIM_INTERNAL)) {\n\t\t\t\tusage.addNetInternalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_INTERNAL)) {\n\t\t\t\tusage.addNetTotalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_DISK_IN_BYTES) && (dim.equals(DIM_ROOT)||dim.startsWith(DIM_EPHEMERAL))) {\n\t\t\t\tusage.addDiskInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_DISK_OUT_BYTES) && (dim.equals(DIM_ROOT)||dim.startsWith(DIM_EPHEMERAL))) {\n\t\t\t\tusage.addDiskOutMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {\n\t\t\t\tusage.addCpuUtilizationMs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), value).longValue());\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Unrecognized metric for report:\" + metric + \"/\" + dim);\n\t\t\t}\n\n\t\t\tlastEvents.put(key, usageEvent);\n  \t\t} //while \n\n\t\t\n\t\t/* Update durations of all instances\n\t\t */\n\t\tfor (String uuid: startEndTimes.keySet()) {\n\t\t\tStartEndTimes seTime = startEndTimes.get(uuid);\n\t\t\tif (usageEntities.containsKey(uuid)) {\n\t\t\t\tlong durationMs = DurationCalculator.boundDuration(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tseTime.getStartTime(), seTime.getEndTime());\n\t\t\t\tusageEntities.get(uuid).setDurationMs(durationMs);\n\t\t\t} else {\n\t\t\t\tlog.error(\"startEndTime without corresponding instance:\" + uuid);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t/* Perform totals and summations\n\t\t */\n\t\tfor (String zoneName : report.getZones().keySet()) {\n\t\t\tAvailabilityZoneArtEntity zone = report.getZones().get(zoneName);\n\t\t\tUsageTotalsArtEntity zoneUsage = zone.getUsageTotals();\n\t\t\tfor (String accountName : zone.getAccounts().keySet()) {\n\t\t\t\tAccountArtEntity account = zone.getAccounts().get(accountName);\n\t\t\t\tUsageTotalsArtEntity accountUsage = account.getUsageTotals();\n\t\t\t\tfor (String userName : account.getUsers().keySet()) {\n\t\t\t\t\tUserArtEntity user = account.getUsers().get(userName);\n\t\t\t\t\tUsageTotalsArtEntity userUsage = user.getUsageTotals();\n\t\t\t\t\tfor (String instanceUuid : user.getInstances().keySet()) {\n\t\t\t\t\t\tInstanceArtEntity instance = user.getInstances().get(instanceUuid);\n\t\t\t\t\t\tupdateUsageTotals(userUsage, instance);\n\t\t\t\t\t\tupdateUsageTotals(accountUsage, instance);\n\t\t\t\t\t\tupdateUsageTotals(zoneUsage, instance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn report;\n\t}","id":64065,"modified_method":"@Override\n\tpublic ReportArtEntity generateReportArt(ReportArtEntity report)\n\t{\n\t\tlog.debug(\"GENERATING REPORT ART\");\n\n\t\t/* Create super-tree of availZones, clusters, accounts, users, and instances;\n\t\t * and create a Map of the instance usage nodes at the bottom.\n\t\t */\n\t\tMap<String,InstanceUsageArtEntity> usageEntities = new HashMap<String,InstanceUsageArtEntity>();\n\t\tIterator<ReportingInstanceCreateEvent> createEventIterator = getInstanceCreateEventIterator();\n\t\twhile (createEventIterator.hasNext()) {\n\t\t\tReportingInstanceCreateEvent createEvent = createEventIterator.next();\n\n\t\t\tif (! report.getZones().containsKey(createEvent.getAvailabilityZone())) {\n\t\t\t\treport.getZones().put(createEvent.getAvailabilityZone(), new AvailabilityZoneArtEntity());\n\t\t\t}\n\t\t\tAvailabilityZoneArtEntity zone = report.getZones().get(createEvent.getAvailabilityZone());\n\t\t\t\n\t\t\tReportingUser reportingUser = getUserById(createEvent.getUserId());\n\t\t\tif (reportingUser==null) {\n\t\t\t\tlog.error(\"No user corresponding to event:\" + createEvent.getUserId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tReportingAccount reportingAccount = getAccountById(reportingUser.getAccountId());\n\t\t\tif (reportingAccount==null) {\n\t\t\t\tlog.error(\"No account corresponding to user:\" + reportingUser.getAccountId());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (! zone.getAccounts().containsKey(reportingAccount.getName())) {\n\t\t\t\tzone.getAccounts().put(reportingAccount.getName(), new AccountArtEntity());\n\t\t\t}\n\t\t\tAccountArtEntity account = zone.getAccounts().get(reportingAccount.getName());\n\t\t\tif (! account.getUsers().containsKey(reportingUser.getName())) {\n\t\t\t\taccount.getUsers().put(reportingUser.getName(), new UserArtEntity());\n\t\t\t}\n\t\t\tUserArtEntity user = account.getUsers().get(reportingUser.getName());\n\t\t\tif (! user.getInstances().containsKey(createEvent.getUuid())) {\n\t\t\t\tuser.getInstances().put(createEvent.getUuid(), new InstanceArtEntity(createEvent.getInstanceType(), createEvent.getInstanceId()));\n\t\t\t}\n\t\t\tInstanceArtEntity instance = user.getInstances().get(createEvent.getUuid());\n\t\t\tinstance.getUsage().addInstanceCnt(1);\n\t\t\tusageEntities.put(createEvent.getUuid(), instance.getUsage());\n\t\t}\n\n\t\t\n\t\t\n\t\t/* Scan through instance usage and update instance usage nodes. Also,\n\t\t * find start and end times.\n\t\t */\n\t\tMap<UsageEventKey,ReportingInstanceUsageEvent> lastEvents =\n\t\t\tnew HashMap<UsageEventKey,ReportingInstanceUsageEvent>();\n\t\tMap<String,StartEndTimes> startEndTimes =\n\t\t\tnew HashMap<String,StartEndTimes>();\n\t\tfinal Iterator<ReportingInstanceUsageEvent> usageEventIterator = getInstanceUsageEventIterator();\n\t\twhile (usageEventIterator.hasNext()) {\n\t\t\tfinal ReportingInstanceUsageEvent usageEvent = usageEventIterator.next();\n\n\t\t\t/* Update instance start and end times */\n\t\t\tif (! startEndTimes.containsKey(usageEvent.getUuid())) {\n\t\t\t\tstartEndTimes.put(usageEvent.getUuid(),\n\t\t\t\t\tnew StartEndTimes(usageEvent.getTimestampMs(), usageEvent.getTimestampMs()));\n\t\t\t} else {\n\t\t\t\tStartEndTimes seTime = startEndTimes.get(usageEvent.getUuid());\n\t\t\t\tseTime.setStartTime(Math.min(seTime.getStartTime(), usageEvent.getTimestampMs()));\n\t\t\t\tseTime.setEndTime(Math.max(seTime.getEndTime(), usageEvent.getTimestampMs()));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t/* Grab last event for this metric/dim combo, and usage entity to update */\n\t\t\tUsageEventKey key = new UsageEventKey(usageEvent.getUuid(), usageEvent.getMetric(),\n\t\t\t\t\tusageEvent.getDimension());\n\t\t\tif (! lastEvents.containsKey(key)) {\n\t\t\t\tlastEvents.put(key, usageEvent);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tReportingInstanceUsageEvent lastEvent = lastEvents.get(key);\n\t\t\tif (! usageEntities.containsKey(usageEvent.getUuid())) {\n\t\t\t\tlog.error(\"usage event without corresponding instance:\" + usageEvent.getUuid());\n\t\t\t\tcontinue;\t\t\t\t\n\t\t\t}\n\t\t\tInstanceUsageArtEntity usage = usageEntities.get(usageEvent.getUuid());\n\t\t\tString metric = usageEvent.getMetric();\n\t\t\tString dim    = usageEvent.getDimension();\n\t\t\tif (usageEvent.getValue()==null || lastEvent.getValue()==null) {\n\t\t\t\tlog.debug(\"Null metric values shouldn't occur\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t/* We sometimes miss events here. Last event is dropped. Last event is last event for this metric/dim combo?? */\n\n\t\t\t/* Update metrics in usage */\n\t\t\tDouble value = null;\n\t\t\t/* Subtract last usage from this usage because all these statistics are CUMULATIVE.\t */\n\t\t\tif (usageEvent.getValue()!=null && lastEvent.getValue()!=null) {\n\t\t\t\tvalue = usageEvent.getValue() - lastEvent.getValue();\n\t\t\t} else if (usageEvent.getValue()!=null) {\n\t\t\t\tvalue = usageEvent.getValue();\n\t\t\t}\n\t\t\tDouble valueMB = (value==null) ? null : value/1024/1024; //don't bitshift a double\n\n\t\t\tif (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {\n\t\t\t\tusage.addNetTotalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {\n\t\t\t\tusage.addNetTotalOutMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_IN_BYTES)  && dim.equals(DIM_INTERNAL)) {\n\t\t\t\tusage.addNetInternalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_INTERNAL)) {\n\t\t\t\tusage.addNetTotalInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_DISK_IN_BYTES) && (dim.equals(DIM_ROOT)||dim.startsWith(DIM_EPHEMERAL))) {\n\t\t\t\tusage.addDiskInMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_DISK_OUT_BYTES) && (dim.equals(DIM_ROOT)||dim.startsWith(DIM_EPHEMERAL))) {\n\t\t\t\tusage.addDiskOutMegs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), valueMB).longValue());\n\t\t\t} else if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {\n\t\t\t\tusage.addCpuUtilizationMs(interpolate(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tlastEvent.getTimestampMs(), usageEvent.getTimestampMs(), value).longValue());\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Unrecognized metric for report:\" + metric + \"/\" + dim);\n\t\t\t}\n\n\t\t\tlastEvents.put(key, usageEvent);\n  \t\t} //while \n\n\t\t\n\t\t/* Update durations of all instances\n\t\t */\n\t\tfor (String uuid: startEndTimes.keySet()) {\n\t\t\tStartEndTimes seTime = startEndTimes.get(uuid);\n\t\t\tif (usageEntities.containsKey(uuid)) {\n\t\t\t\tlong durationMs = DurationCalculator.boundDuration(report.getBeginMs(), report.getEndMs(),\n\t\t\t\t\t\tseTime.getStartTime(), seTime.getEndTime());\n\t\t\t\tusageEntities.get(uuid).setDurationMs(durationMs);\n\t\t\t} else {\n\t\t\t\tlog.error(\"startEndTime without corresponding instance:\" + uuid);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t/* Perform totals and summations\n\t\t */\n\t\tfor (String zoneName : report.getZones().keySet()) {\n\t\t\tAvailabilityZoneArtEntity zone = report.getZones().get(zoneName);\n\t\t\tUsageTotalsArtEntity zoneUsage = zone.getUsageTotals();\n\t\t\tfor (String accountName : zone.getAccounts().keySet()) {\n\t\t\t\tAccountArtEntity account = zone.getAccounts().get(accountName);\n\t\t\t\tUsageTotalsArtEntity accountUsage = account.getUsageTotals();\n\t\t\t\tfor (String userName : account.getUsers().keySet()) {\n\t\t\t\t\tUserArtEntity user = account.getUsers().get(userName);\n\t\t\t\t\tUsageTotalsArtEntity userUsage = user.getUsageTotals();\n\t\t\t\t\tfor (String instanceUuid : user.getInstances().keySet()) {\n\t\t\t\t\t\tInstanceArtEntity instance = user.getInstances().get(instanceUuid);\n\t\t\t\t\t\tupdateUsageTotals(userUsage, instance);\n\t\t\t\t\t\tupdateUsageTotals(accountUsage, instance);\n\t\t\t\t\t\tupdateUsageTotals(zoneUsage, instance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn report;\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n    public void fireEvent(@Nonnull final InstanceCreationEvent event) {\n\tPreconditions.checkNotNull(event, \"Event is required\");\n\n\tfinal long timestamp = getCurrentTimeMillis();\n\n\t// Ensure account / user info is present and up to date\n\tgetReportingAccountCrud().createOrUpdateAccount(event.getAccountId(),\n\t\tevent.getAccountName());\n\tgetReportingUserCrud().createOrUpdateUser(event.getUserId(),\n\t\tevent.getAccountId(), event.getUserName());\n\tReportingInstanceEventStore eventStore = getReportingInstanceEventStore();\n\teventStore.insertCreateEvent(event.getUuid(), timestamp,\n\t\tevent.getInstanceId(), event.getInstanceType(),\n\t\tevent.getUserId(), event.getUserName(), event.getAccountName(),\n\t\tevent.getAccountId(), event.getAvailabilityZone());\n\n    }","id":64066,"modified_method":"@Override\n  public void fireEvent( @Nonnull final InstanceCreationEvent event ) {\n    Preconditions.checkNotNull( event, \"Event is required\" );\n\n    final long timestamp = getCurrentTimeMillis();\n\n    // Ensure account / user info is present and up to date\n    getReportingAccountCrud().createOrUpdateAccount( event.getAccountId(),\n        event.getAccountName() );\n    getReportingUserCrud().createOrUpdateUser( event.getUserId(),\n        event.getAccountId(), event.getUserName() );\n\n    // Record creation\n    ReportingInstanceEventStore eventStore = getReportingInstanceEventStore();\n    eventStore.insertCreateEvent( event.getUuid(), event.getInstanceId(), timestamp,\n        event.getInstanceType(), event.getUserId(), event.getAvailabilityZone() );\n\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void fireEvent( @Nonnull final InstanceUsageEvent event ) {\n    final long receivedEventMs = getCurrentTimeMillis();\n\n    log.debug(\"Received instance usage event:\" + event);\n\n    final String uuid = event.getUuid();\n    if ( uuid == null ) {\n      log.warn(\"Received null uuid\");\n      return;\n    }\n\n    if ( receivedEventMs > ( lastWriteMs.get() + (DEFAULT_WRITE_INTERVAL_SECS * 1000) ) ) {\n      try {\n\t  log.info( \"Wrote Reporting Instance:\" + uuid );\n\t        final ReportingInstanceEventStore eventStore = getReportingInstanceEventStore();\n\t        eventStore.insertUsageEvent(\n\t            event.getUuid(),\n\t            receivedEventMs,\n\t            event.getResourceName(),\n\t            event.getMetric(),\n\t            event.getSequenceNum(),\n\t            event.getDimension(),\n\t            event.getValue(),\n\t            event.getValueTimestamp()\n\t        );\n      } catch ( ConstraintViolationException ex ) {\n\t        log.debug( ex, ex ); // info already exists for instance\n      } catch ( Exception ex ) {\n        log.error( ex, ex ); \n      }\n    }\n  }","id":64067,"modified_method":"public void fireEvent( @Nonnull final InstanceUsageEvent event ) {\n    final long receivedEventMs = getCurrentTimeMillis();\n\n    log.debug(\"Received instance usage event:\" + event);\n\n    final String uuid = event.getUuid();\n    if ( uuid == null ) {\n      log.warn(\"Received null uuid\");\n      return;\n    }\n\n    if ( receivedEventMs > ( lastWriteMs.get() + (DEFAULT_WRITE_INTERVAL_SECS * 1000) ) ) {\n      try {\n\t  log.info( \"Wrote Reporting Instance:\" + uuid );\n\t        final ReportingInstanceEventStore eventStore = getReportingInstanceEventStore();\n\t        eventStore.insertUsageEvent(\n\t            event.getUuid(),\n              event.getValueTimestamp(),\n\t            event.getMetric(),\n\t            event.getSequenceNum(),\n\t            event.getDimension(),\n\t            event.getValue()\n\t        );\n      } catch ( ConstraintViolationException ex ) {\n\t        log.debug( ex, ex ); // info already exists for instance\n      } catch ( Exception ex ) {\n        log.error( ex, ex ); \n      }\n    }\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n    public String toString() {\n\treturn \"ReportingInstanceCreateEvent [uuid=\" + uuid + \", instanceId=\"\n\t\t+ instanceId + \", instanceType=\" + instanceType + \", userId=\"\n\t\t+ userId + \", userName=\" + userName + \", accoutName=\"\n\t\t+ accoutName + \", accountId=\" + accountId\n\t\t+ \", availabilityZone=\" + availabilityZone + \"]\";\n    }","id":64068,"modified_method":"@Override\n  public String toString() {\n    return \"ReportingInstanceCreateEvent [uuid=\" + uuid + \", instanceId=\"\n        + instanceId + \", instanceType=\" + instanceType + \", userId=\"\n        + userId + \", availabilityZone=\" + availabilityZone + \"]\";\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n     * <p>\n     * Do not instantiate this class directly; use the\n     * ReportingInstanceEventStore class.\n     */\n    ReportingInstanceCreateEvent(String uuid, Long timestampMs,\n\t    String instanceId, String instanceType, String userId,\n\t    String userName, String accountName, String accountId,\n\t    String availabilityZone) {\n\tthis.uuid = uuid;\n\tthis.timestampMs = timestampMs;\n\tthis.instanceId = instanceId;\n\tthis.instanceType = instanceType;\n\tthis.userId = userId;\n\tthis.userName = userName;\n\tthis.accoutName = accountName;\n\tthis.accountId = accountId;\n\tthis.availabilityZone = availabilityZone;\n    }","id":64069,"modified_method":"/**\n   * <p/>\n   * Do not instantiate this class directly; use the\n   * ReportingInstanceEventStore class.\n   */\n  ReportingInstanceCreateEvent( final String uuid,\n                                final String instanceId,\n                                final Long timestampMs,\n                                final String instanceType,\n                                final String userId,\n                                final String availabilityZone ) {\n    this.uuid = uuid;\n    this.instanceId = instanceId;\n    this.timestampMs = timestampMs;\n    this.instanceType = instanceType;\n    this.userId = userId;\n    this.availabilityZone = availabilityZone;\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void insertCreateEvent(@Nonnull final String uuid,\n\t    @Nonnull final long timestampMs, @Nonnull final String instanceId,\n\t    @Nonnull final String instanceType, @Nonnull final String userId,\n\t    @Nonnull final String userName, @Nonnull final String accountName,\n\t    @Nonnull final String accountId,\n\t    @Nonnull final String availabilityZone) {\n\tPreconditions.checkNotNull(uuid, \"Uuid is required\");\n\tPreconditions.checkNotNull(instanceId, \"InstanceId is required\");\n\tPreconditions.checkNotNull(instanceType, \"InstanceType is required\");\n\tPreconditions.checkNotNull(userId, \"UserId is required\");\n\tPreconditions.checkNotNull(userName, \"User Name is required\");\n\tPreconditions.checkNotNull(accountName, \"Account Name is required\");\n\tPreconditions.checkNotNull(accountId, \"Account ID is required\");\n\tPreconditions.checkNotNull(availabilityZone,\n\t\t\"AvailabilityZone is required\");\n\n\tpersist(new ReportingInstanceCreateEvent(uuid, timestampMs, instanceId,\n\t\tinstanceType, userId, userName, accountName, accountId,\n\t\tavailabilityZone));\n    }","id":64070,"modified_method":"public void insertCreateEvent(\n      @Nonnull final String uuid,\n      @Nonnull final String instanceId,\n      @Nonnull final Long timestampMs,\n      @Nonnull final String instanceType,\n      @Nonnull final String userId,\n      @Nonnull final String availabilityZone ) {\n    Preconditions.checkNotNull( uuid, \"Uuid is required\" );\n    Preconditions.checkNotNull( instanceId, \"InstanceId is required\" );\n    Preconditions.checkNotNull( timestampMs, \"TimestampMs is required\" );\n    Preconditions.checkNotNull( instanceType, \"InstanceType is required\" );\n    Preconditions.checkNotNull( userId, \"UserId is required\" );\n    Preconditions.checkNotNull( availabilityZone,\n        \"AvailabilityZone is required\" );\n\n    persist( new ReportingInstanceCreateEvent(\n        uuid,\n        instanceId,\n        timestampMs,\n        instanceType,\n        userId,\n        availabilityZone ) );\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void insertUsageEvent(@Nonnull final String uuid,\n\t    @Nonnull final long timestamp, @Nonnull final String resourceName,\n\t    @Nonnull final String metric, @Nonnull final int sequenceNum,\n\t    @Nonnull final String dimension, @Nonnull final Double value,\n\t    @Nonnull final long valueTimestamp) {\n\n\tPreconditions.checkNotNull(uuid, \"Uuid is required\");\n\tPreconditions.checkNotNull(timestamp, \"Timestamp is required\");\n\tPreconditions.checkNotNull(resourceName, \"ResourceName is required\");\n\tPreconditions.checkNotNull(metric, \"Metric is required\");\n\tPreconditions.checkNotNull(sequenceNum, \"SequenceNum is required\");\n\tPreconditions.checkNotNull(dimension, \"Dimension is required\");\n\tPreconditions.checkNotNull(value, \"value is required\");\n\tPreconditions\n\t\t.checkNotNull(valueTimestamp, \"ValueTimeStamp is required\");\n\n\tpersist(new ReportingInstanceUsageEvent(uuid, timestamp, resourceName,\n\t\tmetric, sequenceNum, dimension, value, valueTimestamp));\n\n    }","id":64071,"modified_method":"public void insertUsageEvent( @Nonnull final String uuid,\n                                @Nonnull final Long timestamp,\n                                @Nonnull final String metric,\n                                @Nonnull final Integer sequenceNum,\n                                @Nonnull final String dimension,\n                                @Nonnull final Double value ) {\n\n    Preconditions.checkNotNull( uuid, \"Uuid is required\" );\n    Preconditions.checkNotNull( timestamp, \"Timestamp is required\" );\n    Preconditions.checkNotNull( metric, \"Metric is required\" );\n    Preconditions.checkNotNull( sequenceNum, \"SequenceNum is required\" );\n    Preconditions.checkNotNull( dimension, \"Dimension is required\" );\n    Preconditions.checkNotNull( value, \"value is required\" );\n\n    persist( new ReportingInstanceUsageEvent( uuid, metric, sequenceNum, dimension, value, timestamp ) );\n  }","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"ReportingInstanceUsageEvent(final String uuid, final long timestamp, final String resourceName,\n\t\t    final String metric, final int sequenceNum, final String dimension,\n\t\t    final Double value, final long valueTimestamp) {\n\n\t\tassertThat(uuid, notNullValue());\n\t\tassertThat(timestamp, notNullValue());\n\t\tassertThat(resourceName, notNullValue());\n\t\tassertThat(metric, notNullValue());\n\t\tassertThat(sequenceNum, notNullValue());\n\t\tassertThat(dimension, notNullValue());\n\t\tassertThat(value, notNullValue());\n\t\tassertThat(valueTimestamp, notNullValue());\n\t\tthis.uuid = uuid;\n\t\tthis.timestampMs = timestamp;\n\t\tthis.resourceName = resourceName;\n\t\tthis.metric = metric;\n\t\tthis.sequenceNum = sequenceNum;\n\t\tthis.dimension = dimension;\n\t\tthis.value = value;\n\t\tthis.valueTimestamp = valueTimestamp;\n\t}","id":64072,"modified_method":"ReportingInstanceUsageEvent( final String uuid, final String metric, final Integer sequenceNum,\n\t\t    final String dimension, final Double value, final Long valueTimestamp ) {\n\n\t\tassertThat(uuid, notNullValue());\n\t\tassertThat(metric, notNullValue());\n\t\tassertThat(sequenceNum, notNullValue());\n\t\tassertThat(dimension, notNullValue());\n\t\tassertThat(value, notNullValue());\n\t\tassertThat(valueTimestamp, notNullValue());\n\t\tthis.uuid = uuid;\n\t\tthis.timestampMs = valueTimestamp;\n\t\tthis.metric = metric;\n\t\tthis.sequenceNum = sequenceNum;\n\t\tthis.dimension = dimension;\n\t\tthis.value = value;\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic String toString() {\n\t    return \"ReportingInstanceUsageEvent [uuid=\" + uuid\n\t\t    + \", resourceName=\" + resourceName + \", metric=\" + metric\n\t\t    + \", sequenceNum=\" + sequenceNum + \", dimension=\"\n\t\t    + dimension + \", value=\" + value + \", valueTimestamp=\"\n\t\t    + valueTimestamp + \"]\";\n\t}","id":64073,"modified_method":"@Override\n\tpublic String toString() {\n\t\t\treturn \"ReportingInstanceUsageEvent [uuid=\" + uuid\n\t\t\t\t+ \", metric=\" + metric\n\t\t\t\t+ \", sequenceNum=\" + sequenceNum + \", dimension=\"\n\t\t\t\t+ dimension + \", value=\" + value + \", timestamp=\"\n\t\t\t\t+ timestampMs + \"]\";\n\t}","commit_id":"9b4de8578ae56af99c2e06d7440756aad7c09154","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void close() {\n    try {\n      try {\n        if (logFileWriter != null) {\n          logFileWriter.close();\n        }\n      } finally {\n        if (fileSystem != null) {\n          fileSystem.close();\n        }\n      }\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n  }","id":64074,"modified_method":"private void close() {\n    try {\n      if (logFileWriter != null) {\n        logFileWriter.close();\n      }\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"@Inject\n  public FileLogAppender(CConfiguration cConfig, Configuration hConfig) {\n    setName(APPENDER_NAME);\n\n    this.hConfig = hConfig;\n\n    String baseDir = cConfig.get(LoggingConfiguration.LOG_BASE_DIR);\n    Preconditions.checkNotNull(baseDir, \"Log base dir cannot be null\");\n    this.logBaseDir = new Path(baseDir);\n\n    float rotationMins = cConfig.getFloat(LoggingConfiguration.LOG_FILE_ROTATION_INTERVAL_MINS,\n                                      TimeUnit.MINUTES.convert(1, TimeUnit.DAYS));\n    Preconditions.checkArgument(rotationMins > 0, \"Log file rotation interval is invalid: %s\", rotationMins);\n    this.logFileRotationIntervalMs = (long) (rotationMins * 60 * 1000);\n\n    this.syncIntervalBytes = cConfig.getInt(LoggingConfiguration.LOG_FILE_SYNC_INTERVAL_BYTES, 5 * 1024 * 1024);\n    Preconditions.checkArgument(this.syncIntervalBytes > 0,\n                                \"Log file sync interval is invalid: %s\", this.syncIntervalBytes);\n\n    long retentionDurationDays = cConfig.getLong(LoggingConfiguration.LOG_RETENTION_DURATION_DAYS, -1);\n    Preconditions.checkArgument(retentionDurationDays > 0,\n                                \"Log file retention duration is invalid: %s\", retentionDurationDays);\n    this.retentionDurationMs = TimeUnit.MILLISECONDS.convert(retentionDurationDays, TimeUnit.DAYS);\n  }","id":64075,"modified_method":"@Inject\n  public FileLogAppender(CConfiguration cConfig, LocationFactory locationFactory) {\n    setName(APPENDER_NAME);\n\n    String baseDir = cConfig.get(LoggingConfiguration.LOG_BASE_DIR);\n    Preconditions.checkNotNull(baseDir, \"Log base dir cannot be null\");\n    this.logBaseDir = locationFactory.create(baseDir);\n\n    float rotationMins = cConfig.getFloat(LoggingConfiguration.LOG_FILE_ROTATION_INTERVAL_MINS,\n                                      TimeUnit.MINUTES.convert(1, TimeUnit.DAYS));\n    Preconditions.checkArgument(rotationMins > 0, \"Log file rotation interval is invalid: %s\", rotationMins);\n    this.logFileRotationIntervalMs = (long) (rotationMins * 60 * 1000);\n\n    this.syncIntervalBytes = cConfig.getInt(LoggingConfiguration.LOG_FILE_SYNC_INTERVAL_BYTES, 5 * 1024 * 1024);\n    Preconditions.checkArgument(this.syncIntervalBytes > 0,\n                                \"Log file sync interval is invalid: %s\", this.syncIntervalBytes);\n\n    long retentionDurationDays = cConfig.getLong(LoggingConfiguration.LOG_RETENTION_DURATION_DAYS, -1);\n    Preconditions.checkArgument(retentionDurationDays > 0,\n                                \"Log file retention duration is invalid: %s\", retentionDurationDays);\n    this.retentionDurationMs = TimeUnit.MILLISECONDS.convert(retentionDurationDays, TimeUnit.DAYS);\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start() {\n    super.start();\n    try {\n      fileSystem = FileSystem.get(hConfig);\n      // local file system's hflush() does not work. Using the raw local file system fixes it.\n      // https://issues.apache.org/jira/browse/HADOOP-7844\n      if (fileSystem instanceof LocalFileSystem) {\n        fileSystem = ((LocalFileSystem) fileSystem).getRawFileSystem();\n      }\n      logFileWriter = new LogFileWriter(fileSystem, logBaseDir, new LogSchema().getAvroSchema(),\n                                        syncIntervalBytes, logFileRotationIntervalMs, retentionDurationMs);\n    } catch (IOException e) {\n      close();\n      throw Throwables.propagate(e);\n    }\n  }","id":64076,"modified_method":"@Override\n  public void start() {\n    super.start();\n    try {\n      logFileWriter = new LogFileWriter(logBaseDir, new LogSchema().getAvroSchema(),\n                                        syncIntervalBytes, logFileRotationIntervalMs, retentionDurationMs);\n    } catch (IOException e) {\n      close();\n      throw Throwables.propagate(e);\n    }\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"private void create(long timeInterval) throws IOException {\n    Path file = new Path(logBaseDir, String.format(\"%d.%s\", timeInterval, FILE_SUFFIX));\n    this.outputStream = fileSystem.create(file, false);\n    this.dataFileWriter = new DataFileWriter<GenericRecord>(new GenericDatumWriter<GenericRecord>(schema));\n    this.dataFileWriter.create(schema, this.outputStream);\n    this.dataFileWriter.setSyncInterval(syncIntervalBytes);\n  }","id":64077,"modified_method":"private void create(long timeInterval) throws IOException {\n    Location file = logBaseDir.append(String.format(\"%d.%s\", timeInterval, FILE_SUFFIX));\n    this.outputStream = file.getOutputStream();\n    this.dataFileWriter = new DataFileWriter<GenericRecord>(new GenericDatumWriter<GenericRecord>(schema));\n    this.dataFileWriter.create(schema, this.outputStream);\n    this.dataFileWriter.setSyncInterval(syncIntervalBytes);\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"public void append(ILoggingEvent event) throws IOException {\n    rotate(event.getTimeStamp());\n    GenericRecord datum = LoggingEvent.encode(schema, event);\n    dataFileWriter.append(datum);\n    dataFileWriter.flush();\n    outputStream.hflush();\n  }","id":64078,"modified_method":"public void append(ILoggingEvent event) throws IOException {\n    rotate(event.getTimeStamp());\n    GenericRecord datum = LoggingEvent.encode(schema, event);\n    dataFileWriter.append(datum);\n    dataFileWriter.flush();\n    outputStream.flush();\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"private void cleanUp() throws IOException {\n    long retentionTs = System.currentTimeMillis() - retentionDurationMs;\n    RemoteIterator<LocatedFileStatus> filesIt = fileSystem.listFiles(logBaseDir, false);\n    while (filesIt.hasNext()) {\n      LocatedFileStatus status = filesIt.next();\n      String fileName = status.getPath().getName();\n      String currentFilePrefix = String.valueOf(currentFileTs);\n      if (status.getModificationTime() < retentionTs && fileName.endsWith(FILE_SUFFIX)\n        && !fileName.startsWith(currentFilePrefix)) {\n        fileSystem.delete(status.getPath(), false);\n      }\n    }\n  }","id":64079,"modified_method":"private void cleanUp() throws IOException {\n    long retentionTs = System.currentTimeMillis() - retentionDurationMs;\n    File baseDir = new File(logBaseDir.toURI());\n    File [] files = baseDir.listFiles();\n    if (files == null || files.length == 0) {\n      return;\n    }\n\n    for (File f : files) {\n      String fileName = f.getName();\n      String currentFilePrefix = String.valueOf(currentFileTs);\n      if (f.lastModified() < retentionTs && fileName.endsWith(FILE_SUFFIX)\n        && !fileName.startsWith(currentFilePrefix)) {\n        //noinspection ResultOfMethodCallIgnored\n        f.delete();\n      }\n    }\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"public LogFileWriter(FileSystem fileSystem, Path logBaseDir, Schema schema, int syncIntervalBytes,\n                       long fileRotateIntervalMs, long retentionDurationMs) {\n    this.fileSystem = fileSystem;\n    this.logBaseDir = logBaseDir;\n    this.schema = schema;\n    this.syncIntervalBytes = syncIntervalBytes;\n    this.fileRotateIntervalMs = fileRotateIntervalMs;\n    this.retentionDurationMs = retentionDurationMs;\n  }","id":64080,"modified_method":"public LogFileWriter(Location logBaseDir, Schema schema, int syncIntervalBytes,\n                       long fileRotateIntervalMs, long retentionDurationMs) {\n    this.logBaseDir = logBaseDir;\n    this.schema = schema;\n    this.syncIntervalBytes = syncIntervalBytes;\n    this.fileRotateIntervalMs = fileRotateIntervalMs;\n    this.retentionDurationMs = retentionDurationMs;\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"@Inject\n  public SingleNodeLogReader(CConfiguration cConf, LocationFactory locationFactory) {\n    this.locationFactory = locationFactory;\n    this.logBaseDir = cConf.get(LoggingConfiguration.LOG_BASE_DIR);\n    Preconditions.checkNotNull(this.logBaseDir, \"Log base dir cannot be null\");\n\n    try {\n      this.schema = new LogSchema().getAvroSchema();\n    } catch (IOException e) {\n      LOG.error(\"Cannot get LogSchema\", e);\n      throw Throwables.propagate(e);\n    }\n\n    // Thread pool of size max MAX_THREAD_POOL_SIZE.\n    // 60 seconds wait time before killing idle threads.\n    // Keep no idle threads more than 60 seconds.\n    // If max thread pool size reached, reject the new coming\n    this.executor =\n      new ThreadPoolExecutor(0, MAX_THREAD_POOL_SIZE,\n                             60L, TimeUnit.SECONDS,\n                             new SynchronousQueue<Runnable>(),\n                             Threads.createDaemonThreadFactory(\"single-log-reader-%d\"),\n                             new ThreadPoolExecutor.DiscardPolicy());\n  }","id":64081,"modified_method":"@Inject\n  public SingleNodeLogReader(CConfiguration cConf, LocationFactory locationFactory) {\n    String baseDir = cConf.get(LoggingConfiguration.LOG_BASE_DIR);\n    Preconditions.checkNotNull(baseDir, \"Log base dir cannot be null\");\n    this.logBaseDir = locationFactory.create(baseDir);\n\n    try {\n      this.schema = new LogSchema().getAvroSchema();\n    } catch (IOException e) {\n      LOG.error(\"Cannot get LogSchema\", e);\n      throw Throwables.propagate(e);\n    }\n\n    // Thread pool of size max MAX_THREAD_POOL_SIZE.\n    // 60 seconds wait time before killing idle threads.\n    // Keep no idle threads more than 60 seconds.\n    // If max thread pool size reached, reject the new coming\n    this.executor =\n      new ThreadPoolExecutor(0, MAX_THREAD_POOL_SIZE,\n                             60L, TimeUnit.SECONDS,\n                             new SynchronousQueue<Runnable>(),\n                             Threads.createDaemonThreadFactory(\"single-log-reader-%d\"),\n                             new ThreadPoolExecutor.DiscardPolicy());\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"private SortedMap<Long, Location> getFiles(Comparator<Long> comparator) {\n    TreeMap<Long, Location> sortedFiles = Maps.newTreeMap(comparator);\n    File baseDir = new File(logBaseDir);\n    File [] files = baseDir.listFiles();\n    if (files == null || files.length == 0) {\n      return sortedFiles;\n    }\n\n    for (File file : files){\n      try {\n        long interval = extractInterval(file.getName());\n        sortedFiles.put(interval, new SeekableLocalLocation(locationFactory.create(file.getPath())));\n      } catch (NumberFormatException e) {\n        LOG.warn(String.format(\"Not able to parse interval from log file name %s\", file.getPath()));\n      }\n    }\n    return sortedFiles;\n  }","id":64082,"modified_method":"private SortedMap<Long, Location> getFiles(Comparator<Long> comparator) {\n    TreeMap<Long, Location> sortedFiles = Maps.newTreeMap(comparator);\n    File baseDir = new File(logBaseDir.toURI());\n    File [] files = baseDir.listFiles();\n    if (files == null || files.length == 0) {\n      return sortedFiles;\n    }\n\n    for (File file : files){\n      try {\n        long interval = extractInterval(file.getName());\n        sortedFiles.put(interval, new SeekableLocalLocation(logBaseDir.append(file.getName())));\n      } catch (NumberFormatException e) {\n        LOG.warn(String.format(\"Not able to parse interval from log file name %s\", file.getPath()));\n      } catch (IOException e) {\n        LOG.warn(\"Got exception\", e);\n      }\n    }\n    return sortedFiles;\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"@BeforeClass\n  public static void setUpContext() throws Exception {\n    LoggingContextAccessor.setLoggingContext(new FlowletLoggingContext(\"ACCT_1\", \"APP_1\", \"FLOW_1\", \"FLOWLET_1\"));\n    LOG_BASE_DIR = \"/tmp/log_files_\" + new Random(System.currentTimeMillis()).nextLong();\n\n\n    CConfiguration cConf = CConfiguration.create();\n    cConf.set(LoggingConfiguration.LOG_BASE_DIR, LOG_BASE_DIR);\n    cConf.set(LoggingConfiguration.LOG_FILE_ROTATION_INTERVAL_MINS, \"0.015\");\n    cConf.setInt(LoggingConfiguration.LOG_FILE_SYNC_INTERVAL_BYTES, 100);\n    FileLogAppender appender = new FileLogAppender(cConf, new Configuration());\n    new LogAppenderInitializer(appender).initialize(\"test_logger\");\n\n    Logger logger = LoggerFactory.getLogger(\"test_logger\");\n    for (int i = 0; i < 20; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    TimeUnit.SECONDS.sleep(1);\n    appender.getLogFileWriter().rotate(System.currentTimeMillis());\n\n    for (int i = 20; i < 40; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    TimeUnit.SECONDS.sleep(1);\n    appender.getLogFileWriter().rotate(System.currentTimeMillis());\n\n    for (int i = 40; i < 60; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    StatusPrinter.setPrintStream(new PrintStream(bos));\n    StatusPrinter.print((LoggerContext) LoggerFactory.getILoggerFactory());\n    System.out.println(bos.toString());\n  }","id":64083,"modified_method":"@BeforeClass\n  public static void setUpContext() throws Exception {\n    LoggingContextAccessor.setLoggingContext(new FlowletLoggingContext(\"ACCT_1\", \"APP_1\", \"FLOW_1\", \"FLOWLET_1\"));\n    LOG_BASE_DIR = \"/tmp/log_files_\" + new Random(System.currentTimeMillis()).nextLong();\n\n\n    CConfiguration cConf = CConfiguration.create();\n    cConf.set(LoggingConfiguration.LOG_BASE_DIR, LOG_BASE_DIR);\n    cConf.set(LoggingConfiguration.LOG_FILE_ROTATION_INTERVAL_MINS, \"0.015\");\n    cConf.setInt(LoggingConfiguration.LOG_FILE_SYNC_INTERVAL_BYTES, 100);\n    FileLogAppender appender = new FileLogAppender(cConf, new LocalLocationFactory());\n    new LogAppenderInitializer(appender).initialize(\"test_logger\");\n\n    Logger logger = LoggerFactory.getLogger(\"test_logger\");\n    for (int i = 0; i < 20; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    TimeUnit.SECONDS.sleep(1);\n    appender.getLogFileWriter().rotate(System.currentTimeMillis());\n\n    for (int i = 20; i < 40; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    TimeUnit.SECONDS.sleep(1);\n    appender.getLogFileWriter().rotate(System.currentTimeMillis());\n\n    for (int i = 40; i < 60; ++i) {\n      Exception e1 = new Exception(\"Test Exception1\");\n      Exception e2 = new Exception(\"Test Exception2\", e1);\n      logger.warn(\"Test log message \" + i + \" {} {}\", \"arg1\", \"arg2\", e2);\n    }\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    StatusPrinter.setPrintStream(new PrintStream(bos));\n    StatusPrinter.print((LoggerContext) LoggerFactory.getILoggerFactory());\n    System.out.println(bos.toString());\n  }","commit_id":"2b8857ae11902dc5d6f8bd314622115331262af5","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * Process a request from a distant contact\n     *\n     * @param requestEvent the <tt>RequestEvent<\/tt> containing the newly\n     * received request.\n     */\n    public void processRequest(RequestEvent requestEvent)\n    {\n        if (this.presenceEnabled == false) {\n            return;\n        }\n\n        ServerTransaction serverTransaction = requestEvent\n            .getServerTransaction();\n        SipProvider jainSipProvider = (SipProvider) requestEvent.getSource();\n        Request request = requestEvent.getRequest();\n\n        if (serverTransaction == null)\n        {\n            try\n            {\n                serverTransaction = jainSipProvider.getNewServerTransaction(\n                    request);\n            }\n            catch (TransactionAlreadyExistsException ex)\n            {\n                //let's not scare the user and only log a message\n                logger.error(\"Failed to create a new server\"\n                    + \"transaction for an incoming request\\n\"\n                    + \"(Next message contains the request)\"\n                    , ex);\n                return;\n            }\n            catch (TransactionUnavailableException ex)\n            {\n                //let's not scare the user and only log a message\n                logger.error(\"Failed to create a new server\"\n                    + \"transaction for an incoming request\\n\"\n                    + \"(Next message contains the request)\"\n                    , ex);\n                    return;\n            }\n        }\n\n        EventHeader eventHeader = (EventHeader)\n            request.getHeader(EventHeader.NAME);\n\n        if (eventHeader == null || !eventHeader.getEventType()\n                .equalsIgnoreCase(\"presence\"))\n        {\n            // we are not concerned by this request, perhaps another\n            // listener is ?\n\n            // don't send a 489 / Bad event answer here\n            return;\n        }\n\n\n        // NOTIFY\n        if (request.getMethod().equals(Request.NOTIFY)) {\n            Response response = null;\n\n            logger.debug(\"notify received\");\n\n            SubscriptionStateHeader sstateHeader = (SubscriptionStateHeader)\n                request.getHeader(SubscriptionStateHeader.NAME);\n\n            // notify must contain one (rfc3265)\n            if (sstateHeader == null) {\n                logger.error(\"no subscription state in this request\");\n                return;\n            }\n\n            // first handle the case of a contact still pending\n            // it's possible if the NOTIFY arrives before the OK\n            CallIdHeader idheader = (CallIdHeader) request.getHeader(\n                    CallIdHeader.NAME);\n            ContactSipImpl contact = (ContactSipImpl) this.subscribedContacts\n                .get(idheader.getCallId());\n\n            if (contact != null && !sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED) && !contact\n                    .isResolved())\n            {\n                logger.debug(\"contact still pending while NOTIFY received\");\n\n\n                // can't finalize the subscription here : the client dialog is\n                // null until the reception of a OK\n            }\n\n            // see if the notify correspond to an existing subscription\n            if (contact == null && !sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED)) {\n                logger.debug(\"contact not found for callid : \" +\n                        idheader.getCallId());\n\n                // try to remove the callid from the list if we were excpeting\n                // this end (if it's the last notify of a subscription we just\n                // stopped\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(idheader.getCallId());\n                }\n\n                // send a 481 response (rfc3625)\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(\n                            Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST,\n                            request);\n                } catch (ParseException e) {\n                    logger.error(\"failed to create the 481 response\", e);\n                    return;\n                }\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (SipException e) {\n                    logger.error(\"failed to send the response\", e);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"invalid argument provided while trying\" +\n                            \" to send the response\", e);\n                }\n\n                return;\n            }\n\n            // if we don't understand the content\n            ContentTypeHeader ctheader = (ContentTypeHeader) request\n                .getHeader(ContentTypeHeader.NAME);\n\n            if (ctheader != null && !ctheader.getContentSubType()\n                    .equalsIgnoreCase(PIDF_XML))\n            {\n                // send a 415 response (rfc3261)\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.UNSUPPORTED_MEDIA_TYPE,\n                                request);\n                } catch (ParseException e) {\n                    logger.error(\"failed to create the OK response\", e);\n                    return;\n                }\n\n                // we want PIDF\n                AcceptHeader acceptHeader = null;\n                try {\n                    acceptHeader = this.parentProvider\n                        .getHeaderFactory().createAcceptHeader(\n                            \"application\", PIDF_XML);\n                } catch (ParseException e) {\n                    // should not happen\n                    logger.error(\"failed to create the accept header\", e);\n                    return;\n                }\n                response.setHeader(acceptHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (SipException e) {\n                    logger.error(\"failed to send the response\", e);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"invalid argument provided while trying\" +\n                            \" to send the response\", e);\n                }\n            }\n\n            // if the presentity doesn't want of us anymore\n            if (sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED))\n            {\n                // if we requested this end of subscription, contact == null\n                if (contact != null) {\n                    terminateSubscription(contact);\n                    this.subscribedContacts.remove(serverTransaction.getDialog()\n                        .getCallId().getCallId());\n\n                    // if the reason is \"deactivated\", we immediatly resubscribe\n                    // to the contact\n                    if (sstateHeader.getReasonCode().equals(\n                            SubscriptionStateHeader.DEACTIVATED))\n                    {\n                        forcePollContact(contact);\n                    }\n                }\n\n                // try to remove the callid from the list if we were excpeting\n                // this end (if it's the last notify of a subscription we just\n                // stopped\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(idheader.getCallId());\n                }\n            }\n\n            // send an OK response\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.OK, request);\n            } catch (ParseException e) {\n                logger.error(\"failed to create the OK response\", e);\n                return;\n            }\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (SipException e) {\n                logger.error(\"failed to send the response\", e);\n            } catch (InvalidArgumentException e) {\n                // should not happen\n                logger.error(\"invalid argument provided while trying\" +\n                        \" to send the response\", e);\n            }\n\n            // transform the presence document in new presence status\n            if (request.getRawContent() != null\n                && !sstateHeader.getState().equalsIgnoreCase(\n                     SubscriptionStateHeader.TERMINATED))\n            {\n                setPidfPresenceStatus(new String(request.getRawContent()));\n            }\n\n        // SUBSCRIBE\n        } else if (request.getMethod().equals(Request.SUBSCRIBE)) {\n            FromHeader from = (FromHeader) request.getHeader(FromHeader.NAME);\n\n            // if we received a subscribe, our network probably doesn't have\n            // a distant PA\n            if (this.useDistantPA) {\n                this.useDistantPA = false;\n\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                }\n            }\n\n            // try to find which contact is concerned\n            ContactSipImpl contact = (ContactSipImpl) resolveContactID(from\n                    .getAddress().getURI().toString());\n\n            // if we don't know him, create him\n            if (contact == null) {\n                contact = new ContactSipImpl(from.getAddress().getURI()\n                        .toString(), this.parentProvider);\n\n                // <tricky time>\n                // this ensure that we will publish our status to this contact\n                // without trying to subscribe to him\n                contact.setResolved(true);\n                contact.setResolvable(false);\n                // <\/tricky time>\n            }\n\n            logger.debug(contact.toString() + \" wants to watch your presence \" +\n                    \"status\");\n\n            ExpiresHeader expHeader = request.getExpires();\n            int expires;\n\n            if (expHeader == null) {\n                expires = PRESENCE_DEFAULT_EXPIRE;\n            } else {\n                expires = expHeader.getExpires();\n            }\n\n            // interval too brief\n            if (expires < SUBSCRIBE_MIN_EXPIRE && expires > 0 && expires < 3600)\n            {\n                // send him a 423\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.INTERVAL_TOO_BRIEF, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 423\", e);\n                    return;\n                }\n                MinExpiresHeader min = null;\n\n                try {\n                    min = this.parentProvider.getHeaderFactory()\n                        .createMinExpiresHeader(SUBSCRIBE_MIN_EXPIRE);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"can't create the min expires header\", e);\n                    return;\n                }\n                response.setHeader(min);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 423\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            // is it a subscription refresh ? (no need for synchronize the\n            // access to ourWatchers: read only operation)\n            if (this.ourWatchers.contains(contact) && expires != 0\n                    && contact.getServerDialog().equals(\n                            serverTransaction.getDialog()))\n            {\n                contact.getTimeoutTask().cancel();\n\n                // add the new timeout task\n                watcherTimeoutTask timeout = new watcherTimeoutTask(contact);\n                contact.setTimeoutTask(timeout);\n                this.timer.schedule(timeout, expires * 1000);\n\n                // send a OK\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.OK, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 200\", e);\n                    return;\n                }\n\n                // add the expire header\n                try {\n                    expHeader = this.parentProvider.getHeaderFactory()\n                        .createExpiresHeader(expires);\n                } catch (InvalidArgumentException e) {\n                    logger.error(\"Can't create the expires header\");\n                    return;\n                }\n                response.setHeader(expHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 200\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            Dialog dialog = contact.getServerDialog();\n\n            // is it a subscription end ?\n            if (expires == 0) {\n                logger.debug(\"contact \" + contact + \" isn't a watcher anymore\");\n\n                // remove the contact from our watcher\n                synchronized (this.ourWatchers) {\n                    this.ourWatchers.remove(contact);\n                }\n\n                contact.getTimeoutTask().cancel();\n                contact.setServerDialog(null);\n\n                // send him a OK\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.OK, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 200\", e);\n                    return;\n                }\n\n                // add the expire header\n                try {\n                    expHeader = this.parentProvider.getHeaderFactory()\n                        .createExpiresHeader(0);\n                } catch (InvalidArgumentException e) {\n                    logger.error(\"Can't create the expires header\", e);\n                    return;\n                }\n                response.setHeader(expHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 200\", e);\n                    return;\n                }\n\n                // then terminate the subscription with an ultimate NOTIFY\n                ClientTransaction transac = null;\n                try {\n                    transac = createNotify(contact,\n                            getPidfPresenceStatus((ContactSipImpl)\n                                    getLocalContact()),\n                            SubscriptionStateHeader.TERMINATED,\n                            SubscriptionStateHeader.TIMEOUT);\n                } catch (OperationFailedException e) {\n                    logger.error(\"failed to create the new notify\", e);\n                    return;\n                }\n\n                try {\n                    dialog.sendRequest(transac);\n                } catch (Exception e) {\n                    logger.error(\"Can't send the request\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            // if the contact was already subscribed, we close the last\n            // subscription before accepting the new one\n            if (this.ourWatchers.contains(contact)\n                    && !contact.getServerDialog().equals(\n                            serverTransaction.getDialog()))\n            {\n                logger.debug(\"contact \" + contact + \" try to resubscribe, \"\n                        + \"we will remove the first subscription\");\n\n                // terminate the subscription with a closing NOTIFY\n                ClientTransaction transac = null;\n                try {\n                    transac = createNotify(contact,\n                            getPidfPresenceStatus((ContactSipImpl)\n                                    getLocalContact()),\n                            SubscriptionStateHeader.TERMINATED,\n                            SubscriptionStateHeader.REJECTED);\n                } catch (OperationFailedException e) {\n                    logger.error(\"failed to create the new notify\", e);\n                    return;\n                }\n\n                contact.setServerDialog(null);\n\n                // remove the contact from our watcher\n                synchronized (this.ourWatchers) {\n                    this.ourWatchers.remove(contact);\n                }\n\n                if (contact.getTimeoutTask() != null) {\n                    contact.getTimeoutTask().cancel();\n                }\n\n                try {\n                    dialog.sendRequest(transac);\n                } catch (Exception e) {\n                    logger.error(\"Can't send the request\", e);\n                    return;\n                }\n            }\n\n            // remember the dialog we will use to send the NOTIFYs\n            // the synchronization avoids changing the dialog while receiving\n            // an error for the previous subscription closed\n            synchronized (contact) {\n                contact.setServerDialog(serverTransaction.getDialog());\n            }\n            dialog = contact.getServerDialog();\n\n            // immediately send a 200 / OK\n            Response response = null;\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.OK, request);\n            } catch (Exception e) {\n                logger.error(\"Error while creating the response 200\", e);\n                return;\n            }\n\n            // add the expire header\n            try {\n                expHeader = this.parentProvider.getHeaderFactory()\n                    .createExpiresHeader(expires);\n            } catch (InvalidArgumentException e) {\n                logger.error(\"Can't create the expires header\", e);\n                return;\n            }\n            response.setHeader(expHeader);\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (Exception e) {\n                logger.error(\"Error while sending the response 200\", e);\n                return;\n            }\n\n            // send a NOTIFY\n            ClientTransaction transac = null;\n            try {\n                transac = createNotify(contact,\n                        getPidfPresenceStatus((ContactSipImpl)\n                                getLocalContact()),\n                        SubscriptionStateHeader.ACTIVE,\n                        null);\n            } catch (OperationFailedException e) {\n                logger.error(\"failed to create the new notify\", e);\n                return;\n            }\n\n            try {\n                dialog.sendRequest(transac);\n            } catch (Exception e) {\n                logger.error(\"Can't send the request\", e);\n                return;\n            }\n\n            // add him to our watcher list\n            synchronized (this.ourWatchers) {\n                this.ourWatchers.add(contact);\n            }\n\n            // add the timeout task\n            watcherTimeoutTask timeout = new watcherTimeoutTask(contact);\n            contact.setTimeoutTask(timeout);\n            this.timer.schedule(timeout, expires * 1000);\n\n        // PUBLISH\n        } else if (request.getMethod().equals(Request.PUBLISH)) {\n            // we aren't supposed to receive a publish so just say \"not\n            // implemented\". This behavior is usefull for SC to SC communication\n            // with the PA auto detection feature and a server which proxy the\n            // PUBLISH requests\n            Response response = null;\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.NOT_IMPLEMENTED, request);\n            } catch (Exception e) {\n                logger.error(\"Error while creating the response 501\", e);\n                return;\n            }\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (Exception e) {\n                logger.error(\"Error while sending the response 501\", e);\n                return;\n            }\n        }\n    }","id":64084,"modified_method":"/**\n     * Process a request from a distant contact\n     *\n     * @param requestEvent the <tt>RequestEvent<\/tt> containing the newly\n     * received request.\n     */\n    public void processRequest(RequestEvent requestEvent)\n    {\n        if (this.presenceEnabled == false) {\n            return;\n        }\n\n        ServerTransaction serverTransaction = requestEvent\n            .getServerTransaction();\n        SipProvider jainSipProvider = (SipProvider) requestEvent.getSource();\n        Request request = requestEvent.getRequest();\n\n        if (serverTransaction == null)\n        {\n            try\n            {\n                serverTransaction = jainSipProvider.getNewServerTransaction(\n                    request);\n            }\n            catch (TransactionAlreadyExistsException ex)\n            {\n                //let's not scare the user and only log a message\n                logger.error(\"Failed to create a new server\"\n                    + \"transaction for an incoming request\\n\"\n                    + \"(Next message contains the request)\"\n                    , ex);\n                return;\n            }\n            catch (TransactionUnavailableException ex)\n            {\n                //let's not scare the user and only log a message\n                logger.error(\"Failed to create a new server\"\n                    + \"transaction for an incoming request\\n\"\n                    + \"(Next message contains the request)\"\n                    , ex);\n                    return;\n            }\n        }\n\n        EventHeader eventHeader = (EventHeader)\n            request.getHeader(EventHeader.NAME);\n\n        if (eventHeader == null || !eventHeader.getEventType()\n                .equalsIgnoreCase(\"presence\"))\n        {\n            // we are not concerned by this request, perhaps another\n            // listener is ?\n\n            // don't send a 489 / Bad event answer here\n            return;\n        }\n\n\n        // NOTIFY\n        if (request.getMethod().equals(Request.NOTIFY)) {\n            Response response = null;\n\n            logger.debug(\"notify received\");\n\n            SubscriptionStateHeader sstateHeader = (SubscriptionStateHeader)\n                request.getHeader(SubscriptionStateHeader.NAME);\n\n            // notify must contain one (rfc3265)\n            if (sstateHeader == null) {\n                logger.error(\"no subscription state in this request\");\n                return;\n            }\n\n            // first handle the case of a contact still pending\n            // it's possible if the NOTIFY arrives before the OK\n            CallIdHeader idheader = (CallIdHeader) request.getHeader(\n                    CallIdHeader.NAME);\n            ContactSipImpl contact = (ContactSipImpl) this.subscribedContacts\n                .get(idheader.getCallId());\n\n            if (contact != null && !sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED) && !contact\n                    .isResolved())\n            {\n                logger.debug(\"contact still pending while NOTIFY received\");\n\n\n                // can't finalize the subscription here : the client dialog is\n                // null until the reception of a OK\n            }\n\n            // see if the notify correspond to an existing subscription\n            if (contact == null && !sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED)) {\n                logger.debug(\"contact not found for callid : \" +\n                        idheader.getCallId());\n\n                // try to remove the callid from the list if we were excpeting\n                // this end (if it's the last notify of a subscription we just\n                // stopped\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(idheader.getCallId());\n                }\n\n                // send a 481 response (rfc3625)\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(\n                            Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST,\n                            request);\n                } catch (ParseException e) {\n                    logger.error(\"failed to create the 481 response\", e);\n                    return;\n                }\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (SipException e) {\n                    logger.error(\"failed to send the response\", e);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"invalid argument provided while trying\" +\n                            \" to send the response\", e);\n                }\n\n                return;\n            }\n\n            // if we don't understand the content\n            ContentTypeHeader ctheader = (ContentTypeHeader) request\n                .getHeader(ContentTypeHeader.NAME);\n\n            if (ctheader != null && !ctheader.getContentSubType()\n                    .equalsIgnoreCase(PIDF_XML))\n            {\n                // send a 415 response (rfc3261)\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.UNSUPPORTED_MEDIA_TYPE,\n                                request);\n                } catch (ParseException e) {\n                    logger.error(\"failed to create the OK response\", e);\n                    return;\n                }\n\n                // we want PIDF\n                AcceptHeader acceptHeader = null;\n                try {\n                    acceptHeader = this.parentProvider\n                        .getHeaderFactory().createAcceptHeader(\n                            \"application\", PIDF_XML);\n                } catch (ParseException e) {\n                    // should not happen\n                    logger.error(\"failed to create the accept header\", e);\n                    return;\n                }\n                response.setHeader(acceptHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (SipException e) {\n                    logger.error(\"failed to send the response\", e);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"invalid argument provided while trying\" +\n                            \" to send the response\", e);\n                }\n            }\n\n            // if the presentity doesn't want of us anymore\n            if (sstateHeader.getState().equalsIgnoreCase(\n                    SubscriptionStateHeader.TERMINATED))\n            {\n                // if we requested this end of subscription, contact == null\n                if (contact != null) {\n                    terminateSubscription(contact);\n                    this.subscribedContacts.remove(serverTransaction.getDialog()\n                        .getCallId().getCallId());\n\n                    // if the reason is \"deactivated\", we immediatly resubscribe\n                    // to the contact\n                    if (sstateHeader.getReasonCode().equals(\n                            SubscriptionStateHeader.DEACTIVATED))\n                    {\n                        forcePollContact(contact);\n                    }\n                }\n\n                // try to remove the callid from the list if we were excpeting\n                // this end (if it's the last notify of a subscription we just\n                // stopped\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(idheader.getCallId());\n                }\n            }\n\n            // send an OK response\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.OK, request);\n            } catch (ParseException e) {\n                logger.error(\"failed to create the OK response\", e);\n                return;\n            }\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (SipException e) {\n                logger.error(\"failed to send the response\", e);\n            } catch (InvalidArgumentException e) {\n                // should not happen\n                logger.error(\"invalid argument provided while trying\" +\n                        \" to send the response\", e);\n            }\n\n            // transform the presence document in new presence status\n            if (request.getRawContent() != null\n                && !sstateHeader.getState().equalsIgnoreCase(\n                     SubscriptionStateHeader.TERMINATED))\n            {\n                setPidfPresenceStatus(new String(request.getRawContent()));\n            }\n\n        // SUBSCRIBE\n        } else if (request.getMethod().equals(Request.SUBSCRIBE)) {\n            FromHeader from = (FromHeader) request.getHeader(FromHeader.NAME);\n\n            // if we received a subscribe, our network probably doesn't have\n            // a distant PA\n            if (this.useDistantPA) {\n                this.useDistantPA = false;\n\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                    this.republishTask = null;\n                }\n            }\n\n            // try to find which contact is concerned\n            ContactSipImpl contact = (ContactSipImpl) resolveContactID(from\n                    .getAddress().getURI().toString());\n\n            // if we don't know him, create him\n            if (contact == null) {\n                contact = new ContactSipImpl(from.getAddress().getURI()\n                        .toString(), this.parentProvider);\n\n                // <tricky time>\n                // this ensure that we will publish our status to this contact\n                // without trying to subscribe to him\n                contact.setResolved(true);\n                contact.setResolvable(false);\n                // <\/tricky time>\n            }\n\n            logger.debug(contact.toString() + \" wants to watch your presence \" +\n                    \"status\");\n\n            ExpiresHeader expHeader = request.getExpires();\n            int expires;\n\n            if (expHeader == null) {\n                expires = PRESENCE_DEFAULT_EXPIRE;\n            } else {\n                expires = expHeader.getExpires();\n            }\n\n            // interval too brief\n            if (expires < SUBSCRIBE_MIN_EXPIRE && expires > 0 && expires < 3600)\n            {\n                // send him a 423\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.INTERVAL_TOO_BRIEF, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 423\", e);\n                    return;\n                }\n                MinExpiresHeader min = null;\n\n                try {\n                    min = this.parentProvider.getHeaderFactory()\n                        .createMinExpiresHeader(SUBSCRIBE_MIN_EXPIRE);\n                } catch (InvalidArgumentException e) {\n                    // should not happen\n                    logger.error(\"can't create the min expires header\", e);\n                    return;\n                }\n                response.setHeader(min);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 423\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            // is it a subscription refresh ? (no need for synchronize the\n            // access to ourWatchers: read only operation)\n            if (this.ourWatchers.contains(contact) && expires != 0\n                    && contact.getServerDialog().equals(\n                            serverTransaction.getDialog()))\n            {\n                contact.getTimeoutTask().cancel();\n\n                // add the new timeout task\n                watcherTimeoutTask timeout = new watcherTimeoutTask(contact);\n                contact.setTimeoutTask(timeout);\n                getTimer().schedule(timeout, expires * 1000);\n\n                // send a OK\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.OK, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 200\", e);\n                    return;\n                }\n\n                // add the expire header\n                try {\n                    expHeader = this.parentProvider.getHeaderFactory()\n                        .createExpiresHeader(expires);\n                } catch (InvalidArgumentException e) {\n                    logger.error(\"Can't create the expires header\");\n                    return;\n                }\n                response.setHeader(expHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 200\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            Dialog dialog = contact.getServerDialog();\n\n            // is it a subscription end ?\n            if (expires == 0) {\n                logger.debug(\"contact \" + contact + \" isn't a watcher anymore\");\n\n                // remove the contact from our watcher\n                synchronized (this.ourWatchers) {\n                    this.ourWatchers.remove(contact);\n                }\n\n                contact.getTimeoutTask().cancel();\n                contact.setServerDialog(null);\n\n                // send him a OK\n                Response response = null;\n                try {\n                    response = this.parentProvider.getMessageFactory()\n                        .createResponse(Response.OK, request);\n                } catch (Exception e) {\n                    logger.error(\"Error while creating the response 200\", e);\n                    return;\n                }\n\n                // add the expire header\n                try {\n                    expHeader = this.parentProvider.getHeaderFactory()\n                        .createExpiresHeader(0);\n                } catch (InvalidArgumentException e) {\n                    logger.error(\"Can't create the expires header\", e);\n                    return;\n                }\n                response.setHeader(expHeader);\n\n                try {\n                    serverTransaction.sendResponse(response);\n                } catch (Exception e) {\n                    logger.error(\"Error while sending the response 200\", e);\n                    return;\n                }\n\n                // then terminate the subscription with an ultimate NOTIFY\n                ClientTransaction transac = null;\n                try {\n                    transac = createNotify(contact,\n                            getPidfPresenceStatus((ContactSipImpl)\n                                    getLocalContact()),\n                            SubscriptionStateHeader.TERMINATED,\n                            SubscriptionStateHeader.TIMEOUT);\n                } catch (OperationFailedException e) {\n                    logger.error(\"failed to create the new notify\", e);\n                    return;\n                }\n\n                try {\n                    dialog.sendRequest(transac);\n                } catch (Exception e) {\n                    logger.error(\"Can't send the request\", e);\n                    return;\n                }\n\n                return;\n            }\n\n            // if the contact was already subscribed, we close the last\n            // subscription before accepting the new one\n            if (this.ourWatchers.contains(contact)\n                    && !contact.getServerDialog().equals(\n                            serverTransaction.getDialog()))\n            {\n                logger.debug(\"contact \" + contact + \" try to resubscribe, \"\n                        + \"we will remove the first subscription\");\n\n                // terminate the subscription with a closing NOTIFY\n                ClientTransaction transac = null;\n                try {\n                    transac = createNotify(contact,\n                            getPidfPresenceStatus((ContactSipImpl)\n                                    getLocalContact()),\n                            SubscriptionStateHeader.TERMINATED,\n                            SubscriptionStateHeader.REJECTED);\n                } catch (OperationFailedException e) {\n                    logger.error(\"failed to create the new notify\", e);\n                    return;\n                }\n\n                contact.setServerDialog(null);\n\n                // remove the contact from our watcher\n                synchronized (this.ourWatchers) {\n                    this.ourWatchers.remove(contact);\n                }\n\n                if (contact.getTimeoutTask() != null) {\n                    contact.getTimeoutTask().cancel();\n                }\n\n                try {\n                    dialog.sendRequest(transac);\n                } catch (Exception e) {\n                    logger.error(\"Can't send the request\", e);\n                    return;\n                }\n            }\n\n            // remember the dialog we will use to send the NOTIFYs\n            // the synchronization avoids changing the dialog while receiving\n            // an error for the previous subscription closed\n            synchronized (contact) {\n                contact.setServerDialog(serverTransaction.getDialog());\n            }\n            dialog = contact.getServerDialog();\n\n            // immediately send a 200 / OK\n            Response response = null;\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.OK, request);\n            } catch (Exception e) {\n                logger.error(\"Error while creating the response 200\", e);\n                return;\n            }\n\n            // add the expire header\n            try {\n                expHeader = this.parentProvider.getHeaderFactory()\n                    .createExpiresHeader(expires);\n            } catch (InvalidArgumentException e) {\n                logger.error(\"Can't create the expires header\", e);\n                return;\n            }\n            response.setHeader(expHeader);\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (Exception e) {\n                logger.error(\"Error while sending the response 200\", e);\n                return;\n            }\n\n            // send a NOTIFY\n            ClientTransaction transac = null;\n            try {\n                transac = createNotify(contact,\n                        getPidfPresenceStatus((ContactSipImpl)\n                                getLocalContact()),\n                        SubscriptionStateHeader.ACTIVE,\n                        null);\n            } catch (OperationFailedException e) {\n                logger.error(\"failed to create the new notify\", e);\n                return;\n            }\n\n            try {\n                dialog.sendRequest(transac);\n            } catch (Exception e) {\n                logger.error(\"Can't send the request\", e);\n                return;\n            }\n\n            // add him to our watcher list\n            synchronized (this.ourWatchers) {\n                this.ourWatchers.add(contact);\n            }\n\n            // add the timeout task\n            watcherTimeoutTask timeout = new watcherTimeoutTask(contact);\n            contact.setTimeoutTask(timeout);\n            getTimer().schedule(timeout, expires * 1000);\n\n        // PUBLISH\n        } else if (request.getMethod().equals(Request.PUBLISH)) {\n            // we aren't supposed to receive a publish so just say \"not\n            // implemented\". This behavior is usefull for SC to SC communication\n            // with the PA auto detection feature and a server which proxy the\n            // PUBLISH requests\n            Response response = null;\n            try {\n                response = this.parentProvider.getMessageFactory()\n                    .createResponse(Response.NOT_IMPLEMENTED, request);\n            } catch (Exception e) {\n                logger.error(\"Error while creating the response 501\", e);\n                return;\n            }\n\n            try {\n                serverTransaction.sendResponse(response);\n            } catch (Exception e) {\n                logger.error(\"Error while sending the response 501\", e);\n                return;\n            }\n        }\n    }","commit_id":"2d305aa1a259d9f99c47dba4adb1b4bc4e6a1651","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n          * The method is called by a ProtocolProvider implementation whenever\n          * a change in the registration state of the corresponding provider had\n          * occurred. The method is particularly interested in events stating\n          * that the SIP provider has unregistered so that it would fire\n          * status change events for all contacts in our buddy list.\n          *\n          * @param evt ProviderStatusChangeEvent the event describing the status\n          * change.\n          */\n          public void registrationStateChanged(RegistrationStateChangeEvent evt)\n          {\n              if(evt.getNewState() == RegistrationState.UNREGISTERING)\n              {\n                  // stop any task associated with the timer\n                  if (timer != null) {\n                      timer.cancel();\n                  }\n\n                  // this will not be called by anyone else, so call it\n                  // the method will terminate every active subscription\n                  try {\n                      publishPresenceStatus(\n                          sipStatusEnum.getStatus(SipStatusEnum.OFFLINE), \"\");\n                  } catch (OperationFailedException e) {\n                      logger.error(\"can't set the offline mode\", e);\n                  }\n\n                  // we wait for every SUBSCRIBE, NOTIFY and PUBLISH transaction\n                  // to finish before continuing the unsubscription\n                  for (byte i = 0; i < 10; i++) {   // wait 5 s. max\n                      synchronized (waitedCallIds) {\n                          if (waitedCallIds.size() == 0) {\n                              break;\n                          }\n                      }\n\n                      synchronized (this) {\n                          try {\n                              wait(500);\n                          } catch (InterruptedException e) {\n                              logger.debug(\"abnormal behavior, may cause \" +\n                                    \"unnecessary CPU use\", e);\n                          }\n                      }\n                  }\n              } else if (evt.getNewState().equals(\n                      RegistrationState.REGISTERED))\n              {\n                   logger.debug(\"enter registered state\");\n\n                   if (presenceEnabled == false) {\n                       return;\n                   }\n\n                   // send a subscription for every contact\n                   Iterator groupsIter = getServerStoredContactListRoot()\n                       .subgroups();\n                   while (groupsIter.hasNext()) {\n                       ContactGroupSipImpl group = (ContactGroupSipImpl)\n                           groupsIter.next();\n\n                        Iterator contactsIter = group.contacts();\n\n                        while (contactsIter.hasNext()) {\n                            ContactSipImpl contact = (ContactSipImpl)\n                                contactsIter.next();\n\n                            if (contact.isResolved()) {\n                                logger.debug(\"contact \" + contact\n                                        + \" already resolved\");\n                                continue;\n                            }\n\n                            // try to subscribe to this contact\n                            forcePollContact(contact);\n                        }\n                    }\n                   \n                    // create a new Timer (the last one has been cancelled)\n                    timer = new Timer(true);\n\n                    // create the new polling task\n                    pollingTask = new PollOfflineContactsTask();\n\n                    // start polling the offline contacts\n                    timer.schedule(pollingTask, pollingTaskPeriod,\n                        pollingTaskPeriod);\n               } else if(evt.getNewState() == \n                       RegistrationState.CONNECTION_FAILED)\n               {\n                    // if connection failed we have lost network connectivity \n                    // we must fire that all contacts has gone offline\n                    Iterator groupsIter = getServerStoredContactListRoot()\n                                                                .subgroups();\n                    while(groupsIter.hasNext())\n                    {\n                        ContactGroupSipImpl group\n                            = (ContactGroupSipImpl)groupsIter.next();\n\n                        Iterator contactsIter = group.contacts();\n\n                        while(contactsIter.hasNext())\n                        {\n                            ContactSipImpl contact\n                                = (ContactSipImpl)contactsIter.next();\n                            \n                            PresenceStatus oldContactStatus\n                                = contact.getPresenceStatus();\n\n                            contact.setResolved(false);\n                            contact.setClientDialog(null);\n                            \n                            if(!oldContactStatus.isOnline())\n                                continue;\n\n                            contact.setPresenceStatus(\n                                sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));\n\n                            fireContactPresenceStatusChangeEvent(\n                                  contact\n                                , contact.getParentContactGroup()\n                                , oldContactStatus);\n                        }\n                    }\n                    \n                    // stop any task associated with the timer\n                    if (timer != null) {\n                        timer.cancel();\n                    }\n                    \n                    waitedCallIds.clear();\n               }\n          }","id":64085,"modified_method":"/**\n          * The method is called by a ProtocolProvider implementation whenever\n          * a change in the registration state of the corresponding provider had\n          * occurred. The method is particularly interested in events stating\n          * that the SIP provider has unregistered so that it would fire\n          * status change events for all contacts in our buddy list.\n          *\n          * @param evt ProviderStatusChangeEvent the event describing the status\n          * change.\n          */\n          public void registrationStateChanged(RegistrationStateChangeEvent evt)\n          {\n              if(evt.getNewState() == RegistrationState.UNREGISTERING)\n              {\n                  // stop any task associated with the timer\n                  cancelTimer();\n\n                  // this will not be called by anyone else, so call it\n                  // the method will terminate every active subscription\n                  try {\n                      publishPresenceStatus(\n                          sipStatusEnum.getStatus(SipStatusEnum.OFFLINE), \"\");\n                  } catch (OperationFailedException e) {\n                      logger.error(\"can't set the offline mode\", e);\n                  }\n\n                  // we wait for every SUBSCRIBE, NOTIFY and PUBLISH transaction\n                  // to finish before continuing the unsubscription\n                  for (byte i = 0; i < 10; i++) {   // wait 5 s. max\n                      synchronized (waitedCallIds) {\n                          if (waitedCallIds.size() == 0) {\n                              break;\n                          }\n                      }\n\n                      synchronized (this) {\n                          try {\n                              wait(500);\n                          } catch (InterruptedException e) {\n                              logger.debug(\"abnormal behavior, may cause \" +\n                                    \"unnecessary CPU use\", e);\n                          }\n                      }\n                  }\n              } else if (evt.getNewState().equals(\n                      RegistrationState.REGISTERED))\n              {\n                   logger.debug(\"enter registered state\");\n\n                   /*\n                    * If presence support is enabled and the keep-alive method\n                    * is REGISTER, we'll get RegistrationState.REGISTERED more\n                    * than one though we're already registered. If we're\n                    * receiving such subsequent REGISTERED, we don't have to do\n                    * anything because we've already set it up in response to\n                    * the first REGISTERED.\n                    */\n                   if ((presenceEnabled == false) || (pollingTask != null)) {\n                       return;\n                   }\n\n                   // send a subscription for every contact\n                   Iterator groupsIter = getServerStoredContactListRoot()\n                       .subgroups();\n                   while (groupsIter.hasNext()) {\n                       ContactGroupSipImpl group = (ContactGroupSipImpl)\n                           groupsIter.next();\n\n                        Iterator contactsIter = group.contacts();\n\n                        while (contactsIter.hasNext()) {\n                            ContactSipImpl contact = (ContactSipImpl)\n                                contactsIter.next();\n\n                            if (contact.isResolved()) {\n                                logger.debug(\"contact \" + contact\n                                        + \" already resolved\");\n                                continue;\n                            }\n\n                            // try to subscribe to this contact\n                            forcePollContact(contact);\n                        }\n                    }\n\n                    // create the new polling task\n                    pollingTask = new PollOfflineContactsTask();\n\n                    // start polling the offline contacts\n                    getTimer().schedule(pollingTask, pollingTaskPeriod,\n                        pollingTaskPeriod);\n               } else if(evt.getNewState() == \n                       RegistrationState.CONNECTION_FAILED)\n               {\n                    // if connection failed we have lost network connectivity \n                    // we must fire that all contacts has gone offline\n                    Iterator groupsIter = getServerStoredContactListRoot()\n                                                                .subgroups();\n                    while(groupsIter.hasNext())\n                    {\n                        ContactGroupSipImpl group\n                            = (ContactGroupSipImpl)groupsIter.next();\n\n                        Iterator contactsIter = group.contacts();\n\n                        while(contactsIter.hasNext())\n                        {\n                            ContactSipImpl contact\n                                = (ContactSipImpl)contactsIter.next();\n                            \n                            PresenceStatus oldContactStatus\n                                = contact.getPresenceStatus();\n\n                            contact.setResolved(false);\n                            contact.setClientDialog(null);\n                            \n                            if(!oldContactStatus.isOnline())\n                                continue;\n\n                            contact.setPresenceStatus(\n                                sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));\n\n                            fireContactPresenceStatusChangeEvent(\n                                  contact\n                                , contact.getParentContactGroup()\n                                , oldContactStatus);\n                        }\n                    }\n                    \n                    // stop any task associated with the timer\n                    cancelTimer();\n                    \n                    waitedCallIds.clear();\n               }\n          }","commit_id":"2d305aa1a259d9f99c47dba4adb1b4bc4e6a1651","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Analyzes the incoming <tt>responseEvent<\/tt> and then forwards it to the\n     * proper event handler.\n     *\n     * @param responseEvent the responseEvent that we received\n     * ProtocolProviderService.\n     */\n    public void processResponse(ResponseEvent responseEvent)\n    {\n        if (this.presenceEnabled == false) {\n            return;\n        }\n\n        ClientTransaction clientTransaction = responseEvent\n            .getClientTransaction();\n        Response response = responseEvent.getResponse();\n\n        CSeqHeader cseq = ((CSeqHeader)response.getHeader(CSeqHeader.NAME));\n        if (cseq == null)\n        {\n            logger.error(\"An incoming response did not contain a CSeq header\");\n            return;\n        }\n        String method = cseq.getMethod();\n\n        SipProvider sourceProvider = (SipProvider)responseEvent.getSource();\n\n        // SUBSCRIBE\n        if (method.equals(Request.SUBSCRIBE)) {\n            // find the contact\n            CallIdHeader idheader = (CallIdHeader)\n                response.getHeader(CallIdHeader.NAME);\n            ContactSipImpl contact = (ContactSipImpl) this.subscribedContacts\n                .get(idheader.getCallId());\n\n            // if it's the response to an unsubscribe message, we just ignore it\n            // whatever the response is however if we need to handle a\n            // challenge, we do it\n            ExpiresHeader expHeader = response.getExpires();\n            if ((expHeader != null && expHeader.getExpires() == 0)\n                    || contact == null) // this handle the unsubscription case\n                                        // where we removed the contact from\n                                        // subscribedContacts\n            {\n                if (response.getStatusCode() == Response.UNAUTHORIZED\n                        || response.getStatusCode() ==\n                            Response.PROXY_AUTHENTICATION_REQUIRED)\n                {\n                    try {\n                        processAuthenticationChallenge(clientTransaction,\n                                response, sourceProvider);\n                    } catch (OperationFailedException e) {\n                        logger.error(\"can't handle the challenge\", e);\n                    }\n                } else  if (response.getStatusCode() != Response.OK\n                        && response.getStatusCode() != Response.ACCEPTED)\n                {\n                    // this definitivly ends the subscription\n                    synchronized (this.waitedCallIds) {\n                        this.waitedCallIds.remove(idheader.getCallId());\n                    }\n                }\n                // any other cases (200/202) will imply a NOTIFY, so we will\n                // handle the end of a subscription there\n\n                return;\n            }\n            \n            \n            if(response.getStatusCode() >= Response.OK && \n               response.getStatusCode() < Response.MULTIPLE_CHOICES)\n            {\n                // OK (200/202)\n                if (response.getStatusCode() == Response.OK\n                || response.getStatusCode() == Response.ACCEPTED)\n                {\n                    if (expHeader == null) {\n                        // not conform to rfc3265\n                        logger.error(\"no Expires header in this response\");\n                        return;\n                    }\n\n                    if (contact.getResfreshTask() != null) {\n                        contact.getResfreshTask().cancel();\n                    }\n\n                    RefreshSubscriptionTask refresh =\n                        new RefreshSubscriptionTask(contact);\n                    contact.setResfreshTask(refresh);\n\n                    try {\n                        // try to keep a margin\n                        this.timer.schedule(refresh,\n                                (expHeader.getExpires() - REFRESH_MARGIN) * 1000);\n                    } catch (IllegalArgumentException e) {\n                        logger.debug(\"the expires value seems to be less than a \" +\n                                \"minute, let's assume it\");\n\n                        this.timer.schedule(refresh, expHeader.getExpires() * 1000);\n                    }\n\n                    // do it to remember the dialog in case of a polling\n                    // subscription (which means no call to finalizeSubscription)\n                    contact.setClientDialog(clientTransaction.getDialog());\n\n                    try \n                    {    \n                        if (!contact.isResolved())\n                        {\n                            // if contact is not in the contact list \n                            // create it, and add to parent, later will be resolved\n                            if(resolveContactID(contact.getAddress()) == null)\n                            {\n                                ContactGroup parentGroup = \n                                    contact.getParentContactGroup();\n                                ((ContactGroupSipImpl) parentGroup).\n                                    addContact(contact);\n                                \n                                // pretend that the contact is created\n                                fireSubscriptionEvent(contact,\n                                        parentGroup,\n                                        SubscriptionEvent.SUBSCRIPTION_CREATED);\n                            }\n                            \n                            finalizeSubscription(contact,\n                                    clientTransaction.getDialog());\n                        }\n                    } catch (NullPointerException e) \n                    {\n                        // should not happen\n                        logger.debug(\"failed to finalize the subscription of the\" +\n                                \"contact\", e);\n\n                        return;\n                    }\n                }\n            }\n            else if(response.getStatusCode() >= Response.MULTIPLE_CHOICES && \n               response.getStatusCode() < Response.BAD_REQUEST)\n            {\n                logger.info(\"Response to Subscribe of contact: \" + contact + \n                        \" - \" + response.getReasonPhrase());\n            }\n            else if(response.getStatusCode() >= Response.BAD_REQUEST)\n            {\n                // if the response is a 423 response, just re-send the request\n                // with a valid expires value\n                if (response.getStatusCode() == Response.INTERVAL_TOO_BRIEF) {\n                    MinExpiresHeader min = (MinExpiresHeader)\n                        response.getHeader(MinExpiresHeader.NAME);\n\n                    if (min == null) {\n                        logger.error(\"no minimal expires value in this 423 \" +\n                                \"response\");\n                        return;\n                    }\n\n                    Request request = responseEvent.getClientTransaction()\n                        .getRequest();\n\n                    ExpiresHeader exp = request.getExpires();\n\n                    try {\n                        exp.setExpires(min.getExpires());\n                    } catch (InvalidArgumentException e) {\n                        logger.error(\"can't set the new expires value\", e);\n                        return;\n                    }\n\n                    ClientTransaction transac = null;\n                    try {\n                        transac = this.parentProvider.getDefaultJainSipProvider()\n                            .getNewClientTransaction(request);\n                    } catch (TransactionUnavailableException e) {\n                        logger.error(\"can't create the client transaction\", e);\n                        return;\n                    }\n\n                    try {\n                        transac.sendRequest();\n                    } catch (SipException e) {\n                        logger.error(\"can't send the new request\", e);\n                        return;\n                    }\n\n                    return;\n                // UNAUTHORIZED (401/407)\n                } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n                {\n                    try {\n                        processAuthenticationChallenge(clientTransaction,\n                                response, sourceProvider);\n                    } catch (OperationFailedException e) {\n                        logger.error(\"can't handle the challenge\", e);\n\n                        // we probably won't be able to communicate with the contact\n                        changePresenceStatusForContact(contact,\n                                sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                        this.subscribedContacts.remove(idheader.getCallId());\n                        contact.setClientDialog(null);\n                    }\n                // 408 480 486 600 603 : non definitive reject\n                } else if (response.getStatusCode() == Response.REQUEST_TIMEOUT\n                    || response.getStatusCode() == Response\n                        .TEMPORARILY_UNAVAILABLE\n                    || response.getStatusCode() == Response.BUSY_HERE\n                    || response.getStatusCode() == Response.BUSY_EVERYWHERE\n                    || response.getStatusCode() == Response.DECLINE)\n                {\n                    logger.debug(\"error received from the network\" + response);\n\n                    if (response.getStatusCode() == Response\n                            .TEMPORARILY_UNAVAILABLE)\n                    {\n                        changePresenceStatusForContact(contact,\n                            sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));\n                    } else {\n                        changePresenceStatusForContact(contact,\n                            sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                    }\n\n                    this.subscribedContacts.remove(idheader.getCallId());\n                    contact.setClientDialog(null);\n                    \n                    fireSubscriptionEvent(contact, contact.getParentContactGroup(), \n                        SubscriptionEvent.SUBSCRIPTION_FAILED, \n                        response.getStatusCode(),\n                        response.getReasonPhrase());\n                // definitive reject (or not implemented)\n                } else {\n                    logger.debug(\"error received from the network\" + response);\n\n                    // we'll never be able to resolve this contact\n                    contact.setResolvable(false);\n                    changePresenceStatusForContact(contact,\n                        sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                    this.subscribedContacts.remove(idheader.getCallId());\n                    contact.setClientDialog(null);\n                    \n                    fireSubscriptionEvent(contact, contact.getParentContactGroup(), \n                        SubscriptionEvent.SUBSCRIPTION_FAILED, \n                        response.getStatusCode(),\n                        response.getReasonPhrase());\n                }\n            }\n            // NOTIFY\n        } else if (method.equals(Request.NOTIFY)) {\n            // if it's a final response to a NOTIFY, we try to remove it from\n            // the list of waited NOTIFY end\n            if (response.getStatusCode() != Response.UNAUTHORIZED\n                && response.getStatusCode() != Response\n                    .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(((CallIdHeader) response\n                        .getHeader(CallIdHeader.NAME)).getCallId());\n                }\n            }\n\n            // OK (200)\n            if (response.getStatusCode() == Response.OK) {\n                // simply nothing to do here, the contact received our NOTIFY,\n                // everything is ok\n            // UNAUTHORIZED (401/407)\n            } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                try {\n                    processAuthenticationChallenge(clientTransaction,\n                            response, sourceProvider);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't handle the challenge\", e);\n\n                    // don't try to tell him anything more\n                    String contactAddress = ((FromHeader)\n                            response.getHeader(FromHeader.NAME)).getAddress()\n                            .getURI().toString();\n                    Contact watcher = getWatcher(contactAddress);\n\n                    if (watcher != null) {\n                        // avoid the case where we receive an error after having\n                        // close an old subscription before accepting a new one\n                        // from the same contact\n                        synchronized (watcher) {\n                            if (((ContactSipImpl) watcher).getServerDialog()\n                                .equals(clientTransaction.getDialog()))\n                            {\n                                synchronized (this.ourWatchers) {\n                                    this.ourWatchers.remove(watcher);\n                                }\n                            }\n                        }\n                    }\n                }\n            // every error cause the subscription to be removed\n            // as recommended in rfc3265\n            } else {\n                logger.debug(\"error received from the network\" + response);\n\n                String contactAddress = ((FromHeader)\n                        response.getHeader(FromHeader.NAME)).getAddress()\n                        .getURI().toString();\n                Contact watcher = getWatcher(contactAddress);\n\n                if (watcher != null) {\n                    // avoid the case where we receive an error after having\n                    // close an old subscription before accepting a new one\n                    // from the same contact\n                    synchronized (watcher) {\n                        if (((ContactSipImpl) watcher).getServerDialog()\n                            .equals(clientTransaction.getDialog()))\n                        {\n                            synchronized (this.ourWatchers) {\n                                this.ourWatchers.remove(watcher);\n                            }\n                        }\n                    }\n                }\n            }\n\n        // PUBLISH\n        } else if (method.equals(Request.PUBLISH)) {\n            // if it's a final response to a PUBLISH, we try to remove it from\n            // the list of waited PUBLISH end\n            if (response.getStatusCode() != Response.UNAUTHORIZED\n                && response.getStatusCode() != Response\n                    .PROXY_AUTHENTICATION_REQUIRED\n                && response.getStatusCode() != Response.INTERVAL_TOO_BRIEF)\n            {\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(((CallIdHeader) response\n                        .getHeader(CallIdHeader.NAME)).getCallId());\n                }\n            }\n\n            // OK (200)\n            if (response.getStatusCode() == Response.OK) {\n                // remember the entity tag\n                SIPETagHeader etHeader = (SIPETagHeader)\n                    response.getHeader(SIPETagHeader.NAME);\n\n                // must be one (rfc3903)\n                if (etHeader == null) {\n                    logger.debug(\"can't find the ETag header\");\n                    return;\n                }\n\n                this.distantPAET = etHeader.getETag();\n\n                // schedule a re-publish task\n                ExpiresHeader expires = (ExpiresHeader)\n                    response.getHeader(ExpiresHeader.NAME);\n\n                if (expires == null) {\n                    logger.error(\"no Expires header in the response\");\n                    return;\n                }\n                \n                // if it's a response to an unpublish request (Expires: 0),\n                // invalidate the etag and don't schedule a republish\n                if (expires.getExpires() == 0)\n                {\n                    this.distantPAET = null;\n                    return;\n                }\n\n                // just to be sure to not have two refreshing task\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                }\n\n                this.republishTask = new RePublishTask();\n\n                try {\n                    // keep a margin\n                    this.timer.schedule(this.republishTask,\n                            (expires.getExpires() - REFRESH_MARGIN) * 1000);\n                } catch (IllegalArgumentException e) {\n                    logger.error(\"the expires value seems to be less than a \" +\n                            \"minute, let's assume it\", e);\n\n                    this.timer.schedule(this.republishTask,\n                            expires.getExpires() * 1000);\n                }\n\n            // UNAUTHORIZED (401/407)\n            } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                try {\n                    processAuthenticationChallenge(clientTransaction,\n                            response, sourceProvider);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't handle the challenge\", e);\n                    return;\n                }\n            // INTERVAL TOO BRIEF (423)\n            } else if (response.getStatusCode() == Response.INTERVAL_TOO_BRIEF)\n            {\n                // we get the Min expires and we use it as the interval\n                MinExpiresHeader min = (MinExpiresHeader)\n                    response.getHeader(MinExpiresHeader.NAME);\n\n                if (min == null) {\n                    logger.error(\"can't find a min expires header in the 423\" +\n                            \" error message\");\n                    return;\n                }\n\n                // send a new publish with the new expires value\n                Request req = null;\n                try {\n                    req = createPublish(min.getExpires(), true);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't create the new publish request\", e);\n                    return;\n                }\n\n                ClientTransaction transac = null;\n                try {\n                    transac = this.parentProvider\n                        .getDefaultJainSipProvider()\n                        .getNewClientTransaction(req);\n                } catch (TransactionUnavailableException e) {\n                    logger.error(\"can't create the client transaction\", e);\n                    return;\n                }\n\n                try {\n                    transac.sendRequest();\n                } catch (SipException e) {\n                    logger.error(\"can't send the PUBLISH request\", e);\n                    return;\n                }\n            \n            // CONDITIONAL REQUEST FAILED (412)\n            } else if (response.getStatusCode() == Response\n                                                .CONDITIONAL_REQUEST_FAILED)\n            {\n                // as recommanded in rfc3903#5, we start a totally new \n                // publication\n                this.distantPAET = null;\n                Request req = null;\n                try {\n                    req = createPublish(this.subscriptionDuration, true);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't create the new publish request\", e);\n                    return;\n                }\n\n                ClientTransaction transac = null;\n                try {\n                    transac = this.parentProvider\n                        .getDefaultJainSipProvider()\n                        .getNewClientTransaction(req);\n                } catch (TransactionUnavailableException e) {\n                    logger.error(\"can't create the client transaction\", e);\n                    return;\n                }\n\n                try {\n                    transac.sendRequest();\n                } catch (SipException e) {\n                    logger.error(\"can't send the PUBLISH request\", e);\n                    return;\n                }\n\n            // with every other error, we consider that we have to start a new\n            // communication.\n            // Enter p2p mode if the distant PA mode fails\n            } else {\n                logger.debug(\"error received from the network\" + response);\n                this.distantPAET = null;\n\n                if (this.useDistantPA == false) {\n                    return;\n                }\n\n                logger.debug(\"we enter into the peer to peer mode as the \"\n                        + \"distant PA mode fails\");\n                this.useDistantPA = false;\n\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                }\n\n                // if we are there, we don't have any watcher so no need to\n                // republish our presence state\n\n            }\n        }\n    }","id":64086,"modified_method":"/**\n     * Analyzes the incoming <tt>responseEvent<\/tt> and then forwards it to the\n     * proper event handler.\n     *\n     * @param responseEvent the responseEvent that we received\n     * ProtocolProviderService.\n     */\n    public void processResponse(ResponseEvent responseEvent)\n    {\n        if (this.presenceEnabled == false) {\n            return;\n        }\n\n        ClientTransaction clientTransaction = responseEvent\n            .getClientTransaction();\n        Response response = responseEvent.getResponse();\n\n        CSeqHeader cseq = ((CSeqHeader)response.getHeader(CSeqHeader.NAME));\n        if (cseq == null)\n        {\n            logger.error(\"An incoming response did not contain a CSeq header\");\n            return;\n        }\n        String method = cseq.getMethod();\n\n        SipProvider sourceProvider = (SipProvider)responseEvent.getSource();\n\n        // SUBSCRIBE\n        if (method.equals(Request.SUBSCRIBE)) {\n            // find the contact\n            CallIdHeader idheader = (CallIdHeader)\n                response.getHeader(CallIdHeader.NAME);\n            ContactSipImpl contact = (ContactSipImpl) this.subscribedContacts\n                .get(idheader.getCallId());\n\n            // if it's the response to an unsubscribe message, we just ignore it\n            // whatever the response is however if we need to handle a\n            // challenge, we do it\n            ExpiresHeader expHeader = response.getExpires();\n            if ((expHeader != null && expHeader.getExpires() == 0)\n                    || contact == null) // this handle the unsubscription case\n                                        // where we removed the contact from\n                                        // subscribedContacts\n            {\n                if (response.getStatusCode() == Response.UNAUTHORIZED\n                        || response.getStatusCode() ==\n                            Response.PROXY_AUTHENTICATION_REQUIRED)\n                {\n                    try {\n                        processAuthenticationChallenge(clientTransaction,\n                                response, sourceProvider);\n                    } catch (OperationFailedException e) {\n                        logger.error(\"can't handle the challenge\", e);\n                    }\n                } else  if (response.getStatusCode() != Response.OK\n                        && response.getStatusCode() != Response.ACCEPTED)\n                {\n                    // this definitivly ends the subscription\n                    synchronized (this.waitedCallIds) {\n                        this.waitedCallIds.remove(idheader.getCallId());\n                    }\n                }\n                // any other cases (200/202) will imply a NOTIFY, so we will\n                // handle the end of a subscription there\n\n                return;\n            }\n            \n            \n            if(response.getStatusCode() >= Response.OK && \n               response.getStatusCode() < Response.MULTIPLE_CHOICES)\n            {\n                // OK (200/202)\n                if (response.getStatusCode() == Response.OK\n                || response.getStatusCode() == Response.ACCEPTED)\n                {\n                    if (expHeader == null) {\n                        // not conform to rfc3265\n                        logger.error(\"no Expires header in this response\");\n                        return;\n                    }\n\n                    if (contact.getResfreshTask() != null) {\n                        contact.getResfreshTask().cancel();\n                    }\n\n                    RefreshSubscriptionTask refresh =\n                        new RefreshSubscriptionTask(contact);\n                    contact.setResfreshTask(refresh);\n\n                    int refreshDelay = expHeader.getExpires();\n                    // try to keep a margin\n                    if (refreshDelay >= REFRESH_MARGIN)\n                        refreshDelay -= REFRESH_MARGIN;\n                    getTimer().schedule(refresh, refreshDelay * 1000);\n\n                    // do it to remember the dialog in case of a polling\n                    // subscription (which means no call to finalizeSubscription)\n                    contact.setClientDialog(clientTransaction.getDialog());\n\n                    try \n                    {    \n                        if (!contact.isResolved())\n                        {\n                            // if contact is not in the contact list \n                            // create it, and add to parent, later will be resolved\n                            if(resolveContactID(contact.getAddress()) == null)\n                            {\n                                ContactGroup parentGroup = \n                                    contact.getParentContactGroup();\n                                ((ContactGroupSipImpl) parentGroup).\n                                    addContact(contact);\n                                \n                                // pretend that the contact is created\n                                fireSubscriptionEvent(contact,\n                                        parentGroup,\n                                        SubscriptionEvent.SUBSCRIPTION_CREATED);\n                            }\n                            \n                            finalizeSubscription(contact,\n                                    clientTransaction.getDialog());\n                        }\n                    } catch (NullPointerException e) \n                    {\n                        // should not happen\n                        logger.debug(\"failed to finalize the subscription of the\" +\n                                \"contact\", e);\n\n                        return;\n                    }\n                }\n            }\n            else if(response.getStatusCode() >= Response.MULTIPLE_CHOICES && \n               response.getStatusCode() < Response.BAD_REQUEST)\n            {\n                logger.info(\"Response to Subscribe of contact: \" + contact + \n                        \" - \" + response.getReasonPhrase());\n            }\n            else if(response.getStatusCode() >= Response.BAD_REQUEST)\n            {\n                // if the response is a 423 response, just re-send the request\n                // with a valid expires value\n                if (response.getStatusCode() == Response.INTERVAL_TOO_BRIEF) {\n                    MinExpiresHeader min = (MinExpiresHeader)\n                        response.getHeader(MinExpiresHeader.NAME);\n\n                    if (min == null) {\n                        logger.error(\"no minimal expires value in this 423 \" +\n                                \"response\");\n                        return;\n                    }\n\n                    Request request = responseEvent.getClientTransaction()\n                        .getRequest();\n\n                    ExpiresHeader exp = request.getExpires();\n\n                    try {\n                        exp.setExpires(min.getExpires());\n                    } catch (InvalidArgumentException e) {\n                        logger.error(\"can't set the new expires value\", e);\n                        return;\n                    }\n\n                    ClientTransaction transac = null;\n                    try {\n                        transac = this.parentProvider.getDefaultJainSipProvider()\n                            .getNewClientTransaction(request);\n                    } catch (TransactionUnavailableException e) {\n                        logger.error(\"can't create the client transaction\", e);\n                        return;\n                    }\n\n                    try {\n                        transac.sendRequest();\n                    } catch (SipException e) {\n                        logger.error(\"can't send the new request\", e);\n                        return;\n                    }\n\n                    return;\n                // UNAUTHORIZED (401/407)\n                } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n                {\n                    try {\n                        processAuthenticationChallenge(clientTransaction,\n                                response, sourceProvider);\n                    } catch (OperationFailedException e) {\n                        logger.error(\"can't handle the challenge\", e);\n\n                        // we probably won't be able to communicate with the contact\n                        changePresenceStatusForContact(contact,\n                                sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                        this.subscribedContacts.remove(idheader.getCallId());\n                        contact.setClientDialog(null);\n                    }\n                // 408 480 486 600 603 : non definitive reject\n                } else if (response.getStatusCode() == Response.REQUEST_TIMEOUT\n                    || response.getStatusCode() == Response\n                        .TEMPORARILY_UNAVAILABLE\n                    || response.getStatusCode() == Response.BUSY_HERE\n                    || response.getStatusCode() == Response.BUSY_EVERYWHERE\n                    || response.getStatusCode() == Response.DECLINE)\n                {\n                    logger.debug(\"error received from the network\" + response);\n\n                    if (response.getStatusCode() == Response\n                            .TEMPORARILY_UNAVAILABLE)\n                    {\n                        changePresenceStatusForContact(contact,\n                            sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));\n                    } else {\n                        changePresenceStatusForContact(contact,\n                            sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                    }\n\n                    this.subscribedContacts.remove(idheader.getCallId());\n                    contact.setClientDialog(null);\n                    \n                    fireSubscriptionEvent(contact, contact.getParentContactGroup(), \n                        SubscriptionEvent.SUBSCRIPTION_FAILED, \n                        response.getStatusCode(),\n                        response.getReasonPhrase());\n                // definitive reject (or not implemented)\n                } else {\n                    logger.debug(\"error received from the network\" + response);\n\n                    // we'll never be able to resolve this contact\n                    contact.setResolvable(false);\n                    changePresenceStatusForContact(contact,\n                        sipStatusEnum.getStatus(SipStatusEnum.UNKNOWN));\n                    this.subscribedContacts.remove(idheader.getCallId());\n                    contact.setClientDialog(null);\n                    \n                    fireSubscriptionEvent(contact, contact.getParentContactGroup(), \n                        SubscriptionEvent.SUBSCRIPTION_FAILED, \n                        response.getStatusCode(),\n                        response.getReasonPhrase());\n                }\n            }\n            // NOTIFY\n        } else if (method.equals(Request.NOTIFY)) {\n            // if it's a final response to a NOTIFY, we try to remove it from\n            // the list of waited NOTIFY end\n            if (response.getStatusCode() != Response.UNAUTHORIZED\n                && response.getStatusCode() != Response\n                    .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(((CallIdHeader) response\n                        .getHeader(CallIdHeader.NAME)).getCallId());\n                }\n            }\n\n            // OK (200)\n            if (response.getStatusCode() == Response.OK) {\n                // simply nothing to do here, the contact received our NOTIFY,\n                // everything is ok\n            // UNAUTHORIZED (401/407)\n            } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                try {\n                    processAuthenticationChallenge(clientTransaction,\n                            response, sourceProvider);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't handle the challenge\", e);\n\n                    // don't try to tell him anything more\n                    String contactAddress = ((FromHeader)\n                            response.getHeader(FromHeader.NAME)).getAddress()\n                            .getURI().toString();\n                    Contact watcher = getWatcher(contactAddress);\n\n                    if (watcher != null) {\n                        // avoid the case where we receive an error after having\n                        // close an old subscription before accepting a new one\n                        // from the same contact\n                        synchronized (watcher) {\n                            if (((ContactSipImpl) watcher).getServerDialog()\n                                .equals(clientTransaction.getDialog()))\n                            {\n                                synchronized (this.ourWatchers) {\n                                    this.ourWatchers.remove(watcher);\n                                }\n                            }\n                        }\n                    }\n                }\n            // every error cause the subscription to be removed\n            // as recommended in rfc3265\n            } else {\n                logger.debug(\"error received from the network\" + response);\n\n                String contactAddress = ((FromHeader)\n                        response.getHeader(FromHeader.NAME)).getAddress()\n                        .getURI().toString();\n                Contact watcher = getWatcher(contactAddress);\n\n                if (watcher != null) {\n                    // avoid the case where we receive an error after having\n                    // close an old subscription before accepting a new one\n                    // from the same contact\n                    synchronized (watcher) {\n                        if (((ContactSipImpl) watcher).getServerDialog()\n                            .equals(clientTransaction.getDialog()))\n                        {\n                            synchronized (this.ourWatchers) {\n                                this.ourWatchers.remove(watcher);\n                            }\n                        }\n                    }\n                }\n            }\n\n        // PUBLISH\n        } else if (method.equals(Request.PUBLISH)) {\n            // if it's a final response to a PUBLISH, we try to remove it from\n            // the list of waited PUBLISH end\n            if (response.getStatusCode() != Response.UNAUTHORIZED\n                && response.getStatusCode() != Response\n                    .PROXY_AUTHENTICATION_REQUIRED\n                && response.getStatusCode() != Response.INTERVAL_TOO_BRIEF)\n            {\n                synchronized (this.waitedCallIds) {\n                    this.waitedCallIds.remove(((CallIdHeader) response\n                        .getHeader(CallIdHeader.NAME)).getCallId());\n                }\n            }\n\n            // OK (200)\n            if (response.getStatusCode() == Response.OK) {\n                // remember the entity tag\n                SIPETagHeader etHeader = (SIPETagHeader)\n                    response.getHeader(SIPETagHeader.NAME);\n\n                // must be one (rfc3903)\n                if (etHeader == null) {\n                    logger.debug(\"can't find the ETag header\");\n                    return;\n                }\n\n                this.distantPAET = etHeader.getETag();\n\n                // schedule a re-publish task\n                ExpiresHeader expires = (ExpiresHeader)\n                    response.getHeader(ExpiresHeader.NAME);\n\n                if (expires == null) {\n                    logger.error(\"no Expires header in the response\");\n                    return;\n                }\n                \n                // if it's a response to an unpublish request (Expires: 0),\n                // invalidate the etag and don't schedule a republish\n                if (expires.getExpires() == 0)\n                {\n                    this.distantPAET = null;\n                    return;\n                }\n\n                // just to be sure to not have two refreshing task\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                }\n\n                this.republishTask = new RePublishTask();\n\n                int republishDelay = expires.getExpires();\n                // keep a margin\n                if (republishDelay >= REFRESH_MARGIN)\n                    republishDelay -= REFRESH_MARGIN;\n                getTimer().schedule(this.republishTask, republishDelay * 1000);\n\n            // UNAUTHORIZED (401/407)\n            } else if (response.getStatusCode() == Response.UNAUTHORIZED\n                    || response.getStatusCode() == Response\n                        .PROXY_AUTHENTICATION_REQUIRED)\n            {\n                try {\n                    processAuthenticationChallenge(clientTransaction,\n                            response, sourceProvider);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't handle the challenge\", e);\n                    return;\n                }\n            // INTERVAL TOO BRIEF (423)\n            } else if (response.getStatusCode() == Response.INTERVAL_TOO_BRIEF)\n            {\n                // we get the Min expires and we use it as the interval\n                MinExpiresHeader min = (MinExpiresHeader)\n                    response.getHeader(MinExpiresHeader.NAME);\n\n                if (min == null) {\n                    logger.error(\"can't find a min expires header in the 423\" +\n                            \" error message\");\n                    return;\n                }\n\n                // send a new publish with the new expires value\n                Request req = null;\n                try {\n                    req = createPublish(min.getExpires(), true);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't create the new publish request\", e);\n                    return;\n                }\n\n                ClientTransaction transac = null;\n                try {\n                    transac = this.parentProvider\n                        .getDefaultJainSipProvider()\n                        .getNewClientTransaction(req);\n                } catch (TransactionUnavailableException e) {\n                    logger.error(\"can't create the client transaction\", e);\n                    return;\n                }\n\n                try {\n                    transac.sendRequest();\n                } catch (SipException e) {\n                    logger.error(\"can't send the PUBLISH request\", e);\n                    return;\n                }\n            \n            // CONDITIONAL REQUEST FAILED (412)\n            } else if (response.getStatusCode() == Response\n                                                .CONDITIONAL_REQUEST_FAILED)\n            {\n                // as recommanded in rfc3903#5, we start a totally new \n                // publication\n                this.distantPAET = null;\n                Request req = null;\n                try {\n                    req = createPublish(this.subscriptionDuration, true);\n                } catch (OperationFailedException e) {\n                    logger.error(\"can't create the new publish request\", e);\n                    return;\n                }\n\n                ClientTransaction transac = null;\n                try {\n                    transac = this.parentProvider\n                        .getDefaultJainSipProvider()\n                        .getNewClientTransaction(req);\n                } catch (TransactionUnavailableException e) {\n                    logger.error(\"can't create the client transaction\", e);\n                    return;\n                }\n\n                try {\n                    transac.sendRequest();\n                } catch (SipException e) {\n                    logger.error(\"can't send the PUBLISH request\", e);\n                    return;\n                }\n\n            // with every other error, we consider that we have to start a new\n            // communication.\n            // Enter p2p mode if the distant PA mode fails\n            } else {\n                logger.debug(\"error received from the network\" + response);\n                this.distantPAET = null;\n\n                if (this.useDistantPA == false) {\n                    return;\n                }\n\n                logger.debug(\"we enter into the peer to peer mode as the \"\n                        + \"distant PA mode fails\");\n                this.useDistantPA = false;\n\n                if (this.republishTask != null) {\n                    this.republishTask.cancel();\n                    this.republishTask = null;\n                }\n\n                // if we are there, we don't have any watcher so no need to\n                // republish our presence state\n\n            }\n        }\n    }","commit_id":"2d305aa1a259d9f99c47dba4adb1b4bc4e6a1651","url":"https://github.com/jitsi/jitsi"},{"original_method":"public DefaultProjectOutput(String name, ProjectOutput parent, DomainObjectSet<ProjectOutput> children, Set<TaskOutput> taskOutputs) {\n        this.name = name;\n        this.taskOutputs = taskOutputs;\n        this.parent = parent;\n        this.children = children;\n    }","id":64087,"modified_method":"public DefaultProjectOutput(String name, ProjectOutput parent, Set<TaskOutput> taskOutputs) {\n        this.name = name;\n        this.taskOutputs = taskOutputs;\n        this.parent = parent;\n    }","commit_id":"5e4d8012b909b7d0b5ed974fd87bba84e30da328","url":"https://github.com/gradle/gradle"},{"original_method":"public DomainObjectSet<ProjectOutput> getChildren() {\n        return children;\n    }","id":64088,"modified_method":"public DomainObjectSet<ProjectOutput> getChildren() {\n        return new ImmutableDomainObjectSet<ProjectOutput>(children);\n    }","commit_id":"5e4d8012b909b7d0b5ed974fd87bba84e30da328","url":"https://github.com/gradle/gradle"},{"original_method":"public ProjectVersion3 buildAll(GradleInternal gradle) {\n        Project project = gradle.getRootProject();\n        Set<TaskOutput> taskOutputs = Sets.newHashSet();\n\n        addArchives(project, taskOutputs);\n        addTestResults(project, taskOutputs);\n\n        return new DefaultProjectOutput(project.getName(), null,\n                ImmutableDomainObjectSet.of(Collections.<ProjectOutput>emptyList()), taskOutputs);\n    }","id":64089,"modified_method":"public ProjectVersion3 buildAll(GradleInternal gradle) {\n        return buildProjectOutput(gradle.getRootProject(), null);\n\n    }","commit_id":"5e4d8012b909b7d0b5ed974fd87bba84e30da328","url":"https://github.com/gradle/gradle"},{"original_method":"public CompositeContextBuilder createCompositeContextBuilder(StartParameter startParameter, ServiceRegistry serviceRegistry) {\n            return new DefaultCompositeContextBuilder(startParameter, serviceRegistry);\n        }","id":64090,"modified_method":"public CompositeContextBuilder createCompositeContextBuilder(CompositeBuildContext context) {\n            return new DefaultCompositeContextBuilder(context);\n        }","commit_id":"ea418c9a2a1aef085675834cfd1fded0b86a039a","url":"https://github.com/gradle/gradle"},{"original_method":"public void run(IncludedBuild build, BuildController buildController) {\n        GradleInternal gradle = buildController.configure();\n        ProjectInternal rootProject = gradle.getRootProject();\n\n        // TODO:DAZ Once we have a re-usable GradleLauncher instance, we can move this up to DefaultCompositeContextBuilder\n        String buildName = rootProject.getName();\n        context.registerBuild(buildName, build);\n\n        for (Project project : rootProject.getAllprojects()) {\n            registerProject(buildName, (ProjectInternal) project);\n        }\n    }","id":64091,"modified_method":"public void run(IncludedBuildInternal build) {\n        GradleLauncher gradleLauncher = build.createGradleLauncher();\n        try {\n            Gradle gradle = gradleLauncher.getBuildAnalysis().getGradle();\n            for (Project project : gradle.getRootProject().getAllprojects()) {\n                registerProject(build.getName(), (ProjectInternal) project);\n            }\n        } finally {\n            gradleLauncher.stop();\n        }\n    }","commit_id":"ea418c9a2a1aef085675834cfd1fded0b86a039a","url":"https://github.com/gradle/gradle"},{"original_method":"private void configureBuildToRegisterDependencyMetadata(IncludedBuildInternal build, CompositeBuildContext context) {\n        CompositeContextBuildActionRunner contextBuilder = new CompositeContextBuildActionRunner(context);\n        GradleLauncher gradleLauncher = build.createGradleLauncher();\n        try {\n            contextBuilder.run(gradleLauncher);\n        } finally {\n            gradleLauncher.stop();\n        }\n    }","id":64092,"modified_method":"private void configureBuildToRegisterDependencyMetadata(IncludedBuildInternal build, CompositeBuildContext context) {\n        CompositeContextBuildActionRunner contextBuilder = new CompositeContextBuildActionRunner(context);\n        contextBuilder.run(build);\n    }","commit_id":"ea418c9a2a1aef085675834cfd1fded0b86a039a","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultCompositeContextBuilder(StartParameter startParameter, ServiceRegistry services) {\n        this.buildStartParam = startParameter;\n        this.sharedServices = services;\n    }","id":64093,"modified_method":"public DefaultCompositeContextBuilder(CompositeBuildContext context) {\n        this.context = context;\n    }","commit_id":"ea418c9a2a1aef085675834cfd1fded0b86a039a","url":"https://github.com/gradle/gradle"},{"original_method":"private void doAddToCompositeContext(Iterable<IncludedBuild> includedBuilds) {\n        CompositeBuildContext context = sharedServices.get(CompositeBuildContext.class);\n\n        for (IncludedBuild build : includedBuilds) {\n            IncludedBuildInternal buildInternal = (IncludedBuildInternal) build;\n            StartParameter includedBuildStartParam = buildStartParam.newBuild();\n            includedBuildStartParam.setProjectDir(build.getProjectDir());\n            includedBuildStartParam.setSearchUpwards(false);\n            includedBuildStartParam.setConfigureOnDemand(false);\n\n            DependencySubstitutionsInternal substitutions = ((IncludedBuildInternal) build).resolveDependencySubstitutions();\n            if (!substitutions.hasRules()) {\n                configureBuildToDetermineSubstitutions(buildInternal, context, includedBuildStartParam);\n            } else {\n                context.registerBuild(((IncludedBuildInternal) build).getName(), build);\n                context.registerSubstitution(substitutions.getRuleAction());\n            }\n        }\n    }","id":64094,"modified_method":"private void doAddToCompositeContext(Iterable<IncludedBuild> includedBuilds) {\n        CompositeSubstitutionsActionRunner contextBuilder = new CompositeSubstitutionsActionRunner(context);\n\n        for (IncludedBuild build : includedBuilds) {\n            IncludedBuildInternal buildInternal = (IncludedBuildInternal) build;\n            context.registerBuild(buildInternal.getName(), build);\n\n            DependencySubstitutionsInternal substitutions = buildInternal.resolveDependencySubstitutions();\n            if (!substitutions.hasRules()) {\n                // Configure the included build to discover substitutions\n                LOGGER.lifecycle(\"[composite-build] Configuring build: \" + buildInternal.getProjectDir());\n                contextBuilder.run(buildInternal);\n            } else {\n                // Register the defined substitutions for included build\n                context.registerSubstitution(substitutions.getRuleAction());\n            }\n        }\n    }","commit_id":"ea418c9a2a1aef085675834cfd1fded0b86a039a","url":"https://github.com/gradle/gradle"},{"original_method":"public static void renameFile(final Activity a, final File f, final Runnable callback) {\n\t\tBuilder b = new AlertDialog.Builder(a);\n\t\tif(f.exists()){\n\t\t\tint xt = f.getName().lastIndexOf('.');\n\t\t\tfinal String ext = f.getName().substring(xt);\n\t\t\tfinal EditText editText = new EditText(a);\n\t\t\teditText.setText(f.getName().subSequence(0, xt));\n\t\t\tb.setView(editText);\n\t\t\tb.setPositiveButton(R.string.shared_string_save, new DialogInterface.OnClickListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\tString newName = editText.getText().toString() + ext;\n\t\t\t\t\tFile dest = new File(f.getParentFile(), newName);\n\t\t\t\t\tif (dest.exists()) {\n\t\t\t\t\t\tAccessibleToast.makeText(a, R.string.file_with_name_already_exists, Toast.LENGTH_LONG).show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!dest.getParentFile().exists()) {\n\t\t\t\t\t\t\tdest.getParentFile().mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(f.renameTo(dest)){\n\t\t\t\t\t\t\tif(callback != null) { \n\t\t\t\t\t\t\t\tcallback.run();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tAccessibleToast.makeText(a, R.string.file_can_not_be_renamed, Toast.LENGTH_LONG).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t\tb.setNegativeButton(R.string.shared_string_cancel, null);\n\t\t\tb.show();\n\t\t}\n\t}","id":64095,"modified_method":"public static void renameFile(final Activity a, final File f, final Runnable callback) {\n\t\tBuilder b = new AlertDialog.Builder(a);\n\t\tif(f.exists()){\n\t\t\tint xt = f.getName().lastIndexOf('.');\n\t\t\tfinal String ext = xt == -1 ? \"\" : f.getName().substring(xt);\n\t\t\tfinal String originalName = xt == -1 ? f.getName() : f.getName().substring(0, xt);\n\t\t\tfinal EditText editText = new EditText(a);\n\t\t\teditText.setText(originalName);\n\t\t\tb.setView(editText);\n\t\t\tb.setPositiveButton(R.string.shared_string_save, new DialogInterface.OnClickListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\tString newName = editText.getText().toString() + ext;\n\t\t\t\t\tFile dest = new File(f.getParentFile(), newName);\n\t\t\t\t\tif (dest.exists()) {\n\t\t\t\t\t\tAccessibleToast.makeText(a, R.string.file_with_name_already_exists, Toast.LENGTH_LONG).show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!dest.getParentFile().exists()) {\n\t\t\t\t\t\t\tdest.getParentFile().mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(f.renameTo(dest)){\n\t\t\t\t\t\t\tif(callback != null) { \n\t\t\t\t\t\t\t\tcallback.run();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tAccessibleToast.makeText(a, R.string.file_can_not_be_renamed, Toast.LENGTH_LONG).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t\tb.setNegativeButton(R.string.shared_string_cancel, null);\n\t\t\tb.show();\n\t\t}\n\t}","commit_id":"6d7e266d7796636911cdd7fd0361310b1facc362","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void basicFileOperation(final LocalIndexInfo info, ContextMenuAdapter adapter) {\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(ArrayAdapter<?> adapter, int resId, int pos, boolean isChecked) {\n\t\t\t\treturn performBasicOperation(resId, info);\n\t\t\t}\n\t\t};\n\t\tif(info.getType() == LocalIndexType.MAP_DATA || info.getType() == LocalIndexType.SRTM_DATA){\n\t\t\tif(!info.isBackupedData()){\n\t\t\t\tadapter.item(R.string.local_index_mi_backup).listen(listener).position( 1).reg();\n\t\t\t}\n\t\t}\n\t\tif(info.isBackupedData()){\n\t\t\tadapter.item(R.string.local_index_mi_restore).listen(listener).position(2).reg();\n\t\t}\n\t\tadapter.item(R.string.shared_string_rename).listen(listener).position(3).reg();\n\t\tadapter.item(R.string.shared_string_delete).listen(listener).position(4).reg();\n\t}","id":64096,"modified_method":"private void basicFileOperation(final LocalIndexInfo info, ContextMenuAdapter adapter) {\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(ArrayAdapter<?> adapter, int resId, int pos, boolean isChecked) {\n\t\t\t\treturn performBasicOperation(resId, info);\n\t\t\t}\n\t\t};\n\t\tif(info.getType() == LocalIndexType.MAP_DATA || info.getType() == LocalIndexType.SRTM_DATA){\n\t\t\tif(!info.isBackupedData()){\n\t\t\t\tadapter.item(R.string.local_index_mi_backup).listen(listener).position( 1).reg();\n\t\t\t}\n\t\t}\n\t\tif(info.isBackupedData()){\n\t\t\tadapter.item(R.string.local_index_mi_restore).listen(listener).position(2).reg();\n\t\t}\n\t\tif(info.getType() != LocalIndexType.TTS_VOICE_DATA && info.getType() != LocalIndexType.VOICE_DATA){\n\t\t\tadapter.item(R.string.shared_string_rename).listen(listener).position(3).reg();\n\t\t}\n\t\tadapter.item(R.string.shared_string_delete).listen(listener).position(4).reg();\n\t}","commit_id":"6d7e266d7796636911cdd7fd0361310b1facc362","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public ParkingPositionPlugin(OsmandApplication app) {\n\t\tthis.app = app;\n\t\tOsmandSettings set = app.getSettings();\n\t\tparkingLat = set.registerFloatPreference(PARKING_POINT_LAT, 0f).makeGlobal();\n\t\tparkingLon = set.registerFloatPreference(PARKING_POINT_LON, 0f).makeGlobal();\n\t\tparkingType = set.registerBooleanPreference(PARKING_TYPE, false).makeGlobal();\n\t\tparkingEvent = set.registerBooleanPreference(PARKING_EVENT_ADDED, false).makeGlobal();\n\t\tparkingTime = set.registerLongPreference(PARKING_TIME, -1).makeGlobal();\n\t\tparkingStartTime = set.registerLongPreference(PARKING_START_TIME, -1).makeGlobal();\n\t}","id":64097,"modified_method":"public ParkingPositionPlugin(OsmandApplication app) {\n\t\tthis.app = app;\n\t\tOsmandSettings set = app.getSettings();\n\t\tparkingLat = set.registerFloatPreference(PARKING_POINT_LAT, 0f).makeGlobal();\n\t\tparkingLon = set.registerFloatPreference(PARKING_POINT_LON, 0f).makeGlobal();\n\t\tparkingType = set.registerBooleanPreference(PARKING_TYPE, false).makeGlobal();\n\t\tparkingEvent = set.registerBooleanPreference(PARKING_EVENT_ADDED, false).makeGlobal();\n\t\tparkingTime = set.registerLongPreference(PARKING_TIME, -1).makeGlobal();\n\t\tparkingStartTime = set.registerLongPreference(PARKING_START_TIME, -1).makeGlobal();\n        parkingPosition = constructParkingPosition();\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public boolean clearParkingPosition() {\n\t\tparkingLat.resetToDefault();\n\t\tparkingLon.resetToDefault();\n\t\tparkingType.resetToDefault();\n\t\tparkingTime.resetToDefault();\n\t\tparkingEvent.resetToDefault();\n\t\tparkingStartTime.resetToDefault();\n\t\treturn true;\n\t}","id":64098,"modified_method":"public boolean clearParkingPosition() {\n\t\tparkingLat.resetToDefault();\n\t\tparkingLon.resetToDefault();\n\t\tparkingType.resetToDefault();\n\t\tparkingTime.resetToDefault();\n\t\tparkingEvent.resetToDefault();\n\t\tparkingStartTime.resetToDefault();\n        parkingPosition = null;\n\t\treturn true;\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public boolean setParkingPosition(double latitude, double longitude) {\n\t\tparkingLat.set((float)latitude);\n\t\tparkingLon.set((float)longitude);\n\t\treturn true;\n\t}","id":64099,"modified_method":"public boolean setParkingPosition(double latitude, double longitude) {\n\t\tparkingLat.set((float)latitude);\n\t\tparkingLon.set((float)longitude);\n        parkingPosition = constructParkingPosition();\n\t\treturn true;\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n\t * Opens the dialog to set a time limit for time-limited parking.\n\t * The dialog has option to add a notification to Calendar app. \n\t * Anyway the time-limit can be seen from parking point description.\n\t * @param mapActivity\n\t * @param choose \n\t */\n\tprivate void showSetTimeLimitDialog(final MapActivity mapActivity, final Dialog choose) {\n\t\tfinal View setTimeParking = mapActivity.getLayoutInflater().inflate(R.layout.parking_set_time_limit, null);\n\t\tBuilder setTime = new AlertDialog.Builder(mapActivity);\n\t\tsetTime.setView(setTimeParking);\n\t\tsetTime.setTitle(mapActivity.getString(R.string.osmand_parking_time_limit_title));\n\t\tsetTime.setNegativeButton(R.string.default_buttons_cancel, null);\n\t\tfinal TextView  textView = (TextView) setTimeParking.findViewById(R.id.parkTime);\n\t\tfinal TimePicker timePicker = (TimePicker) setTimeParking.findViewById(R.id.parking_time_picker);\n\t\t\n\t\ttimePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {\n\t\t\tprivate static final int TIME_PICKER_INTERVAL = 5;\n\t\t\tprivate boolean mIgnoreEvent = false;\n\t\t\tprivate Calendar cal = Calendar.getInstance();\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onTimeChanged(TimePicker timePicker, int hourOfDay, int minute) {\n\t\t        if (mIgnoreEvent) {\n\t\t            return;\n\t\t        }\n\t\t        if (minute%TIME_PICKER_INTERVAL != 0) {\n\t\t            int minuteFloor=minute-(minute%TIME_PICKER_INTERVAL);\n\t\t            minute=minuteFloor + (minute == minuteFloor + 1 ? TIME_PICKER_INTERVAL : 0);\n\t\t            if (minute == 60) {\n\t\t                minute = 0;\n\t\t            }\n\t\t            mIgnoreEvent = true;\n\t\t            timePicker.setCurrentMinute(minute);\n\t\t            mIgnoreEvent = false;\n\t\t            long timeInMillis = cal.getTimeInMillis() + hourOfDay*60*60*1000+ minute*60*1000;\n\t\t            textView.setText(mapActivity.getString(R.string.osmand_parking_position_description_add) \n\t\t            \t\t+ \" \"+  parkingLayer.getFormattedTime(timeInMillis));\n\t\t        }\n\n\t\t    }\n\t\t});\n\t\t\n\t\t\n\t\t//to set the same 24-hour or 12-hour mode as it is set in the device\n\t\ttimePicker.setIs24HourView(true);\n\t\ttimePicker.setCurrentHour(0);\n\t\ttimePicker.setCurrentMinute(0);\n\t\t\n\t\tsetTime.setPositiveButton(R.string.default_buttons_ok, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\tchoose.dismiss();\n\t\t\t\tCalendar cal = Calendar.getInstance();\n\t\t\t\tboolean is24HourFormat = DateFormat.is24HourFormat(app);\n\t\t\t\tint hour = cal.get(is24HourFormat ? Calendar.HOUR_OF_DAY : Calendar.HOUR);\n\t\t\t\tint minute = cal.get(Calendar.MINUTE);\n\t\t\t\tcal.set(is24HourFormat ? Calendar.HOUR_OF_DAY : Calendar.HOUR, hour + timePicker.getCurrentHour());\n\t\t\t\tcal.set(Calendar.MINUTE, minute + timePicker.getCurrentMinute());\n\t\t\t\tsetParkingTime(cal.getTimeInMillis());\n\t\t\t\tCheckBox addCalendarEvent = (CheckBox) setTimeParking.findViewById(R.id.check_event_in_calendar);\n\t\t\t\tif (addCalendarEvent.isChecked()) {\n\t\t\t\t\taddCalendarEvent(setTimeParking);\n\t\t\t\t\taddOrRemoveParkingEvent(true);\n\t\t\t\t} else {\n\t\t\t\t\taddOrRemoveParkingEvent(false);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tsetTime.create();\n\t\tsetTime.show();\n\t}","id":64100,"modified_method":"/**\n\t * Opens the dialog to set a time limit for time-limited parking.\n\t * The dialog has option to add a notification to Calendar app. \n\t * Anyway the time-limit can be seen from parking point description.\n\t * @param mapActivity\n\t * @param choose \n\t */\n\tprivate void showSetTimeLimitDialog(final MapActivity mapActivity, final Dialog choose) {\n\t\tfinal View setTimeParking = mapActivity.getLayoutInflater().inflate(R.layout.parking_set_time_limit, null);\n\t\tBuilder setTime = new AlertDialog.Builder(mapActivity);\n\t\tsetTime.setView(setTimeParking);\n\t\tsetTime.setTitle(mapActivity.getString(R.string.osmand_parking_time_limit_title));\n\t\tsetTime.setNegativeButton(R.string.default_buttons_cancel, null);\n\t\tfinal TextView  textView = (TextView) setTimeParking.findViewById(R.id.parkTime);\n\t\tfinal TimePicker timePicker = (TimePicker) setTimeParking.findViewById(R.id.parking_time_picker);\n\n\t\ttimePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {\n\t\t\tprivate static final int TIME_PICKER_INTERVAL = 5;\n\t\t\tprivate boolean mIgnoreEvent = false;\n            private Calendar cal = Calendar.getInstance();\n\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onTimeChanged(TimePicker timePicker, int hourOfDay, int minute) {\n                if (mIgnoreEvent) {\n                    return;\n                }\n                if (minute % TIME_PICKER_INTERVAL != 0) {\n                    int minuteFloor = minute - (minute % TIME_PICKER_INTERVAL);\n                    minute = minuteFloor + (minute == minuteFloor + 1 ? TIME_PICKER_INTERVAL : 0);\n                    if (minute == 60) {\n                        minute = 0;\n                    }\n                    mIgnoreEvent = true;\n                    timePicker.setCurrentMinute(minute);\n                    mIgnoreEvent = false;\n                }\n                long timeInMillis = cal.getTimeInMillis() + hourOfDay * 60 * 60 * 1000 + minute * 60 * 1000;\n                textView.setText(mapActivity.getString(R.string.osmand_parking_position_description_add)\n                        + \" \" + parkingLayer.getFormattedTime(timeInMillis));\n\n            }\n        });\n\t\t\n\t\t\n\t\t//to set the same 24-hour or 12-hour mode as it is set in the device\n\t\ttimePicker.setIs24HourView(true);\n\t\ttimePicker.setCurrentHour(0);\n\t\ttimePicker.setCurrentMinute(0);\n\t\t\n\t\tsetTime.setPositiveButton(R.string.default_buttons_ok, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\tchoose.dismiss();\n\t\t\t\tCalendar cal = Calendar.getInstance();\n\t\t\t\tint hour = cal.get(Calendar.HOUR_OF_DAY );\n\t\t\t\tint minute = cal.get(Calendar.MINUTE);\n                cal.add(Calendar.HOUR_OF_DAY, timePicker.getCurrentHour());\n                cal.add(Calendar.MINUTE, timePicker.getCurrentMinute());\n\t\t\t\tsetParkingTime(cal.getTimeInMillis());\n\t\t\t\tCheckBox addCalendarEvent = (CheckBox) setTimeParking.findViewById(R.id.check_event_in_calendar);\n\t\t\t\tif (addCalendarEvent.isChecked()) {\n\t\t\t\t\taddCalendarEvent(setTimeParking);\n\t\t\t\t\taddOrRemoveParkingEvent(true);\n\t\t\t\t} else {\n\t\t\t\t\taddOrRemoveParkingEvent(false);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tsetTime.create();\n\t\tsetTime.show();\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public LatLon getParkingPosition() {\n\t\tfloat lat = parkingLat.get();\n\t\tfloat lon = parkingLon.get();\n\t\tif (lat == 0 && lon == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new LatLon(lat, lon);\n\t}","id":64101,"modified_method":"public LatLon constructParkingPosition() {\n\t\tfloat lat = parkingLat.get();\n\t\tfloat lon = parkingLon.get();\n\t\tif (lat == 0 && lon == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new LatLon(lat, lon);\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void registerMapContextMenuActions(final MapActivity mapActivity,\n\t\t\tfinal double latitude, final double longitude,\n\t\t\tContextMenuAdapter adapter, Object selectedObj) {\n\t\tboolean isParkingSelected = false;\n\t\tLatLon parkingPosition = getParkingPosition();\n\t\tif (selectedObj instanceof LatLon && parkingLayer != null && parkingPosition != null) {\n\t\t\tLatLon point = (LatLon)selectedObj;\t\n\t\t\tif ((point.getLatitude() == parkingPosition.getLatitude()) && (point.getLongitude() == parkingPosition.getLongitude()))\n\t\t\t\tisParkingSelected = true;\n\t\t}\n\t\tif (isParkingSelected) {\n\t\t\tOnContextMenuClick removeListener = new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif ((resId == R.string.context_menu_item_delete_parking_point)) {\n\t\t\t\t\t\tshowDeleteDialog(mapActivity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (parkingPosition != null)\n\t\t\t\tadapter.item(R.string.context_menu_item_delete_parking_point)\n\t\t\t\t.icons( R.drawable.ic_action_remove_dark, R.drawable.ic_action_remove_light).listen(removeListener).position(0).reg();\n\t\t}\n\t\t\n\t\tOnContextMenuClick addListener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_add_parking_point) {\n\t\t\t\t\tshowAddParkingDialog(mapActivity, latitude, longitude);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tadapter.item(R.string.context_menu_item_add_parking_point)\n\t\t.icons( R.drawable.ic_action_parking_dark, R.drawable.ic_action_parking_light).listen(addListener).reg();\n\t\t\n\t}","id":64102,"modified_method":"@Override\n\tpublic void registerMapContextMenuActions(final MapActivity mapActivity,\n\t\t\tfinal double latitude, final double longitude,\n\t\t\tContextMenuAdapter adapter, Object selectedObj) {\n\t\tboolean isParkingSelected = false;\n\t\tif (selectedObj == parkingPosition && parkingPosition != null) {\n\t\t\tOnContextMenuClick removeListener = new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif ((resId == R.string.context_menu_item_delete_parking_point)) {\n\t\t\t\t\t\tshowDeleteDialog(mapActivity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tadapter.item(R.string.context_menu_item_delete_parking_point)\n\t\t\t\t.icons( R.drawable.ic_action_remove_dark, R.drawable.ic_action_remove_light).listen(removeListener).position(0).reg();\n\t\t}\n\t\t\n\t\tOnContextMenuClick addListener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_add_parking_point) {\n\t\t\t\t\tshowAddParkingDialog(mapActivity, latitude, longitude);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tadapter.item(R.string.context_menu_item_add_parking_point)\n\t\t.icons( R.drawable.ic_action_parking_dark, R.drawable.ic_action_parking_light).listen(addListener).reg();\n\t\t\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void registerOptionsMenuItems(final MapActivity mapActivity, ContextMenuAdapter helper) {\n\t\tif (parkingLayer != null) {\n\t\t\tif (getParkingPosition() != null) {\n\t\t\t\thelper.item(R.string.osmand_parking_delete)\n\t\t\t\t\t.icons( R.drawable.ic_action_remove_dark, R.drawable.ic_action_remove_light).listen(new OnContextMenuClick() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\t\tshowDeleteDialog(mapActivity);\n\t\t\t\t\t}\n\n\t\t\t\t}).reg();\n\t\t\t}\n\t\t}\n\t}","id":64103,"modified_method":"@Override\n\tpublic void registerOptionsMenuItems(final MapActivity mapActivity, ContextMenuAdapter helper) {\n\t\tif (parkingLayer != null && parkingPosition != null) {\n            helper.item(R.string.osmand_parking_delete)\n                    .icons(R.drawable.ic_action_remove_dark, R.drawable.ic_action_remove_light).listen(new OnContextMenuClick() {\n                @Override\n                public void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n                    showDeleteDialog(mapActivity);\n                }\n\n            }).reg();\n        }\n    }","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n\t * @return the control to be added on a MapInfoLayer \n\t * that shows a distance between \n\t * the current position on the map \n\t * and the location of the parked car\n\t */\n\tprivate TextInfoWidget createParkingPlaceInfoControl(final MapActivity map, Paint paintText, Paint paintSubText) {\n\t\tTextInfoWidget parkingPlaceControl = new TextInfoWidget(map, 0, paintText, paintSubText) {\n\t\t\tprivate float[] calculations = new float[1];\n\t\t\tprivate int cachedMeters = 0;\t\t\t\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean updateInfo(DrawSettings drawSettings) {\n\t\t\t\tLatLon parkingPoint = parkingLayer.getParkingPoint();\n\t\t\t\tif( parkingPoint != null && !map.getRoutingHelper().isFollowingMode()) {\n\t\t\t\t\tOsmandMapTileView view = map.getMapView();\n\t\t\t\t\tint d = 0;\n\t\t\t\t\tif (d == 0) {\n\t\t\t\t\t\tnet.osmand.Location.distanceBetween(view.getLatitude(), view.getLongitude(), parkingPoint.getLatitude(), parkingPoint.getLongitude(), calculations);\n\t\t\t\t\t\td = (int) calculations[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (distChanged(cachedMeters, d)) {\n\t\t\t\t\t\tcachedMeters = d;\n\t\t\t\t\t\tif (cachedMeters <= 20) {\n\t\t\t\t\t\t\tcachedMeters = 0;\n\t\t\t\t\t\t\tsetText(null, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tString ds = OsmAndFormatter.getFormattedDistance(cachedMeters, map.getMyApplication());\n\t\t\t\t\t\t\tint ls = ds.lastIndexOf(' ');\n\t\t\t\t\t\t\tif (ls == -1) {\n\t\t\t\t\t\t\t\tsetText(ds, null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetText(ds.substring(0, ls), ds.substring(ls + 1));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (cachedMeters != 0) {\n\t\t\t\t\tcachedMeters = 0;\n\t\t\t\t\tsetText(null, null);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\t\t\n\t\t\t\n\t\t\t/**\n\t\t\t * Utility method.\n\t\t\t * @param oldDist\n\t\t\t * @param dist\n\t\t\t * @return\n\t\t\t */\n\t\t\tprivate boolean distChanged(int oldDist, int dist){\n\t\t\t\tif(oldDist != 0 && Math.abs(oldDist - dist) < 30){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\tparkingPlaceControl.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tOsmandMapTileView view = map.getMapView();\n\t\t\t\tAnimateDraggingMapThread thread = view.getAnimatedDraggingThread();\n\t\t\t\tLatLon parkingPoint = getParkingPosition();\n\t\t\t\tif (parkingPoint != null) {\n\t\t\t\t\tfloat fZoom = view.getFloatZoom() < 15 ? 15 : view.getFloatZoom();\n\t\t\t\t\tthread.startMoving(parkingPoint.getLatitude(), parkingPoint.getLongitude(), fZoom, true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tparkingPlaceControl.setText(null, null);\n\t\tparkingPlaceControl.setImageDrawable(map.getResources().getDrawable(R.drawable.widget_parking));\n\t\treturn parkingPlaceControl;\n\t}","id":64104,"modified_method":"/**\n\t * @return the control to be added on a MapInfoLayer \n\t * that shows a distance between \n\t * the current position on the map \n\t * and the location of the parked car\n\t */\n\tprivate TextInfoWidget createParkingPlaceInfoControl(final MapActivity map, Paint paintText, Paint paintSubText) {\n\t\tTextInfoWidget parkingPlaceControl = new TextInfoWidget(map, 0, paintText, paintSubText) {\n\t\t\tprivate float[] calculations = new float[1];\n\t\t\tprivate int cachedMeters = 0;\t\t\t\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean updateInfo(DrawSettings drawSettings) {\n\t\t\t\tLatLon parkingPoint = parkingLayer.getParkingPoint();\n\t\t\t\tif( parkingPoint != null && !map.getRoutingHelper().isFollowingMode()) {\n\t\t\t\t\tOsmandMapTileView view = map.getMapView();\n\t\t\t\t\tint d = 0;\n\t\t\t\t\tif (d == 0) {\n\t\t\t\t\t\tnet.osmand.Location.distanceBetween(view.getLatitude(), view.getLongitude(), parkingPoint.getLatitude(), parkingPoint.getLongitude(), calculations);\n\t\t\t\t\t\td = (int) calculations[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (distChanged(cachedMeters, d)) {\n\t\t\t\t\t\tcachedMeters = d;\n\t\t\t\t\t\tif (cachedMeters <= 20) {\n\t\t\t\t\t\t\tcachedMeters = 0;\n\t\t\t\t\t\t\tsetText(null, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tString ds = OsmAndFormatter.getFormattedDistance(cachedMeters, map.getMyApplication());\n\t\t\t\t\t\t\tint ls = ds.lastIndexOf(' ');\n\t\t\t\t\t\t\tif (ls == -1) {\n\t\t\t\t\t\t\t\tsetText(ds, null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetText(ds.substring(0, ls), ds.substring(ls + 1));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (cachedMeters != 0) {\n\t\t\t\t\tcachedMeters = 0;\n\t\t\t\t\tsetText(null, null);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\t\t\n\t\t\t\n\t\t\t/**\n\t\t\t * Utility method.\n\t\t\t * @param oldDist\n\t\t\t * @param dist\n\t\t\t * @return\n\t\t\t */\n\t\t\tprivate boolean distChanged(int oldDist, int dist){\n\t\t\t\tif(oldDist != 0 && Math.abs(oldDist - dist) < 30){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\tparkingPlaceControl.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tOsmandMapTileView view = map.getMapView();\n\t\t\t\tAnimateDraggingMapThread thread = view.getAnimatedDraggingThread();\n\t\t\t\tLatLon parkingPoint = parkingPosition;\n\t\t\t\tif (parkingPoint != null) {\n\t\t\t\t\tfloat fZoom = view.getFloatZoom() < 15 ? 15 : view.getFloatZoom();\n\t\t\t\t\tthread.startMoving(parkingPoint.getLatitude(), parkingPoint.getLongitude(), fZoom, true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tparkingPlaceControl.setText(null, null);\n\t\tparkingPlaceControl.setImageDrawable(map.getResources().getDrawable(R.drawable.widget_parking));\n\t\treturn parkingPlaceControl;\n\t}","commit_id":"09e1c6589a420015fe7a1d539b4982d10807d295","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void selectMapOverlayLayer(@NonNull final OsmandMapTileView mapView,\n\t\t\t\t\t\t\t\t\t  @NonNull final CommonPreference<String> mapPref,\n\t\t\t\t\t\t\t\t\t  @NonNull final MapActivity activity,\n\t\t\t\t\t\t\t\t\t  @Nullable final OnMapSelectedCallback callback) {\n\t\tfinal OsmandSettings settings = app.getSettings();\n\t\tfinal MapActivityLayers layers = activity.getMapLayers();\n\t\tMap<String, String> entriesMap = settings.getTileSourceEntries();\n\t\tfinal ArrayList<String> keys = new ArrayList<String>(entriesMap.keySet());\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(activity);\n\t\tfinal String[] items = new String[entriesMap.size() + 1];\n\t\tint i = 0;\n\t\tfor (String it : entriesMap.values()) {\n\t\t\titems[i++] = it;\n\t\t}\n\n\t\titems[i] = app.getString(R.string.install_more);\n\t\tbuilder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\tif (which == items.length - 1) {\n\t\t\t\t\tinstallMapLayers(activity, new ResultMatcher<TileSourceTemplate>() {\n\t\t\t\t\t\tTileSourceTemplate template = null;\n\t\t\t\t\t\tint count = 0;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean publish(TileSourceTemplate object) {\n\t\t\t\t\t\t\tif (object == null) {\n\t\t\t\t\t\t\t\tif (count == 1) {\n\t\t\t\t\t\t\t\t\tmapPref.set(template.getName());\n\t\t\t\t\t\t\t\t\tif (callback != null) {\n\t\t\t\t\t\t\t\t\t\tcallback.onMapSelected();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tupdateMapLayers(mapView, mapPref, layers);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tselectMapOverlayLayer(mapView, mapPref, activity, null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\ttemplate = object;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tmapPref.set(keys.get(which));\n\t\t\t\t\tif (callback != null) {\n\t\t\t\t\t\tcallback.onMapSelected();\n\t\t\t\t\t}\n\t\t\t\t\tupdateMapLayers(mapView, mapPref, layers);\n\t\t\t\t}\n\t\t\t\tdialog.dismiss();\n\t\t\t}\n\n\t\t});\n\t\tbuilder.show();\n\t}","id":64105,"modified_method":"public void selectMapOverlayLayer(@NonNull final OsmandMapTileView mapView,\n\t\t\t\t\t\t\t\t\t  @NonNull final CommonPreference<String> mapPref,\n\t\t\t\t\t\t\t\t\t  @NonNull final MapActivity activity,\n\t\t\t\t\t\t\t\t\t  @Nullable final OnMapSelectedCallback callback) {\n\t\tfinal OsmandSettings settings = app.getSettings();\n\t\tfinal MapActivityLayers layers = activity.getMapLayers();\n\t\tMap<String, String> entriesMap = settings.getTileSourceEntries();\n\t\tfinal ArrayList<String> keys = new ArrayList<String>(entriesMap.keySet());\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(activity);\n\t\tfinal String[] items = new String[entriesMap.size() + 1];\n\t\tint i = 0;\n\t\tfor (String it : entriesMap.values()) {\n\t\t\titems[i++] = it;\n\t\t}\n\n\t\titems[i] = app.getString(R.string.install_more);\n\t\tbuilder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\tif (which == items.length - 1) {\n\t\t\t\t\tinstallMapLayers(activity, new ResultMatcher<TileSourceTemplate>() {\n\t\t\t\t\t\tTileSourceTemplate template = null;\n\t\t\t\t\t\tint count = 0;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean publish(TileSourceTemplate object) {\n\t\t\t\t\t\t\tif (object == null) {\n\t\t\t\t\t\t\t\tif (count == 1) {\n\t\t\t\t\t\t\t\t\tmapPref.set(template.getName());\n\t\t\t\t\t\t\t\t\tif (callback != null) {\n\t\t\t\t\t\t\t\t\t\tcallback.onMapSelected();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tupdateMapLayers(mapView, mapPref, layers);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tselectMapOverlayLayer(mapView, mapPref, activity, null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\ttemplate = object;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tmapPref.set(keys.get(which));\n\t\t\t\t\tif (callback != null) {\n\t\t\t\t\t\tcallback.onMapSelected();\n\t\t\t\t\t}\n\t\t\t\t\tupdateMapLayers(mapView, mapPref, layers);\n\t\t\t\t}\n\t\t\t\tdialog.dismiss();\n\t\t\t}\n\n\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null)\n\t\t\t\t.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\t\tcallback.onMapSelected();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tbuilder.show();\n\t}","commit_id":"d621d6e7d3e2380d36b3ebd82a32569ecb13f468","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void registerLayerContextMenuActions(final OsmandMapTileView mapView,\n\t\t\t\t\t\t\t\t\t\t\t\tContextMenuAdapter adapter,\n\t\t\t\t\t\t\t\t\t\t\t\tfinal MapActivity mapActivity) {\n\t\tfinal MapActivityLayers layers = mapActivity.getMapLayers();\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(ArrayAdapter<?> adapter, int itemId, int pos, boolean isChecked) {\n\t\t\t\tif (itemId == R.string.layer_map) {\n\t\t\t\t\tlayers.selectMapLayer(mapView);\n\t\t\t\t} else if (itemId == R.string.layer_overlay) {\n\t\t\t\t\tmapActivity.getDashboard().setDashboardVisibility(true, DashboardType.OVERLAY_MAP);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (itemId == R.string.layer_underlay) {\n\t\t\t\t\tmapActivity.getDashboard().setDashboardVisibility(true, DashboardType.UNDERLAY_MAP);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tadapter.item(R.string.layer_overlay).\n\t\t\t\ticonColor(R.drawable.ic_layer_top_dark).listen(listener).position(14).reg();\n\t\tadapter.item(R.string.layer_underlay)\n\t\t\t\t.iconColor(R.drawable.ic_layer_bottom_dark).listen(listener).position(15).reg();\n\t}","id":64106,"modified_method":"@Override\n\tpublic void registerLayerContextMenuActions(final OsmandMapTileView mapView,\n\t\t\t\t\t\t\t\t\t\t\t\tContextMenuAdapter adapter,\n\t\t\t\t\t\t\t\t\t\t\t\tfinal MapActivity mapActivity) {\n\t\tfinal MapActivityLayers layers = mapActivity.getMapLayers();\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(ArrayAdapter<?> adapter, int itemId, int pos, boolean isChecked) {\n\t\t\t\tOsmandSettings settings = mapActivity.getMyApplication().getSettings();\n\t\t\t\tif (itemId == R.string.layer_map) {\n\t\t\t\t\tlayers.selectMapLayer(mapView);\n\t\t\t\t} else if (itemId == R.string.layer_overlay) {\n\t\t\t\t\tmapActivity.getDashboard().setDashboardVisibility(true, DashboardType.OVERLAY_MAP);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (itemId == R.string.layer_underlay) {\n\t\t\t\t\tmapActivity.getDashboard().setDashboardVisibility(true, DashboardType.UNDERLAY_MAP);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tString overlayMapDescr = settings.MAP_OVERLAY.get();\n\t\toverlayMapDescr = overlayMapDescr != null ? overlayMapDescr : mapActivity.getString(R.string.shared_string_none);\n\t\tadapter.item(R.string.layer_overlay).layout(R.layout.two_line_list_item).description(overlayMapDescr)\n\t\t\t\t.iconColor(R.drawable.ic_layer_top_dark).listen(listener).position(14).reg();\n\t\tString underlayMapDescr = settings.MAP_UNDERLAY.get();\n\t\tunderlayMapDescr = underlayMapDescr != null ? underlayMapDescr : mapActivity.getString(R.string.shared_string_none);\n\t\tadapter.item(R.string.layer_underlay).layout(R.layout.two_line_list_item).description(underlayMapDescr)\n\t\t\t\t.iconColor(R.drawable.ic_layer_bottom_dark).listen(listener).position(15).reg();\n\t}","commit_id":"d621d6e7d3e2380d36b3ebd82a32569ecb13f468","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private static void createLayersItems(final ContextMenuAdapter contextMenuAdapter,\n\t\t\t\t\t\t\t\t\t\t  final MapActivity mapActivity,\n\t\t\t\t\t\t\t\t\t\t  final OsmandRasterMapsPlugin.RasterMapType type) {\n\t\tOsmandApplication app = mapActivity.getMyApplication();\n\t\tfinal OsmandSettings settings = app.getSettings();\n\t\tfinal OsmandRasterMapsPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmandRasterMapsPlugin.class);\n\t\tfinal MapTileLayer rasterMapLayer;\n\t\tfinal OsmandSettings.CommonPreference<Integer> mapTransparencyPreference;\n\t\tfinal OsmandSettings.CommonPreference<String> mapTypePreference;\n\t\t@StringRes final int mapTypeString;\n\t\t@StringRes final int mapTypeStringTransparency;\n\t\tif (type == OsmandRasterMapsPlugin.RasterMapType.OVERLAY) {\n\t\t\trasterMapLayer = plugin.getOverlayLayer();\n\t\t\tmapTransparencyPreference = settings.MAP_OVERLAY_TRANSPARENCY;\n\t\t\tmapTypePreference = settings.MAP_OVERLAY;\n\t\t\tmapTypeString = R.string.map_overlay;\n\t\t\tmapTypeStringTransparency = R.string.overlay_transparency;\n\t\t} else if (type == OsmandRasterMapsPlugin.RasterMapType.UNDERLAY){\n\t\t\trasterMapLayer = plugin.getUnderlayLayer();\n\t\t\tmapTransparencyPreference = settings.MAP_TRANSPARENCY;\n\t\t\tmapTypePreference = settings.MAP_UNDERLAY;\n\t\t\tmapTypeString = R.string.map_underlay;\n\t\t\tmapTypeStringTransparency = R.string.map_transparency;\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Unexpected raster map type\");\n\t\t}\n\t\tfinal OsmandSettings.CommonPreference<Boolean> hidePolygonsPref =\n\t\t\t\tmapActivity.getMyApplication().getSettings().getCustomRenderBooleanProperty(\"noPolygons\");\n\t\tContextMenuAdapter.OnRowItemClick l = new ContextMenuAdapter.OnRowItemClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onRowItemClick(ArrayAdapter<?> adapter, View view, int itemId, int pos) {\n\t\t\t\tLog.v(TAG, \"onRowItemClick(\" + \"adapter=\" + adapter + \", view=\" + view + \", itemId=\" + itemId + \", pos=\" + pos + \")\");\n\t\t\t\treturn super.onRowItemClick(adapter, view, itemId, pos);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(final ArrayAdapter<?> adapter,\n\t\t\t\t\t\t\t\t\t\t\t  int itemId, int pos, boolean isChecked) {\n\t\t\t\tLog.v(TAG, \"onContextMenuClick(\" + \"adapter=\" + adapter + \", itemId=\" + itemId + \", pos=\" + pos + \", isChecked=\" + isChecked + \")\");\n\t\t\t\tif (itemId == R.string.shared_string_show) {\n\t\t\t\t\tMapActivityLayers mapLayers = mapActivity.getMapLayers();\n\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\tmapLayers.getMapControlsLayer().showTransparencyBar(mapTransparencyPreference);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmapLayers.getMapControlsLayer().hideTransparencyBar(mapTransparencyPreference);\n\t\t\t\t\t}\n\t\t\t\t\tplugin.toggleUnderlayState(mapActivity, type, new OsmandRasterMapsPlugin.OnMapSelectedCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onMapSelected() {\n\t\t\t\t\t\t\tmapActivity.getDashboard().refreshContent(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (itemId == R.string.show_polygons) {\n\t\t\t\t\thidePolygonsPref.set(!isChecked);\n\t\t\t\t\trefreshMapComplete(mapActivity);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\tint selected = mapTypePreference.get() != null ? 1 : 0;\n\t\tcontextMenuAdapter.item(R.string.shared_string_show).listen(l).selected(selected).reg();\n\t\t// String appMode = \" [\" + settings.getApplicationMode().toHumanString(view.getApplication()) +\"] \";\n\t\tContextMenuAdapter.OnIntegerValueChangedListener integerListener =\n\t\t\t\tnew ContextMenuAdapter.OnIntegerValueChangedListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onIntegerValueChangedListener(int newValue) {\n\t\t\t\t\t\tmapTransparencyPreference.set(newValue);\n\t\t\t\t\t\tmapActivity.getMapView().refreshMap();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t// android:max=\"255\" in layout is expected\n\t\tcontextMenuAdapter.item(mapTypeStringTransparency).layout(R.layout.progress_list_item)\n\t\t\t\t.progress(mapTransparencyPreference.get()).listenInteger(integerListener).reg();\n\t\tcontextMenuAdapter.item(mapTypeString).layout(R.layout.two_line_list_item).description(mapTypePreference.get()).reg();\n\t\tcontextMenuAdapter.item(R.string.show_polygons).listen(l).selected(hidePolygonsPref.get() ? 0 : 1).reg();\n\t}","id":64107,"modified_method":"private static void createLayersItems(final ContextMenuAdapter contextMenuAdapter,\n\t\t\t\t\t\t\t\t\t\t  final MapActivity mapActivity,\n\t\t\t\t\t\t\t\t\t\t  final OsmandRasterMapsPlugin.RasterMapType type) {\n\t\tOsmandApplication app = mapActivity.getMyApplication();\n\t\tfinal OsmandSettings settings = app.getSettings();\n\t\tfinal OsmandRasterMapsPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmandRasterMapsPlugin.class);\n\t\tfinal MapTileLayer rasterMapLayer;\n\t\tfinal OsmandSettings.CommonPreference<Integer> mapTransparencyPreference;\n\t\tfinal OsmandSettings.CommonPreference<String> mapTypePreference;\n\t\t@StringRes final int mapTypeString;\n\t\t@StringRes final int mapTypeStringTransparency;\n\t\tif (type == OsmandRasterMapsPlugin.RasterMapType.OVERLAY) {\n\t\t\trasterMapLayer = plugin.getOverlayLayer();\n\t\t\tmapTransparencyPreference = settings.MAP_OVERLAY_TRANSPARENCY;\n\t\t\tmapTypePreference = settings.MAP_OVERLAY;\n\t\t\tmapTypeString = R.string.map_overlay;\n\t\t\tmapTypeStringTransparency = R.string.overlay_transparency;\n\t\t} else if (type == OsmandRasterMapsPlugin.RasterMapType.UNDERLAY){\n\t\t\trasterMapLayer = plugin.getUnderlayLayer();\n\t\t\tmapTransparencyPreference = settings.MAP_TRANSPARENCY;\n\t\t\tmapTypePreference = settings.MAP_UNDERLAY;\n\t\t\tmapTypeString = R.string.map_underlay;\n\t\t\tmapTypeStringTransparency = R.string.map_transparency;\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Unexpected raster map type\");\n\t\t}\n\t\tfinal OsmandSettings.CommonPreference<Boolean> hidePolygonsPref =\n\t\t\t\tmapActivity.getMyApplication().getSettings().getCustomRenderBooleanProperty(\"noPolygons\");\n\n\t\tString mapTypeDescr = mapTypePreference.get();\n\t\tboolean selected = mapTypeDescr != null;\n\t\tfinal int toggleActionStringId = selected ? R.string.shared_string_enable\n\t\t\t\t: R.string.shared_string_disable;\n\n\t\tContextMenuAdapter.OnRowItemClick l = new ContextMenuAdapter.OnRowItemClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onRowItemClick(ArrayAdapter<?> adapter, View view, int itemId, int pos) {\n\t\t\t\tLog.v(TAG, \"onRowItemClick(\" + \"adapter=\" + adapter + \", view=\" + view + \", itemId=\" + itemId + \", pos=\" + pos + \")\");\n\t\t\t\treturn super.onRowItemClick(adapter, view, itemId, pos);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(final ArrayAdapter<?> adapter,\n\t\t\t\t\t\t\t\t\t\t\t  int itemId, int pos, boolean isChecked) {\n\t\t\t\tLog.v(TAG, \"onContextMenuClick(\" + \"adapter=\" + adapter + \", itemId=\" + itemId + \", pos=\" + pos + \", isChecked=\" + isChecked + \")\");\n\t\t\t\tif (itemId == toggleActionStringId) {\n\t\t\t\t\tMapActivityLayers mapLayers = mapActivity.getMapLayers();\n\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\tmapLayers.getMapControlsLayer().showTransparencyBar(mapTransparencyPreference);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmapLayers.getMapControlsLayer().hideTransparencyBar(mapTransparencyPreference);\n\t\t\t\t\t}\n\t\t\t\t\tplugin.toggleUnderlayState(mapActivity, type, new OsmandRasterMapsPlugin.OnMapSelectedCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onMapSelected() {\n\t\t\t\t\t\t\tmapActivity.getDashboard().refreshContent(true);\n\t\t\t\t\t\t\tif (type == OsmandRasterMapsPlugin.RasterMapType.UNDERLAY) {\n\t\t\t\t\t\t\t\tToast.makeText(mapActivity, R.string.consider_turning_polygons_off, Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (itemId == R.string.show_polygons) {\n\t\t\t\t\thidePolygonsPref.set(!isChecked);\n\t\t\t\t\trefreshMapComplete(mapActivity);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\tint selectedCode = selected ? 1 : 0;\n\t\tmapTypeDescr = selected ? mapTypeDescr : mapActivity.getString(R.string.shared_string_none);\n\t\tcontextMenuAdapter.item(toggleActionStringId).listen(l).selected(selectedCode).reg();\n\t\tcontextMenuAdapter.item(mapTypeString).layout(R.layout.two_line_list_item).description(mapTypeDescr).reg();\n\t\tContextMenuAdapter.OnIntegerValueChangedListener integerListener =\n\t\t\t\tnew ContextMenuAdapter.OnIntegerValueChangedListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onIntegerValueChangedListener(int newValue) {\n\t\t\t\t\t\tmapTransparencyPreference.set(newValue);\n\t\t\t\t\t\tmapActivity.getMapView().refreshMap();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t// android:max=\"255\" in layout is expected\n\t\tcontextMenuAdapter.item(mapTypeStringTransparency).layout(R.layout.progress_list_item)\n\t\t\t\t.progress(mapTransparencyPreference.get()).listenInteger(integerListener).reg();\n\t\tif(type == OsmandRasterMapsPlugin.RasterMapType.UNDERLAY) {\n\t\t\tcontextMenuAdapter.item(R.string.show_polygons).listen(l).selected(hidePolygonsPref.get() ? 0 : 1).reg();\n\t\t}\n\t}","commit_id":"d621d6e7d3e2380d36b3ebd82a32569ecb13f468","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static boolean shouldReportParameterNameOverrideWarning(\n            @NotNull ValueParameterDescriptor parameterFromSubclass,\n            @NotNull ValueParameterDescriptor parameterFromSuperclass\n    ) {\n        DeclarationDescriptor subFunction = parameterFromSubclass.getContainingDeclaration();\n        DeclarationDescriptor superFunction = parameterFromSuperclass.getContainingDeclaration();\n        return subFunction instanceof CallableDescriptor && ((CallableDescriptor) subFunction).hasStableParameterNames() &&\n               superFunction instanceof CallableDescriptor && ((CallableDescriptor) superFunction).hasStableParameterNames() &&\n               !parameterFromSuperclass.getName().equals(parameterFromSubclass.getName());\n    }","id":64108,"modified_method":"public static boolean shouldReportParameterNameOverrideWarning(\n            @NotNull ValueParameterDescriptor parameterFromSubclass,\n            @NotNull ValueParameterDescriptor parameterFromSuperclass\n    ) {\n        return parameterFromSubclass.getContainingDeclaration().hasStableParameterNames() &&\n               parameterFromSuperclass.getContainingDeclaration().hasStableParameterNames() &&\n               !parameterFromSuperclass.getName().equals(parameterFromSubclass.getName());\n    }","commit_id":"47439603bb3a52890ccfe6689f3969b840be0e91","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void generateEnumClassObjectMethods(@NotNull Collection<? super FunctionDescriptor> result, @NotNull Name name) {\n        DeclarationDescriptor containingDeclaration = thisDescriptor.getContainingDeclaration();\n        if (!(containingDeclaration instanceof ClassDescriptor)) return;\n        ClassDescriptor classDescriptor = (ClassDescriptor) containingDeclaration;\n        if (classDescriptor.getClassObjectDescriptor() != thisDescriptor) return;\n        if (classDescriptor.getKind() != ClassKind.ENUM_CLASS) return;\n\n        if (name.equals(DescriptorResolver.VALUES_METHOD_NAME)) {\n            SimpleFunctionDescriptor valuesMethod = DescriptorResolver\n                    .createEnumClassObjectValuesMethod(classDescriptor, resolveSession.getTrace());\n            result.add(valuesMethod);\n        }\n        else if (name.equals(DescriptorResolver.VALUE_OF_METHOD_NAME)) {\n            SimpleFunctionDescriptor valueOfMethod = DescriptorResolver.createEnumClassObjectValueOfMethod(classDescriptor,\n                                                                                                    resolveSession.getTrace());\n            result.add(valueOfMethod);\n        }\n    }","id":64109,"modified_method":"private void generateEnumClassObjectMethods(@NotNull Collection<? super FunctionDescriptor> result, @NotNull Name name) {\n        if (!isEnumClassObject()) return;\n\n        ClassDescriptor classDescriptor = (ClassDescriptor) thisDescriptor.getContainingDeclaration();\n\n        if (name.equals(DescriptorResolver.VALUES_METHOD_NAME)) {\n            SimpleFunctionDescriptor valuesMethod = DescriptorResolver\n                    .createEnumClassObjectValuesMethod(classDescriptor, resolveSession.getTrace());\n            result.add(valuesMethod);\n        }\n        else if (name.equals(DescriptorResolver.VALUE_OF_METHOD_NAME)) {\n            SimpleFunctionDescriptor valueOfMethod = DescriptorResolver\n                    .createEnumClassObjectValueOfMethod(classDescriptor, resolveSession.getTrace());\n            result.add(valueOfMethod);\n        }\n    }","commit_id":"734a9a02ef244b73005d5d17b9fe0952c494f868","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public String getMPSTooltipText(MouseEvent mouseEvent) {\n    synchronized (this) {\n      ensureBoundsCalculated();\n      final Point p = mouseEvent.getPoint();\n      IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> group = MapSequence.fromMap(myGroupsWithBounds).findFirst(new IWhereFilter<IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>>>() {\n        public boolean accept(IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> g) {\n          Bounds left = g.value()._0();\n          Bounds right = g.value()._1();\n          int v1 = vectorProduct((int) left.start(), (int) right.start(), p.x, p.y);\n          int v2 = vectorProduct((int) left.end(), (int) right.end(), p.x, p.y);\n          return v1 > 0 && v2 < 0;\n        }\n      });\n      if (group == null) {\n        return null;\n      } else {\n        return \"Found group number \" + ListSequence.fromList(myChangeGroupBuilder.getChangeGroups()).indexOf(group.key());\n      }\n    }\n  }","id":64110,"modified_method":"public String getMPSTooltipText(MouseEvent mouseEvent) {\n    synchronized (this) {\n      ensureBoundsCalculated();\n      final Point p = mouseEvent.getPoint();\n      IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> group = MapSequence.fromMap(myGroupsWithBounds).findFirst(new IWhereFilter<IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>>>() {\n        public boolean accept(IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> g) {\n          Bounds left = g.value()._0();\n          Bounds right = g.value()._1();\n          int v1 = vectorProduct((int) left.start(), (int) right.start(), p.x, p.y);\n          int v2 = vectorProduct((int) left.end(), (int) right.end(), p.x, p.y);\n          return v1 > 0 && v2 < 0;\n        }\n      });\n      if (group == null) {\n        return null;\n      } else {\n        return MapSequence.fromMap(myChangeGroupDescriptions).get(group.key());\n      }\n    }\n  }","commit_id":"9191c42ead9a16cd1bad73641b674c5d6c53d9a2","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void ensureBoundsCalculated() {\n    if (myGroupsWithBounds != null) {\n      return;\n    }\n    myGroupsWithBounds = MapSequence.fromMap(new LinkedHashMap<ChangeGroup, Tuples._2<Bounds, Bounds>>(16, (float) 0.75, false));\n    int leftOffset = getOffset(getLeftViewport());\n    int rightOffset = getOffset(getRightViewport());\n\n    for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n      int leftStart = (int) group.getLeftBounds().start() + leftOffset;\n      int leftEnd = (int) group.getLeftBounds().end() + leftOffset;\n      int rightStart = (int) group.getRightBounds().start() + rightOffset;\n      int rightEnd = (int) group.getRightBounds().end() + rightOffset;\n      MapSequence.fromMap(myGroupsWithBounds).put(group, MultiTuple.<Bounds,Bounds>from(new Bounds(leftStart, leftEnd), new Bounds(rightStart, rightEnd)));\n    }\n  }","id":64111,"modified_method":"private void ensureBoundsCalculated() {\n    if (myGroupsWithBounds != null) {\n      return;\n    }\n    myGroupsWithBounds = MapSequence.fromMap(new LinkedHashMap<ChangeGroup, Tuples._2<Bounds, Bounds>>(16, (float) 0.75, false));\n    int leftOffset = getOffset(getLeftViewport());\n    int rightOffset = getOffset(getRightViewport());\n\n    for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n      int leftStart = (int) group.getLeftBounds().start() + leftOffset;\n      int leftEnd = (int) group.getLeftBounds().end() + leftOffset;\n      int rightStart = (int) group.getRightBounds().start() + rightOffset;\n      int rightEnd = (int) group.getRightBounds().end() + rightOffset;\n      MapSequence.fromMap(myGroupsWithBounds).put(group, MultiTuple.<Bounds,Bounds>from(new Bounds(leftStart, leftEnd), new Bounds(rightStart, rightEnd)));\n    }\n\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        myChangeGroupDescriptions = MapSequence.fromMap(new HashMap<ChangeGroup, String>());\n        for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n          MapSequence.fromMap(myChangeGroupDescriptions).put(group, IterableUtils.join(ListSequence.fromList(group.getChanges()).select(new ISelector<ModelChange, String>() {\n            public String select(ModelChange ch) {\n              return ch.getDescription();\n            }\n          }), \"\\n\\n\"));\n        }\n      }\n    });\n  }","commit_id":"9191c42ead9a16cd1bad73641b674c5d6c53d9a2","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void invalidateAndRepaint() {\n    synchronized (this) {\n      myGroupsWithBounds = null;\n    }\n    repaint();\n  }","id":64112,"modified_method":"private void invalidateAndRepaint() {\n    synchronized (this) {\n      myGroupsWithBounds = null;\n      myChangeGroupDescriptions = null;\n    }\n    repaint();\n  }","commit_id":"9191c42ead9a16cd1bad73641b674c5d6c53d9a2","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public NamedNodeMap getAttributes() {\n        final NamedNodeMapImpl map = new NamedNodeMapImpl();\n        int attr = document.alpha[nodeNumber];\n        if(-1 < attr) {\n            while(attr < document.nextAttr && document.attrParent[attr] == nodeNumber) {\n                map.add(new AttrImpl(document, attr));\n                ++attr;\n            }\n        }\n        // add namespace declarations attached to this element\n        int ns = document.alphaLen[nodeNumber];\n        if(ns < 0) {\n            return (map);\n        }\n        while(ns < document.nextNamespace && document.namespaceParent[ns] == nodeNumber) {\n            final NamespaceNode node = new NamespaceNode(document, ns);\n            map.add(node);\n            ++ns;\n        }\n        return map;\n    }","id":64113,"modified_method":"@Override\n    public NamedNodeMap getAttributes() {\n        final NamedNodeMapImpl map = new NamedNodeMapImpl();\n        int attr = document.alpha[nodeNumber];\n        if(-1 < attr) {\n            while(attr < document.nextAttr && document.attrParent[attr] == nodeNumber) {\n                map.setNamedItem(new AttrImpl(document, attr));\n                ++attr;\n            }\n        }\n        // add namespace declarations attached to this element\n        int ns = document.alphaLen[nodeNumber];\n        if(ns < 0) {\n            return (map);\n        }\n        while(ns < document.nextNamespace && document.namespaceParent[ns] == nodeNumber) {\n            final NamespaceNode node = new NamespaceNode(document, ns);\n            map.setNamedItem(node);\n            ++ns;\n        }\n        return map;\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node setNamedItem(final Node arg) throws DOMException {\n        add(arg);\n        return arg;\n    }","id":64114,"modified_method":"@Override\n    public Node setNamedItem(final Node arg) throws DOMException {\n        return namedNodes.put(new QName(arg.getNodeName()), arg);\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node setNamedItemNS(final Node arg) throws DOMException {\n        return setNamedItem(arg);\n    }","id":64115,"modified_method":"@Override\n    public Node setNamedItemNS(final Node arg) throws DOMException {\n        return namedNodes.put(new QName(arg.getLocalName(), arg.getNamespaceURI()), arg);\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node getNamedItemNS(final String namespaceURI, final String name) {\n        final int i = indexOf(new QName(name, namespaceURI, null));\n        return (i < 0) ? null : get(i);\n    }","id":64116,"modified_method":"@Override\n    public Node getNamedItemNS(final String namespaceURI, final String localName) throws DOMException {\n        return namedNodes.get(new QName(localName, namespaceURI));\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node getNamedItem(final String name) {\n        final int i = indexOf(new QName(name));\n        return (i < 0) ? null : get(i);\n    }","id":64117,"modified_method":"@Override\n    public Node getNamedItem(final String name) {\n        return namedNodes.get(new QName(name));\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node removeNamedItemNS(final String namespaceURI, final String name)\n            throws DOMException {\n        final int i = indexOf(new QName(name, namespaceURI, null));\n        final Node node = get(i);\n        remove(i);\n        return node;\n    }","id":64118,"modified_method":"@Override\n    public Node removeNamedItemNS(final String namespaceURI, final String localName) throws DOMException {\n        return remove(new QName(localName, namespaceURI));\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public int getLength() {\n        return size();\n    }","id":64119,"modified_method":"@Override\n    public int getLength() {\n        return namedNodes.size();\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node item(int index) {\n        if (index < size()) {\n            return get(index);\n        }\n        return null;\n    }","id":64120,"modified_method":"@Override\n    public Node item(final int index) {\n        return namedNodes.get(index);\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Node removeNamedItem(final String name) throws DOMException {\n        final int i = indexOf(new QName(name));\n        final Node node = get(i);\n        remove(i);\n        return node;\n    }","id":64121,"modified_method":"@Override\n    public Node removeNamedItem(final String name) throws DOMException {\n        return remove(new QName(name));\n    }","commit_id":"c9ef5257b1c37788820dcd41e3edb71fa6e90d16","url":"https://github.com/eXist-db/exist"},{"original_method":"public String getMPSTooltipText(MouseEvent mouseEvent) {\n    synchronized (this) {\n      ensureBoundsCalculated();\n      final Point p = mouseEvent.getPoint();\n      IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> group = MapSequence.fromMap(myGroupsWithBounds).findFirst(new IWhereFilter<IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>>>() {\n        public boolean accept(IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> g) {\n          Bounds left = g.value()._0();\n          Bounds right = g.value()._1();\n          int v1 = vectorProduct((int) left.start(), (int) right.start(), p.x, p.y);\n          int v2 = vectorProduct((int) left.end(), (int) right.end(), p.x, p.y);\n          return v1 > 0 && v2 < 0;\n        }\n      });\n      if (group == null) {\n        return null;\n      } else {\n        return \"Found group number \" + ListSequence.fromList(myChangeGroupBuilder.getChangeGroups()).indexOf(group.key());\n      }\n    }\n  }","id":64122,"modified_method":"public String getMPSTooltipText(MouseEvent mouseEvent) {\n    synchronized (this) {\n      ensureBoundsCalculated();\n      final Point p = mouseEvent.getPoint();\n      IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> group = MapSequence.fromMap(myGroupsWithBounds).findFirst(new IWhereFilter<IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>>>() {\n        public boolean accept(IMapping<ChangeGroup, Tuples._2<Bounds, Bounds>> g) {\n          Bounds left = g.value()._0();\n          Bounds right = g.value()._1();\n          int v1 = vectorProduct((int) left.start(), (int) right.start(), p.x, p.y);\n          int v2 = vectorProduct((int) left.end(), (int) right.end(), p.x, p.y);\n          return v1 > 0 && v2 < 0;\n        }\n      });\n      if (group == null) {\n        return null;\n      } else {\n        return MapSequence.fromMap(myChangeGroupDescriptions).get(group.key());\n      }\n    }\n  }","commit_id":"54d151019a913972a4551984593209fb3c7aa0ff","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void ensureBoundsCalculated() {\n    if (myGroupsWithBounds != null) {\n      return;\n    }\n    myGroupsWithBounds = MapSequence.fromMap(new LinkedHashMap<ChangeGroup, Tuples._2<Bounds, Bounds>>(16, (float) 0.75, false));\n    int leftOffset = getOffset(getLeftViewport());\n    int rightOffset = getOffset(getRightViewport());\n\n    for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n      int leftStart = (int) group.getLeftBounds().start() + leftOffset;\n      int leftEnd = (int) group.getLeftBounds().end() + leftOffset;\n      int rightStart = (int) group.getRightBounds().start() + rightOffset;\n      int rightEnd = (int) group.getRightBounds().end() + rightOffset;\n      MapSequence.fromMap(myGroupsWithBounds).put(group, MultiTuple.<Bounds,Bounds>from(new Bounds(leftStart, leftEnd), new Bounds(rightStart, rightEnd)));\n    }\n  }","id":64123,"modified_method":"private void ensureBoundsCalculated() {\n    if (myGroupsWithBounds != null) {\n      return;\n    }\n    myGroupsWithBounds = MapSequence.fromMap(new LinkedHashMap<ChangeGroup, Tuples._2<Bounds, Bounds>>(16, (float) 0.75, false));\n    int leftOffset = getOffset(getLeftViewport());\n    int rightOffset = getOffset(getRightViewport());\n\n    for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n      int leftStart = (int) group.getLeftBounds().start() + leftOffset;\n      int leftEnd = (int) group.getLeftBounds().end() + leftOffset;\n      int rightStart = (int) group.getRightBounds().start() + rightOffset;\n      int rightEnd = (int) group.getRightBounds().end() + rightOffset;\n      MapSequence.fromMap(myGroupsWithBounds).put(group, MultiTuple.<Bounds,Bounds>from(new Bounds(leftStart, leftEnd), new Bounds(rightStart, rightEnd)));\n    }\n\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        myChangeGroupDescriptions = MapSequence.fromMap(new HashMap<ChangeGroup, String>());\n        for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {\n          MapSequence.fromMap(myChangeGroupDescriptions).put(group, IterableUtils.join(ListSequence.fromList(group.getChanges()).select(new ISelector<ModelChange, String>() {\n            public String select(ModelChange ch) {\n              return ch.getDescription();\n            }\n          }), \"\\n\\n\"));\n        }\n      }\n    });\n  }","commit_id":"54d151019a913972a4551984593209fb3c7aa0ff","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void invalidateAndRepaint() {\n    synchronized (this) {\n      myGroupsWithBounds = null;\n    }\n    repaint();\n  }","id":64124,"modified_method":"private void invalidateAndRepaint() {\n    synchronized (this) {\n      myGroupsWithBounds = null;\n      myChangeGroupDescriptions = null;\n    }\n    repaint();\n  }","commit_id":"54d151019a913972a4551984593209fb3c7aa0ff","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void testCompression(String name) {\n    OCompressionFactory.INSTANCE.init();\n\n    long seed = System.currentTimeMillis();\n    System.out.println(name + \" - Compression seed \" + seed);\n\n    Random random = new Random(seed);\n    final int iterationsCount = 1000;\n    long compressedSize = 0;\n    for (int i = 0; i < iterationsCount; i++) {\n      int contentSize = random.nextInt(10 * 1024 - 100) + 100;\n      byte[] content = new byte[contentSize];\n      random.nextBytes(content);\n\n      final OCompression compression = OCompressionFactory.INSTANCE.getCompression(name);\n\n      final byte[] compressedContent = compression.compress(content);\n\n      compressedSize += compressedContent.length;\n\n      Assert.assertEquals(content, compression.uncompress(compressedContent));\n    }\n\n    System.out.println(\"Compression/Decompression test against \" + name + \" took: \" + (System.currentTimeMillis() - seed)\n        + \"ms, total byte size: \" + compressedSize);\n  }","id":64125,"modified_method":"public static void testCompression(String name) {\n    long seed = System.currentTimeMillis();\n    System.out.println(name + \" - Compression seed \" + seed);\n\n    Random random = new Random(seed);\n    final int iterationsCount = 1000;\n    long compressedSize = 0;\n    for (int i = 0; i < iterationsCount; i++) {\n      int contentSize = random.nextInt(10 * 1024 - 100) + 100;\n      byte[] content = new byte[contentSize];\n      random.nextBytes(content);\n\n      OCompression compression = OCompressionFactory.INSTANCE.getCompression(name);\n\n      final byte[] compressedContent = compression.compress(content);\n\n      compressedSize += compressedContent.length;\n\n      Assert.assertEquals(content, compression.uncompress(compressedContent));\n    }\n\n    System.out.println(\"Compression/Decompression test against \" + name + \" took: \" + (System.currentTimeMillis() - seed)\n        + \"ms, total byte size: \" + compressedSize);\n  }","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public byte[] encryptOrDecrypt(final int mode, final byte[] input, final int offset, final int length) throws Throwable {\n    if (!initialized)\n      throw new OSecurityException(\"AES encryption algorithm is not available\");\n\n    cipher.init(mode, theKey);\n\n    final byte[] content;\n    if (offset == 0 && length == input.length) {\n      content = input;\n    } else {\n      content = new byte[length];\n      System.arraycopy(input, offset, content, 0, length);\n    }\n    return cipher.doFinal(content);\n  }","id":64126,"modified_method":"public   byte[] encryptOrDecrypt(int mode, byte[] input, int offset, int length) throws Throwable {\n\t\tif (!initialized) throw new OSecurityException(\"aes-encrypted compression is not available\");\n\t\t\n\t\tSecretKeySpec ks = new SecretKeySpec(key, algorithmName); \n\t\tCipher cipher = Cipher.getInstance(transformation); \n\t\tcipher.init(mode, ks);\n\t\t\n\t\tbyte[] content;\n        if (offset==0 && length==input.length){\n        \tcontent=input;\n        }else{\n        \tcontent = new byte[length];\n\t        System.arraycopy(input,offset,content,0,length);\n        }\n\t\tbyte[] output=cipher.doFinal(content);\n\t\treturn output;\n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OAESCompression() {\n    initialized = false;\n\n    final String configuredKey = OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.getValueAsString();\n\n    if (configuredKey == null)\n      throw new OStorageException(\"AES compression has been selected, but no key was found. Please configure '\"\n          + OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.getKey() + \"' setting or remove AES compression by setting '\"\n          + OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey() + \"=nothing'\");\n\n    try {\n      final byte[] key = OBase64Utils.decode(configuredKey);\n\n      theKey = new SecretKeySpec(key, ALGORITHM_NAME); // AES\n      cipher = Cipher.getInstance(TRANSFORMATION);\n\n    } catch (Exception e) {\n      throw new OSecurityException(\n          \"Cannot initialize AES encryption with current key. Assure the key is a BASE64 - 128 oe 256 bits long\", e);\n\n    }\n\n    this.initialized = true;\n  }","id":64127,"modified_method":"protected OAESCompression(){\n\t\tsuper();\n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testOAESEncryptedCompression() {\n    OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.setValue(\"T1JJRU5UREI=\");\n    OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.setValue(\"T1JJRU5UREJfSVNfQ09PTA==\");\n    testCompression(OAESCompression.NAME);\n  }","id":64128,"modified_method":"public void testOAESEncryptedCompression() {\n    testCompression(OAESCompression.NAME);\n  }","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public byte[] uncompress(final byte[] content, final int offset, final int length) {\n    try {\n      return encryptOrDecrypt(Cipher.DECRYPT_MODE, content, offset, length);\n    } catch (Throwable e) {\n      throw new OSecurityException(\"Cannot decrypt content\", e);\n    }\n  }","id":64129,"modified_method":"@Override\n\tpublic  byte[] uncompress(byte[] content, int offset, int length){\n        try {\n\t        byte[] decriptedContent = encryptOrDecrypt(Cipher.DECRYPT_MODE,content, offset,  length);\n\t        return decriptedContent;\n        } catch (Throwable e) {\n\t\t\tthrow new OSecurityException(e.getMessage(),e);\n\t\t} \n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public byte[] compress(final byte[] content, final int offset, final int length) {\n    try {\n      return encryptOrDecrypt(Cipher.ENCRYPT_MODE, content, offset, length);\n    } catch (Throwable e) {\n      throw new OSecurityException(\"Cannot encrypt content\", e);\n    }\n  }","id":64130,"modified_method":"@Override\n\tpublic  byte[] compress(byte[] content, int offset, int length){\n        try {\n\t        byte[] encriptedContent = encryptOrDecrypt(Cipher.ENCRYPT_MODE,content, offset,  length);\n\t        return encriptedContent;\n        } catch (Throwable e) {\n\t\t\tthrow new OSecurityException(e.getMessage(),e);\n\t\t} \n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OCompression getCompression(final String name) {\n    final OCompression compression = compressions.get(name);\n    if (compression == null)\n      throw new IllegalArgumentException(\"Compression with name '\" + name + \"' is absent.\");\n\n    return compression;\n  }","id":64131,"modified_method":"public OCompression getCompression(String name) {\n    OCompression compression = compressions.get(name);\n    if (compression == null)\n      throw new IllegalArgumentException(\"Compression with name  \" + name + \" is absent.\");\n\n    return compression;\n  }","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OCompressionFactory() {\n    init();\n  }","id":64132,"modified_method":"public OCompressionFactory() {\n    register(OHighZIPCompression.INSTANCE);\n    register(OLowZIPCompression.INSTANCE);\n    register(OGZIPCompression.INSTANCE);\n    register(OSnappyCompression.INSTANCE);\n    register(ONothingCompression.INSTANCE);\n    register(ODESCompression.INSTANCE);\n    register(OAESCompression.INSTANCE);\n  }","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public byte[] encryptOrDecrypt(final int mode, final byte[] input, final int offset, final int length) throws Throwable {\n    if (!initialized)\n      throw new OSecurityException(\"DES encryption algorithm is not available\");\n\n    cipher.init(mode, theKey);\n\n    final byte[] content;\n    if (offset == 0 && length == input.length) {\n      content = input;\n    } else {\n      content = new byte[length];\n      System.arraycopy(input, offset, content, 0, length);\n    }\n    return cipher.doFinal(content);\n  }","id":64133,"modified_method":"public   byte[] encryptOrDecrypt(int mode, byte[] input, int offset, int length) throws Throwable {\n\t\tif (!initialized) throw new OSecurityException(\"des-encrypted compression is not available\");\n\t\t\n\t\tCipher cipher = Cipher.getInstance(transformation); \n\t\tcipher.init(mode,theKey);\n\t\t\n\t\tbyte[] content;\n        if (offset==0 && length==input.length){\n        \tcontent=input;\n        }else{\n        \tcontent = new byte[length];\n\t        System.arraycopy(input,offset,content,0,length);\n        }\n\t\tbyte[] output=cipher.doFinal(content);\n\t\treturn output;\n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public ODESCompression() {\n    initialized = false;\n\n    final String configuredKey = OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.getValueAsString();\n\n    if (configuredKey == null)\n      throw new OStorageException(\"DES compression has been selected, but no key was found. Please configure '\"\n          + OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.getKey() + \"' setting or remove DES compression by setting '\"\n          + OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey() + \"=nothing'\");\n\n    try {\n      final byte[] key = OBase64Utils.decode(configuredKey);\n\n      final DESKeySpec desKeySpec = new DESKeySpec(key);\n      final SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM_NAME);\n\n      theKey = keyFactory.generateSecret(desKeySpec);\n      cipher = Cipher.getInstance(TRANSFORMATION);\n\n    } catch (Exception e) {\n      throw new OSecurityException(\"Cannot initialize DES encryption with current key. Assure the key is a BASE64 - 64 bits long\",\n          e);\n    }\n\n    this.initialized = true;\n  }","id":64134,"modified_method":"protected ODESCompression(){\n\t\tsuper();\n\t}","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testODESEncryptedCompression() {\n    OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.setValue(\"T1JJRU5UREJfSVNfQ09PTA==\");\n    OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.setValue(\"T1JJRU5UREI=\");\n    OCompressionFactory.INSTANCE.getCompression(ODESCompression.NAME);\n    testCompression(ODESCompression.NAME);\n  }","id":64135,"modified_method":"public void testODESEncryptedCompression() {\n    testCompression(ODESCompression.NAME);\n  }","commit_id":"1360055e0a201c4fefc258514646a8f97a87fb76","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public static void testCompression(String name) {\n    long seed = System.currentTimeMillis();\n    System.out.println(name + \" - Compression seed \" + seed);\n\n    Random random = new Random(seed);\n    final int iterationsCount = 1000;\n    long compressedSize = 0;\n    for (int i = 0; i < iterationsCount; i++) {\n      int contentSize = random.nextInt(10 * 1024 - 100) + 100;\n      byte[] content = new byte[contentSize];\n      random.nextBytes(content);\n\n      OCompression compression = OCompressionFactory.INSTANCE.getCompression(name);\n\n      final byte[] compressedContent = compression.compress(content);\n\n      compressedSize += compressedContent.length;\n\n      Assert.assertEquals(content, compression.uncompress(compressedContent));\n    }\n\n    System.out.println(\"Compression/Decompression test against \" + name + \" took: \" + (System.currentTimeMillis() - seed)\n        + \"ms, total byte size: \" + compressedSize);\n  }","id":64136,"modified_method":"public static void testCompression(String name) {\n    OCompressionFactory.INSTANCE.init();\n\n    long seed = System.currentTimeMillis();\n    System.out.println(name + \" - Compression seed \" + seed);\n\n    Random random = new Random(seed);\n    final int iterationsCount = 1000;\n    long compressedSize = 0;\n    for (int i = 0; i < iterationsCount; i++) {\n      int contentSize = random.nextInt(10 * 1024 - 100) + 100;\n      byte[] content = new byte[contentSize];\n      random.nextBytes(content);\n\n      final OCompression compression = OCompressionFactory.INSTANCE.getCompression(name);\n\n      final byte[] compressedContent = compression.compress(content);\n\n      compressedSize += compressedContent.length;\n\n      Assert.assertEquals(content, compression.uncompress(compressedContent));\n    }\n\n    System.out.println(\"Compression/Decompression test against \" + name + \" took: \" + (System.currentTimeMillis() - seed)\n        + \"ms, total byte size: \" + compressedSize);\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected OAESCompression(){\n\t\tsuper();\n\t}","id":64137,"modified_method":"public OAESCompression() {\n    initialized = false;\n\n    final String configuredKey = OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.getValueAsString();\n\n    if (configuredKey == null)\n      throw new OStorageException(\"AES compression has been selected, but no key was found. Please configure '\"\n          + OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.getKey() + \"' setting or remove AES compression by setting '\"\n          + OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey() + \"=nothing'\");\n\n    try {\n      final byte[] key = OBase64Utils.decode(configuredKey);\n\n      theKey = new SecretKeySpec(key, ALGORITHM_NAME); // AES\n      cipher = Cipher.getInstance(TRANSFORMATION);\n\n    } catch (Exception e) {\n      throw new OSecurityException(\n          \"Cannot initialize AES encryption with current key. Assure the key is a BASE64 - 128 oe 256 bits long\", e);\n\n    }\n\n    this.initialized = true;\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public   byte[] encryptOrDecrypt(int mode, byte[] input, int offset, int length) throws Throwable {\n\t\tif (!initialized) throw new OSecurityException(\"aes-encrypted compression is not available\");\n\t\t\n\t\tSecretKeySpec ks = new SecretKeySpec(key, algorithmName); \n\t\tCipher cipher = Cipher.getInstance(transformation); \n\t\tcipher.init(mode, ks);\n\t\t\n\t\tbyte[] content;\n        if (offset==0 && length==input.length){\n        \tcontent=input;\n        }else{\n        \tcontent = new byte[length];\n\t        System.arraycopy(input,offset,content,0,length);\n        }\n\t\tbyte[] output=cipher.doFinal(content);\n\t\treturn output;\n\t}","id":64138,"modified_method":"public byte[] encryptOrDecrypt(final int mode, final byte[] input, final int offset, final int length) throws Throwable {\n    if (!initialized)\n      throw new OSecurityException(\"AES encryption algorithm is not available\");\n\n    cipher.init(mode, theKey);\n\n    final byte[] content;\n    if (offset == 0 && length == input.length) {\n      content = input;\n    } else {\n      content = new byte[length];\n      System.arraycopy(input, offset, content, 0, length);\n    }\n    return cipher.doFinal(content);\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testOAESEncryptedCompression() {\n    testCompression(OAESCompression.NAME);\n  }","id":64139,"modified_method":"public void testOAESEncryptedCompression() {\n    OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.setValue(\"T1JJRU5UREI=\");\n    OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.setValue(\"T1JJRU5UREJfSVNfQ09PTA==\");\n    testCompression(OAESCompression.NAME);\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n\tpublic  byte[] compress(byte[] content, int offset, int length){\n        try {\n\t        byte[] encriptedContent = encryptOrDecrypt(Cipher.ENCRYPT_MODE,content, offset,  length);\n\t        return encriptedContent;\n        } catch (Throwable e) {\n\t\t\tthrow new OSecurityException(e.getMessage(),e);\n\t\t} \n\t}","id":64140,"modified_method":"@Override\n  public byte[] compress(final byte[] content, final int offset, final int length) {\n    try {\n      return encryptOrDecrypt(Cipher.ENCRYPT_MODE, content, offset, length);\n    } catch (Throwable e) {\n      throw new OSecurityException(\"Cannot encrypt content\", e);\n    }\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n\tpublic  byte[] uncompress(byte[] content, int offset, int length){\n        try {\n\t        byte[] decriptedContent = encryptOrDecrypt(Cipher.DECRYPT_MODE,content, offset,  length);\n\t        return decriptedContent;\n        } catch (Throwable e) {\n\t\t\tthrow new OSecurityException(e.getMessage(),e);\n\t\t} \n\t}","id":64141,"modified_method":"@Override\n  public byte[] uncompress(final byte[] content, final int offset, final int length) {\n    try {\n      return encryptOrDecrypt(Cipher.DECRYPT_MODE, content, offset, length);\n    } catch (Throwable e) {\n      throw new OSecurityException(\"Cannot decrypt content\", e);\n    }\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OCompressionFactory() {\n    register(OHighZIPCompression.INSTANCE);\n    register(OLowZIPCompression.INSTANCE);\n    register(OGZIPCompression.INSTANCE);\n    register(OSnappyCompression.INSTANCE);\n    register(ONothingCompression.INSTANCE);\n    register(ODESCompression.INSTANCE);\n    register(OAESCompression.INSTANCE);\n  }","id":64142,"modified_method":"public OCompressionFactory() {\n    init();\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OCompression getCompression(String name) {\n    OCompression compression = compressions.get(name);\n    if (compression == null)\n      throw new IllegalArgumentException(\"Compression with name  \" + name + \" is absent.\");\n\n    return compression;\n  }","id":64143,"modified_method":"public OCompression getCompression(final String name) {\n    final OCompression compression = compressions.get(name);\n    if (compression == null)\n      throw new IllegalArgumentException(\"Compression with name '\" + name + \"' is absent.\");\n\n    return compression;\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public   byte[] encryptOrDecrypt(int mode, byte[] input, int offset, int length) throws Throwable {\n\t\tif (!initialized) throw new OSecurityException(\"des-encrypted compression is not available\");\n\t\t\n\t\tCipher cipher = Cipher.getInstance(transformation); \n\t\tcipher.init(mode,theKey);\n\t\t\n\t\tbyte[] content;\n        if (offset==0 && length==input.length){\n        \tcontent=input;\n        }else{\n        \tcontent = new byte[length];\n\t        System.arraycopy(input,offset,content,0,length);\n        }\n\t\tbyte[] output=cipher.doFinal(content);\n\t\treturn output;\n\t}","id":64144,"modified_method":"public byte[] encryptOrDecrypt(final int mode, final byte[] input, final int offset, final int length) throws Throwable {\n    if (!initialized)\n      throw new OSecurityException(\"DES encryption algorithm is not available\");\n\n    cipher.init(mode, theKey);\n\n    final byte[] content;\n    if (offset == 0 && length == input.length) {\n      content = input;\n    } else {\n      content = new byte[length];\n      System.arraycopy(input, offset, content, 0, length);\n    }\n    return cipher.doFinal(content);\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected ODESCompression(){\n\t\tsuper();\n\t}","id":64145,"modified_method":"public ODESCompression() {\n    initialized = false;\n\n    final String configuredKey = OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.getValueAsString();\n\n    if (configuredKey == null)\n      throw new OStorageException(\"DES compression has been selected, but no key was found. Please configure '\"\n          + OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.getKey() + \"' setting or remove DES compression by setting '\"\n          + OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey() + \"=nothing'\");\n\n    try {\n      final byte[] key = OBase64Utils.decode(configuredKey);\n\n      final DESKeySpec desKeySpec = new DESKeySpec(key);\n      final SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM_NAME);\n\n      theKey = keyFactory.generateSecret(desKeySpec);\n      cipher = Cipher.getInstance(TRANSFORMATION);\n\n    } catch (Exception e) {\n      throw new OSecurityException(\"Cannot initialize DES encryption with current key. Assure the key is a BASE64 - 64 bits long\",\n          e);\n    }\n\n    this.initialized = true;\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void testODESEncryptedCompression() {\n    testCompression(ODESCompression.NAME);\n  }","id":64146,"modified_method":"public void testODESEncryptedCompression() {\n    OGlobalConfiguration.STORAGE_ENCRYPTION_AES_KEY.setValue(\"T1JJRU5UREJfSVNfQ09PTA==\");\n    OGlobalConfiguration.STORAGE_ENCRYPTION_DES_KEY.setValue(\"T1JJRU5UREI=\");\n    OCompressionFactory.INSTANCE.getCompression(ODESCompression.NAME);\n    testCompression(ODESCompression.NAME);\n  }","commit_id":"139f403a237b2e95aa0e1a8cb6a5c98f1c8f7971","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private static boolean tryStatementAssignsVariableOrFails(\n            @NotNull PsiTryStatement tryStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiCodeBlock tryBlock = tryStatement.getTryBlock();\n        if (!blockAssignsVariableOrFails(tryBlock, variable,\n                        checkedMethods, strict)) {\n            return false;\n        }\n        final PsiCodeBlock[] catchBlocks = tryStatement.getCatchBlocks();\n        for (final PsiCodeBlock catchBlock : catchBlocks){\n            if (strict) {\n                if (!blockFails(catchBlock)) {\n                    return false;\n                }\n            } else if (!blockAssignsVariableOrFails(catchBlock, variable,\n                    checkedMethods, strict)) {\n                return false;\n            }\n        }\n        final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock();\n        return blockAssignsVariableOrFails(finallyBlock, variable,\n                checkedMethods, strict);\n    }","id":64147,"modified_method":"private static boolean tryStatementAssignsVariableOrFails(\n            @NotNull PsiTryStatement tryStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiCodeBlock tryBlock = tryStatement.getTryBlock();\n        boolean initializedInTryAndCatch =\n                blockAssignsVariableOrFails(tryBlock, variable,\n                        checkedMethods, strict);\n        final PsiCodeBlock[] catchBlocks = tryStatement.getCatchBlocks();\n        for(final PsiCodeBlock catchBlock : catchBlocks){\n            if (strict) {\n                initializedInTryAndCatch &= blockFails(catchBlock);\n            } else {\n                initializedInTryAndCatch &= blockAssignsVariableOrFails(\n                        catchBlock, variable,\n                        checkedMethods, strict);\n            }\n        }\n        if(initializedInTryAndCatch){\n            return true;\n        }\n        final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock();\n        return blockAssignsVariableOrFails(finallyBlock, variable,\n                checkedMethods, strict);\n    }","commit_id":"32746e84c24a2a7b1defff8b2ec609e0b20bdcea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean staticFieldMayBeFinal(PsiField field) {\n            final PsiExpression initializer = field.getInitializer();\n            final PsiClass aClass = field.getContainingClass();\n            if (aClass == null) {\n                return false;\n            }\n            final PsiClassInitializer[] classInitializers =\n                    aClass.getInitializers();\n            boolean assignedInInitializer = initializer != null;\n            for (PsiClassInitializer classInitializer : classInitializers) {\n                if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {\n                    if (VariableAccessUtils.variableIsAssigned(field,\n                            classInitializer, false)) {\n                        if (assignedInInitializer) {\n                            return false;\n                        } else if (InitializationUtils.\n                                classInitializerAssignsVariableOrFails(\n                                        classInitializer, field)) {\n                            assignedInInitializer = true;\n                        }\n                    }\n                } else if (VariableAccessUtils.variableIsAssigned(field,\n                        classInitializer,  false)) {\n                    return false;\n                }\n            }\n            if (!assignedInInitializer) {\n                return false;\n            }\n            final PsiMethod[] methods = aClass.getMethods();\n            for (PsiMethod method : methods) {\n                if (VariableAccessUtils.variableIsAssigned(field, method,\n                        false)) {\n                    return false;\n                }\n            }\n            final PsiElement[] children = aClass.getChildren();\n            final ClassVisitor visitor = new ClassVisitor(field);\n            for (PsiElement child : children) {\n                child.accept(visitor);\n                if (visitor.isVariableAssignedInClass()) {\n                    return false;\n                }\n            }\n            PsiClass containingClass = aClass.getContainingClass();\n            final AssigmentVisitor assignmentVisitor =\n                    new AssigmentVisitor(field);\n            while (containingClass != null) {\n                containingClass.accept(assignmentVisitor);\n                if (assignmentVisitor.isVariableAssigned()) {\n                    return false;\n                }\n                containingClass = containingClass.getContainingClass();\n            }\n            return true;\n        }","id":64148,"modified_method":"private static boolean staticFieldMayBeFinal(PsiField field) {\n            final PsiExpression initializer = field.getInitializer();\n            final PsiClass aClass = field.getContainingClass();\n            if (aClass == null) {\n                return false;\n            }\n            final PsiClassInitializer[] classInitializers =\n                    aClass.getInitializers();\n            boolean assignedInInitializer = initializer != null;\n            for (PsiClassInitializer classInitializer : classInitializers) {\n                if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {\n                    if (VariableAccessUtils.variableIsAssigned(field,\n                            classInitializer, false)) {\n                        if (assignedInInitializer) {\n                            return false;\n                        } else if (InitializationUtils.\n                                classInitializerAssignsVariableOrFails(\n                                        classInitializer, field, true)) {\n                            assignedInInitializer = true;\n                        }\n                    }\n                } else if (VariableAccessUtils.variableIsAssigned(field,\n                        classInitializer,  false)) {\n                    return false;\n                }\n            }\n            if (!assignedInInitializer) {\n                return false;\n            }\n            final PsiMethod[] methods = aClass.getMethods();\n            for (PsiMethod method : methods) {\n                if (VariableAccessUtils.variableIsAssigned(field, method,\n                        false)) {\n                    return false;\n                }\n            }\n            final PsiElement[] children = aClass.getChildren();\n            final ClassVisitor visitor = new ClassVisitor(field);\n            for (PsiElement child : children) {\n                child.accept(visitor);\n                if (visitor.isVariableAssignedInClass()) {\n                    return false;\n                }\n            }\n            PsiClass containingClass = aClass.getContainingClass();\n            final AssigmentVisitor assignmentVisitor =\n                    new AssigmentVisitor(field, aClass);\n            while (containingClass != null) {\n                containingClass.accept(assignmentVisitor);\n                if (assignmentVisitor.isVariableAssigned()) {\n                    return false;\n                }\n                containingClass = containingClass.getContainingClass();\n            }\n            return true;\n        }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean fieldMayBeFinal(PsiField field) {\n            final PsiClass aClass = field.getContainingClass();\n            if (aClass == null) {\n                return false;\n            }\n            final PsiExpression intializer = field.getInitializer();\n            final PsiClassInitializer[] classInitializers =\n                    aClass.getInitializers();\n            boolean assignedInInitializer = intializer != null;\n            boolean isInitialized = assignedInInitializer;\n            for (PsiClassInitializer classInitializer : classInitializers) {\n                if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {\n                    continue;\n                }\n                if (VariableAccessUtils.variableIsAssigned(field,\n                        classInitializer, false)) {\n                    if (assignedInInitializer) {\n                        return false;\n                    } else if (InitializationUtils.\n                            classInitializerAssignsVariableOrFails(\n                                    classInitializer,  field)){\n                        isInitialized = true;\n                    }\n                    assignedInInitializer = true;\n                }\n            }\n            final PsiMethod[] methods = aClass.getMethods();\n            for (PsiMethod method : methods) {\n                if (method.hasModifierProperty(PsiModifier.STATIC)) {\n                    continue;\n                }\n                if (method.isConstructor() && !assignedInInitializer) {\n                    if (!VariableAccessUtils.variableIsAssigned(field, method,\n                            false)) {\n                        return false;\n                    } else if (InitializationUtils.methodAssignsVariableOrFails(\n                            method, field)){\n                        isInitialized = true;\n                    }\n                    continue;\n                }\n                if (VariableAccessUtils.variableIsAssigned(field, method,\n                        false)) {\n                    return false;\n                }\n            }\n            if (!isInitialized) {\n                return false;\n            }\n            final PsiElement[] children = aClass.getChildren();\n            final ClassVisitor visitor = new ClassVisitor(field);\n            for (PsiElement child : children) {\n                child.accept(visitor);\n                if (visitor.isVariableAssignedInClass()) {\n                    return false;\n                }\n            }\n            PsiClass containingClass = aClass.getContainingClass();\n            final AssigmentVisitor assignmentVisitor =\n                    new AssigmentVisitor(field);\n            while (containingClass != null) {\n                containingClass.accept(assignmentVisitor);\n                if (assignmentVisitor.isVariableAssigned()) {\n                    return false;\n                }\n                containingClass = containingClass.getContainingClass();\n            }\n            return true;\n        }","id":64149,"modified_method":"private static boolean fieldMayBeFinal(PsiField field) {\n            final PsiClass aClass = field.getContainingClass();\n            if (aClass == null) {\n                return false;\n            }\n            final PsiExpression intializer = field.getInitializer();\n            final PsiClassInitializer[] classInitializers =\n                    aClass.getInitializers();\n            boolean assignedInInitializer = intializer != null;\n            boolean isInitialized = assignedInInitializer;\n            for (PsiClassInitializer classInitializer : classInitializers) {\n                if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {\n                    continue;\n                }\n                if (VariableAccessUtils.variableIsAssigned(field,\n                        classInitializer, false)) {\n                    if (assignedInInitializer) {\n                        return false;\n                    } else if (InitializationUtils.\n                            classInitializerAssignsVariableOrFails(\n                                    classInitializer,  field, true)){\n                        isInitialized = true;\n                    }\n                    assignedInInitializer = true;\n                }\n            }\n            final PsiMethod[] methods = aClass.getMethods();\n            for (PsiMethod method : methods) {\n                if (method.hasModifierProperty(PsiModifier.STATIC)) {\n                    continue;\n                }\n                if (method.isConstructor() && !assignedInInitializer) {\n                    if (!VariableAccessUtils.variableIsAssigned(field, method,\n                            false)) {\n                        return false;\n                    } else if (InitializationUtils.methodAssignsVariableOrFails(\n                            method, field, true)){\n                        isInitialized = true;\n                    }\n                    continue;\n                }\n                if (VariableAccessUtils.variableIsAssigned(field, method,\n                        false)) {\n                    return false;\n                }\n            }\n            if (!isInitialized) {\n                return false;\n            }\n            final PsiElement[] children = aClass.getChildren();\n            final ClassVisitor visitor = new ClassVisitor(field);\n            for (PsiElement child : children) {\n                child.accept(visitor);\n                if (visitor.isVariableAssignedInClass()) {\n                    return false;\n                }\n            }\n            PsiClass containingClass = aClass.getContainingClass();\n            final AssigmentVisitor assignmentVisitor =\n                    new AssigmentVisitor(field, aClass);\n            while (containingClass != null) {\n                containingClass.accept(assignmentVisitor);\n                if (assignmentVisitor.isVariableAssigned()) {\n                    return false;\n                }\n                containingClass = containingClass.getContainingClass();\n            }\n            return true;\n        }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"AssigmentVisitor(PsiVariable variable) {\n                this.variable = variable;\n            }","id":64150,"modified_method":"AssigmentVisitor(PsiVariable variable, PsiClass excludedClass) {\n                this.variable = variable;\n                this.excludedClass = excludedClass;\n            }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean doWhileAssignsVariableOrFails(\n            @NotNull PsiDoWhileStatement doWhileStatement,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiExpression condition = doWhileStatement.getCondition();\n        final PsiStatement body = doWhileStatement.getBody();\n        return expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods) ||\n                statementAssignsVariableOrFails(body, variable, checkedMethods);\n    }","id":64151,"modified_method":"private static boolean doWhileAssignsVariableOrFails(\n            @NotNull PsiDoWhileStatement doWhileStatement,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods,\n            boolean strict){\n        final PsiExpression condition = doWhileStatement.getCondition();\n        final PsiStatement body = doWhileStatement.getBody();\n        return expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods, strict) ||\n                statementAssignsVariableOrFails(body, variable, checkedMethods,\n                        strict);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean switchStatementAssignsVariableOrFails(\n            @NotNull PsiSwitchStatement switchStatement,\n            @NotNull PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods) {\n        final PsiExpression expression = switchStatement.getExpression();\n        if (expressionAssignsVariableOrFails(expression, variable,\n                checkedMethods)) {\n            return true;\n        }\n        final PsiCodeBlock body = switchStatement.getBody();\n        if (body == null) {\n            return false;\n        }\n        final PsiStatement[] statements = body.getStatements();\n        boolean containsDefault = false;\n        boolean assigns = false;\n        for (int i = 0; i < statements.length; i++) {\n            final PsiStatement statement = statements[i];\n            if (statement instanceof PsiSwitchLabelStatement) {\n                final PsiSwitchLabelStatement labelStatement\n                        = (PsiSwitchLabelStatement) statement;\n                if (i == statements.length - 1) {\n                    return false;\n                }\n                if (labelStatement.isDefaultCase()) {\n                    containsDefault = true;\n                }\n                assigns = false;\n            } else if (statement instanceof PsiBreakStatement) {\n                final PsiBreakStatement breakStatement\n                        = (PsiBreakStatement) statement;\n                if (breakStatement.getLabelIdentifier() != null) {\n                    return false;\n                }\n                if (!assigns) {\n                    return false;\n                }\n                assigns = false;\n            } else {\n                assigns |= statementAssignsVariableOrFails(statement, variable,\n                        checkedMethods);\n                if (i == statements.length - 1 && !assigns) {\n                    return false;\n                }\n            }\n        }\n        return containsDefault;\n    }","id":64152,"modified_method":"private static boolean switchStatementAssignsVariableOrFails(\n            @NotNull PsiSwitchStatement switchStatement,\n            @NotNull PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict) {\n        final PsiExpression expression = switchStatement.getExpression();\n        if (expressionAssignsVariableOrFails(expression, variable,\n                checkedMethods, strict)) {\n            return true;\n        }\n        final PsiCodeBlock body = switchStatement.getBody();\n        if (body == null) {\n            return false;\n        }\n        final PsiStatement[] statements = body.getStatements();\n        boolean containsDefault = false;\n        boolean assigns = false;\n        for (int i = 0; i < statements.length; i++) {\n            final PsiStatement statement = statements[i];\n            if (statement instanceof PsiSwitchLabelStatement) {\n                final PsiSwitchLabelStatement labelStatement\n                        = (PsiSwitchLabelStatement) statement;\n                if (i == statements.length - 1) {\n                    return false;\n                }\n                if (labelStatement.isDefaultCase()) {\n                    containsDefault = true;\n                }\n                assigns = false;\n            } else if (statement instanceof PsiBreakStatement) {\n                final PsiBreakStatement breakStatement\n                        = (PsiBreakStatement) statement;\n                if (breakStatement.getLabelIdentifier() != null) {\n                    return false;\n                }\n                if (!assigns) {\n                    return false;\n                }\n                assigns = false;\n            } else {\n                assigns |= statementAssignsVariableOrFails(statement, variable,\n                        checkedMethods, strict);\n                if (i == statements.length - 1 && !assigns) {\n                    return false;\n                }\n            }\n        }\n        return containsDefault;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean newExpressionAssignsVariableOrFails(\n            @NotNull PsiNewExpression newExpression, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiExpressionList argumentList = newExpression.getArgumentList();\n        if(argumentList != null){\n            final PsiExpression[] args = argumentList.getExpressions();\n            for(final PsiExpression arg : args){\n                if(expressionAssignsVariableOrFails(arg, variable,\n                        checkedMethods)){\n                    return true;\n                }\n            }\n        }\n        final PsiArrayInitializerExpression arrayInitializer =\n                newExpression.getArrayInitializer();\n        if(expressionAssignsVariableOrFails(arrayInitializer, variable,\n                checkedMethods)){\n            return true;\n        }\n        final PsiExpression[] arrayDimensions =\n                newExpression.getArrayDimensions();\n        for(final PsiExpression dim : arrayDimensions){\n            if(expressionAssignsVariableOrFails(dim, variable,\n                    checkedMethods)){\n                return true;\n            }\n        }\n        return false;\n    }","id":64153,"modified_method":"private static boolean newExpressionAssignsVariableOrFails(\n            @NotNull PsiNewExpression newExpression, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiExpressionList argumentList = newExpression.getArgumentList();\n        if(argumentList != null){\n            final PsiExpression[] args = argumentList.getExpressions();\n            for(final PsiExpression arg : args){\n                if(expressionAssignsVariableOrFails(arg, variable,\n                        checkedMethods, strict)){\n                    return true;\n                }\n            }\n        }\n        final PsiArrayInitializerExpression arrayInitializer =\n                newExpression.getArrayInitializer();\n        if(expressionAssignsVariableOrFails(arrayInitializer, variable,\n                checkedMethods, strict)){\n            return true;\n        }\n        final PsiExpression[] arrayDimensions =\n                newExpression.getArrayDimensions();\n        for(final PsiExpression dim : arrayDimensions){\n            if(expressionAssignsVariableOrFails(dim, variable,\n                    checkedMethods, strict)){\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean whileStatementAssignsVariableOrFails(\n            @NotNull PsiWhileStatement whileStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiExpression condition = whileStatement.getCondition();\n        if(expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods)){\n            return true;\n        }\n        if(BoolUtils.isTrue(condition)){\n            final PsiStatement body = whileStatement.getBody();\n            if(statementAssignsVariableOrFails(body, variable, checkedMethods)){\n                return true;\n            }\n        }\n        return false;\n    }","id":64154,"modified_method":"private static boolean whileStatementAssignsVariableOrFails(\n            @NotNull PsiWhileStatement whileStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods,\n            boolean strict){\n        final PsiExpression condition = whileStatement.getCondition();\n        if(expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods, strict)){\n            return true;\n        }\n        if(BoolUtils.isTrue(condition)){\n            final PsiStatement body = whileStatement.getBody();\n            if(statementAssignsVariableOrFails(body, variable, checkedMethods,\n                    strict)){\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean classInitializerAssignsVariableOrFails(\n            @Nullable PsiClassInitializer initializer,\n            @NotNull PsiVariable variable) {\n        if (initializer == null) {\n            return false;\n        }\n        final PsiCodeBlock body = initializer.getBody();\n        return blockAssignsVariableOrFails(body, variable);\n    }","id":64155,"modified_method":"public static boolean classInitializerAssignsVariableOrFails(\n            @Nullable PsiClassInitializer initializer,\n            @NotNull PsiVariable variable, boolean strict) {\n        if (initializer == null) {\n            return false;\n        }\n        final PsiCodeBlock body = initializer.getBody();\n        return blockAssignsVariableOrFails(body, variable, strict);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean methodCallAssignsVariableOrFails(\n            @NotNull PsiMethodCallExpression callExpression,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiExpressionList argList = callExpression.getArgumentList();\n        final PsiExpression[] args = argList.getExpressions();\n        for(final PsiExpression arg : args){\n            if(expressionAssignsVariableOrFails(arg, variable, checkedMethods)){\n                return true;\n            }\n        }\n        final PsiReferenceExpression methodExpression =\n                callExpression.getMethodExpression();\n        if(expressionAssignsVariableOrFails(methodExpression, variable,\n                checkedMethods)){\n            return true;\n        }\n        final PsiMethod method = callExpression.resolveMethod();\n        if(method == null){\n            return false;\n        }\n        final MethodSignature methodSignature =\n                method.getSignature(PsiSubstitutor.EMPTY);\n        if(!checkedMethods.add(methodSignature)){\n            return false;\n        }\n        final PsiClass containingClass =\n                ClassUtils.getContainingClass(callExpression);\n        final PsiClass calledClass = method.getContainingClass();\n        if(!calledClass.equals(containingClass)){\n            return false;\n        }\n        if(method.hasModifierProperty(PsiModifier.STATIC)\n                || method.isConstructor()\n                || method.hasModifierProperty(PsiModifier.PRIVATE)\n                || method.hasModifierProperty(PsiModifier.FINAL)\n                || calledClass.hasModifierProperty(PsiModifier.FINAL)){\n            final PsiCodeBlock body = method.getBody();\n            return blockAssignsVariableOrFails(body, variable,\n                    checkedMethods);\n        }\n        return false;\n    }","id":64156,"modified_method":"private static boolean methodCallAssignsVariableOrFails(\n            @NotNull PsiMethodCallExpression callExpression,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiExpressionList argList = callExpression.getArgumentList();\n        final PsiExpression[] args = argList.getExpressions();\n        for(final PsiExpression arg : args){\n            if(expressionAssignsVariableOrFails(arg, variable, checkedMethods,\n                    strict)){\n                return true;\n            }\n        }\n        final PsiReferenceExpression methodExpression =\n                callExpression.getMethodExpression();\n        if(expressionAssignsVariableOrFails(methodExpression, variable,\n                checkedMethods, strict)){\n            return true;\n        }\n        final PsiMethod method = callExpression.resolveMethod();\n        if(method == null){\n            return false;\n        }\n        final MethodSignature methodSignature =\n                method.getSignature(PsiSubstitutor.EMPTY);\n        if(!checkedMethods.add(methodSignature)){\n            return false;\n        }\n        final PsiClass containingClass =\n                ClassUtils.getContainingClass(callExpression);\n        final PsiClass calledClass = method.getContainingClass();\n        if(calledClass == null || !calledClass.equals(containingClass)){\n            return false;\n        }\n        if(method.hasModifierProperty(PsiModifier.STATIC)\n                || method.isConstructor()\n                || method.hasModifierProperty(PsiModifier.PRIVATE)\n                || method.hasModifierProperty(PsiModifier.FINAL)\n                || calledClass.hasModifierProperty(PsiModifier.FINAL)){\n            final PsiCodeBlock body = method.getBody();\n            return blockAssignsVariableOrFails(body, variable,\n                    checkedMethods, strict);\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean ifStatementAssignsVariableOrFails(\n            @NotNull PsiIfStatement ifStatement,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiExpression condition = ifStatement.getCondition();\n        if(expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods)){\n            return true;\n        }\n        final PsiStatement thenBranch = ifStatement.getThenBranch();\n        final PsiStatement elseBranch = ifStatement.getElseBranch();\n        if (BoolUtils.isTrue(condition)) {\n            return statementAssignsVariableOrFails(thenBranch, variable,\n                    checkedMethods);\n        } else if (BoolUtils.isFalse(condition)) {\n            return statementAssignsVariableOrFails(elseBranch, variable,\n                    checkedMethods);\n        }\n        return statementAssignsVariableOrFails(thenBranch, variable,\n                checkedMethods) &&\n                statementAssignsVariableOrFails(elseBranch, variable,\n                        checkedMethods);\n    }","id":64157,"modified_method":"private static boolean ifStatementAssignsVariableOrFails(\n            @NotNull PsiIfStatement ifStatement,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods,\n            boolean strict){\n        final PsiExpression condition = ifStatement.getCondition();\n        if(expressionAssignsVariableOrFails(condition, variable,\n                checkedMethods, strict)){\n            return true;\n        }\n        final PsiStatement thenBranch = ifStatement.getThenBranch();\n        final PsiStatement elseBranch = ifStatement.getElseBranch();\n        if (BoolUtils.isTrue(condition)) {\n            return statementAssignsVariableOrFails(thenBranch, variable,\n                    checkedMethods, strict);\n        } else if (BoolUtils.isFalse(condition)) {\n            return statementAssignsVariableOrFails(elseBranch, variable,\n                    checkedMethods, strict);\n        }\n        return statementAssignsVariableOrFails(thenBranch, variable,\n                checkedMethods, strict) &&\n                statementAssignsVariableOrFails(elseBranch, variable,\n                        checkedMethods, strict);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean statementAssignsVariableOrFails(\n            @Nullable PsiStatement statement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        if(statement == null){\n            return false;\n        }\n        if(ExceptionUtils.statementThrowsException(statement)){\n            return true;\n        }\n        if(statement instanceof PsiBreakStatement ||\n                statement instanceof PsiContinueStatement ||\n                statement instanceof PsiAssertStatement ||\n                statement instanceof PsiEmptyStatement){\n            return false;\n        } else if(statement instanceof PsiReturnStatement){\n            final PsiReturnStatement returnStatement =\n                    (PsiReturnStatement) statement;\n            final PsiExpression returnValue = returnStatement.getReturnValue();\n            return expressionAssignsVariableOrFails(returnValue, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiThrowStatement){\n            final PsiThrowStatement throwStatement =\n                    (PsiThrowStatement) statement;\n            final PsiExpression exception = throwStatement.getException();\n            return expressionAssignsVariableOrFails(exception, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiExpressionListStatement){\n            final PsiExpressionListStatement list =\n                    (PsiExpressionListStatement) statement;\n            final PsiExpressionList expressionList = list.getExpressionList();\n            final PsiExpression[] expressions = expressionList.getExpressions();\n            for(final PsiExpression expression : expressions){\n                if(expressionAssignsVariableOrFails(expression, variable,\n                        checkedMethods)){\n                    return true;\n                }\n            }\n            return false;\n        } else if(statement instanceof PsiExpressionStatement){\n            final PsiExpressionStatement expressionStatement =\n                    (PsiExpressionStatement) statement;\n            final PsiExpression expression =\n                    expressionStatement.getExpression();\n            return expressionAssignsVariableOrFails(expression, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiDeclarationStatement){\n            final PsiDeclarationStatement declarationStatement =\n                    (PsiDeclarationStatement)statement;\n            return declarationStatementAssignsVariableOrFails(\n                    declarationStatement, variable, checkedMethods);\n        } else if(statement instanceof PsiForStatement){\n            final PsiForStatement forStatement = (PsiForStatement)statement;\n            return forStatementAssignsVariableOrFails(forStatement,\n                    variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiForeachStatement){\n            final PsiForeachStatement foreachStatement =\n                    (PsiForeachStatement)statement;\n            return foreachStatementAssignsVariableOrFails(variable,\n                    foreachStatement);\n        } else if(statement instanceof PsiWhileStatement){\n            final PsiWhileStatement whileStatement =\n                    (PsiWhileStatement)statement;\n            return whileStatementAssignsVariableOrFails(whileStatement,\n                    variable, checkedMethods);\n        } else if(statement instanceof PsiDoWhileStatement){\n            final PsiDoWhileStatement doWhileStatement =\n                    (PsiDoWhileStatement)statement;\n            return doWhileAssignsVariableOrFails(doWhileStatement, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiSynchronizedStatement){\n            final PsiSynchronizedStatement synchronizedStatement =\n                    (PsiSynchronizedStatement)statement;\n            final PsiCodeBlock body = synchronizedStatement.getBody();\n            return blockAssignsVariableOrFails(body, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiBlockStatement){\n            final PsiBlockStatement blockStatement =\n                    (PsiBlockStatement)statement;\n            final PsiCodeBlock codeBlock = blockStatement.getCodeBlock();\n            return blockAssignsVariableOrFails(codeBlock, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiLabeledStatement){\n            final PsiLabeledStatement labeledStatement =\n                    (PsiLabeledStatement) statement;\n            final PsiStatement statementLabeled =\n                    labeledStatement.getStatement();\n            return statementAssignsVariableOrFails(statementLabeled, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiIfStatement){\n            final PsiIfStatement ifStatement = (PsiIfStatement)statement;\n            return ifStatementAssignsVariableOrFails(ifStatement, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiTryStatement){\n            final PsiTryStatement tryStatement = (PsiTryStatement)statement;\n            return tryStatementAssignsVariableOrFails(tryStatement, variable,\n                    checkedMethods);\n        } else if(statement instanceof PsiSwitchStatement){\n            final PsiSwitchStatement switchStatement =\n                    (PsiSwitchStatement)statement;\n            return switchStatementAssignsVariableOrFails(switchStatement,\n                    variable, checkedMethods);\n        } else {\n            // unknown statement type\n            return false;\n        }\n    }","id":64158,"modified_method":"private static boolean statementAssignsVariableOrFails(\n            @Nullable PsiStatement statement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        if(statement == null){\n            return false;\n        }\n        if(ExceptionUtils.statementThrowsException(statement)){\n            return true;\n        }\n        if(statement instanceof PsiBreakStatement ||\n                statement instanceof PsiContinueStatement ||\n                statement instanceof PsiAssertStatement ||\n                statement instanceof PsiEmptyStatement){\n            return false;\n        } else if(statement instanceof PsiReturnStatement){\n            final PsiReturnStatement returnStatement =\n                    (PsiReturnStatement) statement;\n            final PsiExpression returnValue = returnStatement.getReturnValue();\n            return expressionAssignsVariableOrFails(returnValue, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiThrowStatement){\n            final PsiThrowStatement throwStatement =\n                    (PsiThrowStatement) statement;\n            final PsiExpression exception = throwStatement.getException();\n            return expressionAssignsVariableOrFails(exception, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiExpressionListStatement){\n            final PsiExpressionListStatement list =\n                    (PsiExpressionListStatement) statement;\n            final PsiExpressionList expressionList = list.getExpressionList();\n            final PsiExpression[] expressions = expressionList.getExpressions();\n            for(final PsiExpression expression : expressions){\n                if(expressionAssignsVariableOrFails(expression, variable,\n                        checkedMethods, strict)){\n                    return true;\n                }\n            }\n            return false;\n        } else if(statement instanceof PsiExpressionStatement){\n            final PsiExpressionStatement expressionStatement =\n                    (PsiExpressionStatement) statement;\n            final PsiExpression expression =\n                    expressionStatement.getExpression();\n            return expressionAssignsVariableOrFails(expression, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiDeclarationStatement){\n            final PsiDeclarationStatement declarationStatement =\n                    (PsiDeclarationStatement)statement;\n            return declarationStatementAssignsVariableOrFails(\n                    declarationStatement, variable, checkedMethods, strict);\n        } else if(statement instanceof PsiForStatement){\n            final PsiForStatement forStatement = (PsiForStatement)statement;\n            return forStatementAssignsVariableOrFails(forStatement,\n                    variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiForeachStatement){\n            final PsiForeachStatement foreachStatement =\n                    (PsiForeachStatement)statement;\n            return foreachStatementAssignsVariableOrFails(variable,\n                    foreachStatement);\n        } else if(statement instanceof PsiWhileStatement){\n            final PsiWhileStatement whileStatement =\n                    (PsiWhileStatement)statement;\n            return whileStatementAssignsVariableOrFails(whileStatement,\n                    variable, checkedMethods, strict);\n        } else if(statement instanceof PsiDoWhileStatement){\n            final PsiDoWhileStatement doWhileStatement =\n                    (PsiDoWhileStatement)statement;\n            return doWhileAssignsVariableOrFails(doWhileStatement, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiSynchronizedStatement){\n            final PsiSynchronizedStatement synchronizedStatement =\n                    (PsiSynchronizedStatement)statement;\n            final PsiCodeBlock body = synchronizedStatement.getBody();\n            return blockAssignsVariableOrFails(body, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiBlockStatement){\n            final PsiBlockStatement blockStatement =\n                    (PsiBlockStatement)statement;\n            final PsiCodeBlock codeBlock = blockStatement.getCodeBlock();\n            return blockAssignsVariableOrFails(codeBlock, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiLabeledStatement){\n            final PsiLabeledStatement labeledStatement =\n                    (PsiLabeledStatement) statement;\n            final PsiStatement statementLabeled =\n                    labeledStatement.getStatement();\n            return statementAssignsVariableOrFails(statementLabeled, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiIfStatement){\n            final PsiIfStatement ifStatement = (PsiIfStatement)statement;\n            return ifStatementAssignsVariableOrFails(ifStatement, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiTryStatement){\n            final PsiTryStatement tryStatement = (PsiTryStatement)statement;\n            return tryStatementAssignsVariableOrFails(tryStatement, variable,\n                    checkedMethods, strict);\n        } else if(statement instanceof PsiSwitchStatement){\n            final PsiSwitchStatement switchStatement =\n                    (PsiSwitchStatement)statement;\n            return switchStatementAssignsVariableOrFails(switchStatement,\n                    variable, checkedMethods, strict);\n        } else {\n            // unknown statement type\n            return false;\n        }\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean blockAssignsVariableOrFails(\n            @Nullable PsiCodeBlock block, @NotNull PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        if(block == null){\n            return false;\n        }\n        final PsiStatement[] statements = block.getStatements();\n        for(final PsiStatement statement : statements){\n            if(statementAssignsVariableOrFails(statement, variable,\n                    checkedMethods)){\n                return true;\n            }\n        }\n        return false;\n    }","id":64159,"modified_method":"private static boolean blockAssignsVariableOrFails(\n            @Nullable PsiCodeBlock block, @NotNull PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        if(block == null){\n            return false;\n        }\n        final PsiStatement[] statements = block.getStatements();\n        for(final PsiStatement statement : statements){\n            if(statementAssignsVariableOrFails(statement, variable,\n                    checkedMethods, strict)){\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean tryStatementAssignsVariableOrFails(\n            @NotNull PsiTryStatement tryStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiCodeBlock tryBlock = tryStatement.getTryBlock();\n        boolean initializedInTryAndCatch =\n                blockAssignsVariableOrFails(tryBlock, variable,\n                        checkedMethods);\n        final PsiCodeBlock[] catchBlocks = tryStatement.getCatchBlocks();\n        for (final PsiCodeBlock catchBlock : catchBlocks){\n            initializedInTryAndCatch &=\n            blockAssignsVariableOrFails(catchBlock, variable,\n                    checkedMethods);\n        }\n        if (initializedInTryAndCatch){\n            return true;\n        }\n        final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock();\n        return blockAssignsVariableOrFails(finallyBlock, variable,\n                checkedMethods);\n    }","id":64160,"modified_method":"private static boolean tryStatementAssignsVariableOrFails(\n            @NotNull PsiTryStatement tryStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiCodeBlock tryBlock = tryStatement.getTryBlock();\n        if (!blockAssignsVariableOrFails(tryBlock, variable,\n                        checkedMethods, strict)) {\n            return false;\n        }\n        final PsiCodeBlock[] catchBlocks = tryStatement.getCatchBlocks();\n        for (final PsiCodeBlock catchBlock : catchBlocks){\n            if (strict) {\n                if (!blockFails(catchBlock)) {\n                    return false;\n                }\n            } else if (!blockAssignsVariableOrFails(catchBlock, variable,\n                    checkedMethods, strict)) {\n                return false;\n            }\n        }\n        final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock();\n        return blockAssignsVariableOrFails(finallyBlock, variable,\n                checkedMethods, strict);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean methodAssignsVariableOrFails(\n            @Nullable PsiMethod method, @NotNull PsiVariable variable) {\n        if (method == null) {\n            return false;\n        }\n        final PsiCodeBlock body = method.getBody();\n        return body != null && blockAssignsVariableOrFails(body, variable);\n    }","id":64161,"modified_method":"public static boolean methodAssignsVariableOrFails(\n            @Nullable PsiMethod method, @NotNull PsiVariable variable) {\n        return methodAssignsVariableOrFails(method, variable, false);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean forStatementAssignsVariableOrFails(\n            @NotNull PsiForStatement forStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(statementAssignsVariableOrFails(initialization, variable,\n                checkedMethods)){\n            return true;\n        }\n        final PsiExpression test = forStatement.getCondition();\n        if(expressionAssignsVariableOrFails(test, variable, checkedMethods)){\n            return true;\n        }\n        if(BoolUtils.isTrue(test)){\n            final PsiStatement body = forStatement.getBody();\n            if(statementAssignsVariableOrFails(body, variable, checkedMethods)){\n                return true;\n            }\n            final PsiStatement update = forStatement.getUpdate();\n            if(statementAssignsVariableOrFails(update, variable,\n                    checkedMethods)){\n                return true;\n            }\n        }\n        return false;\n    }","id":64162,"modified_method":"private static boolean forStatementAssignsVariableOrFails(\n            @NotNull PsiForStatement forStatement, PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(statementAssignsVariableOrFails(initialization, variable,\n                checkedMethods, strict)){\n            return true;\n        }\n        final PsiExpression test = forStatement.getCondition();\n        if(expressionAssignsVariableOrFails(test, variable, checkedMethods,\n                strict)){\n            return true;\n        }\n        if(BoolUtils.isTrue(test)){\n            final PsiStatement body = forStatement.getBody();\n            if(statementAssignsVariableOrFails(body, variable, checkedMethods,\n                    strict)){\n                return true;\n            }\n            final PsiStatement update = forStatement.getUpdate();\n            if(statementAssignsVariableOrFails(update, variable,\n                    checkedMethods, strict)){\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean expressionAssignsVariableOrFails(\n            @Nullable PsiExpression expression,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods){\n        if(expression == null){\n            return false;\n        }\n        if(expression instanceof PsiThisExpression ||\n                expression instanceof PsiLiteralExpression ||\n                expression instanceof PsiSuperExpression ||\n                expression instanceof PsiClassObjectAccessExpression){\n            return false;\n        } else if(expression instanceof PsiReferenceExpression){\n            return false;\n        } else if(expression instanceof PsiMethodCallExpression){\n            final PsiMethodCallExpression methodCallExpression =\n                    (PsiMethodCallExpression)expression;\n            return methodCallAssignsVariableOrFails(methodCallExpression,\n                    variable, checkedMethods);\n        } else if (expression instanceof PsiNewExpression){\n            final PsiNewExpression newExpression = (PsiNewExpression)expression;\n            return newExpressionAssignsVariableOrFails(newExpression, variable,\n                    checkedMethods);\n        } else if(expression instanceof PsiArrayInitializerExpression){\n            final PsiArrayInitializerExpression array =\n                    (PsiArrayInitializerExpression) expression;\n            final PsiExpression[] initializers = array.getInitializers();\n            for(final PsiExpression initializer : initializers){\n                if(expressionAssignsVariableOrFails(initializer, variable,\n                        checkedMethods)){\n                    return true;\n                }\n            }\n            return false;\n        } else if(expression instanceof PsiTypeCastExpression){\n            final PsiTypeCastExpression typeCast =\n                    (PsiTypeCastExpression) expression;\n            final PsiExpression operand = typeCast.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods);\n        } else if(expression instanceof PsiArrayAccessExpression){\n            final PsiArrayAccessExpression accessExpression =\n                    (PsiArrayAccessExpression) expression;\n            final PsiExpression arrayExpression =\n                    accessExpression.getArrayExpression();\n            final PsiExpression indexExpression =\n                    accessExpression.getIndexExpression();\n            return expressionAssignsVariableOrFails(arrayExpression, variable,\n                    checkedMethods) ||\n                    expressionAssignsVariableOrFails(indexExpression, variable,\n                            checkedMethods);\n        } else if(expression instanceof PsiPrefixExpression){\n            final PsiPrefixExpression prefixExpression =\n                    (PsiPrefixExpression) expression;\n            final PsiExpression operand = prefixExpression.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods);\n        } else if(expression instanceof PsiPostfixExpression){\n            final PsiPostfixExpression postfixExpression =\n                    (PsiPostfixExpression) expression;\n            final PsiExpression operand = postfixExpression.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods);\n        } else if(expression instanceof PsiBinaryExpression){\n            final PsiBinaryExpression binaryExpression =\n                    (PsiBinaryExpression) expression;\n            final PsiExpression lhs = binaryExpression.getLOperand();\n            final PsiExpression rhs = binaryExpression.getROperand();\n            return expressionAssignsVariableOrFails(lhs, variable,\n                    checkedMethods) ||\n                    expressionAssignsVariableOrFails(rhs, variable,\n                            checkedMethods);\n        } else if(expression instanceof PsiConditionalExpression){\n            final PsiConditionalExpression conditional =\n                    (PsiConditionalExpression) expression;\n            final PsiExpression condition = conditional.getCondition();\n            if(expressionAssignsVariableOrFails(condition, variable,\n                    checkedMethods)){\n                return true;\n            }\n            final PsiExpression thenExpression =\n                    conditional.getThenExpression();\n            final PsiExpression elseExpression =\n                    conditional.getElseExpression();\n            return expressionAssignsVariableOrFails(thenExpression, variable,\n                    checkedMethods) &&\n                    expressionAssignsVariableOrFails(elseExpression, variable,\n                            checkedMethods);\n        } else if(expression instanceof PsiAssignmentExpression){\n            final PsiAssignmentExpression assignment =\n                    (PsiAssignmentExpression) expression;\n            final PsiExpression lhs = assignment.getLExpression();\n            if(expressionAssignsVariableOrFails(lhs, variable, checkedMethods)){\n                return true;\n            }\n            final PsiExpression rhs = assignment.getRExpression();\n            if(expressionAssignsVariableOrFails(rhs, variable, checkedMethods)){\n                return true;\n            }\n            if(lhs instanceof PsiReferenceExpression){\n                final PsiElement element = ((PsiReference) lhs).resolve();\n                if(element != null && element.equals(variable)){\n                    return true;\n                }\n            }\n            return false;\n        } else{\n            return false;\n        }\n    }","id":64163,"modified_method":"private static boolean expressionAssignsVariableOrFails(\n            @Nullable PsiExpression expression,\n            PsiVariable variable,\n            @NotNull Set<MethodSignature> checkedMethods, boolean strict){\n        if(expression == null){\n            return false;\n        }\n        if(expression instanceof PsiThisExpression ||\n                expression instanceof PsiLiteralExpression ||\n                expression instanceof PsiSuperExpression ||\n                expression instanceof PsiClassObjectAccessExpression){\n            return false;\n        } else if(expression instanceof PsiReferenceExpression){\n            return false;\n        } else if(expression instanceof PsiMethodCallExpression){\n            final PsiMethodCallExpression methodCallExpression =\n                    (PsiMethodCallExpression)expression;\n            return methodCallAssignsVariableOrFails(methodCallExpression,\n                    variable, checkedMethods, strict);\n        } else if (expression instanceof PsiNewExpression){\n            final PsiNewExpression newExpression = (PsiNewExpression)expression;\n            return newExpressionAssignsVariableOrFails(newExpression, variable,\n                    checkedMethods, strict);\n        } else if(expression instanceof PsiArrayInitializerExpression){\n            final PsiArrayInitializerExpression array =\n                    (PsiArrayInitializerExpression) expression;\n            final PsiExpression[] initializers = array.getInitializers();\n            for(final PsiExpression initializer : initializers){\n                if(expressionAssignsVariableOrFails(initializer, variable,\n                        checkedMethods, strict)){\n                    return true;\n                }\n            }\n            return false;\n        } else if(expression instanceof PsiTypeCastExpression){\n            final PsiTypeCastExpression typeCast =\n                    (PsiTypeCastExpression) expression;\n            final PsiExpression operand = typeCast.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods, strict);\n        } else if(expression instanceof PsiArrayAccessExpression){\n            final PsiArrayAccessExpression accessExpression =\n                    (PsiArrayAccessExpression) expression;\n            final PsiExpression arrayExpression =\n                    accessExpression.getArrayExpression();\n            final PsiExpression indexExpression =\n                    accessExpression.getIndexExpression();\n            return expressionAssignsVariableOrFails(arrayExpression, variable,\n                    checkedMethods, strict) ||\n                    expressionAssignsVariableOrFails(indexExpression, variable,\n                            checkedMethods, strict);\n        } else if(expression instanceof PsiPrefixExpression){\n            final PsiPrefixExpression prefixExpression =\n                    (PsiPrefixExpression) expression;\n            final PsiExpression operand = prefixExpression.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods, strict);\n        } else if(expression instanceof PsiPostfixExpression){\n            final PsiPostfixExpression postfixExpression =\n                    (PsiPostfixExpression) expression;\n            final PsiExpression operand = postfixExpression.getOperand();\n            return expressionAssignsVariableOrFails(operand, variable,\n                    checkedMethods, strict);\n        } else if(expression instanceof PsiBinaryExpression){\n            final PsiBinaryExpression binaryExpression =\n                    (PsiBinaryExpression) expression;\n            final PsiExpression lhs = binaryExpression.getLOperand();\n            final PsiExpression rhs = binaryExpression.getROperand();\n            return expressionAssignsVariableOrFails(lhs, variable,\n                    checkedMethods, strict) ||\n                    expressionAssignsVariableOrFails(rhs, variable,\n                            checkedMethods, strict);\n        } else if(expression instanceof PsiConditionalExpression){\n            final PsiConditionalExpression conditional =\n                    (PsiConditionalExpression) expression;\n            final PsiExpression condition = conditional.getCondition();\n            if(expressionAssignsVariableOrFails(condition, variable,\n                    checkedMethods, strict)){\n                return true;\n            }\n            final PsiExpression thenExpression =\n                    conditional.getThenExpression();\n            final PsiExpression elseExpression =\n                    conditional.getElseExpression();\n            return expressionAssignsVariableOrFails(thenExpression, variable,\n                    checkedMethods, strict) &&\n                    expressionAssignsVariableOrFails(elseExpression, variable,\n                            checkedMethods, strict);\n        } else if(expression instanceof PsiAssignmentExpression){\n            final PsiAssignmentExpression assignment =\n                    (PsiAssignmentExpression) expression;\n            final PsiExpression lhs = assignment.getLExpression();\n            if(expressionAssignsVariableOrFails(lhs, variable, checkedMethods,\n                    strict)){\n                return true;\n            }\n            final PsiExpression rhs = assignment.getRExpression();\n            if(expressionAssignsVariableOrFails(rhs, variable, checkedMethods,\n                    strict)){\n                return true;\n            }\n            if(lhs instanceof PsiReferenceExpression){\n                final PsiElement element = ((PsiReference) lhs).resolve();\n                if(element != null && element.equals(variable)){\n                    return true;\n                }\n            }\n            return false;\n        } else{\n            return false;\n        }\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean blockAssignsVariableOrFails(\n            @Nullable PsiCodeBlock block, @NotNull PsiVariable variable) {\n        return blockAssignsVariableOrFails(block, variable,\n                new HashSet<MethodSignature>());\n    }","id":64164,"modified_method":"public static boolean blockAssignsVariableOrFails(\n            @Nullable PsiCodeBlock block, @NotNull PsiVariable variable) {\n        return blockAssignsVariableOrFails(block, variable, false);\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean declarationStatementAssignsVariableOrFails(\n            PsiDeclarationStatement declarationStatement, PsiVariable variable,\n            Set<MethodSignature> checkedMethods){\n        final PsiElement[] elements =\n                declarationStatement.getDeclaredElements();\n        for(PsiElement element : elements){\n            if (element instanceof PsiVariable) {\n                final PsiVariable declaredVariable = (PsiVariable) element;\n                final PsiExpression initializer =\n                        declaredVariable.getInitializer();\n                if(expressionAssignsVariableOrFails(initializer, variable,\n                        checkedMethods)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","id":64165,"modified_method":"private static boolean declarationStatementAssignsVariableOrFails(\n            PsiDeclarationStatement declarationStatement, PsiVariable variable,\n            Set<MethodSignature> checkedMethods, boolean strict){\n        final PsiElement[] elements =\n                declarationStatement.getDeclaredElements();\n        for(PsiElement element : elements){\n            if (element instanceof PsiVariable) {\n                final PsiVariable declaredVariable = (PsiVariable) element;\n                final PsiExpression initializer =\n                        declaredVariable.getInitializer();\n                if(expressionAssignsVariableOrFails(initializer, variable,\n                        checkedMethods, strict)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","commit_id":"fb1a706e8c0a901fca309b9fcc8c52d214534347","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        if(!classpath.isEmpty()) {\n            List<File> classpathFiles = CollectionUtils.collect(classpath, new Transformer<File, URI>() {\n                public File transform(URI uri) {\n                    return new File(uri);\n                }\n            });\n\n            ClassPath classPath = new DefaultClassPath(classpathFiles);\n            PluginResolution resolution = new InjectedClassPathPluginResolution(pluginRequest.getId(), parentScope, Factories.constant(classPath), pluginInspector);\n            result.found(getDescription(), resolution);\n        }\n    }","id":64166,"modified_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        PluginImplementation<?> plugin = pluginRegistry.lookup(pluginRequest.getId());\n\n        if (plugin != null) {\n            PluginResolution resolution = new InjectedClassPathPluginResolution(plugin);\n            result.found(getDescription(), resolution);\n        } else {\n            throw new UnknownPluginException(\"Plugin with id '\" + pluginRequest.getId() + \"' not found. Searched classpath: \" + classPath.getAsFiles());\n        }\n    }","commit_id":"52277cb71726a571a0245ab8237b89dd9d5c4457","url":"https://github.com/gradle/gradle"},{"original_method":"public InjectedClassPathPluginResolver(ClassLoaderScope parentScope, PluginInspector pluginInspector, List<URI> classpath) {\n        this.parentScope = parentScope;\n        this.pluginInspector = pluginInspector;\n        this.classpath = classpath;\n    }","id":64167,"modified_method":"public InjectedClassPathPluginResolver(ClassLoaderScope parentScope, PluginInspector pluginInspector, List<URI> injectedClasspath) {\n        this.parentScope = parentScope;\n        this.pluginInspector = pluginInspector;\n        classPath = new DefaultClassPath(transformClasspathFiles(injectedClasspath));\n        pluginRegistry = createPluginRegistry();\n    }","commit_id":"52277cb71726a571a0245ab8237b89dd9d5c4457","url":"https://github.com/gradle/gradle"},{"original_method":"private void addDefaultResolvers(List<PluginResolver> resolvers) {\n        resolvers.add(new NoopPluginResolver(pluginRegistry));\n        resolvers.add(new CorePluginResolver(documentationRegistry, pluginRegistry));\n        resolvers.add(pluginResolutionServiceResolver);\n        resolvers.add(injectedClassPathPluginResolver);\n    }","id":64168,"modified_method":"private void addDefaultResolvers(List<PluginResolver> resolvers) {\n        resolvers.add(new NoopPluginResolver(pluginRegistry));\n        resolvers.add(new CorePluginResolver(documentationRegistry, pluginRegistry));\n        resolvers.add(pluginResolutionServiceResolver);\n\n        if(!injectedClassPathPluginResolver.isClasspathEmpty()) {\n            resolvers.add(injectedClassPathPluginResolver);\n        }\n    }","commit_id":"52277cb71726a571a0245ab8237b89dd9d5c4457","url":"https://github.com/gradle/gradle"},{"original_method":"private void applyType(Class<?> pluginClass) {\r\n        for (Object target : targets) {\r\n            if (target instanceof PluginAwareInternal) {\r\n                ((PluginAwareInternal) target).getPluginManager().apply(pluginClass);\r\n            } else {\r\n                throw new UnsupportedOperationException(String.format(\"Cannot apply plugin of class '%s' to '%s' (class: %s) as it does not implement PluginAware\", pluginClass.getName(), target.toString(), target.getClass().getName()));\r\n            }\r\n        }\r\n    }","id":64169,"modified_method":"private void applyType(Class<?> pluginClass) {\r\n        for (Object target : targets) {\r\n            if (target instanceof PluginAware) {\r\n                ((PluginAware) target).getPluginManager().apply(pluginClass);\r\n            } else {\r\n                throw new UnsupportedOperationException(String.format(\"Cannot apply plugin of class '%s' to '%s' (class: %s) as it does not implement PluginAware\", pluginClass.getName(), target.toString(), target.getClass().getName()));\r\n            }\r\n        }\r\n    }","commit_id":"252cf94af7c1e8b6e443187590229ac25c8e8b5e","url":"https://github.com/gradle/gradle"},{"original_method":"public void applyPlugins(Collection<? extends PluginRequest> requests, final ScriptHandler scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) {\n        if (requests.isEmpty()) {\n            defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n            return;\n        }\n\n        if (target == null) {\n            throw new IllegalStateException(\"Plugin target is 'null' and there are plugin requests\");\n        }\n\n        final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope);\n\n        List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() {\n            public Result transform(PluginRequest request) {\n                return resolveToFoundResult(effectivePluginResolver, request);\n            }\n        });\n\n        // Could be different to ids in the requests as they may be unqualified\n        final Map<Result, PluginId> legacyActualPluginIds = Maps.newLinkedHashMap();\n        final Map<Result, PotentialPlugin<?>> pluginImpls = Maps.newLinkedHashMap();\n\n        if (!results.isEmpty()) {\n            final RepositoryHandler repositories = scriptHandler.getRepositories();\n            final List<MavenArtifactRepository> mavenRepos = repositories.withType(MavenArtifactRepository.class);\n            final Set<String> repoUrls = Sets.newLinkedHashSet();\n\n            for (final Result result : results) {\n                applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                    @Override\n                    public void run() {\n                        result.found.execute(new PluginResolveContext() {\n                            public void addLegacy(PluginId pluginId, final String m2RepoUrl, Object dependencyNotation) {\n                                legacyActualPluginIds.put(result, pluginId);\n                                repoUrls.add(m2RepoUrl);\n                                scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION, dependencyNotation);\n                            }\n\n                            @Override\n                            public void add(PotentialPlugin<?> plugin) {\n                                pluginImpls.put(result, plugin);\n                            }\n                        });\n                    }\n                });\n            }\n\n            for (final String m2RepoUrl : repoUrls) {\n                boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() {\n                    public boolean isSatisfiedBy(MavenArtifactRepository element) {\n                        return element.getUrl().toString().equals(m2RepoUrl);\n                    }\n                });\n                if (!repoExists) {\n                    repositories.maven(new Action<MavenArtifactRepository>() {\n                        public void execute(MavenArtifactRepository mavenArtifactRepository) {\n                            mavenArtifactRepository.setUrl(m2RepoUrl);\n                        }\n                    });\n                }\n            }\n        }\n\n        defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n\n        // We're making an assumption here that the target's plugin registry is backed classLoaderScope.\n        // Because we are only build.gradle files right now, this holds.\n        // It won't for arbitrary scripts though.\n        for (final Map.Entry<Result, PluginId> entry : legacyActualPluginIds.entrySet()) {\n            final PluginRequest request = entry.getKey().request;\n            final PluginId id = entry.getValue();\n            applyPlugin(request, id, new Runnable() {\n                public void run() {\n                    target.apply(id.toString());\n                }\n            });\n        }\n\n        for (final Map.Entry<Result, PotentialPlugin<?>> entry : pluginImpls.entrySet()) {\n            final Result result = entry.getKey();\n            applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                public void run() {\n                    Class<?> pluginClass = entry.getValue().asClass();\n                    target.apply(pluginClass);\n                }\n            });\n        }\n    }","id":64170,"modified_method":"public void applyPlugins(Collection<? extends PluginRequest> requests, final ScriptHandler scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) {\n        if (requests.isEmpty()) {\n            defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n            return;\n        }\n\n        if (target == null) {\n            throw new IllegalStateException(\"Plugin target is 'null' and there are plugin requests\");\n        }\n\n        final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope);\n\n        List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() {\n            public Result transform(PluginRequest request) {\n                return resolveToFoundResult(effectivePluginResolver, request);\n            }\n        });\n\n        // Could be different to ids in the requests as they may be unqualified\n        final Map<Result, PluginId> legacyActualPluginIds = Maps.newLinkedHashMap();\n        final Map<Result, PotentialPluginWithId<?>> pluginImpls = Maps.newLinkedHashMap();\n\n        if (!results.isEmpty()) {\n            final RepositoryHandler repositories = scriptHandler.getRepositories();\n            final List<MavenArtifactRepository> mavenRepos = repositories.withType(MavenArtifactRepository.class);\n            final Set<String> repoUrls = Sets.newLinkedHashSet();\n\n            for (final Result result : results) {\n                applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                    @Override\n                    public void run() {\n                        result.found.execute(new PluginResolveContext() {\n                            public void addLegacy(PluginId pluginId, final String m2RepoUrl, Object dependencyNotation) {\n                                legacyActualPluginIds.put(result, pluginId);\n                                repoUrls.add(m2RepoUrl);\n                                scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION, dependencyNotation);\n                            }\n\n                            @Override\n                            public void add(PotentialPluginWithId<?> plugin) {\n                                pluginImpls.put(result, plugin);\n                            }\n                        });\n                    }\n                });\n            }\n\n            for (final String m2RepoUrl : repoUrls) {\n                boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() {\n                    public boolean isSatisfiedBy(MavenArtifactRepository element) {\n                        return element.getUrl().toString().equals(m2RepoUrl);\n                    }\n                });\n                if (!repoExists) {\n                    repositories.maven(new Action<MavenArtifactRepository>() {\n                        public void execute(MavenArtifactRepository mavenArtifactRepository) {\n                            mavenArtifactRepository.setUrl(m2RepoUrl);\n                        }\n                    });\n                }\n            }\n        }\n\n        defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n\n        // We're making an assumption here that the target's plugin registry is backed classLoaderScope.\n        // Because we are only build.gradle files right now, this holds.\n        // It won't for arbitrary scripts though.\n        for (final Map.Entry<Result, PluginId> entry : legacyActualPluginIds.entrySet()) {\n            final PluginRequest request = entry.getKey().request;\n            final PluginId id = entry.getValue();\n            applyPlugin(request, id, new Runnable() {\n                public void run() {\n                    target.apply(id.toString());\n                }\n            });\n        }\n\n        for (final Map.Entry<Result, PotentialPluginWithId<?>> entry : pluginImpls.entrySet()) {\n            final Result result = entry.getKey();\n            applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                public void run() {\n                    target.apply(entry.getValue());\n                }\n            });\n        }\n    }","commit_id":"252cf94af7c1e8b6e443187590229ac25c8e8b5e","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        if (pluginRequest.getId().equals(NOOP_PLUGIN_ID)) {\n            result.found(\"noop resolver\", new SimplePluginResolution(PotentialPluginWithId.of(NOOP_PLUGIN_ID, new PotentialPlugin<NoopPlugin>(){\n                @Override\n                public Class<NoopPlugin> asClass() {\n                    return NoopPlugin.class;\n                }\n\n                @Override\n                public boolean isImperative() {\n                    return true;\n                }\n\n                @Override\n                public boolean isHasRules() {\n                    return false;\n                }\n\n                @Override\n                public Type getType() {\n                    return Type.IMPERATIVE_CLASS;\n                }\n            })));\n        }\n    }","id":64171,"modified_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        if (pluginRequest.getId().equals(NOOP_PLUGIN_ID)) {\n            result.found(\"noop resolver\", new SimplePluginResolution(PotentialPluginWithId.of(NOOP_PLUGIN_ID, pluginRegistry.inspect(NoopPlugin.class))));\n        }\n    }","commit_id":"252cf94af7c1e8b6e443187590229ac25c8e8b5e","url":"https://github.com/gradle/gradle"},{"original_method":"private void addDefaultResolvers(List<PluginResolver> resolvers) {\n        resolvers.add(new NoopPluginResolver());\n        resolvers.add(new CorePluginResolver(documentationRegistry, pluginRegistry));\n        resolvers.add(pluginResolutionServiceResolver);\n    }","id":64172,"modified_method":"private void addDefaultResolvers(List<PluginResolver> resolvers) {\n        resolvers.add(new NoopPluginResolver(pluginRegistry));\n        resolvers.add(new CorePluginResolver(documentationRegistry, pluginRegistry));\n        resolvers.add(pluginResolutionServiceResolver);\n    }","commit_id":"252cf94af7c1e8b6e443187590229ac25c8e8b5e","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void execute(PluginResolveContext pluginResolveContext) {\n        ClassPath classPath = classPathFactory.create();\n        ClassLoaderScope loaderScope = parent.createChild();\n        loaderScope.local(classPath);\n        loaderScope.lock();\n        PluginRegistry pluginRegistry = new DefaultPluginRegistry(pluginInspector, loaderScope.getLocalClassLoader());\n        PotentialPluginWithId lookup = pluginRegistry.lookup(pluginId.toString());\n        if (lookup == null) {\n            throw new UnknownPluginException(\"Plugin with id '\" + pluginId + \"' not found.\");\n        }\n        pluginResolveContext.add(pluginId, lookup.asClass());\n    }","id":64173,"modified_method":"@Override\n    public void execute(PluginResolveContext pluginResolveContext) {\n        ClassPath classPath = classPathFactory.create();\n        ClassLoaderScope loaderScope = parent.createChild();\n        loaderScope.local(classPath);\n        loaderScope.lock();\n        PluginRegistry pluginRegistry = new DefaultPluginRegistry(pluginInspector, loaderScope.getLocalClassLoader());\n        PotentialPluginWithId lookup = pluginRegistry.lookup(pluginId.toString());\n        if (lookup == null) {\n            throw new UnknownPluginException(\"Plugin with id '\" + pluginId + \"' not found.\");\n        }\n        pluginResolveContext.add(lookup);\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) {\n        PluginId id = pluginRequest.getId();\n\n        if (!id.isQualified() || id.inNamespace(DefaultPluginManager.CORE_PLUGIN_NAMESPACE)) {\n            PotentialPluginWithId lookup = pluginRegistry.lookup(id.getName());\n            if (lookup == null) {\n                result.notFound(getDescription(), String.format(\"not a core plugin, please see %s for available core plugins\", documentationRegistry.getDocumentationFor(\"standard_plugins\")));\n            } else {\n                Class<?> typeForId = lookup.asClass();\n                if (pluginRequest.getVersion() != null) {\n                    throw new InvalidPluginRequestException(pluginRequest,\n                            \"Plugin '\" + id + \"' is a core Gradle plugin, which cannot be specified with a version number. \"\n                                    + \"Such plugins are versioned as part of Gradle. Please remove the version number from the declaration.\"\n                    );\n                }\n                result.found(getDescription(), new SimplePluginResolution(id, typeForId));\n            }\n        } else {\n            result.notFound(getDescription(), String.format(\"plugin is not in '%s' namespace\", DefaultPluginManager.CORE_PLUGIN_NAMESPACE));\n        }\n    }","id":64174,"modified_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) {\n        PluginId id = pluginRequest.getId();\n\n        if (!id.isQualified() || id.inNamespace(DefaultPluginManager.CORE_PLUGIN_NAMESPACE)) {\n            PotentialPluginWithId lookup = pluginRegistry.lookup(id.getName());\n            if (lookup == null) {\n                result.notFound(getDescription(), String.format(\"not a core plugin, please see %s for available core plugins\", documentationRegistry.getDocumentationFor(\"standard_plugins\")));\n            } else {\n                if (pluginRequest.getVersion() != null) {\n                    throw new InvalidPluginRequestException(pluginRequest,\n                            \"Plugin '\" + id + \"' is a core Gradle plugin, which cannot be specified with a version number. \"\n                                    + \"Such plugins are versioned as part of Gradle. Please remove the version number from the declaration.\"\n                    );\n                }\n                result.found(getDescription(), new SimplePluginResolution(lookup));\n            }\n        } else {\n            result.notFound(getDescription(), String.format(\"plugin is not in '%s' namespace\", DefaultPluginManager.CORE_PLUGIN_NAMESPACE));\n        }\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public void applyPlugins(Collection<? extends PluginRequest> requests, final ScriptHandler scriptHandler, @Nullable final PluginManager target, ClassLoaderScope classLoaderScope) {\n        if (requests.isEmpty()) {\n            defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n            return;\n        }\n\n        if (target == null) {\n            throw new IllegalStateException(\"Plugin target is 'null' and there are plugin requests\");\n        }\n\n        final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope);\n\n        List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() {\n            public Result transform(PluginRequest request) {\n                return resolveToFoundResult(effectivePluginResolver, request);\n            }\n        });\n\n        // Could be different to ids in the requests as they may be unqualified\n        final Map<Result, PluginId> legacyActualPluginIds = Maps.newLinkedHashMap();\n        final Map<Result, Class<?>> pluginImpls = Maps.newLinkedHashMap();\n\n        if (!results.isEmpty()) {\n            final RepositoryHandler repositories = scriptHandler.getRepositories();\n            final List<MavenArtifactRepository> mavenRepos = repositories.withType(MavenArtifactRepository.class);\n            final Set<String> repoUrls = Sets.newLinkedHashSet();\n\n            for (final Result result : results) {\n                applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                    @Override\n                    public void run() {\n                        result.found.execute(new PluginResolveContext() {\n                            public void addLegacy(PluginId pluginId, final String m2RepoUrl, Object dependencyNotation) {\n                                legacyActualPluginIds.put(result, pluginId);\n                                repoUrls.add(m2RepoUrl);\n                                scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION, dependencyNotation);\n                            }\n\n                            @Override\n                            public void add(PluginId pluginId, Class<?> implementationClass) {\n                                pluginImpls.put(result, implementationClass);\n                            }\n                        });\n                    }\n                });\n            }\n\n            for (final String m2RepoUrl : repoUrls) {\n                boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() {\n                    public boolean isSatisfiedBy(MavenArtifactRepository element) {\n                        return element.getUrl().toString().equals(m2RepoUrl);\n                    }\n                });\n                if (!repoExists) {\n                    repositories.maven(new Action<MavenArtifactRepository>() {\n                        public void execute(MavenArtifactRepository mavenArtifactRepository) {\n                            mavenArtifactRepository.setUrl(m2RepoUrl);\n                        }\n                    });\n                }\n            }\n        }\n\n        defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n\n        // We're making an assumption here that the target's plugin registry is backed classLoaderScope.\n        // Because we are only build.gradle files right now, this holds.\n        // It won't for arbitrary scripts though.\n        for (final Map.Entry<Result, PluginId> entry : legacyActualPluginIds.entrySet()) {\n            final PluginRequest request = entry.getKey().request;\n            final PluginId id = entry.getValue();\n            applyPlugin(request, id, new Runnable() {\n                public void run() {\n                    target.apply(id.toString());\n                }\n            });\n        }\n\n        for (final Map.Entry<Result, Class<?>> entry : pluginImpls.entrySet()) {\n            final Result result = entry.getKey();\n            applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                public void run() {\n                    Class<?> pluginClass = entry.getValue();\n                    target.apply(pluginClass);\n                }\n            });\n        }\n    }","id":64175,"modified_method":"public void applyPlugins(Collection<? extends PluginRequest> requests, final ScriptHandler scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) {\n        if (requests.isEmpty()) {\n            defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n            return;\n        }\n\n        if (target == null) {\n            throw new IllegalStateException(\"Plugin target is 'null' and there are plugin requests\");\n        }\n\n        final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope);\n\n        List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() {\n            public Result transform(PluginRequest request) {\n                return resolveToFoundResult(effectivePluginResolver, request);\n            }\n        });\n\n        // Could be different to ids in the requests as they may be unqualified\n        final Map<Result, PluginId> legacyActualPluginIds = Maps.newLinkedHashMap();\n        final Map<Result, PotentialPlugin<?>> pluginImpls = Maps.newLinkedHashMap();\n\n        if (!results.isEmpty()) {\n            final RepositoryHandler repositories = scriptHandler.getRepositories();\n            final List<MavenArtifactRepository> mavenRepos = repositories.withType(MavenArtifactRepository.class);\n            final Set<String> repoUrls = Sets.newLinkedHashSet();\n\n            for (final Result result : results) {\n                applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                    @Override\n                    public void run() {\n                        result.found.execute(new PluginResolveContext() {\n                            public void addLegacy(PluginId pluginId, final String m2RepoUrl, Object dependencyNotation) {\n                                legacyActualPluginIds.put(result, pluginId);\n                                repoUrls.add(m2RepoUrl);\n                                scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION, dependencyNotation);\n                            }\n\n                            @Override\n                            public void add(PotentialPlugin<?> plugin) {\n                                pluginImpls.put(result, plugin);\n                            }\n                        });\n                    }\n                });\n            }\n\n            for (final String m2RepoUrl : repoUrls) {\n                boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() {\n                    public boolean isSatisfiedBy(MavenArtifactRepository element) {\n                        return element.getUrl().toString().equals(m2RepoUrl);\n                    }\n                });\n                if (!repoExists) {\n                    repositories.maven(new Action<MavenArtifactRepository>() {\n                        public void execute(MavenArtifactRepository mavenArtifactRepository) {\n                            mavenArtifactRepository.setUrl(m2RepoUrl);\n                        }\n                    });\n                }\n            }\n        }\n\n        defineScriptHandlerClassScope(scriptHandler, classLoaderScope);\n\n        // We're making an assumption here that the target's plugin registry is backed classLoaderScope.\n        // Because we are only build.gradle files right now, this holds.\n        // It won't for arbitrary scripts though.\n        for (final Map.Entry<Result, PluginId> entry : legacyActualPluginIds.entrySet()) {\n            final PluginRequest request = entry.getKey().request;\n            final PluginId id = entry.getValue();\n            applyPlugin(request, id, new Runnable() {\n                public void run() {\n                    target.apply(id.toString());\n                }\n            });\n        }\n\n        for (final Map.Entry<Result, PotentialPlugin<?>> entry : pluginImpls.entrySet()) {\n            final Result result = entry.getKey();\n            applyPlugin(result.request, result.found.getPluginId(), new Runnable() {\n                public void run() {\n                    Class<?> pluginClass = entry.getValue().asClass();\n                    target.apply(pluginClass);\n                }\n            });\n        }\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public void apply(final Object target) {\n            DefaultServiceRegistry services = new DefaultServiceRegistry();\n            services.add(ScriptPluginFactory.class, DefaultScriptPluginFactory.this);\n            services.add(ScriptHandlerFactory.class, scriptHandlerFactory);\n            services.add(ClassLoaderScope.class, targetScope);\n            services.add(LoggingManagerInternal.class, loggingManagerFactory.create());\n            services.add(Instantiator.class, instantiator);\n            services.add(ScriptHandler.class, scriptHandler);\n            services.add(FileLookup.class, fileLookup);\n            services.add(ModelRuleSourceDetector.class, modelRuleSourceDetector);\n\n            ScriptSource withImports = importsReader.withImports(scriptSource);\n\n            PluginDependenciesService pluginDependenciesService = new PluginDependenciesService(getSource());\n            services.add(PluginDependenciesService.class, pluginDependenciesService);\n\n            ScriptCompiler compiler = scriptCompilerFactory.createCompiler(withImports);\n            compiler.setClassloader(baseScope.getExportClassLoader());\n\n            boolean supportsPluginsBlock = ProjectScript.class.isAssignableFrom(scriptType);\n            String onPluginBlockError = supportsPluginsBlock ? null : \"Only Project build scripts can contain plugins {} blocks\";\n\n            PluginsAndBuildscriptTransformer scriptBlockTransformer = new PluginsAndBuildscriptTransformer(classpathClosureName, onPluginBlockError, documentationRegistry);\n\n            StatementExtractingScriptTransformer classpathScriptTransformer = new StatementExtractingScriptTransformer(classpathClosureName, scriptBlockTransformer);\n\n            compiler.setTransformer(classpathScriptTransformer);\n\n            ScriptRunner<? extends BasicScript> classPathScriptRunner = compiler.compile(scriptType);\n            classPathScriptRunner.getScript().init(target, services);\n            classPathScriptRunner.run();\n\n            List<PluginRequest> pluginRequests = pluginDependenciesService.getRequests();\n            PluginManager pluginManager = target instanceof PluginAwareInternal ? ((PluginAwareInternal) target).getPluginManager() : null;\n            pluginRequestApplicator.applyPlugins(pluginRequests, scriptHandler, pluginManager, targetScope);\n\n            compiler.setClassloader(targetScope.getLocalClassLoader());\n\n            BuildScriptTransformer transformer = new BuildScriptTransformer(\"no_\" + classpathScriptTransformer.getId(), classpathScriptTransformer.invert(), scriptSource);\n            compiler.setTransformer(transformer);\n\n            // TODO - find a less tangled way of getting this in here, see the verifier impl for why it's needed\n            compiler.setVerifier(new ClosureCreationInterceptingVerifier());\n\n            ScriptRunner<? extends BasicScript> runner = compiler.compile(scriptType);\n\n            BasicScript script = runner.getScript();\n            script.init(target, services);\n            if (ownerScript && target instanceof ScriptAware) {\n                ((ScriptAware) target).setScript(script);\n            }\n            runner.run();\n        }","id":64176,"modified_method":"public void apply(final Object target) {\n            DefaultServiceRegistry services = new DefaultServiceRegistry();\n            services.add(ScriptPluginFactory.class, DefaultScriptPluginFactory.this);\n            services.add(ScriptHandlerFactory.class, scriptHandlerFactory);\n            services.add(ClassLoaderScope.class, targetScope);\n            services.add(LoggingManagerInternal.class, loggingManagerFactory.create());\n            services.add(Instantiator.class, instantiator);\n            services.add(ScriptHandler.class, scriptHandler);\n            services.add(FileLookup.class, fileLookup);\n            services.add(ModelRuleSourceDetector.class, modelRuleSourceDetector);\n\n            ScriptSource withImports = importsReader.withImports(scriptSource);\n\n            PluginDependenciesService pluginDependenciesService = new PluginDependenciesService(getSource());\n            services.add(PluginDependenciesService.class, pluginDependenciesService);\n\n            ScriptCompiler compiler = scriptCompilerFactory.createCompiler(withImports);\n            compiler.setClassloader(baseScope.getExportClassLoader());\n\n            boolean supportsPluginsBlock = ProjectScript.class.isAssignableFrom(scriptType);\n            String onPluginBlockError = supportsPluginsBlock ? null : \"Only Project build scripts can contain plugins {} blocks\";\n\n            PluginsAndBuildscriptTransformer scriptBlockTransformer = new PluginsAndBuildscriptTransformer(classpathClosureName, onPluginBlockError, documentationRegistry);\n\n            StatementExtractingScriptTransformer classpathScriptTransformer = new StatementExtractingScriptTransformer(classpathClosureName, scriptBlockTransformer);\n\n            compiler.setTransformer(classpathScriptTransformer);\n\n            ScriptRunner<? extends BasicScript> classPathScriptRunner = compiler.compile(scriptType);\n            classPathScriptRunner.getScript().init(target, services);\n            classPathScriptRunner.run();\n\n            List<PluginRequest> pluginRequests = pluginDependenciesService.getRequests();\n            PluginManagerInternal pluginManager = target instanceof PluginAwareInternal ? ((PluginAwareInternal) target).getPluginManager() : null;\n            pluginRequestApplicator.applyPlugins(pluginRequests, scriptHandler, pluginManager, targetScope);\n\n            compiler.setClassloader(targetScope.getLocalClassLoader());\n\n            BuildScriptTransformer transformer = new BuildScriptTransformer(\"no_\" + classpathScriptTransformer.getId(), classpathScriptTransformer.invert(), scriptSource);\n            compiler.setTransformer(transformer);\n\n            // TODO - find a less tangled way of getting this in here, see the verifier impl for why it's needed\n            compiler.setVerifier(new ClosureCreationInterceptingVerifier());\n\n            ScriptRunner<? extends BasicScript> runner = compiler.compile(scriptType);\n\n            BasicScript script = runner.getScript();\n            script.init(target, services);\n            if (ownerScript && target instanceof ScriptAware) {\n                ((ScriptAware) target).setScript(script);\n            }\n            runner.run();\n        }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        if (pluginRequest.getId().equals(NOOP_PLUGIN_ID)) {\n            result.found(\"noop resolver\", new SimplePluginResolution(NOOP_PLUGIN_ID, NoopPlugin.class));\n        }\n    }","id":64177,"modified_method":"public void resolve(PluginRequest pluginRequest, PluginResolutionResult result) throws InvalidPluginRequestException {\n        if (pluginRequest.getId().equals(NOOP_PLUGIN_ID)) {\n            result.found(\"noop resolver\", new SimplePluginResolution(PotentialPluginWithId.of(NOOP_PLUGIN_ID, new PotentialPlugin<NoopPlugin>(){\n                @Override\n                public Class<NoopPlugin> asClass() {\n                    return NoopPlugin.class;\n                }\n\n                @Override\n                public boolean isImperative() {\n                    return true;\n                }\n\n                @Override\n                public boolean isHasRules() {\n                    return false;\n                }\n\n                @Override\n                public Type getType() {\n                    return Type.IMPERATIVE_CLASS;\n                }\n            })));\n        }\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public SimplePluginResolution(PluginId pluginId, Class<?> pluginClass) {\n        this.pluginId = pluginId;\n        this.pluginClass = pluginClass;\n    }","id":64178,"modified_method":"public SimplePluginResolution(PotentialPluginWithId<?> plugin) {\n        this.plugin = plugin;\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"public PluginId getPluginId() {\n        return pluginId;\n    }","id":64179,"modified_method":"public PluginId getPluginId() {\n        return plugin.getPluginId();\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void execute(PluginResolveContext pluginResolveContext) {\n        pluginResolveContext.add(pluginId, pluginClass);\n    }","id":64180,"modified_method":"@Override\n    public void execute(PluginResolveContext pluginResolveContext) {\n        pluginResolveContext.add(plugin);\n    }","commit_id":"5bb9ccf5c93a1aba296c6638b5ef861679de5cb1","url":"https://github.com/gradle/gradle"},{"original_method":"private boolean showMessageBefore(MigrationStage stage) {\n    String mb = stage.messageBefore();\n    if (mb == null) return false;\n    int res = Messages.showDialog(mb, stage.title(), new String[]{\"Proceed\", \"Stop\"}, 0, Messages.getInformationIcon());\n    if (res != 0) {\n      Messages.showMessageDialog(\"You can continue migration later by executing MainMenu->Tools->Continue Migration to MPS 2.0\", \"Migration stopped\", Messages.getInformationIcon());\n      return true;\n    }\n    return false;\n  }","id":64181,"modified_method":"private boolean showMessageBefore(MigrationStage stage) {\n    String mb = stage.messageBefore();\n    if (mb == null) return true;\n\n    int res = Messages.showDialog(mb, stage.title(), new String[]{\"Proceed\", \"Stop\"}, 0, Messages.getInformationIcon());\n    return res == 0;\n  }","commit_id":"30278d1f59939822fc9e634c99b9f6513b95ad10","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean showMessageAfter(MigrationStage stage) {\n    String ma = stage.messageAfter();\n    if (ma == null) return true;\n\n    ma += \"\\n\\n\" + \"You can continue migration later by executing MainMenu->Tools->Continue Migration to MPS 2.0\";\n    int res = Messages.showDialog(ma, stage.title()+ \" finished\", new String[]{\"Force next step\", \"Stop\"}, 0, Messages.getInformationIcon());\n    if (res == 0) return true;\n\n    Messages.showMessageDialog(\"You can continue migration later by executing MainMenu->Tools->Continue Migration to MPS 2.0\", \"Migration stopped\", Messages.getInformationIcon());\n    return false;\n  }","id":64182,"modified_method":"private boolean showMessageAfter(MigrationStage stage) {\n    String ma = stage.messageAfter();\n    if (ma == null) return true;\n\n    int res = Messages.showDialog(ma, stage.title() + \" finished\", new String[]{\"Force next step\", \"Stop\"}, 0, Messages.getInformationIcon());\n    return res == 0;\n  }","commit_id":"30278d1f59939822fc9e634c99b9f6513b95ad10","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void migrate() {\n    final MigrationState msComponent = myProject.getComponent(MigrationState.class);\n    final MPSProject mpsProject = myProject.getComponent(MPSProject.class);\n\n    for (MState state : MState.values()) {\n      if (state == MState.DONE) break;\n      if (msComponent.getMigrationState() == state) {\n        final MState next = MState.values()[state.ordinal() + 1];\n        final MigrationStage stage = next.getStage();\n\n        if (stage == null) {\n          msComponent.setMigrationState(next);\n          continue;\n        }\n\n        if (showMessageBefore(stage)) return;\n\n        final Runnable stageRunnable = new StageExecutor(stage, mpsProject);\n        if (stage.needsCommand()) {\n          ModelAccess.instance().runWriteActionInCommand(stageRunnable);\n        } else {\n          stageRunnable.run();\n        }\n\n        if (showMessageAfter(stage)){\n          msComponent.setMigrationState(next);\n        }\n      }\n    }\n  }","id":64183,"modified_method":"public void migrate() {\n    final MigrationState msComponent = myProject.getComponent(MigrationState.class);\n    final MPSProject mpsProject = myProject.getComponent(MPSProject.class);\n\n    for (MState state : MState.values()) {\n      if (state == MState.DONE) break;\n      if (msComponent.getMigrationState() == state) {\n        final MState next = MState.values()[state.ordinal() + 1];\n        final MigrationStage stage = next.getStage();\n\n        if (stage == null) {\n          msComponent.setMigrationState(next);\n          continue;\n        }\n\n        if (!showMessageBefore(stage)) return;\n\n        final Runnable stageRunnable = new StageExecutor(stage, mpsProject);\n        if (stage.needsCommand()) {\n          ModelAccess.instance().runWriteActionInCommand(stageRunnable);\n        } else {\n          stageRunnable.run();\n        }\n\n        if (!showMessageAfter(stage)) return;\n\n        msComponent.setMigrationState(next);\n      }\n    }\n  }","commit_id":"30278d1f59939822fc9e634c99b9f6513b95ad10","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static Res reResolveStubRefs(MPSProject p) {\n    Res res = new Res();\n    boolean reloadNeeded = false;\n    Map<String, SModelReference> globalCache = new HashMap<String, SModelReference>();\n    for (IModule module : p.getModules()) {\n      Map<String, SModelReference> moduleCache = new HashMap<String, SModelReference>();\n\n      for (SModelDescriptor d : module.getOwnModelDescriptors()) {\n        if (!(d instanceof EditableSModelDescriptor)) continue;\n        if (!(SModelStereotype.isUserModel(d))) continue;\n\n        Set<SModelReference> toRemove = new HashSet<SModelReference>();\n        for (SNode node : d.getSModel().nodes()) {\n          for (SReference ref : node.getReferences()) {\n            SModelReference targetModel = ref.getTargetSModelReference();\n            if (targetModel == null) continue;\n\n            SModelId modelId = targetModel.getSModelId();\n            SNodeId nodeId = ref.getTargetNodeId();\n\n            if (modelId instanceof SModelId.RegularSModelId) continue;\n            if (ref.getTargetNode() != null) continue;\n\n            String oldId = ((SModelId.ForeignSModelId) modelId).getId();\n\n            SModelReference mRep = moduleCache.get(oldId);\n            SModelReference gRep = globalCache.get(oldId);\n\n            SModelReference replacement = null;\n            if (mRep != null) {\n              replacement = mRep;\n            } else if (gRep != null && module.getScope().getModelDescriptor(gRep) != null) {\n              moduleCache.put(oldId, gRep);\n              replacement = gRep;\n            } else {\n              replacement = resolveModelInModule(module, oldId, nodeId);\n              moduleCache.put(oldId, replacement);\n              if (replacement == null) {\n                replacement = resolveModelAnywhere(oldId, nodeId);\n                if (replacement != null) {\n                  ModuleReference moduleRef = SModelRepository.getInstance().getModelDescriptor(replacement).getModule().getModuleReference();\n                  module.addDependency(moduleRef, false);\n                  reloadNeeded = true;\n                }\n              }\n              globalCache.put(oldId, replacement);\n            }\n\n            if (replacement != null) {\n              toRemove.add(targetModel);\n\n              d.getSModel().addModelImport(replacement, false);\n              ref.setTargetSModelReference(replacement);\n\n              res.fixed++;\n            } else {\n              res.failed++;\n            }\n          }\n        }\n        for (SModelReference ref : toRemove) {\n          d.getSModel().deleteModelImport(ref);\n        }\n      }\n    }\n    if (reloadNeeded){\n      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());\n    }\n    return res;\n  }","id":64184,"modified_method":"private static Res reResolveStubRefs(MPSProject p) {\n    Res res = new Res();\n    boolean reloadNeeded = false;\n    Map<String, SModelReference> globalCache = new HashMap<String, SModelReference>();\n    for (IModule module : p.getModules()) {\n      Map<String, SModelReference> moduleCache = new HashMap<String, SModelReference>();\n\n      for (SModelDescriptor d : module.getOwnModelDescriptors()) {\n        if (!(d instanceof EditableSModelDescriptor)) continue;\n        if (!(SModelStereotype.isUserModel(d))) continue;\n\n        Set<SModelReference> toRemove = new HashSet<SModelReference>();\n        for (SNode node : d.getSModel().nodes()) {\n          for (SReference ref : node.getReferences()) {\n            SModelReference targetModel = ref.getTargetSModelReference();\n            if (targetModel == null) continue;\n\n            SModelId modelId = targetModel.getSModelId();\n            SNodeId nodeId = ref.getTargetNodeId();\n\n            if (modelId instanceof SModelId.RegularSModelId) continue;\n            if (ref.getTargetNode() != null) continue;\n\n            String oldId = ((SModelId.ForeignSModelId) modelId).getId();\n\n            SModelReference mRep = moduleCache.get(oldId);\n            SModelReference gRep = globalCache.get(oldId);\n\n            SModelReference replacement = null;\n            if (mRep != null) {\n              replacement = mRep;\n            } else if (gRep != null && module.getScope().getModelDescriptor(gRep) != null) {\n              moduleCache.put(oldId, gRep);\n              replacement = gRep;\n            } else {\n              replacement = resolveModelInModule(module, oldId, nodeId);\n              moduleCache.put(oldId, replacement);\n              if (replacement == null) {\n                replacement = resolveModelAnywhere(p, oldId, nodeId);\n                if (replacement != null) {\n                  ModuleReference moduleRef = SModelRepository.getInstance().getModelDescriptor(replacement).getModule().getModuleReference();\n                  module.addDependency(moduleRef, false);\n                  reloadNeeded = true;\n                }\n              }\n              globalCache.put(oldId, replacement);\n            }\n\n            if (replacement != null) {\n              toRemove.add(targetModel);\n\n              d.getSModel().addModelImport(replacement, false);\n              ref.setTargetSModelReference(replacement);\n\n              res.fixed++;\n            } else {\n              res.failed++;\n            }\n          }\n        }\n        for (SModelReference ref : toRemove) {\n          d.getSModel().deleteModelImport(ref);\n        }\n      }\n    }\n    if (reloadNeeded) {\n      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());\n    }\n    return res;\n  }","commit_id":"30278d1f59939822fc9e634c99b9f6513b95ad10","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void addMatchingProviders(final PsiElement position,\n                                           final List<Trinity<PsiReferenceProvider,ElementPattern,Double>> providerList,\n                                           final List<Trinity<PsiReferenceProvider,ElementPattern,Double>> ret) {\n    for(final Trinity<PsiReferenceProvider,ElementPattern,Double> pair:providerList) {\n      final ElementPattern ElementPattern = pair.getSecond();\n      if (ElementPattern == null || ElementPattern.accepts(position)) {\n        ret.add(pair);\n      }\n    }\n  }","id":64185,"modified_method":"private static void addMatchingProviders(final PsiElement position,\n                                           final List<Trinity<PsiReferenceProvider,ElementPattern,Double>> providerList,\n                                           final List<Trinity<PsiReferenceProvider,ElementPattern,Double>> ret) {\n    for(final Trinity<PsiReferenceProvider,ElementPattern,Double> pair:providerList) {\n      final ElementPattern pattern = pair.getSecond();\n      if (pattern == null || pattern.accepts(position)) {\n        ret.add(pair);\n      }\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addAcceptableReferenceProviders(@NotNull PsiElement position, @NotNull List<Trinity<PsiReferenceProvider, ElementPattern, Double>> list) {\n    if (!ReflectionCache.isInstance(position, myClass)) return;\n\n    String name = getName(position);\n    if (name != null) {\n      List<Trinity<PsiReferenceProvider, ElementPattern,Double>> psiReferenceProviders = myNamesToProvidersMap.get(name);\n\n      if (psiReferenceProviders != null) {\n        addMatchingProviders(position, psiReferenceProviders, list);\n      }\n\n      psiReferenceProviders = myNamesToProvidersMapInsensitive.get(name.toLowerCase());\n\n      if (psiReferenceProviders != null) {\n        addMatchingProviders(position, psiReferenceProviders, list);\n      }\n    }\n\n    addMatchingProviders(position, myProvidersWithoutNames, list);\n  }","id":64186,"modified_method":"public void addAcceptableReferenceProviders(@NotNull PsiElement position, @NotNull List<Trinity<PsiReferenceProvider, ElementPattern, Double>> list) {\n    if (!ReflectionCache.isInstance(position, myClass)) return;\n\n    String name = getName(position);\n    if (name != null) {\n      List<Trinity<PsiReferenceProvider, ElementPattern,Double>> psiReferenceProviders = myNamesToProvidersMap.get(name);\n\n      if (psiReferenceProviders != null) {\n        addMatchingProviders(position, psiReferenceProviders, list);\n      }\n\n      psiReferenceProviders = myNamesToProvidersMapInsensitive.get(name.toLowerCase());\n\n      if (psiReferenceProviders != null) {\n        addMatchingProviders(position, psiReferenceProviders, list);\n      }\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerProvider(@NonNls String[] names, ElementPattern filter, boolean caseSensitive, PsiReferenceProvider provider,\n                               final Double priority) {\n    if (names == null || names.length == 0) {\n      myProvidersWithoutNames.add(new Trinity<PsiReferenceProvider, ElementPattern,Double>(provider, filter, priority));\n    }\n    else {\n      final ConcurrentMap<String, CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>>> map = caseSensitive ? myNamesToProvidersMap : myNamesToProvidersMapInsensitive;\n\n      for (final String attributeName : names) {\n        CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>> psiReferenceProviders = map.get(attributeName);\n\n        if (psiReferenceProviders == null) {\n          psiReferenceProviders = ConcurrencyUtil.cacheOrGet(map, caseSensitive ? attributeName : attributeName.toLowerCase(), new CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>>());\n        }\n\n        psiReferenceProviders.add(new Trinity<PsiReferenceProvider, ElementPattern,Double>(provider, filter, priority));\n      }\n    }\n  }","id":64187,"modified_method":"public void registerProvider(@NonNls String[] names, ElementPattern filter, boolean caseSensitive, PsiReferenceProvider provider,\n                               final Double priority) {\n    final ConcurrentMap<String, CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>>> map = caseSensitive ? myNamesToProvidersMap : myNamesToProvidersMapInsensitive;\n\n    for (final String attributeName : names) {\n      CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>> psiReferenceProviders = map.get(attributeName);\n\n      if (psiReferenceProviders == null) {\n        psiReferenceProviders = ConcurrencyUtil.cacheOrGet(map, caseSensitive ? attributeName : attributeName.toLowerCase(), new CopyOnWriteArrayList<Trinity<PsiReferenceProvider, ElementPattern,Double>>());\n      }\n\n      psiReferenceProviders.add(new Trinity<PsiReferenceProvider, ElementPattern,Double>(provider, filter, priority));\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void append(StringBuilder builder, String indent) {\n    builder.append(myMethodName);\n    List<Field> params = ContainerUtil.findAll(getClass().getDeclaredFields(), new Condition<Field>() {\n      public boolean value(final Field field) {\n        return field.getName().startsWith(PARAMETER_FIELD_PREFIX);\n      }\n    });\n\n    builder.append(\"(\");\n    if (params.size() == 1) {\n      appendFieldValue(builder, params.get(0), indent);\n    } else if (!params.isEmpty()) {\n      boolean first = true;\n      for (final Field field : params) {\n        if (!first) {\n          builder.append(\", \");\n        }\n        first = false;\n        builder.append(field.getName().substring(PARAMETER_FIELD_PREFIX.length())).append(\"=\");\n        appendFieldValue(builder, field, indent);\n      }\n    }\n    builder.append(\")\");\n  }","id":64188,"modified_method":"public void append(StringBuilder builder, String indent) {\n    builder.append(myMethodName);\n    builder.append(\"(\");\n    appendParams(builder, indent);\n    builder.append(\")\");\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void appendValue(final StringBuilder builder, final String indent, final Object obj) {\n    if (obj instanceof ElementPattern) {\n      ((ElementPattern)obj).getCondition().append(builder, indent + \"  \");\n    } else if (obj instanceof Object[]) {\n      builder.append(\"[\");\n      boolean first = true;\n      for (final Object o : (Object[]) obj) {\n        if (!first) {\n          builder.append(\", \");\n        }\n        first = false;\n        appendValue(builder, indent, o);\n      }\n      builder.append(\"]\");\n    }\n    else {\n      builder.append(obj);\n    }\n  }","id":64189,"modified_method":"private static void appendValue(final StringBuilder builder, final String indent, final Object obj) {\n    if (obj instanceof ElementPattern) {\n      ((ElementPattern)obj).getCondition().append(builder, indent + \"  \");\n    } else if (obj instanceof Object[]) {\n      appendArray(builder, indent, (Object[])obj);\n    } else if (obj instanceof Collection) {\n      appendArray(builder, indent, ((Collection) obj).toArray());\n    }\n    else {\n      builder.append(obj);\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerXmlAttributeValueReferenceProvider(@Nullable @NonNls String[] attributeNames,\n                                                         @Nullable ElementFilter elementFilter,\n                                                         boolean caseSensitive,\n                                                         @NotNull PsiReferenceProvider provider) {\n    registerNamedReferenceProvider(\n      attributeNames,\n      elementFilter,\n      XmlAttributeValueProviderBinding.class,\n      XmlAttributeValue.class,\n      caseSensitive,\n      provider, DEFAULT_PRIORITY);\n  }","id":64190,"modified_method":"public void registerXmlAttributeValueReferenceProvider(@Nullable @NonNls String[] attributeNames,\n                                                         @Nullable ElementFilter elementFilter,\n                                                         boolean caseSensitive,\n                                                         @NotNull PsiReferenceProvider provider) {\n    registerXmlAttributeValueReferenceProvider(attributeNames, elementFilter, caseSensitive, provider, DEFAULT_PRIORITY);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ReferenceProvidersRegistry() {\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(XmlAttribute.class, new XmlAttributeManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(XmlComment.class, new XmlCommentManipulator());\n\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagManipulator());\n    registerManipulator(PsiDocTag.class, new PsiDocTagValueManipulator());\n\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n\n    PsiReferenceProvider propertiesReferenceProvider = new PropertiesReferenceProvider(false);\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, propertiesReferenceProvider);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), propertiesReferenceProvider\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(null,\n    new AndFilter(\n      new NotFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      new NotFilter(\n      new ScopeFilter(new ParentElementFilter(\n        new AndFilter(\n          new OrFilter(\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"directive.page\")),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"page\"))),\n          new NamespaceFilter(XmlUtil.JSP_URI)), 2)))), true, classListProvider, LOWER_PRIORITY);\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS) {\n      public boolean isAcceptable(final Object element, final PsiElement context) {\n        final boolean acceptable = super.isAcceptable(element, context);\n        if (acceptable) {\n          final Language language = ((XmlToken)element).getContainingFile().getLanguage();\n          return language != StdLanguages.JSP && language != StdLanguages.JSPX;\n        }\n        return false;\n      }\n    }, XmlToken.class, classListProvider, LOWER_PRIORITY);\n\n    final IdReferenceProvider idReferenceProvider = new IdReferenceProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      idReferenceProvider.getIdForAttributeNames(),\n      idReferenceProvider.getIdForFilter(),\n      true,\n      idReferenceProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlToken.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      HtmlReferenceProvider.getAttributeValues(),\n      HtmlReferenceProvider.getFilter(),\n      false,\n      provider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"href\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"include\")\n            ),\n            new NamespaceFilter(XmlUtil.XINCLUDE_URI)\n          ),\n          2\n        )\n      ),\n      true,\n      uriProvider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(\n      new ElementFilter() {\n        public boolean isAcceptable(Object element, PsiElement context) {\n          if (context instanceof PsiLiteralExpression) {\n            PsiLiteralExpression literalExpression = (PsiLiteralExpression) context;\n            final Map<String, Object> annotationParams = new HashMap<String, Object>();\n            annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null);\n            if (I18nUtil.mustBePropertyKey(literalExpression, annotationParams)) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        public boolean isClassAcceptable(Class hintClass) {\n          return true;\n        }\n      }, PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerTypeWithProvider(SCHEMA_PROVIDER, schemaReferencesProvider);\n\n    registerXmlAttributeValueReferenceProvider(\n      schemaReferencesProvider.getCandidateAttributeNamesForSchemaReferences(),\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(XmlUtil.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:type\"},\n      null,\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:noNamespaceSchemaLocation\",\"xsi:schemaLocation\"},\n      null,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"schemaLocation\",\"namespace\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SCHEMA_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"import\",\"include\",\"redefine\")\n            )\n          ), 2\n        )\n      ),\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      URIReferenceProvider.ELEMENT_FILTER,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"content\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new TextFilter(\"meta\")\n          ), 2\n        )\n      ),\n      new HtmlHttpEquivEncodingReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"encoding\"},\n      new ScopeFilter(new ParentElementFilter(new ClassFilter(XmlProcessingInstruction.class))),\n      new XmlEncodingReferenceProvider()\n    );\n    registerXmlAttributeValueReferenceProvider(new String[]{\"contentType\", \"pageEncoding\",},\n                                               new ScopeFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.JSP_URI), 2)),\n                                               new JspEncodingInAttributeReferenceProvider());\n  }","id":64191,"modified_method":"private ReferenceProvidersRegistry() {\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(XmlAttribute.class, new XmlAttributeManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(XmlComment.class, new XmlCommentManipulator());\n\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagManipulator());\n    registerManipulator(PsiDocTag.class, new PsiDocTagValueManipulator());\n\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n\n    PsiReferenceProvider propertiesReferenceProvider = new PropertiesReferenceProvider(false);\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, propertiesReferenceProvider);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), propertiesReferenceProvider\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(null,\n    new AndFilter(\n      new NotFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      new NotFilter(\n      new ScopeFilter(new ParentElementFilter(\n        new AndFilter(\n          new OrFilter(\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"directive.page\")),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"page\"))),\n          new NamespaceFilter(XmlUtil.JSP_URI)), 2)))), true, classListProvider, LOWER_PRIORITY);\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS) {\n      public boolean isAcceptable(final Object element, final PsiElement context) {\n        final boolean acceptable = super.isAcceptable(element, context);\n        if (acceptable) {\n          final Language language = ((XmlToken)element).getContainingFile().getLanguage();\n          return language != StdLanguages.JSP && language != StdLanguages.JSPX;\n        }\n        return false;\n      }\n    }, XmlToken.class, classListProvider, LOWER_PRIORITY);\n\n    final IdReferenceProvider idReferenceProvider = new IdReferenceProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      idReferenceProvider.getIdForAttributeNames(),\n      idReferenceProvider.getIdForFilter(),\n      true,\n      idReferenceProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlToken.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      HtmlReferenceProvider.getAttributeValues(),\n      HtmlReferenceProvider.getFilter(),\n      false,\n      provider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"href\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"include\")\n            ),\n            new NamespaceFilter(XmlUtil.XINCLUDE_URI)\n          ),\n          2\n        )\n      ),\n      true,\n      uriProvider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(\n      new ElementFilter() {\n        public boolean isAcceptable(Object element, PsiElement context) {\n          if (context instanceof PsiLiteralExpression) {\n            PsiLiteralExpression literalExpression = (PsiLiteralExpression) context;\n            final Map<String, Object> annotationParams = new HashMap<String, Object>();\n            annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null);\n            if (I18nUtil.mustBePropertyKey(literalExpression, annotationParams)) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        public boolean isClassAcceptable(Class hintClass) {\n          return true;\n        }\n      }, PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerTypeWithProvider(SCHEMA_PROVIDER, schemaReferencesProvider);\n\n    registerXmlAttributeValueReferenceProvider(\n      schemaReferencesProvider.getCandidateAttributeNamesForSchemaReferences(),\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(XmlUtil.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerReferenceProvider(xmlAttributeValue(xmlAttribute().withNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)).\n      withLocalName(\"type\"), schemaReferencesProvider);\n\n    registerReferenceProvider(xmlAttributeValue(xmlAttribute().withNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)).\n      withLocalName(\"noNamespaceSchemaLocation\", \"schemaLocation\"), uriProvider);\n\n    registerReferenceProvider(\n      xmlAttributeValue().withLocalName(\"schemaLocation\",\"namespace\").\n        withSuperParent(2,\n                        xmlTag().withNamespace(XmlUtil.SCHEMA_URIS).withLocalName(string().oneOf(\"import\", \"include\",\"redefine\"))),\n      uriProvider);\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      URIReferenceProvider.ELEMENT_FILTER,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"content\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new TextFilter(\"meta\")\n          ), 2\n        )\n      ),\n      new HtmlHttpEquivEncodingReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"encoding\"},\n      new ScopeFilter(new ParentElementFilter(new ClassFilter(XmlProcessingInstruction.class))),\n      new XmlEncodingReferenceProvider()\n    );\n    registerXmlAttributeValueReferenceProvider(new String[]{\"contentType\", \"pageEncoding\",},\n                                               new ScopeFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.JSP_URI), 2)),\n                                               new JspEncodingInAttributeReferenceProvider());\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerXmlTagReferenceProvider(@NonNls String[] names, @Nullable ElementFilter elementFilter,\n                                              boolean caseSensitive, @NotNull PsiReferenceProvider provider, double priority) {\n    registerNamedReferenceProvider(names, elementFilter, XmlTagProviderBinding.class,XmlTag.class,caseSensitive, provider, priority);\n  }","id":64192,"modified_method":"public void registerXmlTagReferenceProvider(@NonNls String[] names, @Nullable ElementFilter elementFilter,\n                                              boolean caseSensitive, @NotNull PsiReferenceProvider provider, double priority) {\n    if (names == null) {\n      registerReferenceProvider(xmlTag().and(new FilterPattern(elementFilter)), provider, priority);\n      return;\n    }\n\n\n    final StringPattern namePattern = caseSensitive ? string().oneOf(names) : string().oneOfIgnoreCase(names);\n    registerReferenceProvider(xmlTag().withLocalName(namePattern).and(new FilterPattern(elementFilter)), provider, priority);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void unregisterReferenceProvider(@NotNull Class scope, @NotNull PsiReferenceProvider provider) {\n    final ProviderBinding providerBinding = myBindingsMap.get(scope);\n    ((SimpleProviderBinding)providerBinding).unregisterProvider(provider, new FilterPattern(null));\n  }","id":64193,"modified_method":"public void unregisterReferenceProvider(@NotNull Class scope, @NotNull PsiReferenceProvider provider) {\n    final ProviderBinding providerBinding = myBindingsMap.get(scope);\n    providerBinding.unregisterProvider(provider);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerReferenceProvider(@Nullable ElementFilter elementFilter,\n                                        @NotNull Class scope,\n                                        @NotNull PsiReferenceProvider provider,\n                                        double priority) {\n    final FilterPattern pattern = new FilterPattern(elementFilter);\n    if (scope == XmlAttributeValue.class) {\n      registerXmlAttributeValueReferenceProvider(null, elementFilter, true, provider, priority);\n      return;\n    }\n    else if (scope == XmlTag.class) {\n      registerXmlTagReferenceProvider(null, elementFilter, false, provider, priority);\n      return;\n    }\n\n    while (true) {\n      final ProviderBinding providerBinding = myBindingsMap.get(scope);\n      if (providerBinding != null) {\n        ((SimpleProviderBinding)providerBinding).registerProvider(provider, pattern, priority);\n        return;\n      }\n\n      final SimpleProviderBinding binding = new SimpleProviderBinding(scope);\n      binding.registerProvider(provider, pattern, priority);\n      if (myBindingsMap.putIfAbsent(scope, binding) == null) break;\n    }\n  }","id":64194,"modified_method":"public void registerReferenceProvider(@Nullable ElementFilter elementFilter,\n                                        @NotNull Class scope,\n                                        @NotNull PsiReferenceProvider provider,\n                                        double priority) {\n    registerReferenceProvider(PlatformPatterns.psiElement(scope).and(new FilterPattern(elementFilter)), provider, priority);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerXmlAttributeValueReferenceProvider(@Nullable @NonNls String[] attributeNames,\n                                                         @Nullable ElementFilter elementFilter,\n                                                         boolean caseSensitive,\n                                                         @NotNull PsiReferenceProvider provider,\n                                                         double priority) {\n    registerNamedReferenceProvider(\n      attributeNames,\n      elementFilter,\n      XmlAttributeValueProviderBinding.class,\n      XmlAttributeValue.class,\n      caseSensitive,\n      provider, priority);\n  }","id":64195,"modified_method":"public void registerXmlAttributeValueReferenceProvider(@Nullable @NonNls String[] attributeNames,\n                                                         @Nullable ElementFilter elementFilter,\n                                                         boolean caseSensitive,\n                                                         @NotNull PsiReferenceProvider provider,\n                                                         double priority) {\n    if (attributeNames == null) {\n      registerReferenceProvider(xmlAttributeValue().and(new FilterPattern(elementFilter)), provider, priority);\n      return;\n    }\n\n    final StringPattern namePattern = caseSensitive ? string().oneOf(attributeNames) : string().oneOfIgnoreCase(attributeNames);\n    registerReferenceProvider(xmlAttributeValue().withLocalName(namePattern).and(new FilterPattern(elementFilter)), provider, priority);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void registerNamedReferenceProvider(final String[] names, final NamedObjectProviderBinding binding,\n                                              final Class scopeClass,\n                                              final boolean caseSensitive,\n                                              final PsiReferenceProvider provider, final double priority, final ElementPattern pattern) {\n    NamedObjectProviderBinding providerBinding = (NamedObjectProviderBinding)myBindingsMap.get(scopeClass);\n\n    if (providerBinding == null) {\n      providerBinding = (NamedObjectProviderBinding)ConcurrencyUtil.cacheOrGet(myBindingsMap, scopeClass, binding);\n    }\n\n    providerBinding.registerProvider(names, pattern, caseSensitive, provider, priority);\n  }","id":64196,"modified_method":"private void registerNamedReferenceProvider(final String[] names, final NamedObjectProviderBinding binding,\n                                              final Class scopeClass,\n                                              final boolean caseSensitive,\n                                              final PsiReferenceProvider provider, final double priority, final ElementPattern pattern) {\n    NamedObjectProviderBinding providerBinding = myNamedBindingsMap.get(scopeClass);\n\n    if (providerBinding == null) {\n      providerBinding = ConcurrencyUtil.cacheOrGet(myNamedBindingsMap, scopeClass, binding);\n    }\n\n    providerBinding.registerProvider(names, pattern, caseSensitive, provider, priority);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private List<Trinity<PsiReferenceProvider,ElementPattern,Double>> getPairsByElement(@NotNull PsiElement element, @NotNull Class clazz) {\n    assert ReflectionCache.isInstance(element, clazz);\n\n    final ProviderBinding providerBinding = myBindingsMap.get(clazz);\n    if (providerBinding != null) {\n      List<Trinity<PsiReferenceProvider,ElementPattern,Double>> ret = new ArrayList<Trinity<PsiReferenceProvider,ElementPattern,Double>>(1);\n      providerBinding.addAcceptableReferenceProviders(element, ret);\n      return ret;\n    }\n\n    return Collections.emptyList();\n  }","id":64197,"modified_method":"@NotNull\n  private List<Trinity<PsiReferenceProvider,ElementPattern,Double>> getPairsByElement(@NotNull PsiElement element, @NotNull Class clazz) {\n    assert ReflectionCache.isInstance(element, clazz);\n\n    final SimpleProviderBinding simpleBinding = myBindingsMap.get(clazz);\n    final NamedObjectProviderBinding namedBinding = myNamedBindingsMap.get(clazz);\n    if (simpleBinding == null && namedBinding == null) return Collections.emptyList();\n\n    List<Trinity<PsiReferenceProvider,ElementPattern,Double>> ret = new SmartList<Trinity<PsiReferenceProvider,ElementPattern,Double>>();\n    if (simpleBinding != null) {\n      simpleBinding.addAcceptableReferenceProviders(element, ret);\n    }\n    if (namedBinding != null) {\n      namedBinding.addAcceptableReferenceProviders(element, ret);\n    }\n    return ret;\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public <T extends PsiElement> void registerReferenceProvider(@NotNull ElementPattern<T> pattern, @NotNull PsiReferenceProvider provider, double priority) {\n    final Class scope = pattern.getCondition().getInitialCondition().getAcceptedClass();\n    final PsiNamePatternCondition<?> nameCondition = ContainerUtil.findInstance(pattern.getCondition().getConditions(), PsiNamePatternCondition.class);\n    if (nameCondition != null) {\n      final ValuePatternCondition<String> valueCondition =\n        ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(), ValuePatternCondition.class);\n      if (valueCondition != null) {\n        final Collection<String> strings = valueCondition.getValues();\n        registerNamedReferenceProvider(strings.toArray(new String[strings.size()]), new NamedObjectProviderBinding(scope) {\n          protected String getName(final PsiElement position) {\n            return nameCondition.getPropertyValue(position);\n          }\n        }, scope, true, provider, priority, pattern);\n        return;\n      }\n\n      final CaseInsensitiveValuePatternCondition ciCondition =\n        ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(), CaseInsensitiveValuePatternCondition.class);\n      if (ciCondition != null) {\n        registerNamedReferenceProvider(ciCondition.getValues(), new NamedObjectProviderBinding(scope) {\n          @Nullable\n          protected String getName(final PsiElement position) {\n            return nameCondition.getPropertyValue(position);\n          }\n        }, scope, false, provider, priority, pattern);\n        return;\n      }\n    }\n\n\n    while (true) {\n      final ProviderBinding providerBinding = myBindingsMap.get(scope);\n      if (providerBinding != null) {\n        ((SimpleProviderBinding)providerBinding).registerProvider(provider, pattern, priority);\n        return;\n      }\n\n      final SimpleProviderBinding binding = new SimpleProviderBinding(scope);\n      binding.registerProvider(provider, pattern, priority);\n      if (myBindingsMap.putIfAbsent(scope, binding) == null) break;\n    }\n  }","id":64198,"modified_method":"public <T extends PsiElement> void registerReferenceProvider(@NotNull ElementPattern<T> pattern, @NotNull PsiReferenceProvider provider, double priority) {\n    final Class scope = pattern.getCondition().getInitialCondition().getAcceptedClass();\n    final PsiNamePatternCondition<?> nameCondition = ContainerUtil.findInstance(pattern.getCondition().getConditions(), PsiNamePatternCondition.class);\n    if (nameCondition != null) {\n      final ValuePatternCondition<String> valueCondition =\n        ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(), ValuePatternCondition.class);\n      if (valueCondition != null) {\n        final Collection<String> strings = valueCondition.getValues();\n        registerNamedReferenceProvider(strings.toArray(new String[strings.size()]), new NamedObjectProviderBinding(scope) {\n          protected String getName(final PsiElement position) {\n            return nameCondition.getPropertyValue(position);\n          }\n        }, scope, true, provider, priority, pattern);\n        return;\n      }\n\n      final CaseInsensitiveValuePatternCondition ciCondition =\n        ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(), CaseInsensitiveValuePatternCondition.class);\n      if (ciCondition != null) {\n        registerNamedReferenceProvider(ciCondition.getValues(), new NamedObjectProviderBinding(scope) {\n          @Nullable\n          protected String getName(final PsiElement position) {\n            return nameCondition.getPropertyValue(position);\n          }\n        }, scope, false, provider, priority, pattern);\n        return;\n      }\n    }\n\n\n    while (true) {\n      final SimpleProviderBinding providerBinding = myBindingsMap.get(scope);\n      if (providerBinding != null) {\n        providerBinding.registerProvider(provider, pattern, priority);\n        return;\n      }\n\n      final SimpleProviderBinding binding = new SimpleProviderBinding(scope);\n      binding.registerProvider(provider, pattern, priority);\n      if (myBindingsMap.putIfAbsent(scope, binding) == null) break;\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void unregisterProvider(PsiReferenceProvider provider, @NotNull ElementPattern pattern) {\n    myProviderPairs.remove(Trinity.create(provider, pattern, ReferenceProvidersRegistry.DEFAULT_PRIORITY));\n  }","id":64199,"modified_method":"public void unregisterProvider(final PsiReferenceProvider provider) {\n    for (final Trinity<PsiReferenceProvider, ElementPattern, Double> trinity : new ArrayList<Trinity<PsiReferenceProvider, ElementPattern, Double>>(myProviderPairs)) {\n      if (trinity.first.equals(provider)) {\n        myProviderPairs.remove(trinity);\n      }\n    }\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Self withLocalName(final ElementPattern localName) {\n    return with(new PatternCondition<T>() {\n      public boolean accepts(@NotNull final T t, final MatchingContext matchingContext, @NotNull final TraverseContext traverseContext) {\n        return localName.getCondition().accepts(getLocalName(t), matchingContext, traverseContext);\n      }\n    });\n  }","id":64200,"modified_method":"public Self withLocalName(final ElementPattern<String> localName) {\n    return with(new PsiNamePatternCondition<T>(localName) {\n      public String getPropertyValue(@NotNull final Object o) {\n        return o instanceof XmlElement ? getLocalName((T)o) : null;\n      }\n    });\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static XmlAttributeValuePattern xmlAttributeValue(ElementPattern attributePattern) {\n    return xmlAttributeValue().withParent(attributePattern);\n  }","id":64201,"modified_method":"public static XmlAttributeValuePattern xmlAttributeValue(ElementPattern<? extends XmlAttribute> attributePattern) {\n    return xmlAttributeValue().withParent(attributePattern);\n  }","commit_id":"2c75626ef5b65181517ee785e00e9917a4b2f9cd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public Iterator<T> iterator() {\n    return new Iterator<T>() {\n      private QueueEntry<T> cursor = TOMB;\n      @Override\n      public boolean hasNext() {\n        return cursor.next != TOMB;\n      }\n\n      @Override\n      public T next() {\n        cursor = cursor.next;\n        return cursor.t;\n      }\n\n      @Override\n      public void remove() {\n        if (cursor == TOMB) throw new NoSuchElementException();\n        HashSetQueue.this.remove(cursor.t);\n      }\n    };\n  }","id":64202,"modified_method":"@NotNull\n  @Override\n  public ResettableIterator<T> iterator() {\n    return new ResettableIterator<T>() {\n      private QueueEntry<T> cursor = TOMB;\n      private long count;\n      @Override\n      public boolean hasNext() {\n        return cursor.next != TOMB;\n      }\n\n      @Override\n      public T next() {\n        cursor = cursor.next;\n        count++;\n        return cursor.t;\n      }\n\n      @Override\n      public void remove() {\n        if (cursor == TOMB) throw new NoSuchElementException();\n        HashSetQueue.this.remove(cursor.t);\n      }\n\n      @Override\n      public Object markPosition() {\n        return new IteratorPosition<T>(cursor, count);\n      }\n\n      @Override\n      public boolean resetPosition(Object p) {\n        @SuppressWarnings(\"unchecked\")\n        IteratorPosition<T> requested = (IteratorPosition<T>)p;\n\n        if (requested.count <= count) {\n          cursor = requested.cursor;\n          count = requested.count;\n          return true;\n        }\n        return false;\n      }\n    };\n  }","commit_id":"4d4be1e49047a22126bd2fcb94e70b7e540115af","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testAddingGetting() {\n    String element = \"1\";\n    myQueue.add(element);\n    assertEquals(1, myQueue.size());\n    assertFalse(myQueue.isEmpty());\n    CHECK.singleElement(myQueue, element);\n    assertSame(element, myQueue.poll());\n    testEmpty();\n    myQueue.add(\"2\");\n    assertEquals(1, myQueue.size());\n    myQueue.add(\"3\");\n    assertEquals(2, myQueue.size());\n    CHECK.compareAll(new Object[]{\"2\", \"3\"}, new ArrayList<String>(myQueue));\n    assertEquals(\"2\", myQueue.poll());\n    assertEquals(\"3\", myQueue.poll());\n    testEmpty();\n  }","id":64203,"modified_method":"public void testAddingGetting() {\n    String element = \"1\";\n    myQueue.add(element);\n    assertEquals(1, myQueue.size());\n    assertFalse(myQueue.isEmpty());\n    CHECK.singleElement(myQueue, element);\n    assertSame(element, myQueue.poll());\n    testEmpty();\n    myQueue.add(\"2\");\n    assertEquals(1, myQueue.size());\n    myQueue.add(\"3\");\n    assertEquals(2, myQueue.size());\n    CHECK.compareAll(new Object[]{\"2\", \"3\"}, new ArrayList<>(myQueue));\n    assertEquals(\"2\", myQueue.poll());\n    assertEquals(\"3\", myQueue.poll());\n    testEmpty();\n  }","commit_id":"4d4be1e49047a22126bd2fcb94e70b7e540115af","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"AllSubClassesLazyCollection(@NotNull Project project, @NotNull PsiClass baseClass) {\n      myBaseClass = baseClass;\n      projectScope = GlobalSearchScope.allScope(project);\n      // populate with at least one subclass\n      findNextSubclasses();\n    }","id":64204,"modified_method":"AllSubClassesLazyCollection(@NotNull Project project, @NotNull PsiClass baseClass) {\n      projectScope = GlobalSearchScope.allScope(project);\n      subClasses.add(ApplicationManager.getApplication().runReadAction((Computable<PsiAnchor>)() -> PsiAnchor.create(baseClass)));\n    }","commit_id":"4d4be1e49047a22126bd2fcb94e70b7e540115af","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    @Override\n    public Iterator<PsiClass> iterator() {\n      return new Iterator<PsiClass>() {\n        private final Iterator<PsiAnchor> subClassIterator = subClasses.iterator();\n\n        @Override\n        public boolean hasNext() {\n          synchronized (lock) {\n            if (subClassIterator.hasNext()) return true;\n          }\n\n          findNextSubclasses();\n\n          synchronized (lock) {\n            return subClassIterator.hasNext();\n          }\n        }\n\n        @Override\n        public PsiClass next() {\n          PsiAnchor next;\n          synchronized (lock) {\n            next = subClassIterator.next();\n          }\n          return ApplicationManager.getApplication().runReadAction((Computable<PsiClass>)() -> (PsiClass)next.retrieve());\n        }\n      };\n    }","id":64205,"modified_method":"@NotNull\n    @Override\n    public Iterator<PsiClass> iterator() {\n      return new Iterator<PsiClass>() {\n        private final Iterator<PsiAnchor> subClassIterator = subClasses.iterator(); // guarded by lock\n        {\n          synchronized (lock) {\n            subClassIterator.next(); //skip the baseClass which stored in the subClasses first element\n          }\n        }\n        @Override\n        public boolean hasNext() {\n          synchronized (lock) {\n            if (subClassIterator.hasNext()) return true;\n          }\n\n          processMoreSubclasses();\n\n          synchronized (lock) {\n            return subClassIterator.hasNext();\n          }\n        }\n\n        @Override\n        public PsiClass next() {\n          PsiAnchor next;\n          synchronized (lock) {\n            next = subClassIterator.next();\n          }\n          return ApplicationManager.getApplication().runReadAction((Computable<PsiClass>)() -> (PsiClass)next.retrieve());\n        }\n      };\n    }","commit_id":"4d4be1e49047a22126bd2fcb94e70b7e540115af","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static Iterable<PsiClass> getOrComputeSubClasses(@NotNull Project project, @NotNull PsiClass baseClass) {\n    ConcurrentMap<PsiClass, Iterable<PsiClass>> CACHE = HighlightingCaches.getInstance(project).ALL_SUB_CLASSES;\n    Iterable<PsiClass> cached = CACHE.get(baseClass);\n    if (cached == null) {\n      cached = computeAllSubClasses(project, baseClass); // it's almost empty now, no big deal\n      // for non-physical elements ignore the cache completely because non-physical elements created so often/unpredictably so I can't figure out when to clear caches in this case\n      if (ApplicationManager.getApplication().runReadAction((Computable<Boolean>)baseClass::isPhysical)) {\n        // make sure concurrent calls of this method always return the same collection to avoid expensive duplicate work\n        cached = ConcurrencyUtil.cacheOrGet(CACHE, baseClass, cached);\n      }\n    }\n    return cached;\n  }","id":64206,"modified_method":"@NotNull\n  private static Iterable<PsiClass> getOrComputeSubClasses(@NotNull Project project, @NotNull PsiClass baseClass) {\n    ConcurrentMap<PsiClass, Iterable<PsiClass>> map = HighlightingCaches.getInstance(project).ALL_SUB_CLASSES;\n    Iterable<PsiClass> cached = map.get(baseClass);\n    if (cached == null) {\n      // returns lazy collection of subclasses. Each call to next() leads to calculation of next batch of subclasses.\n      Iterable<PsiClass> computed = new AllSubClassesLazyCollection(project, baseClass); // it's empty now, no big deal\n      // for non-physical elements ignore the cache completely because non-physical elements created so often/unpredictably so I can't figure out when to clear caches in this case\n      boolean isPhysical = ApplicationManager.getApplication().runReadAction((Computable<Boolean>)baseClass::isPhysical);\n      // make sure concurrent calls of this method always return the same collection to avoid expensive duplicate work\n      cached = isPhysical ? ConcurrencyUtil.cacheOrGet(map, baseClass, computed) : computed;\n    }\n    return cached;\n  }","commit_id":"4d4be1e49047a22126bd2fcb94e70b7e540115af","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void onInvalidated(@NotNull TreeElement treeElement) {\n    treeElement.acceptTree(new RecursiveTreeElementWalkingVisitor() {\n      @Override\n      protected void visitNode(TreeElement element) {\n        List<Pair<Object, Processor<PsiElement>>> callbacks = element.getUserData(TRACK_INVALIDATION_KEY);\n        if (callbacks != null) {\n          for (Pair<Object, Processor<PsiElement>> pair : callbacks) {\n            Processor<PsiElement> callback = pair.second;\n            PsiElement psi = element.getPsi();\n            if (psi != null) callback.process(psi);\n          }\n        }\n      }\n    });\n  }","id":64207,"modified_method":"public static void onInvalidated(@NotNull TreeElement treeElement) {\n    treeElement.acceptTree(new RecursiveTreeElementWalkingVisitor(false) {\n      @Override\n      protected void visitNode(TreeElement element) {\n        List<Pair<Object, Processor<PsiElement>>> callbacks = element.getUserData(TRACK_INVALIDATION_KEY);\n        if (callbacks != null) {\n          for (Pair<Object, Processor<PsiElement>> pair : callbacks) {\n            Processor<PsiElement> callback = pair.second;\n            PsiElement psi = element.getPsi();\n            if (psi != null) callback.process(psi);\n          }\n        }\n        super.visitNode(element);\n      }\n    });\n  }","commit_id":"bab167569bf4aee33d185a9907abcc2c18481f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public <T extends PsiExpression> PsiType getType(@NotNull T expr, @NotNull Function<T, PsiType> f) {\n    PsiType type = myCalculatedTypes.get(expr);\n    if (type == null) {\n      type = f.fun(expr);\n      if (type == null) {\n        type = TypeConversionUtil.NULL_TYPE;\n      }\n      type = ConcurrencyUtil.cacheOrGet(myCalculatedTypes, expr, type);\n    }\n    if (!type.isValid()) {\n      if (expr.isValid()) {\n        PsiJavaCodeReferenceElement refInside = type instanceof PsiClassReferenceType ? ((PsiClassReferenceType)type).getReference() : null;\n        String typeinfo = type + \" (\" + type.getClass() + \")\" + (refInside == null ? \"\" : \"; ref inside: \"+refInside + \" (\"+refInside.getClass()+\") valid:\"+refInside.isValid());\n        LOG.error(\"Type is invalid: \" + typeinfo + \"; expr: '\" + expr + \"' (\" + expr.getClass() + \") is valid\");\n      }\n      else {\n        LOG.error(\"Expression: '\"+expr+\"' is invalid, must not be used for getType()\");\n      }\n    }\n\n    if (DebugUtil.DO_EXPENSIVE_CHECKS) {\n      if (type instanceof PsiClassReferenceType) {\n        PsiJavaCodeReferenceElement reference = ((PsiClassReferenceType)type).getReference();\n        ConcurrencyUtil.cacheOrGet(myCachedReferencesInPsiTypes, reference, type);\n        DebugUtil.trackInvalidation(reference, \"Reference inside PsiClassReferenceType was invalidated\", new Processor<PsiElement>() {\n          @Override\n          public boolean process(PsiElement element) {\n            PsiType cached = myCalculatedTypes.get(element);\n            if (cached != null) {\n              LOG.error(element + \" (inside ref) is invalid and yet it is still cached: \" + cached);\n            }\n            PsiType cachedRef = myCachedReferencesInPsiTypes.get(element);\n            if (cachedRef != null) {\n              LOG.error(element + \" (inside ref) is invalid and yet it is still cached in ref cache: \" + cachedRef);\n            }\n            return true;\n          }\n        });\n\n      }\n      DebugUtil.trackInvalidation(expr, \"Expression invalidated\", new Processor<PsiElement>() {\n        @Override\n        public boolean process(PsiElement element) {\n          PsiType cached = myCalculatedTypes.get(element);\n          if (cached != null) {\n            LOG.error(element + \" is invalid and yet it is still cached: \" + cached);\n          }\n\n          PsiType cachedRef = myCachedReferencesInPsiTypes.get(element);\n          if (cachedRef != null) {\n            LOG.error(element + \" is invalid and yet it is still cached (inside PsiType): \" + cachedRef);\n          }\n          return true;\n        }\n      });\n    }\n\n    return type == TypeConversionUtil.NULL_TYPE ? null : type;\n  }","id":64208,"modified_method":"@Nullable\n  public <T extends PsiExpression> PsiType getType(@NotNull T expr, @NotNull Function<T, PsiType> f) {\n    PsiType type = myCalculatedTypes.get(expr);\n    if (type == null) {\n      type = f.fun(expr);\n      if (type == null) {\n        type = TypeConversionUtil.NULL_TYPE;\n      }\n      PsiType stored = ConcurrencyUtil.cacheOrGet(myCalculatedTypes, expr, type);\n\n      if (stored == type && DebugUtil.DO_EXPENSIVE_CHECKS) {\n        registerDiagnosticsHooks(expr, type);\n      }\n\n      type = stored;\n    }\n\n    if (!type.isValid()) {\n      if (expr.isValid()) {\n        PsiJavaCodeReferenceElement refInside = type instanceof PsiClassReferenceType ? ((PsiClassReferenceType)type).getReference() : null;\n        String typeinfo = type + \" (\" + type.getClass() + \")\" + (refInside == null ? \"\" : \"; ref inside: \"+refInside + \" (\"+refInside.getClass()+\") valid:\"+refInside.isValid());\n        LOG.error(\"Type is invalid: \" + typeinfo + \"; expr: '\" + expr + \"' (\" + expr.getClass() + \") is valid\");\n      }\n      else {\n        LOG.error(\"Expression: '\"+expr+\"' is invalid, must not be used for getType()\");\n      }\n    }\n\n    return type == TypeConversionUtil.NULL_TYPE ? null : type;\n  }","commit_id":"bab167569bf4aee33d185a9907abcc2c18481f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void clearCaches(boolean isPhysical) {\n    myCalculatedTypes.clear();\n    myCachedReferencesInPsiTypes.clear();\n    if (isPhysical) {\n      myVarToConstValueMapPhysical.clear();\n    }\n    myVarToConstValueMapNonPhysical.clear();\n  }","id":64209,"modified_method":"private void clearCaches(boolean isPhysical) {\n    myCalculatedTypes.clear();\n    myCachedReferencesInPsiTypes.clear();\n    myCachedReferenceIn_PsiClassReferenceType_To_ListOfReferencesOfThisType_CachedHere.clear();\n    if (isPhysical) {\n      myVarToConstValueMapPhysical.clear();\n    }\n    myVarToConstValueMapNonPhysical.clear();\n  }","commit_id":"bab167569bf4aee33d185a9907abcc2c18481f08","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n    private static VirtualFile findFileInRoot(@NotNull String qName, @NotNull VirtualFile root) {\n        String pathRest = qName;\n        VirtualFile cur = root;\n\n        while (true) {\n            int dot = pathRest.indexOf('.');\n            if (dot < 0) break;\n\n            String pathComponent = pathRest.substring(0, dot);\n            VirtualFile child = cur.findChild(pathComponent);\n\n            if (child == null) break;\n            pathRest = pathRest.substring(dot + 1);\n            cur = child;\n        }\n\n        String className = pathRest.replace('.', '$');\n        VirtualFile vFile = cur.findChild(className + \".class\");\n        if (vFile != null) {\n            if (!vFile.isValid()) {\n                //TODO: log\n                return null;\n            }\n            //NOTE: currently we use VirtualFileFinder to find Kotlin binaries only\n            if (KotlinClassFileHeader.readKotlinHeaderFromClassFile(vFile).getType() != null) {\n                return vFile;\n            }\n        }\n        return null;\n    }","id":64210,"modified_method":"@Nullable\n    private static VirtualFile findFileInRoot(@NotNull String qName, @NotNull VirtualFile root) {\n        String pathRest = qName;\n        VirtualFile cur = root;\n\n        while (true) {\n            int dot = pathRest.indexOf('.');\n            if (dot < 0) break;\n\n            String pathComponent = pathRest.substring(0, dot);\n            VirtualFile child = cur.findChild(pathComponent);\n\n            if (child == null) break;\n            pathRest = pathRest.substring(dot + 1);\n            cur = child;\n        }\n\n        String className = pathRest.replace('.', '$');\n        VirtualFile vFile = cur.findChild(className + \".class\");\n        if (vFile != null) {\n            if (!vFile.isValid()) {\n                //TODO: log\n                return null;\n            }\n            //NOTE: currently we use VirtualFileFinder to find Kotlin binaries only\n            if (KotlinClassFileHeader.readKotlinHeaderFromClassFile(vFile) != null) {\n                return vFile;\n            }\n        }\n        return null;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private DecompiledDataFactory(@NotNull VirtualFile classFile, @NotNull Project project) {\n        this.classFile = classFile;\n        this.project = project;\n        InjectorForJavaDescriptorResolver injector =\n                new InjectorForJavaDescriptorResolver(project, new BindingTraceContext());\n        this.javaDescriptorResolver = injector.getJavaDescriptorResolver();\n        this.kotlinClassFileHeader = KotlinClassFileHeader.readKotlinHeaderFromClassFile(classFile);\n    }","id":64211,"modified_method":"private DecompiledDataFactory(@NotNull VirtualFile classFile, @NotNull Project project) {\n        this.classFile = classFile;\n        this.project = project;\n        InjectorForJavaDescriptorResolver injector =\n                new InjectorForJavaDescriptorResolver(project, new BindingTraceContext());\n        this.javaDescriptorResolver = injector.getJavaDescriptorResolver();\n\n        KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(classFile);\n        assert header != null : \"Decompiled data factory shouldn't be called on an unsupported file: \" + classFile;\n        this.kotlinClassFileHeader = header;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean isKotlinCompiledFile(@NotNull VirtualFile file) {\n        if (!StdFileTypes.CLASS.getDefaultExtension().equals(file.getExtension())) {\n            return false;\n        }\n        //TODO: check index\n        return KotlinClassFileHeader.readKotlinHeaderFromClassFile(file).isCompatibleKotlinCompiledFile();\n    }","id":64212,"modified_method":"public static boolean isKotlinCompiledFile(@NotNull VirtualFile file) {\n        if (!StdFileTypes.CLASS.getDefaultExtension().equals(file.getExtension())) {\n            return false;\n        }\n        //TODO: check index\n        KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(file);\n        return header != null && header.isCompatibleKotlinCompiledFile();\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    private String[] readData(@NotNull VirtualFile virtualFile) {\n        KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile);\n        int version = header.getVersion();\n        if (!isAbiVersionCompatible(version) && header.getType() != null) {\n            errorReporter.reportIncompatibleAbiVersion(header.getFqName(), virtualFile, version);\n            return null;\n        }\n        return header.getAnnotationData();\n    }","id":64213,"modified_method":"@Nullable\n    private String[] readData(@NotNull VirtualFile virtualFile) {\n        KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile);\n        if (header == null) {\n            return null;\n        }\n        int version = header.getVersion();\n        if (!isAbiVersionCompatible(version)) {\n            errorReporter.reportIncompatibleAbiVersion(header.getFqName(), virtualFile, version);\n            return null;\n        }\n        return header.getAnnotationData();\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    private static ClassData getClassData(@NotNull PsiClass psiClass) {\n        VirtualFile virtualFile = getVirtualFileForPsiClass(psiClass);\n        if (virtualFile == null) return null;\n        String[] data = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile).getAnnotationData();\n        return data == null ? null : JavaProtoBufUtil.readClassDataFrom(data);\n    }","id":64214,"modified_method":"@Nullable\n    private static ClassData getClassData(@NotNull PsiClass psiClass) {\n        VirtualFile virtualFile = getVirtualFileForPsiClass(psiClass);\n        if (virtualFile != null) {\n            KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile);\n            if (header != null) {\n                String[] data = header.getAnnotationData();\n                if (data != null) {\n                    return JavaProtoBufUtil.readClassDataFrom(data);\n                }\n            }\n        }\n        return null;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    private static PackageData getPackageData(@NotNull PsiClass psiClass) {\n        VirtualFile virtualFile = getVirtualFileForPsiClass(psiClass);\n        if (virtualFile == null) return null;\n        String[] data = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile).getAnnotationData();\n        return data == null ? null : JavaProtoBufUtil.readPackageDataFrom(data);\n    }","id":64215,"modified_method":"@Nullable\n    private static PackageData getPackageData(@NotNull PsiClass psiClass) {\n        VirtualFile virtualFile = getVirtualFileForPsiClass(psiClass);\n        if (virtualFile != null) {\n            KotlinClassFileHeader header = KotlinClassFileHeader.readKotlinHeaderFromClassFile(virtualFile);\n            if (header != null) {\n                String[] data = header.getAnnotationData();\n                if (data != null) {\n                    return JavaProtoBufUtil.readPackageDataFrom(data);\n                }\n            }\n        }\n        return null;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public String[] getAnnotationData() {\n        if (annotationData == null && type != null) {\n            LOG.error(\"Data for annotations \" + type.correspondingAnnotation + \" was not read.\");\n        }\n        return annotationData;\n    }","id":64216,"modified_method":"@Nullable\n    public String[] getAnnotationData() {\n        if (isCompatibleKotlinCompiledFile() && annotationData == null) {\n            LOG.error(\"Kotlin annotation \" + type + \" is incorrect for class: \" + fqName);\n            return null;\n        }\n        return annotationData;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * @return FQ name for class header or package class FQ name for package header (e.g. <code>test.TestPackage<\/code>)\n     */\n    @NotNull\n    public FqName getFqName() {\n        assert fqName != null;\n        return fqName;\n    }","id":64217,"modified_method":"/**\n     * @return FQ name for class header or package class FQ name for package header (e.g. <code>test.TestPackage<\/code>)\n     */\n    @NotNull\n    public FqName getFqName() {\n        return fqName;\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static KotlinClassFileHeader readKotlinHeaderFromClassFile(@NotNull VirtualFile virtualFile) {\n        try {\n            ClassReader reader = new ClassReader(virtualFile.contentsToByteArray());\n            ReadDataFromAnnotationVisitor visitor = new ReadDataFromAnnotationVisitor();\n            reader.accept(visitor, SKIP_CODE | SKIP_FRAMES | SKIP_DEBUG);\n            return new KotlinClassFileHeader(visitor.version, visitor.annotationData, visitor.type, visitor.fqName);\n        }\n        catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }","id":64218,"modified_method":"@Nullable\n    public static KotlinClassFileHeader readKotlinHeaderFromClassFile(@NotNull VirtualFile virtualFile) {\n        try {\n            ClassReader reader = new ClassReader(virtualFile.contentsToByteArray());\n            ReadDataFromAnnotationVisitor visitor = new ReadDataFromAnnotationVisitor();\n            reader.accept(visitor, SKIP_CODE | SKIP_FRAMES | SKIP_DEBUG);\n            if (visitor.type == null) {\n                return null;\n            }\n            if (visitor.fqName == null) {\n                LOG.error(\"File doesn't have a class name: \" + virtualFile);\n                return null;\n            }\n            return new KotlinClassFileHeader(visitor.version, visitor.annotationData, visitor.type, visitor.fqName);\n        }\n        catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * @return true if this is a header for compiled Kotlin file with correct abi version which can be processed by compiler or the IDE\n     */\n    public boolean isCompatibleKotlinCompiledFile() {\n        return type != null && type.isValidAnnotation() && isAbiVersionCompatible(version);\n    }","id":64219,"modified_method":"/**\n     * @return true if this is a header for compiled Kotlin file with correct abi version which can be processed by compiler or the IDE\n     */\n    public boolean isCompatibleKotlinCompiledFile() {\n        return type.isValidAnnotation() && isAbiVersionCompatible(version);\n    }","commit_id":"92cc0ddd1fe84e3d923157bf877c9026d093809a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public ClassDescriptor resolveClass(@NotNull KotlinJvmBinaryClass kotlinClass) {\n        String[] data = readData(kotlinClass, CLASS);\n        if (data != null) {\n            return components.getClassDeserializer().deserializeClass(\n                    kotlinClass.getClassId(), JvmProtoBufUtil.readClassDataFrom(data)\n            );\n        }\n        return null;\n    }","id":64220,"modified_method":"@Nullable\n    public ClassDescriptor resolveClass(@NotNull KotlinJvmBinaryClass kotlinClass) {\n        String[] data = readData(kotlinClass, CLASS);\n        if (data != null) {\n            ClassData classData = JvmProtoBufUtil.readClassDataFrom(data);\n            KotlinJvmBinarySourceElement sourceElement = new KotlinJvmBinarySourceElement(kotlinClass);\n            ClassDataProvider classDataProvider = new ClassDataProvider(classData, sourceElement);\n            return components.getClassDeserializer().deserializeClass(kotlinClass.getClassId(), classDataProvider);\n        }\n        return null;\n    }","commit_id":"53eccb98e3f6dbea004cd1d81eb0576117ae2128","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public ClassDescriptor resolveClass(@NotNull KotlinJvmBinaryClass kotlinClass) {\n        String[] data = readData(kotlinClass, CLASS);\n        if (data != null) {\n            ClassData classData = JavaProtoBufUtil.readClassDataFrom(data);\n            NameResolver nameResolver = classData.getNameResolver();\n            ClassId classId = nameResolver.getClassId(classData.getClassProto().getFqName());\n            return context.getClassDeserializer().deserializeClass(classId);\n        }\n        return null;\n    }","id":64221,"modified_method":"@Nullable\n    public ClassDescriptor resolveClass(@NotNull KotlinJvmBinaryClass kotlinClass) {\n        String[] data = readData(kotlinClass, CLASS);\n        if (data != null) {\n            return context.getClassDeserializer().deserializeClass(JavaProtoBufUtil.readClassDataFrom(data));\n        }\n        return null;\n    }","commit_id":"b08cda8dd6f6605777569b50cca7d1ea34e52859","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public ResolvePath restart(DefaultModuleRevisionResolveState moduleRevision) {\n            LOGGER.debug(\"Restarting {} on conflict, now refers to {}.\", this, moduleRevision);\n            if (targetModuleRevision != null) {\n                targetModuleRevision.incomingPaths.remove(this);\n            }\n            DependencyResolvePath newPath = new DependencyResolvePath(path, from, selector, dependency, targetConfigurations);\n            newPath.referTo(moduleRevision);\n            newPath.needMetaData = false;\n            return newPath;\n        }","id":64222,"modified_method":"@Override\n        public ResolvePath restart(ResolveState resolveState, DefaultModuleRevisionResolveState moduleRevision) {\n            LOGGER.debug(\"Restarting {} on conflict, now refers to {}.\", this, moduleRevision);\n            if (targetModuleRevision != null) {\n                targetModuleRevision.removeIncomingPath(this);\n            }\n            ModuleVersionSelectorResolveState newSelector = selector.restart(resolveState, moduleRevision);\n            DependencyResolvePath newPath = new DependencyResolvePath(path, from, newSelector, dependency, targetConfigurations);\n            newPath.referTo(moduleRevision);\n            return newPath;\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"private ModuleVersionSelectorResolveState(DependencyDescriptor descriptor) {\n            this.descriptor = descriptor;\n        }","id":64223,"modified_method":"private ModuleVersionSelectorResolveState(DependencyDescriptor descriptor, ModuleVersionResolver resolver) {\n            this.descriptor = descriptor;\n            this.resolver = resolver;\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Traverses the dependency graph, resolving conflicts and building the paths from the root configuration.\n     */\n    private void traverseGraph(ResolveData resolveData, ResolveState resolveState, ResolvedConfigurationBuilder result) {\n        SetMultimap<DefaultModuleRevisionResolveState, ResolvePath> pendingConflictResolution = LinkedHashMultimap.create();\n        SetMultimap<ModuleId, DefaultModuleRevisionResolveState> allVersions = LinkedHashMultimap.create();\n        Set<ModuleId> conflicts = new LinkedHashSet<ModuleId>();\n\n        List<ResolvePath> queue = new ArrayList<ResolvePath>();\n        resolveState.root.addOutgoingDependencies(new RootPath(), resolveState, queue);\n\n        while (!queue.isEmpty() || !pendingConflictResolution.isEmpty()) {\n            if (!queue.isEmpty()) {\n                ResolvePath path = queue.remove(0);\n                LOGGER.debug(\"Visiting path {}.\", path);\n\n                try {\n                    path.resolveModuleRevisionId(dependencyResolver, resolveState);\n                    ModuleId moduleId = path.getModuleId();\n\n                    if (allVersions.put(moduleId, path.getTargetModuleRevision())) {\n                        // A new module revision. Check for conflict\n                        Set<DefaultModuleRevisionResolveState> versions = allVersions.get(moduleId);\n                        if (versions.size() == 1) {\n                            // First version of this module. Select it for now\n                            LOGGER.debug(\"Selecting new module version {}.\", path.getTargetModuleRevision());\n                            resolveState.select(path.getTargetModuleRevision());\n                        } else {\n                            // Not the first version of this module. We have a new conflict\n                            LOGGER.debug(\"Found new conflicting module version {}.\", path.getTargetModuleRevision());\n                            conflicts.add(moduleId);\n\n                            // Deselect the currently selected version, and park all queued paths that traverse any version of the module\n                            // for later conflict resolution\n                            resolveState.clearSelection(moduleId);\n                            Iterator<ResolvePath> iter = queue.iterator();\n                            while (iter.hasNext()) {\n                                ResolvePath resolvePath = iter.next();\n                                DefaultModuleRevisionResolveState conflict = resolvePath.traverses(versions);\n                                if (conflict != null) {\n                                    LOGGER.debug(\"Queued path {} traverses version {} with conflicts. Parking this path.\", resolvePath, conflict);\n                                    iter.remove();\n                                    pendingConflictResolution.put(conflict, resolvePath);\n                                }\n                            }\n                        }\n                    }\n\n                    if (conflicts.contains(moduleId)) {\n                        // This path refers to a conflicted version, park it for later conflict resolution\n                        LOGGER.debug(\"Path refers to module {} with conflicts. Parking this path\", moduleId);\n                        pendingConflictResolution.put(path.getTargetModuleRevision(), path);\n                        continue;\n                    }\n\n                    DefaultModuleRevisionResolveState selectedVersion = resolveState.getSelected(moduleId);\n                    if (selectedVersion != path.getTargetModuleRevision()) {\n                        // This path refers to a version that has been evicted. Restart it, referring to the selected version\n                        LOGGER.debug(\"Version has been evicted. Restarting with target {}.\", selectedVersion);\n                        queue.add(0, path.restart(selectedVersion));\n                        continue;\n                    }\n\n                    // This path refers to a selected version - resolve the meta-data for the target version\n                    path.resolveMetaData(resolveState);\n                } catch (ModuleVersionResolveException t) {\n                    // The exception is collected elsewhere, simply throw the path away\n                    continue;\n                }\n\n                path.addOutgoingDependencies(resolveData, resolveState, queue);\n            } else {\n                // We have some batched up conflicts. Resolve the first, and continue traversing the graph\n                ModuleId moduleId = conflicts.iterator().next();\n                conflicts.remove(moduleId);\n                Set<DefaultModuleRevisionResolveState> candidates = allVersions.get(moduleId);\n                DefaultModuleRevisionResolveState selected = conflictResolver.select(candidates, resolveState.root.moduleRevision);\n                LOGGER.debug(\"Selected {} from conflicting modules {}.\", selected, candidates);\n                resolveState.select(selected);\n                for (ResolvePath path : pendingConflictResolution.removeAll(selected)) {\n                    queue.add(path.restart(candidates, selected));\n                }\n                for (DefaultModuleRevisionResolveState candidate : candidates) {\n                    if (candidate != selected) {\n                        for (ResolvePath path : pendingConflictResolution.removeAll(candidate)) {\n                            queue.add(path.restart(candidates, selected));\n                        }\n                        for (DependencyResolvePath path : new LinkedHashSet<DependencyResolvePath>(candidate.incomingPaths)) {\n                            queue.add(path.restart(candidates, selected));\n                        }\n                    }\n                }\n            }\n        }\n    }","id":64224,"modified_method":"/**\n     * Traverses the dependency graph, resolving conflicts and building the paths from the root configuration.\n     */\n    private void traverseGraph(ResolveData resolveData, ResolveState resolveState) {\n        SetMultimap<DefaultModuleRevisionResolveState, ResolvePath> pendingConflictResolution = LinkedHashMultimap.create();\n        SetMultimap<ModuleId, DefaultModuleRevisionResolveState> allVersions = LinkedHashMultimap.create();\n        Set<ModuleId> conflicts = new LinkedHashSet<ModuleId>();\n\n        List<ResolvePath> queue = new ArrayList<ResolvePath>();\n        resolveState.root.addOutgoingDependencies(new RootPath(), resolveState, queue);\n\n        while (!queue.isEmpty() || !pendingConflictResolution.isEmpty()) {\n            if (!queue.isEmpty()) {\n                ResolvePath path = queue.remove(0);\n                LOGGER.debug(\"Visiting path {}.\", path);\n\n                try {\n                    path.resolveModuleRevisionId(dependencyResolver, resolveState);\n                    ModuleId moduleId = path.getModuleId();\n\n                    if (allVersions.put(moduleId, path.getTargetModuleRevision())) {\n                        // A new module revision. Check for conflict\n                        Set<DefaultModuleRevisionResolveState> versions = allVersions.get(moduleId);\n                        if (versions.size() == 1) {\n                            // First version of this module. Select it for now\n                            LOGGER.debug(\"Selecting new module version {}.\", path.getTargetModuleRevision());\n                            resolveState.select(path.getTargetModuleRevision());\n                        } else {\n                            // Not the first version of this module. We have a new conflict\n                            LOGGER.debug(\"Found new conflicting module version {}.\", path.getTargetModuleRevision());\n                            conflicts.add(moduleId);\n\n                            // Deselect the currently selected version, and park all queued paths that traverse any version of the module\n                            // for later conflict resolution\n                            resolveState.clearSelection(moduleId);\n                            Iterator<ResolvePath> iter = queue.iterator();\n                            while (iter.hasNext()) {\n                                ResolvePath resolvePath = iter.next();\n                                DefaultModuleRevisionResolveState conflict = resolvePath.traverses(versions);\n                                if (conflict != null) {\n                                    LOGGER.debug(\"Queued path {} traverses version {} with conflicts. Parking this path.\", resolvePath, conflict);\n                                    iter.remove();\n                                    pendingConflictResolution.put(conflict, resolvePath);\n                                }\n                            }\n                        }\n                    }\n\n                    if (conflicts.contains(moduleId)) {\n                        // This path refers to a conflicted version, park it for later conflict resolution\n                        LOGGER.debug(\"Path refers to module {} with conflicts. Parking this path\", moduleId);\n                        pendingConflictResolution.put(path.getTargetModuleRevision(), path);\n                        continue;\n                    }\n\n                    DefaultModuleRevisionResolveState selectedVersion = resolveState.getSelected(moduleId);\n                    if (selectedVersion != path.getTargetModuleRevision()) {\n                        // This path refers to a version that has been evicted. Restart it, referring to the selected version\n                        LOGGER.debug(\"Version has been evicted. Restarting with target {}.\", selectedVersion);\n                        queue.add(0, path.restart(resolveState, selectedVersion));\n                        continue;\n                    }\n\n                    // This path refers to a selected version - resolve the meta-data for the target version\n                    path.resolveMetaData(resolveState);\n                } catch (ModuleVersionResolveException t) {\n                    // The exception is collected elsewhere, simply throw the path away\n                    continue;\n                }\n\n                path.addOutgoingDependencies(resolveData, resolveState, queue);\n            } else {\n                // We have some batched up conflicts. Resolve the first, and continue traversing the graph\n                ModuleId moduleId = conflicts.iterator().next();\n                conflicts.remove(moduleId);\n                Set<DefaultModuleRevisionResolveState> candidates = allVersions.get(moduleId);\n                DefaultModuleRevisionResolveState selected = conflictResolver.select(candidates, resolveState.root.moduleRevision);\n                LOGGER.debug(\"Selected {} from conflicting modules {}.\", selected, candidates);\n                resolveState.select(selected);\n                for (ResolvePath path : pendingConflictResolution.removeAll(selected)) {\n                    queue.add(path.restart(resolveState, candidates, selected));\n                }\n                for (DefaultModuleRevisionResolveState candidate : candidates) {\n                    if (candidate != selected) {\n                        for (ResolvePath path : pendingConflictResolution.removeAll(candidate)) {\n                            queue.add(path.restart(resolveState, candidates, selected));\n                        }\n                        for (DependencyResolvePath path : new LinkedHashSet<DependencyResolvePath>(candidate.incomingPaths)) {\n                            queue.add(path.restart(resolveState, candidates, selected));\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public abstract ResolvePath restart(DefaultModuleRevisionResolveState selectedVersion);","id":64225,"modified_method":"public abstract ResolvePath restart(ResolveState resolveState, DefaultModuleRevisionResolveState selectedVersion);","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(ResolveState resolveState) {\n            if (resolved) {\n                return;\n            }\n            if (failure != null) {\n                throw failure;\n            }\n\n            try {\n                resolveState.getRevision(resolver.getDescriptor());\n                resolved = true;\n            } catch (ModuleVersionResolveException e) {\n                failure = e;\n                resolveState.addUnresolvedDependency(this);\n                throw e;\n            }\n        }","id":64226,"modified_method":"public void resolve(ResolveState resolveState) {\n            if (resolved) {\n                return;\n            }\n            if (failure != null) {\n                throw failure;\n            }\n\n            try {\n                resolveState.getRevision(resolver.getDescriptor());\n                resolved = true;\n            } catch (ModuleVersionResolveException e) {\n                failure = e;\n                throw e;\n            }\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        public ResolvePath restart(Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision) {\n            ResolvePath newParent = path.restart(candidates, moduleRevision);\n            if (newParent != path) {\n                // Parent path has changed - discard this and return new parent\n                if (targetModuleRevision != null) {\n                    targetModuleRevision.incomingPaths.remove(this);\n                }\n                return newParent;\n            }\n            if (targetModuleRevision == null) {\n                // Need to substitute this path for a new one\n                return restart(moduleRevision);\n            }\n\n            if (targetModuleRevision == moduleRevision || !candidates.contains(targetModuleRevision)) {\n                // Parent path has not changed and this path does not need to be substituted - return this\n                return this;\n            }\n\n            // Need to substitute this path for a new one\n            return restart(moduleRevision);\n        }","id":64227,"modified_method":"@Override\n        public ResolvePath restart(ResolveState resolveState, Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision) {\n            ResolvePath newParent = path.restart(resolveState, candidates, moduleRevision);\n            if (newParent != path) {\n                // Parent path has changed - discard this and return new parent\n                if (targetModuleRevision != null) {\n                    targetModuleRevision.removeIncomingPath(this);\n                }\n                return newParent;\n            }\n            if (targetModuleRevision == null) {\n                // Need to substitute this path for a new one\n                return restart(resolveState, moduleRevision);\n            }\n\n            if (targetModuleRevision == moduleRevision || !candidates.contains(targetModuleRevision)) {\n                // Parent path has not changed and this path does not need to be substituted - return this\n                return this;\n            }\n\n            // Need to substitute this path for a new one\n            return restart(resolveState, moduleRevision);\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultLenientConfiguration resolve(ConfigurationInternal configuration, ResolveData resolveData) throws ResolveException {\n        ModuleDescriptor moduleDescriptor = moduleDescriptorConverter.convert(configuration.getAll(), configuration.getModule());\n        ResolveState resolveState = new ResolveState(moduleDescriptor, configuration.getName());\n        DefaultLenientConfiguration result = new DefaultLenientConfiguration(configuration, resolveState.root.getResult());\n\n        traverseGraph(resolveData, resolveState, result);\n        assembleResult(resolveState, result);\n\n        return result;\n    }","id":64228,"modified_method":"public DefaultLenientConfiguration resolve(ConfigurationInternal configuration, ResolveData resolveData) throws ResolveException {\n        ModuleDescriptor moduleDescriptor = moduleDescriptorConverter.convert(configuration.getAll(), configuration.getModule());\n\n        ResolveState resolveState = new ResolveState(moduleDescriptor, configuration.getName(), dependencyResolver);\n        traverseGraph(resolveData, resolveState);\n\n        DefaultLenientConfiguration result = new DefaultLenientConfiguration(configuration, resolveState.root.getResult());\n        assembleResult(resolveState, result);\n\n        return result;\n    }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolveModuleRevisionId(DependencyToModuleResolver resolver, ResolveState resolveState) {\n            if (targetModuleRevision != null) {\n                return;\n            }\n            if (failure != null) {\n                throw failure;\n            }\n\n            this.resolver = resolver.create(descriptor);\n            try {\n                targetModuleRevision = resolveState.getRevision(this.resolver.getId());\n            } catch (ModuleVersionResolveException e) {\n                failure = e;\n                resolveState.addUnresolvedDependency(this);\n                throw e;\n            }\n        }","id":64229,"modified_method":"public void resolveModuleRevisionId(DependencyToModuleResolver resolver, ResolveState resolveState) {\n            if (targetModuleRevision != null) {\n                return;\n            }\n            if (failure != null) {\n                throw failure;\n            }\n\n            try {\n                targetModuleRevision = resolveState.getRevision(this.resolver.getId());\n            } catch (ModuleVersionResolveException e) {\n                failure = e;\n                throw e;\n            }\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Populates the result from the graph traversal state.\n     */\n    private void assembleResult(ResolveState resolveState, ResolvedConfigurationBuilder result) {\n        for (ConfigurationResolveState resolvedConfiguration : resolveState.getConfigurations()) {\n            resolvedConfiguration.attachToParents(resolvedArtifactFactory, artifactResolver, result);\n        }\n        for (ModuleVersionSelectorResolveState selector : resolveState.getUnresolvedDependencies()) {\n            result.addUnresolvedDependency(selector.getAsUnresolvedDependency());\n        }\n    }","id":64230,"modified_method":"/**\n     * Populates the result from the graph traversal state.\n     */\n    private void assembleResult(ResolveState resolveState, ResolvedConfigurationBuilder result) {\n        for (ConfigurationResolveState resolvedConfiguration : resolveState.getConfigurations()) {\n            resolvedConfiguration.attachToParents(resolvedArtifactFactory, artifactResolver, result);\n        }\n        for (ModuleVersionSelectorResolveState selector : resolveState.getSelectors()) {\n            selector.addUnresolvedDependency(result);\n        }\n    }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public ModuleVersionSelectorResolveState getSelector(DependencyDescriptor dependencyDescriptor) {\n            ModuleRevisionId original = dependencyDescriptor.getDependencyRevisionId();\n            ModuleRevisionId selectorId = ModuleRevisionId.newInstance(original.getOrganisation(), original.getName(), original.getRevision());\n            ModuleVersionSelectorResolveState resolveState = selectors.get(selectorId);\n            if (resolveState == null) {\n                resolveState = new ModuleVersionSelectorResolveState(dependencyDescriptor);\n                selectors.put(selectorId, resolveState);\n            }\n            return resolveState;\n        }","id":64231,"modified_method":"public ModuleVersionSelectorResolveState getSelector(DependencyDescriptor dependencyDescriptor) {\n            ModuleRevisionId original = dependencyDescriptor.getDependencyRevisionId();\n            ModuleRevisionId selectorId = ModuleRevisionId.newInstance(original.getOrganisation(), original.getName(), original.getRevision());\n            ModuleVersionSelectorResolveState resolveState = selectors.get(selectorId);\n            if (resolveState == null) {\n                resolveState = new ModuleVersionSelectorResolveState(dependencyDescriptor, resolver.create(dependencyDescriptor));\n                selectors.put(selectorId, resolveState);\n            }\n            return resolveState;\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public ResolveState(ModuleDescriptor rootModule, String rootConfigurationName) {\n            root = getConfiguration(rootModule, rootConfigurationName);\n        }","id":64232,"modified_method":"public ResolveState(ModuleDescriptor rootModule, String rootConfigurationName, DependencyToModuleResolver resolver) {\n            this.resolver = resolver;\n            root = getConfiguration(rootModule, rootConfigurationName);\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n         * Returns this path with any of the given candidates substituted with the given target. Returns this if no substitutions required. Truncates the path at the first substitution, if a\n         * substitution is required.\n         */\n        public abstract ResolvePath restart(Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision);","id":64233,"modified_method":"/**\n         * Returns this path with any of the given candidates substituted with the given target. Returns this if no substitutions required. Truncates the path at the first substitution, if a\n         * substitution is required.\n         */\n        public abstract ResolvePath restart(ResolveState resolveState, Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision);","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"private DependencyResolvePath(ResolvePath path, ConfigurationResolveState from, ModuleVersionSelectorResolveState selector, DependencyDescriptor dependency, Set<String> targetConfigurations) {\n            this.path = path;\n            this.from = from;\n            this.selector = selector;\n            this.dependency = dependency;\n            this.targetConfigurations = targetConfigurations;\n            selector.incomingPaths.add(this);\n        }","id":64234,"modified_method":"private DependencyResolvePath(ResolvePath path, ConfigurationResolveState from, ModuleVersionSelectorResolveState selector, DependencyDescriptor dependency, Set<String> targetConfigurations) {\n            this.path = path;\n            this.from = from;\n            this.selector = selector;\n            this.dependency = dependency;\n            this.targetConfigurations = targetConfigurations;\n            selector.addIncomingPath(this);\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        public ResolvePath restart(Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision) {\n            return this;\n        }","id":64235,"modified_method":"@Override\n        public ResolvePath restart(ResolveState resolveState, Collection<DefaultModuleRevisionResolveState> candidates, DefaultModuleRevisionResolveState moduleRevision) {\n            return this;\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        public ResolvePath restart(DefaultModuleRevisionResolveState selectedVersion) {\n            throw new UnsupportedOperationException();\n        }","id":64236,"modified_method":"@Override\n        public ResolvePath restart(ResolveState resolveState, DefaultModuleRevisionResolveState selectedVersion) {\n            throw new UnsupportedOperationException();\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n         * Resolves the meta-data for this path.\n         */\n        public void resolveMetaData(ResolveState resolveState) {\n            if (!needMetaData) {\n                return;\n            }\n            selector.resolve(resolveState);\n        }","id":64237,"modified_method":"/**\n         * Resolves the meta-data for this path.\n         */\n        public void resolveMetaData(ResolveState resolveState) {\n            selector.resolve(resolveState);\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"public ModuleDescriptor getDescriptor() throws ModuleVersionResolveException {\n            if (failure != null) {\n                throw failure;\n            }\n\n            if (moduleDescriptor == null) {\n                IvyContext context = IvyContext.pushNewCopyContext();\n                try {\n                    context.setIvy(ivy);\n                    context.setResolveData(resolveData);\n                    context.setDependencyDescriptor(dependencyDescriptor);\n                    ResolvedModuleRevision resolvedRevision;\n                    try {\n                        resolvedRevision = resolver.getDependency(dependencyDescriptor, resolveData);\n                    } catch (Throwable t) {\n                        throw new ModuleVersionResolveException(String.format(\"Could not resolve %s\", dependencyDescriptor.getDependencyRevisionId()), t);\n                    }\n                    if (resolvedRevision == null) {\n                        throw new ModuleVersionNotFoundException(String.format(\"%s not found.\", dependencyDescriptor.getDependencyRevisionId()));\n                    }\n                    checkDescriptor(resolvedRevision.getDescriptor());\n                    moduleDescriptor = resolvedRevision.getDescriptor();\n                } catch (ModuleVersionResolveException e) {\n                    failure = e;\n                    throw failure;\n                } finally {\n                    IvyContext.popContext();\n                }\n            }\n            return moduleDescriptor;\n        }","id":64238,"modified_method":"public ModuleDescriptor getDescriptor() throws ModuleVersionResolveException {\n            if (failure != null) {\n                throw failure;\n            }\n\n            if (moduleDescriptor == null) {\n                IvyContext context = IvyContext.pushNewCopyContext();\n                try {\n                    context.setIvy(ivy);\n                    context.setResolveData(resolveData);\n                    context.setDependencyDescriptor(dependencyDescriptor);\n                    ResolvedModuleRevision resolvedRevision;\n                    try {\n                        resolvedRevision = resolver.getDependency(dependencyDescriptor, resolveData);\n                    } catch (Throwable t) {\n                        ModuleRevisionId id = dependencyDescriptor.getDependencyRevisionId();\n                        throw new ModuleVersionResolveException(String.format(\"Could not resolve group:%s, module:%s, version:%s.\", id.getOrganisation(), id.getName(), id.getRevision()), t);\n                    }\n                    if (resolvedRevision == null) {\n                        ModuleRevisionId id = dependencyDescriptor.getDependencyRevisionId();\n                        throw notFound(id);\n                    }\n                    checkDescriptor(resolvedRevision.getDescriptor());\n                    moduleDescriptor = resolvedRevision.getDescriptor();\n                } catch (ModuleVersionResolveException e) {\n                    failure = e;\n                    throw failure;\n                } finally {\n                    IvyContext.popContext();\n                }\n            }\n            return moduleDescriptor;\n        }","commit_id":"507ed8f21c6ae0b2939a6532aa2d65aa10848ca5","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * @return the Release livetable element\n     */\n    public LiveTableElement getReleaseLiveTable()\n    {\n        LiveTableElement lt = new LiveTableElement(\"releases\");\n        lt.waitUntilReady();\n        return lt;\n    }","id":64239,"modified_method":"/**\n     * @return the Release live table element\n     */\n    public LiveTableElement getReleaseLiveTable()\n    {\n        return new LiveTableElement(\"releases\");\n    }","commit_id":"a0dd30fcc4ee21e90068814b9f5f788e3cff4433","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testRelease()\n    {\n        // Delete pages that we create in the test\n        getUtil().deletePage(\"Release\", RELEASE_PAGE_NAME);\n\n        // Create a user and log in with it so that we test the application with a standard user\n        // Note that using the superadmin user would also fail since the uservatar macro doesn't work with it.\n        getUtil().registerLoginAndGotoPage(getTestClassName() + \"User\", \"password\", ApplicationsPanel.getURL());\n\n        // Navigate to the Release app by clicking in the Application Panel.\n        // This verifies that the Release application is registered in the Applications Panel.\n        // It also verifies that the Translation is registered properly.\n        ApplicationsPanel applicationPanel = new ApplicationsPanel();\n        ViewPage vp = applicationPanel.clickApplication(\"Release\");\n\n        // Verify we're on the right page!\n        Assert.assertEquals(ReleaseHomePage.getSpace(), vp.getMetaDataValue(\"space\"));\n        Assert.assertEquals(ReleaseHomePage.getPage(), vp.getMetaDataValue(\"page\"));\n        ReleaseHomePage homePage = new ReleaseHomePage();\n\n        // Add new Release\n        ReleaseEntryEditPage entryPage = homePage.addRelease(RELEASE_VERSION);\n        vp = entryPage.clickSaveAndView();\n\n        // Go back to the home page by clicking in the breadcrumb\n        vp.clickBreadcrumbLink(\"Releases\");\n        homePage = new ReleaseHomePage();\n\n        // Assert Livetable:\n        // - verify that the Translation has been applied by checking the Translated livetable column name\n        // - verify that the Livetable contains our new Release entry\n        LiveTableElement lt = homePage.getReleaseLiveTable();\n        Assert.assertTrue(lt.hasRow(\"Version\", RELEASE_VERSION));\n    }","id":64240,"modified_method":"@Test\n    public void testRelease()\n    {\n        // Create a user and log in with it so that we test the application with a standard user\n        // Note that using the superadmin user would also fail since the uservatar macro doesn't work with it.\n        getUtil().createUser(getTestClassName() + \"User\", \"password\");\n\n        // Delete pages that we create in the test (we have to be logged in).\n        getUtil().deletePage(\"Release\", RELEASE_PAGE_NAME);\n\n        // Navigate to the Release app by clicking in the Application Panel.\n        // This verifies that the Release application is registered in the Applications Panel.\n        // It also verifies that the Translation is registered properly.\n        ApplicationsPanel applicationPanel = ApplicationsPanel.gotoPage();\n        ViewPage vp = applicationPanel.clickApplication(\"Release\");\n\n        // Verify we're on the right page!\n        Assert.assertEquals(ReleaseHomePage.getSpace(), vp.getMetaDataValue(\"space\"));\n        Assert.assertEquals(ReleaseHomePage.getPage(), vp.getMetaDataValue(\"page\"));\n        ReleaseHomePage homePage = new ReleaseHomePage();\n\n        // Add new Release\n        ReleaseEntryEditPage entryPage = homePage.addRelease(RELEASE_VERSION);\n        vp = entryPage.waitUntilPageIsLoaded().clickSaveAndView();\n\n        // Go back to the home page by clicking in the breadcrumb\n        vp.clickBreadcrumbLink(\"Releases\");\n        homePage.waitUntilPageIsLoaded();\n\n        // Assert Livetable:\n        // - verify that the Translation has been applied by checking the Translated livetable column name\n        // - verify that the Livetable contains our new Release entry\n        LiveTableElement lt = homePage.getReleaseLiveTable();\n        Assert.assertTrue(lt.hasRow(\"Version\", RELEASE_VERSION));\n    }","commit_id":"a0dd30fcc4ee21e90068814b9f5f788e3cff4433","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testTableViewActions() throws Exception\n    {\n        // Test 1: Verify that the Action column is displayed only for logged in users\n        // Create a test user\n        AllDocsPage page = new AllDocsPage();\n        getUtil().registerLoginAndGotoPage(getClass().getSimpleName() + \"_\" + getTestMethodName(), \"password\",\n            page.getURL());\n        LiveTableElement livetable = page.clickIndexTab();\n        Assert.assertTrue(\"No Actions column found\", livetable.hasColumn(\"Actions\"));\n        // Logs out to be guest\n        page.logout();\n        livetable = page.clickIndexTab();\n        Assert.assertFalse(\"Actions column shouldn't be visible for guests\", livetable.hasColumn(\"Actions\"));\n\n        // Test 2: Verify filtering works by filtering on the document name\n        livetable = page.clickIndexTab();\n        livetable.filterColumn(\"xwiki-livetable-alldocs-filter-1\", \"XWikiAllGroup\");\n        Assert.assertTrue(livetable.hasRow(\"Page\", \"XWikiAllGroup\"));\n    }","id":64241,"modified_method":"@Test\n    public void testTableViewActions() throws Exception\n    {\n        // Test 1: Verify that the Action column is displayed only for logged in users\n        // Create a test user\n        getUtil().createUser(getClass().getSimpleName() + \"_\" + getTestMethodName(), \"password\");\n        AllDocsPage page = AllDocsPage.gotoPage();\n        LiveTableElement livetable = page.clickIndexTab();\n        assertTrue(\"No Actions column found\", livetable.hasColumn(\"Actions\"));\n        // Logs out to be guest\n        page.logout();\n        livetable = page.clickIndexTab();\n        assertFalse(\"Actions column shouldn't be visible for guests\", livetable.hasColumn(\"Actions\"));\n\n        // Test 2: Verify filtering works by filtering on the document name\n        livetable = page.clickIndexTab();\n        livetable.filterColumn(\"xwiki-livetable-alldocs-filter-1\", \"XWikiAllGroup\");\n        assertTrue(livetable.hasRow(\"Page\", \"XWikiAllGroup\"));\n    }","commit_id":"a6a79f1e43aa9ef6d515089d24278cea9211e060","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testRecycleBinTabs() throws Exception\n    {\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n\n        AllDocsPage page = new AllDocsPage();\n        AllDocsPage.gotoPage();\n        Assert.assertTrue(\"Deleted documents tab is not visible to Admin\", page.hasDeletedDocsTab());\n        Assert.assertTrue(\"Deleted attachments tab is not visible to Admin\", page.hasDeletedAttachmentsTab());\n        // Logs out to be guest\n        page.logout();\n        Assert.assertFalse(\"Deleted documents shouldn't be visible to guests\", page.hasDeletedDocsTab());\n        Assert.assertFalse(\"Deleted attachments shouldn't be visible to guests\", page.hasDeletedAttachmentsTab());\n\n    }","id":64242,"modified_method":"@Test\n    public void testRecycleBinTabs() throws Exception\n    {\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n\n        AllDocsPage page = AllDocsPage.gotoPage();\n        assertTrue(\"Deleted documents tab is not visible to Admin\", page.hasDeletedDocsTab());\n        assertTrue(\"Deleted attachments tab is not visible to Admin\", page.hasDeletedAttachmentsTab());\n        // Logs out to be guest\n        page.logout();\n        assertFalse(\"Deleted documents shouldn't be visible to guests\", page.hasDeletedDocsTab());\n        assertFalse(\"Deleted attachments shouldn't be visible to guests\", page.hasDeletedAttachmentsTab());\n\n    }","commit_id":"a6a79f1e43aa9ef6d515089d24278cea9211e060","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException\n    {\n        getLog().info(\"Using platform version: \" + getXWikiPlatformVersion());\n\n        // Step 1: Expand Jetty resources into the package output directory.\n        getLog().info(\"Expanding Jetty Resources ...\");\n        expandJettyDistribution();\n\n        // Step 2: Get the WAR dependencies and expand them in the package output directory.\n        getLog().info(\"Expanding WAR dependencies ...\");\n        File webappsDirectory = new File(this.outputPackageDirectory, \"webapps\");\n        for (Map.Entry<String, Artifact> warArtifactEntry : resolveWarArtifacts().entrySet()) {\n            getLog().info(\"  ... Unzipping WAR: \" + warArtifactEntry.getValue().getFile());\n            unzip(warArtifactEntry.getValue().getFile(), new File(webappsDirectory, warArtifactEntry.getKey()));\n        }\n\n        // Step 3: Copy all JARs dependencies to the expanded WAR directory in WEB-INF/lib\n        getLog().info(\"Copying JAR dependencies ...\");\n        File xwikiWebappDirectory = new File(webappsDirectory, \"xwiki\");\n        File webInfDirectory = new File(xwikiWebappDirectory, \"WEB-INF\");\n        File libDirectory = new File(webInfDirectory, \"lib\");\n        createDirectory(libDirectory);\n        for (Artifact artifact : resolveJarArtifacts()) {\n            getLog().info(\"  ... Copying JAR: \" + artifact.getFile());\n            copyFile(artifact.getFile(), libDirectory);\n        }\n\n        // Step 4: Copy compiled classes in the WEB-INF/Classes directory. This allows the tests to provide custom\n        // code, for example to override existing components for the test purpose. As an example the link\n        // checker might want to override the HTTP Checker component so that checks are not done over the\n        // internet since the tests need to execute in a stable environment to prevent false positives.\n        getLog().info(\"Copying Java Classes ...\");\n        File classesDirectory = new File(webInfDirectory, \"classes\");\n        if (this.outputClassesDirectory.exists()) {\n            copyDirectory(this.outputClassesDirectory, classesDirectory);\n        }\n\n        // Step 5: Generate and copy config files.\n        getLog().info(\"Copying Configuration files ...\");\n        generateConfigurationFiles(webInfDirectory);\n\n        // Step 6: Copy HSQLDB JDBC Driver\n        getLog().info(\"Copying HSQLDB JDBC Driver JAR ...\");\n        Artifact hsqldbArtifact = resolveHSQLDBArtifact();\n        copyFile(hsqldbArtifact.getFile(), libDirectory);\n\n        // Step 7: Unzip the specified Skins. If no skin is specified then unzip the Colibri skin only.\n        getLog().info(\"Copying Skins ...\");\n        File skinsDirectory = new File(xwikiWebappDirectory, \"skins\");\n        if (this.skinArtifactItems != null) {\n            for (SkinArtifactItem skinArtifactItem : this.skinArtifactItems) {\n                Artifact skinArtifact = resolveArtifactItem(skinArtifactItem);\n                unzip(skinArtifact.getFile(), skinsDirectory);\n            }\n        } else {\n            Artifact colibriArtifact =\n                resolveArtifact(\"org.xwiki.platform\", \"xwiki-platform-colibri\", getXWikiPlatformVersion(), \"zip\");\n            unzip(colibriArtifact.getFile(), skinsDirectory);\n        }\n\n        // Step 8: Import specified XAR files into the database\n        getLog().info(\n            String.format(\"Import XAR dependencies %s...\", this.importUser == null ? \"as a backup pack\"\n                : \"using user [\" + this.importUser + \"]\"));\n        importXARs(webInfDirectory);\n    }","id":64243,"modified_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException\n    {\n        getLog().info(\"Using platform version: \" + getXWikiPlatformVersion());\n\n        // Step 1: Expand Jetty resources into the package output directory.\n        getLog().info(\"Expanding Jetty Resources ...\");\n        expandJettyDistribution();\n\n        // Step 2: Get the WAR dependencies and expand them in the package output directory.\n        getLog().info(\"Expanding WAR dependencies ...\");\n        File webappsDirectory = new File(this.outputPackageDirectory, \"webapps\");\n        for (Map.Entry<String, Artifact> warArtifactEntry : resolveWarArtifacts().entrySet()) {\n            getLog().info(\"  ... Unzipping WAR: \" + warArtifactEntry.getValue().getFile());\n            unzip(warArtifactEntry.getValue().getFile(), new File(webappsDirectory, warArtifactEntry.getKey()));\n        }\n\n        // Step 3: Copy all JARs dependencies to the expanded WAR directory in WEB-INF/lib\n        getLog().info(\"Copying JAR dependencies ...\");\n        File xwikiWebappDirectory = new File(webappsDirectory, \"xwiki\");\n        File webInfDirectory = new File(xwikiWebappDirectory, \"WEB-INF\");\n        File libDirectory = new File(webInfDirectory, \"lib\");\n        createDirectory(libDirectory);\n        for (Artifact artifact : resolveJarArtifacts()) {\n            getLog().info(\"  ... Copying JAR: \" + artifact.getFile());\n            copyFile(artifact.getFile(), libDirectory);\n        }\n\n        // Step 4: Copy compiled classes in the WEB-INF/Classes directory. This allows the tests to provide custom\n        // code, for example to override existing components for the test purpose. As an example the link\n        // checker might want to override the HTTP Checker component so that checks are not done over the\n        // internet since the tests need to execute in a stable environment to prevent false positives.\n        getLog().info(\"Copying Java Classes ...\");\n        File classesDirectory = new File(webInfDirectory, \"classes\");\n        if (this.outputClassesDirectory.exists()) {\n            copyDirectory(this.outputClassesDirectory, classesDirectory);\n        }\n\n        // Step 5: Generate and copy config files.\n        getLog().info(\"Copying Configuration files ...\");\n        generateConfigurationFiles(webInfDirectory);\n\n        // Step 6: Copy HSQLDB JDBC Driver\n        getLog().info(\"Copying HSQLDB JDBC Driver JAR ...\");\n        Artifact hsqldbArtifact = resolveHSQLDBArtifact();\n        copyFile(hsqldbArtifact.getFile(), libDirectory);\n\n        // Step 7: Unzip the specified Skins. If no skin is specified then unzip the Colibri skin only.\n        getLog().info(\"Copying Skins ...\");\n        File skinsDirectory = new File(xwikiWebappDirectory, \"skins\");\n        if (this.skinArtifactItems != null) {\n            for (SkinArtifactItem skinArtifactItem : this.skinArtifactItems) {\n                Artifact skinArtifact = resolveArtifactItem(skinArtifactItem);\n                unzip(skinArtifact.getFile(), skinsDirectory);\n            }\n        } else {\n            Artifact colibriArtifact =\n                resolveArtifact(\"org.xwiki.platform\", \"xwiki-platform-colibri\", getXWikiPlatformVersion(), \"zip\");\n            unzip(colibriArtifact.getFile(), skinsDirectory);\n        }\n\n        // Step 8: Extract SmartClient library from smartGWT to be used by the XWiki Explorer Tree.\n        getLog().info(\"Extracting SmartClient ...\");\n        String smartGWTVersion = this.project.getProperties().getProperty(\"smartgwt.version\");\n        Artifact smartGWTArtifact = resolveArtifact(\"com.smartgwt\", \"smartgwt\", smartGWTVersion, \"jar\");\n        File smartGWTOutputDirectory = new File(project.getBuild().getDirectory(), \"smartgwt\");\n        unzip(smartGWTArtifact.getFile(), smartGWTOutputDirectory);\n        File smartClientDirectory = new File(xwikiWebappDirectory, \"resources/js/smartclient\");\n        copyDirectory(new File(smartGWTOutputDirectory, \"com/smartclient/public/sc\"), smartClientDirectory);\n        copyDirectory(new File(smartGWTOutputDirectory, \"com/smartclient/theme/enterprise/public/sc/skins\"), new File(\n            smartClientDirectory, \"skins\"));\n\n        // Step 9: Import specified XAR files into the database\n        getLog().info(\n            String.format(\"Import XAR dependencies %s...\", this.importUser == null ? \"as a backup pack\"\n                : \"using user [\" + this.importUser + \"]\"));\n        importXARs(webInfDirectory);\n    }","commit_id":"a6a79f1e43aa9ef6d515089d24278cea9211e060","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/** Functionality check: changing the profile picture. */\n    @Test\n    @IgnoreBrowsers({\n        @IgnoreBrowser(value = \"internet.*\", version = \"8\\\\.*\", reason=\"See http://jira.xwiki.org/browse/XE-1146\"),\n        @IgnoreBrowser(value = \"internet.*\", version = \"9\\\\.*\", reason=\"See http://jira.xwiki.org/browse/XE-1177\")\n    })\n    public void testChangeAvatarImage()\n    {\n        ChangeAvatarPage changeAvatarImage = this.customProfilePage.changeAvatarImage();\n        changeAvatarImage.setAvatarImage(IMAGE_NAME);\n        changeAvatarImage.submit();\n        Assert.assertEquals(IMAGE_NAME, this.customProfilePage.getAvatarImageName());\n    }","id":64244,"modified_method":"/** Functionality check: changing the profile picture. */\n    @Test\n    @IgnoreBrowsers({\n        @IgnoreBrowser(value = \"internet.*\", version = \"8\\\\.*\", reason=\"See http://jira.xwiki.org/browse/XE-1146\"),\n        @IgnoreBrowser(value = \"internet.*\", version = \"9\\\\.*\", reason=\"See http://jira.xwiki.org/browse/XE-1177\")\n    })\n    public void testChangeAvatarImage()\n    {\n        // In order to change the avatar image we have to use the Attachment Selector macro which by default has\n        // wiki-level visibility and thus is not registered in our setup because we don't have the XWiki.Admin user.\n        // Let's change the macro visibility to current user to make sure it is registered.\n        setWikiMacroVisibility(\"XWiki\", \"AttachmentSelector\", \"Current User\");\n\n        ChangeAvatarPage changeAvatarImage = this.customProfilePage.changeAvatarImage();\n        changeAvatarImage.setAvatarImage(IMAGE_NAME);\n        changeAvatarImage.submit();\n        Assert.assertEquals(IMAGE_NAME, this.customProfilePage.getAvatarImageName());\n    }","commit_id":"c1a6a3bc10b8bdeb05d45d1ec923b88493c5bc07","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp()\n    {\n        this.userName = getTestClassName() + getTestMethodName();\n        this.customProfilePage = new ProfileUserProfilePage(this.userName);\n        getUtil().registerLoginAndGotoPage(this.userName, \"test\", this.customProfilePage.getURL());\n    }","id":64245,"modified_method":"@Before\n    public void setUp()\n    {\n        this.userName = getTestClassName() + getTestMethodName();\n        getUtil().createUser(this.userName, \"test\");\n\n        this.customProfilePage = ProfileUserProfilePage.gotoPage(this.userName);\n    }","commit_id":"c1a6a3bc10b8bdeb05d45d1ec923b88493c5bc07","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public Result execute(Result result, int nr, Repository rep, Job parentJob) throws KettleException\n\t{\n\t    result.setEntryNr( nr );\n\n        LogWriter logwriter = log;\n        \n        Log4jFileAppender appender = null;\n        int backupLogLevel = log.getLogLevel();\n        if (setLogfile)\n        {\n            try\n            {\n                appender = LogWriter.createFileAppender(environmentSubstitute(getLogFilename()), true,setAppendLogfile);\n            }\n            catch(KettleException e)\n            {\n                log.logError(toString(), \"Unable to open file appender for file [\"+getLogFilename()+\"] : \"+e.toString());\n                log.logError(toString(), Const.getStackTracker(e));\n                result.setNrErrors(1);\n                result.setResult(false);\n                return result;\n            }\n            log.addAppender(appender);\n            log.setLogLevel(loglevel);\n\n            logwriter = LogWriter.getInstance(environmentSubstitute(getLogFilename()), true, loglevel);\n        }\n\n        try\n        {\n            // First load the job, outside of the loop...\n        \tif ( parentJob.getJobMeta() != null )\n        \t{\n        \t\t// reset the internal variables again.\n        \t\t// Maybe we should split up the variables even more like in UNIX shells.\n        \t\t// The internal variables need to be reset to be able use them properly in 2 sequential sub jobs.\n        \t\tparentJob.getJobMeta().setInternalKettleVariables();\n        \t}\n\n            JobMeta jobMeta = null;\n            boolean fromRepository = rep!=null && !Const.isEmpty(jobname) && directory!=null;\n            boolean fromXMLFile = !Const.isEmpty(filename);\n            if (fromRepository) // load from the repository...\n            {\n                log.logDetailed(toString(), \"Loading job from repository : [\"+directory+\" : \"+environmentSubstitute(jobname)+\"]\");\n                jobMeta = new JobMeta(logwriter, rep, environmentSubstitute(jobname), directory);\n                jobMeta.setParentVariableSpace(parentJob);\n            }\n            else // Get it from the XML file\n            if (fromXMLFile)\n            {\n                log.logDetailed(toString(), \"Loading job from XML file : [\"+environmentSubstitute(filename)+\"]\");\n                jobMeta = new JobMeta(logwriter, environmentSubstitute(filename), rep, null);\n                jobMeta.setParentVariableSpace(parentJob);\n            }\n\n            if (jobMeta==null)\n            {\n                throw new KettleException(\"Unable to load the job: please specify the name and repository directory OR a filename\");\n            }\n            \n            verifyRecursiveExecution(parentJob, jobMeta);\n    \t\t\n            // Tell logging what job entry we are launching...\n            if (fromRepository)\n            {\n                log.logBasic(toString(), \"Starting job, loaded from repository : [\"+directory+\" : \"+environmentSubstitute(jobname)+\"]\");\n            }\n            else\n            if (fromXMLFile)\n            {\n                log.logDetailed(toString(), \"Starting job, loaded from XML file : [\"+environmentSubstitute(filename)+\"]\");\n            }\n\n            int iteration = 0;\n            String args1[] = arguments;\n            if (args1==null || args1.length==0) // no arguments?  Check the parent jobs arguments\n            {\n                args1 = parentJob.getJobMeta().getArguments();\n            }\n\n            copyVariablesFrom(parentJob);\n            setParentVariableSpace(parentJob);\r\n\n            //\n            // For the moment only do variable translation at the start of a job, not\n            // for every input row (if that would be switched on)\n            //\n            String args[] = null;\n            if ( args1 != null )\n            {\n                args = new String[args1.length];\n                for ( int idx = 0; idx < args1.length; idx++ )\n                {\n                \targs[idx] = environmentSubstitute(args1[idx]);\n                }\n            }\n\n            RowMetaAndData resultRow = null;\n            boolean first = true;\n            List<RowMetaAndData> rows = result.getRows();\n\n            while( ( first && !execPerRow ) || ( execPerRow && rows!=null && iteration<rows.size() && result.getNrErrors()==0 ) )\n            {\n                first=false;\n                if (rows!=null && execPerRow)\n                {\n                \tresultRow = (RowMetaAndData) rows.get(iteration);\n                }\n                else\n                {\n                \tresultRow = null;\n                }\n                \n                Result oneResult = new Result();\n            \t\n            \tList<RowMetaAndData> sourceRows = null;\n                \n                if (execPerRow) // Execute for each input row\n                {\n                    if (argFromPrevious) // Copy the input row to the (command line) arguments\n                    {\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Just pass a single row\n                        List<RowMetaAndData> newList = new ArrayList<RowMetaAndData>();\n                        newList.add(resultRow);\n                        sourceRows = newList;\n                    }\n                }\n                else\n                {\n                    if (argFromPrevious)\n                    {\n                        // Only put the first Row on the arguments\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Keep it as it was...\n                        sourceRows = result.getRows();\n                    }\n                }\n\n                if (remoteSlaveServer==null)\n                {\n                \t// Local execution...\n                \t//\n                \t\n\t                // Create a new job\n\t                Job job = new Job(logwriter, StepLoader.getInstance(), rep, jobMeta);\n\t\n\t                job.shareVariablesWith(this);\r\n\t                job.setInternalKettleVariables(this);\n\t                \n\t                // Set the source rows we calculated above...\n\t                //\n\t                job.setSourceRows(sourceRows);\n\t\n\t                // Don't forget the logging...\n\t                job.beginProcessing();\n\t\n\t                // Link the job with the sub-job\n\t                parentJob.getJobTracker().addJobTracker(job.getJobTracker());\n\t\n\t                // Link both ways!\n\t                job.getJobTracker().setParentJobTracker(parentJob.getJobTracker());\n\t\n\t                // Tell this sub-job about its parent...\n\t                job.setParentJob(parentJob);\n\t\n\t                if (parentJob.getJobMeta().isBatchIdPassed())\n\t                {\n\t                    job.setPassedBatchId(parentJob.getBatchId());\n\t                }\n\t\n\t\n\t                job.getJobMeta().setArguments( args );\n\t\n\t                JobEntryJobRunner runner = new JobEntryJobRunner( job, result, nr);\n\t    \t\t\tThread jobRunnerThread = new Thread(runner);\n\t                jobRunnerThread.setName( Const.NVL(job.getJobMeta().getName(), job.getJobMeta().getFilename()) );\n\t                jobRunnerThread.start();\n\t\n\t                try\n\t                {\n\t        \t\t\twhile (!runner.isFinished() && !parentJob.isStopped())\n\t        \t\t\t{\n\t        \t\t\t\ttry { Thread.sleep(100);}\n\t        \t\t\t\tcatch(InterruptedException e) { }\n\t        \t\t\t}\n\t\n\t        \t\t\t// if the parent-job was stopped, stop the sub-job too...\n\t        \t\t\tif (parentJob.isStopped())\n\t        \t\t\t{\n\t        \t\t\t\tjob.stopAll();\n\t        \t\t\t\trunner.waitUntilFinished(); // Wait until finished!\n\t        \t\t\t\tjob.endProcessing(\"stop\", new Result()); // dummy result\n\t        \t\t\t}\n\t        \t\t\telse\n\t        \t\t\t{\n\t        \t\t\t\tjob.endProcessing(\"end\", runner.getResult()); // the result of the execution to be stored in the log file.\n\t        \t\t\t}\n\t                }\n\t        \t\tcatch(KettleException je)\n\t        \t\t{\n\t        \t\t\tlog.logError(toString(), \"Unable to open job entry job with name [\"+getName()+\"] : \"+Const.CR+je.toString());\n\t        \t\t\tresult.setNrErrors(1);\n\t        \t\t}\n\t        \t\t\n\t        \t\toneResult = runner.getResult();\n                }\n                else\n                {\n                \t// Remote execution...\n                \t//\n                \tJobExecutionConfiguration jobExecutionConfiguration = new JobExecutionConfiguration();\n                \tjobExecutionConfiguration.setPreviousResult(result.clone());\n                \tjobExecutionConfiguration.getPreviousResult().setRows(sourceRows);\n                \tjobExecutionConfiguration.setArgumentStrings(args);\n                \tjobExecutionConfiguration.setVariables(this);\n                \tjobExecutionConfiguration.setRemoteServer(remoteSlaveServer);\n                \tjobExecutionConfiguration.setRepository(rep);\n                \t\n                \t// Send the XML over to the slave server\n                \t// Also start the job over there...\n                \t//\n                \tJob.sendXMLToSlaveServer(jobMeta, jobExecutionConfiguration);\n                \t\n                \t// Now start the monitoring...\n                \t//\n                \twhile (!parentJob.isStopped())\n                \t{\n                \t\ttry \n                \t\t{\n\t\t\t\t\t\t\tSlaveServerJobStatus jobStatus = remoteSlaveServer.getJobStatus(jobMeta.getName());\n\t\t\t\t\t\t\tif (jobStatus.getResult()!=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// The job is finished, get the result...\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\toneResult = jobStatus.getResult();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n                \t\tcatch (Exception e1) {\n\t\t\t\t\t\t\tlog.logError(toString(), \"Unable to contact slave server [\"+remoteSlaveServer+\"] to verify the status of job [\"+jobMeta.getName()+\"]\");\n\t\t\t\t\t\t\toneResult.setNrErrors(1L);\n\t\t\t\t\t\t\tbreak; // Stop looking too, chances are too low the server will come back on-line\n\t\t\t\t\t\t}\n                \t\t\n                \t\ttry { Thread.sleep(10000); } catch(InterruptedException e) {} ; // sleep for 10 seconds\n                \t}\n                }\n\n                \n                if (iteration==0)\n                {\n                    result.clear();\n                }\n                \n                result.add(oneResult);\n                if (oneResult.getResult()==false) // if one of them fails, set the number of errors\n                {\n                    result.setNrErrors(result.getNrErrors()+1);\n                }\n\n                iteration++;\n            }\n\n        }\n        catch(KettleException ke)\n        {\n            log.logError(toString(), \"Error running job entry 'job' : \"+ke.toString());\n            log.logError(toString(), Const.getStackTracker(ke));\n\n            result.setResult(false);\n            result.setNrErrors(1L);\n        }\n\n        if (setLogfile)\n        {\n            if (appender!=null)\n            {\n                log.removeAppender(appender);\n                appender.close();\n\n                ResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, appender.getFile(), parentJob.getJobname(), getName());\n                result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n            }\n            log.setLogLevel(backupLogLevel);\n\n        }\n\n        if (result.getNrErrors() > 0)\n        {\n            result.setResult( false );\n        }\n        else\n        {\n            result.setResult( true );\n        }\n\n        return result;\n\t}","id":64246,"modified_method":"public Result execute(Result result, int nr, Repository rep, Job parentJob) throws KettleException\n\t{\n\t    result.setEntryNr( nr );\n\n        LogWriter logwriter = log;\n        \n        Log4jFileAppender appender = null;\n        int backupLogLevel = log.getLogLevel();\n        if (setLogfile)\n        {\n            try\n            {\n                appender = LogWriter.createFileAppender(environmentSubstitute(getLogFilename()), true,setAppendLogfile);\n            }\n            catch(KettleException e)\n            {\n                log.logError(toString(), \"Unable to open file appender for file [\"+getLogFilename()+\"] : \"+e.toString());\n                log.logError(toString(), Const.getStackTracker(e));\n                result.setNrErrors(1);\n                result.setResult(false);\n                return result;\n            }\n            log.addAppender(appender);\n            log.setLogLevel(loglevel);\n\n            logwriter = LogWriter.getInstance(environmentSubstitute(getLogFilename()), true, loglevel);\n        }\n\n        try\n        {\n            // First load the job, outside of the loop...\n        \tif ( parentJob.getJobMeta() != null )\n        \t{\n        \t\t// reset the internal variables again.\n        \t\t// Maybe we should split up the variables even more like in UNIX shells.\n        \t\t// The internal variables need to be reset to be able use them properly in 2 sequential sub jobs.\n        \t\tparentJob.getJobMeta().setInternalKettleVariables();\n        \t}\n\n            JobMeta jobMeta = null;\n            boolean fromRepository = rep!=null && !Const.isEmpty(jobname) && directory!=null;\n            boolean fromXMLFile = !Const.isEmpty(filename);\n            if (fromRepository) // load from the repository...\n            {\n                log.logDetailed(toString(), \"Loading job from repository : [\"+directory+\" : \"+environmentSubstitute(jobname)+\"]\");\n                jobMeta = new JobMeta(logwriter, rep, environmentSubstitute(jobname), directory);\n                jobMeta.setParentVariableSpace(parentJob);\n            }\n            else // Get it from the XML file\n            if (fromXMLFile)\n            {\n                log.logDetailed(toString(), \"Loading job from XML file : [\"+environmentSubstitute(filename)+\"]\");\n                jobMeta = new JobMeta(logwriter, environmentSubstitute(filename), rep, null);\n                jobMeta.setParentVariableSpace(parentJob);\n            }\n\n            if (jobMeta==null)\n            {\n                throw new KettleException(\"Unable to load the job: please specify the name and repository directory OR a filename\");\n            }\n            \n            verifyRecursiveExecution(parentJob, jobMeta);\n    \t\t\n            // Tell logging what job entry we are launching...\n            if (fromRepository)\n            {\n                log.logBasic(toString(), \"Starting job, loaded from repository : [\"+directory+\" : \"+environmentSubstitute(jobname)+\"]\");\n            }\n            else\n            if (fromXMLFile)\n            {\n                log.logDetailed(toString(), \"Starting job, loaded from XML file : [\"+environmentSubstitute(filename)+\"]\");\n            }\n\n            int iteration = 0;\n            String args1[] = arguments;\n            if (args1==null || args1.length==0) // no arguments?  Check the parent jobs arguments\n            {\n                args1 = parentJob.getJobMeta().getArguments();\n            }\n\n            copyVariablesFrom(parentJob);\n            setParentVariableSpace(parentJob);\r\n\n            //\n            // For the moment only do variable translation at the start of a job, not\n            // for every input row (if that would be switched on)\n            //\n            String args[] = null;\n            if ( args1 != null )\n            {\n                args = new String[args1.length];\n                for ( int idx = 0; idx < args1.length; idx++ )\n                {\n                \targs[idx] = environmentSubstitute(args1[idx]);\n                }\n            }\n\n            RowMetaAndData resultRow = null;\n            boolean first = true;\n            List<RowMetaAndData> rows = new ArrayList<RowMetaAndData>(result.getRows());\n\n            while( ( first && !execPerRow ) || ( execPerRow && rows!=null && iteration<rows.size() && result.getNrErrors()==0 ) )\n            {\r\n            \tif (execPerRow)\r\n            \t{\r\n            \t\tresult.getRows().clear();\r\n            \t}\n                first=false;\n                if (rows!=null && execPerRow)\n                {\n                \tresultRow = (RowMetaAndData) rows.get(iteration);\n                }\n                else\n                {\n                \tresultRow = null;\n                }\n                \n                Result oneResult = new Result();\n            \t\n            \tList<RowMetaAndData> sourceRows = null;\n                \n                if (execPerRow) // Execute for each input row\n                {\n                    if (argFromPrevious) // Copy the input row to the (command line) arguments\n                    {\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Just pass a single row\n                        List<RowMetaAndData> newList = new ArrayList<RowMetaAndData>();\n                        newList.add(resultRow);\n                        sourceRows = newList;\n                    }\n                }\n                else\n                {\n                    if (argFromPrevious)\n                    {\n                        // Only put the first Row on the arguments\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Keep it as it was...\n                        sourceRows = result.getRows();\n                    }\n                }\n\n                if (remoteSlaveServer==null)\n                {\n                \t// Local execution...\n                \t//\n                \t\n\t                // Create a new job\n\t                Job job = new Job(logwriter, StepLoader.getInstance(), rep, jobMeta);\n\t\n\t                job.shareVariablesWith(this);\r\n\t                job.setInternalKettleVariables(this);\n\t                \n\t                // Set the source rows we calculated above...\n\t                //\n\t                job.setSourceRows(sourceRows);\n\t\n\t                // Don't forget the logging...\n\t                job.beginProcessing();\n\t\n\t                // Link the job with the sub-job\n\t                parentJob.getJobTracker().addJobTracker(job.getJobTracker());\n\t\n\t                // Link both ways!\n\t                job.getJobTracker().setParentJobTracker(parentJob.getJobTracker());\n\t\n\t                // Tell this sub-job about its parent...\n\t                job.setParentJob(parentJob);\n\t\n\t                if (parentJob.getJobMeta().isBatchIdPassed())\n\t                {\n\t                    job.setPassedBatchId(parentJob.getBatchId());\n\t                }\n\t\n\t\n\t                job.getJobMeta().setArguments( args );\n\t\n\t                JobEntryJobRunner runner = new JobEntryJobRunner( job, result, nr);\n\t    \t\t\tThread jobRunnerThread = new Thread(runner);\n\t                jobRunnerThread.setName( Const.NVL(job.getJobMeta().getName(), job.getJobMeta().getFilename()) );\n\t                jobRunnerThread.start();\n\t\n\t                try\n\t                {\n\t        \t\t\twhile (!runner.isFinished() && !parentJob.isStopped())\n\t        \t\t\t{\n\t        \t\t\t\ttry { Thread.sleep(100);}\n\t        \t\t\t\tcatch(InterruptedException e) { }\n\t        \t\t\t}\n\t\n\t        \t\t\t// if the parent-job was stopped, stop the sub-job too...\n\t        \t\t\tif (parentJob.isStopped())\n\t        \t\t\t{\n\t        \t\t\t\tjob.stopAll();\n\t        \t\t\t\trunner.waitUntilFinished(); // Wait until finished!\n\t        \t\t\t\tjob.endProcessing(\"stop\", new Result()); // dummy result\n\t        \t\t\t}\n\t        \t\t\telse\n\t        \t\t\t{\n\t        \t\t\t\tjob.endProcessing(\"end\", runner.getResult()); // the result of the execution to be stored in the log file.\n\t        \t\t\t}\n\t                }\n\t        \t\tcatch(KettleException je)\n\t        \t\t{\n\t        \t\t\tlog.logError(toString(), \"Unable to open job entry job with name [\"+getName()+\"] : \"+Const.CR+je.toString());\n\t        \t\t\tresult.setNrErrors(1);\n\t        \t\t}\n\t        \t\t\n\t        \t\toneResult = runner.getResult();\n                }\n                else\n                {\n                \t// Remote execution...\n                \t//\n                \tJobExecutionConfiguration jobExecutionConfiguration = new JobExecutionConfiguration();\n                \tjobExecutionConfiguration.setPreviousResult(result.clone());\n                \tjobExecutionConfiguration.getPreviousResult().setRows(sourceRows);\n                \tjobExecutionConfiguration.setArgumentStrings(args);\n                \tjobExecutionConfiguration.setVariables(this);\n                \tjobExecutionConfiguration.setRemoteServer(remoteSlaveServer);\n                \tjobExecutionConfiguration.setRepository(rep);\n                \t\n                \t// Send the XML over to the slave server\n                \t// Also start the job over there...\n                \t//\n                \tJob.sendXMLToSlaveServer(jobMeta, jobExecutionConfiguration);\n                \t\n                \t// Now start the monitoring...\n                \t//\n                \twhile (!parentJob.isStopped())\n                \t{\n                \t\ttry \n                \t\t{\n\t\t\t\t\t\t\tSlaveServerJobStatus jobStatus = remoteSlaveServer.getJobStatus(jobMeta.getName());\n\t\t\t\t\t\t\tif (jobStatus.getResult()!=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// The job is finished, get the result...\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\toneResult = jobStatus.getResult();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n                \t\tcatch (Exception e1) {\n\t\t\t\t\t\t\tlog.logError(toString(), \"Unable to contact slave server [\"+remoteSlaveServer+\"] to verify the status of job [\"+jobMeta.getName()+\"]\");\n\t\t\t\t\t\t\toneResult.setNrErrors(1L);\n\t\t\t\t\t\t\tbreak; // Stop looking too, chances are too low the server will come back on-line\n\t\t\t\t\t\t}\n                \t\t\n                \t\ttry { Thread.sleep(10000); } catch(InterruptedException e) {} ; // sleep for 10 seconds\n                \t}\n                }\n\n                \n                if (iteration==0)\n                {\n                    result.clear();\n                }\n                \n                result.add(oneResult);\n                if (oneResult.getResult()==false) // if one of them fails, set the number of errors\n                {\n                    result.setNrErrors(result.getNrErrors()+1);\n                }\n\n                iteration++;\n            }\n\n        }\n        catch(KettleException ke)\n        {\n            log.logError(toString(), \"Error running job entry 'job' : \"+ke.toString());\n            log.logError(toString(), Const.getStackTracker(ke));\n\n            result.setResult(false);\n            result.setNrErrors(1L);\n        }\n\n        if (setLogfile)\n        {\n            if (appender!=null)\n            {\n                log.removeAppender(appender);\n                appender.close();\n\n                ResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, appender.getFile(), parentJob.getJobname(), getName());\n                result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n            }\n            log.setLogLevel(backupLogLevel);\n\n        }\n\n        if (result.getNrErrors() > 0)\n        {\n            result.setResult( false );\n        }\n        else\n        {\n            result.setResult( true );\n        }\n\n        return result;\n\t}","commit_id":"57c5550308c23c766b3127fe99792b6a0948c2b7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n     * Execute this job entry and return the result.\n     * In this case it means, just set the result boolean in the Result class.\n     * @param result The result of the previous execution\n     * @param nr the job entry number\n     * @param rep the repository connection to use\n     * @param parentJob the parent job\n     * @return The Result of the execution.\n     */\n    public Result execute(Result result, int nr, Repository rep, Job parentJob) throws KettleException\n\t{\n\t\tLogWriter log       = LogWriter.getInstance();\n\t\tresult.setEntryNr( nr );\n\n\t\tLog4jFileAppender appender = null;\n        int backupLogLevel = log.getLogLevel();\n        if (setLogfile)\n        {\n            try\n            {\r\n                appender = LogWriter.createFileAppender(environmentSubstitute(getLogFilename()), true,setAppendLogfile);\n            }\n            catch(KettleException e)\n            {\n                log.logError(toString(), \"Unable to open file appender for file [\"+getLogFilename()+\"] : \"+e.toString());\n                log.logError(toString(), Const.getStackTracker(e));\n                result.setNrErrors(1);\n                result.setResult(false);\n                return result;\n            }\n            log.addAppender(appender);\n            log.setLogLevel(loglevel);\n        }\n\n\t\t// Open the transformation...\n\t\t// Default directory for now...\n\n        log.logBasic(toString(), \"Opening filename : [\"+environmentSubstitute(getFilename())+\"]\");\n\n        if (!Const.isEmpty(getFilename()))\n        {\n            log.logBasic(toString(), \"Opening transformation: [\"+environmentSubstitute(getFilename())+\"]\");\n        }\n        else\n        {\n            log.logBasic(toString(), \"Opening transformation: [\"+environmentSubstitute(getTransname())+\"] in directory [\"+directory.getPath()+\"]\");\n        }\n\n        // Load the transformation only once for the complete loop!\n        TransMeta transMeta = getTransMeta(rep);\n\n        int iteration = 0;\n        String args1[] = arguments;\n        if (args1==null || args1.length==0) // No arguments set, look at the parent job.\n        {\n            args1 = parentJob.getJobMeta().getArguments();\n        }\n        //initializeVariablesFrom(parentJob);\n\n        //\n        // For the moment only do variable translation at the start of a job, not\n        // for every input row (if that would be switched on). This is for safety,\n        // the real argument setting is later on.\n        //\n        String args[] = null;\n        if ( args1 != null )\n        {\n            args = new String[args1.length];\n            for ( int idx = 0; idx < args1.length; idx++ )\n            {\n            \targs[idx] = environmentSubstitute(args1[idx]);\n            }\n        }\n\n        RowMetaAndData resultRow = null;\n        boolean first = true;\n        List<RowMetaAndData> rows = result.getRows();\n\n        while( ( first && !execPerRow ) || ( execPerRow && rows!=null && iteration<rows.size() && result.getNrErrors()==0 ) && !parentJob.isStopped() )\n        {\n            first=false;\n            if (rows!=null && execPerRow)\n            {\n            \tresultRow = rows.get(iteration);\n            }\n            else\n            {\n            \tresultRow = null;\n            }\n\n    \t\ttry\n    \t\t{\n                log.logDetailed(toString(), \"Starting transformation...(file=\"+getFilename()+\", name=\"+getName()+\"), repinfo=\"+getDescription());\n\n                // Set the result rows for the next one...\n                transMeta.setPreviousResult(result);\n\n                if (clearResultRows)\n                {\n                    transMeta.getPreviousResult().setRows(new ArrayList<RowMetaAndData>());\n                }\n\n                if (clearResultFiles)\n                {\n                    transMeta.getPreviousResult().getResultFiles().clear();\n                }\n\n                /*\n                 * Set one or more \"result\" rows on the transformation...\n                 */\n                if (execPerRow) // Execute for each input row\n                {\n                    if (argFromPrevious) // Copy the input row to the (command line) arguments\n                    {\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Just pass a single row\n                        List<RowMetaAndData> newList = new ArrayList<RowMetaAndData>();\n                        newList.add(resultRow);\n\n                        // This previous result rows list can be either empty or not.\n                        // Depending on the checkbox \"clear result rows\"\n                        // In this case, it would execute the transformation with one extra row each time\n                        // Can't figure out a real use-case for it, but hey, who am I to decide that, right?\n                        // :-)\n                        //\n                        transMeta.getPreviousResult().getRows().addAll(newList);\n                    }\n                }\n                else\n                {\n                    if (argFromPrevious)\n                    {\n                        // Only put the first Row on the arguments\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                    \t// do nothing\n                    }\n                }\n\n                // Execute this transformation across a cluster of servers\n                //\n                if (clustering)\n                {\n                    TransExecutionConfiguration executionConfiguration = new TransExecutionConfiguration();\n                    executionConfiguration.setClusterPosting(true);\n                    executionConfiguration.setClusterPreparing(true);\n                    executionConfiguration.setClusterStarting(true);\n                    executionConfiguration.setClusterShowingTransformation(false);\n                    executionConfiguration.setSafeModeEnabled(false);\n                    executionConfiguration.setRepository(rep);\r\n                    \r\n                    // Also pass the variables from the transformation into the execution configuration\r\n                    // That way it can go over the HTTP connection to the slave server.\r\n                    //\r\n                    executionConfiguration.setVariables(transMeta);\r\n                    \r\n                    // Also set the arguments...\r\n                    //\r\n                    executionConfiguration.setArgumentStrings(args);\n                    \n                    TransSplitter transSplitter = Trans.executeClustered(transMeta, executionConfiguration );\n                    \n                    // Monitor the running transformations, wait until they are done.\n                    // Also kill them all if anything goes bad\n                    // Also clean up afterwards...\n                    //\n                    long errors = Trans.monitorClusteredTransformation(toString(), transSplitter, parentJob);\n                    \n                    Result clusterResult = Trans.getClusteredTransformationResult(toString(), transSplitter, parentJob); \n                    result.clear();\n                    result.add(clusterResult);\n                    \n                    result.setNrErrors(result.getNrErrors()+errors);\n\n                }\n                // Execute this transformation remotely\n                //\n                else if (remoteSlaveServer!=null)\n                {\n                \t// Remote execution...\n                \t//\n                \tTransExecutionConfiguration transExecutionConfiguration = new TransExecutionConfiguration();\n                \ttransExecutionConfiguration.setPreviousResult(transMeta.getPreviousResult().clone());\n                \ttransExecutionConfiguration.setArgumentStrings(args);\n                \ttransExecutionConfiguration.setVariables(this);\n                \ttransExecutionConfiguration.setRemoteServer(remoteSlaveServer);\n                \t\n                \t// Send the XML over to the slave server\n                \t// Also start the transformation over there...\n                \t//\n                \tTrans.sendXMLToSlaveServer(transMeta, transExecutionConfiguration);\n                \t\n                \t// Now start the monitoring...\n                \t//\n                \twhile (!parentJob.isStopped())\n                \t{\n                \t\ttry \n                \t\t{\n\t\t\t\t\t\t\tSlaveServerTransStatus transStatus = remoteSlaveServer.getTransStatus(transMeta.getName());\n\t\t\t\t\t\t\tif (!transStatus.isRunning())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// The transformation is finished, get the result...\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tResult remoteResult = transStatus.getResult(); \n\t\t\t                    result.clear();\n\t\t\t                    result.add(remoteResult);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n                \t\tcatch (Exception e1) {\n\t\t\t\t\t\t\tlog.logError(toString(), \"Unable to contact slave server [\"+remoteSlaveServer+\"] to verify the status of transformation [\"+transMeta.getName()+\"]\");\n\t\t\t\t\t\t\tresult.setNrErrors(result.getNrErrors()+1L);\n\t\t\t\t\t\t\tbreak; // Stop looking too, chances are too low the server will come back on-line\n\t\t\t\t\t\t}\n                \t\t\n                \t\ttry { Thread.sleep(10000); } catch(InterruptedException e) {} ; // sleep for 10 seconds\n                \t}\n                }\n                // Execute this transformation on the local machine\n                //\n                else // Local execution...\n                {\n                    // Create the transformation from meta-data\n                    Trans trans = new Trans(transMeta);\n\n                    if (parentJob.getJobMeta().isBatchIdPassed())\n                    {\n                        trans.setPassedBatchId(parentJob.getPassedBatchId());\n                    }\n                    \n                    // set the parent job on the transformation, variables are taken from here...\n                    trans.setParentJob(parentJob);\n                    trans.setParentVariableSpace(parentJob);\n\n                    // First get the root job\n                    //\n                    Job rootJob = parentJob;\n                    while (rootJob.getParentJob()!=null) rootJob=rootJob.getParentJob();\n                    \n                    // Get the start and end-date from the root job...\n                    //\n                    trans.setJobStartDate( rootJob.getStartDate() );\n                    trans.setJobEndDate( rootJob.getEndDate() );\n                    \n                    try {\n            \t\t\t// Start execution...\n                    \t//\n                    \ttrans.execute(args);\n\n                    \t// Wait until we're done with it...\n                    \t//\n        \t\t\t\twhile (!trans.isFinished() && !parentJob.isStopped() && trans.getErrors() == 0)\n        \t\t\t\t{\n        \t\t\t\t\ttry { Thread.sleep(100);}\n        \t\t\t\t\tcatch(InterruptedException e) { }\n        \t\t\t\t}\n\n        \t\t\t\tif (parentJob.isStopped() || trans.getErrors() != 0)\n        \t\t\t\t{\n        \t\t\t\t\ttrans.stopAll();\n        \t\t\t\t\ttrans.waitUntilFinished();\n        \t\t\t\t\ttrans.endProcessing(\"stop\");\n                            result.setNrErrors(1);\n        \t\t\t\t}\n        \t\t\t\telse\n        \t\t\t\t{\n        \t\t\t\t\ttrans.endProcessing(\"end\");\n        \t\t\t\t}\n        \t\t\t\tResult newResult = trans.getResult();\n\n                        result.clear(); // clear only the numbers, NOT the files or rows.\n                        result.add(newResult);\n\n                        // Set the result rows too...\n                        result.setRows(newResult.getRows());\n\n                        if (setLogfile)\n                        {\n                        \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, KettleVFS.getFileObject(getLogFilename()), parentJob.getName(), toString());\n                            result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n        \t\t\t\t}\n                    }\n                    catch (KettleException e) {\n                        log.logError(toString(), \"Unable to prepare for execution of the transformation\");\n        \t\t\t\tresult.setNrErrors(1);\n\t\t\t\t\t}\n                }\n    \t\t}\n    \t\tcatch(Exception e)\n    \t\t{\n    \t\t\tlog.logError(toString(), \"Unable to open transformation: \"+e.getMessage());\n                log.logError(toString(), Const.getStackTracker(e));\n    \t\t\tresult.setNrErrors(1);\n    \t\t}\n            iteration++;\n        }\n\n        if (setLogfile)\n        {\n            if (appender!=null)\n            {\n                log.removeAppender(appender);\n                appender.close();\n\n                ResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, appender.getFile(), parentJob.getJobname(), getName());\n                result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n            }\n            log.setLogLevel(backupLogLevel);\n        }\n\n\t\tif (result.getNrErrors()==0)\n\t\t{\n\t\t\tresult.setResult( true );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.setResult( false );\n\t\t}\n\n\t\t// Hint the VM to release handles.\n\t\tSystem.gc();\n\t\t\n\t\treturn result;\n\t}","id":64247,"modified_method":"/**\n     * Execute this job entry and return the result.\n     * In this case it means, just set the result boolean in the Result class.\n     * @param result The result of the previous execution\n     * @param nr the job entry number\n     * @param rep the repository connection to use\n     * @param parentJob the parent job\n     * @return The Result of the execution.\n     */\n    public Result execute(Result result, int nr, Repository rep, Job parentJob) throws KettleException\n\t{\n\t\tLogWriter log       = LogWriter.getInstance();\n\t\tresult.setEntryNr( nr );\n\n\t\tLog4jFileAppender appender = null;\n        int backupLogLevel = log.getLogLevel();\n        if (setLogfile)\n        {\n            try\n            {\r\n                appender = LogWriter.createFileAppender(environmentSubstitute(getLogFilename()), true,setAppendLogfile);\n            }\n            catch(KettleException e)\n            {\n                log.logError(toString(), \"Unable to open file appender for file [\"+getLogFilename()+\"] : \"+e.toString());\n                log.logError(toString(), Const.getStackTracker(e));\n                result.setNrErrors(1);\n                result.setResult(false);\n                return result;\n            }\n            log.addAppender(appender);\n            log.setLogLevel(loglevel);\n        }\n\n\t\t// Open the transformation...\n\t\t// Default directory for now...\n\n        log.logBasic(toString(), \"Opening filename : [\"+environmentSubstitute(getFilename())+\"]\");\n\n        if (!Const.isEmpty(getFilename()))\n        {\n            log.logBasic(toString(), \"Opening transformation: [\"+environmentSubstitute(getFilename())+\"]\");\n        }\n        else\n        {\n            log.logBasic(toString(), \"Opening transformation: [\"+environmentSubstitute(getTransname())+\"] in directory [\"+directory.getPath()+\"]\");\n        }\n\n        // Load the transformation only once for the complete loop!\n        TransMeta transMeta = getTransMeta(rep);\n\n        int iteration = 0;\n        String args1[] = arguments;\n        if (args1==null || args1.length==0) // No arguments set, look at the parent job.\n        {\n            args1 = parentJob.getJobMeta().getArguments();\n        }\n        //initializeVariablesFrom(parentJob);\n\n        //\n        // For the moment only do variable translation at the start of a job, not\n        // for every input row (if that would be switched on). This is for safety,\n        // the real argument setting is later on.\n        //\n        String args[] = null;\n        if ( args1 != null )\n        {\n            args = new String[args1.length];\n            for ( int idx = 0; idx < args1.length; idx++ )\n            {\n            \targs[idx] = environmentSubstitute(args1[idx]);\n            }\n        }\n\n        RowMetaAndData resultRow = null;\n        boolean first = true;\n        List<RowMetaAndData> rows = new ArrayList<RowMetaAndData>(result.getRows());\n\n        while( ( first && !execPerRow ) || ( execPerRow && rows!=null && iteration<rows.size() && result.getNrErrors()==0 ) && !parentJob.isStopped() )\n        {\r\n            if (execPerRow)\r\n            {\r\n            \tresult.getRows().clear(); // Otherwise we double the amount of rows every iteration in the simple cases.\r\n            }\r\n            \n            first=false;\n            if (rows!=null && execPerRow)\n            {\n            \tresultRow = rows.get(iteration);\n            }\n            else\n            {\n            \tresultRow = null;\n            }\n\n    \t\ttry\n    \t\t{\n                log.logDetailed(toString(), \"Starting transformation...(file=\"+getFilename()+\", name=\"+getName()+\"), repinfo=\"+getDescription());\n\n                // Set the result rows for the next one...\n                transMeta.setPreviousResult(result);\n\n                if (clearResultRows)\n                {\n                    transMeta.getPreviousResult().setRows(new ArrayList<RowMetaAndData>());\n                }\n\n                if (clearResultFiles)\n                {\n                    transMeta.getPreviousResult().getResultFiles().clear();\n                }\n\n                /*\n                 * Set one or more \"result\" rows on the transformation...\n                 */\n                if (execPerRow) // Execute for each input row\n                {\n                    if (argFromPrevious) // Copy the input row to the (command line) arguments\n                    {\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Just pass a single row\n                        List<RowMetaAndData> newList = new ArrayList<RowMetaAndData>();\n                        newList.add(resultRow);\n\n                        // This previous result rows list can be either empty or not.\n                        // Depending on the checkbox \"clear result rows\"\n                        // In this case, it would execute the transformation with one extra row each time\n                        // Can't figure out a real use-case for it, but hey, who am I to decide that, right?\n                        // :-)\n                        //\n                        transMeta.getPreviousResult().getRows().addAll(newList);\n                    }\n                }\n                else\n                {\n                    if (argFromPrevious)\n                    {\n                        // Only put the first Row on the arguments\n                        args = null;\n                        if (resultRow!=null)\n                        {\n                            args = new String[resultRow.size()];\n                            for (int i=0;i<resultRow.size();i++)\n                            {\n                                args[i] = resultRow.getString(i, null);\n                            }\n                        }\n                    }\n                    else\n                    {\n                    \t// do nothing\n                    }\n                }\n\n                // Execute this transformation across a cluster of servers\n                //\n                if (clustering)\n                {\n                    TransExecutionConfiguration executionConfiguration = new TransExecutionConfiguration();\n                    executionConfiguration.setClusterPosting(true);\n                    executionConfiguration.setClusterPreparing(true);\n                    executionConfiguration.setClusterStarting(true);\n                    executionConfiguration.setClusterShowingTransformation(false);\n                    executionConfiguration.setSafeModeEnabled(false);\n                    executionConfiguration.setRepository(rep);\r\n                    \r\n                    // Also pass the variables from the transformation into the execution configuration\r\n                    // That way it can go over the HTTP connection to the slave server.\r\n                    //\r\n                    executionConfiguration.setVariables(transMeta);\r\n                    \r\n                    // Also set the arguments...\r\n                    //\r\n                    executionConfiguration.setArgumentStrings(args);\n                    \n                    TransSplitter transSplitter = Trans.executeClustered(transMeta, executionConfiguration );\n                    \n                    // Monitor the running transformations, wait until they are done.\n                    // Also kill them all if anything goes bad\n                    // Also clean up afterwards...\n                    //\n                    long errors = Trans.monitorClusteredTransformation(toString(), transSplitter, parentJob);\n                    \n                    Result clusterResult = Trans.getClusteredTransformationResult(toString(), transSplitter, parentJob); \n                    result.clear();\n                    result.add(clusterResult);\n                    \n                    result.setNrErrors(result.getNrErrors()+errors);\n\n                }\n                // Execute this transformation remotely\n                //\n                else if (remoteSlaveServer!=null)\n                {\n                \t// Remote execution...\n                \t//\n                \tTransExecutionConfiguration transExecutionConfiguration = new TransExecutionConfiguration();\n                \ttransExecutionConfiguration.setPreviousResult(transMeta.getPreviousResult().clone());\n                \ttransExecutionConfiguration.setArgumentStrings(args);\n                \ttransExecutionConfiguration.setVariables(this);\n                \ttransExecutionConfiguration.setRemoteServer(remoteSlaveServer);\n                \t\n                \t// Send the XML over to the slave server\n                \t// Also start the transformation over there...\n                \t//\n                \tTrans.sendXMLToSlaveServer(transMeta, transExecutionConfiguration);\n                \t\n                \t// Now start the monitoring...\n                \t//\n                \twhile (!parentJob.isStopped())\n                \t{\n                \t\ttry \n                \t\t{\n\t\t\t\t\t\t\tSlaveServerTransStatus transStatus = remoteSlaveServer.getTransStatus(transMeta.getName());\n\t\t\t\t\t\t\tif (!transStatus.isRunning())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// The transformation is finished, get the result...\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tResult remoteResult = transStatus.getResult(); \n\t\t\t                    result.clear();\n\t\t\t                    result.add(remoteResult);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n                \t\tcatch (Exception e1) {\n\t\t\t\t\t\t\tlog.logError(toString(), \"Unable to contact slave server [\"+remoteSlaveServer+\"] to verify the status of transformation [\"+transMeta.getName()+\"]\");\n\t\t\t\t\t\t\tresult.setNrErrors(result.getNrErrors()+1L);\n\t\t\t\t\t\t\tbreak; // Stop looking too, chances are too low the server will come back on-line\n\t\t\t\t\t\t}\n                \t\t\n                \t\ttry { Thread.sleep(10000); } catch(InterruptedException e) {} ; // sleep for 10 seconds\n                \t}\n                }\n                // Execute this transformation on the local machine\n                //\n                else // Local execution...\n                {\n                    // Create the transformation from meta-data\n                    Trans trans = new Trans(transMeta);\n\n                    if (parentJob.getJobMeta().isBatchIdPassed())\n                    {\n                        trans.setPassedBatchId(parentJob.getPassedBatchId());\n                    }\n                    \n                    // set the parent job on the transformation, variables are taken from here...\n                    trans.setParentJob(parentJob);\n                    trans.setParentVariableSpace(parentJob);\n\n                    // First get the root job\n                    //\n                    Job rootJob = parentJob;\n                    while (rootJob.getParentJob()!=null) rootJob=rootJob.getParentJob();\n                    \n                    // Get the start and end-date from the root job...\n                    //\n                    trans.setJobStartDate( rootJob.getStartDate() );\n                    trans.setJobEndDate( rootJob.getEndDate() );\n                    \n                    try {\n            \t\t\t// Start execution...\n                    \t//\n                    \ttrans.execute(args);\n\n                    \t// Wait until we're done with it...\n                    \t//\n        \t\t\t\twhile (!trans.isFinished() && !parentJob.isStopped() && trans.getErrors() == 0)\n        \t\t\t\t{\n        \t\t\t\t\ttry { Thread.sleep(100);}\n        \t\t\t\t\tcatch(InterruptedException e) { }\n        \t\t\t\t}\n\n        \t\t\t\tif (parentJob.isStopped() || trans.getErrors() != 0)\n        \t\t\t\t{\n        \t\t\t\t\ttrans.stopAll();\n        \t\t\t\t\ttrans.waitUntilFinished();\n        \t\t\t\t\ttrans.endProcessing(\"stop\");\n                            result.setNrErrors(1);\n        \t\t\t\t}\n        \t\t\t\telse\n        \t\t\t\t{\n        \t\t\t\t\ttrans.endProcessing(\"end\");\n        \t\t\t\t}\n        \t\t\t\tResult newResult = trans.getResult();\n\n                        result.clear(); // clear only the numbers, NOT the files or rows.\n                        result.add(newResult);\n\n                        // Set the result rows too...\n                        result.setRows(newResult.getRows());\n\n                        if (setLogfile)\n                        {\n                        \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, KettleVFS.getFileObject(getLogFilename()), parentJob.getName(), toString());\n                            result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n        \t\t\t\t}\n                    }\n                    catch (KettleException e) {\n                        log.logError(toString(), \"Unable to prepare for execution of the transformation\");\n        \t\t\t\tresult.setNrErrors(1);\n\t\t\t\t\t}\n                }\n    \t\t}\n    \t\tcatch(Exception e)\n    \t\t{\n    \t\t\tlog.logError(toString(), \"Unable to open transformation: \"+e.getMessage());\n                log.logError(toString(), Const.getStackTracker(e));\n    \t\t\tresult.setNrErrors(1);\n    \t\t}\n            iteration++;\n        }\n\n        if (setLogfile)\n        {\n            if (appender!=null)\n            {\n                log.removeAppender(appender);\n                appender.close();\n\n                ResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_LOG, appender.getFile(), parentJob.getJobname(), getName());\n                result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n            }\n            log.setLogLevel(backupLogLevel);\n        }\n\n\t\tif (result.getNrErrors()==0)\n\t\t{\n\t\t\tresult.setResult( true );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.setResult( false );\n\t\t}\n\n\t\t// Hint the VM to release handles.\n\t\tSystem.gc();\n\t\t\n\t\treturn result;\n\t}","commit_id":"57c5550308c23c766b3127fe99792b6a0948c2b7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Bandbox self = (Bandbox) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\twh.write(\"<span id=\\\"\").write(uuid).write(\"\\\"\").write(\r\n\t\t\t\tself.getOuterAttrs());\r\n\t\twh.write(\" z.type=\\\"zul.cb.Bdbox\\\" z.combo=\\\"true\\\"><input id=\\\"\");\r\n\t\twh.write(uuid).write(\"!real\\\"\").write(self.getInnerAttrs());\r\n\t\twh.write(\" /><span id=\\\"\").write(uuid).write(\r\n\t\t\t\t\"!btn\\\" class=\\\"rbtnbk\\\"><img src=\\\"\");\r\n\t\twh.write(exec.encodeURL(self.getImage())).write(\"\\\"\");\r\n\t\tif (self.isButtonVisible())\r\n\t\t\twh.write(\"\");\r\n\t\telse wh.write(\" style=\\\"display:none\\\"\");\r\n\t\twh.write(\"/><\/span><div id=\\\"\").write(uuid);\r\n\t\twh.write(\"!pp\\\" class=\\\"bandboxpp\\\" style=\\\"display:none\\\" tabindex=\\\"-1\\\">\");\r\n\t\tZkFns.redraw(self.getDropdown(), out);\r\n\t\twh.write(\"<\/div><\/span>\");\r\n\t\twh.writeln();\r\n\t}","id":64248,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Bandbox self = (Bandbox) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\twh.write(\"<span id=\\\"\").write(uuid).write(\"\\\"\").write(\r\n\t\t\t\tself.getOuterAttrs());\r\n\t\twh.write(\" z.type=\\\"zul.cb.Bdbox\\\" z.combo=\\\"true\\\"><input id=\\\"\");\r\n\t\twh.write(uuid).write(\"!real\\\"\").write(self.getInnerAttrs());\r\n\t\twh.write(\" /><span id=\\\"\").write(uuid).write(\r\n\t\t\t\t\"!btn\\\" class=\\\"rbtnbk\\\"><img src=\\\"\");\r\n\t\twh.write(exec.encodeURL(self.getImage())).write(\"\\\"\");\r\n\t\tif (self.isButtonVisible())\r\n\t\t\twh.write(\"\");\r\n\t\telse wh.write(\" style=\\\"display:none\\\"\");\r\n\t\twh.write(\"/><\/span><div id=\\\"\").write(uuid);\r\n\t\twh.write(\"!pp\\\" class=\\\"bandboxpp\\\" style=\\\"display:none\\\" tabindex=\\\"-1\\\">\");\r\n\t\tif (self.getDropdown() != null) {\r\n\t\t\tself.getDropdown().redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/div><\/span>\");\r\n\t\twh.writeln();\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Bandpopup self = (Bandpopup) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.write(\"<\/div>\");\r\n\t\twh.writeln();\r\n\t}","id":64249,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Bandpopup self = (Bandpopup) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/div>\");\r\n\t\twh.writeln();\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Caption self = (Caption) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String imgTag = self.getImgTag();\n\n\t\tif (self.isLegend()) {\n\t\t\twh.write(\"<legend>\").write(imgTag);\n\t\t\tRenderFns.getOut(out).setValue(self.getLabel()).render();\n\t\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\t\tfinal Component child = (Component) it.next();\n\t\t\t\tZkFns.redraw(child, out);\n\t\t\t}\n\t\t\twh.write(\"<\/legend>\");\n\t\t\twh.writeln();\n\t\t} else {\n\t\t\twh.write(\"<table id=\\\"\").write(uuid).write(\"\\\" \");\n\t\t\twh.write(\"z.type=\\\"zul.widget.Capt\\\"\").write(self.getOuterAttrs())\n\t\t\t\t\t.write(self.getInnerAttrs());\n\t\t\twh.write(\" width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.write(\"<tr valign=\\\"middle\\\">\");\n\t\t\twh.write(\"<td align=\\\"left\\\" class=\\\"caption\\\">\").write(imgTag);\n\t\t\tRenderFns.getOut(out).setValue(self.getCompoundLabel()).setNbsp(\n\t\t\t\t\ttrue).render();\n\t\t\twh.write(\"<\/td>\");\n\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"caption\\\" id=\\\"\").write(uuid)\n\t\t\t\t\t.write(\"!cave\\\">\");\n\n\t\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\t\tfinal Component child = (Component) it.next();\n\t\t\t\tZkFns.redraw(child, out);\n\t\t\t}\n\n\t\t\twh.write(\"<\/td>\");\n\t\t\tif (self.isClosableVisible()) {\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><img id=\\\"\").write(\n\t\t\t\t\t\tself.getParent().getUuid()).write(\"!close\\\" src=\\\"\");\n\t\t\t\twh.write(exec.encodeURL(\"~./zul/img/close-off.gif\")).write(\n\t\t\t\t\t\t\"\\\"/><\/td>\");\n\n\t\t\t}\n\n\t\t\twh.writeln(\"<\/tr><\/table>\");\n\t\t\twh.writeln();\n\t\t}\n\t}","id":64250,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Caption self = (Caption) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String imgTag = self.getImgTag();\n\n\t\tif (self.isLegend()) {\n\t\t\twh.write(\"<legend>\").write(imgTag);\n\t\t\tRenderFns.getOut(out).setValue(self.getLabel()).render();\n\t\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\t\t((Component) it.next()).redraw(out);\n\t\t\t}\n\t\t\twh.write(\"<\/legend>\");\n\t\t\twh.writeln();\n\t\t} else {\n\t\t\twh.write(\"<table id=\\\"\").write(uuid).write(\"\\\" \");\n\t\t\twh.write(\"z.type=\\\"zul.widget.Capt\\\"\").write(self.getOuterAttrs())\n\t\t\t\t\t.write(self.getInnerAttrs());\n\t\t\twh.write(\" width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.write(\"<tr valign=\\\"middle\\\">\");\n\t\t\twh.write(\"<td align=\\\"left\\\" class=\\\"caption\\\">\").write(imgTag);\n\t\t\tRenderFns.getOut(out).setValue(self.getCompoundLabel()).setNbsp(\n\t\t\t\t\ttrue).render();\n\t\t\twh.write(\"<\/td>\");\n\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"caption\\\" id=\\\"\").write(uuid)\n\t\t\t\t\t.write(\"!cave\\\">\");\n\n\t\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\t\t((Component) it.next()).redraw(out);\n\t\t\t}\n\n\t\t\twh.write(\"<\/td>\");\n\t\t\tif (self.isClosableVisible()) {\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><img id=\\\"\").write(\n\t\t\t\t\t\tself.getParent().getUuid()).write(\"!close\\\" src=\\\"\");\n\t\t\t\twh.write(exec.encodeURL(\"~./zul/img/close-off.gif\")).write(\n\t\t\t\t\t\t\"\\\"/><\/td>\");\n\n\t\t\t}\n\n\t\t\twh.writeln(\"<\/tr><\/table>\");\n\t\t\twh.writeln();\n\t\t}\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Columns self = (Columns) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\").write(\" z.type=\\\"Cols\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\"align=\\\"left\\\">\");\r\n\t\t\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","id":64251,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Columns self = (Columns) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\").write(\" z.type=\\\"Cols\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\"align=\\\"left\\\">\");\r\n\t\t\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Combobox self = (Combobox) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\twh.write(\"<span id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs());\r\n\t\twh.write(\" z.type=\\\"zul.cb.Cmbox\\\" z.combo=\\\"true\\\"><input id=\\\"\");\r\n\t\twh.write(uuid).write(\"!real\\\" autocomplete=\\\"off\\\"\");\r\n\t\twh.write(self.getInnerAttrs()).write(\"/><span id=\\\"\");\r\n\t\twh.write(uuid).write(\"!btn\\\" class=\\\"rbtnbk\\\"><img src=\\\"\");\r\n\t\twh.write(exec.encodeURL(self.getImage())).write(\"\\\"\");\r\n\t\tif (self.isButtonVisible())\r\n\t\t\twh.write(\"\");\r\n\t\telse wh.write(\" style=\\\"display:none\\\"\");\r\n\t\twh.write(\"/><\/span><div id=\\\"\").write(uuid);\r\n\t\twh.write(\"!pp\\\" class=\\\"comboboxpp\\\" style=\\\"display:none\\\" tabindex=\\\"-1\\\">\");\r\n\t\twh.write(\"<table id=\\\"\").write(uuid).write(\r\n\t\t\t\t\"!cave\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.write(\"<\/table><\/div><\/span>\");\r\n\t\twh.writeln();\r\n\t}","id":64252,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Combobox self = (Combobox) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\tfinal Execution exec = Executions.getCurrent();\r\n\t\twh.write(\"<span id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs());\r\n\t\twh.write(\" z.type=\\\"zul.cb.Cmbox\\\" z.combo=\\\"true\\\"><input id=\\\"\");\r\n\t\twh.write(uuid).write(\"!real\\\" autocomplete=\\\"off\\\"\");\r\n\t\twh.write(self.getInnerAttrs()).write(\"/><span id=\\\"\");\r\n\t\twh.write(uuid).write(\"!btn\\\" class=\\\"rbtnbk\\\"><img src=\\\"\");\r\n\t\twh.write(exec.encodeURL(self.getImage())).write(\"\\\"\");\r\n\t\tif (self.isButtonVisible())\r\n\t\t\twh.write(\"\");\r\n\t\telse wh.write(\" style=\\\"display:none\\\"\");\r\n\t\twh.write(\"/><\/span><div id=\\\"\").write(uuid);\r\n\t\twh.write(\"!pp\\\" class=\\\"comboboxpp\\\" style=\\\"display:none\\\" tabindex=\\\"-1\\\">\");\r\n\t\twh.write(\"<table id=\\\"\").write(uuid).write(\r\n\t\t\t\t\"!cave\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/table><\/div><\/span>\");\r\n\t\twh.writeln();\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Div self = (Div) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.write(\"<\/div>\");\r\n\t\twh.writeln();\r\n\t}","id":64253,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Div self = (Div) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/div>\");\r\n\t\twh.writeln();\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Foot self = (Foot) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","id":64254,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Foot self = (Foot) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Footer self = (Footer) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<td id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\twh.write(self.getImgTag());\r\n\t\tRenderFns.getOut(out).setValue(self.getLabel()).render();\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/td>\");\r\n\t}","id":64255,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Footer self = (Footer) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<td id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\twh.write(self.getImgTag());\r\n\t\tRenderFns.getOut(out).setValue(self.getLabel()).render();\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\r\n\t\t\t((Component) it.next()).redraw(out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/td>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Grid self = (Grid) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"zul.grid.Grid\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tif(self.getColumns() != null){\r\n\t\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!head\\\" class=\\\"grid-head\\\">\");\r\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"table-layout:fixed\\\">\");\r\n\t\t\tZkFns.redraw(self.getColumns(), out);\r\n\t\t\twh.write(\"<\/table><\/div>\");\r\n\t\t}\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!body\\\" class=\\\"grid-body\\\">\");\r\n\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"grid-btable\\\">\");\r\n\t\tZkFns.redraw(self.getRows(), out);\r\n\t\twh.write(\"<\/table><\/div>\");\r\n\t\tif(self.getFoot() != null){\r\n\t\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!foot\\\" class=\\\"grid-foot\\\">\");\r\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"  style=\\\"table-layout:fixed\\\">\");\r\n\t\t\tZkFns.redraw(self.getFoot(), out);\r\n\t\t\twh.write(\"<\/table><\/div>\");\r\n\t\t}\r\n\t\twh.writeln(\"<\/div>\");\r\n\t}","id":64256,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Grid self = (Grid) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"zul.grid.Grid\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tif(self.getColumns() != null){\r\n\t\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!head\\\" class=\\\"grid-head\\\">\");\r\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"table-layout:fixed\\\">\");\r\n\t\t\tself.getColumns().redraw(out);\r\n\t\t\twh.write(\"<\/table><\/div>\");\r\n\t\t}\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!body\\\" class=\\\"grid-body\\\">\");\r\n\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"grid-btable\\\">\");\r\n\t\tif (self.getRows() != null) {\r\n\t\t\tself.getRows().redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/table><\/div>\");\r\n\t\tif(self.getFoot() != null){\r\n\t\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!foot\\\" class=\\\"grid-foot\\\">\");\r\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"  style=\\\"table-layout:fixed\\\">\");\r\n\t\t\tself.getFoot().redraw(out);\r\n\t\t\twh.write(\"<\/table><\/div>\");\r\n\t\t}\r\n\t\twh.writeln(\"<\/div>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Grid self = (Grid) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"zul.grid.Grid\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!paging\\\" class=\\\"grid-paging\\\">\");\r\n\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"grid-btable\\\">\");\r\n\t\twh.write(\"<tbody>\");\r\n\t\tZkFns.redraw(self.getColumns(), out);\r\n\t\twh.write(\"<\/tbody>\");\r\n\t\tZkFns.redraw(self.getRows(), out);\r\n\t\twh.write(\"<tbody class=\\\"grid-foot\\\">\");\r\n\t\tZkFns.redraw(self.getFoot(), out);\r\n\t\twh.write(\"<\/tbody><\/table>\");\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!pgi\\\" class=\\\"grid-pgi\\\">\");\r\n\t\tZkFns.redraw(self.getPaging(), out);\r\n\t\twh.writeln(\"<\/div><\/div><\/div>\");\r\n\t}","id":64257,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Grid self = (Grid) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"zul.grid.Grid\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!paging\\\" class=\\\"grid-paging\\\">\");\r\n\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"grid-btable\\\">\");\r\n\t\twh.write(\"<tbody>\");\r\n\t\tif (self.getColumns() != null) {\r\n\t\t\tself.getColumns().redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/tbody>\");\r\n\t\tif (self.getRows() != null) {\r\n\t\t\tself.getRows().redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<tbody class=\\\"grid-foot\\\">\");\r\n\t\tif (self.getFoot() != null) {\r\n\t\t\tself.getFoot().redraw(out);\r\n\t\t}\r\n\t\twh.write(\"<\/tbody><\/table>\");\r\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!pgi\\\" class=\\\"grid-pgi\\\">\");\r\n\t\tif (self.getPaging() != null) {\r\n\t\t\tself.getPaging().redraw(out);\r\n\t\t}\r\n\t\twh.writeln(\"<\/div><\/div><\/div>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\tfinal Caption caption = self.getCaption();\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal Execution exec = Executions.getCurrent();\n\n\t\twh.write(\"<table id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"\\\" z.type=\\\"zul.widget.Grbox\\\"\");\n\t\twh.write(self.getOuterAttrs());\n\t\twh.write(self.getInnerAttrs());\n\t\twh.write(\"><tr valign=\\\"top\\\"><td>\");\n\n\t\tif (caption != null) {\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.write(\"<tr><td class=\\\"groupbox-3d-tl\\\"><\/td>\");\n\t\t\twh.write(\"<td colspan=\\\"3\\\" class=\\\"groupbox-3d-tm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-tr\\\"><\/td><\/tr>\");\n\n\t\t\twh.write(\"<tr height=\\\"22\\\"><td class=\\\"groupbox-3d-ml\\\"><\/td>\");\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"groupbox-3d-mm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-mm\\\">\");\n\t\t\tZkFns.redraw(caption, out);\n\t\t\twh.write(\"<\/td>\");\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"groupbox-3d-mm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-mr\\\"><\/td><\/tr>\");\n\t\t\twh.write(\"<tr><td colspan=\\\"5\\\" class=\\\"groupbox-3d-b\\\"><\/td><\/tr>\");\n\t\t\twh.write(\"<\/table>\");\n\t\t}\n\n\t\tString gcExtStyle = StringFns.cat(caption == null ? \"\"\n\t\t\t\t: \"border-top:0;\", self.getContentStyle());\n\t\twh.write(\"<div id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"!slide\\\"\");\n\t\tif (!self.isOpen()) {\n\t\t\twh.write(\" style=\\\"display:none\\\" \");\n\t\t}\n\n\t\twh.write(\">\");\n\n\t\twh.write(\"<div id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"!cave\\\" \");\n\t\twh.write(\"class=\\\"\");\n\t\twh.write(self.getContentSclass());\n\t\twh.write(\"\\\"\");\n\t\twh.write(XMLFns.attr(\"style\", gcExtStyle)).write(\">\");\n\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif (caption != child)\n\t\t\t\tZkFns.redraw(child, out);\n\t\t}\n\n\t\twh.write(\"<\/div><\/div>\");\n\n\t\t// shadow\n\t\twh.write(\"<table id=\\\"\");\n\t\twh.write(self.getUuid());\n\t\twh.write(\"!sdw\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\");\n\t\twh.write(\"<tr><td class=\\\"groupbox-3d-shdl\\\"><\/td>\");\n\t\twh.write(\"<td class=\\\"groupbox-3d-shdm\\\">\");\n\t\twh.write(\"<img width=\\\"1\\\" height=\\\"1\\\" src=\\\"\");\n\t\twh.write(exec.encodeURL(\"~./img/spacer.gif\"));\n\t\twh.write(\"\\\"/><\/td> \");\n\t\twh.write(\"<td class=\\\"groupbox-3d-shdr\\\"><\/td>\");\n\t\twh.write(\"<\/tr><\/table>\");\n\n\t\twh.write(\"<\/td><\/tr><\/table>\");\n\t\twh.writeln();\n\t}","id":64258,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\tfinal Caption caption = self.getCaption();\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal Execution exec = Executions.getCurrent();\n\n\t\twh.write(\"<table id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"\\\" z.type=\\\"zul.widget.Grbox\\\"\");\n\t\twh.write(self.getOuterAttrs());\n\t\twh.write(self.getInnerAttrs());\n\t\twh.write(\"><tr valign=\\\"top\\\"><td>\");\n\n\t\tif (caption != null) {\n\t\t\twh.write(\"<table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.write(\"<tr><td class=\\\"groupbox-3d-tl\\\"><\/td>\");\n\t\t\twh.write(\"<td colspan=\\\"3\\\" class=\\\"groupbox-3d-tm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-tr\\\"><\/td><\/tr>\");\n\n\t\t\twh.write(\"<tr height=\\\"22\\\"><td class=\\\"groupbox-3d-ml\\\"><\/td>\");\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"groupbox-3d-mm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-mm\\\">\");\n\t\t\tif (caption != null) {\n\t\t\t\tcaption.redraw(out);\n\t\t\t}\n\t\t\twh.write(\"<\/td>\");\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"groupbox-3d-mm\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"groupbox-3d-mr\\\"><\/td><\/tr>\");\n\t\t\twh.write(\"<tr><td colspan=\\\"5\\\" class=\\\"groupbox-3d-b\\\"><\/td><\/tr>\");\n\t\t\twh.write(\"<\/table>\");\n\t\t}\n\n\t\tString gcExtStyle = StringFns.cat(caption == null ? \"\"\n\t\t\t\t: \"border-top:0;\", self.getContentStyle());\n\t\twh.write(\"<div id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"!slide\\\"\");\n\t\tif (!self.isOpen()) {\n\t\t\twh.write(\" style=\\\"display:none\\\" \");\n\t\t}\n\n\t\twh.write(\">\");\n\n\t\twh.write(\"<div id=\\\"\");\n\t\twh.write(uuid);\n\t\twh.write(\"!cave\\\" \");\n\t\twh.write(\"class=\\\"\");\n\t\twh.write(self.getContentSclass());\n\t\twh.write(\"\\\"\");\n\t\twh.write(XMLFns.attr(\"style\", gcExtStyle)).write(\">\");\n\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif (caption != child)\n\t\t\t\tchild.redraw(out);\n\t\t}\n\n\t\twh.write(\"<\/div><\/div>\");\n\n\t\t// shadow\n\t\twh.write(\"<table id=\\\"\");\n\t\twh.write(self.getUuid());\n\t\twh.write(\"!sdw\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\");\n\t\twh.write(\"<tr><td class=\\\"groupbox-3d-shdl\\\"><\/td>\");\n\t\twh.write(\"<td class=\\\"groupbox-3d-shdm\\\">\");\n\t\twh.write(\"<img width=\\\"1\\\" height=\\\"1\\\" src=\\\"\");\n\t\twh.write(exec.encodeURL(\"~./img/spacer.gif\"));\n\t\twh.write(\"\\\"/><\/td> \");\n\t\twh.write(\"<td class=\\\"groupbox-3d-shdr\\\"><\/td>\");\n\t\twh.write(\"<\/tr><\/table>\");\n\n\t\twh.write(\"<\/td><\/tr><\/table>\");\n\t\twh.writeln();\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\twh.write(\"<fieldset id=\\\"\").write(self.getUuid()).write(\"\\\"\");\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\n\t\tZkFns.redraw(self.getCaption(), out);\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif(self.getCaption() != child)\n\t\t\tZkFns.redraw(child, out);\n\t\t}\n\t\twh.write(\"<\/fieldset>\");\n\t\twh.writeln();\n\t}","id":64259,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal WriterHelper wh = new WriterHelper(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\twh.write(\"<fieldset id=\\\"\").write(self.getUuid()).write(\"\\\"\");\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\n\t\tif(self.getCaption() != null){ \n\t\t\tself.getCaption().redraw(out);\n\t\t}\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif(self.getCaption() != child){\n\t\t\t\tchild.redraw(out);\n\t\t\t}\n\t\t}\n\t\twh.write(\"<\/fieldset>\");\n\t\twh.writeln();\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Row self = (Row) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tint i = 0;\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();i++) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\twh.write(\"<td id=\\\"\").write(child.getUuid()).write(\"!chdextr\\\"\");\r\n\t\t\twh.write(ZulFns.getColAttrs(self, i)).write(\">\");\r\n\t\t\tZkFns.redraw(child, out);\r\n\t\t\twh.write(\"<\/td>\");\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","id":64260,"modified_method":"public void render(Component comp, Writer out) throws IOException {\r\n\t\tfinal WriterHelper wh = new WriterHelper(out);\r\n\t\tfinal Row self = (Row) comp;\r\n\t\tfinal String uuid = self.getUuid();\r\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\"\");\r\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(\">\");\r\n\t\tint i = 0;\r\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();i++) {\r\n\t\t\tfinal Component child = (Component) it.next();\r\n\t\t\twh.write(\"<td id=\\\"\").write(child.getUuid()).write(\"!chdextr\\\"\");\r\n\t\t\twh.write(ZulFns.getColAttrs(self, i)).write(\">\");\r\n\t\t\tchild.redraw(out);\r\n\t\t\twh.write(\"<\/td>\");\r\n\t\t}\r\n\t\twh.writeln(\"<\/tr>\");\r\n\t}","commit_id":"07d7dab29084594eac18eece1e492aa7e1622783","url":"https://github.com/zkoss/zk"},{"original_method":"/**\n     * Handles new events.\n     *\n     * @param obj the event object\n     * @param provider the provider\n     * @param id the id of the source of the event\n     */\n    private void handle(EventObject obj,\n                        ProtocolProviderService provider,\n                        String id)\n    {\n        // check if provider - contact exist update message content\n        for(MessageSourceContact msc : getRecentMessages())\n        {\n            if(msc.getProtocolProviderService().equals(provider)\n                && msc.getContactAddress().equals(id))\n            {\n                // update\n                msc.update(obj);\n\n                if(recentQuery != null)\n                    recentQuery.fireContactChanged(msc);\n\n                return;\n            }\n        }\n\n        // if missing create source contact\n        // and update recent messages, trim and sort\n        MessageSourceContact newSourceContact =\n            new MessageSourceContact(obj, MessageSourceService.this);\n        recentMessages.add(newSourceContact);\n\n        Collections.sort(recentMessages);\n\n        // trim\n        List<MessageSourceContact> removedItems = null;\n        if(recentMessages.size() > numberOfMessages)\n        {\n            removedItems = recentMessages.subList(\n                numberOfMessages, recentMessages.size());\n\n            recentMessages = recentMessages.subList(0, numberOfMessages);\n        }\n\n        // save\n        saveRecentMessagesToHistory();\n\n        // no query nothing to fire\n        if(recentQuery == null)\n            return;\n\n        // now fire\n        if(removedItems != null)\n        {\n            for(MessageSourceContact msc : removedItems)\n            {\n                recentQuery.fireContactRemoved(msc);\n            }\n        }\n\n        recentQuery.fireContactReceived(newSourceContact);\n    }","id":64261,"modified_method":"/**\n     * Handles new events.\n     *\n     * @param obj the event object\n     * @param provider the provider\n     * @param id the id of the source of the event\n     */\n    private void handle(EventObject obj,\n                        ProtocolProviderService provider,\n                        String id)\n    {\n        // check if provider - contact exist update message content\n        List<MessageSourceContact> messages = getRecentMessages();\n        synchronized(messages)\n        {\n            for(MessageSourceContact msc : messages)\n            {\n                if(msc.getProtocolProviderService().equals(provider)\n                    && msc.getContactAddress().equals(id))\n                {\n                    // update\n                    msc.update(obj);\n\n                    if(recentQuery != null)\n                        recentQuery.fireContactChanged(msc);\n\n                    return;\n                }\n            }\n\n            // if missing create source contact\n            // and update recent messages, trim and sort\n            MessageSourceContact newSourceContact =\n                new MessageSourceContact(obj, MessageSourceService.this);\n            messages.add(newSourceContact);\n\n            Collections.sort(messages);\n\n            // trim\n            List<MessageSourceContact> removedItems = null;\n            if(messages.size() > numberOfMessages)\n            {\n                removedItems = messages.subList(\n                    numberOfMessages, messages.size());\n\n                messages.removeAll(removedItems);\n            }\n\n            // save\n            saveRecentMessagesToHistory();\n\n            // no query nothing to fire\n            if(recentQuery == null)\n                return;\n\n            // now fire\n            if(removedItems != null)\n            {\n                for(MessageSourceContact msc : removedItems)\n                {\n                    recentQuery.fireContactRemoved(msc);\n                }\n            }\n\n            recentQuery.fireContactReceived(newSourceContact);\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"@Override\n    public void providerStatusChanged(ProviderPresenceStatusChangeEvent evt)\n    {\n        if(!evt.getNewStatus().isOnline())\n            return;\n\n        // now check for chat rooms as we are connected\n        MessageHistoryServiceImpl msgHistoryService =\n            MessageHistoryActivator.getMessageHistoryService();\n        Collection<EventObject> res = msgHistoryService\n            .findRecentMessagesPerContact(\n                numberOfMessages,\n                evt.getProvider().getAccountID().getAccountUniqueID(),\n                null);\n\n        List<String> recentMessagesForProvider = new LinkedList<String>();\n        for(MessageSourceContact msc : getRecentMessages())\n        {\n            if(msc.getProtocolProviderService().equals(evt.getProvider()))\n                recentMessagesForProvider.add(msc.getContactAddress());\n        }\n\n        List<MessageSourceContact> newContactSources\n            = new LinkedList<MessageSourceContact>();\n        for(EventObject obj : res)\n        {\n            if(obj instanceof ChatRoomMessageDeliveredEvent\n                || obj instanceof ChatRoomMessageReceivedEvent)\n            {\n                MessageSourceContact msc\n                    = new MessageSourceContact(obj, MessageSourceService.this);\n\n                if(recentMessagesForProvider.contains(msc.getContactAddress()))\n                    continue;\n\n                recentMessages.add(msc);\n                newContactSources.add(msc);\n\n            }\n        }\n\n        // sort\n        Collections.sort(recentMessages);\n\n        // and now fire events to update ui\n        if(recentQuery != null)\n        {\n            for(MessageSourceContact msc : newContactSources)\n            {\n                recentQuery.addQueryResult(msc);\n            }\n        }\n    }","id":64262,"modified_method":"@Override\n    public void providerStatusChanged(ProviderPresenceStatusChangeEvent evt)\n    {\n        if(!evt.getNewStatus().isOnline())\n            return;\n\n        // now check for chat rooms as we are connected\n        MessageHistoryServiceImpl msgHistoryService =\n            MessageHistoryActivator.getMessageHistoryService();\n        Collection<EventObject> res = msgHistoryService\n            .findRecentMessagesPerContact(\n                numberOfMessages,\n                evt.getProvider().getAccountID().getAccountUniqueID(),\n                null);\n\n        List<String> recentMessagesForProvider = new LinkedList<String>();\n        List<MessageSourceContact> messages = getRecentMessages();\n        synchronized(messages)\n        {\n            for(MessageSourceContact msc : messages)\n            {\n                if(msc.getProtocolProviderService().equals(evt.getProvider()))\n                    recentMessagesForProvider.add(msc.getContactAddress());\n            }\n\n            List<MessageSourceContact> newContactSources\n                = new LinkedList<MessageSourceContact>();\n            for(EventObject obj : res)\n            {\n                if(obj instanceof ChatRoomMessageDeliveredEvent\n                    || obj instanceof ChatRoomMessageReceivedEvent)\n                {\n                    MessageSourceContact msc\n                        = new MessageSourceContact(obj,\n                                                   MessageSourceService.this);\n\n                    if(recentMessagesForProvider\n                            .contains(msc.getContactAddress()))\n                        continue;\n\n                    messages.add(msc);\n                    newContactSources.add(msc);\n\n                }\n            }\n\n            // sort\n            Collections.sort(messages);\n\n            // and now fire events to update ui\n            if(recentQuery != null)\n            {\n                for(MessageSourceContact msc : newContactSources)\n                {\n                    recentQuery.addQueryResult(msc);\n                }\n            }\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"@Override\n    public void localUserPresenceChanged(\n        LocalUserChatRoomPresenceChangeEvent evt)\n    {\n        if(recentQuery == null)\n            return;\n\n        MessageSourceContact srcContact = null;\n        for(MessageSourceContact msg : getRecentMessages())\n        {\n            if(msg.getRoom() != null\n                && msg.getRoom().equals(evt.getChatRoom()))\n            {\n                srcContact = msg;\n                break;\n            }\n        }\n\n        if(srcContact == null)\n            return;\n\n        String eventType = evt.getEventType();\n\n        if (LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_JOINED.equals(eventType))\n        {\n            srcContact.setStatus(ChatRoomPresenceStatus.CHAT_ROOM_ONLINE);\n            recentQuery.fireContactChanged(srcContact);\n        }\n        else if ((LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_LEFT.equals(eventType)\n            || LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_KICKED.equals(eventType)\n            || LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_DROPPED.equals(eventType))\n            )\n        {\n            srcContact.setStatus(ChatRoomPresenceStatus.CHAT_ROOM_OFFLINE);\n            recentQuery.fireContactChanged(srcContact);\n        }\n    }","id":64263,"modified_method":"@Override\n    public void localUserPresenceChanged(\n        LocalUserChatRoomPresenceChangeEvent evt)\n    {\n        if(recentQuery == null)\n            return;\n\n        MessageSourceContact srcContact = null;\n\n        List<MessageSourceContact> messages = getRecentMessages();\n\n        synchronized(messages)\n        {\n            for(MessageSourceContact msg : messages)\n            {\n                if(msg.getRoom() != null\n                    && msg.getRoom().equals(evt.getChatRoom()))\n                {\n                    srcContact = msg;\n                    break;\n                }\n            }\n        }\n\n        if(srcContact == null)\n            return;\n\n        String eventType = evt.getEventType();\n\n        if (LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_JOINED.equals(eventType))\n        {\n            srcContact.setStatus(ChatRoomPresenceStatus.CHAT_ROOM_ONLINE);\n            recentQuery.fireContactChanged(srcContact);\n        }\n        else if ((LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_LEFT.equals(eventType)\n            || LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_KICKED.equals(eventType)\n            || LocalUserChatRoomPresenceChangeEvent\n            .LOCAL_USER_DROPPED.equals(eventType))\n            )\n        {\n            srcContact.setStatus(ChatRoomPresenceStatus.CHAT_ROOM_OFFLINE);\n            recentQuery.fireContactChanged(srcContact);\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"@Override\n        public void run()\n        {\n            for(MessageSourceContact rm : getRecentMessages())\n            {\n                addQueryResult(rm);\n            }\n        }","id":64264,"modified_method":"@Override\n        public void run()\n        {\n            List<MessageSourceContact> messages = getRecentMessages();\n            synchronized(messages)\n            {\n                for(MessageSourceContact rm : messages)\n                {\n                    addQueryResult(rm);\n                }\n            }\n        }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Updates contact source contacts with status.\n     * @param evt the ContactPresenceStatusChangeEvent describing the status\n     */\n    @Override\n    public void contactPresenceStatusChanged(ContactPresenceStatusChangeEvent evt)\n    {\n        if(recentQuery == null)\n            return;\n\n        for(MessageSourceContact msgSC : getRecentMessages())\n        {\n            if(msgSC.getContact() != null\n                && msgSC.getContact().equals(evt.getSourceContact()))\n            {\n                msgSC.setStatus(evt.getNewStatus());\n                recentQuery.fireContactChanged(msgSC);\n            }\n        }\n    }","id":64265,"modified_method":"/**\n     * Updates contact source contacts with status.\n     * @param evt the ContactPresenceStatusChangeEvent describing the status\n     */\n    @Override\n    public void contactPresenceStatusChanged(ContactPresenceStatusChangeEvent evt)\n    {\n        if(recentQuery == null)\n            return;\n\n        List<MessageSourceContact> messages = getRecentMessages();\n\n        synchronized(messages)\n        {\n            for(MessageSourceContact msgSC : messages)\n            {\n                if(msgSC.getContact() != null\n                    && msgSC.getContact().equals(evt.getSourceContact()))\n                {\n                    msgSC.setStatus(evt.getNewStatus());\n                    recentQuery.fireContactChanged(msgSC);\n                }\n            }\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Saves cached list of recent messages in history.\n     */\n    private void saveRecentMessagesToHistory()\n    {\n        HistoryService historyService = MessageHistoryActivator\n            .getMessageHistoryService().getHistoryService();\n\n        if (historyService.isHistoryExisting(historyID))\n        {\n            // delete it\n            try\n            {\n                historyService.purgeLocallyStoredHistory(historyID);\n            }\n            catch(IOException ex)\n            {\n                logger.error(\"Cannot delete recent_messages history\", ex);\n                return;\n            }\n        }\n\n        // and create it\n        try\n        {\n            History history = historyService.createHistory(\n                historyID, recordStructure);\n\n            HistoryWriter writer = history.getWriter();\n            SimpleDateFormat sdf\n                = new SimpleDateFormat(HistoryService.DATE_FORMAT);\n\n            for(MessageSourceContact msc : getRecentMessages())\n            {\n                writer.addRecord(\n                    new String[]\n                        {\n                            msc.getProtocolProviderService()\n                                .getAccountID().getAccountUniqueID(),\n                            msc.getContactAddress()\n                        });\n            }\n        }\n        catch(IOException ex)\n        {\n            logger.error(\"cannot create recent_messages history\", ex);\n            return;\n        }\n    }","id":64266,"modified_method":"/**\n     * Saves cached list of recent messages in history.\n     */\n    private void saveRecentMessagesToHistory()\n    {\n        HistoryService historyService = MessageHistoryActivator\n            .getMessageHistoryService().getHistoryService();\n\n        if (historyService.isHistoryExisting(historyID))\n        {\n            // delete it\n            try\n            {\n                historyService.purgeLocallyStoredHistory(historyID);\n            }\n            catch(IOException ex)\n            {\n                logger.error(\"Cannot delete recent_messages history\", ex);\n                return;\n            }\n        }\n\n        // and create it\n        try\n        {\n            History history = historyService.createHistory(\n                historyID, recordStructure);\n\n            HistoryWriter writer = history.getWriter();\n            SimpleDateFormat sdf\n                = new SimpleDateFormat(HistoryService.DATE_FORMAT);\n\n            List<MessageSourceContact> messages = getRecentMessages();\n\n            synchronized(messages)\n            {\n                for(MessageSourceContact msc : messages)\n                {\n                    writer.addRecord(\n                        new String[]\n                            {\n                                msc.getProtocolProviderService()\n                                    .getAccountID().getAccountUniqueID(),\n                                msc.getContactAddress()\n                            });\n                }\n            }\n        }\n        catch(IOException ex)\n        {\n            logger.error(\"cannot create recent_messages history\", ex);\n            return;\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Returns the index of the source contact, in the list of recent messages.\n     * @param messageSourceContact\n     * @return\n     */\n    int getIndex(MessageSourceContact messageSourceContact)\n    {\n        return getRecentMessages().indexOf(messageSourceContact);\n    }","id":64267,"modified_method":"/**\n     * Returns the index of the source contact, in the list of recent messages.\n     * @param messageSourceContact\n     * @return\n     */\n    int getIndex(MessageSourceContact messageSourceContact)\n    {\n        List<MessageSourceContact> messages = getRecentMessages();\n\n        synchronized(messages)\n        {\n            return messages.indexOf(messageSourceContact);\n        }\n    }","commit_id":"108ce4725c69983eac47e5cfef8569fd5894a6c2","url":"https://github.com/jitsi/jitsi"},{"original_method":"protected void formatServiceXML(String fileName, String content)\n\t\tthrows DocumentException {\n\n\t\tDocument document = saxReaderUtil.read(content);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tList<Element> entityElements = rootElement.elements(\"entity\");\n\n\t\tString previousEntityName = StringPool.BLANK;\n\n\t\tfor (Element entityElement : entityElements) {\n\t\t\tString entityName = entityElement.attributeValue(\"name\");\n\n\t\t\tif (Validator.isNotNull(previousEntityName) &&\n\t\t\t\t(previousEntityName.compareToIgnoreCase(entityName) > 0)) {\n\n\t\t\t\tprocessErrorMessage(\n\t\t\t\t\tfileName, \"sort: \" + fileName + \" \" + entityName);\n\t\t\t}\n\n\t\t\tString previousReferenceEntity = StringPool.BLANK;\n\t\t\tString previousReferencePackagePath = StringPool.BLANK;\n\n\t\t\tList<Element> referenceElements = entityElement.elements(\n\t\t\t\t\"reference\");\n\n\t\t\tfor (Element referenceElement : referenceElements) {\n\t\t\t\tString referenceEntity = referenceElement.attributeValue(\n\t\t\t\t\t\"entity\");\n\t\t\t\tString referencePackagePath = referenceElement.attributeValue(\n\t\t\t\t\t\"package-path\");\n\n\t\t\t\tif (Validator.isNotNull(previousReferencePackagePath)) {\n\t\t\t\t\tif ((previousReferencePackagePath.compareToIgnoreCase(\n\t\t\t\t\t\t\treferencePackagePath) > 0) ||\n\t\t\t\t\t\t(previousReferencePackagePath.equals(\n\t\t\t\t\t\t\treferencePackagePath) &&\n\t\t\t\t\t\t (previousReferenceEntity.compareToIgnoreCase(\n\t\t\t\t\t\t\t referenceEntity) > 0))) {\n\n\t\t\t\t\t\tprocessErrorMessage(\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\"sort: \" + fileName + \" \" + referencePackagePath);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpreviousReferenceEntity = referenceEntity;\n\t\t\t\tpreviousReferencePackagePath = referencePackagePath;\n\t\t\t}\n\n\t\t\tpreviousEntityName = entityName;\n\t\t}\n\n\t\tElement exceptionsElement = rootElement.element(\"exceptions\");\n\n\t\tif (exceptionsElement == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<Element> exceptionElements = exceptionsElement.elements(\n\t\t\t\"exception\");\n\n\t\tString previousException = StringPool.BLANK;\n\n\t\tfor (Element exceptionElement : exceptionElements) {\n\t\t\tString exception = exceptionElement.getStringValue();\n\n\t\t\tif (Validator.isNotNull(previousException) &&\n\t\t\t\t(previousException.compareToIgnoreCase(exception) > 0)) {\n\n\t\t\t\tprocessErrorMessage(\n\t\t\t\t\tfileName, \"sort: \" + fileName + \" \" + exception);\n\t\t\t}\n\n\t\t\tpreviousException = exception;\n\t\t}\n\t}","id":64268,"modified_method":"protected void formatTilesDefsXML(String fileName, String content)\n\t\tthrows DocumentException, IOException {\n\n\t\tDocument document = saxReaderUtil.read(content);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tList<Element> definitionElements = rootElement.elements(\"definition\");\n\n\t\tString previousName = StringPool.BLANK;\n\n\t\tfor (Element definitionElement : definitionElements) {\n\t\t\tString name = definitionElement.attributeValue(\"name\");\n\n\t\t\tif (Validator.isNotNull(previousName) &&\n\t\t\t\t(previousName.compareTo(name) > 0) &&\n\t\t\t\t!previousName.equals(\"portlet\")) {\n\n\t\t\t\tprocessErrorMessage(fileName, \"sort: \" + fileName + \" \" + name);\n\n\t\t\t}\n\n\t\t\tpreviousName = name;\n\t\t}\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void formatWebXML() throws IOException {\n\t\tif (portalSource) {\n\t\t\tProperties properties = new Properties();\n\n\t\t\tString propertiesContent = fileUtil.read(\n\t\t\t\tBASEDIR + \"portal-impl/src/portal.properties\");\n\n\t\t\tPropertiesUtil.load(properties, propertiesContent);\n\n\t\t\tString[] locales = StringUtil.split(\n\t\t\t\tproperties.getProperty(PropsKeys.LOCALES));\n\n\t\t\tArrays.sort(locales);\n\n\t\t\tSet<String> urlPatterns = new TreeSet<String>();\n\n\t\t\tfor (String locale : locales) {\n\t\t\t\tint pos = locale.indexOf(StringPool.UNDERLINE);\n\n\t\t\t\tString languageCode = locale.substring(0, pos);\n\n\t\t\t\turlPatterns.add(languageCode);\n\t\t\t\turlPatterns.add(locale);\n\t\t\t}\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tfor (String urlPattern : urlPatterns) {\n\t\t\t\tsb.append(\"\\t<servlet-mapping>\\n\");\n\t\t\t\tsb.append(\"\\t\\t<servlet-name>I18n Servlet<\/servlet-name>\\n\");\n\t\t\t\tsb.append(\n\t\t\t\t\t\"\\t\\t<url-pattern>/\" + urlPattern +\"/*<\/url-pattern>\\n\");\n\t\t\t\tsb.append(\"\\t<\/servlet-mapping>\\n\");\n\t\t\t}\n\n\t\t\tFile file = new File(\n\t\t\t\tBASEDIR + \"portal-web/docroot/WEB-INF/web.xml\");\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = trimContent(content, false);\n\n\t\t\tint x = newContent.indexOf(\"<servlet-mapping>\");\n\n\t\t\tx = newContent.indexOf(\n\t\t\t\t\"<servlet-name>I18n Servlet<\/servlet-name>\", x);\n\n\t\t\tx = newContent.lastIndexOf(\"<servlet-mapping>\", x) - 1;\n\n\t\t\tint y = newContent.lastIndexOf(\n\t\t\t\t\"<servlet-name>I18n Servlet<\/servlet-name>\");\n\n\t\t\ty = newContent.indexOf(\"<\/servlet-mapping>\", y) + 19;\n\n\t\t\tnewContent =\n\t\t\t\tnewContent.substring(0, x) + sb.toString() +\n\t\t\t\t\tnewContent.substring(y);\n\n\t\t\tx = newContent.indexOf(\"<security-constraint>\");\n\n\t\t\tx = newContent.indexOf(\n\t\t\t\t\"<web-resource-name>/c/portal/protected<\/web-resource-name>\",\n\t\t\t\tx);\n\n\t\t\tx = newContent.indexOf(\"<url-pattern>\", x) - 3;\n\n\t\t\ty = newContent.indexOf(\"<http-method>\", x);\n\n\t\t\ty = newContent.lastIndexOf(\"<\/url-pattern>\", y) + 15;\n\n\t\t\tsb = new StringBundler();\n\n\t\t\tsb.append(\"\\t\\t\\t<url-pattern>/c/portal/protected<\/url-pattern>\\n\");\n\n\t\t\tfor (String urlPattern : urlPatterns) {\n\t\t\t\tsb.append(\n\t\t\t\t\t\"\\t\\t\\t<url-pattern>/\" + urlPattern +\n\t\t\t\t\t\t\"/c/portal/protected<\/url-pattern>\\n\");\n\t\t\t}\n\n\t\t\tnewContent =\n\t\t\t\tnewContent.substring(0, x) + sb.toString() +\n\t\t\t\t\tnewContent.substring(y);\n\n\t\t\tif ((newContent != null) && !content.equals(newContent)) {\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tSystem.out.println(file);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString webXML = ContentUtil.get(\n\t\t\t\t\"com/liferay/portal/deploy/dependencies/web.xml\");\n\n\t\t\tString[] includes = new String[] {\"**\\\\web.xml\"};\n\n\t\t\tList<String> fileNames = getFileNames(new String[0], includes);\n\n\t\t\tfor (String fileName : fileNames) {\n\t\t\t\tString content = fileUtil.read(BASEDIR + fileName);\n\n\t\t\t\tif (content.equals(webXML)) {\n\t\t\t\t\tfileName = StringUtil.replace(\n\t\t\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\t\t\tprocessErrorMessage(fileName, fileName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":64269,"modified_method":"protected String formatWebXML(String fileName, String content)\n\t\tthrows IOException {\n\n\t\tif (!portalSource) {\n\t\t\tString webXML = ContentUtil.get(\n\t\t\t\t\"com/liferay/portal/deploy/dependencies/web.xml\");\n\n\t\t\tif (content.equals(webXML)) {\n\t\t\t\tprocessErrorMessage(fileName, fileName);\n\t\t\t}\n\n\t\t\treturn content;\n\t\t}\n\n\t\tProperties properties = new Properties();\n\n\t\tString propertiesContent = fileUtil.read(\n\t\t\tBASEDIR + \"portal-impl/src/portal.properties\");\n\n\t\tPropertiesUtil.load(properties, propertiesContent);\n\n\t\tString[] locales = StringUtil.split(\n\t\t\tproperties.getProperty(PropsKeys.LOCALES));\n\n\t\tArrays.sort(locales);\n\n\t\tSet<String> urlPatterns = new TreeSet<String>();\n\n\t\tfor (String locale : locales) {\n\t\t\tint pos = locale.indexOf(StringPool.UNDERLINE);\n\n\t\t\tString languageCode = locale.substring(0, pos);\n\n\t\t\turlPatterns.add(languageCode);\n\t\t\turlPatterns.add(locale);\n\t\t}\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tfor (String urlPattern : urlPatterns) {\n\t\t\tsb.append(\"\\t<servlet-mapping>\\n\");\n\t\t\tsb.append(\"\\t\\t<servlet-name>I18n Servlet<\/servlet-name>\\n\");\n\t\t\tsb.append(\"\\t\\t<url-pattern>/\" + urlPattern +\"/*<\/url-pattern>\\n\");\n\t\t\tsb.append(\"\\t<\/servlet-mapping>\\n\");\n\t\t}\n\n\t\tint x = content.indexOf(\"<servlet-mapping>\");\n\n\t\tx = content.indexOf(\"<servlet-name>I18n Servlet<\/servlet-name>\", x);\n\n\t\tx = content.lastIndexOf(\"<servlet-mapping>\", x) - 1;\n\n\t\tint y = content.lastIndexOf(\n\t\t\t\"<servlet-name>I18n Servlet<\/servlet-name>\");\n\n\t\ty = content.indexOf(\"<\/servlet-mapping>\", y) + 19;\n\n\t\tString newContent =\n\t\t\tcontent.substring(0, x) + sb.toString() + content.substring(y);\n\n\t\tx = newContent.indexOf(\"<security-constraint>\");\n\n\t\tx = newContent.indexOf(\n\t\t\t\"<web-resource-name>/c/portal/protected<\/web-resource-name>\", x);\n\n\t\tx = newContent.indexOf(\"<url-pattern>\", x) - 3;\n\n\t\ty = newContent.indexOf(\"<http-method>\", x);\n\n\t\ty = newContent.lastIndexOf(\"<\/url-pattern>\", y) + 15;\n\n\t\tsb = new StringBundler();\n\n\t\tsb.append(\"\\t\\t\\t<url-pattern>/c/portal/protected<\/url-pattern>\\n\");\n\n\t\tfor (String urlPattern : urlPatterns) {\n\t\t\tsb.append(\n\t\t\t\t\"\\t\\t\\t<url-pattern>/\" + urlPattern +\n\t\t\t\t\t\"/c/portal/protected<\/url-pattern>\\n\");\n\t\t}\n\n\t\treturn newContent.substring(0, x) + sb.toString() +\n\t\t\tnewContent.substring(y);\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void formatDDLStructuresXML()\n\t\tthrows DocumentException, IOException {\n\n\t\tString basedir =\n\t\t\t\"./portal-impl/src/com/liferay/portal/events/dependencies/\";\n\n\t\tif (!fileUtil.exists(basedir)) {\n\t\t\treturn;\n\t\t}\n\n\t\tString[] includes = new String [] {\"**\\\\*structures.xml\"};\n\n\t\tList<String> fileNames = getFileNames(basedir, new String[0], includes);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(basedir + fileName);\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = trimContent(content, false);\n\n\t\t\tnewContent = formatDDLStructuresXML(content);\n\n\t\t\tif ((newContent != null) && !content.equals(newContent)) {\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tfileName = StringUtil.replace(\n\t\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t\t}\n\t\t}\n\t}","id":64270,"modified_method":"protected String formatAntXML(String fileName, String content)\n\t\tthrows DocumentException, IOException {\n\n\t\tString newContent = trimContent(content, true);\n\n\t\tnewContent = fixAntXMLProjectName(fileName, newContent);\n\n\t\tDocument document = saxReaderUtil.read(newContent);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tString previousName = StringPool.BLANK;\n\n\t\tList<Element> targetElements = rootElement.elements(\"target\");\n\n\t\tfor (Element targetElement : targetElements) {\n\t\t\tString name = targetElement.attributeValue(\"name\");\n\n\t\t\tif (name.equals(\"Test\")) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t}\n\n\t\t\tif (name.compareTo(previousName) < -1) {\n\t\t\t\tprocessErrorMessage(\n\t\t\t\t\tfileName,\n\t\t\t\t\tfileName + \" has an unordered target \" + name);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tpreviousName = name;\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doFormat() throws Exception {\n\t\tformatAntXML();\n\t\tformatDDLStructuresXML();\n\t\tformatFriendlyURLRoutesXML();\n\t\tformatPortletXML();\n\t\tformatServiceXML();\n\t\tformatStrutsConfigXML();\n\t\tformatTilesDefsXML();\n\t\tformatWebXML();\n\t}","id":64271,"modified_method":"@Override\n\tprotected void doFormat() throws Exception {\n\t\tString[] excludes = new String[] {\"**\\\\classes\\\\**\", \"**\\\\bin\\\\**\"};\n\t\tString[] includes = new String[] {\"**\\\\*.xml\"};\n\n\t\tList<String> fileNames = getFileNames(excludes, includes);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = content;\n\n\t\t\tif (!fileName.contains(\"/build\")) {\n\t\t\t\tnewContent = trimContent(newContent, false);\n\t\t\t}\n\n\t\t\tif (fileName.contains(\"/build\") && !fileName.contains(\"/tools/\")) {\n\t\t\t\tnewContent = formatAntXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"structures.xml\")) {\n\t\t\t\tnewContent = formatDDLStructuresXML(newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"routes.xml\")) {\n\t\t\t\tnewContent = formatFriendlyURLRoutesXML(newContent);\n\t\t\t}\n\t\t\telse if ((portalSource &&\n\t\t\t\t\t  fileName.endsWith(\"/portlet-custom.xml\")) ||\n\t\t\t\t\t (!portalSource && fileName.endsWith(\"/portlet.xml\"))) {\n\n\t\t\t\tnewContent = formatPortletXML(newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/service.xml\")) {\n\t\t\t\tformatServiceXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/struts-config.xml\")) {\n\t\t\t\tformatStrutsConfigXML(fileName, content);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/tiles-defs.xml\")) {\n\t\t\t\tformatTilesDefsXML(fileName, content);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"WEB-INF/web.xml\") ||\n\t\t\t\t\t !portalSource && fileName.endsWith(\"/web.xml\")) {\n\n\t\t\t\tnewContent = formatWebXML(fileName, content);\n\t\t\t}\n\n\t\t\tif ((newContent != null) && !content.equals(newContent)) {\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void formatServiceXML() throws DocumentException, IOException {\n\t\tString[] includes = new String[] {\"**\\\\service.xml\"};\n\n\t\tList<String> fileNames = getFileNames(new String[0], includes);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = trimContent(content, false);\n\n\t\t\tformatServiceXML(fileName, content);\n\n\t\t\tif ((newContent != null) && !content.equals(newContent)) {\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t\t}\n\t\t}\n\t}","id":64272,"modified_method":"protected void formatStrutsConfigXML(String fileName, String content)\n\t\tthrows DocumentException, IOException {\n\n\t\tDocument document = saxReaderUtil.read(content);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tElement actionMappingsElement = rootElement.element(\"action-mappings\");\n\n\t\tList<Element> actionElements = actionMappingsElement.elements(\"action\");\n\n\t\tString previousPath = StringPool.BLANK;\n\n\t\tfor (Element actionElement : actionElements) {\n\t\t\tString path = actionElement.attributeValue(\"path\");\n\n\t\t\tif (Validator.isNotNull(previousPath) &&\n\t\t\t\t(previousPath.compareTo(path) > 0) &&\n\t\t\t\t(!previousPath.startsWith(\"/portal/\") ||\n\t\t\t\t path.startsWith(\"/portal/\"))) {\n\n\t\t\t\tprocessErrorMessage(fileName, \"sort: \" + fileName + \" \" + path);\n\t\t\t}\n\n\t\t\tpreviousPath = path;\n\t\t}\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String formatFriendlyURLRoutesXML(String content)\n\t\tthrows DocumentException {\n\n\t\tDocument document = saxReaderUtil.read(content);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tList<ComparableRoute> comparableRoutes =\n\t\t\tnew ArrayList<ComparableRoute>();\n\n\t\tfor (Element routeElement : rootElement.elements(\"route\")) {\n\t\t\tString pattern = routeElement.elementText(\"pattern\");\n\n\t\t\tComparableRoute comparableRoute = new ComparableRoute(pattern);\n\n\t\t\tfor (Element generatedParameterElement :\n\t\t\t\t\trouteElement.elements(\"generated-parameter\")) {\n\n\t\t\t\tString name = generatedParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = generatedParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addGeneratedParameter(name, value);\n\t\t\t}\n\n\t\t\tfor (Element ignoredParameterElement :\n\t\t\t\t\trouteElement.elements(\"ignored-parameter\")) {\n\n\t\t\t\tString name = ignoredParameterElement.attributeValue(\"name\");\n\n\t\t\t\tcomparableRoute.addIgnoredParameter(name);\n\t\t\t}\n\n\t\t\tfor (Element implicitParameterElement :\n\t\t\t\t\trouteElement.elements(\"implicit-parameter\")) {\n\n\t\t\t\tString name = implicitParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = implicitParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addImplicitParameter(name, value);\n\t\t\t}\n\n\t\t\tfor (Element overriddenParameterElement :\n\t\t\t\t\trouteElement.elements(\"overridden-parameter\")) {\n\n\t\t\t\tString name = overriddenParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = overriddenParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addOverriddenParameter(name, value);\n\t\t\t}\n\n\t\t\tcomparableRoutes.add(comparableRoute);\n\t\t}\n\n\t\tCollections.sort(comparableRoutes);\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tsb.append(\"<?xml version=\\\"1.0\\\"?>\\n\");\n\t\tsb.append(\"<!DOCTYPE routes PUBLIC \\\"-//Liferay//DTD Friendly URL \");\n\t\tsb.append(\"Routes \");\n\t\tsb.append(mainReleaseVersion);\n\t\tsb.append(\"//EN\\\" \\\"http://www.liferay.com/dtd/\");\n\t\tsb.append(\"liferay-friendly-url-routes_\");\n\t\tsb.append(\n\t\t\tStringUtil.replace(\n\t\t\t\tmainReleaseVersion, StringPool.PERIOD, StringPool.UNDERLINE));\n\t\tsb.append(\".dtd\\\">\\n\\n<routes>\\n\");\n\n\t\tfor (ComparableRoute comparableRoute : comparableRoutes) {\n\t\t\tsb.append(\"\\t<route>\\n\");\n\t\t\tsb.append(\"\\t\\t<pattern>\");\n\t\t\tsb.append(comparableRoute.getPattern());\n\t\t\tsb.append(\"<\/pattern>\\n\");\n\n\t\t\tMap<String, String> generatedParameters =\n\t\t\t\tcomparableRoute.getGeneratedParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\tgeneratedParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<generated-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/generated-parameter>\\n\");\n\t\t\t}\n\n\t\t\tSet<String> ignoredParameters =\n\t\t\t\tcomparableRoute.getIgnoredParameters();\n\n\t\t\tfor (String entry : ignoredParameters) {\n\t\t\t\tsb.append(\"\\t\\t<ignored-parameter name=\\\"\");\n\t\t\t\tsb.append(entry);\n\t\t\t\tsb.append(\"\\\" />\\n\");\n\t\t\t}\n\n\t\t\tMap<String, String> implicitParameters =\n\t\t\t\tcomparableRoute.getImplicitParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\timplicitParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<implicit-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/implicit-parameter>\\n\");\n\t\t\t}\n\n\t\t\tMap<String, String> overriddenParameters =\n\t\t\t\tcomparableRoute.getOverriddenParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\toverriddenParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<overridden-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/overridden-parameter>\\n\");\n\t\t\t}\n\n\t\t\tsb.append(\"\\t<\/route>\\n\");\n\t\t}\n\n\t\tsb.append(\"<\/routes>\");\n\n\t\treturn sb.toString();\n\t}","id":64273,"modified_method":"protected String formatFriendlyURLRoutesXML(String content)\n\t\tthrows DocumentException {\n\n\t\tif (content.contains(\"<!-- SourceFormatter.Ignore -->\")) {\n\t\t\treturn content;\n\t\t}\n\n\t\tDocument document = saxReaderUtil.read(content);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tList<ComparableRoute> comparableRoutes =\n\t\t\tnew ArrayList<ComparableRoute>();\n\n\t\tfor (Element routeElement : rootElement.elements(\"route\")) {\n\t\t\tString pattern = routeElement.elementText(\"pattern\");\n\n\t\t\tComparableRoute comparableRoute = new ComparableRoute(pattern);\n\n\t\t\tfor (Element generatedParameterElement :\n\t\t\t\t\trouteElement.elements(\"generated-parameter\")) {\n\n\t\t\t\tString name = generatedParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = generatedParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addGeneratedParameter(name, value);\n\t\t\t}\n\n\t\t\tfor (Element ignoredParameterElement :\n\t\t\t\t\trouteElement.elements(\"ignored-parameter\")) {\n\n\t\t\t\tString name = ignoredParameterElement.attributeValue(\"name\");\n\n\t\t\t\tcomparableRoute.addIgnoredParameter(name);\n\t\t\t}\n\n\t\t\tfor (Element implicitParameterElement :\n\t\t\t\t\trouteElement.elements(\"implicit-parameter\")) {\n\n\t\t\t\tString name = implicitParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = implicitParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addImplicitParameter(name, value);\n\t\t\t}\n\n\t\t\tfor (Element overriddenParameterElement :\n\t\t\t\t\trouteElement.elements(\"overridden-parameter\")) {\n\n\t\t\t\tString name = overriddenParameterElement.attributeValue(\"name\");\n\t\t\t\tString value = overriddenParameterElement.getText();\n\n\t\t\t\tcomparableRoute.addOverriddenParameter(name, value);\n\t\t\t}\n\n\t\t\tcomparableRoutes.add(comparableRoute);\n\t\t}\n\n\t\tCollections.sort(comparableRoutes);\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tsb.append(\"<?xml version=\\\"1.0\\\"?>\\n\");\n\t\tsb.append(\"<!DOCTYPE routes PUBLIC \\\"-//Liferay//DTD Friendly URL \");\n\t\tsb.append(\"Routes \");\n\t\tsb.append(mainReleaseVersion);\n\t\tsb.append(\"//EN\\\" \\\"http://www.liferay.com/dtd/\");\n\t\tsb.append(\"liferay-friendly-url-routes_\");\n\t\tsb.append(\n\t\t\tStringUtil.replace(\n\t\t\t\tmainReleaseVersion, StringPool.PERIOD, StringPool.UNDERLINE));\n\t\tsb.append(\".dtd\\\">\\n\\n<routes>\\n\");\n\n\t\tfor (ComparableRoute comparableRoute : comparableRoutes) {\n\t\t\tsb.append(\"\\t<route>\\n\");\n\t\t\tsb.append(\"\\t\\t<pattern>\");\n\t\t\tsb.append(comparableRoute.getPattern());\n\t\t\tsb.append(\"<\/pattern>\\n\");\n\n\t\t\tMap<String, String> generatedParameters =\n\t\t\t\tcomparableRoute.getGeneratedParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\tgeneratedParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<generated-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/generated-parameter>\\n\");\n\t\t\t}\n\n\t\t\tSet<String> ignoredParameters =\n\t\t\t\tcomparableRoute.getIgnoredParameters();\n\n\t\t\tfor (String entry : ignoredParameters) {\n\t\t\t\tsb.append(\"\\t\\t<ignored-parameter name=\\\"\");\n\t\t\t\tsb.append(entry);\n\t\t\t\tsb.append(\"\\\" />\\n\");\n\t\t\t}\n\n\t\t\tMap<String, String> implicitParameters =\n\t\t\t\tcomparableRoute.getImplicitParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\timplicitParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<implicit-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/implicit-parameter>\\n\");\n\t\t\t}\n\n\t\t\tMap<String, String> overriddenParameters =\n\t\t\t\tcomparableRoute.getOverriddenParameters();\n\n\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\toverriddenParameters.entrySet()) {\n\n\t\t\t\tsb.append(\"\\t\\t<overridden-parameter name=\\\"\");\n\t\t\t\tsb.append(entry.getKey());\n\t\t\t\tsb.append(\"\\\">\");\n\t\t\t\tsb.append(entry.getValue());\n\t\t\t\tsb.append(\"<\/overridden-parameter>\\n\");\n\t\t\t}\n\n\t\t\tsb.append(\"\\t<\/route>\\n\");\n\t\t}\n\n\t\tsb.append(\"<\/routes>\");\n\n\t\treturn sb.toString();\n\t}","commit_id":"b9acecd85ae15644ca0adaa5635df01419d3df35","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String formatOSGIComponents(\n\t\tString fileName, String absolutePath, String content) {\n\n\t\tString moduleServicePackagePath = null;\n\n\t\tif (_checkModulesServiceUtil) {\n\t\t\tMatcher matcher = _serviceUtilImportPattern.matcher(content);\n\n\t\t\twhile (matcher.find()) {\n\t\t\t\tString serviceUtilClassName = matcher.group(2);\n\n\t\t\t\tif (moduleServicePackagePath == null) {\n\t\t\t\t\tmoduleServicePackagePath = getModuleServicePackagePath(\n\t\t\t\t\t\tfileName);\n\t\t\t\t}\n\n\t\t\t\tif (Validator.isNotNull(moduleServicePackagePath)) {\n\t\t\t\t\tString serviceUtilClassPackagePath = matcher.group(1);\n\n\t\t\t\t\tif (serviceUtilClassPackagePath.startsWith(\n\t\t\t\t\t\t\tmoduleServicePackagePath)) {\n\n\t\t\t\t\t\tprocessErrorMessage(\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\"LPS-59076: Convert OSGi Component to Spring \" +\n\t\t\t\t\t\t\t\t\"bean: \" + fileName);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprocessErrorMessage(\n\t\t\t\t\tfileName,\n\t\t\t\t\t\"LPS-59076: Use @Reference instead of calling \" +\n\t\t\t\t\t\tserviceUtilClassName + \" directly: \" + fileName);\n\t\t\t}\n\t\t}\n\n\t\tMatcher matcher = _setReferenceMethodPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tString annotationParameters = matcher.group(2);\n\n\t\t\tif (!annotationParameters.contains(\"unbind =\")) {\n\t\t\t\tString setMethodName = matcher.group(4);\n\n\t\t\t\tif (!content.contains(\"un\" + setMethodName + \"(\")) {\n\t\t\t\t\tif (Validator.isNull(annotationParameters)) {\n\t\t\t\t\t\treturn StringUtil.insert(\n\t\t\t\t\t\t\tcontent, \"(unbind = \\\"-\\\")\", matcher.start(2));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!annotationParameters.contains(StringPool.NEW_LINE)) {\n\t\t\t\t\t\treturn StringUtil.insert(\n\t\t\t\t\t\t\tcontent, \", unbind = \\\"-\\\"\", matcher.end(2) - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!annotationParameters.contains(\"\\n\\n\")) {\n\t\t\t\t\t\tString indent = matcher.group(1) + StringPool.TAB;\n\n\t\t\t\t\t\tint x = content.lastIndexOf(\"\\n\", matcher.end(2) - 1);\n\n\t\t\t\t\t\treturn StringUtil.replaceFirst(\n\t\t\t\t\t\t\tcontent, \"\\n\",\n\t\t\t\t\t\t\t\",\\n\" + indent + \"unbind = \\\"-\\\"\" + \"\\n\", x - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!_checkModulesServiceUtil) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString methodContent = matcher.group(6);\n\n\t\t\tMatcher referenceMethodContentMatcher =\n\t\t\t\t_setReferenceMethodContentPattern.matcher(methodContent);\n\n\t\t\tif (!referenceMethodContentMatcher.find()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (moduleServicePackagePath == null) {\n\t\t\t\tmoduleServicePackagePath = getModuleServicePackagePath(\n\t\t\t\t\tfileName);\n\t\t\t}\n\n\t\t\tif (Validator.isNotNull(moduleServicePackagePath)) {\n\t\t\t\tString typeName = matcher.group(5);\n\n\t\t\t\tStringBundler sb = new StringBundler(5);\n\n\t\t\t\tsb.append(\"\\nimport \");\n\t\t\t\tsb.append(moduleServicePackagePath);\n\t\t\t\tsb.append(\".*\\\\.\");\n\t\t\t\tsb.append(typeName);\n\t\t\t\tsb.append(StringPool.SEMICOLON);\n\n\t\t\t\tPattern importPattern = Pattern.compile(sb.toString());\n\n\t\t\t\tMatcher importMatcher = importPattern.matcher(content);\n\n\t\t\t\tif (importMatcher.find()) {\n\t\t\t\t\tprocessErrorMessage(\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\"LPS-59076: Convert OSGi Component to Spring bean: \" +\n\t\t\t\t\t\t\tfileName);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn content;\n\t}","id":64274,"modified_method":"protected String formatOSGIComponents(\n\t\tString fileName, String absolutePath, String content) {\n\n\t\tString moduleServicePackagePath = null;\n\n\t\tMatcher matcher = _serviceUtilImportPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tString serviceUtilClassName = matcher.group(2);\n\n\t\t\tif (moduleServicePackagePath == null) {\n\t\t\t\tmoduleServicePackagePath = getModuleServicePackagePath(\n\t\t\t\t\tfileName);\n\t\t\t}\n\n\t\t\tif (Validator.isNotNull(moduleServicePackagePath)) {\n\t\t\t\tString serviceUtilClassPackagePath = matcher.group(1);\n\n\t\t\t\tif (serviceUtilClassPackagePath.startsWith(\n\t\t\t\t\t\tmoduleServicePackagePath)) {\n\n\t\t\t\t\tif (_checkModulesServiceUtil) {\n\t\t\t\t\t\tprocessErrorMessage(\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\"LPS-59076: Convert OSGi Component to Spring \" +\n\t\t\t\t\t\t\t\t\"bean: \" + fileName);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isExcludedFile(\n\t\t\t\t\t_temporaryLPS59076ExclusionFiles, absolutePath)) {\n\n\t\t\t\tprocessErrorMessage(\n\t\t\t\t\tfileName,\n\t\t\t\t\t\"LPS-59076: Use @Reference instead of calling \" +\n\t\t\t\t\t\tserviceUtilClassName + \" directly: \" + fileName);\n\t\t\t}\n\t\t}\n\n\t\tmatcher = _setReferenceMethodPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tString annotationParameters = matcher.group(2);\n\n\t\t\tif (!annotationParameters.contains(\"unbind =\")) {\n\t\t\t\tString setMethodName = matcher.group(4);\n\n\t\t\t\tif (!content.contains(\"un\" + setMethodName + \"(\")) {\n\t\t\t\t\tif (Validator.isNull(annotationParameters)) {\n\t\t\t\t\t\treturn StringUtil.insert(\n\t\t\t\t\t\t\tcontent, \"(unbind = \\\"-\\\")\", matcher.start(2));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!annotationParameters.contains(StringPool.NEW_LINE)) {\n\t\t\t\t\t\treturn StringUtil.insert(\n\t\t\t\t\t\t\tcontent, \", unbind = \\\"-\\\"\", matcher.end(2) - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!annotationParameters.contains(\"\\n\\n\")) {\n\t\t\t\t\t\tString indent = matcher.group(1) + StringPool.TAB;\n\n\t\t\t\t\t\tint x = content.lastIndexOf(\"\\n\", matcher.end(2) - 1);\n\n\t\t\t\t\t\treturn StringUtil.replaceFirst(\n\t\t\t\t\t\t\tcontent, \"\\n\",\n\t\t\t\t\t\t\t\",\\n\" + indent + \"unbind = \\\"-\\\"\" + \"\\n\", x - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!_checkModulesServiceUtil) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString methodContent = matcher.group(6);\n\n\t\t\tMatcher referenceMethodContentMatcher =\n\t\t\t\t_setReferenceMethodContentPattern.matcher(methodContent);\n\n\t\t\tif (!referenceMethodContentMatcher.find()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (moduleServicePackagePath == null) {\n\t\t\t\tmoduleServicePackagePath = getModuleServicePackagePath(\n\t\t\t\t\tfileName);\n\t\t\t}\n\n\t\t\tif (Validator.isNotNull(moduleServicePackagePath)) {\n\t\t\t\tString typeName = matcher.group(5);\n\n\t\t\t\tStringBundler sb = new StringBundler(5);\n\n\t\t\t\tsb.append(\"\\nimport \");\n\t\t\t\tsb.append(moduleServicePackagePath);\n\t\t\t\tsb.append(\".*\\\\.\");\n\t\t\t\tsb.append(typeName);\n\t\t\t\tsb.append(StringPool.SEMICOLON);\n\n\t\t\t\tPattern importPattern = Pattern.compile(sb.toString());\n\n\t\t\t\tMatcher importMatcher = importPattern.matcher(content);\n\n\t\t\t\tif (importMatcher.find()) {\n\t\t\t\t\tprocessErrorMessage(\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\"LPS-59076: Convert OSGi Component to Spring bean: \" +\n\t\t\t\t\t\t\tfileName);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn content;\n\t}","commit_id":"9ef97ef5254b33a90a80b4575b2f1b2d516cac59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected List<String> doGetFileNames() throws Exception {\n\t\tCollection<String> fileNames = null;\n\n\t\tif (portalSource) {\n\t\t\tfileNames = getPortalJavaFiles();\n\n\t\t\t_checkModulesServiceUtil = GetterUtil.getBoolean(\n\t\t\t\tSystem.getProperty(\n\t\t\t\t\t\"source.formatter.check.modules.service.util\"));\n\t\t\t_checkUnprocessedExceptions = GetterUtil.getBoolean(\n\t\t\t\tSystem.getProperty(\n\t\t\t\t\t\"source.formatter.check.unprocessed.exceptions\"));\n\t\t}\n\t\telse {\n\t\t\tfileNames = getPluginJavaFiles();\n\t\t}\n\n\t\t_addMissingDeprecationReleaseVersion = GetterUtil.getBoolean(\n\t\t\tgetProperty(\"add.missing.deprecation.release.version\"));\n\t\t_allowUseServiceUtilInServiceImpl = GetterUtil.getBoolean(\n\t\t\tgetProperty(\"allow.use.service.util.in.service.impl\"));\n\t\t_checkJavaFieldTypesExclusionFiles = getPropertyList(\n\t\t\t\"check.java.field.types.excludes.files\");\n\t\t_diamondOperatorExclusionFiles = getPropertyList(\n\t\t\t\"diamond.operator.excludes.files\");\n\t\t_diamondOperatorExclusionPaths = getPropertyList(\n\t\t\t\"diamond.operator.excludes.paths\");\n\t\t_fitOnSingleLineExclusionFiles = getPropertyList(\n\t\t\t\"fit.on.single.line.excludes.files\");\n\t\t_hibernateSQLQueryExclusionFiles = getPropertyList(\n\t\t\t\"hibernate.sql.query.excludes.files\");\n\t\t_javaTermAccessLevelModifierExclusionFiles = getPropertyList(\n\t\t\t\"javaterm.access.level.modifier.excludes.files\");\n\t\t_javaTermSortExclusionFiles = getPropertyList(\n\t\t\t\"javaterm.sort.excludes.files\");\n\t\t_lineLengthExclusionFiles = getPropertyList(\n\t\t\t\"line.length.excludes.files\");\n\t\t_proxyExclusionFiles = getPropertyList(\"proxy.excludes.files\");\n\t\t_secureRandomExclusionFiles = getPropertyList(\n\t\t\t\"secure.random.excludes.files\");\n\t\t_secureXmlExclusionFiles = getPropertyList(\"secure.xml.excludes.files\");\n\t\t_staticLogVariableExclusionFiles = getPropertyList(\n\t\t\t\"static.log.excludes.files\");\n\t\t_testAnnotationsExclusionFiles = getPropertyList(\n\t\t\t\"test.annotations.excludes.files\");\n\t\t_upgradeServiceUtilExclusionFiles = getPropertyList(\n\t\t\t\"upgrade.service.util.excludes.files\");\n\n\t\treturn new ArrayList<>(fileNames);\n\t}","id":64275,"modified_method":"@Override\n\tprotected List<String> doGetFileNames() throws Exception {\n\t\tCollection<String> fileNames = null;\n\n\t\tif (portalSource) {\n\t\t\tfileNames = getPortalJavaFiles();\n\n\t\t\t_checkModulesServiceUtil = GetterUtil.getBoolean(\n\t\t\t\tSystem.getProperty(\n\t\t\t\t\t\"source.formatter.check.modules.service.util\"));\n\t\t\t_checkUnprocessedExceptions = GetterUtil.getBoolean(\n\t\t\t\tSystem.getProperty(\n\t\t\t\t\t\"source.formatter.check.unprocessed.exceptions\"));\n\t\t}\n\t\telse {\n\t\t\tfileNames = getPluginJavaFiles();\n\t\t}\n\n\t\t_addMissingDeprecationReleaseVersion = GetterUtil.getBoolean(\n\t\t\tgetProperty(\"add.missing.deprecation.release.version\"));\n\t\t_allowUseServiceUtilInServiceImpl = GetterUtil.getBoolean(\n\t\t\tgetProperty(\"allow.use.service.util.in.service.impl\"));\n\t\t_checkJavaFieldTypesExclusionFiles = getPropertyList(\n\t\t\t\"check.java.field.types.excludes.files\");\n\t\t_diamondOperatorExclusionFiles = getPropertyList(\n\t\t\t\"diamond.operator.excludes.files\");\n\t\t_diamondOperatorExclusionPaths = getPropertyList(\n\t\t\t\"diamond.operator.excludes.paths\");\n\t\t_fitOnSingleLineExclusionFiles = getPropertyList(\n\t\t\t\"fit.on.single.line.excludes.files\");\n\t\t_hibernateSQLQueryExclusionFiles = getPropertyList(\n\t\t\t\"hibernate.sql.query.excludes.files\");\n\t\t_javaTermAccessLevelModifierExclusionFiles = getPropertyList(\n\t\t\t\"javaterm.access.level.modifier.excludes.files\");\n\t\t_javaTermSortExclusionFiles = getPropertyList(\n\t\t\t\"javaterm.sort.excludes.files\");\n\t\t_lineLengthExclusionFiles = getPropertyList(\n\t\t\t\"line.length.excludes.files\");\n\t\t_proxyExclusionFiles = getPropertyList(\"proxy.excludes.files\");\n\t\t_secureRandomExclusionFiles = getPropertyList(\n\t\t\t\"secure.random.excludes.files\");\n\t\t_secureXmlExclusionFiles = getPropertyList(\"secure.xml.excludes.files\");\n\t\t_staticLogVariableExclusionFiles = getPropertyList(\n\t\t\t\"static.log.excludes.files\");\n\t\t_temporaryLPS59076ExclusionFiles = getPropertyList(\n\t\t\t\"temporary.lps59076.excludes.files\");\n\t\t_testAnnotationsExclusionFiles = getPropertyList(\n\t\t\t\"test.annotations.excludes.files\");\n\t\t_upgradeServiceUtilExclusionFiles = getPropertyList(\n\t\t\t\"upgrade.service.util.excludes.files\");\n\n\t\treturn new ArrayList<>(fileNames);\n\t}","commit_id":"9ef97ef5254b33a90a80b4575b2f1b2d516cac59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddDraftEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\", RuntimeVariables.replace(\"Draft Test\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Draft Test\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"This is a test for the emergenc draft sstem\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"This is a test for the emergency draft system!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveStatus\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(15000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\"Draft saved\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\"Pacific Daylight Time\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Draft Test\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"This is a test for the emergency draft system!\"));\n\t}","id":64276,"modified_method":"public void testAddDraftEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Draft Test\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"This is a test for the emergency draft system.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tThread.sleep(15000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isTextPresent(\"Draft saved\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isTextPresent(\"Draft saved\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Draft Test\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"This is a test for the emergency draft system.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddEntryComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=0 Comments\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Comment\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Comment\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_postReplyBody0\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a test entr comment\"));\n\t\tselenium.type(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a test entry comment!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_postReplyButton0\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test entry comment!\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64277,"modified_method":"public void testAddEntryComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=0 Comments\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add Comment\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_33_postReplyBody0\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a test entry comment.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_postReplyButton0\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isVisible(\"_33_postReplyBody0\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"This is a test entry comment.\"),\n\t\t\tselenium.getText(\"//td[2]/div[1]\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\", RuntimeVariables.replace(\"Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64278,"modified_method":"public void testAddEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Test Entry\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"This is a test entry.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddEscapeCharacterEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"<!--Html Escape Character Test-->\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is an escape character test entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"link=<!--Html Escape Character Test-->\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"This is an escape character test entry.\"));\n\t}","id":64279,"modified_method":"public void testAddEscapeCharacterEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"<!--Html Escape Character Test-->\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is an escape character test entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"<!--Html Escape Character Test-->\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"This is an escape character test entry.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"Test Null Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Test Null Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_cancelButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_cancelButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Null Entry\"));\n\t}","id":64280,"modified_method":"public void testAddNullEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Test Null Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_cancelButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Null Entry\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullTitle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id='_33_editor']\");\n\t\tselenium.selectFrame(\"//iframe[@id='FCKeditor1___Frame']\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test null entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test null entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid title.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_cancelButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_cancelButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Null Entry\"));\n\t}","id":64281,"modified_method":"public void testAddNullTitle() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id='_33_editor']\");\n\t\tselenium.selectFrame(\"//iframe[@id='FCKeditor1___Frame']\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a test null entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid title.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_cancelButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_cancelButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test null entry.\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddRating() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tString votes = selenium.getIncrementedText(\"//td[3]/div[1]\");\n\t\tRuntimeVariables.setValue(\"votes\", votes);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[5]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[5]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isPartialText(\"//td[3]/div[1]\",\n\t\t\t\t\t\t\tRuntimeVariables.getValue(\"votes\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":64282,"modified_method":"public void testAddRating() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tString votes = selenium.getIncrementedText(\"//td[3]/div[1]\");\n\t\tRuntimeVariables.setValue(\"votes\", votes);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[5]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//img[5]\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isPartialText(\"//td[3]/div[1]\",\n\t\t\t\t\t\t\tRuntimeVariables.getValue(\"votes\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondEntryComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=0 Comments\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Add Comment\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Add Comment\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_postReplyBody0\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a second entr comment!\"));\n\t\tselenium.type(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a second entry comment!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_postReplyButton0\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a second entry comment!\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64283,"modified_method":"public void testAddSecondEntryComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=0 Comments\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add Comment\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_33_postReplyBody0\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_33_postReplyBody0\",\n\t\t\tRuntimeVariables.replace(\"This is a second entry comment.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_postReplyButton0\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isVisible(\"_33_postReplyBody0\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"This is a second entry comment.\"),\n\t\t\tselenium.getText(\"//td[2]/div[1]\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"Second Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64284,"modified_method":"public void testAddSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Blog Entry']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is a second test entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Second Test Entry\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"This is a second test entry.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertImportLAR() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test entry comment!\"));\n\t}","id":64285,"modified_method":"public void testAssertImportLAR() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test Entry\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Read More ?\"),\n\t\t\tselenium.getText(\"//div[2]/div[3]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test Entry\"),\n\t\t\tselenium.getText(\"//form/div/div[1]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"This is a test entry comment!\"),\n\t\t\tselenium.getText(\"//td[2]/div[1]\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertViewCount() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tString Count = selenium.getIncrementedText(\"//div[2]/span[1]\");\n\t\tRuntimeVariables.setValue(\"Count\", Count);\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//div[2]/span[1]\",\n\t\t\t\tRuntimeVariables.getValue(\"Count\")));\n\t}","id":64286,"modified_method":"public void testAssertViewCount() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tString Count = selenium.getIncrementedText(\"//div[2]/span[1]\");\n\t\tRuntimeVariables.setValue(\"Count\", Count);\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//div[2]/span[1]\",\n\t\t\t\tRuntimeVariables.getValue(\"Count\")));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(AddPageTest.class);\n\t\ttestSuite.addTestSuite(AddPortletTest.class);\n\t\ttestSuite.addTestSuite(AddEntryTest.class);\n\t\ttestSuite.addTestSuite(AddEntryCommentTest.class);\n\t\ttestSuite.addTestSuite(AssertViewCountTest.class);\n\t\ttestSuite.addTestSuite(AddRatingTest.class);\n\t\ttestSuite.addTestSuite(AddSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(AddSecondEntryCommentTest.class);\n\t\ttestSuite.addTestSuite(EditSecondCommentTest.class);\n\t\ttestSuite.addTestSuite(EditSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(SearchBlogsTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondCommentTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(AddNullEntryTest.class);\n\t\ttestSuite.addTestSuite(AddNullTitleTest.class);\n\t\ttestSuite.addTestSuite(AddEscapeCharacterEntryTest.class);\n\t\ttestSuite.addTestSuite(DeleteEscapeCharacterEntryTest.class);\n\t\ttestSuite.addTestSuite(AddDraftEntryTest.class);\n\t\ttestSuite.addTestSuite(PublishDraftEntryTest.class);\n\t\ttestSuite.addTestSuite(ConfigureDisplaySettingsTest.class);\n\t\ttestSuite.addTestSuite(DeleteEntryTest.class);\n\t\ttestSuite.addTestSuite(ImportLARTest.class);\n\t\ttestSuite.addTestSuite(AssertImportLARTest.class);\n\t\ttestSuite.addTestSuite(TearDownTest.class);\n\n\t\treturn testSuite;\n\t}","id":64287,"modified_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(AddPageTest.class);\n\t\ttestSuite.addTestSuite(AddPortletTest.class);\n\t\ttestSuite.addTestSuite(AddEntryTest.class);\n\t\ttestSuite.addTestSuite(AddEntryCommentTest.class);\n\t\ttestSuite.addTestSuite(AssertViewCountTest.class);\n\t\ttestSuite.addTestSuite(AddRatingTest.class);\n\t\ttestSuite.addTestSuite(AddSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(AddSecondEntryCommentTest.class);\n\t\ttestSuite.addTestSuite(EditSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(EditSecondCommentTest.class);\n\t\ttestSuite.addTestSuite(SearchBlogsTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondCommentTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondEntryTest.class);\n\t\ttestSuite.addTestSuite(AddNullEntryTest.class);\n\t\ttestSuite.addTestSuite(AddNullTitleTest.class);\n\t\ttestSuite.addTestSuite(AddEscapeCharacterEntryTest.class);\n\t\ttestSuite.addTestSuite(DeleteEscapeCharacterEntryTest.class);\n\t\ttestSuite.addTestSuite(ConfigureDisplaySettingsTest.class);\n\t\ttestSuite.addTestSuite(DeleteEntryTest.class);\n\t\ttestSuite.addTestSuite(AddDraftEntryTest.class);\n\t\ttestSuite.addTestSuite(PublishDraftEntryTest.class);\n\t\ttestSuite.addTestSuite(ImportLARTest.class);\n\t\ttestSuite.addTestSuite(AssertImportLARTest.class);\n\t\ttestSuite.addTestSuite(TearDownTest.class);\n\n\t\treturn testSuite;\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testConfigureDisplaySettings() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDelta\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDelta\", RuntimeVariables.replace(\"label=5\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDisplayStyle\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Save']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Return to Full Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry!\"));\n\t}","id":64288,"modified_method":"public void testConfigureDisplaySettings() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDelta\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDelta\", RuntimeVariables.replace(\"label=5\"));\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Title\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//img[@alt='Configuration']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_86_pageDelta\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_86_pageDelta\", RuntimeVariables.replace(\"label=5\"));\n\t\tselenium.select(\"_86_pageDisplayStyle\",\n\t\t\tRuntimeVariables.replace(\"label=Full Content\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have successfully updated the setup.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Return to Full Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"This is a test entry.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteEntry() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean EntryPresent = selenium.isElementPresent(\"link=Delete\");\n\n\t\t\t\tif (!EntryPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\t\t\"Your request processed successfully.\"));\n\t\t\t\tassertFalse(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64289,"modified_method":"public void testDeleteEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Test Entry\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test entry.\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteEscapeCharacterEntry() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean EscapeCharacterEntryPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"link=<!--Html Escape Character Test-->\");\n\n\t\t\t\tif (!EscapeCharacterEntryPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\t\t\"Your request processed successfully.\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64290,"modified_method":"public void testDeleteEscapeCharacterEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"link=<!--Html Escape Character Test-->\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"This is an escape character test entry.\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//td[5]/span/a[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//td[5]/span/a[2]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"This is an edited second entry comment!\"));\n\t}","id":64291,"modified_method":"public void testDeleteSecondComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//td[5]/span/a[2]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"link=This is an edited second entry comment.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"This is an edited second entry comment.\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t}","id":64292,"modified_method":"public void testDeleteSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Second Test Entry\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"This is an edited second test entry.\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditSecondComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[4]/span/a[2]\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editReplyBody1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_editReplyBody1\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second entr comment\"));\n\t\tselenium.type(\"_33_editReplyBody1\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second entry comment!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_editReplyButton1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"This is an edited second entry comment!\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64293,"modified_method":"public void testEditSecondComment() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//td[4]/span/a[2]\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_33_editReplyBody1\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_33_editReplyBody1\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second entry comment.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"_33_editReplyButton1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isVisible(\"_33_editReplyBody1\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"This is an edited second entry comment.\"),\n\t\t\tselenium.getText(\"//td[2]/div[1]\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_title\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_title\",\n\t\t\tRuntimeVariables.replace(\"Second Test Entr\"));\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.typeKeys(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second test entr\"));\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second test entry!\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"This is an edited second test entry!\"));\n\t}","id":64294,"modified_method":"public void testEditSecondEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Second Test Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_title\", RuntimeVariables.replace(\"Second Test Entry\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_editor\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"FCKeditor1___Frame\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"_33_editor\\\"]\");\n\t\tselenium.selectFrame(\"//iframe[@id=\\\"FCKeditor1___Frame\\\"]\");\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"This is an edited second test entry.\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"This is an edited second test entry.\"), selenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testPublishDraftEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Draft Test\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_saveButton\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Draft Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Draft Test\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Draft Test\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64295,"modified_method":"public void testPublishDraftEntry() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Draft Test\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.click(RuntimeVariables.replace(\"_33_saveButton\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Draft Test\"),\n\t\t\tselenium.getText(\"//div[2]/div[1]/div[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"This is a test for the emergency draft system.\"),\n\t\t\tselenium.getText(\"//p\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSearchBlogs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_33_keywords\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_33_keywords\", RuntimeVariables.replace(\"Test Entr\"));\n\t\tselenium.type(\"_33_keywords\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Search']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Entry\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//input[@value='Add Blog Entry']\"));\n\t}","id":64296,"modified_method":"public void testSearchBlogs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Blogs Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Blogs Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_33_keywords\", RuntimeVariables.replace(\"Test Entry\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Search']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test Entry\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t}","commit_id":"9575e9b632dd7cb3e751670ced996be6b02e4fd9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddVirtualHostingCommunity() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"link=Add\"));\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Blank Site\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.waitForVisible(\"//input[@id='_134_name']\");\n\t\tselenium.typeKeys(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Communit\"));\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64297,"modified_method":"public void testAddVirtualHostingCommunity() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Blank Site')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Blank Site\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Blank Site')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Blank Site')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.waitForVisible(\"//input[@id='_134_name']\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddVirtualHostingPrivatePage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Pages\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Private Pages\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//div/span/button[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForVisible(\"//input[@name='_156_name_en_US']\");\n\t\t\t\tselenium.type(\"//input[@name='_156_name_en_US']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Add Page']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\n\t\t\t\tboolean privatePagePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li/div/div[3]/a\");\n\n\t\t\t\tif (privatePagePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//div[3]/ul/li/div/div[1]\");\n\n\t\t\tcase 2:\n\t\t\t\tselenium.waitForVisible(\"//li/ul/li/div/div[3]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Page\"),\n\t\t\t\t\tselenium.getText(\"//li/ul/li/div/div[3]/a\"));\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64298,"modified_method":"public void testAddVirtualHostingPrivatePage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\t\t\tselenium.waitForElementPresent(\n\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Pages\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Private Pages\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[contains(.,'Add Page')]/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForVisible(\"//input[@name='_156_name_en_US']\");\n\t\t\t\tselenium.type(\"//input[@name='_156_name_en_US']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Add Page']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\n\t\t\t\tboolean privatePagePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li/div/div[3]/a\");\n\n\t\t\t\tif (privatePagePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//div[3]/ul/li/div/div[1]\");\n\n\t\t\tcase 2:\n\t\t\t\tselenium.waitForVisible(\"//li/ul/li/div/div[3]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Page\"),\n\t\t\t\t\tselenium.getText(\"//li/ul/li/div/div[3]/a\"));\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddVirtualHostingPublicPage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Pages\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Manage Pages')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Public Pages\",\n\t\t\t\t\tRuntimeVariables.replace(\"Public Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//div/span/button[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForVisible(\"//input[@name='_156_name_en_US']\");\n\t\t\t\tselenium.type(\"//input[@name='_156_name_en_US']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Add Page']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\n\t\t\t\tboolean publicPagePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li/div/div[3]/a\");\n\n\t\t\t\tif (publicPagePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//div[3]/ul/li/div/div[1]\");\n\n\t\t\tcase 2:\n\t\t\t\tselenium.waitForVisible(\"//li/ul/li/div/div[3]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Public Page\"),\n\t\t\t\t\tselenium.getText(\"//li/ul/li/div/div[3]/a\"));\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64299,"modified_method":"public void testAddVirtualHostingPublicPage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\t\t\tselenium.waitForElementPresent(\n\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Pages\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Manage Pages')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Public Pages\",\n\t\t\t\t\tRuntimeVariables.replace(\"Public Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[contains(.,'Add Page')]/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForVisible(\"//input[@name='_156_name_en_US']\");\n\t\t\t\tselenium.type(\"//input[@name='_156_name_en_US']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Add Page']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\n\t\t\t\tboolean publicPagePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li/div/div[3]/a\");\n\n\t\t\t\tif (publicPagePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//div[3]/ul/li/div/div[1]\");\n\n\t\t\tcase 2:\n\t\t\t\tselenium.waitForVisible(\"//li/ul/li/div/div[3]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Public Page\"),\n\t\t\t\t\tselenium.getText(\"//li/ul/li/div/div[3]/a\"));\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertPrivatePageFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/group/alpha/\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/group/alpha/\"), selenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//li[2]/span/a\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Private Page\"));\n\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/group/alpha/private-page\"),\n\t\t\tselenium.getLocation());\n\t}","id":64300,"modified_method":"public void testAssertPrivatePageFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/group/alpha/\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/group/alpha/\"), selenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//span[@title='Go to Virtual Hosting Community']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[contains(text(),'Virtual Hosting Community')]\"));\n\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/group/alpha/private-page\"),\n\t\t\tselenium.getLocation());\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertPrivatePageHostURL() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"http://www.baker.com:8080/\");\n\n\t\t\t\tboolean LoggedOut = selenium.isElementPresent(\"_58_login\");\n\n\t\t\t\tif (!LoggedOut) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.type(\"//input[@id='_58_login']\",\n\t\t\t\t\tRuntimeVariables.replace(\"test@liferay.com\"));\n\t\t\t\tselenium.type(\"//input[@id='_58_password']\",\n\t\t\t\t\tRuntimeVariables.replace(\"test\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_58_rememberMeCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Remember Me Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Sign In\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 2:\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"http://www.baker.com:8080/\"), selenium.getLocation());\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Virtual Hosting Community\"),\n\t\t\t\t\tselenium.getText(\"//li[2]/span/a\"));\n\t\t\t\tassertTrue(selenium.isElementPresent(\"link=Private Page\"));\n\t\t\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"http://www.baker.com:8080/private-page\"),\n\t\t\t\t\tselenium.getLocation());\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64301,"modified_method":"public void testAssertPrivatePageHostURL() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"http://www.baker.com:8080/\");\n\n\t\t\t\tboolean LoggedOut = selenium.isElementPresent(\"_58_login\");\n\n\t\t\t\tif (!LoggedOut) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.type(\"//input[@id='_58_login']\",\n\t\t\t\t\tRuntimeVariables.replace(\"test@liferay.com\"));\n\t\t\t\tselenium.type(\"//input[@id='_58_password']\",\n\t\t\t\t\tRuntimeVariables.replace(\"test\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_58_rememberMeCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Remember Me Checkbox\"));\n\n\t\t\tcase 2:\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_58_rememberMeCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Sign In\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"http://www.baker.com:8080/\"), selenium.getLocation());\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Virtual Hosting Community\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Go to Virtual Hosting Community']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Virtual Hosting Community\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//a[contains(text(),'Virtual Hosting Community')]\"));\n\t\t\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tselenium.clickAt(\"link=Private Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Private Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"http://www.baker.com:8080/private-page\"),\n\t\t\t\t\tselenium.getLocation());\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertPublicPageFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/alpha/\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/web/alpha/\"), selenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//li[2]/span/a\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Public Page\"));\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/web/alpha/public-page\"),\n\t\t\tselenium.getLocation());\n\t}","id":64302,"modified_method":"public void testAssertPublicPageFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/alpha/\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/web/alpha/\"), selenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//span[@title='Go to Virtual Hosting Community']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[contains(text(),'Virtual Hosting Community')]\"));\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://localhost:8080/web/alpha/public-page\"),\n\t\t\tselenium.getLocation());\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertPublicPageHostURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"http://www.able.com:8080/\");\n\t\tassertEquals(RuntimeVariables.replace(\"http://www.able.com:8080/\"),\n\t\t\tselenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//li[2]/span/a\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Public Page\"));\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://www.able.com:8080/public-page\"), selenium.getLocation());\n\t}","id":64303,"modified_method":"public void testAssertPublicPageHostURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"http://www.able.com:8080/\");\n\t\tassertEquals(RuntimeVariables.replace(\"http://www.able.com:8080/\"),\n\t\t\tselenium.getLocation());\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\"//span[@title='Go to Virtual Hosting Community']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Virtual Hosting Community\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[contains(text(),'Virtual Hosting Community')]\"));\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"link=Public Page\",\n\t\t\tRuntimeVariables.replace(\"Public Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"http://www.able.com:8080/public-page\"), selenium.getLocation());\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditFriendlyURLSlashes() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/test1/test2\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request failed to complete.\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='portlet-msg-error'])[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"The friendly URL has too many slashes.\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='portlet-msg-error'])[2]\"));\n\t}","id":64304,"modified_method":"public void testEditFriendlyURLSlashes() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/test1/test2\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request failed to complete.\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='portlet-msg-error'])[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"The friendly URL has too many slashes.\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='portlet-msg-error'])[2]\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/alpha\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64305,"modified_method":"public void testEditFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/alpha\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditPrivatePageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_privateVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"www.baker.com\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64306,"modified_method":"public void testEditPrivatePageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_privateVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"www.baker.com\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditPublicPageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_publicVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"www.able.com\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64307,"modified_method":"public void testEditPublicPageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_publicVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"www.able.com\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testRestoreFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/virtual-hosting-community\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64308,"modified_method":"public void testRestoreFriendlyURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_friendlyURL']\",\n\t\t\tRuntimeVariables.replace(\"/virtual-hosting-community\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testRestorePrivatePageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_privateVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64309,"modified_method":"public void testRestorePrivatePageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_privateVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testRestorePublicPageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit Settings')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_publicVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":64310,"modified_method":"public void testRestorePublicPageURL() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\tselenium.waitForElementPresent(\n\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Edit Settings\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Edit Settings')]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_165_siteUrlLink']\",\n\t\t\t\t\"Site URL\"));\n\t\tselenium.clickAt(\"//a[@id='_165_siteUrlLink']\",\n\t\t\tRuntimeVariables.replace(\"Site URL\"));\n\t\tselenium.type(\"//input[@name='_165_publicVirtualHost']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownCommunity() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@id='_134_name']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean community1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean community2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean community3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean community4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean community5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64311,"modified_method":"public void testTearDownCommunity() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\t\t\t\tselenium.waitForElementPresent(\n\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\t\t\t\tselenium.waitForVisible(\"link=Control Panel\");\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Sites\", RuntimeVariables.replace(\"Sites\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.type(\"//input[@name='_134_keywords']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Virtual Hosting Community\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean community1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.waitForConfirmation(\n\t\t\t\t\t\"Are you sure you want to delete this? It will be deleted immediately.\");\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean community2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.waitForConfirmation(\n\t\t\t\t\t\"Are you sure you want to delete this? It will be deleted immediately.\");\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean community3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.waitForConfirmation(\n\t\t\t\t\t\"Are you sure you want to delete this? It will be deleted immediately.\");\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean community4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.waitForConfirmation(\n\t\t\t\t\t\"Are you sure you want to delete this? It will be deleted immediately.\");\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean community5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\");\n\n\t\t\t\tif (!community5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li/a[contains(.,'Delete')]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.waitForConfirmation(\n\t\t\t\t\t\"Are you sure you want to delete this? It will be deleted immediately.\");\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"e4c661790fc9d02786d095413b500632769d7ec5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    public void visitElement(PsiElement element) {\n      if (!(element instanceof PsiClass)) {\n        super.visitElement(element);\n        return;\n      }\n\n      final PsiClass aClass = (PsiClass)element;\n      if (aClass.isInterface() || aClass.isEnum() || aClass.isAnnotationType()) {\n        return;\n      }\n      if (aClass instanceof PsiTypeParameter) {\n        return;\n      }\n      if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        return;\n      }\n      if (!InheritanceUtil.isInheritor(aClass,\n                                       \"junit.framework.TestCase\")) {\n        return;\n      }\n      final String name = aClass.getName();\n      if (name == null) {\n        return;\n      }\n      if (isValid(name)) {\n        return;\n      }\n      registerClassError(aClass, name);\n    }","id":64312,"modified_method":"@Override\n    public void visitElement(PsiElement element) {\n      if (!(element instanceof PsiClass)) {\n        super.visitElement(element);\n        return;\n      }\n\n      final PsiClass aClass = (PsiClass)element;\n      if (aClass.isInterface() || aClass.isEnum() || aClass.isAnnotationType()) {\n        return;\n      }\n      if (aClass instanceof PsiTypeParameter) {\n        return;\n      }\n      if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        return;\n      }\n      if (!InheritanceUtil.isInheritor(aClass,\n                                       \"junit.framework.TestCase\")) {\n        return;\n      }\n      final String name = aClass.getName();\n      if (name == null) {\n        return;\n      }\n      if (isValid(name)) {\n        return;\n      }\n      final PsiIdentifier identifier = aClass.getNameIdentifier();\n      if (identifier == null) {\n        return;\n      }\n      if (!identifier.isPhysical()) {\n        final PsiElement navigationElement = identifier.getNavigationElement();\n        registerError(navigationElement, name);\n      }\n      else {\n        registerClassError(aClass, name);\n      }\n    }","commit_id":"28c8d7a22f1f643919b419b0657b8d33ff6f6ac0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitElement(PsiElement element) {\n      if (!(element instanceof PsiClass)) {\n        super.visitElement(element);\n        return;\n      }\n\n      final PsiClass aClass = (PsiClass)element;\n      if (aClass.isInterface() || aClass.isEnum() || aClass.isAnnotationType()) {\n        return;\n      }\n      if (aClass instanceof PsiTypeParameter) {\n        return;\n      }\n      if (aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        return;\n      }\n      if (!InheritanceUtil.isInheritor(aClass,\n                                       \"junit.framework.TestCase\")) {\n        if (!hasJUnit4TestMethods(aClass)) {\n          return;\n        }\n      }\n      final String name = aClass.getName();\n      if (name == null) {\n        return;\n      }\n      if (isValid(name)) {\n        return;\n      }\n      registerClassError(aClass, name);\n    }","id":64313,"modified_method":"@Override\n    public void visitElement(PsiElement element) {\n      if (!(element instanceof PsiClass)) {\n        super.visitElement(element);\n        return;\n      }\n\n      final PsiClass aClass = (PsiClass)element;\n      if (aClass.isInterface() || aClass.isEnum() || aClass.isAnnotationType()) {\n        return;\n      }\n      if (aClass instanceof PsiTypeParameter) {\n        return;\n      }\n      if (aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        return;\n      }\n      if (!InheritanceUtil.isInheritor(aClass,\n                                       \"junit.framework.TestCase\")) {\n        if (!hasJUnit4TestMethods(aClass)) {\n          return;\n        }\n      }\n      final String name = aClass.getName();\n      if (name == null) {\n        return;\n      }\n      if (isValid(name)) {\n        return;\n      }\n      final PsiIdentifier identifier = aClass.getNameIdentifier();\n      if (identifier == null) {\n        return;\n      }\n      if (!identifier.isPhysical()) {\n        final PsiElement navigationElement = identifier.getNavigationElement();\n        registerError(navigationElement, name);\n      }\n      else {\n        registerClassError(aClass, name);\n      }\n    }","commit_id":"28c8d7a22f1f643919b419b0657b8d33ff6f6ac0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean hasImplementation(PsiClass aClass) {\n        final ConcreteClassProcessor concreteClassProcessor =\n                new ConcreteClassProcessor(aClass);\n        return concreteClassProcessor.hasImplementation();\n    }","id":64314,"modified_method":"public static boolean hasImplementation(PsiClass aClass) {\n        final SearchScope scope = GlobalSearchScope.projectScope(aClass.getProject());\n        final Query<PsiClass> search =\n                ClassInheritorsSearch.search(aClass, scope, true, true);\n        for (PsiClass inheritor : search) {\n            if (!(inheritor.isInterface() || inheritor.isAnnotationType() ||\n                    inheritor.hasModifierProperty(PsiModifier.ABSTRACT))) {\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"34a26f2773eac5526eb512920867166ffd63a7a7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiJavaToken classNameToken =\n                    (PsiJavaToken)descriptor.getPsiElement();\n            final PsiClass innerClass = (PsiClass)classNameToken.getParent();\n            assert innerClass != null;\n            final SearchScope useScope = innerClass.getUseScope();\n            final Query<PsiReference> query =\n                    ReferencesSearch.search(innerClass, useScope);\n            final Collection<PsiReference> references = query.findAll();\n            for (final PsiReference reference : references) {\n                final PsiElement element = reference.getElement();\n                final PsiElement parent = element.getParent();\n                if (parent instanceof PsiNewExpression) {\n                    final PsiNewExpression newExpression =\n                            (PsiNewExpression)parent;\n                    final PsiExpression qualifier =\n                            newExpression.getQualifier();\n                    if (qualifier != null) {\n                        qualifier.delete();\n                    }\n                }\n            }\n            final PsiModifierList modifiers = innerClass.getModifierList();\n            modifiers.setModifierProperty(PsiModifier.STATIC, true);\n        }","id":64315,"modified_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiJavaToken classNameToken =\n                    (PsiJavaToken)descriptor.getPsiElement();\n            final PsiClass innerClass = (PsiClass)classNameToken.getParent();\n            assert innerClass != null;\n            final SearchScope useScope = innerClass.getUseScope();\n            final Query<PsiReference> query =\n                    ReferencesSearch.search(innerClass, useScope);\n            final Collection<PsiReference> references = query.findAll();\n            for (final PsiReference reference : references) {\n                final PsiElement element = reference.getElement();\n                final PsiElement parent = element.getParent();\n                if (!(parent instanceof PsiNewExpression)) {\n                    continue;\n                }\n                final PsiNewExpression newExpression =\n                        (PsiNewExpression)parent;\n                final PsiExpression qualifier =\n                        newExpression.getQualifier();\n                if (qualifier == null) {\n                    continue;\n                }\n                qualifier.delete();\n            }\n            final PsiModifierList modifiers = innerClass.getModifierList();\n            modifiers.setModifierProperty(PsiModifier.STATIC, true);\n        }","commit_id":"34a26f2773eac5526eb512920867166ffd63a7a7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitClass(@NotNull PsiClass aClass) {\n            // no call to super, so that it doesn't drill down to inner classes\n            if (aClass.getContainingClass() != null &&\n                    !aClass.hasModifierProperty(PsiModifier.STATIC)) {\n                // inner class cannot have static declarations\n                return;\n            }\n            final PsiClass[] innerClasses = aClass.getInnerClasses();\n            for (final PsiClass innerClass : innerClasses) {\n                if (!innerClass.hasModifierProperty(PsiModifier.STATIC)) {\n                    final InnerClassReferenceVisitor visitor =\n                            new InnerClassReferenceVisitor(innerClass);\n                    innerClass.accept(visitor);\n                    if (visitor.canInnerClassBeStatic()) {\n                        registerClassError(innerClass);\n                    }\n                }\n            }\n        }","id":64316,"modified_method":"public void visitClass(@NotNull PsiClass aClass) {\n            // no call to super, so that it doesn't drill down to inner classes\n            if (aClass.getContainingClass() != null &&\n                    !aClass.hasModifierProperty(PsiModifier.STATIC)) {\n                // inner class cannot have static declarations\n                return;\n            }\n            final PsiClass[] innerClasses = aClass.getInnerClasses();\n            for (final PsiClass innerClass : innerClasses) {\n                if (innerClass.hasModifierProperty(PsiModifier.STATIC)) {\n                    continue;\n                }\n                final InnerClassReferenceVisitor visitor =\n                        new InnerClassReferenceVisitor(innerClass);\n                innerClass.accept(visitor);\n                if (!visitor.canInnerClassBeStatic()) {\n                    continue;\n                }\n                registerClassError(innerClass);\n            }\n        }","commit_id":"34a26f2773eac5526eb512920867166ffd63a7a7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n        public Component getListCellRendererComponent(JList<? extends Note> list, Note note, int index,\n                boolean isSelected, boolean cellHasFocus) {\n            Component comp = defaultListCellRenderer.getListCellRendererComponent(list, note, index, isSelected, cellHasFocus);\n            if (note != null && comp instanceof JLabel) {\n                String text = note.getFirstComment().getText();\n                String userName = note.getFirstComment().getUser().getName();\n                if (userName == null || userName.isEmpty()) {\n                    userName = \"<Anonymous>\";\n                }\n                String toolTipText = userName + \" @ \" + dateFormat.format(note.getCreatedAt());\n                JLabel jlabel = (JLabel) comp;\n                jlabel.setText(note.getId() + \": \" +text);\n                ImageIcon icon;\n                if (note.getId() < 0) {\n                    icon = ICON_NEW_SMALL;\n                } else if (note.getState() == State.CLOSED) {\n                    icon = ICON_CLOSED_SMALL;\n                } else {\n                    icon = ICON_OPEN_SMALL;\n                }\n                jlabel.setIcon(icon);\n                jlabel.setToolTipText(toolTipText);\n            }\n            return comp;\n        }","id":64317,"modified_method":"@Override\n        public Component getListCellRendererComponent(JList<? extends Note> list, Note note, int index,\n                boolean isSelected, boolean cellHasFocus) {\n            Component comp = defaultListCellRenderer.getListCellRendererComponent(list, note, index, isSelected, cellHasFocus);\n            if (note != null && comp instanceof JLabel) {\n                NoteComment fstComment = note.getFirstComment();\n                JLabel jlabel = (JLabel) comp;\n                if (fstComment != null) {\n                    String text = note.getFirstComment().getText();\n                    String userName = note.getFirstComment().getUser().getName();\n                    if (userName == null || userName.isEmpty()) {\n                        userName = \"<Anonymous>\";\n                    }\n                    String toolTipText = userName + \" @ \" + dateFormat.format(note.getCreatedAt());\n                    jlabel.setToolTipText(toolTipText);\n                    jlabel.setText(note.getId() + \": \" +text);\n                } else {\n                    jlabel.setToolTipText(null);\n                    jlabel.setText(Long.toString(note.getId()));\n                }\n                ImageIcon icon;\n                if (note.getId() < 0) {\n                    icon = ICON_NEW_SMALL;\n                } else if (note.getState() == State.CLOSED) {\n                    icon = ICON_CLOSED_SMALL;\n                } else {\n                    icon = ICON_OPEN_SMALL;\n                }\n                jlabel.setIcon(icon);\n            }\n            return comp;\n        }","commit_id":"c15cbe2915be45745a73c608096045475673ea43","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Creates an instance of <tt>SimpleStatusSelectorBox<\/tt>.\n     *\n     * @param mainFrame The main application window.\n     * @param protocolProvider The protocol provider.\n     * @param accountIndex If we have more than one account for a protocol,\n     * each account has an index.\n     */\n    public SimpleStatusSelectorBox(MainFrame mainFrame,\n            ProtocolProviderService protocolProvider,\n            int accountIndex)\n    {\n        this.mainFrame = mainFrame;\n        this.protocolProvider = protocolProvider;\n        this.accountIndex = accountIndex;\n\n        String tooltip = \"<html><b>\"\n            + protocolProvider.getAccountID().getUserID()\n            + \"<\/b><br>Connecting<\/html>\";\n\n        this.setToolTipText(tooltip);\n\n        onlineItem.setName(Constants.ONLINE_STATUS);\n        offlineItem.setName(Constants.OFFLINE_STATUS);\n\n        onlineItem.addActionListener(this);\n        offlineItem.addActionListener(this);\n\n        titleLabel = new JLabel(protocolProvider.getAccountID().getUserID());\n\n        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));\n        titleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD));\n\n        this.add(titleLabel);\n        this.addSeparator();\n\n        this.add(onlineItem);\n        this.add(offlineItem);\n        \n        setSelected(offlineItem, offlineIcon);\n    }","id":64318,"modified_method":"/**\n     * Creates an instance of <tt>SimpleStatusSelectorBox<\/tt>.\n     *\n     * @param mainFrame The main application window.\n     * @param protocolProvider The protocol provider.\n     * @param accountIndex If we have more than one account for a protocol,\n     * each account has an index.\n     */\n    public SimpleStatusSelectorBox(MainFrame mainFrame,\n            ProtocolProviderService protocolProvider,\n            int accountIndex)\n    {\n        this.mainFrame = mainFrame;\n        this.protocolProvider = protocolProvider;\n        this.accountIndex = accountIndex;\n\n        String tooltip = \"<html><b>\"\n            + protocolProvider.getAccountID().getUserID()\n            + \"<\/b><br>Offline<\/html>\";\n\n        this.setToolTipText(tooltip);\n\n        onlineItem.setName(Constants.ONLINE_STATUS);\n        offlineItem.setName(Constants.OFFLINE_STATUS);\n\n        onlineItem.addActionListener(this);\n        offlineItem.addActionListener(this);\n\n        titleLabel = new JLabel(protocolProvider.getAccountID().getUserID());\n\n        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));\n        titleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD));\n\n        this.add(titleLabel);\n        this.addSeparator();\n\n        this.add(onlineItem);\n        this.add(offlineItem);\n        \n        setSelected(offlineItem, offlineIcon);\n    }","commit_id":"e2c7c5de3a480cd07ec4fef484c85f020ae3776f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Starts the timer that changes the images given by the array, thus\n     * creating an animated image that indicates that the user is connecting.\n     *\n     * @param images A <tt>BufferedImage<\/tt> array that contains all images\n     * from which to create the animated image indicating the connecting state.\n     */\n    public void startConnecting(BufferedImage[] images)\n    {\n        this.animatedImageArray = images;\n\n        this.setIcon(new ImageIcon(images[0]));\n\n        this.connecting.start();\n    }","id":64319,"modified_method":"/**\n     * Starts the timer that changes the images given by the array, thus\n     * creating an animated image that indicates that the user is connecting.\n     *\n     * @param images A <tt>BufferedImage<\/tt> array that contains all images\n     * from which to create the animated image indicating the connecting state.\n     */\n    public void startConnecting(BufferedImage[] images)\n    {\n        this.animatedImageArray = images;\n\n        this.setIcon(new ImageIcon(images[0]));\n\n        this.connecting.start();\n        \n        String tooltip = this.getToolTipText();\n        \n        tooltip = tooltip.substring(0, tooltip.lastIndexOf(\"<br>\"));\n        \n        this.setToolTipText(tooltip.concat(\"<br>Connecting\"));\n    }","commit_id":"e2c7c5de3a480cd07ec4fef484c85f020ae3776f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Stops the timer that manages the connecting animated icon.\n     */\n    public void updateStatus()\n    {\n        this.connecting.stop();\n\n        if(protocolProvider.isRegistered()) {\n            setSelected(onlineItem, onlineIcon);\n        }\n        else {\n            setSelected(offlineItem, offlineIcon);\n        }\n\n        String tooltip = this.getToolTipText();\n\n        tooltip = tooltip.substring(0, tooltip.lastIndexOf(\"<br>\"));\n\n        this.setToolTipText(tooltip.concat(\"<br>\" + onlineItem.getText()));\n    }","id":64320,"modified_method":"/**\n     * Stops the timer that manages the connecting animated icon.\n     */\n    public void updateStatus()\n    {\n        this.connecting.stop();\n\n        String tooltip = this.getToolTipText();\n        \n        tooltip = tooltip.substring(0, tooltip.lastIndexOf(\"<br>\"));\n        \n        if(protocolProvider.isRegistered()) {\n            setSelected(onlineItem, onlineIcon);\n        \n            this.setToolTipText(tooltip.concat(\"<br>\" + onlineItem.getText()));\n        }\n        else {\n            setSelected(offlineItem, offlineIcon);\n        \n            this.setToolTipText(tooltip.concat(\"<br>\" + offlineItem.getText()));\n        }        \n    }","commit_id":"e2c7c5de3a480cd07ec4fef484c85f020ae3776f","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void suggestRecentlyAddedTags(JPanel p, final AutoCompletingComboBox keys, final AutoCompletingComboBox values, List<JosmAction> tagsActions, int tagsToShow, final FocusAdapter focus) {\n        if (tagsToShow > 0 && !recentTags.isEmpty()) {\n            p.add(new JLabel(tr(\"Recently added tags\")), GBC.eol());\n            \n            int count = 1;\n            // We store the maximum number (9) of recent tags to allow dynamic change of number of tags shown in the preferences.\n            // This implies to iterate in descending order, as the oldest elements will only be removed after we reach the maximum numbern and not the number of tags to show.\n            // However, as Set does not allow to iterate in descending order, we need to copy its elements into a List we can access in reverse order.\n            List<Tag> tags = new LinkedList<Tag>(recentTags.keySet());\n            for (int i = tags.size()-1; i >= 0 && count <= tagsToShow; i--, count++) {\n                final Tag t = tags.get(i);\n                // Find and display icon\n                ImageIcon icon = MapPaintStyles.getNodeIcon(t, false); // Filters deprecated icon\n                if (icon == null) {\n                    icon = new ImageIcon(new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB));\n                }\n                GridBagConstraints gbc = new GridBagConstraints();\n                gbc.ipadx = 5;\n                p.add(new JLabel(icon), gbc);\n                // Create action for reusing the tag, with keyboard shortcut Ctrl+(1-5)\n                String actionShortcutKey = \"properties:recent:\"+count;\n                Shortcut sc = Shortcut.registerShortcut(actionShortcutKey, null, KeyEvent.VK_0+count, Shortcut.CTRL);\n                final JosmAction action = new JosmAction(actionShortcutKey, null, tr(\"Use this tag again\"), sc, false) {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        keys.getEditor().setItem(t.getKey());\n                        values.getEditor().setItem(t.getValue());\n                        // Update list of values (fix #7951) \n                        focus.focusGained(null);\n                    }\n                };\n                p.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(sc.getKeyStroke(), actionShortcutKey);\n                p.getActionMap().put(actionShortcutKey, action);\n                tagsActions.add(action);\n                // Display clickable tag\n                final JLabel tagLabel = new JLabel(\"<html>\"\n                    + \"<style>td{border:1px solid gray; font-weight:normal;}<\/style>\" \n                    + \"<table><tr><td>\" + t.toString() + \"<\/td><\/tr><\/table><\/html>\");\n                tagLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n                tagLabel.setToolTipText((String) action.getValue(Action.SHORT_DESCRIPTION));\n                tagLabel.addMouseListener(new MouseAdapter() {\n                    @Override\n                    public void mouseClicked(MouseEvent e) {\n                        action.actionPerformed(null);\n                    }\n                });\n                JPanel tagPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));\n                tagPanel.add(tagLabel);\n                p.add(tagPanel, GBC.eol());\n            }\n        }\n    }","id":64321,"modified_method":"private void suggestRecentlyAddedTags(JPanel p, final AutoCompletingComboBox keys, final AutoCompletingComboBox values, List<JosmAction> tagsActions, int tagsToShow, final FocusAdapter focus) {\n        if (tagsToShow > 0 && !recentTags.isEmpty()) {\n            p.add(new JLabel(tr(\"Recently added tags\")), GBC.eol());\n            \n            int count = 1;\n            // We store the maximum number (9) of recent tags to allow dynamic change of number of tags shown in the preferences.\n            // This implies to iterate in descending order, as the oldest elements will only be removed after we reach the maximum numbern and not the number of tags to show.\n            // However, as Set does not allow to iterate in descending order, we need to copy its elements into a List we can access in reverse order.\n            List<Tag> tags = new LinkedList<Tag>(recentTags.keySet());\n            for (int i = tags.size()-1; i >= 0 && count <= tagsToShow; i--, count++) {\n                final Tag t = tags.get(i);\n                // Find and display icon\n                ImageIcon icon = MapPaintStyles.getNodeIcon(t, false); // Filters deprecated icon\n                if (icon == null) {\n                    icon = new ImageIcon(new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB));\n                }\n                GridBagConstraints gbc = new GridBagConstraints();\n                gbc.ipadx = 5;\n                p.add(new JLabel(icon), gbc);\n                // Create action for reusing the tag, with keyboard shortcut Ctrl+(1-5)\n                String actionShortcutKey = \"properties:recent:\"+count;\n                Shortcut sc = Shortcut.registerShortcut(actionShortcutKey, null, KeyEvent.VK_0+count, Shortcut.CTRL);\n                final JosmAction action = new JosmAction(actionShortcutKey, null, tr(\"Use this tag again\"), sc, false) {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        //keys.getEditor().setItem(t.getKey());\n                        keys.setSelectedItem(t.getKey());\n                        values.getEditor().setItem(t.getValue());\n                        // Update list of values (fix #7951) \n                        focus.focusGained(null);\n                    }\n                };\n                tagsActions.add(action);\n                // Disable action if its key is already set on the object (the key being absent from the keys list for this reason\n                // performing this action leads to autocomplete to the next key (see #7671 comments)\n                for (int j = 0; j < propertyData.getRowCount(); ++j) {\n                    System.out.println(propertyData.getValueAt(j, 0));\n                    if (t.getKey().equals(propertyData.getValueAt(j, 0))) {\n                        action.setEnabled(false);\n                        break;\n                    }\n                }\n                // Create tag label\n                final JLabel tagLabel = new JLabel(\"<html>\"\n                    + \"<style>td{border:1px solid gray; font-weight:normal;}<\/style>\" \n                    + \"<table><tr><td>\" + t.toString() + \"<\/td><\/tr><\/table><\/html>\");\n                if (action.isEnabled()) {\n                    // Register action\n                    p.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(sc.getKeyStroke(), actionShortcutKey);\n                    p.getActionMap().put(actionShortcutKey, action);\n                    // Make the tag label clickable and set tooltip to the action description (this displays also the keyboard shortcut)\n                    tagLabel.setToolTipText((String) action.getValue(Action.SHORT_DESCRIPTION));\n                    tagLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n                    tagLabel.addMouseListener(new MouseAdapter() {\n                        @Override\n                        public void mouseClicked(MouseEvent e) {\n                            action.actionPerformed(null);\n                        }\n                    });\n                } else {\n                    // Disable tag label\n                    tagLabel.setEnabled(false);\n                    // Explain in the tooltip why\n                    tagLabel.setToolTipText(tr(\"The key ''{0}'' is already used\", t.getKey()));\n                }\n                // Finally add label to the resulting panel\n                JPanel tagPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));\n                tagPanel.add(tagLabel);\n                p.add(tagPanel, GBC.eol());\n            }\n        }\n    }","commit_id":"9f9c1726d606d348dc621866f67353d2e43c802f","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {\n        return getInputFactory().createXMLStreamReader(IOHelper.buffered(reader));\n    }","id":64322,"modified_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLStreamReader(IOHelper.buffered(reader));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"public XMLInputFactory getInputFactory() {\n        if (inputFactory == null) {\n            inputFactory = XMLInputFactory.newInstance();\n        }\n        return inputFactory;\n    }","id":64323,"modified_method":"public XMLInputFactory getInputFactory() {\n        if (inputFactory == null) {\n            return getXMLInputFactory();\n        }\n        return inputFactory;\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(Source in) throws XMLStreamException {\n        return getInputFactory().createXMLStreamReader(in);\n    }","id":64324,"modified_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(Source in) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            if (in instanceof DOMSource && !isWoodstox(factory)) {\n                //FIXME - if not woodstox, this will likely not work well\n                //likely should copy CXF's W3CDOM stuff\n                LOG.info(\"DOMSource is known to have issues with {0}. We suggest using Woodstox\",\n                         factory.getClass());\n            }\n            return factory.createXMLStreamReader(in);\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventReader createXMLEventReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {\n        return getInputFactory().createXMLEventReader(IOHelper.buffered(new FileInputStream(file)), IOHelper.getCharsetName(exchange));\n    }","id":64325,"modified_method":"@Converter\n    public XMLEventReader createXMLEventReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLEventReader(IOHelper.buffered(new FileInputStream(file)), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {\n        return getInputFactory().createXMLStreamReader(IOHelper.buffered(new FileInputStream(file)), IOHelper.getCharsetName(exchange));\n    }","id":64326,"modified_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLStreamReader(IOHelper.buffered(new FileInputStream(file)), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(Writer writer) throws XMLStreamException {\n        return getOutputFactory().createXMLEventWriter(IOHelper.buffered(writer));\n    }","id":64327,"modified_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(Writer writer) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            return factory.createXMLEventWriter(IOHelper.buffered(writer));\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {\n        return getInputFactory().createXMLEventReader(IOHelper.buffered(reader));\n    }","id":64328,"modified_method":"@Converter\n    public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLEventReader(IOHelper.buffered(reader));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventReader createXMLEventReader(Source in) throws XMLStreamException {\n        return getInputFactory().createXMLEventReader(in);\n    }","id":64329,"modified_method":"@Converter\n    public XMLEventReader createXMLEventReader(Source in) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            if (in instanceof DOMSource && !isWoodstox(factory)) {\n                //FIXME - if not woodstox, this will likely not work well\n                LOG.info(\"DOMSource is known to have issues with {0}. We suggest using Woodstox\",\n                         factory.getClass());\n            }\n            return factory.createXMLEventReader(in);\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"public XMLOutputFactory getOutputFactory() {\n        if (outputFactory == null) {\n            outputFactory = XMLOutputFactory.newInstance();\n        }\n        return outputFactory;\n    }","id":64330,"modified_method":"public XMLOutputFactory getOutputFactory() {\n        if (outputFactory == null) {\n            return getXMLOutputFactory();\n        }\n        return outputFactory;\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventReader createXMLEventReader(InputStream in, Exchange exchange) throws XMLStreamException {\n        return getInputFactory().createXMLEventReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange));\n    }","id":64331,"modified_method":"@Converter\n    public XMLEventReader createXMLEventReader(InputStream in, Exchange exchange) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLEventReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(OutputStream out, Exchange exchange) throws XMLStreamException {\n        return getOutputFactory().createXMLEventWriter(IOHelper.buffered(out), IOHelper.getCharsetName(exchange));\n    }","id":64332,"modified_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(OutputStream out, Exchange exchange) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            return factory.createXMLEventWriter(IOHelper.buffered(out), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {\n        return getOutputFactory().createXMLStreamWriter(result);\n    }","id":64333,"modified_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            if (result instanceof DOMResult && !isWoodstox(factory)) {\n                //FIXME - if not woodstox, this will likely not work well\n                //likely should copy CXF's W3CDOM stuff\n                LOG.info(\"DOMResult is known to have issues with {0}. We suggest using Woodstox\",\n                         factory.getClass());\n            }\n            return factory.createXMLStreamWriter(result);\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.\n     */\n    @Deprecated\n    public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n        return getInputFactory().createXMLStreamReader(IOHelper.buffered(in));\n    }","id":64334,"modified_method":"/**\n     * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.\n     */\n    @Deprecated\n    public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLStreamReader(IOHelper.buffered(in));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.\n     */\n    @Deprecated\n    public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n        return getInputFactory().createXMLEventReader(IOHelper.buffered(in));\n    }","id":64335,"modified_method":"/**\n     * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.\n     */\n    @Deprecated\n    public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLEventReader(IOHelper.buffered(in));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(String string) throws XMLStreamException {\n        return getInputFactory().createXMLStreamReader(new StringReader(string));\n    }","id":64336,"modified_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(String string) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLStreamReader(new StringReader(string));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {\n        return getOutputFactory().createXMLEventWriter(result);\n    }","id":64337,"modified_method":"@Converter\n    public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            if (result instanceof DOMResult && !isWoodstox(factory)) {\n                //FIXME - if not woodstox, this will likely not work well\n                //likely should copy CXF's W3CDOM stuff\n                LOG.info(\"DOMResult is known to have issues with {0}. We suggest using Woodstox\",\n                         factory.getClass());\n            }\n            return factory.createXMLEventWriter(result);\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(Writer writer) throws XMLStreamException {\n        return getOutputFactory().createXMLStreamWriter(IOHelper.buffered(writer));\n    }","id":64338,"modified_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(Writer writer) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            return factory.createXMLStreamWriter(IOHelper.buffered(writer));\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(InputStream in, Exchange exchange) throws XMLStreamException {\n        return getInputFactory().createXMLStreamReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange));\n    }","id":64339,"modified_method":"@Converter\n    public XMLStreamReader createXMLStreamReader(InputStream in, Exchange exchange) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLStreamReader(IOHelper.buffered(in), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream, Exchange exchange) throws XMLStreamException {\n        return getOutputFactory().createXMLStreamWriter(IOHelper.buffered(outputStream), IOHelper.getCharsetName(exchange));\n    }","id":64340,"modified_method":"@Converter\n    public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream, Exchange exchange) throws XMLStreamException {\n        XMLOutputFactory factory = getOutputFactory();\n        try {\n            return factory.createXMLStreamWriter(IOHelper.buffered(outputStream), IOHelper.getCharsetName(exchange));\n        } finally {\n            returnXMLOutputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@Converter\n    public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {\n        return getInputFactory().createXMLEventReader(reader);\n    }","id":64341,"modified_method":"@Converter\n    public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {\n        XMLInputFactory factory = getInputFactory();\n        try {\n            return factory.createXMLEventReader(reader);\n        } finally {\n            returnXMLInputFactory(factory);\n        }\n    }","commit_id":"4b03710ee5fd6353b8d01cd1a8bb2a5027ab1a85","url":"https://github.com/apache/camel"},{"original_method":"@NotNull\n  public PsiNamedElement[] getMethodVariants() {\n    final GrExpression invoked = getInvokedExpression();\n    if (!(invoked instanceof GrReferenceExpression)) return PsiMethod.EMPTY_ARRAY;\n\n    return PsiImplUtil.getMethodVariants((GrReferenceExpression) invoked);\n  }","id":64342,"modified_method":"@NotNull\n  public GroovyResolveResult[] getMethodVariants() {\n    final GrExpression invoked = getInvokedExpression();\n    if (!(invoked instanceof GrReferenceExpression)) return GroovyResolveResult.EMPTY_ARRAY;\n\n    return ((GrReferenceExpression) invoked).getSameNameVariants();\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public PsiNamedElement[] getMethodVariants() {\n    final GrCodeReferenceElement referenceElement = getReferenceElement();\n    if (referenceElement == null) return PsiMethod.EMPTY_ARRAY;\n    final GroovyResolveResult[] classResults = referenceElement.multiResolve(false);\n    List<PsiNamedElement> result = new ArrayList<PsiNamedElement>();\n    final PsiResolveHelper helper = getManager().getResolveHelper();\n    for (GroovyResolveResult classResult : classResults) {\n      final PsiElement element = classResult.getElement();\n      if (element instanceof PsiClass) {\n        final PsiMethod[] constructors = ((PsiClass) element).getConstructors();\n        for (PsiMethod constructor : constructors) {\n          if (helper.isAccessible(constructor, this, null)) {\n            result.add(constructor);\n          }\n        }\n      }\n    }\n\n    return result.toArray(new PsiNamedElement[result.size()]);\n  }","id":64343,"modified_method":"@NotNull\n  public GroovyResolveResult[] getMethodVariants() {\n    final GrCodeReferenceElement referenceElement = getReferenceElement();\n    if (referenceElement == null) return GroovyResolveResult.EMPTY_ARRAY;\n    final GroovyResolveResult[] classResults = referenceElement.multiResolve(false);\n    List<GroovyResolveResult> result = new ArrayList<GroovyResolveResult>();\n    final PsiResolveHelper helper = getManager().getResolveHelper();\n    for (GroovyResolveResult classResult : classResults) {\n      final PsiElement element = classResult.getElement();\n      if (element instanceof PsiClass) {\n        final PsiMethod[] constructors = ((PsiClass) element).getConstructors();\n        for (PsiMethod constructor : constructors) {\n          if (helper.isAccessible(constructor, this, null)) {\n            result.add(new GroovyResolveResultImpl(constructor, true));\n          }\n        }\n      }\n    }\n\n    return result.toArray(new GroovyResolveResult[result.size()]);\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void showParameterInfo(@NotNull GroovyPsiElement place, CreateParameterInfoContext context) {\n    final PsiElement parent = place.getParent();\n    PsiElement[] variants = PsiNamedElement.EMPTY_ARRAY;\n    if (parent instanceof GrCallExpression) {\n      variants = ((GrCallExpression) parent).getMethodVariants();\n    } else if (parent instanceof GrConstructorInvocation) {\n      final PsiClass clazz = ((GrConstructorInvocation) parent).getDelegatedClass();\n      if (clazz != null) {\n        variants = clazz.getConstructors();\n      }\n    } else if (parent instanceof GrApplicationStatement) {\n      final GrExpression funExpr = ((GrApplicationStatement) parent).getFunExpression();\n      if (funExpr instanceof GrReferenceExpression) {\n        variants = ResolveUtil.mapToElements(((GrReferenceExpression) funExpr).getSameNameVariants());\n      }\n    }\n    context.setItemsToShow(variants);\n    context.showHint(place, place.getTextRange().getStartOffset(), this);\n  }","id":64344,"modified_method":"public void showParameterInfo(@NotNull GroovyPsiElement place, CreateParameterInfoContext context) {\n    final PsiElement parent = place.getParent();\n    GroovyResolveResult[] variants = GroovyResolveResult.EMPTY_ARRAY;\n    if (parent instanceof GrCallExpression) {\n      variants = ((GrCallExpression) parent).getMethodVariants();\n    } else if (parent instanceof GrConstructorInvocation) {\n      final PsiClass clazz = ((GrConstructorInvocation) parent).getDelegatedClass();\n      if (clazz != null) {\n        final PsiMethod[] constructors = clazz.getConstructors();\n        variants = new GroovyResolveResult[constructors.length];\n        for (int i = 0; i < constructors.length; i++) {\n          final boolean isAccessible = com.intellij.psi.util.PsiUtil.isAccessible(constructors[i], place, null);\n          variants[i] = new GroovyResolveResultImpl(constructors[i], isAccessible);\n        }\n      }\n    } else if (parent instanceof GrApplicationStatement) {\n      final GrExpression funExpr = ((GrApplicationStatement) parent).getFunExpression();\n      if (funExpr instanceof GrReferenceExpression) {\n        variants = ((GrReferenceExpression) funExpr).getSameNameVariants();\n      }\n    }\n    context.setItemsToShow(variants);\n    context.showHint(place, place.getTextRange().getStartOffset(), this);\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Object[] getParametersForDocumentation(PsiNamedElement namedElement, ParameterInfoContext context) {\n    if (namedElement instanceof PsiMethod) {\n      return ((PsiMethod) namedElement).getParameterList().getParameters();\n    }\n\n    return ArrayUtil.EMPTY_OBJECT_ARRAY;\n  }","id":64345,"modified_method":"public Object[] getParametersForDocumentation(GroovyResolveResult resolveResult, ParameterInfoContext context) {\n    final PsiElement element = resolveResult.getElement();\n    if (element instanceof PsiMethod) {\n      return ((PsiMethod) element).getParameterList().getParameters();\n    }\n\n    return ArrayUtil.EMPTY_OBJECT_ARRAY;\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void updateParameterInfo(@NotNull GroovyPsiElement place, UpdateParameterInfoContext context) {\n    final int currIndex = getCurrentParameterIndex(place, context.getEditor().getCaretModel().getOffset());\n    context.setCurrentParameter(currIndex);\n    final Object[] objects = context.getObjectsToView();\n\n    Outer:\n    for (int i = 0; i < objects.length; i++) {\n      Object object = objects[i];\n      final PsiNamedElement namedElement = (PsiNamedElement) object;\n      if (!namedElement.isValid()) {\n        context.setUIComponentEnabled(i, false);\n      } else {\n        final PsiType[] constructorTypes = PsiUtil.getArgumentTypes(place, true);\n        final PsiType[] methodTypes = PsiUtil.getArgumentTypes(place, false);\n        if (namedElement instanceof PsiMethod) {\n          final PsiMethod method = (PsiMethod) namedElement;\n          final PsiParameter[] parameters = method.getParameterList().getParameters();\n          PsiType[] argTypes = method.isConstructor() ? constructorTypes : methodTypes;\n          if (argTypes == null) continue;\n\n          if (parameters.length <= currIndex) {\n            context.setUIComponentEnabled(i, false);\n            continue;\n          } else {\n            for (int j = 0; j < currIndex; j++) {\n              PsiType argType = argTypes[j];\n              final PsiType paramType = TypeConversionUtil.erasure(parameters[j].getType());\n              if (!TypesUtil.isAssignable(paramType, argType, place.getManager(), place.getResolveScope())) {\n                context.setUIComponentEnabled(i, false);\n                break Outer;\n              }\n            }\n          }\n\n          context.setUIComponentEnabled(i, true);\n        }\n      }\n    }\n  }","id":64346,"modified_method":"public void updateParameterInfo(@NotNull GroovyPsiElement place, UpdateParameterInfoContext context) {\n    final int currIndex = getCurrentParameterIndex(place, context.getEditor().getCaretModel().getOffset());\n    context.setCurrentParameter(currIndex);\n    final Object[] objects = context.getObjectsToView();\n\n    Outer:\n    for (int i = 0; i < objects.length; i++) {\n      final GroovyResolveResult resolveResult = (GroovyResolveResult) objects[i];\n      PsiNamedElement namedElement = (PsiNamedElement) resolveResult.getElement();\n      final PsiSubstitutor substitutor = resolveResult.getSubstitutor();\n      assert namedElement != null;\n      if (!namedElement.isValid()) {\n        context.setUIComponentEnabled(i, false);\n      } else {\n        final PsiType[] constructorTypes = PsiUtil.getArgumentTypes(place, true);\n        final PsiType[] methodTypes = PsiUtil.getArgumentTypes(place, false);\n        if (namedElement instanceof PsiMethod) {\n          final PsiMethod method = (PsiMethod) namedElement;\n          final PsiParameter[] parameters = method.getParameterList().getParameters();\n          PsiType[] argTypes = method.isConstructor() ? constructorTypes : methodTypes;\n          if (argTypes == null) continue;\n\n          if (parameters.length <= currIndex) {\n            context.setUIComponentEnabled(i, false);\n            continue;\n          } else {\n            for (int j = 0; j < currIndex; j++) {\n              PsiType argType = argTypes[j];\n              final PsiType paramType = substitutor.substitute(parameters[j].getType());\n              if (!TypesUtil.isAssignable(paramType, argType, place.getManager(), place.getResolveScope())) {\n                context.setUIComponentEnabled(i, false);\n                break Outer;\n              }\n            }\n          }\n\n          context.setUIComponentEnabled(i, true);\n        }\n      }\n    }\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void updateUI(PsiNamedElement namedElement, ParameterInfoUIContext context) {\n    CodeInsightSettings settings = CodeInsightSettings.getInstance();\n\n    if (!namedElement.isValid()) {\n      context.setUIComponentEnabled(false);\n      return;\n    }\n\n    int highlightStartOffset = -1;\n    int highlightEndOffset = -1;\n\n    StringBuffer buffer = new StringBuffer();\n\n    if (namedElement instanceof PsiMethod) {\n      final PsiMethod method = (PsiMethod) namedElement;\n      if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {\n        if (!method.isConstructor()) {\n          PsiType returnType = method.getReturnType();\n          assert returnType != null;\n          buffer.append(returnType.getPresentableText());\n          buffer.append(\" \");\n        }\n        buffer.append(namedElement.getName());\n        buffer.append(\"(\");\n      }\n\n      final int currentParameter = context.getCurrentParameterIndex();\n\n      PsiParameter[] parms = method.getParameterList().getParameters();\n      int numParams = parms.length;\n      if (numParams > 0) {\n        for (int j = 0; j < numParams; j++) {\n          PsiParameter parm = parms[j];\n\n          int startOffset = buffer.length();\n\n          if (parm.isValid()) {\n            PsiType paramType = parm.getType();\n            buffer.append(paramType.getPresentableText());\n            String name = parm.getName();\n            if (name != null) {\n              buffer.append(\" \");\n              buffer.append(name);\n            }\n          }\n\n          int endOffset = buffer.length();\n\n          if (j < numParams - 1) {\n            buffer.append(\", \");\n          }\n\n          if (context.isUIComponentEnabled() &&\n              (j == currentParameter ||\n                  (j == numParams - 1 && parm.isVarArgs() && currentParameter >= numParams)\n              )\n              ) {\n            highlightStartOffset = startOffset;\n            highlightEndOffset = endOffset;\n          }\n        }\n      } else {\n        buffer.append(\"no parameters\");\n      }\n\n      if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {\n        buffer.append(\")\");\n      }\n\n    } else if (namedElement instanceof PsiClass) {\n      buffer.append(\"no parameters\");\n    }\n\n    final boolean isDeprecated = namedElement instanceof PsiDocCommentOwner && ((PsiDocCommentOwner) namedElement).isDeprecated();\n\n    context.setupUIComponentPresentation(\n        buffer.toString(),\n        highlightStartOffset,\n        highlightEndOffset,\n        !context.isUIComponentEnabled(),\n        isDeprecated,\n        false,\n        context.getDefaultParameterColor()\n    );\n  }","id":64347,"modified_method":"public void updateUI(GroovyResolveResult resolveResult, ParameterInfoUIContext context) {\n    CodeInsightSettings settings = CodeInsightSettings.getInstance();\n\n    PsiNamedElement element = (PsiNamedElement) resolveResult.getElement();\n    assert element != null;\n    if (!element.isValid()) {\n      context.setUIComponentEnabled(false);\n      return;\n    }\n\n    int highlightStartOffset = -1;\n    int highlightEndOffset = -1;\n\n    StringBuffer buffer = new StringBuffer();\n\n    if (element instanceof PsiMethod) {\n      final PsiMethod method = (PsiMethod) element;\n      if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {\n        if (!method.isConstructor()) {\n          PsiType returnType = method.getReturnType();\n          assert returnType != null;\n          buffer.append(returnType.getPresentableText());\n          buffer.append(\" \");\n        }\n        buffer.append(element.getName());\n        buffer.append(\"(\");\n      }\n\n      final int currentParameter = context.getCurrentParameterIndex();\n\n      PsiParameter[] parms = method.getParameterList().getParameters();\n      int numParams = parms.length;\n      if (numParams > 0) {\n        for (int j = 0; j < numParams; j++) {\n          PsiParameter parm = parms[j];\n\n          int startOffset = buffer.length();\n\n          if (parm.isValid()) {\n            PsiType paramType = resolveResult.getSubstitutor().substitute(parm.getType());\n            buffer.append(paramType.getPresentableText());\n            String name = parm.getName();\n            if (name != null) {\n              buffer.append(\" \");\n              buffer.append(name);\n            }\n          }\n\n          int endOffset = buffer.length();\n\n          if (j < numParams - 1) {\n            buffer.append(\", \");\n          }\n\n          if (context.isUIComponentEnabled() &&\n              (j == currentParameter ||\n                  (j == numParams - 1 && parm.isVarArgs() && currentParameter >= numParams)\n              )\n              ) {\n            highlightStartOffset = startOffset;\n            highlightEndOffset = endOffset;\n          }\n        }\n      } else {\n        buffer.append(\"no parameters\");\n      }\n\n      if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {\n        buffer.append(\")\");\n      }\n\n    } else if (element instanceof PsiClass) {\n      buffer.append(\"no parameters\");\n    }\n\n    final boolean isDeprecated = resolveResult instanceof PsiDocCommentOwner && ((PsiDocCommentOwner) resolveResult).isDeprecated();\n\n    context.setupUIComponentPresentation(\n        buffer.toString(),\n        highlightStartOffset,\n        highlightEndOffset,\n        !context.isUIComponentEnabled(),\n        isDeprecated,\n        false,\n        context.getDefaultParameterColor()\n    );\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean dominated(PsiMethod method1, PsiMethod method2, PsiManager manager, GlobalSearchScope scope) {  //method1 has more general parameter types thn method2\n    PsiParameter[] params1 = method1.getParameterList().getParameters();\n    PsiParameter[] params2 = method2.getParameterList().getParameters();\n\n    if (params1.length < params2.length) {\n      if (params1.length == 0) return false;\n      final PsiType lastType = params1[params1.length - 1].getType(); //varargs applicability\n      return lastType instanceof PsiArrayType;\n    }\n\n    for (int i = 0; i < params2.length; i++) {\n      PsiType type1 = params1[i].getType();\n      PsiType type2 = params2[i].getType();\n      if (type1 instanceof PsiArrayType && !(type2 instanceof PsiArrayType)) {\n        type1 = ((PsiArrayType) type1).getComponentType();\n      }\n      if (!TypesUtil.isAssignable(type1, type2, manager, scope)) return false;\n    }\n\n    return true;\n  }","id":64348,"modified_method":"private boolean dominated(PsiMethod method1, PsiMethod method2, PsiManager manager, GlobalSearchScope scope) {  //method1 has more general parameter types thn method2\n    if (!method1.getName().equals(method2.getName())) return false;\n    \n    PsiParameter[] params1 = method1.getParameterList().getParameters();\n    PsiParameter[] params2 = method2.getParameterList().getParameters();\n\n    if (params1.length < params2.length) {\n      if (params1.length == 0) return false;\n      final PsiType lastType = params1[params1.length - 1].getType(); //varargs applicability\n      return lastType instanceof PsiArrayType;\n    }\n\n    for (int i = 0; i < params2.length; i++) {\n      PsiType type1 = params1[i].getType();\n      PsiType type2 = params2[i].getType();\n      if (type1 instanceof PsiArrayType && !(type2 instanceof PsiArrayType)) {\n        type1 = ((PsiArrayType) type1).getComponentType();\n      }\n      if (!TypesUtil.isAssignable(type1, type2, manager, scope)) return false;\n    }\n\n    return true;\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GroovyResolveResult[] getCandidates() {\n    if (myCandidates.size() > 0) {\n      if (myForCompletion ||\n          myArgumentTypes == null) { //should not filter\n        return myCandidates.toArray(new GroovyResolveResult[myInapplicableCandidates.size()]);\n      }\n\n      return filterCandidates();\n    }\n    return myInapplicableCandidates.toArray(new GroovyResolveResult[myInapplicableCandidates.size()]);\n  }","id":64349,"modified_method":"public GroovyResolveResult[] getCandidates() {\n    if (myCandidates.size() > 0) {\n      return filterCandidates();\n    }\n    return myInapplicableCandidates.toArray(new GroovyResolveResult[myInapplicableCandidates.size()]);\n  }","commit_id":"f782b50e1500a34cda0e7d2ef06d92c4452969a3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean seemsLikeLambda(@Nullable final PsiClass baseClass) {\n    if (baseClass == null) return false;\n\n    if (!baseClass.hasModifierProperty(PsiModifier.ABSTRACT)) return false;\n\n    boolean hasEmptyConstructor = false;\n    for (final PsiMethod method : baseClass.getConstructors()) {\n      if (method.getParameterList().getParametersCount() == 0) {\n        hasEmptyConstructor = true;\n        break;\n      }\n    }\n\n    if (!hasEmptyConstructor) return false;\n\n    boolean hasAbstract = false;\n    for (final PsiMethod method : baseClass.getMethods()) {\n      if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        hasAbstract = true;\n        break;\n      }\n    }\n\n    if (!hasAbstract) return false;\n\n    return true;\n  }","id":64350,"modified_method":"private static boolean seemsLikeLambda(@Nullable final PsiClass baseClass) {\n    if (baseClass == null) return false;\n\n    if (!baseClass.hasModifierProperty(PsiModifier.ABSTRACT)) return false;\n\n    final PsiMethod[] constructors = baseClass.getConstructors();\n    boolean hasEmptyConstructor = constructors.length == 0;\n    for (final PsiMethod method : constructors) {\n      if (method.getParameterList().getParametersCount() == 0) {\n        hasEmptyConstructor = true;\n        break;\n      }\n    }\n\n    if (!hasEmptyConstructor) return false;\n\n    boolean hasAbstract = false;\n    for (final PsiMethod method : baseClass.getMethods()) {\n      if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        hasAbstract = true;\n        break;\n      }\n    }\n\n    if (!hasAbstract) return false;\n\n    return true;\n  }","commit_id":"4650eec914306988d695442a45e9941ee8734279","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int calculateTotalConstructorCount(PsiClass aClass) {\n      return aClass.getConstructors().length;\n    }","id":64351,"modified_method":"private int calculateTotalConstructorCount(PsiClass aClass) {\n      final PsiMethod[] constructors = aClass.getConstructors();\n      if (!ignoreDeprecatedConstructors) {\n        return constructors.length;\n      }\n      int count = 0;\n      for (PsiMethod constructor : constructors) {\n        if (!constructor.isDeprecated()) {\n          count++;\n        }\n      }\n      return count;\n    }","commit_id":"feabf1200f3261ec09bfa0bc7152281e6b82d825","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n    public void testBot()\n    {\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n        String triggerPageName = getTestMethodName() + \"NewPage\";\n        getUtil().deletePage(getTestClassName(), triggerPageName);\n\n        // Verify that the Bot is stopped, if not, stop it\n        // We do this as the first thing since otherwise events could be sent to the bot which would make our\n        // assertions below false.\n        IRCBotPage page = IRCBotPage.gotoPage();\n        if (page.isBotStarted()) {\n            page.clickActionButton();\n        }\n        Assert.assertFalse(page.isBotStarted());\n\n        // Remove the Log listener archive page to start from a clean slate.\n        getUtil().deletePage(\"IRC\", \"testarchive\");\n\n        // Configure the Logging Bot Listener to log into a fixed name page so that we can easily delete that page at\n        // the test start and find it easily to assert its content below.\n        IRCBotConfigurationPage configPage = IRCBotConfigurationPage.gotoPage();\n        configPage.setLoggingPage(\"IRC.testarchive\");\n\n        // Add a Bot Listener\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\",\n            \"name\", \"Test\");\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"gotcha!\");\n\n        // Start the Bot\n        page = IRCBotPage.gotoPage();\n        // Note that starting the Bot will generate a Join Event and thanks to the Log Bot Listener, the following\n        // will be logged in the archive page: \"<XWikiBotTest> has joined #xwikitest\"\n        page.clickActionButton();\n\n        // Verify that the Bot is started\n        Assert.assertTrue(page.isBotStarted());\n\n        // Verify that our Bot listener is listed and started\n        Assert.assertTrue(page.isBotListenerStarted(\"Test\"));\n\n        // Verify that the other default Bot Listeners are listed and started too\n        Assert.assertTrue(page.isBotListenerStarted(\"Log\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"Help\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"AutoReconnect\"));\n\n        // Create a new page to verify that a message is sent to the IRC channel.\n        // We thus test the IRC Event Listener.\n        getUtil().createPage(getTestClassName(), triggerPageName, \"whatever\", \"title\");\n\n        // Simulate typing some content in the IRC Channel. This will have two effects:\n        // - the message will be logged\n        // - our test listener will send \"gotcha!\" to the IRC channel\n        //TODO: Send \"hello\"\n\n        // Verify the Archive page (this tests the Log Bot Listener).\n        // It may take some time for the IRC Server to send back the Join event thus we wait for the archive page to\n        // be created.\n        final ViewPage archivePage = getUtil().gotoPage(\"IRC\", \"testarchive\");\n        getUtil().waitUntilCondition(new ExpectedCondition<Boolean>()\n        {\n            @Override\n            public Boolean apply(WebDriver driver)\n            {\n                try {\n                    driver.navigate().refresh();\n                    return archivePage.getContent().contains(\"<XWikiBotTest> has joined #xwikitest\")\n                        && archivePage.getContent().contains(\"hello\");\n                } catch (NotFoundException e) {\n                    return false;\n                } catch (StaleElementReferenceException e) {\n                    // The element was removed from DOM in the meantime\n                    return false;\n                }\n            }\n        });\n\n        // Verify the messages sent to the IRC Server. There should be 2:\n        // - one sent by the Document Event Listener when we have created the new page\n        // - one sent by the Test Listener in response to \"hello\".\n        // TODO: verify the messages\n\n        // Stop the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is stopped again\n        Assert.assertFalse(page.isBotStarted());\n\n        // Verify that our Bot is listed and stopped. Same for the Help listener. However the other listeners are\n        // component-based and cannot be disabled.\n        Assert.assertFalse(page.isBotListenerStarted(\"Test\"));\n        Assert.assertFalse(page.isBotListenerStarted(\"Log\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"Help\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"AutoReconnect\"));\n\n        // Remove our Bot Listener\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n\n        // Verify that our Bot is no longer listed\n        //TODO\n    }","id":64352,"modified_method":"@Test\n    public void testBot()\n    {\n        // Add a Test Bot Listener\n        getUtil().addObject(getTestClassName(), LISTENER_PAGE, \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\",\n            \"name\", \"Test\");\n        getUtil().addObject(getTestClassName(), LISTENER_PAGE, \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"gotcha!\");\n\n        // Start the Bot\n        IRCBotPage page = IRCBotPage.gotoPage();\n        // Note that starting the Bot will generate a Join Event and thanks to the Log Bot Listener, the following\n        // will be logged in the archive page: \"<XWikiBotTest> has joined #xwikitest\"\n        page.clickActionButton();\n\n        // Verify that the Bot is started\n        Assert.assertTrue(page.isBotStarted());\n\n        // Verify that our Bot listener is listed and started\n        Assert.assertTrue(page.isBotListenerStarted(\"Test\"));\n\n        // Verify that the other default Bot Listeners are listed and started too\n        Assert.assertTrue(page.isBotListenerStarted(\"Log\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"Help\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"AutoReconnect\"));\n\n        // Create a new page for 2 reasons:\n        // - It allows us testing the IRC Event Listener since a message will be sent to the IRC Channel\n        // - In the content of this page we get access to the list of messages sent to the IRC channel and we can\n        //    verify that the IRC Event Listener has sent the correct message to the channel\n        final ViewPage messagesPage = getUtil().createPage(getTestClassName(), SERVER_PAGE,\n              \"{{velocity}}\\n\"\n            + \"#if (\\\"$!request.message\\\" != \\\"\\\")\\n\"\n            + \"  #set ($discard = $services.ircserver.typeInChannel($request.message))\\n\"\n            + \"#else\\n\"\n            + \"  #foreach ($message in $services.ircserver.messages)\\n\"\n            + \"    $message\\n\"\n            + \"  #end\\n\"\n            + \"#end\\n\"\n            + \"{{/velocity}}\", \"title\");\n        messagesPage.waitUntilContent(\"xwiki:\" + getTestClassName() + \"\\\\.\" + SERVER_PAGE + \" was modified by \"\n                    + \"xwiki:XWiki\\\\.superadmin \\\\(created\\\\) - .*\" + getTestClassName() + \"/\" + SERVER_PAGE);\n\n        // Simulate typing some content in the IRC Channel. This will have two effects:\n        // - the message will be logged\n        // - our test listener will send \"gotcha!\" to the IRC channel\n        getUtil().gotoPage(getTestClassName(), SERVER_PAGE, \"view\", \"message\", \"hello\");\n        getUtil().gotoPage(getTestClassName(), SERVER_PAGE);\n        messagesPage.waitUntilContent(\".*was modified by.*nick: gotcha!.*was modified.*\");\n\n        // Verify the Archive page (this tests the Log Bot Listener).\n        // It may take some time for the IRC Server to send back the events thus we wait for the archive page to\n        // be created.\n        final ViewPage archivePage = getUtil().gotoPage(getTestClassName(), ARCHIVE_PAGE);\n        archivePage.waitUntilContent(\"<nick> hello\");\n\n        // Stop the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is stopped again\n        Assert.assertFalse(page.isBotStarted());\n\n        // Verify that our Bot is listed and stopped. Same for the Help listener. However the other listeners are\n        // component-based and cannot be disabled.\n        Assert.assertFalse(page.isBotListenerStarted(\"Test\"));\n        Assert.assertFalse(page.isBotListenerStarted(\"Log\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"Help\"));\n        Assert.assertTrue(page.isBotListenerStarted(\"AutoReconnect\"));\n\n        // Remove our Bot Listener\n        getUtil().deletePage(getTestClassName(), LISTENER_PAGE);\n\n        // Verify that our Bot is no longer listed\n        //TODO\n    }","commit_id":"0d789f130ae2546f26d5348be090fdd5cd634d99","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp()\n    {\n        // Login as superadmin to have delete rights.\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n    }","id":64353,"modified_method":"@Before\n    public void setUp()\n    {\n        // Login as superadmin to have delete rights.\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n\n        // Verify that the Bot is stopped, if not, stop it\n        // We do this as the first thing since otherwise events could be sent to the bot which would make our\n        // assertions below false.\n        IRCBotPage page = IRCBotPage.gotoPage();\n        if (page.isBotStarted()) {\n            page.clickActionButton();\n        }\n        Assert.assertFalse(page.isBotStarted());\n\n        // Delete pages that we create in the test\n        getUtil().deletePage(getTestClassName(), LISTENER_PAGE);\n        getUtil().deletePage(getTestClassName(), SERVER_PAGE);\n        getUtil().deletePage(getTestClassName(), ARCHIVE_PAGE);\n\n        // Configure the Logging Bot Listener to log into a fixed name page so that we can easily delete that page at\n        // the test start and find it easily to assert its content below.\n        IRCBotConfigurationPage configPage = IRCBotConfigurationPage.gotoPage();\n        configPage.setLoggingPage(getTestClassName() + \".\" + ARCHIVE_PAGE);\n    }","commit_id":"0d789f130ae2546f26d5348be090fdd5cd634d99","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void connect(String hostname) throws IOException, IrcException\n    {\n        this.hostname = hostname;\n    }","id":64354,"modified_method":"@Override\n    public void connect(String hostname) throws IOException, IrcException\n    {\n        this.hostname = hostname;\n        // Clear the message cache on connect\n        this.messages.clear();\n    }","commit_id":"0d789f130ae2546f26d5348be090fdd5cd634d99","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public ContributionManagerDialog() {\n    font = Toolkit.getSansFont(14, Font.PLAIN);\n//    GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(myFont);\n    numberLabel = new JLabel(Toolkit.getLibIcon(\"manager/notification-\" + iconVer + \"x.png\"), SwingConstants.CENTER);\n    librariesContributionTab = new ContributionTab(ContributionType.LIBRARY, this);\n    modesContributionTab = new ContributionTab(ContributionType.MODE, this);\n    toolsContributionTab = new ContributionTab(ContributionType.TOOL, this);\n    examplesContributionTab = new ContributionTab(ContributionType.EXAMPLES, this);\n    updatesContributionTab = new UpdateContributionTab(null, this);\n  }","id":64355,"modified_method":"public ContributionManagerDialog() {\n    font = Toolkit.getSansFont(14, Font.PLAIN);\n    numberLabel = new JLabel(Toolkit.getLibIconX(\"manager/notification\"), SwingConstants.CENTER);\n    librariesContributionTab = new ContributionTab(ContributionType.LIBRARY, this);\n    modesContributionTab = new ContributionTab(ContributionType.MODE, this);\n    toolsContributionTab = new ContributionTab(ContributionType.TOOL, this);\n    examplesContributionTab = new ContributionTab(ContributionType.EXAMPLES, this);\n    updatesContributionTab = new UpdateContributionTab(null, this);\n  }","commit_id":"d66c639d165f7215925810f17ac67dfccef5b679","url":"https://github.com/processing/processing"},{"original_method":"public StatusPanel(int width, final ContributionTab contributionTab) {\n    super();\n    setBackground(new Color(0xebebeb));\n//    setBorder(BorderFactory.createMatteBorder(2, 0, 0, 0, Color.BLACK));\n    this.contributionTab = contributionTab;\n\n    iconLabel = new JLabel();\n    iconLabel.setHorizontalAlignment(SwingConstants.CENTER);\n\n    label = new JTextPane();\n    label.setEditable(false);\n    label.setOpaque(false);\n    label.setContentType(\"text/html\");\n    bodyRule = \"a, body { font-family: \" + ContributionManagerDialog.font.getFamily() + \"; \" +\n            \"font-size: \" + ContributionManagerDialog.font.getSize() + \"pt; color: black; text-decoration: none;}\";\n    label.addHyperlinkListener(new HyperlinkListener() {\n\n      @Override\n      public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n          if (e.getURL() != null) {\n            Platform.openURL(e.getURL().toString());\n          }\n        }\n      }\n    });\n    installButton = new JButton(\"Install\",\n                                Toolkit.getLibIcon(\"manager/install-\" + ContributionManagerDialog.iconVer + \"x.png\"));\n    installButton.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    installButton.setHorizontalAlignment(SwingConstants.LEFT);\n//    installButton.setContentAreaFilled(false);\n//    installButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 1),BorderFactory.createEmptyBorder(3, 0, 3, 0)));\n    installButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        installButton.setEnabled(false);\n        ContributionPanel currentPanel = contributionTab.contributionListPanel\n          .getSelectedPanel();\n        currentPanel.install();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n    progressBarPanel = new JPanel();\n    progressBarPanel.setLayout(new BorderLayout());\n    progressBarPanel.setOpaque(false);\n    updateLabel = new JLabel(\" \");\n    updateLabel.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    updateLabel.setHorizontalAlignment(SwingConstants.CENTER);\n    updateButton = new JButton(\"Update\",\n                               Toolkit.getLibIcon(\"manager/update-\" + ContributionManagerDialog.iconVer + \"x.png\"));\n    updateButton.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    updateButton.setHorizontalAlignment(SwingConstants.LEFT);\n//    updateButton.setAlignmentX(SwingConstants.LEFT);\n//    updateButton.setContentAreaFilled(false);\n//    updateButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 1),BorderFactory.createEmptyBorder(3, 0, 3, 0)));\n    updateButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        updateButton.setEnabled(false);\n        ContributionPanel currentPanel = contributionTab.contributionListPanel\n          .getSelectedPanel();\n        currentPanel.update();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n\n    removeButton = new JButton(\"Remove\",\n                               Toolkit.getLibIcon(\"manager/remove-\" + ContributionManagerDialog.iconVer + \"x.png\"));\n    removeButton.setFont(Toolkit.getSansFont(14, Font.BOLD));\n    removeButton.setHorizontalAlignment(SwingConstants.LEFT);\n//    removeButton.setContentAreaFilled(false);\n//    removeButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 1),BorderFactory.createEmptyBorder(3, 0, 3, 0)));\n    removeButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        removeButton.setEnabled(false);\n        ContributionPanel currentPanel = contributionTab.contributionListPanel\n          .getSelectedPanel();\n        currentPanel.remove();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n\n    int labelWidth = width != 0 ? width * 3 / 4 : GroupLayout.PREFERRED_SIZE;\n    layout = new GroupLayout(this);\n    this.setLayout(layout);\n\n    layout.setAutoCreateContainerGaps(true);\n    layout.setAutoCreateGaps(true);\n\n    layout.setHorizontalGroup(layout\n      .createSequentialGroup()\n      .addGap(0)\n      .addComponent(iconLabel, ContributionManagerDialog.STATUS_WIDTH, ContributionManagerDialog.STATUS_WIDTH, ContributionManagerDialog.STATUS_WIDTH)\n      .addGap(0)\n      .addComponent(label, labelWidth, labelWidth, labelWidth)\n      .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,\n                       GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)\n      .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)\n                  .addComponent(installButton, BUTTON_WIDTH, BUTTON_WIDTH,\n                                BUTTON_WIDTH)\n                  .addComponent(progressBarPanel)\n                  .addComponent(updateLabel, BUTTON_WIDTH, BUTTON_WIDTH, BUTTON_WIDTH)\n                  .addComponent(updateButton)\n                  .addComponent(removeButton)));\n\n    layout.setVerticalGroup(layout\n      .createParallelGroup(GroupLayout.Alignment.LEADING)\n      .addComponent(iconLabel)\n      .addComponent(label)\n      .addGroup(layout.createSequentialGroup()\n                  .addComponent(installButton)\n                  .addGroup(layout.createParallelGroup()\n                              .addComponent(progressBarPanel)\n                              .addComponent(updateLabel))\n                  .addComponent(updateButton).addComponent(removeButton)));\n\n    layout.linkSize(SwingConstants.HORIZONTAL, installButton, progressBarPanel,\n                    updateButton, removeButton);\n\n    progressBarPanel.setVisible(false);\n    updateLabel.setVisible(false);\n\n    installButton.setEnabled(false);\n    updateButton.setEnabled(false);\n    removeButton.setEnabled(false);\n    updateLabel.setVisible(true);\n\n    layout.setHonorsVisibility(updateLabel, false); // Makes the label take up space even though not visible\n\n    validate();\n\n  }","id":64356,"modified_method":"public StatusPanel(int width, final ContributionTab contributionTab) {\n    super();\n    setBackground(new Color(0xebebeb));\n//    setBorder(BorderFactory.createMatteBorder(2, 0, 0, 0, Color.BLACK));\n    this.contributionTab = contributionTab;\n\n    iconLabel = new JLabel();\n    iconLabel.setHorizontalAlignment(SwingConstants.CENTER);\n\n    label = new JTextPane();\n    label.setEditable(false);\n    label.setOpaque(false);\n    label.setContentType(\"text/html\");\n    bodyRule = \"a, body { font-family: \" + ContributionManagerDialog.font.getFamily() + \"; \" +\n            \"font-size: \" + ContributionManagerDialog.font.getSize() + \"pt; color: black; text-decoration: none;}\";\n    label.addHyperlinkListener(new HyperlinkListener() {\n\n      @Override\n      public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n          if (e.getURL() != null) {\n            Platform.openURL(e.getURL().toString());\n          }\n        }\n      }\n    });\n    installButton =\n      new JButton(\"Install\", Toolkit.getLibIconX(\"manager/install\"));\n    installButton.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    installButton.setHorizontalAlignment(SwingConstants.LEFT);\n//    installButton.setContentAreaFilled(false);\n//    installButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 1),BorderFactory.createEmptyBorder(3, 0, 3, 0)));\n    installButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        installButton.setEnabled(false);\n        ContributionPanel currentPanel = contributionTab.contributionListPanel\n          .getSelectedPanel();\n        currentPanel.install();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n    progressBarPanel = new JPanel();\n    progressBarPanel.setLayout(new BorderLayout());\n    progressBarPanel.setOpaque(false);\n    updateLabel = new JLabel(\" \");\n    updateLabel.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    updateLabel.setHorizontalAlignment(SwingConstants.CENTER);\n    updateButton =\n      new JButton(\"Update\", Toolkit.getLibIconX(\"manager/update\"));\n    updateButton.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    updateButton.setHorizontalAlignment(SwingConstants.LEFT);\n    updateButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        updateButton.setEnabled(false);\n        ContributionPanel currentPanel =\n          contributionTab.contributionListPanel.getSelectedPanel();\n        currentPanel.update();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n\n    removeButton =\n      new JButton(\"Remove\", Toolkit.getLibIconX(\"manager/remove\"));\n    removeButton.setFont(Toolkit.getSansFont(14, Font.BOLD));\n    removeButton.setHorizontalAlignment(SwingConstants.LEFT);\n    removeButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        removeButton.setEnabled(false);\n        ContributionPanel currentPanel =\n          contributionTab.contributionListPanel.getSelectedPanel();\n        currentPanel.remove();\n        StatusPanel.this.update(currentPanel);\n      }\n    });\n\n    int labelWidth = (width != 0) ? (3 * width / 4) : GroupLayout.PREFERRED_SIZE;\n    layout = new GroupLayout(this);\n    this.setLayout(layout);\n\n    layout.setAutoCreateContainerGaps(true);\n    layout.setAutoCreateGaps(true);\n\n    layout.setHorizontalGroup(layout\n      .createSequentialGroup()\n      .addGap(0)\n      .addComponent(iconLabel, ContributionManagerDialog.STATUS_WIDTH, ContributionManagerDialog.STATUS_WIDTH, ContributionManagerDialog.STATUS_WIDTH)\n      .addGap(0)\n      .addComponent(label, labelWidth, labelWidth, labelWidth)\n      .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,\n                       GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)\n      .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)\n                  .addComponent(installButton, BUTTON_WIDTH, BUTTON_WIDTH,\n                                BUTTON_WIDTH)\n                  .addComponent(progressBarPanel)\n                  .addComponent(updateLabel, BUTTON_WIDTH, BUTTON_WIDTH, BUTTON_WIDTH)\n                  .addComponent(updateButton)\n                  .addComponent(removeButton)));\n\n    layout.setVerticalGroup(layout\n      .createParallelGroup(GroupLayout.Alignment.LEADING)\n      .addComponent(iconLabel)\n      .addComponent(label)\n      .addGroup(layout.createSequentialGroup()\n                  .addComponent(installButton)\n                  .addGroup(layout.createParallelGroup()\n                              .addComponent(progressBarPanel)\n                              .addComponent(updateLabel))\n                  .addComponent(updateButton).addComponent(removeButton)));\n\n    layout.linkSize(SwingConstants.HORIZONTAL, installButton, progressBarPanel,\n                    updateButton, removeButton);\n\n    progressBarPanel.setVisible(false);\n    updateLabel.setVisible(false);\n\n    installButton.setEnabled(false);\n    updateButton.setEnabled(false);\n    removeButton.setEnabled(false);\n    updateLabel.setVisible(true);\n\n    layout.setHonorsVisibility(updateLabel, false); // Makes the label take up space even though not visible\n\n    validate();\n\n  }","commit_id":"d66c639d165f7215925810f17ac67dfccef5b679","url":"https://github.com/processing/processing"},{"original_method":"public UpdateContribListingPanel(ContributionTab contributionTab,\n                                     ContributionFilter filter) {\n      super.contributionTab = contributionTab;\n      super.filter = filter;\n      setOpaque(true);\n      setBackground(Color.WHITE);\n\n//      statusPlaceholder = new JPanel();\n//      statusPlaceholder.setVisible(false);\n//      status = new StatusPanel(null);\n\n      String[] colName = { \"\", \"Name\", \"Author\", \"Installed\", \"Update To\" };\n      model = new MyTableModel(){\n        @Override\n        public Class<?> getColumnClass(int columnIndex) {\n          if (columnIndex == 0) {\n            return Icon.class;\n          }\n          return String.class;\n        }\n      };\n      model.setColumnIdentifiers(colName);\n      table = new JTable(model){\n        @Override\n        public Component prepareRenderer(\n                TableCellRenderer renderer, int row, int column) {\n          Component c = super.prepareRenderer(renderer, row, column);\n          String title = (String) getValueAt(row, 1);\n          if (title.equals(\"<html><i>Library<\/i><\/html>\") || title.equals(\"<html><i>Tools<\/i><\/html>\")\n            || title.equals(\"<html><i>Modes<\/i><\/html>\") || title.equals(\"<html><i>Examples<\/i><\/html>\")) {\n            ((JComponent) c).setBorder(BorderFactory\n              .createMatteBorder(row == 0 ? 0 : 2, 0, 2, 0, Color.BLACK));\n          }\n          return c;\n        }\n        @Override\n        public void changeSelection(int rowIndex, int columnIndex,\n                                    boolean toggle, boolean extend) {\n          String title = (String) getValueAt(rowIndex, 1);\n          if(title.equals(\"<html><i>Library<\/i><\/html>\") || title.equals(\"<html><i>Tools<\/i><\/html>\")\n                          || title.equals(\"<html><i>Modes<\/i><\/html>\") || title.equals(\"<html><i>Examples<\/i><\/html>\")){\n            return;\n          }\n          super.changeSelection(rowIndex, columnIndex, toggle, extend);\n        }\n//        @Override\n//        public boolean isRowSelected(int row) {\n//          if (row == 0) {\n//            return false;\n//          }\n//          return super.isRowSelected(row);\n//        }\n      };\n      scrollPane = new JScrollPane(table);\n      table.setFillsViewportHeight(true);\n      table.setSelectionBackground(new Color(0xe0fffd));\n      table.setSelectionForeground(table.getForeground());\n      table.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n      table.setRowHeight(30);\n      table.setRowMargin(6);\n      table.getColumnModel().setColumnMargin(-1);\n      table.getColumnModel().getColumn(0).setMaxWidth(60);\n      table.setShowGrid(false);\n      table.setCellSelectionEnabled(false);\n      table.setRowSelectionAllowed(true);\n      table.setAutoCreateColumnsFromModel(true);\n      table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n      table.setDefaultRenderer(String.class, new StatusRendere());\n      table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer() {\n        @Override\n        public Component getTableCellRendererComponent(JTable table,\n                                                       Object value,\n                                                       boolean isSelected,\n                                                       boolean hasFocus, int row,\n                                                       int column) {\n          super.getTableCellRendererComponent(table, value, isSelected, hasFocus,\n                                              row, column);\n          JTableHeader tableHeader = table.getTableHeader();\n          if (tableHeader != null) {\n            setForeground(tableHeader.getForeground());\n          }\n          setIcon(getIcon(table, column));\n          setBackground(new Color(0xebebeb));\n//          setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0, Color.BLACK));\n          return this;\n        }\n      });\n\n\n      GroupLayout layout = new GroupLayout(this);\n      layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));\n      layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));\n\n      this.setLayout(layout);\n      table.setVisible(true);\n\n      panelByContribution = new TreeMap<Contribution, ContributionPanel>(new Comparator<Contribution>() {\n\n        @Override\n        public int compare(Contribution o1, Contribution o2) {\n          int val1 = 0;\n          int val2 = 0;\n          switch(o1.getType()){\n          case LIBRARY: val1 = 1;\n          break;\n          case TOOL: val1 = 2;\n          break;\n          case MODE: val1 = 3;\n          break;\n          case EXAMPLES: val1 = 4;\n          break;\n          }\n          switch(o2.getType()){\n          case LIBRARY: val2 = 1;\n          break;\n          case TOOL: val2 = 2;\n          break;\n          case MODE: val2 = 3;\n          break;\n          case EXAMPLES: val2 = 4;\n          break;\n          }\n          if(val1 == val2){\n            return o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());\n          }\n          return val1 - val2;\n        }\n      });\n\n    }","id":64357,"modified_method":"public UpdateContribListingPanel(ContributionTab contributionTab,\n                                     ContributionFilter filter) {\n      this.contributionTab = contributionTab;\n      this.filter = filter;\n\n      setOpaque(true);\n      setBackground(Color.WHITE);\n\n      model = new DefaultTableModel() {\n        @Override\n        public boolean isCellEditable(int row, int column) {\n          return false;\n        }\n\n        @Override\n        public Class<?> getColumnClass(int columnIndex) {\n          return (columnIndex == 0) ? Icon.class : String.class;\n        }\n      };\n\n      model.setColumnIdentifiers(new String[] {\n        \"\", \"Name\", \"Author\", \"Installed\", \"Update To\"\n      });\n\n      table = new JTable(model) {\n        @Override\n        public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {\n          Component c = super.prepareRenderer(renderer, row, column);\n          String title = (String) getValueAt(row, 1);\n          if (title.equals(\"<html><i>Library<\/i><\/html>\") || title.equals(\"<html><i>Tools<\/i><\/html>\")\n            || title.equals(\"<html><i>Modes<\/i><\/html>\") || title.equals(\"<html><i>Examples<\/i><\/html>\")) {\n            ((JComponent) c).setBorder(BorderFactory\n              .createMatteBorder(row == 0 ? 0 : 2, 0, 2, 0, Color.BLACK));\n          }\n          return c;\n        }\n\n        @Override\n        public void changeSelection(int rowIndex, int columnIndex,\n                                    boolean toggle, boolean extend) {\n          String title = (String) getValueAt(rowIndex, 1);\n          if (title.equals(\"<html><i>Library<\/i><\/html>\") ||\n              title.equals(\"<html><i>Tools<\/i><\/html>\") ||\n              title.equals(\"<html><i>Modes<\/i><\/html>\") ||\n              title.equals(\"<html><i>Examples<\/i><\/html>\")){\n            return;\n          }\n          super.changeSelection(rowIndex, columnIndex, toggle, extend);\n        }\n      };\n\n      scrollPane = new JScrollPane(table);\n      table.setFillsViewportHeight(true);\n      table.setSelectionBackground(new Color(0xe0fffd));\n      table.setSelectionForeground(table.getForeground());\n      table.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n      table.setRowHeight(30);\n      table.setRowMargin(6);\n      table.getColumnModel().setColumnMargin(-1);\n      table.getColumnModel().getColumn(0).setMaxWidth(60);\n      table.setShowGrid(false);\n      table.setCellSelectionEnabled(false);\n      table.setRowSelectionAllowed(true);\n      table.setAutoCreateColumnsFromModel(true);\n      table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n      table.setDefaultRenderer(String.class, new DefaultTableCellRenderer() {\n        @Override\n        public Component getTableCellRendererComponent(JTable table,\n                                                       Object value,\n                                                       boolean isSelected,\n                                                       boolean hasFocus,\n                                                       int row, int column) {\n          return super.getTableCellRendererComponent(table, value, isSelected,\n                                                     false, row, column);\n        }\n      });\n\n      table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer() {\n        @Override\n        public Component getTableCellRendererComponent(JTable table,\n                                                       Object value,\n                                                       boolean isSelected,\n                                                       boolean hasFocus, int row,\n                                                       int column) {\n          // TODO this doesn't do anything with the returned value? [fry]\n          super.getTableCellRendererComponent(table, value, isSelected,\n                                              hasFocus, row, column);\n          JTableHeader tableHeader = table.getTableHeader();\n          if (tableHeader != null) {\n            setForeground(tableHeader.getForeground());\n          }\n          setIcon(getIcon(table, column));\n          setBackground(new Color(0xebebeb));\n          return this;\n        }\n      });\n\n\n      GroupLayout layout = new GroupLayout(this);\n      layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));\n      layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));\n\n      this.setLayout(layout);\n      table.setVisible(true);\n\n      panelByContribution = new TreeMap<Contribution, ContributionPanel>(new Comparator<Contribution>() {\n\n        @Override\n        public int compare(Contribution o1, Contribution o2) {\n          int val1 = 0;\n          int val2 = 0;\n          switch(o1.getType()){\n          case LIBRARY: val1 = 1;\n          break;\n          case TOOL: val1 = 2;\n          break;\n          case MODE: val1 = 3;\n          break;\n          case EXAMPLES: val1 = 4;\n          break;\n          }\n          switch(o2.getType()){\n          case LIBRARY: val2 = 1;\n          break;\n          case TOOL: val2 = 2;\n          break;\n          case MODE: val2 = 3;\n          break;\n          case EXAMPLES: val2 = 4;\n          break;\n          }\n          if(val1 == val2){\n            return o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());\n          }\n          return val1 - val2;\n        }\n      });\n\n    }","commit_id":"d66c639d165f7215925810f17ac67dfccef5b679","url":"https://github.com/processing/processing"},{"original_method":"@Override\n    void updatePanelOrdering(Set<Contribution> contributionsSet) {\n      if(getNoOfRows() == 0){\n        contributionTab.contributionManagerDialog.numberLabel.setVisible(false);\n      }else{\n      contributionTab.contributionManagerDialog.numberLabel.setText(Integer\n        .toString(panelByContribution.size()));\n      contributionTab.contributionManagerDialog.numberLabel.setVisible(true);\n      }\n      model.getDataVector().removeAllElements();\n      model.fireTableDataChanged();\n      ContributionType temp = null;\n\n      // Avoid ugly synthesized bold\n      Font boldFont = Toolkit.getSansFont(table.getFont().getSize(), Font.BOLD);\n      String fontFace = \"<font face=\\\"\" + boldFont.getName() + \"\\\">\";\n\n      for (Contribution entry : contributionsSet) {\n        if(entry.getType() != temp){\n          temp = entry.getType();\n          model.addRow(new Object[] { null, \"<html><i>\" + temp.getTitle() + \"<\/i><\/html>\", null, null, null });\n        }\n        //TODO Make this into a function\n        StringBuilder name = new StringBuilder(\"\");\n        String authorList = entry.getAuthorList();\n        if (authorList != null) {\n          for (int i = 0; i < authorList.length(); i++) {\n\n            if (authorList.charAt(i) == '[' || authorList.charAt(i) == ']') {\n              continue;\n            }\n            if (authorList.charAt(i) == '(') {\n              i++;\n              while (authorList.charAt(i) != ')') {\n                i++;\n              }\n            } else {\n              name.append(authorList.charAt(i));\n            }\n          }\n        }\n        Icon icon = null;\n        if (entry.isInstalled()) {\n          icon = Toolkit.getLibIcon(\"manager/up-to-date-\" + ContributionManagerDialog.iconVer + \"x.png\");\n          if (contribListing.hasUpdates(entry)) {\n            icon = Toolkit.getLibIcon(\"manager/update-available-\" + ContributionManagerDialog.iconVer + \"x.png\");\n          }\n          if (!entry.isCompatible(Base.getRevision())) {\n            icon = Toolkit.getLibIcon(\"manager/incompatible-\" + ContributionManagerDialog.iconVer + \"x.png\");\n          }\n        }\n        model.addRow(new Object[] {\n            icon, \"<html>\" + fontFace + entry.getName() + \"<\/font><\/html>\", name, entry.getPrettyVersion(),\n            contributionTab.contribListing.getLatestVersion(entry) });\n      }\n     ((UpdateStatusPanel)statusPanel).update();\n    }","id":64358,"modified_method":"@Override\n    void updatePanelOrdering(Set<Contribution> contributionsSet) {\n      JLabel label = contributionTab.contributionManagerDialog.numberLabel;\n      if (getNoOfRows() == 0) {\n        label.setVisible(false);\n      } else {\n        label.setVisible(true);\n        label.setText(Integer.toString(panelByContribution.size()));\n      }\n      model.getDataVector().removeAllElements();\n      model.fireTableDataChanged();\n      ContributionType temp = null;\n\n      // Avoid ugly synthesized bold\n      Font boldFont = Toolkit.getSansFont(table.getFont().getSize(), Font.BOLD);\n      String fontFace = \"<font face=\\\"\" + boldFont.getName() + \"\\\">\";\n\n      for (Contribution entry : contributionsSet) {\n        if (entry.getType() != temp) {\n          temp = entry.getType();\n          model.addRow(new Object[] {\n            null,\n            \"<html><i>\" + temp.getTitle() + \"<\/i><\/html>\",\n            null, null, null\n          });\n        }\n        //TODO Make this into a function\n        StringBuilder name = new StringBuilder(\"\");\n        String authorList = entry.getAuthorList();\n        if (authorList != null) {\n          for (int i = 0; i < authorList.length(); i++) {\n            if (authorList.charAt(i) == '[' || authorList.charAt(i) == ']') {\n              continue;\n            }\n            if (authorList.charAt(i) == '(') {\n              i++;\n              while (authorList.charAt(i) != ')') {\n                i++;\n              }\n            } else {\n              name.append(authorList.charAt(i));\n            }\n          }\n        }\n        Icon icon = null;\n        if (entry.isInstalled()) {\n          icon = upToDateIcon;\n          if (contribListing.hasUpdates(entry)) {\n            icon = updateAvailableIcon;\n          }\n          if (!entry.isCompatible(Base.getRevision())) {\n            icon = incompatibleIcon;\n          }\n        }\n        model.addRow(new Object[] {\n          icon,\n          \"<html>\" + fontFace + entry.getName() + \"<\/font><\/html>\",\n          name,\n          entry.getPrettyVersion(),\n          contributionTab.contribListing.getLatestVersion(entry)\n        });\n      }\n      ((UpdateStatusPanel)statusPanel).update();\n    }","commit_id":"d66c639d165f7215925810f17ac67dfccef5b679","url":"https://github.com/processing/processing"},{"original_method":"protected DetectedPluginsPanel() {\n    super(PluginDownloader.class);\n    getEntryTable().setDefaultRenderer(PluginDownloader.class, new DefaultTableCellRenderer(){\n      // implements javax.swing.table.TableCellRenderer\n      public Component getTableCellRendererComponent(final JTable table, final Object value,\n                                                     final boolean isSelected, final boolean hasFocus, final int row, final int column) {\n        final Component rendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n        setText(((PluginDownloader)value).getPluginName());\n        return rendererComponent;\n      }\n    });\n    setCheckboxColumnName(\"\");\n  }","id":64359,"modified_method":"protected DetectedPluginsPanel() {\n    super(PluginDownloader.class);\n    getEntryTable().setDefaultRenderer(PluginDownloader.class, new ColoredTableCellRenderer(){\n      protected void customizeCellRenderer(final JTable table, final Object value, final boolean selected, final boolean hasFocus, final int row, final int column) {\n        final PluginDownloader downloader = (PluginDownloader)value;\n        append(downloader.getPluginName(), SimpleTextAttributes.REGULAR_ATTRIBUTES);\n        final IdeaPluginDescriptor ideaPluginDescriptor = PluginManager.getPlugin(PluginId.getId(downloader.getPluginId()));\n        final String loadedVersion = downloader.getPluginVersion();\n        if (loadedVersion != null || (ideaPluginDescriptor != null && ideaPluginDescriptor.getVersion() != null)) {\n          append(\" (\" + (ideaPluginDescriptor != null && ideaPluginDescriptor.getVersion() != null ? INSTALLED_VERSION + ideaPluginDescriptor.getVersion() + (loadedVersion != null ? \", \" : \"\") :\"\") + (loadedVersion != null ? AVAILABLE_VERSION + loadedVersion : \"\") + \")\", SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    });\n    setCheckboxColumnName(\"\");\n  }","commit_id":"ca7d36f7e23f653d96cfb0b181bb79afb06e4e48","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean prepareToInstall(ProgressIndicator pi) throws IOException {\n    IdeaPluginDescriptor ideaPluginDescriptor = null;\n    if (PluginManager.isPluginInstalled(PluginId.getId(myPluginId))) {\n      //store old plugins file\n      ideaPluginDescriptor = PluginManager.getPlugin(PluginId.getId(myPluginId));\n      LOG.assertTrue(ideaPluginDescriptor != null);\n      if (myPluginVersion != null && IdeaPluginDescriptorImpl.compareVersion(ideaPluginDescriptor.getVersion(), myPluginVersion) >= 0) return false;\n      myOldFile = ideaPluginDescriptor.getPath();\n    }\n    // download plugin\n    String errorMessage = IdeBundle.message(\"unknown.error\");\n    try {\n      myFile = downloadPlugin(pi);\n    }\n    catch (IOException ex) {\n      myFile = null;\n      errorMessage = ex.getMessage();\n    }\n    if (myFile == null) {\n      final String errorMessage1 = errorMessage;\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        public void run() {\n          Messages.showErrorDialog(IdeBundle.message(\"error.plugin.was.not.installed\", getPluginName(), errorMessage1),\n                                   IdeBundle.message(\"title.failed.to.download\"));\n        }\n      });\n      return false;\n    }\n\n    if (ideaPluginDescriptor != null) {\n      final IdeaPluginDescriptorImpl descriptor = PluginManager.loadDescriptorFromJar(myFile);\n      if (descriptor == null) return false;\n      if (IdeaPluginDescriptorImpl.compareVersion(ideaPluginDescriptor.getVersion(), descriptor.getVersion()) >= 0) return false; //was not updated\n    }\n    return true;\n  }","id":64360,"modified_method":"public boolean prepareToInstall(ProgressIndicator pi) throws IOException {\n    IdeaPluginDescriptor ideaPluginDescriptor = null;\n    if (PluginManager.isPluginInstalled(PluginId.getId(myPluginId))) {\n      //store old plugins file\n      ideaPluginDescriptor = PluginManager.getPlugin(PluginId.getId(myPluginId));\n      LOG.assertTrue(ideaPluginDescriptor != null);\n      if (myPluginVersion != null && IdeaPluginDescriptorImpl.compareVersion(ideaPluginDescriptor.getVersion(), myPluginVersion) >= 0) return false;\n      myOldFile = ideaPluginDescriptor.getPath();\n    }\n    // download plugin\n    String errorMessage = IdeBundle.message(\"unknown.error\");\n    try {\n      myFile = downloadPlugin(pi);\n    }\n    catch (IOException ex) {\n      myFile = null;\n      errorMessage = ex.getMessage();\n    }\n    if (myFile == null) {\n      final String errorMessage1 = errorMessage;\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        public void run() {\n          Messages.showErrorDialog(IdeBundle.message(\"error.plugin.was.not.installed\", getPluginName(), errorMessage1),\n                                   IdeBundle.message(\"title.failed.to.download\"));\n        }\n      });\n      return false;\n    }\n\n    final IdeaPluginDescriptorImpl descriptor = PluginManager.loadDescriptorFromJar(myFile);\n    if (descriptor != null) {\n      myPluginVersion = descriptor.getVersion();\n      if (ideaPluginDescriptor != null && IdeaPluginDescriptorImpl.compareVersion(myPluginVersion, descriptor.getVersion()) >= 0) return false; //was not updated\n    }\n    return true;\n  }","commit_id":"ca7d36f7e23f653d96cfb0b181bb79afb06e4e48","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void init() {\n      List<ModuleReference> list = new ArrayList<ModuleReference>(((GeneratorDescriptor) myModule.getModuleDescriptor()).getDepGenerators());\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new GridLayoutManager(2, 1, INSETS, -1, -1));\n\n      final JBTable table = new JBTable();\n      myPrioritiesTableModel = new GenPrioritiesTableModel();\n      table.setModel(myPrioritiesTableModel);\n      table.setTableHeader(null);\n      table.setDefaultRenderer(MappingConfig_AbstractRef.class, new RuleOperandRenderer());\n      table.setDefaultRenderer(RuleType.class,  new RuleTypeRenderer());\n\n      TableColumn column;\n      column = table.getColumnModel().getColumn(0);\n      column.setCellEditor(new RuleOperandEditor((Generator) myModule, list, true));\n      column = table.getColumnModel().getColumn(1);\n      column.setCellEditor(new RuleTypeEditor());\n      column.setMaxWidth(50);\n      column.setResizable(false);\n      column = table.getColumnModel().getColumn(2);\n      column.setCellEditor(new RuleOperandEditor((Generator) myModule, list, false));\n\n      ToolbarDecorator decorator = ToolbarDecorator.createDecorator(table);\n      decorator.setAddAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton anActionButton) {\n          myPrioritiesTableModel.addItem(new MappingRuleCreator().compute());\n          myPrioritiesTableModel.fireTableDataChanged();\n        }\n      }).setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton anActionButton) {\n          TableUtil.removeSelectedItems(table);\n          myPrioritiesTableModel.fireTableDataChanged();\n        }\n      });\n      decorator.setToolbarBorder(IdeBorderFactory.createBorder());\n      decorator.setPreferredSize(new Dimension(500, 300));\n\n      panel.add(decorator.createPanel(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n\n      myCheckBox = new JBCheckBox(PropertiesBundle.message(\"mps.properties.configurable.module.generatortab.gentempcheckbox\"), ((GeneratorDescriptor) myModule.getModuleDescriptor()).isGenerateTemplates());\n      panel.add(myCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n      \n      setTabComponent(panel);\n    }","id":64361,"modified_method":"@Override\n    public void init() {\n      List<ModuleReference> list = new ArrayList<ModuleReference>(((GeneratorDescriptor) myModule.getModuleDescriptor()).getDepGenerators());\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new GridLayoutManager(2, 1, INSETS, -1, -1));\n\n      final JBTable table = new JBTable();\n      table.setAutoscrolls(true);\n\n      myPrioritiesTableModel = new GenPrioritiesTableModel();\n      table.setModel(myPrioritiesTableModel);\n\n      for(TableColumnModelListener listener : ((DefaultTableColumnModel) table.getColumnModel()).getColumnModelListeners()) {\n        table.getColumnModel().removeColumnModelListener(listener);\n      }\n\n      table.setDefaultRenderer(RuleType.class, new RuleTypeRenderer());\n      table.setDefaultEditor(RuleType.class, new RuleTypeEditor());\n\n      table.setDefaultRenderer(MappingConfig_AbstractRef.class, new TableCellRenderer() {\n        @Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n          if (value instanceof MappingConfig_AbstractRef) {\n            MappingConfig_AbstractRef mapping = (MappingConfig_AbstractRef) value;\n\n            GeneratorPrioritiesTree tree = new GeneratorPrioritiesTree((GeneratorDescriptor) myModuleDescriptor, mapping, column == 0);\n//            if (myMappings.containsKey(mapping)) {\n//              tree = myMappings.get(mapping);\n//            }\n//            else {\n//              tree = new GeneratorPrioritiesTree((GeneratorDescriptor) myModuleDescriptor, mapping, column == 0);\n//              myMappings.put(mapping, tree);\n//            }\n\n            CheckedTreeNode rootNode = (CheckedTreeNode) tree.getTree().getModel().getRoot();\n\n            if (!tree.getTree().isRootVisible() && rootNode.getChildCount() == 1)\n              rootNode = (CheckedTreeNode) rootNode.getChildAt(0);\n\n            noCheckedChildren(rootNode);\n\n            CheckboxTree checkboxTree = new CheckboxTree(GeneratorPrioritiesTree.getCheckboxTreeCellRenderer(), rootNode, new CheckPolicy(true, true, false, true));\n            checkboxTree.setRootVisible(true);\n\n            GeneratorPrioritiesTree.expandAllRows(checkboxTree);\n\n            table.setRowHeight(\n              row, Math.max(checkboxTree.getPreferredSize().height, table.getRowHeight(row))\n            );\n            return checkboxTree;\n          }\n          return null;\n        }\n\n        private boolean noCheckedChildren(CheckedTreeNode node) {\n          List<CheckedTreeNode> children = Collections.list(node.children());\n          for (int i = 0; i < children.size(); i++) {\n            CheckedTreeNode child = children.get(i);\n            if (noCheckedChildren(child) && !child.isChecked()) {\n              node.remove(child);\n              child.removeFromParent();\n            }\n          }\n          return node.isLeaf();\n        }\n      });\n      table.setDefaultEditor(MappingConfig_AbstractRef.class, new AbstractTableCellEditor() {\n        private GeneratorPrioritiesTree myCurrentTree = null;\n        @Override\n        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {\n          if (value instanceof MappingConfig_AbstractRef) {\n            MappingConfig_AbstractRef mapping = (MappingConfig_AbstractRef) value;\n            if (myMappings.containsKey(mapping)) {\n              myCurrentTree = myMappings.get(mapping);\n            } else {\n              myCurrentTree = new GeneratorPrioritiesTree((GeneratorDescriptor) myModuleDescriptor, mapping, column == 0);\n              myMappings.put(mapping, myCurrentTree);\n            }\n\n//            table.getSize().height -;\n\n            table.setRowHeight(\n              row, myCurrentTree.getTree().getPreferredSize().height + 20\n            );\n            return ScrollPaneFactory.createScrollPane(myCurrentTree.getTree(), true);\n          }\n          return null;\n        }\n\n        @Override\n        public Object getCellEditorValue() {\n          GeneratorPrioritiesTree result = myCurrentTree;\n          myCurrentTree = null;\n          return result != null ? result.getEditResult() : null;\n        }\n      });\n\n      table.addPropertyChangeListener(\"tableCellEditor\", new PropertyChangeListener() {\n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n          if (!table.isEditing())\n            table.setRowHeight(table.getSelectedRow(), 5);\n        }\n      });\n\n\n\n      TableColumn column = table.getColumnModel().getColumn(1);\n      column.setMaxWidth(50);\n      column.setResizable(false);\n\n      ToolbarDecorator decorator = ToolbarDecorator.createDecorator(table);\n      decorator.setAddAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton anActionButton) {\n          myPrioritiesTableModel.addItem(new MappingRuleCreator().compute());\n          myPrioritiesTableModel.fireTableDataChanged();\n        }\n      }).setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton anActionButton) {\n          TableUtil.removeSelectedItems(table);\n          myPrioritiesTableModel.fireTableDataChanged();\n        }\n      });\n      decorator.setToolbarBorder(IdeBorderFactory.createBorder());\n      decorator.setPreferredSize(new Dimension(500, 300));\n\n      panel.add(decorator.createPanel(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n\n      myCheckBox = new JBCheckBox(PropertiesBundle.message(\"mps.properties.configurable.module.generatortab.gentempcheckbox\"), ((GeneratorDescriptor) myModule.getModuleDescriptor()).isGenerateTemplates());\n      panel.add(myCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n      \n      setTabComponent(panel);\n    }","commit_id":"dd58bf362c09d4141c8df9231913a26031ef5b72","url":"https://github.com/JetBrains/MPS"},{"original_method":"public GenPrioritiesTableModel() {\n        super();\n        myMappingPriorityRules = new ArrayList<MappingPriorityRule>(((GeneratorDescriptor)myModuleDescriptor).getPriorityRules());\n      }","id":64362,"modified_method":"public GenPrioritiesTableModel() {\n        super();\n        for ( MappingPriorityRule rule : ((GeneratorDescriptor)myModuleDescriptor).getPriorityRules() )\n          myMappingPriorityRules.add(rule.getCopy());\n      }","commit_id":"dd58bf362c09d4141c8df9231913a26031ef5b72","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Returns the default table header cell renderer.\n     * <P>\n     * If the column is sorted, the appropriate icon is retrieved from the\n     * current Look and Feel, and a border appropriate to a table header cell\n     * is applied.\n     * <P>\n     * Subclasses may override this method to provide custom content or\n     * formatting.\n     *\n     * @param table the <code>JTable<\/code>.\n     * @param value the value to assign to the header cell\n     * @param isSelected This parameter is ignored.\n     * @param hasFocus This parameter is ignored.\n     * @param row This parameter is ignored.\n     * @param column the column of the header cell to render\n     * @return the default table header cell renderer\n     */\n    @Override\n    public Component getTableCellRendererComponent(JTable table, Object value,\n            boolean isSelected, boolean hasFocus, int row, int column) {\n      super.getTableCellRendererComponent(table, value,\n              isSelected, hasFocus, row, column);\n      JTableHeader tableHeader = table.getTableHeader();\n      if (tableHeader != null) {\n        setForeground(tableHeader.getForeground());\n      }\n      setIcon(getIcon(table, column));\n      if (column % 2 == 0) {\n        setBackground(new Color(0xdfdfdf));\n      } else {\n        setBackground(new Color(0xebebeb));\n      }\n      setBorder(null);\n      return this;\n    }","id":64363,"modified_method":"/**\n     * Returns the default table header cell renderer.\n     * <P>\n     * If the column is sorted, the appropriate icon is retrieved from the\n     * current Look and Feel, and a border appropriate to a table header cell\n     * is applied.\n     * <P>\n     * Subclasses may override this method to provide custom content or\n     * formatting.\n     *\n     * @param table the <code>JTable<\/code>.\n     * @param value the value to assign to the header cell\n     * @param isSelected This parameter is ignored.\n     * @param hasFocus This parameter is ignored.\n     * @param row This parameter is ignored.\n     * @param column the column of the header cell to render\n     * @return the default table header cell renderer\n     */\n    @Override\n    public Component getTableCellRendererComponent(JTable table, Object value,\n            boolean isSelected, boolean hasFocus, int row, int column) {\n      super.getTableCellRendererComponent(table, value,\n              isSelected, hasFocus, row, column);\n\n      JTableHeader tableHeader = table.getTableHeader();\n      if (tableHeader != null) {\n        setForeground(tableHeader.getForeground());\n      }\n      setFont(headerFont);\n      setIcon(getSortIcon(table, column));\n      setBackground(HEADER_BGCOLOR);\n//      if (column % 2 == 0) {\n//        setBackground(new Color(0xdfdfdf));\n//      } else {\n//        setBackground(new Color(0xebebeb));\n//      }\n      setBorder(null);\n      return this;\n    }","commit_id":"aeca06109d68b7ae4e185e37fcbbde64f5fc7434","url":"https://github.com/processing/processing"},{"original_method":"/**\n     * Overloaded to return an icon suitable to the primary sorted column, or null if\n     * the column is not the primary sort key.\n     *\n     * @param table the <code>JTable<\/code>.\n     * @param column the column index.\n     * @return the sort icon, or null if the column is unsorted.\n     */\n    protected Icon getIcon(JTable table, int column) {\n      SortKey sortKey = getSortKey(table, column);\n      if (sortKey != null && table.convertColumnIndexToView(sortKey.getColumn()) == column) {\n        switch (sortKey.getSortOrder()) {\n          case ASCENDING:\n            return UIManager.getIcon(\"Table.ascendingSortIcon\");\n          case DESCENDING:\n            return UIManager.getIcon(\"Table.descendingSortIcon\");\n        }\n      }\n      return null;\n    }","id":64364,"modified_method":"/**\n     * Overloaded to return an icon suitable to the primary sorted column, or null if\n     * the column is not the primary sort key.\n     *\n     * @param table the <code>JTable<\/code>.\n     * @param column the column index.\n     * @return the sort icon, or null if the column is unsorted.\n     */\n    protected Icon getSortIcon(JTable table, int column) {\n      SortKey sortKey = getSortKey(table, column);\n      if (sortKey != null && table.convertColumnIndexToView(sortKey.getColumn()) == column) {\n        switch (sortKey.getSortOrder()) {\n          case ASCENDING:\n            return UIManager.getIcon(\"Table.ascendingSortIcon\");\n          case DESCENDING:\n            return UIManager.getIcon(\"Table.descendingSortIcon\");\n        }\n      }\n      return null;\n    }","commit_id":"aeca06109d68b7ae4e185e37fcbbde64f5fc7434","url":"https://github.com/processing/processing"},{"original_method":"public ListPanel() {\n    if (upToDateIcon == null) {\n      upToDateIcon = Toolkit.getLibIconX(\"manager/up-to-date\");\n      updateAvailableIcon = Toolkit.getLibIconX(\"manager/update-available\");\n      incompatibleIcon = Toolkit.getLibIconX(\"manager/incompatible\");\n      foundationIcon = Toolkit.getLibIconX(\"icons/foundation\", 16);\n\n      plainFont = Toolkit.getSansFont(14, Font.PLAIN);\n      boldFont = Toolkit.getSansFont(14, Font.BOLD);\n    }\n  }","id":64365,"modified_method":"public ListPanel() {\n    if (upToDateIcon == null) {\n      upToDateIcon = Toolkit.getLibIconX(\"manager/up-to-date\");\n      updateAvailableIcon = Toolkit.getLibIconX(\"manager/update-available\");\n      incompatibleIcon = Toolkit.getLibIconX(\"manager/incompatible\");\n      foundationIcon = Toolkit.getLibIconX(\"icons/foundation\", 16);\n\n      plainFont = Toolkit.getSansFont(14, Font.PLAIN);\n      boldFont = Toolkit.getSansFont(14, Font.BOLD);\n      headerFont = Toolkit.getSansFont(12, Font.PLAIN);\n    }\n  }","commit_id":"aeca06109d68b7ae4e185e37fcbbde64f5fc7434","url":"https://github.com/processing/processing"},{"original_method":"public UpdateListPanel(ContributionTab contributionTab,\n                         Contribution.Filter filter) {\n    this.contributionTab = contributionTab;\n    this.filter = filter;\n\n    setOpaque(true);\n    setBackground(Color.WHITE);\n\n    model = new DefaultTableModel() {\n      @Override\n      public boolean isCellEditable(int row, int column) {\n        return false;\n      }\n\n      @Override\n      public Class<?> getColumnClass(int columnIndex) {\n        return (columnIndex == 0) ? Icon.class : String.class;\n      }\n    };\n\n    model.setColumnIdentifiers(new String[] {\n      \"\", \"Name\", \"Author\", \"Installed\", \"Available\"\n    });\n\n    table = new JTable(model) {\n      @Override\n      public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {\n        Component c = super.prepareRenderer(renderer, row, column);\n        String title = (String) getValueAt(row, 1);\n        if (sectionNames.contains(title)) {\n          c.setBackground(SECTION_COLOR);\n        } else {\n          c.setBackground(Color.WHITE);\n        }\n        return c;\n      }\n\n      @Override\n      public void changeSelection(int rowIndex, int columnIndex,\n                                  boolean toggle, boolean extend) {\n        String title = (String) getValueAt(rowIndex, 1);\n        // Disallow selection on the fake rows\n        if (!sectionNames.contains(title)) {\n          super.changeSelection(rowIndex, columnIndex, toggle, extend);\n        }\n      }\n    };\n\n    scrollPane = new JScrollPane(table);\n    scrollPane.setBorder(BorderFactory.createEmptyBorder());\n\n    table.setFillsViewportHeight(true);\n    table.setSelectionBackground(new Color(0xe0fffd));\n    table.setSelectionForeground(table.getForeground());\n    table.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    table.setRowHeight(30);\n    table.setRowMargin(6);\n    table.getColumnModel().setColumnMargin(-1);\n    table.getColumnModel().getColumn(0).setMaxWidth(60);\n    table.setShowGrid(false);\n    table.setCellSelectionEnabled(false);\n    table.setRowSelectionAllowed(true);\n    table.setAutoCreateColumnsFromModel(true);\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n    table.setDefaultRenderer(String.class, new DefaultTableCellRenderer() {\n      @Override\n      public Component getTableCellRendererComponent(JTable table,\n                                                     Object value,\n                                                     boolean isSelected,\n                                                     boolean hasFocus,\n                                                     int row, int column) {\n        return super.getTableCellRendererComponent(table, value, isSelected,\n                                                   false, row, column);\n      }\n    });\n\n    table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer() {\n      @Override\n      public Component getTableCellRendererComponent(JTable table,\n                                                     Object value,\n                                                     boolean isSelected,\n                                                     boolean hasFocus, int row,\n                                                     int column) {\n        // TODO this doesn't do anything with the returned value? [fry]\n        super.getTableCellRendererComponent(table, value, isSelected,\n                                            hasFocus, row, column);\n        JTableHeader tableHeader = table.getTableHeader();\n        if (tableHeader != null) {\n          setForeground(tableHeader.getForeground());\n        }\n        setIcon(getIcon(table, column));\n        setBackground(new Color(0xebebeb));\n        return this;\n      }\n    });\n\n    GroupLayout layout = new GroupLayout(this);\n    layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));\n    layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));\n\n    setLayout(layout);\n    table.setVisible(true);\n\n    panelByContribution = new TreeMap<Contribution, DetailPanel>(new Comparator<Contribution>() {\n      @Override\n      public int compare(Contribution o1, Contribution o2) {\n        int diff =\n          ContributionManager.getTypeIndex(o1.getType()) -\n          ContributionManager.getTypeIndex(o2.getType());\n        if (diff == 0) {\n          diff = o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());\n        }\n        return diff;\n      }\n    });\n  }","id":64366,"modified_method":"public UpdateListPanel(ContributionTab contributionTab,\n                         Contribution.Filter filter) {\n    this.contributionTab = contributionTab;\n    this.filter = filter;\n\n    setOpaque(true);\n    setBackground(Color.WHITE);\n\n    model = new DefaultTableModel() {\n      @Override\n      public boolean isCellEditable(int row, int column) {\n        return false;\n      }\n\n      @Override\n      public Class<?> getColumnClass(int columnIndex) {\n        return (columnIndex == 0) ? Icon.class : String.class;\n      }\n    };\n\n    model.setColumnIdentifiers(new String[] {\n      \"\", \"Name\", \"Author\", \"Installed\", \"Available\"\n    });\n\n    table = new JTable(model) {\n      @Override\n      public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {\n        Component c = super.prepareRenderer(renderer, row, column);\n        String title = (String) getValueAt(row, 1);\n        if (sectionNames.contains(title)) {\n          c.setBackground(SECTION_COLOR);\n        } else {\n          c.setBackground(Color.WHITE);\n        }\n        return c;\n      }\n\n      @Override\n      public void changeSelection(int rowIndex, int columnIndex,\n                                  boolean toggle, boolean extend) {\n        String title = (String) getValueAt(rowIndex, 1);\n        // Disallow selection on the fake rows\n        if (!sectionNames.contains(title)) {\n          super.changeSelection(rowIndex, columnIndex, toggle, extend);\n        }\n      }\n    };\n\n    scrollPane = new JScrollPane(table);\n    scrollPane.setBorder(BorderFactory.createEmptyBorder());\n\n    table.setFillsViewportHeight(true);\n    table.setSelectionBackground(new Color(0xe0fffd));\n    table.setSelectionForeground(table.getForeground());\n    table.setFont(Toolkit.getSansFont(14, Font.PLAIN));\n    table.setRowHeight(30);\n    table.setRowMargin(6);\n    table.getColumnModel().setColumnMargin(-1);\n    table.getColumnModel().getColumn(0).setMaxWidth(60);\n    table.setShowGrid(false);\n    table.setCellSelectionEnabled(false);\n    table.setRowSelectionAllowed(true);\n    table.setAutoCreateColumnsFromModel(true);\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n    table.setDefaultRenderer(String.class, new DefaultTableCellRenderer() {\n      @Override\n      public Component getTableCellRendererComponent(JTable table,\n                                                     Object value,\n                                                     boolean isSelected,\n                                                     boolean hasFocus,\n                                                     int row, int column) {\n        return super.getTableCellRendererComponent(table, value, isSelected,\n                                                   false, row, column);\n      }\n    });\n\n    table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer()); /* {\n      @Override\n      public Component getTableCellRendererComponent(JTable table,\n                                                     Object value,\n                                                     boolean isSelected,\n                                                     boolean hasFocus, int row,\n                                                     int column) {\n        super.getTableCellRendererComponent(table, value, isSelected,\n                                            hasFocus, row, column);\n        JTableHeader tableHeader = table.getTableHeader();\n        if (tableHeader != null) {\n          setForeground(tableHeader.getForeground());\n        }\n        setIcon(getSortIcon(table, column));\n        setBackground(new Color(0xebebeb));\n        return this;\n      }\n    });*/\n\n    GroupLayout layout = new GroupLayout(this);\n    layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));\n    layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));\n\n    setLayout(layout);\n    table.setVisible(true);\n\n    panelByContribution = new TreeMap<Contribution, DetailPanel>(new Comparator<Contribution>() {\n      @Override\n      public int compare(Contribution o1, Contribution o2) {\n        int diff =\n          ContributionManager.getTypeIndex(o1.getType()) -\n          ContributionManager.getTypeIndex(o2.getType());\n        if (diff == 0) {\n          diff = o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());\n        }\n        return diff;\n      }\n    });\n  }","commit_id":"aeca06109d68b7ae4e185e37fcbbde64f5fc7434","url":"https://github.com/processing/processing"},{"original_method":"public void testAddNullChoicePoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Title\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Title\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Description\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter valid choices.\"));\n\t}","id":64367,"modified_method":"public void testAddNullChoicePoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Title\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Description\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Choice Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter valid choices.\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullDescriptionPoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Title\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Title\"));\n\t\tselenium.type(\"_25_description_en_US\", RuntimeVariables.replace(\"\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid description.\"));\n\t}","id":64368,"modified_method":"public void testAddNullDescriptionPoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Title\"));\n\t\tselenium.type(\"_25_description_en_US\", RuntimeVariables.replace(\"\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Description Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid description.\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullTitlePoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Description\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Description\"));\n\t\tselenium.type(\"_25_title_en_US\", RuntimeVariables.replace(\"\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid title.\"));\n\t}","id":64369,"modified_method":"public void testAddNullTitlePoll() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Description\"));\n\t\tselenium.type(\"_25_title_en_US\", RuntimeVariables.replace(\"\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Null Title Poll Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid title.\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddQuestion2() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question 2\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question 2\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"This is a test poll 2 description!\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptionc_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Poll Question 2\"));\n\t}","id":64370,"modified_method":"public void testAddQuestion2() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question 2\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"This is a test poll 2 description.\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptionc_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Test Poll Question 2\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"This is a test poll description!\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptionc_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Poll Question\"));\n\t}","id":64371,"modified_method":"public void testAddQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Poll Question\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"This is a test poll description.\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptionc_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Test Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Test Poll Question\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddVote() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Poll Question\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_25_choiceId\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Vote']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"100%\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"link=1\"));\n\t}","id":64372,"modified_method":"public void testAddVote() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Poll Question\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_25_choiceId\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Vote']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"100%\"),\n\t\t\tselenium.getText(\"//tr[2]/td[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"1\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertDeleteChoice() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice Title Test\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice Title Test\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice Description Test\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice C\"));\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice D\"));\n\t\tselenium.type(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice D\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_choiceDescriptione_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice E\"));\n\t\tselenium.type(\"_25_choiceDescriptione_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice E\"));\n\t\tassertEquals(\"Delete Choice C\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptionc_en_US\"));\n\t\tassertEquals(\"Delete Choice D\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptiond_en_US\"));\n\t\tassertEquals(\"Delete Choice E\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptione_en_US\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"_25_choiceDescriptionc_en_US\"));\n\t\tassertEquals(\"Delete Choice D\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptiond_en_US\"));\n\t\tassertEquals(\"Delete Choice E\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptione_en_US\"));\n\t}","id":64373,"modified_method":"public void testAssertDeleteChoice() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Question']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice Title Test\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice Description Test\"));\n\t\tselenium.type(\"_25_choiceDescriptiona_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice A\"));\n\t\tselenium.type(\"_25_choiceDescriptionb_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice B\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_choiceDescriptionc_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice C\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice D\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_choiceDescriptione_en_US\",\n\t\t\tRuntimeVariables.replace(\"Delete Choice E\"));\n\t\tassertEquals(\"Delete Choice C\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptionc_en_US\"));\n\t\tassertEquals(\"Delete Choice D\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptiond_en_US\"));\n\t\tassertEquals(\"Delete Choice E\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptione_en_US\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Delete']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(\"Delete Choice D\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptiond_en_US\"));\n\t\tassertEquals(\"Delete Choice E\",\n\t\t\tselenium.getValue(\"_25_choiceDescriptione_en_US\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertExpiredQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"//label[1]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[2]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[3]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[4]/input\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Voting is disabled because this poll expired on 1/1/08 12:00 AM\"));\n\t}","id":64374,"modified_method":"public void testAssertExpiredQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isElementPresent(\"//label[1]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[2]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[3]/input\"));\n\t\tassertFalse(selenium.isElementPresent(\"//label[4]/input\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Voting is disabled because this poll expired on 1/1/08 12:00 AM..\"),\n\t\t\tselenium.getText(\"//div[5]\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testControlPanel() throws Exception {\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":64375,"modified_method":"public void testControlPanel() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//body/div[2]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//body/div[2]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Edited Test Question 2\"));\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Edited Test Question 2\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"This is an edited test poll 2 description!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptiond_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.typeKeys(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"NEW Test Choice D\"));\n\t\tselenium.type(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"NEW Test Choice D\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"NEW Test Choice D\"));\n\t}","id":64376,"modified_method":"public void testEditQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[4]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[4]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_25_title_en_US\",\n\t\t\tRuntimeVariables.replace(\"Edited Test Question 2\"));\n\t\tselenium.type(\"_25_description_en_US\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"This is an edited test poll 2 description.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Choice']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_choiceDescriptiond_en_US\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_25_choiceDescriptiond_en_US\",\n\t\t\tRuntimeVariables.replace(\"NEW Test Choice D\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"d. NEW Test Choice D\"),\n\t\t\tselenium.getText(\"//label[4]\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testExpireQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//label[1]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[2]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[3]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[4]/input\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Cancel']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//body/div[2]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//body/div[2]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_25_neverExpireCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_expirationDateMonth\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_25_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_25_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=1\"));\n\t\tselenium.select(\"_25_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2008\"));\n\t\tselenium.select(\"_25_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_25_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.select(\"_25_expirationDateAmPm\",\n\t\t\tRuntimeVariables.replace(\"label=AM\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","id":64377,"modified_method":"public void testExpireQuestion() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edited Test Question 2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//label[1]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[2]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[3]/input\"));\n\t\tassertTrue(selenium.isElementPresent(\"//label[4]/input\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Cancel']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[4]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[4]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_25_neverExpireCheckbox\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_25_expirationDateMonth\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"_25_expirationDateYear\",\n\t\t\tRuntimeVariables.replace(\"label=2008\"));\n\t\tselenium.select(\"_25_expirationDateMonth\",\n\t\t\tRuntimeVariables.replace(\"label=January\"));\n\t\tselenium.select(\"_25_expirationDateDay\",\n\t\t\tRuntimeVariables.replace(\"label=1\"));\n\t\tselenium.select(\"_25_expirationDateHour\",\n\t\t\tRuntimeVariables.replace(\"label=12\"));\n\t\tselenium.select(\"_25_expirationDateMinute\",\n\t\t\tRuntimeVariables.replace(\"label=:00\"));\n\t\tselenium.select(\"_25_expirationDateAmPm\",\n\t\t\tRuntimeVariables.replace(\"label=AM\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDown() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean Question1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tif (!Question1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//body/div[2]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//body/div[2]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean Question2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tif (!Question2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//body/div[2]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//body/div[2]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64378,"modified_method":"public void testTearDown() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Polls\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Polls\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean Question1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tif (!Question1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[4]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[4]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean Question2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tif (!Question2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[5]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[4]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[4]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"5431a799e90a6d8f5ecb51c09acc0250e15da4ea","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddDuplicateTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Folder\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Folder\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Duplicate Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a unique folder name.\"));\n\t}","id":64379,"modified_method":"public void testAddDuplicateTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Folder1\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Duplicate Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a unique folder name.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddDuplicateTitleImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_file\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image.jpg\"));\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Image\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Image\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t}","id":64380,"modified_method":"public void testAddDuplicateTitleImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_file\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image.jpg\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Image1\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Folder\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Folder\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test folder!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test Folder\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test folder!\"));\n\t}","id":64381,"modified_method":"public void testAddFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Folder1\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test1 Folder1.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test1 Folder1\\nThis is Test1 Folder1.\"),\n\t\t\tselenium.getText(\"//td[1]/a[1]\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddImageNameTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Image.jpg\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Image.jpg\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Image Name Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a unique folder name.\"));\n\t}","id":64382,"modified_method":"public void testAddImageNameTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Image1.jpg\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Image Name Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a unique folder name.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image.jpg\"));\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Image\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Image\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is the Liferay logo!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test Image\"));\n\t\tassertTrue(selenium.isTextPresent(\"Showing 1 result.\"));\n\t}","id":64383,"modified_method":"public void testAddImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image.jpg\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Image1\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test1 Image1.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Test1 Image1\"),\n\t\t\tselenium.getText(\"//form[2]/div[3]/div/div[1]\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddInvalidTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"!@#$%^&amp;*\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"!@#$%^&amp;*\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Invaild Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid name.\"));\n\t}","id":64384,"modified_method":"public void testAddInvalidTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"!@#$%^&amp;*\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Invaild Title Folder Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid name.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMoveFolders() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test3 Folder3\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test3 Folder3\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test3 folder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test3 Folder3\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 folder3.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//tr[4]/td[1]/a/b\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test3 Subfolder3\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test3 Subfolder3\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test3 subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test3 Subfolder3\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\t}","id":64385,"modified_method":"public void testAddMoveFolders() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test3 Folder3\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test3 Folder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test3 Folder3\\nThis is Test3 Folder3.\"),\n\t\t\tselenium.getText(\"//tr[4]/td[1]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test3 Subfolder3\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test3 Subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test3 Subfolder3\\nThis is Test3 Subfolder3.\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_file\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_31_file\", RuntimeVariables.replace(\"\"));\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Null Image Test\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Null Image Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t}","id":64386,"modified_method":"public void testAddNullImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_file\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"_31_file\", RuntimeVariables.replace(\"\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Null Image Test\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNullTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Null Title Folder Test\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Null Title Folder Test\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid name.\"));\n\t}","id":64387,"modified_method":"public void testAddNullTitleFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"Null Title Folder Test\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"You have entered invalid data. Please try again.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Please enter a valid name.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_88_name_en_US\",\n\t\t\tRuntimeVariables.replace(\"Image Galler Test Page\"));\n\t\tselenium.type(\"_88_name_en_US\",\n\t\t\tRuntimeVariables.replace(\"Image Gallery Test Page\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Page']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","id":64388,"modified_method":"public void testAddPage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_145_myPlacesContainer']/ul/li[2]/a/span[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@id='_88_layoutsTreeOutput']/ul/li/a/span\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_88_name_en_US\",\n\t\t\tRuntimeVariables.replace(\"Image Gallery Test Page\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Page']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Application\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Application\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='ContentManagement-ImageGallery']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id='ContentManagement-ImageGallery']/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//input[@value='Add Folder']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":64389,"modified_method":"public void testAddPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"_145_addApplication\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@id='ContentManagement-ImageGallery']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//div[@id='ContentManagement-ImageGallery']/p/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//td[1]/div[1]/div\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isElementPresent(\"//td[1]/div[1]/div\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Folder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test2 Folder2\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Folder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test2 folder2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Folder2\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test2 folder2!\"));\n\t}","id":64390,"modified_method":"public void testAddSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Folder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a Test2 Folder2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test2 Folder2\\nThis is a Test2 Folder2.\"),\n\t\t\tselenium.getText(\"//tr[4]/td[1]/a\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image_2.jpg\"));\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test2 Image2\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Image2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is the Liferay2 logo2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Image2\"));\n\t\tassertTrue(selenium.isTextPresent(\"Showing 1 result.\"));\n\t}","id":64391,"modified_method":"public void testAddSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Add Image']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Use the classic uploader.\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"link=Use the classic uploader.\");\n\t\tselenium.type(\"_31_file\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\imagegallery\\\\test_image_2.jpg\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Image2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test2 Image2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test2 Image2. This is Test2 Image2.']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Test2 Image2\"),\n\t\t\tselenium.getText(\"//form[2]/div[3]/div/div[1]\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Subfolder2\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Subfolder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test2 subfolder2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Subfolder2\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test2 subfolder2!\"));\n\t}","id":64392,"modified_method":"public void testAddSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Subfolder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test2 Subfolder2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test2 Subfolder2\\nThis is Test2 Subfolder2.\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\", RuntimeVariables.replace(\"Test Subfolder\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test Subfolder\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test subfolder!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test Subfolder\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test subfolder!\"));\n\t}","id":64393,"modified_method":"public void testAddSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Add Subfolder']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test1 Subfolder1\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Test1 Subfolder1.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test1 Subfolder1\\nThis is Test1 Subfolder1.\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAssertImportLAR() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test folder!\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 folder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test subfolder!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//div[1]/span[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t}","id":64394,"modified_method":"public void testAssertImportLAR() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test folder!\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 folder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test subfolder!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test Image. This is the Liferay logo!']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testBrowseImageTabs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=My Images\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Recent Images\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t}","id":64395,"modified_method":"public void testBrowseImageTabs() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=My Images\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Recent Images\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteFolders() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"link=Image Gallery Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"link=Image Gallery Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean TestFolderAPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderAPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\t\t\"Your request processed successfully.\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean TestFolderBPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderBPresent) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\t\t\"Your request processed successfully.\"));\n\n\t\t\tcase 3:\n\t\t\t\tassertFalse(selenium.isTextPresent(\"This is a test folder!\"));\n\t\t\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\t\t\"This is a second test folder.\"));\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64396,"modified_method":"public void testDeleteFolders() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Test1 Folder1\\nThis is Test1 Folder1.\"));\n\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Test3 Folder3\\nThis is Test3 Folder3.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Folder2\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test2 folder2!\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Folder2 Edit2\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test2 folder2 edit2!\"));\n\t}","id":64397,"modified_method":"public void testDeleteSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Edited Test2 Folder2\\nThis is a Edited Test2 Folder2.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Image']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Image2\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Image2 Edit2\"));\n\t}","id":64398,"modified_method":"public void testDeleteSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\n\t\t\t\"//img[@alt='Edited Test2 Image2. This is Edited Test2 Image2.']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Edited Test2 Image2\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Edited Test2 Image2. This is Edited Test2 Image2.']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Subfolder2\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test2 subfolder2 edit2!\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test2 Subfolder2 Edit2\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test2 subfolder2!\"));\n\t}","id":64399,"modified_method":"public void testDeleteSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Delete\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Delete\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Edited Test2 Subfolder2\\nThis is Edited Test2 Subfolder2.\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Folder2 Edit2\"));\n\t\tselenium.type(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Folder2 Edit2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test2 folder2 edit2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Folder2 Edit2\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test2 folder2 edit2!\"));\n\t}","id":64400,"modified_method":"public void testEditSecondFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/ul/li/strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Edited Test2 Folder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a Edited Test2 Folder2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Edited Test2 Folder2\\nThis is a Edited Test2 Folder2.\"),\n\t\t\tselenium.getText(\"//tr[4]/td[1]/a\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Image']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Image2 Edit2\"));\n\t\tselenium.type(\"_31_name\", RuntimeVariables.replace(\"Test2 Image2 Edit2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is the Liferay2 logo2 Edit2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Image2 Edit2\"));\n\t}","id":64401,"modified_method":"public void testEditSecondImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Test2 Image2. This is Test2 Image2.']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Edited Test2 Image2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Edited Test2 Image2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Edited Test2 Image2\"),\n\t\t\tselenium.getText(\"//form[2]/div[3]/div/div[1]\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Subfolder2 Edit2\"));\n\t\tselenium.type(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Test2 Subfolder2 Edit2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is a test2 subfolder2 edit2!\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertTrue(selenium.isTextPresent(\"Test2 Subfolder2 Edit2\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test2 subfolder2 edit2!\"));\n\t}","id":64402,"modified_method":"public void testEditSecondSubfolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_name\",\n\t\t\tRuntimeVariables.replace(\"Edited Test2 Subfolder2\"));\n\t\tselenium.type(\"_31_description\",\n\t\t\tRuntimeVariables.replace(\"This is Edited Test2 Subfolder2.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Edited Test2 Subfolder2\\nThis is Edited Test2 Subfolder2.\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testImageEditting() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Image']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Close\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isElementPresent(\"link=Edit\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Permissions\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Delete\"));\n\t\tselenium.click(\"link=Close\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Image']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Image']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(5000);\n\t\tassertFalse(selenium.isElementPresent(\"link=Edit\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Permissions\"));\n\t\tassertFalse(selenium.isElementPresent(\"link=Delete\"));\n\t\tselenium.click(\"//a\");\n\t\tThread.sleep(5000);\n\t}","id":64403,"modified_method":"public void testImageEditting() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Test Image. This is the Liferay logo!']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Close\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isElementPresent(\"link=Edit\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Permissions\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Delete\"));\n\t\tselenium.click(\"link=Close\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//img[@alt='Test Image. This is the Liferay logo!']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//img[@alt='Test Image. This is the Liferay logo!']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[4]/div[1]/div[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tThread.sleep(5000);\n\t\tassertTrue(selenium.isElementPresent(\"link=Edit\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Permissions\"));\n\t\tassertTrue(selenium.isElementPresent(\"link=Delete\"));\n\t\tselenium.click(\"//div[4]/div[1]/div[1]/a\");\n\t\tThread.sleep(5000);\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(AddPageTest.class);\n\t\ttestSuite.addTestSuite(AddPortletTest.class);\n\t\ttestSuite.addTestSuite(AddFolderTest.class);\n\t\ttestSuite.addTestSuite(AddSubfolderTest.class);\n\t\ttestSuite.addTestSuite(AddImageTest.class);\n\t\ttestSuite.addTestSuite(AddSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(AddSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(AddSecondImageTest.class);\n\t\ttestSuite.addTestSuite(EditSecondImageTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondImageTest.class);\n\t\ttestSuite.addTestSuite(EditSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(EditSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(ViewSlideshowTest.class);\n\t\ttestSuite.addTestSuite(BrowseImageTabsTest.class);\n\t\ttestSuite.addTestSuite(SearchPortletTest.class);\n\t\ttestSuite.addTestSuite(AddMoveFoldersTest.class);\n\t\ttestSuite.addTestSuite(MoveImageTest.class);\n\t\ttestSuite.addTestSuite(MoveFolderTest.class);\n\t\ttestSuite.addTestSuite(AddNullTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddInvalidTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddDuplicateTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddImageNameTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddNullImageTest.class);\n\t\ttestSuite.addTestSuite(AddDuplicateTitleImageTest.class);\n\t\ttestSuite.addTestSuite(AddIncorrectNameImageTest.class);\n\t\ttestSuite.addTestSuite(DeleteFoldersTest.class);\n\t\ttestSuite.addTestSuite(ImportLARTest.class);\n\t\ttestSuite.addTestSuite(AssertImportLARTest.class);\n\t\ttestSuite.addTestSuite(ImageEdittingTest.class);\n\t\ttestSuite.addTestSuite(TearDownTest.class);\n\n\t\treturn testSuite;\n\t}","id":64404,"modified_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(AddPageTest.class);\n\t\ttestSuite.addTestSuite(AddPortletTest.class);\n\t\ttestSuite.addTestSuite(AddFolderTest.class);\n\t\ttestSuite.addTestSuite(AddSubfolderTest.class);\n\t\ttestSuite.addTestSuite(AddImageTest.class);\n\t\ttestSuite.addTestSuite(AddSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(AddSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(AddSecondImageTest.class);\n\t\ttestSuite.addTestSuite(EditSecondImageTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondImageTest.class);\n\t\ttestSuite.addTestSuite(EditSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondSubfolderTest.class);\n\t\ttestSuite.addTestSuite(EditSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(DeleteSecondFolderTest.class);\n\t\ttestSuite.addTestSuite(ViewSlideshowTest.class);\n\t\ttestSuite.addTestSuite(BrowseImageTabsTest.class);\n\t\ttestSuite.addTestSuite(SearchPortletTest.class);\n\t\ttestSuite.addTestSuite(AddMoveFoldersTest.class);\n\t\ttestSuite.addTestSuite(MoveImageTest.class);\n\t\ttestSuite.addTestSuite(MoveFolderTest.class);\n\t\ttestSuite.addTestSuite(AddNullTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddInvalidTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddDuplicateTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddImageNameTitleFolderTest.class);\n\t\ttestSuite.addTestSuite(AddNullImageTest.class);\n\t\ttestSuite.addTestSuite(AddDuplicateTitleImageTest.class);\n\t\ttestSuite.addTestSuite(AddIncorrectNameImageTest.class);\n\t\ttestSuite.addTestSuite(DeleteFoldersTest.class);\n\t\ttestSuite.addTestSuite(ImportLARTest.class);\n\t\ttestSuite.addTestSuite(AssertImportLARTest.class);\n//\t\ttestSuite.addTestSuite(ImageEdittingTest.class);\n\t\ttestSuite.addTestSuite(TearDownTest.class);\n\n\t\treturn testSuite;\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testMoveFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Folder\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Test Subfolder\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test3 Subfolder3\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Test3 Subfolder3\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Subfolder\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/input\");\n\t\tselenium.selectWindow(\"null\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Test3 Folder3\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\"Test3 Subfolder3\"));\n\t\tassertFalse(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Test3 Subfolder3\"));\n\t\tassertTrue(selenium.isTextPresent(\"This is a test3 subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t}","id":64405,"modified_method":"public void testMoveFolder() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test1 Folder1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test1 Subfolder1\"),\n\t\t\tselenium.getText(\"//div[1]/span/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Test3 Subfolder3\\nThis is Test3 Subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test3 Subfolder3\\nThis is Test3 Subfolder3.\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test1 Subfolder1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//strong/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//tr[4]/td[4]/input\");\n\t\tselenium.selectWindow(\"null\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test3 Folder3\"),\n\t\t\tselenium.getText(\"//div[1]/span/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isTextPresent(\n\t\t\t\t\"Test3 Subfolder3\\nThis is Test3 Subfolder3.\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Test3 Subfolder3\\nThis is Test3 Subfolder3.\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testMoveImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test Subfolder\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Image']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test3 Folder3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Test3 Subfolder3\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='This is the Liferay logo!']\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test3 Subfolder3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\"//img[@alt='Image']\"));\n\t}","id":64406,"modified_method":"public void testMoveImage() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//img[@alt='Test1 Image1. This is Test1 Image1.']\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Edit\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Edit\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Select']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Folders\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Folders\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"link=Test3 Folder3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tassertEquals(RuntimeVariables.replace(\"Test3 Subfolder3\"),\n\t\t\tselenium.getText(\"//div[1]/span/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Save']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\n\t\t\t\t\"Your request processed successfully.\"));\n\t\tassertFalse(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//tr[4]/td[1]/a[1]/b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSearchPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.typeKeys(\"_31_keywords1\", RuntimeVariables.replace(\"lifera\"));\n\t\tselenium.type(\"_31_keywords1\", RuntimeVariables.replace(\"liferay\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Search Folders']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Test Image\"));\n\t\tselenium.typeKeys(\"_31_keywords\", RuntimeVariables.replace(\"lifera1\"));\n\t\tselenium.type(\"_31_keywords\", RuntimeVariables.replace(\"liferay1\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Search']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"Test Image\"));\n\t}","id":64407,"modified_method":"public void testSearchPortlet() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"_31_keywords1\", RuntimeVariables.replace(\"Test1 Image1\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//input[@value='Search Folders']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isTextPresent(\"Test1 Image1\"));\n\t\tselenium.type(\"_31_keywords\", RuntimeVariables.replace(\"liferay1\"));\n\t\tselenium.click(RuntimeVariables.replace(\"//input[@value='Search']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertFalse(selenium.isTextPresent(\"Test1 Image1\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDown() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"link=Image Gallery Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"link=Image Gallery Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean TestFolderCPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderCPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean TestFolderDPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderDPresent) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Home\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//li/ul/li[3]/a/span\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//input[@value='Delete']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Home\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":64408,"modified_method":"public void testTearDown() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"link=Image Gallery Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"link=Image Gallery Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean TestFolderCPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderCPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean TestFolderDPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tif (!TestFolderDPresent) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//td[4]/ul/li/strong/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[5]/ul/li[3]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//div[5]/ul/li[3]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Remove']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.click(\"//img[@alt='Remove']\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to remove this component[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Home\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"link=Manage Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//li/ul/li[3]/a/span\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//input[@value='Delete']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"link=Return to Full Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewSlideshow() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='View Slide Show']\");\n\t\tselenium.waitForPopUp(\"slideShow\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=slideShow\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_slideShow\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.close();\n\t\tselenium.selectWindow(\"null\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//img[@alt='Image']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}","id":64409,"modified_method":"public void testViewSlideshow() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Image Gallery Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(RuntimeVariables.replace(\"link=Image Gallery Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(RuntimeVariables.replace(\"//b\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.click(\"//input[@value='View Slide Show']\");\n\t\tselenium.waitForPopUp(\"slideShow\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=slideShow\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"_31_slideShow\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.close();\n\t\tselenium.selectWindow(\"null\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isElementPresent(\n\t\t\t\t\"//img[@alt='Test1 Image1. This is Test1 Image1.']\"));\n\t}","commit_id":"e882c15a85c9fc8c297c571446a17585455bd830","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).select(new ISelector<SNode, EditorCell>() {\n      public EditorCell select(SNode it) {\n        return (EditorCell) ((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(it);\n      }\n    })) && (SNodeOperations.getAncestor(ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).first(), \"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", false, false) == null);\n  }","id":64410,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return !(ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).select(new ISelector<SNode, EditorCell>() {\n      public EditorCell select(SNode it) {\n        return (EditorCell) ((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(it);\n      }\n    }))) && (SNodeOperations.getAncestor(ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).first(), \"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", false, false) == null);\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).select(new ISelector<SNode, EditorCell>() {\n      public EditorCell select(SNode it) {\n        return (EditorCell) ((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(it);\n      }\n    })) && ExtractMethodFactory.isRefactoringAvailable(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\")));\n  }","id":64411,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return !(ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\"))).select(new ISelector<SNode, EditorCell>() {\n      public EditorCell select(SNode it) {\n        return (EditorCell) ((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(it);\n      }\n    }))) && ExtractMethodFactory.isRefactoringAvailable(((List<SNode>) MapSequence.fromMap(_params).get(\"nodes\")));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    boolean isFieldDeclaration = (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isFinal\") && (SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\"), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"initializer\", true) != null));\n    boolean isStaticFieldDeclaration = (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\") && SPropertyOperations.getBoolean(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\"), \"isFinal\") && (SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\"), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"initializer\", true) != null));\n    return (isFieldDeclaration || isStaticFieldDeclaration);\n  }","id":64412,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    boolean isFieldDeclaration = (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"), \"isFinal\") && (SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\"), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\"), \"fieldDeclaration\", false), \"initializer\", true) != null));\n    boolean isStaticFieldDeclaration = (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\") && SPropertyOperations.getBoolean(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\"), \"isFinal\") && (SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\"), \"initializer\", true) != null)) || (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"isFinal\") && (SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"initializer\", true) != null));\n    return (isFieldDeclaration || isStaticFieldDeclaration);\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    boolean result = SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\");\n    if (!(result)) {\n      if (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\")) {\n\n        if (SNodeOperations.hasRole(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"lValue\")) {\n          return false;\n        }\n        if (SNodeOperations.hasRole(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", \"expression\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(((SNode) MapSequence.fromMap(_params).get(\"node\"))), \"jetbrains.mps.baseLanguage.structure.UnaryMinus\"))) {\n          return false;\n        }\n\n        result = true;\n      }\n    }\n    return result;\n  }","id":64413,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    boolean result = SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\");\n    if (!(result)) {\n      if (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.VariableReference\"), \"variableDeclaration\", false), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\")) {\n\n        if (SNodeOperations.hasRole(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"lValue\")) {\n          return false;\n        }\n        if (SNodeOperations.hasRole(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", \"expression\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(((SNode) MapSequence.fromMap(_params).get(\"node\"))), \"jetbrains.mps.baseLanguage.structure.UnaryMinus\"))) {\n          return false;\n        }\n\n        result = true;\n      }\n    }\n    return result;\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    final Wrappers._T<Boolean> b = new Wrappers._T<Boolean>(false);\n    ((MPSProject) MapSequence.fromMap(_params).get(\"project\")).getRepository().getModelAccess().runReadAction(new Runnable() {\n      public void run() {\n        b.value = MethodCallAdapter.isMethodCall(((SNode) MapSequence.fromMap(_params).get(\"node\"))) || SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\");\n      }\n    });\n    return b.value;\n  }","id":64414,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    final Wrappers._T<Boolean> b = new Wrappers._T<Boolean>(false);\n    ((MPSProject) MapSequence.fromMap(_params).get(\"project\")).getRepository().getModelAccess().runReadAction(new Runnable() {\n      public void run() {\n        b.value = MethodCallAdapter.isMethodCall(((SNode) MapSequence.fromMap(_params).get(\"node\"))) || SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\");\n      }\n    });\n    return b.value;\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    return IntroduceConstantRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","id":64415,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    return IntroduceConstantRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    return IntroduceFieldRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","id":64416,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    return IntroduceFieldRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))))) {\n      return false;\n    }\n    return IntroduceLocalVariableRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","id":64417,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    if (ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"component\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))))) {\n      return false;\n    }\n    return IntroduceLocalVariableRefactoring.isApplicable(((SNode) MapSequence.fromMap(_params).get(\"node\")));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isCellsReadOnlyInEditor(jetbrains.mps.openapi.editor.EditorComponent editorComponent,\n      Iterable<jetbrains.mps.openapi.editor.cells.EditorCell> cells) {\n    if (editorComponent.isReadOnly()) {\n      return true;\n    }\n    for (jetbrains.mps.openapi.editor.cells.EditorCell cell : cells) {\n      if (isCellOrSelectionReadOnlyInEditor(editorComponent, cell)) {\n        return true;\n      }\n    }\n    return false;\n  }","id":64418,"modified_method":"public static boolean isCellsReadOnlyInEditor(jetbrains.mps.openapi.editor.EditorComponent editorComponent,\n      Iterable<jetbrains.mps.openapi.editor.cells.EditorCell> cells) {\n    if (editorComponent.isReadOnly()) {\n      return true;\n    }\n    for (jetbrains.mps.openapi.editor.cells.EditorCell cell : cells) {\n      if (cell == null || isCellReadOnly(cell)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))));\n  }","id":64419,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return !(ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return (SNodeOperations.getAncestor(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", true, false) != null) && EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\")))));\n  }","id":64420,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    return (SNodeOperations.getAncestor(((SNode) MapSequence.fromMap(_params).get(\"node\")), \"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", true, false) != null) && !(ReadOnlyUtil.isCellsReadOnlyInEditor(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")), Sequence.<EditorCell>singleton(((EditorComponent) MapSequence.fromMap(_params).get(\"editorComponent\")).findNodeCell(((SNode) MapSequence.fromMap(_params).get(\"node\"))))));\n  }","commit_id":"994d0c60540cb5e20f18df21b4c3fb26b55efd92","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Processes a packet read from either the multicast or unicast socket. Needs to be synchronized because\n     * mcast or unicast socket reads can be concurrent.\n     * Correction (bela April 19 2005): we access no instance variables, all vars are allocated on the stack, so\n     * this method should be reentrant: removed 'synchronized' keyword\n     */\n    private void handleIncomingPacket(Address dest, Address sender, byte[] data) {\n        ByteArrayInputStream inp_stream=null;\n        DataInputStream      inp=null;\n        Message              msg;\n        List                 l;  // used if bundling is enabled\n        short                version;\n        boolean              is_message_list;\n\n        try {\n            inp_stream=new ByteArrayInputStream(data);\n            inp=new DataInputStream(inp_stream);\n            version=inp.readShort();\n            if(Version.compareTo(version) == false) {\n                if(log.isWarnEnabled()) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"packet from \").append(sender).append(\" has different version (\").append(version);\n                    sb.append(\") from ours (\").append(Version.printVersion()).append(\"). \");\n                    if(discard_incompatible_packets)\n                        sb.append(\"Packet is discarded\");\n                    else\n                        sb.append(\"This may cause problems\");\n                    log.warn(sb);\n                }\n                if(discard_incompatible_packets)\n                    return;\n            }\n\n            is_message_list=inp.readBoolean();\n            if(is_message_list) {\n                l=bufferToList(inp, dest);\n                for(Enumeration en=l.elements(); en.hasMoreElements();) {\n                    msg=(Message)en.nextElement();\n                    try {\n                        handleMessage(msg);\n                    }\n                    catch(Throwable t) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed unmarshalling message list\", t);\n                    }\n                }\n            }\n            else {\n                msg=bufferToMessage(inp, dest, sender);\n                handleMessage(msg);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(\"failed unmarshalling message\", t);\n        }\n        finally {\n            Util.closeInputStream(inp);\n            Util.closeInputStream(inp_stream);\n        }\n    }","id":64421,"modified_method":"/**\n     * Processes a packet read from either the multicast or unicast socket. Needs to be synchronized because\n     * mcast or unicast socket reads can be concurrent.\n     * Correction (bela April 19 2005): we access no instance variables, all vars are allocated on the stack, so\n     * this method should be reentrant: removed 'synchronized' keyword\n     */\n    private void handleIncomingPacket(Address dest, Address sender, byte[] data, int offset, int length) {\n        ByteArrayInputStream inp_stream=null;\n        DataInputStream      inp=null;\n        Message              msg;\n        List                 l;  // used if bundling is enabled\n        short                version;\n        boolean              is_message_list;\n\n        try {\n            inp_stream=new ByteArrayInputStream(data, offset, length);\n            inp=new DataInputStream(inp_stream);\n            version=inp.readShort();\n            if(Version.compareTo(version) == false) {\n                if(log.isWarnEnabled()) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"packet from \").append(sender).append(\" has different version (\").append(version);\n                    sb.append(\") from ours (\").append(Version.printVersion()).append(\"). \");\n                    if(discard_incompatible_packets)\n                        sb.append(\"Packet is discarded\");\n                    else\n                        sb.append(\"This may cause problems\");\n                    log.warn(sb);\n                }\n                if(discard_incompatible_packets)\n                    return;\n            }\n\n            is_message_list=inp.readBoolean();\n            if(is_message_list) {\n                l=bufferToList(inp, dest);\n                for(Enumeration en=l.elements(); en.hasMoreElements();) {\n                    msg=(Message)en.nextElement();\n                    try {\n                        handleMessage(msg);\n                    }\n                    catch(Throwable t) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed unmarshalling message list\", t);\n                    }\n                }\n            }\n            else {\n                msg=bufferToMessage(inp, dest, sender);\n                handleMessage(msg);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(\"failed unmarshalling message\", t);\n        }\n        finally {\n            Util.closeInputStream(inp);\n            Util.closeInputStream(inp_stream);\n        }\n    }","commit_id":"a4a8d4b454f6e826035675137e637a81445a2153","url":"https://github.com/belaban/JGroups"},{"original_method":"public IncomingQueueEntry(Address dest, Address sender, byte[] buf) {\n            this.dest=dest;\n            this.sender=sender;\n            this.buf=buf;\n        }","id":64422,"modified_method":"public IncomingQueueEntry(Address dest, Address sender, byte[] buf, int offset, int length) {\n            this.dest=dest;\n            this.sender=sender;\n            this.buf=buf;\n            this.offset=offset;\n            this.length=length;\n        }","commit_id":"a4a8d4b454f6e826035675137e637a81445a2153","url":"https://github.com/belaban/JGroups"},{"original_method":"void receive(Address dest, Address src, byte[] data) {\n        if(data == null) return;\n\n        int len=data.length;\n        if(len == 4) {  // received a diagnostics probe\n            if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                handleDiagnosticProbe(src);\n                return;\n            }\n        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(log.isTraceEnabled()){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast)\" : \"ucast)\");\n            sb.append(len).append(\" bytes from \").append(src).append(\" (size=\").append(len).append(\" bytes)\");\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[len];\n                System.arraycopy(data, 0, tmp, 0, len);\n                incoming_queue.add(new IncomingQueueEntry(dest, src, tmp));\n            }\n            else\n                handleIncomingPacket(dest, src, data);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data (\").append(len).append(\" bytes from \").append(src), t);\n        }\n    }","id":64423,"modified_method":"void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n\n        if(length == 4) {  // received a diagnostics probe\n            if(data[offset] == 'd' && data[offset+1] == 'i' && data[offset+2] == 'a' && data[offset+3] == 'g') {\n                handleDiagnosticProbe(sender);\n                return;\n            }\n        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(log.isTraceEnabled()){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast)\" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                incoming_queue.add(new IncomingQueueEntry(dest, sender, tmp, offset, length));\n            }\n            else\n                handleIncomingPacket(dest, sender, data, offset, length);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","commit_id":"a4a8d4b454f6e826035675137e637a81445a2153","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            byte[] data;\n            IncomingQueueEntry entry;\n\n            while(incoming_queue != null && incoming_packet_handler != null) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_queue.remove();\n                    data=entry.buf;\n                }\n                catch(QueueClosedException closed_ex) {\n                    if(log.isDebugEnabled()) log.debug(\"packet_handler thread terminating\");\n                    break;\n                }\n                handleIncomingPacket(entry.dest, entry.sender, data);\n            }\n        }","id":64424,"modified_method":"public void run() {\n            IncomingQueueEntry entry;\n            while(incoming_queue != null && incoming_packet_handler != null) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    if(log.isDebugEnabled()) log.debug(\"packet_handler thread terminating\");\n                    break;\n                }\n\n            }\n        }","commit_id":"a4a8d4b454f6e826035675137e637a81445a2153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Caller by the layer above this layer. Usually we just put this Message\n     * into the send queue and let one or more worker threads handle it. A worker thread\n     * then removes the Message from the send queue, performs a conversion and adds the\n     * modified Message to the send queue of the layer below it, by calling down()).\n     */\n    public void down(Event evt) {\n        if(evt.getType() != Event.MSG) {  // unless it is a message handle it and respond\n            handleDownEvent(evt);\n            return;\n        }\n\n        Message msg=(Message)evt.getArg();\n        if(header != null) {\n            // added patch by Roland Kurmann (March 20 2003)\n            // msg.putHeader(name, new TpHeader(channel_name));\n            msg.putHeader(name, header);\n        }\n\n        // Because we don't call Protocol.passDown(), we notify the observer directly (e.g. PerfObserver).\n        // This way, we still have performance numbers for TP\n        if(observer != null)\n            observer.passDown(evt);\n\n        setSourceAddress(msg); // very important !! listToBuffer() will fail with a null src address !!\n        if(trace) {\n            StringBuffer sb=new StringBuffer(\"sending msg to \").append(msg.getDest()).\n                    append(\" (src=\").append(msg.getSrc()).append(\"), headers are \").append(msg.getHeaders());\n            log.trace(sb.toString());\n        }\n\n        // Don't send if destination is local address. Instead, switch dst and src and put in up_queue.\n        // If multicast message, loopback a copy directly to us (but still multicast). Once we receive this,\n        // we will discard our own multicast message\n        Address dest=msg.getDest();\n        boolean multicast=dest == null || dest.isMulticastAddress();\n        if(loopback && (multicast || dest.equals(local_addr))) {\n            Message copy=msg.copy();\n\n            // copy.removeHeader(name); // we don't remove the header\n            copy.setSrc(local_addr);\n            // copy.setDest(dest);\n\n            if(trace) log.trace(new StringBuffer(\"looping back message \").append(copy));\n            try {\n                incoming_msg_queue.add(copy);\n            }\n            catch(QueueClosedException e) {\n                // log.error(\"failed adding looped back message to incoming_msg_queue\", e);\n            }\n\n            if(!multicast)\n                return;\n        }\n\n        try {\n            if(use_outgoing_packet_handler)\n                outgoing_queue.put(msg);\n            else\n                send(msg, dest, multicast);\n        }\n        catch(QueueClosedException closed_ex) {\n        }\n        catch(InterruptedException interruptedEx) {\n        }\n        catch(Throwable e) {\n            if(log.isErrorEnabled()) {\n                String dst=msg.getDest() == null? \"null\" : msg.getDest().toString();\n                log.error(\"failed sending message to \" + dst + \" (\" + msg.getLength() + \" bytes)\", e.getCause());\n            }\n        }\n    }","id":64425,"modified_method":"/**\n     * Caller by the layer above this layer. Usually we just put this Message\n     * into the send queue and let one or more worker threads handle it. A worker thread\n     * then removes the Message from the send queue, performs a conversion and adds the\n     * modified Message to the send queue of the layer below it, by calling down()).\n     */\n    public void down(Event evt) {\n        if(evt.getType() != Event.MSG) {  // unless it is a message handle it and respond\n            handleDownEvent(evt);\n            return;\n        }\n\n        Message msg=(Message)evt.getArg();\n        if(header != null) {\n            // added patch by Roland Kurmann (March 20 2003)\n            // msg.putHeader(name, new TpHeader(channel_name));\n            msg.putHeader(name, header);\n        }\n\n        // Because we don't call Protocol.passDown(), we notify the observer directly (e.g. PerfObserver).\n        // This way, we still have performance numbers for TP\n        if(observer != null)\n            observer.passDown(evt);\n\n        setSourceAddress(msg); // very important !! listToBuffer() will fail with a null src address !!\n        if(trace) {\n            StringBuffer sb=new StringBuffer(\"sending msg to \").append(msg.getDest()).\n                    append(\" (src=\").append(msg.getSrc()).append(\"), headers are \").append(msg.getHeaders());\n            log.trace(sb.toString());\n        }\n\n        // Don't send if destination is local address. Instead, switch dst and src and put in up_queue.\n        // If multicast message, loopback a copy directly to us (but still multicast). Once we receive this,\n        // we will discard our own multicast message\n        Address dest=msg.getDest();\n        boolean multicast=dest == null || dest.isMulticastAddress();\n        if(loopback && (multicast || dest.equals(local_addr))) {\n            Message copy=msg.copy();\n\n            // copy.removeHeader(name); // we don't remove the header\n            // copy.setDest(dest);\n\n            if(trace) log.trace(new StringBuffer(\"looping back message \").append(copy));\n            // passUp(evt);\n\n\n            try {\n                incoming_msg_queue.add(copy);\n            }\n            catch(QueueClosedException e) {\n            }\n\n            if(!multicast)\n                return;\n        }\n\n        try {\n            if(use_outgoing_packet_handler)\n                outgoing_queue.put(msg);\n            else\n                send(msg, dest, multicast);\n        }\n        catch(QueueClosedException closed_ex) {\n        }\n        catch(InterruptedException interruptedEx) {\n        }\n        catch(Throwable e) {\n            if(log.isErrorEnabled()) {\n                String dst=msg.getDest() == null? \"null\" : msg.getDest().toString();\n                log.error(\"failed sending message to \" + dst + \" (\" + msg.getLength() + \" bytes)\", e.getCause());\n            }\n        }\n    }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void stop() {\n        if(diag_handler != null) {\n            diag_handler.stop();\n            diag_handler=null;\n        }\n\n        // 1. Stop the outgoing packet handler thread\n        if(outgoing_packet_handler != null)\n            outgoing_packet_handler.stop();\n\n\n        // 2. Stop the incoming packet handler thread\n        if(incoming_packet_handler != null)\n            incoming_packet_handler.stop();\n\n\n        // 3. Finally stop the incoming message handler\n        if(incoming_msg_handler != null)\n            incoming_msg_handler.stop();\n    }","id":64426,"modified_method":"public void stop() {\n        if(diag_handler != null) {\n            diag_handler.stop();\n            diag_handler=null;\n        }\n\n        // 1. Stop the outgoing packet handler thread\n        if(outgoing_packet_handler != null)\n            outgoing_packet_handler.stop();\n\n\n        // 2. Stop the incoming packet handler thread\n        if(incoming_packet_handler != null)\n            incoming_packet_handler.stop();\n\n\n        // 3. Finally stop the incoming message handler\n        if(incoming_msg_handler != null)\n            incoming_msg_handler.stop();\n\n\n        if(unmarshaller_thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)unmarshaller_thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)unmarshaller_thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n\n        if(oob_thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)oob_thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)oob_thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n\n        if(thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n    }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Subclasses must call this method when a unicast or multicast message has been received.\n     * Declared final so subclasses cannot override this method.\n     *\n     * @param dest\n     * @param sender\n     * @param data\n     * @param offset\n     * @param length\n     */\n    protected final void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n\n//        if(length == 4) {  // received a diagnostics probe\n//            if(data[offset] == 'd' && data[offset+1] == 'i' && data[offset+2] == 'a' && data[offset+3] == 'g') {\n//                handleDiagnosticProbe(sender);\n//                return;\n//            }\n//        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(trace){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast) \" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                incoming_packet_queue.add(new IncomingQueueEntry(dest, sender, tmp, offset, length));\n            }\n            else\n                handleIncomingPacket(dest, sender, data, offset, length);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","id":64427,"modified_method":"/**\n     * Subclasses must call this method when a unicast or multicast message has been received.\n     * Declared final so subclasses cannot override this method.\n     *\n     * @param dest\n     * @param sender\n     * @param data\n     * @param offset\n     * @param length\n     */\n    protected final void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(trace){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast) \" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_threadless_stack) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                unmarshaller_thread_pool.execute(new IncomingPacket(dest, sender, tmp, offset, length));\n            }\n            else {\n                if(use_incoming_packet_handler) {\n                    byte[] tmp=new byte[length];\n                    System.arraycopy(data, offset, tmp, 0, length);\n                    incoming_packet_queue.add(new IncomingPacket(dest, sender, tmp, offset, length));\n                }\n                else\n                    handleIncomingPacket(dest, sender, data, offset, length);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            IncomingQueueEntry entry;\n            while(!incoming_packet_queue.closed() && Thread.currentThread().equals(t)) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_packet_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    break;\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled())\n                        log.error(\"error processing incoming packet\", ex);\n                }\n            }\n            if(trace) log.trace(\"incoming packet handler terminating\");\n        }","id":64428,"modified_method":"public void run() {\n            IncomingPacket entry;\n            while(!incoming_packet_queue.closed() && Thread.currentThread().equals(t)) {\n                try {\n                    entry=(IncomingPacket)incoming_packet_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    break;\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled())\n                        log.error(\"error processing incoming packet\", ex);\n                }\n            }\n            if(trace) log.trace(\"incoming packet handler terminating\");\n        }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Creates the unicast and multicast sockets and starts the unicast and multicast receiver threads\n     */\n    public void start() throws Exception {\n        timer=stack.timer;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n\n        if(enable_diagnostics) {\n            diag_handler=new DiagnosticsHandler();\n            diag_handler.start();\n        }\n\n        if(use_incoming_packet_handler) {\n            incoming_packet_queue=new Queue();\n            incoming_packet_handler=new IncomingPacketHandler();\n            incoming_packet_handler.start();\n        }\n\n        if(loopback) {\n            incoming_msg_queue=new Queue();\n            incoming_msg_handler=new IncomingMessageHandler();\n            incoming_msg_handler.start();\n        }\n\n        if(use_outgoing_packet_handler) {\n            outgoing_queue=new BoundedLinkedQueue(outgoing_queue_max_size);\n            outgoing_packet_handler=new OutgoingPacketHandler();\n            outgoing_packet_handler.start();\n        }\n\n        if(enable_bundling) {\n            bundler=new Bundler();\n        }\n\n        passUp(new Event(Event.SET_LOCAL_ADDRESS, local_addr));\n    }","id":64429,"modified_method":"/**\n     * Creates the unicast and multicast sockets and starts the unicast and multicast receiver threads\n     */\n    public void start() throws Exception {\n        timer=stack.timer;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n\n        if(enable_diagnostics) {\n            diag_handler=new DiagnosticsHandler();\n            diag_handler.start();\n        }\n\n        if(use_incoming_packet_handler) {\n            incoming_packet_queue=new Queue();\n            incoming_packet_handler=new IncomingPacketHandler();\n            incoming_packet_handler.start();\n        }\n\n        // ================================= Unmarshaller thread pool =============================\n        if(unmarshaller_thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            unmarshaller_thread_pool_queue=new BoundedLinkedQueue(unmarshaller_thread_pool_queue_max_size);\n            unmarshaller_thread_pool=new PooledExecutor(unmarshaller_thread_pool_queue,\n                                                        unmarshaller_thread_pool_max_threads);\n            ((PooledExecutor)unmarshaller_thread_pool).setMinimumPoolSize(unmarshaller_thread_pool_min_threads);\n            ((PooledExecutor)unmarshaller_thread_pool).setKeepAliveTime(unmarshaller_thread_pool_keep_alive_time);\n\n            if(unmarshaller_thread_pool_rejection_policy != null) {\n                if(unmarshaller_thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).abortWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).waitWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).discardWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)unmarshaller_thread_pool).runWhenBlocked();\n            }\n\n            ((PooledExecutor)unmarshaller_thread_pool).setThreadFactory(new ThreadFactory() {\n                int num=1;\n                ThreadGroup unmarshaller_threads=new ThreadGroup(pool_thread_group, \"Unmarshaller\");\n                public Thread newThread(Runnable command) {\n                    return new Thread(unmarshaller_threads, command, \"UnmarshallerThread-\" + num++);\n                }\n            });\n\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            unmarshaller_thread_pool=new DirectExecutor();\n        }\n\n\n        // todo: provide configuration in XML\n        // ========================================== OOB thread pool ==============================\n        if(oob_thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            oob_thread_pool_queue=new BoundedLinkedQueue(oob_thread_pool_queue_max_size);\n            oob_thread_pool=new PooledExecutor(oob_thread_pool_queue,\n                                                        oob_thread_pool_max_threads);\n            ((PooledExecutor)oob_thread_pool).setMinimumPoolSize(oob_thread_pool_min_threads);\n            ((PooledExecutor)oob_thread_pool).setKeepAliveTime(oob_thread_pool_keep_alive_time);\n\n            if(oob_thread_pool_rejection_policy != null) {\n                if(oob_thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)oob_thread_pool).abortWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)oob_thread_pool).waitWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)oob_thread_pool).discardWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)oob_thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)oob_thread_pool).runWhenBlocked();\n\n                ((PooledExecutor)oob_thread_pool).setThreadFactory(new ThreadFactory() {\n                    int num=1;\n                    ThreadGroup oob_threads=new ThreadGroup(pool_thread_group, \"OOB\");\n                    public Thread newThread(Runnable command) {\n                        return new Thread(pool_thread_group, command, \"OOB Thread-\" + num++);\n                    }\n                });\n            }\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            oob_thread_pool=new DirectExecutor();\n        }\n\n//        oob_thread_pool=new PooledExecutor(new BoundedBuffer(100), 5);\n//        ((PooledExecutor)oob_thread_pool).setMinimumPoolSize(2);\n//        ((PooledExecutor)oob_thread_pool).setKeepAliveTime(30000);\n//        ((PooledExecutor)oob_thread_pool).runWhenBlocked();\n\n\n\n        // todo: provide configuration in XML\n        // ====================================== Regular thread pool\n        if(thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            thread_pool_queue=new BoundedLinkedQueue(thread_pool_queue_max_size);\n            thread_pool=new PooledExecutor(thread_pool_queue,\n                                                        thread_pool_max_threads);\n            ((PooledExecutor)thread_pool).setMinimumPoolSize(thread_pool_min_threads);\n            ((PooledExecutor)thread_pool).setKeepAliveTime(thread_pool_keep_alive_time);\n\n            if(thread_pool_rejection_policy != null) {\n                if(thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)thread_pool).abortWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)thread_pool).waitWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)thread_pool).discardWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)thread_pool).runWhenBlocked();\n\n                ((PooledExecutor)thread_pool).setThreadFactory(new ThreadFactory() {\n                    int num=1;\n                    ThreadGroup threads=new ThreadGroup(pool_thread_group, \"Incoming\");\n                    public Thread newThread(Runnable command) {\n                        return new Thread(threads, command, \"Regular Thread-\" + num++);\n                    }\n                });\n            }\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            thread_pool=new DirectExecutor();\n        }\n\n//        thread_pool=new PooledExecutor(new BoundedBuffer(500), 10);\n//        ((PooledExecutor)thread_pool).setMinimumPoolSize(2);\n//        ((PooledExecutor)thread_pool).setKeepAliveTime(30000);\n//        ((PooledExecutor)thread_pool).runWhenBlocked();\n\n        // alternative: disable the thread pool\n        // thread_pool=new DirectExecutor();\n\n\n        if(loopback) {\n            incoming_msg_queue=new Queue();\n            incoming_msg_handler=new IncomingMessageHandler();\n            incoming_msg_handler.start();\n        }\n\n        if(use_outgoing_packet_handler) {\n            outgoing_queue=new BoundedLinkedQueue(outgoing_queue_max_size);\n            outgoing_packet_handler=new OutgoingPacketHandler();\n            outgoing_packet_handler.start();\n        }\n\n        if(enable_bundling) {\n            bundler=new Bundler();\n        }\n\n        passUp(new Event(Event.SET_LOCAL_ADDRESS, local_addr));\n    }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance according to the configuration string\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     */\n    public boolean setProperties(Properties props) {\n        super.setProperties(props);\n\n        boolean ignore_systemprops=Util.isBindAddressPropertyIgnored();\n        String str=Util.getProperty(new String[]{Global.BIND_ADDR, Global.BIND_ADDR_OLD}, props, \"bind_addr\",\n                             ignore_systemprops, null);\n\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"use_local_host\");\n        if(str != null) {\n            use_local_host=new Boolean(str).booleanValue();\n            props.remove(\"use_local_host\");\n        }\n\n        str=props.getProperty(\"bind_to_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"bind_to_all_interfaces\");\n            log.warn(\"bind_to_all_interfaces has been deprecated; use receive_on_all_interfaces instead\");\n        }\n\n        str=props.getProperty(\"receive_on_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"receive_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"receive_interfaces\");\n        if(str != null) {\n            try {\n                receive_interfaces=parseInterfaceList(str);\n                props.remove(\"receive_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"send_on_all_interfaces\");\n        if(str != null) {\n            send_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"send_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"send_interfaces\");\n        if(str != null) {\n            try {\n                send_interfaces=parseInterfaceList(str);\n                props.remove(\"send_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n        str=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatible_packets\");\n        if(str != null) {\n            discard_incompatible_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatible_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(warn) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"outgoing_queue_max_size\");\n        if(str != null) {\n            outgoing_queue_max_size=Integer.parseInt(str);\n            props.remove(\"outgoing_queue_max_size\");\n            if(outgoing_queue_max_size <= 0) {\n                if(log.isWarnEnabled())\n                    log.warn(\"outgoing_queue_max_size of \" + outgoing_queue_max_size + \" is invalid, setting it to 1\");\n                outgoing_queue_max_size=1;\n            }\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest TP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        str=props.getProperty(\"use_addr_translation\");\n        if(str != null) {\n            use_addr_translation=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_addr_translation\");\n        }\n\n        str=props.getProperty(\"enable_diagnostics\");\n        if(str != null) {\n            enable_diagnostics=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_diagnostics\");\n        }\n\n        str=props.getProperty(\"diagnostics_addr\");\n        if(str != null) {\n            diagnostics_addr=str;\n            props.remove(\"diagnostics_addr\");\n        }\n\n        str=props.getProperty(\"diagnostics_port\");\n        if(str != null) {\n            diagnostics_port=Integer.parseInt(str);\n            props.remove(\"diagnostics_port\");\n        }\n\n        if(enable_bundling) {\n            //if (use_outgoing_packet_handler == false)\n              //  if(warn) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            // use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","id":64430,"modified_method":"/**\n     * Setup the Protocol instance according to the configuration string\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     */\n    public boolean setProperties(Properties props) {\n        super.setProperties(props);\n\n        boolean ignore_systemprops=Util.isBindAddressPropertyIgnored();\n        String str=Util.getProperty(new String[]{Global.BIND_ADDR, Global.BIND_ADDR_OLD}, props, \"bind_addr\",\n                             ignore_systemprops, null);\n\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"use_local_host\");\n        if(str != null) {\n            use_local_host=new Boolean(str).booleanValue();\n            props.remove(\"use_local_host\");\n        }\n\n        str=props.getProperty(\"bind_to_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"bind_to_all_interfaces\");\n            log.warn(\"bind_to_all_interfaces has been deprecated; use receive_on_all_interfaces instead\");\n        }\n\n        str=props.getProperty(\"receive_on_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"receive_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"receive_interfaces\");\n        if(str != null) {\n            try {\n                receive_interfaces=parseInterfaceList(str);\n                props.remove(\"receive_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"send_on_all_interfaces\");\n        if(str != null) {\n            send_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"send_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"send_interfaces\");\n        if(str != null) {\n            try {\n                send_interfaces=parseInterfaceList(str);\n                props.remove(\"send_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n        str=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatible_packets\");\n        if(str != null) {\n            discard_incompatible_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatible_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(warn) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_threadless_stack\");\n        if(str != null) {\n            use_threadless_stack=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_threadless_stack\");\n        }\n\n        // ======================================= Unmarshaller thread pool =========================================\n\n        str=props.getProperty(\"unmarshaller_thread_pool.enabled\");\n        if(str != null) {\n            unmarshaller_thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"unmarshaller_thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.min_threads\");\n        if(str != null) {\n            unmarshaller_thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.max_threads\");\n        if(str != null) {\n            unmarshaller_thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.keep_alive_time\");\n        if(str != null) {\n            unmarshaller_thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"unmarshaller_thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.queue_enabled\");\n        if(str != null) {\n            unmarshaller_thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"unmarshaller_thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.queue_max_size\");\n        if(str != null) {\n            unmarshaller_thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.rejection_policy\");\n        if(str != null) {\n            unmarshaller_thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"unmarshaller_thread_pool.rejection_policy\");\n        }\n\n\n        // ======================================= OOB thread pool =========================================\n        str=props.getProperty(\"oob_thread_pool.enabled\");\n        if(str != null) {\n            oob_thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"oob_thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.min_threads\");\n        if(str != null) {\n            oob_thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.max_threads\");\n        if(str != null) {\n            oob_thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.keep_alive_time\");\n        if(str != null) {\n            oob_thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"oob_thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.queue_enabled\");\n        if(str != null) {\n            oob_thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"oob_thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.queue_max_size\");\n        if(str != null) {\n            oob_thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.rejection_policy\");\n        if(str != null) {\n            oob_thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"oob_thread_pool.rejection_policy\");\n        }\n\n\n\n\n        // ======================================= Regular thread pool =========================================\n        str=props.getProperty(\"thread_pool.enabled\");\n        if(str != null) {\n            thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"thread_pool.min_threads\");\n        if(str != null) {\n            thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"thread_pool.max_threads\");\n        if(str != null) {\n            thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"thread_pool.keep_alive_time\");\n        if(str != null) {\n            thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"thread_pool.queue_enabled\");\n        if(str != null) {\n            thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"thread_pool.queue_max_size\");\n        if(str != null) {\n            thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"thread_pool.rejection_policy\");\n        if(str != null) {\n            thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"thread_pool.rejection_policy\");\n        }\n\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"outgoing_queue_max_size\");\n        if(str != null) {\n            outgoing_queue_max_size=Integer.parseInt(str);\n            props.remove(\"outgoing_queue_max_size\");\n            if(outgoing_queue_max_size <= 0) {\n                if(log.isWarnEnabled())\n                    log.warn(\"outgoing_queue_max_size of \" + outgoing_queue_max_size + \" is invalid, setting it to 1\");\n                outgoing_queue_max_size=1;\n            }\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest TP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        str=props.getProperty(\"use_addr_translation\");\n        if(str != null) {\n            use_addr_translation=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_addr_translation\");\n        }\n\n        str=props.getProperty(\"enable_diagnostics\");\n        if(str != null) {\n            enable_diagnostics=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_diagnostics\");\n        }\n\n        str=props.getProperty(\"diagnostics_addr\");\n        if(str != null) {\n            diagnostics_addr=str;\n            props.remove(\"diagnostics_addr\");\n        }\n\n        str=props.getProperty(\"diagnostics_port\");\n        if(str != null) {\n            diagnostics_port=Integer.parseInt(str);\n            props.remove(\"diagnostics_port\");\n        }\n\n        if(enable_bundling) {\n            //if (use_outgoing_packet_handler == false)\n              //  if(warn) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            // use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","commit_id":"7044071bc5a39d1f79c388b2d6bec68b1788604a","url":"https://github.com/belaban/JGroups"},{"original_method":"void receive(Address dest, Address src, byte[] data) {\n        if(data == null) return;\n\n        int len=data.length;\n        if(len == 4) {  // received a diagnostics probe\n            if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                handleDiagnosticProbe(src);\n                return;\n            }\n        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(log.isTraceEnabled()){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast)\" : \"ucast)\");\n            sb.append(len).append(\" bytes from \").append(src).append(\" (size=\").append(len).append(\" bytes)\");\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[len];\n                System.arraycopy(data, 0, tmp, 0, len);\n                incoming_queue.add(new IncomingQueueEntry(dest, src, tmp));\n            }\n            else\n                handleIncomingPacket(dest, src, data);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data (\").append(len).append(\" bytes from \").append(src), t);\n        }\n    }","id":64431,"modified_method":"void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n\n        if(length == 4) {  // received a diagnostics probe\n            if(data[offset] == 'd' && data[offset+1] == 'i' && data[offset+2] == 'a' && data[offset+3] == 'g') {\n                handleDiagnosticProbe(sender);\n                return;\n            }\n        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(log.isTraceEnabled()){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast)\" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                incoming_queue.add(new IncomingQueueEntry(dest, sender, tmp, offset, length));\n            }\n            else\n                handleIncomingPacket(dest, sender, data, offset, length);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","commit_id":"ce7f3e4e26fe99b7001fc0d463a2652394f07702","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            byte[] data;\n            IncomingQueueEntry entry;\n\n            while(incoming_queue != null && incoming_packet_handler != null) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_queue.remove();\n                    data=entry.buf;\n                }\n                catch(QueueClosedException closed_ex) {\n                    if(log.isDebugEnabled()) log.debug(\"packet_handler thread terminating\");\n                    break;\n                }\n                handleIncomingPacket(entry.dest, entry.sender, data);\n            }\n        }","id":64432,"modified_method":"public void run() {\n            IncomingQueueEntry entry;\n            while(incoming_queue != null && incoming_packet_handler != null) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    if(log.isDebugEnabled()) log.debug(\"packet_handler thread terminating\");\n                    break;\n                }\n\n            }\n        }","commit_id":"ce7f3e4e26fe99b7001fc0d463a2652394f07702","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Processes a packet read from either the multicast or unicast socket. Needs to be synchronized because\n     * mcast or unicast socket reads can be concurrent.\n     * Correction (bela April 19 2005): we access no instance variables, all vars are allocated on the stack, so\n     * this method should be reentrant: removed 'synchronized' keyword\n     */\n    private void handleIncomingPacket(Address dest, Address sender, byte[] data) {\n        ByteArrayInputStream inp_stream=null;\n        DataInputStream      inp=null;\n        Message              msg;\n        List                 l;  // used if bundling is enabled\n        short                version;\n        boolean              is_message_list;\n\n        try {\n            inp_stream=new ByteArrayInputStream(data);\n            inp=new DataInputStream(inp_stream);\n            version=inp.readShort();\n            if(Version.compareTo(version) == false) {\n                if(log.isWarnEnabled()) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"packet from \").append(sender).append(\" has different version (\").append(version);\n                    sb.append(\") from ours (\").append(Version.printVersion()).append(\"). \");\n                    if(discard_incompatible_packets)\n                        sb.append(\"Packet is discarded\");\n                    else\n                        sb.append(\"This may cause problems\");\n                    log.warn(sb);\n                }\n                if(discard_incompatible_packets)\n                    return;\n            }\n\n            is_message_list=inp.readBoolean();\n            if(is_message_list) {\n                l=bufferToList(inp, dest);\n                for(Enumeration en=l.elements(); en.hasMoreElements();) {\n                    msg=(Message)en.nextElement();\n                    try {\n                        handleMessage(msg);\n                    }\n                    catch(Throwable t) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed unmarshalling message list\", t);\n                    }\n                }\n            }\n            else {\n                msg=bufferToMessage(inp, dest, sender);\n                handleMessage(msg);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(\"failed unmarshalling message\", t);\n        }\n        finally {\n            Util.closeInputStream(inp);\n            Util.closeInputStream(inp_stream);\n        }\n    }","id":64433,"modified_method":"/**\n     * Processes a packet read from either the multicast or unicast socket. Needs to be synchronized because\n     * mcast or unicast socket reads can be concurrent.\n     * Correction (bela April 19 2005): we access no instance variables, all vars are allocated on the stack, so\n     * this method should be reentrant: removed 'synchronized' keyword\n     */\n    private void handleIncomingPacket(Address dest, Address sender, byte[] data, int offset, int length) {\n        ByteArrayInputStream inp_stream=null;\n        DataInputStream      inp=null;\n        Message              msg;\n        List                 l;  // used if bundling is enabled\n        short                version;\n        boolean              is_message_list;\n\n        try {\n            inp_stream=new ByteArrayInputStream(data, offset, length);\n            inp=new DataInputStream(inp_stream);\n            version=inp.readShort();\n            if(Version.compareTo(version) == false) {\n                if(log.isWarnEnabled()) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"packet from \").append(sender).append(\" has different version (\").append(version);\n                    sb.append(\") from ours (\").append(Version.printVersion()).append(\"). \");\n                    if(discard_incompatible_packets)\n                        sb.append(\"Packet is discarded\");\n                    else\n                        sb.append(\"This may cause problems\");\n                    log.warn(sb);\n                }\n                if(discard_incompatible_packets)\n                    return;\n            }\n\n            is_message_list=inp.readBoolean();\n            if(is_message_list) {\n                l=bufferToList(inp, dest);\n                for(Enumeration en=l.elements(); en.hasMoreElements();) {\n                    msg=(Message)en.nextElement();\n                    try {\n                        handleMessage(msg);\n                    }\n                    catch(Throwable t) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed unmarshalling message list\", t);\n                    }\n                }\n            }\n            else {\n                msg=bufferToMessage(inp, dest, sender);\n                handleMessage(msg);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(\"failed unmarshalling message\", t);\n        }\n        finally {\n            Util.closeInputStream(inp);\n            Util.closeInputStream(inp_stream);\n        }\n    }","commit_id":"ce7f3e4e26fe99b7001fc0d463a2652394f07702","url":"https://github.com/belaban/JGroups"},{"original_method":"public IncomingQueueEntry(Address dest, Address sender, byte[] buf) {\n            this.dest=dest;\n            this.sender=sender;\n            this.buf=buf;\n        }","id":64434,"modified_method":"public IncomingQueueEntry(Address dest, Address sender, byte[] buf, int offset, int length) {\n            this.dest=dest;\n            this.sender=sender;\n            this.buf=buf;\n            this.offset=offset;\n            this.length=length;\n        }","commit_id":"ce7f3e4e26fe99b7001fc0d463a2652394f07702","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Creates the unicast and multicast sockets and starts the unicast and multicast receiver threads\n     */\n    public void start() throws Exception {\n        timer=stack.timer;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n\n        if(enable_diagnostics) {\n            diag_handler=new DiagnosticsHandler();\n            diag_handler.start();\n        }\n\n        if(use_incoming_packet_handler) {\n            incoming_packet_queue=new Queue();\n            incoming_packet_handler=new IncomingPacketHandler();\n            incoming_packet_handler.start();\n        }\n\n        if(loopback) {\n            incoming_msg_queue=new Queue();\n            incoming_msg_handler=new IncomingMessageHandler();\n            incoming_msg_handler.start();\n        }\n\n        if(use_outgoing_packet_handler) {\n            outgoing_queue=new BoundedLinkedQueue(outgoing_queue_max_size);\n            outgoing_packet_handler=new OutgoingPacketHandler();\n            outgoing_packet_handler.start();\n        }\n\n        if(enable_bundling) {\n            bundler=new Bundler();\n        }\n\n        passUp(new Event(Event.SET_LOCAL_ADDRESS, local_addr));\n    }","id":64435,"modified_method":"/**\n     * Creates the unicast and multicast sockets and starts the unicast and multicast receiver threads\n     */\n    public void start() throws Exception {\n        timer=stack.timer;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n\n        if(enable_diagnostics) {\n            diag_handler=new DiagnosticsHandler();\n            diag_handler.start();\n        }\n\n        if(use_incoming_packet_handler) {\n            incoming_packet_queue=new Queue();\n            incoming_packet_handler=new IncomingPacketHandler();\n            incoming_packet_handler.start();\n        }\n\n        // ================================= Unmarshaller thread pool =============================\n        if(unmarshaller_thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            unmarshaller_thread_pool_queue=new BoundedLinkedQueue(unmarshaller_thread_pool_queue_max_size);\n            unmarshaller_thread_pool=new PooledExecutor(unmarshaller_thread_pool_queue,\n                                                        unmarshaller_thread_pool_max_threads);\n            ((PooledExecutor)unmarshaller_thread_pool).setMinimumPoolSize(unmarshaller_thread_pool_min_threads);\n            ((PooledExecutor)unmarshaller_thread_pool).setKeepAliveTime(unmarshaller_thread_pool_keep_alive_time);\n\n            if(unmarshaller_thread_pool_rejection_policy != null) {\n                if(unmarshaller_thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).abortWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).waitWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).discardWhenBlocked();\n                else if(unmarshaller_thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)unmarshaller_thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)unmarshaller_thread_pool).runWhenBlocked();\n            }\n\n            ((PooledExecutor)unmarshaller_thread_pool).setThreadFactory(new ThreadFactory() {\n                int num=1;\n                ThreadGroup unmarshaller_threads=new ThreadGroup(pool_thread_group, \"Unmarshaller\");\n                public Thread newThread(Runnable command) {\n                    return new Thread(unmarshaller_threads, command, \"UnmarshallerThread-\" + num++);\n                }\n            });\n\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            unmarshaller_thread_pool=new DirectExecutor();\n        }\n\n\n        // todo: provide configuration in XML\n        // ========================================== OOB thread pool ==============================\n        if(oob_thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            oob_thread_pool_queue=new BoundedLinkedQueue(oob_thread_pool_queue_max_size);\n            oob_thread_pool=new PooledExecutor(oob_thread_pool_queue,\n                                                        oob_thread_pool_max_threads);\n            ((PooledExecutor)oob_thread_pool).setMinimumPoolSize(oob_thread_pool_min_threads);\n            ((PooledExecutor)oob_thread_pool).setKeepAliveTime(oob_thread_pool_keep_alive_time);\n\n            if(oob_thread_pool_rejection_policy != null) {\n                if(oob_thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)oob_thread_pool).abortWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)oob_thread_pool).waitWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)oob_thread_pool).discardWhenBlocked();\n                else if(oob_thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)oob_thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)oob_thread_pool).runWhenBlocked();\n\n                ((PooledExecutor)oob_thread_pool).setThreadFactory(new ThreadFactory() {\n                    int num=1;\n                    ThreadGroup oob_threads=new ThreadGroup(pool_thread_group, \"OOB\");\n                    public Thread newThread(Runnable command) {\n                        return new Thread(pool_thread_group, command, \"OOB Thread-\" + num++);\n                    }\n                });\n            }\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            oob_thread_pool=new DirectExecutor();\n        }\n\n//        oob_thread_pool=new PooledExecutor(new BoundedBuffer(100), 5);\n//        ((PooledExecutor)oob_thread_pool).setMinimumPoolSize(2);\n//        ((PooledExecutor)oob_thread_pool).setKeepAliveTime(30000);\n//        ((PooledExecutor)oob_thread_pool).runWhenBlocked();\n\n\n\n        // todo: provide configuration in XML\n        // ====================================== Regular thread pool\n        if(thread_pool_enabled) { // create a PooledExecutor for the unmarshaller thread pool\n            thread_pool_queue=new BoundedLinkedQueue(thread_pool_queue_max_size);\n            thread_pool=new PooledExecutor(thread_pool_queue,\n                                                        thread_pool_max_threads);\n            ((PooledExecutor)thread_pool).setMinimumPoolSize(thread_pool_min_threads);\n            ((PooledExecutor)thread_pool).setKeepAliveTime(thread_pool_keep_alive_time);\n\n            if(thread_pool_rejection_policy != null) {\n                if(thread_pool_rejection_policy.equals(\"abort\"))\n                    ((PooledExecutor)thread_pool).abortWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"wait\"))\n                    ((PooledExecutor)thread_pool).waitWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"discard\"))\n                    ((PooledExecutor)thread_pool).discardWhenBlocked();\n                else if(thread_pool_rejection_policy.equals(\"discardoldest\"))\n                    ((PooledExecutor)thread_pool).discardOldestWhenBlocked();\n                else\n                    ((PooledExecutor)thread_pool).runWhenBlocked();\n\n                ((PooledExecutor)thread_pool).setThreadFactory(new ThreadFactory() {\n                    int num=1;\n                    ThreadGroup threads=new ThreadGroup(pool_thread_group, \"Incoming\");\n                    public Thread newThread(Runnable command) {\n                        return new Thread(threads, command, \"Regular Thread-\" + num++);\n                    }\n                });\n            }\n        }\n        else { // otherwise use the caller's thread to unmarshal the byte buffer into a message\n            thread_pool=new DirectExecutor();\n        }\n\n//        thread_pool=new PooledExecutor(new BoundedBuffer(500), 10);\n//        ((PooledExecutor)thread_pool).setMinimumPoolSize(2);\n//        ((PooledExecutor)thread_pool).setKeepAliveTime(30000);\n//        ((PooledExecutor)thread_pool).runWhenBlocked();\n\n        // alternative: disable the thread pool\n        // thread_pool=new DirectExecutor();\n\n\n        if(loopback) {\n            incoming_msg_queue=new Queue();\n            incoming_msg_handler=new IncomingMessageHandler();\n            incoming_msg_handler.start();\n        }\n\n        if(use_outgoing_packet_handler) {\n            outgoing_queue=new BoundedLinkedQueue(outgoing_queue_max_size);\n            outgoing_packet_handler=new OutgoingPacketHandler();\n            outgoing_packet_handler.start();\n        }\n\n        if(enable_bundling) {\n            bundler=new Bundler();\n        }\n\n        passUp(new Event(Event.SET_LOCAL_ADDRESS, local_addr));\n    }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"public void stop() {\n        if(diag_handler != null) {\n            diag_handler.stop();\n            diag_handler=null;\n        }\n\n        // 1. Stop the outgoing packet handler thread\n        if(outgoing_packet_handler != null)\n            outgoing_packet_handler.stop();\n\n\n        // 2. Stop the incoming packet handler thread\n        if(incoming_packet_handler != null)\n            incoming_packet_handler.stop();\n\n\n        // 3. Finally stop the incoming message handler\n        if(incoming_msg_handler != null)\n            incoming_msg_handler.stop();\n    }","id":64436,"modified_method":"public void stop() {\n        if(diag_handler != null) {\n            diag_handler.stop();\n            diag_handler=null;\n        }\n\n        // 1. Stop the outgoing packet handler thread\n        if(outgoing_packet_handler != null)\n            outgoing_packet_handler.stop();\n\n\n        // 2. Stop the incoming packet handler thread\n        if(incoming_packet_handler != null)\n            incoming_packet_handler.stop();\n\n\n        // 3. Finally stop the incoming message handler\n        if(incoming_msg_handler != null)\n            incoming_msg_handler.stop();\n\n\n        if(unmarshaller_thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)unmarshaller_thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)unmarshaller_thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n\n        if(oob_thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)oob_thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)oob_thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n\n        if(thread_pool instanceof PooledExecutor) {\n            ((PooledExecutor)thread_pool).shutdownNow();\n            try {\n                ((PooledExecutor)thread_pool).awaitTerminationAfterShutdown(POOL_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException e) {\n            }\n        }\n    }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            IncomingQueueEntry entry;\n            while(!incoming_packet_queue.closed() && Thread.currentThread().equals(t)) {\n                try {\n                    entry=(IncomingQueueEntry)incoming_packet_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    break;\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled())\n                        log.error(\"error processing incoming packet\", ex);\n                }\n            }\n            if(trace) log.trace(\"incoming packet handler terminating\");\n        }","id":64437,"modified_method":"public void run() {\n            IncomingPacket entry;\n            while(!incoming_packet_queue.closed() && Thread.currentThread().equals(t)) {\n                try {\n                    entry=(IncomingPacket)incoming_packet_queue.remove();\n                    handleIncomingPacket(entry.dest, entry.sender, entry.buf, entry.offset, entry.length);\n                }\n                catch(QueueClosedException closed_ex) {\n                    break;\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled())\n                        log.error(\"error processing incoming packet\", ex);\n                }\n            }\n            if(trace) log.trace(\"incoming packet handler terminating\");\n        }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Subclasses must call this method when a unicast or multicast message has been received.\n     * Declared final so subclasses cannot override this method.\n     *\n     * @param dest\n     * @param sender\n     * @param data\n     * @param offset\n     * @param length\n     */\n    protected final void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n\n//        if(length == 4) {  // received a diagnostics probe\n//            if(data[offset] == 'd' && data[offset+1] == 'i' && data[offset+2] == 'a' && data[offset+3] == 'g') {\n//                handleDiagnosticProbe(sender);\n//                return;\n//            }\n//        }\n\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(trace){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast) \" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_incoming_packet_handler) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                incoming_packet_queue.add(new IncomingQueueEntry(dest, sender, tmp, offset, length));\n            }\n            else\n                handleIncomingPacket(dest, sender, data, offset, length);\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","id":64438,"modified_method":"/**\n     * Subclasses must call this method when a unicast or multicast message has been received.\n     * Declared final so subclasses cannot override this method.\n     *\n     * @param dest\n     * @param sender\n     * @param data\n     * @param offset\n     * @param length\n     */\n    protected final void receive(Address dest, Address sender, byte[] data, int offset, int length) {\n        if(data == null) return;\n        boolean mcast=dest == null || dest.isMulticastAddress();\n        if(trace){\n            StringBuffer sb=new StringBuffer(\"received (\");\n            sb.append(mcast? \"mcast) \" : \"ucast) \").append(length).append(\" bytes from \").append(sender);\n            log.trace(sb.toString());\n        }\n\n        try {\n            if(use_threadless_stack) {\n                byte[] tmp=new byte[length];\n                System.arraycopy(data, offset, tmp, 0, length);\n                unmarshaller_thread_pool.execute(new IncomingPacket(dest, sender, tmp, offset, length));\n            }\n            else {\n                if(use_incoming_packet_handler) {\n                    byte[] tmp=new byte[length];\n                    System.arraycopy(data, offset, tmp, 0, length);\n                    incoming_packet_queue.add(new IncomingPacket(dest, sender, tmp, offset, length));\n                }\n                else\n                    handleIncomingPacket(dest, sender, data, offset, length);\n            }\n        }\n        catch(Throwable t) {\n            if(log.isErrorEnabled())\n                log.error(new StringBuffer(\"failed handling data from \").append(sender), t);\n        }\n    }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance according to the configuration string\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     */\n    public boolean setProperties(Properties props) {\n        super.setProperties(props);\n\n        boolean ignore_systemprops=Util.isBindAddressPropertyIgnored();\n        String str=Util.getProperty(new String[]{Global.BIND_ADDR, Global.BIND_ADDR_OLD}, props, \"bind_addr\",\n                             ignore_systemprops, null);\n\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"use_local_host\");\n        if(str != null) {\n            use_local_host=new Boolean(str).booleanValue();\n            props.remove(\"use_local_host\");\n        }\n\n        str=props.getProperty(\"bind_to_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"bind_to_all_interfaces\");\n            log.warn(\"bind_to_all_interfaces has been deprecated; use receive_on_all_interfaces instead\");\n        }\n\n        str=props.getProperty(\"receive_on_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"receive_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"receive_interfaces\");\n        if(str != null) {\n            try {\n                receive_interfaces=parseInterfaceList(str);\n                props.remove(\"receive_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"send_on_all_interfaces\");\n        if(str != null) {\n            send_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"send_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"send_interfaces\");\n        if(str != null) {\n            try {\n                send_interfaces=parseInterfaceList(str);\n                props.remove(\"send_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n        str=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatible_packets\");\n        if(str != null) {\n            discard_incompatible_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatible_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(warn) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"outgoing_queue_max_size\");\n        if(str != null) {\n            outgoing_queue_max_size=Integer.parseInt(str);\n            props.remove(\"outgoing_queue_max_size\");\n            if(outgoing_queue_max_size <= 0) {\n                if(log.isWarnEnabled())\n                    log.warn(\"outgoing_queue_max_size of \" + outgoing_queue_max_size + \" is invalid, setting it to 1\");\n                outgoing_queue_max_size=1;\n            }\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest TP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        str=props.getProperty(\"use_addr_translation\");\n        if(str != null) {\n            use_addr_translation=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_addr_translation\");\n        }\n\n        str=props.getProperty(\"enable_diagnostics\");\n        if(str != null) {\n            enable_diagnostics=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_diagnostics\");\n        }\n\n        str=props.getProperty(\"diagnostics_addr\");\n        if(str != null) {\n            diagnostics_addr=str;\n            props.remove(\"diagnostics_addr\");\n        }\n\n        str=props.getProperty(\"diagnostics_port\");\n        if(str != null) {\n            diagnostics_port=Integer.parseInt(str);\n            props.remove(\"diagnostics_port\");\n        }\n\n        if(enable_bundling) {\n            //if (use_outgoing_packet_handler == false)\n              //  if(warn) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            // use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","id":64439,"modified_method":"/**\n     * Setup the Protocol instance according to the configuration string\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     */\n    public boolean setProperties(Properties props) {\n        super.setProperties(props);\n\n        boolean ignore_systemprops=Util.isBindAddressPropertyIgnored();\n        String str=Util.getProperty(new String[]{Global.BIND_ADDR, Global.BIND_ADDR_OLD}, props, \"bind_addr\",\n                             ignore_systemprops, null);\n\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"use_local_host\");\n        if(str != null) {\n            use_local_host=new Boolean(str).booleanValue();\n            props.remove(\"use_local_host\");\n        }\n\n        str=props.getProperty(\"bind_to_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"bind_to_all_interfaces\");\n            log.warn(\"bind_to_all_interfaces has been deprecated; use receive_on_all_interfaces instead\");\n        }\n\n        str=props.getProperty(\"receive_on_all_interfaces\");\n        if(str != null) {\n            receive_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"receive_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"receive_interfaces\");\n        if(str != null) {\n            try {\n                receive_interfaces=parseInterfaceList(str);\n                props.remove(\"receive_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"send_on_all_interfaces\");\n        if(str != null) {\n            send_on_all_interfaces=new Boolean(str).booleanValue();\n            props.remove(\"send_on_all_interfaces\");\n        }\n\n        str=props.getProperty(\"send_interfaces\");\n        if(str != null) {\n            try {\n                send_interfaces=parseInterfaceList(str);\n                props.remove(\"send_interfaces\");\n            }\n            catch(Exception e) {\n                log.error(\"error determining interfaces (\" + str + \")\", e);\n                return false;\n            }\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n        str=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatible_packets\");\n        if(str != null) {\n            discard_incompatible_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatible_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(warn) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_threadless_stack\");\n        if(str != null) {\n            use_threadless_stack=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_threadless_stack\");\n        }\n\n        // ======================================= Unmarshaller thread pool =========================================\n\n        str=props.getProperty(\"unmarshaller_thread_pool.enabled\");\n        if(str != null) {\n            unmarshaller_thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"unmarshaller_thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.min_threads\");\n        if(str != null) {\n            unmarshaller_thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.max_threads\");\n        if(str != null) {\n            unmarshaller_thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.keep_alive_time\");\n        if(str != null) {\n            unmarshaller_thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"unmarshaller_thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.queue_enabled\");\n        if(str != null) {\n            unmarshaller_thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"unmarshaller_thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.queue_max_size\");\n        if(str != null) {\n            unmarshaller_thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"unmarshaller_thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"unmarshaller_thread_pool.rejection_policy\");\n        if(str != null) {\n            unmarshaller_thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"unmarshaller_thread_pool.rejection_policy\");\n        }\n\n\n        // ======================================= OOB thread pool =========================================\n        str=props.getProperty(\"oob_thread_pool.enabled\");\n        if(str != null) {\n            oob_thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"oob_thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.min_threads\");\n        if(str != null) {\n            oob_thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.max_threads\");\n        if(str != null) {\n            oob_thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.keep_alive_time\");\n        if(str != null) {\n            oob_thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"oob_thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.queue_enabled\");\n        if(str != null) {\n            oob_thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"oob_thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.queue_max_size\");\n        if(str != null) {\n            oob_thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"oob_thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"oob_thread_pool.rejection_policy\");\n        if(str != null) {\n            oob_thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"oob_thread_pool.rejection_policy\");\n        }\n\n\n\n\n        // ======================================= Regular thread pool =========================================\n        str=props.getProperty(\"thread_pool.enabled\");\n        if(str != null) {\n            thread_pool_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"thread_pool.enabled\");\n        }\n\n        str=props.getProperty(\"thread_pool.min_threads\");\n        if(str != null) {\n            thread_pool_min_threads=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.min_threads\");\n        }\n\n        str=props.getProperty(\"thread_pool.max_threads\");\n        if(str != null) {\n            thread_pool_max_threads=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.max_threads\");\n        }\n\n        str=props.getProperty(\"thread_pool.keep_alive_time\");\n        if(str != null) {\n            thread_pool_keep_alive_time=Long.valueOf(str).longValue();\n            props.remove(\"thread_pool.keep_alive_time\");\n        }\n\n        str=props.getProperty(\"thread_pool.queue_enabled\");\n        if(str != null) {\n            thread_pool_queue_enabled=Boolean.valueOf(str).booleanValue();\n            props.remove(\"thread_pool.queue_enabled\");\n        }\n\n        str=props.getProperty(\"thread_pool.queue_max_size\");\n        if(str != null) {\n            thread_pool_queue_max_size=Integer.valueOf(str).intValue();\n            props.remove(\"thread_pool.queue_max_size\");\n        }\n\n        str=props.getProperty(\"thread_pool.rejection_policy\");\n        if(str != null) {\n            thread_pool_rejection_policy=str.toLowerCase().trim();\n            if(!(str.equals(\"run\") || str.equals(\"wait\") || str.equals(\"abort\")|| str.equals(\"discard\")|| str.equals(\"discardoldest\"))) {\n                log.error(\"rejection policy of \" + str + \" is unknown\");\n                return false;\n            }\n            props.remove(\"thread_pool.rejection_policy\");\n        }\n\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"outgoing_queue_max_size\");\n        if(str != null) {\n            outgoing_queue_max_size=Integer.parseInt(str);\n            props.remove(\"outgoing_queue_max_size\");\n            if(outgoing_queue_max_size <= 0) {\n                if(log.isWarnEnabled())\n                    log.warn(\"outgoing_queue_max_size of \" + outgoing_queue_max_size + \" is invalid, setting it to 1\");\n                outgoing_queue_max_size=1;\n            }\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest TP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        str=props.getProperty(\"use_addr_translation\");\n        if(str != null) {\n            use_addr_translation=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_addr_translation\");\n        }\n\n        str=props.getProperty(\"enable_diagnostics\");\n        if(str != null) {\n            enable_diagnostics=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_diagnostics\");\n        }\n\n        str=props.getProperty(\"diagnostics_addr\");\n        if(str != null) {\n            diagnostics_addr=str;\n            props.remove(\"diagnostics_addr\");\n        }\n\n        str=props.getProperty(\"diagnostics_port\");\n        if(str != null) {\n            diagnostics_port=Integer.parseInt(str);\n            props.remove(\"diagnostics_port\");\n        }\n\n        if(enable_bundling) {\n            //if (use_outgoing_packet_handler == false)\n              //  if(warn) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            // use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Caller by the layer above this layer. Usually we just put this Message\n     * into the send queue and let one or more worker threads handle it. A worker thread\n     * then removes the Message from the send queue, performs a conversion and adds the\n     * modified Message to the send queue of the layer below it, by calling down()).\n     */\n    public void down(Event evt) {\n        if(evt.getType() != Event.MSG) {  // unless it is a message handle it and respond\n            handleDownEvent(evt);\n            return;\n        }\n\n        Message msg=(Message)evt.getArg();\n        if(header != null) {\n            // added patch by Roland Kurmann (March 20 2003)\n            // msg.putHeader(name, new TpHeader(channel_name));\n            msg.putHeader(name, header);\n        }\n\n        // Because we don't call Protocol.passDown(), we notify the observer directly (e.g. PerfObserver).\n        // This way, we still have performance numbers for TP\n        if(observer != null)\n            observer.passDown(evt);\n\n        setSourceAddress(msg); // very important !! listToBuffer() will fail with a null src address !!\n        if(trace) {\n            StringBuffer sb=new StringBuffer(\"sending msg to \").append(msg.getDest()).\n                    append(\" (src=\").append(msg.getSrc()).append(\"), headers are \").append(msg.getHeaders());\n            log.trace(sb.toString());\n        }\n\n        // Don't send if destination is local address. Instead, switch dst and src and put in up_queue.\n        // If multicast message, loopback a copy directly to us (but still multicast). Once we receive this,\n        // we will discard our own multicast message\n        Address dest=msg.getDest();\n        boolean multicast=dest == null || dest.isMulticastAddress();\n        if(loopback && (multicast || dest.equals(local_addr))) {\n            Message copy=msg.copy();\n\n            // copy.removeHeader(name); // we don't remove the header\n            copy.setSrc(local_addr);\n            // copy.setDest(dest);\n\n            if(trace) log.trace(new StringBuffer(\"looping back message \").append(copy));\n            try {\n                incoming_msg_queue.add(copy);\n            }\n            catch(QueueClosedException e) {\n                // log.error(\"failed adding looped back message to incoming_msg_queue\", e);\n            }\n\n            if(!multicast)\n                return;\n        }\n\n        try {\n            if(use_outgoing_packet_handler)\n                outgoing_queue.put(msg);\n            else\n                send(msg, dest, multicast);\n        }\n        catch(QueueClosedException closed_ex) {\n        }\n        catch(InterruptedException interruptedEx) {\n        }\n        catch(Throwable e) {\n            if(log.isErrorEnabled()) {\n                String dst=msg.getDest() == null? \"null\" : msg.getDest().toString();\n                log.error(\"failed sending message to \" + dst + \" (\" + msg.getLength() + \" bytes)\", e.getCause());\n            }\n        }\n    }","id":64440,"modified_method":"/**\n     * Caller by the layer above this layer. Usually we just put this Message\n     * into the send queue and let one or more worker threads handle it. A worker thread\n     * then removes the Message from the send queue, performs a conversion and adds the\n     * modified Message to the send queue of the layer below it, by calling down()).\n     */\n    public void down(Event evt) {\n        if(evt.getType() != Event.MSG) {  // unless it is a message handle it and respond\n            handleDownEvent(evt);\n            return;\n        }\n\n        Message msg=(Message)evt.getArg();\n        if(header != null) {\n            // added patch by Roland Kurmann (March 20 2003)\n            // msg.putHeader(name, new TpHeader(channel_name));\n            msg.putHeader(name, header);\n        }\n\n        // Because we don't call Protocol.passDown(), we notify the observer directly (e.g. PerfObserver).\n        // This way, we still have performance numbers for TP\n        if(observer != null)\n            observer.passDown(evt);\n\n        setSourceAddress(msg); // very important !! listToBuffer() will fail with a null src address !!\n        if(trace) {\n            StringBuffer sb=new StringBuffer(\"sending msg to \").append(msg.getDest()).\n                    append(\" (src=\").append(msg.getSrc()).append(\"), headers are \").append(msg.getHeaders());\n            log.trace(sb.toString());\n        }\n\n        // Don't send if destination is local address. Instead, switch dst and src and put in up_queue.\n        // If multicast message, loopback a copy directly to us (but still multicast). Once we receive this,\n        // we will discard our own multicast message\n        Address dest=msg.getDest();\n        boolean multicast=dest == null || dest.isMulticastAddress();\n        if(loopback && (multicast || dest.equals(local_addr))) {\n            Message copy=msg.copy();\n\n            // copy.removeHeader(name); // we don't remove the header\n            // copy.setDest(dest);\n\n            if(trace) log.trace(new StringBuffer(\"looping back message \").append(copy));\n            // passUp(evt);\n\n\n            try {\n                incoming_msg_queue.add(copy);\n            }\n            catch(QueueClosedException e) {\n            }\n\n            if(!multicast)\n                return;\n        }\n\n        try {\n            if(use_outgoing_packet_handler)\n                outgoing_queue.put(msg);\n            else\n                send(msg, dest, multicast);\n        }\n        catch(QueueClosedException closed_ex) {\n        }\n        catch(InterruptedException interruptedEx) {\n        }\n        catch(Throwable e) {\n            if(log.isErrorEnabled()) {\n                String dst=msg.getDest() == null? \"null\" : msg.getDest().toString();\n                log.error(\"failed sending message to \" + dst + \" (\" + msg.getLength() + \" bytes)\", e.getCause());\n            }\n        }\n    }","commit_id":"16313a8e735cfeaec97a7eb5be84f7c07373cd83","url":"https://github.com/belaban/JGroups"},{"original_method":"public ExileOpponentsCardFromExileToGraveyardCost(boolean thatPlayersText) {\n        if (false) {\n            this.text = \"put a card an opponent owns from exile into its owner's graveyard\";\n        } else {\n            this.text = \"put a card an opponent owns from exile into that player's graveyard\";\n        }\n    }","id":64441,"modified_method":"public ExileOpponentsCardFromExileToGraveyardCost(boolean thatPlayersText) {\n        if (!thatPlayersText) {\n            this.text = \"put a card an opponent owns from exile into its owner's graveyard\";\n        } else {\n            this.text = \"put a card an opponent owns from exile into that player's graveyard\";\n        }\n    }","commit_id":"9fcefc8cd7d31f4a8df077bb9abcd0e574da9da5","url":"https://github.com/magefree/mage"},{"original_method":"public SerendibDjinnEffect() {\n        super(Outcome.Damage);\n        this.staticText = \"Sacrifice a Land. If it is an Island {this} deals 3 damage to you.\";\n    }","id":64442,"modified_method":"public SerendibDjinnEffect() {\n        super(Outcome.Damage);\n        this.staticText = \"sacrifice a Land. If it is an Island {this} deals 3 damage to you\";\n    }","commit_id":"9fcefc8cd7d31f4a8df077bb9abcd0e574da9da5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player player = game.getPlayer(source.getControllerId());\n        Permanent sourcePermanent = game.getPermanent(source.getSourceId());\n        if (sourcePermanent == null) {\n            sourcePermanent = (Permanent) game.getLastKnownInformation(source.getSourceId(), Zone.BATTLEFIELD);\n        }\n        if (player == null || sourcePermanent == null) {\n            return false;\n        }\n\n        FilterControlledLandPermanent filter = new FilterControlledLandPermanent(\"Controlled Land\");\n        filter.add(new AnotherPredicate());\n\n        Target target = new TargetControlledPermanent(1, 1, filter, true);\n        \n        if (target.canChoose(source.getSourceId(), player.getId(), game)) {\n            player.choose(Outcome.Sacrifice, target, source.getSourceId(), game);\n            Permanent permanent = game.getPermanent(target.getFirstTarget());\n            if (permanent != null) {\n                if (permanent.hasSubtype(\"Island\")) {\n                    player.damage(3, source.getSourceId(), game, false, true);\n                }\n                permanent.sacrifice(source.getSourceId(), game);\n                return true;\n            }\n        }\n        return false;\n    }","id":64443,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        if (controller != null) {\n            Target target = new TargetControlledPermanent(1, 1, new FilterControlledLandPermanent(), true);\n            if (target.canChoose(source.getSourceId(), controller.getId(), game)) {\n                controller.choose(Outcome.Sacrifice, target, source.getSourceId(), game);\n                Permanent permanent = game.getPermanent(target.getFirstTarget());\n                if (permanent != null) {\n                    permanent.sacrifice(source.getSourceId(), game);\n                    if (permanent.hasSubtype(\"Island\")) {\n                        controller.damage(3, source.getSourceId(), game, false, true);\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"9fcefc8cd7d31f4a8df077bb9abcd0e574da9da5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n\t\tPlayer player = game.getPlayer(source.getTargets().getFirstTarget());\n\t\tfilter.setTargetController(TargetController.YOU);\n\t\tTargetPermanent target = new TargetPermanent(count, count, filter, false);\n\n\t\t//A spell or ability could have removed the only legal target this player\n\t\t//had, if thats the case this ability should fizzle.\n\t\tif (target.canChoose(player.getId(), game)) {\n\t\t\twhile (!target.isChosen()) {\n\t\t\t\tplayer.choose(Outcome.Sacrifice, target, game);\n\t\t\t}\n\n\t\t\tPermanent permanent = game.getPermanent(target.getFirstTarget());\n\n\t\t\tif ( permanent != null ) {\n\t\t\t\treturn permanent.sacrifice(source.getId(), game);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","id":64444,"modified_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n\t\tPlayer player = game.getPlayer(source.getTargets().getFirstTarget());\n\t\tfilter.setTargetController(TargetController.YOU);\n\t\tTargetPermanent target = new TargetPermanent(count, count, filter, false);\n\n\t\t//A spell or ability could have removed the only legal target this player\n\t\t//had, if thats the case this ability should fizzle.\n\t\tif (target.canChoose(player.getId(), game)) {\n\t\t\tboolean abilityApplied = false;\n\t\t\twhile (!target.isChosen()) {\n\t\t\t\tplayer.choose(Outcome.Sacrifice, target, game);\n\t\t\t}\n\n\t\t\tfor ( int idx = 0; idx < target.getTargets().size(); idx++) {\n\t\t\t\tPermanent permanent = game.getPermanent((UUID)target.getTargets().get(idx));\n\n\t\t\t\tif ( permanent != null ) {\n\t\t\t\t\tabilityApplied |= permanent.sacrifice(source.getId(), game);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn abilityApplied;\n\t\t}\n\t\treturn false;\n\t}","commit_id":"e035e240f97f219815aea13064a1d22a10e194af","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        for (UUID playerId : game.getPlayerList()) {\r\n            Player player = game.getPlayer(playerId);\r\n            if (player != null) {\r\n                for (int i = 0; i < 3; i++) {\r\n                    Card card = player.getHand().getRandom(game);\r\n                    if (card != null) {\r\n                        player.discard(card, source, game);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","id":64445,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n\r\n        for (UUID playerId : controller.getInRange()) {\r\n            Player player = game.getPlayer(playerId);\r\n            if (player != null) {\r\n                for (int i = 0; i < 3; i++) {\r\n                    Card card = player.getHand().getRandom(game);\r\n                    if (card != null) {\r\n                        player.discard(card, source, game);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","commit_id":"a6a333422b48f4c6c2261419b09bb88a21b94976","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        List<UUID> perms = new ArrayList<UUID>();\n        for (Player player: game.getPlayers().values()) {\n            int numTargets = Math.min(amount, game.getBattlefield().countAll(filter, player.getId(), game));\n            TargetControlledPermanent target = new TargetControlledPermanent(numTargets, numTargets, filter, false);\n            if (target.canChoose(player.getId(), game)) {\n                while (!target.isChosen()) {\n                    player.choose(Outcome.Sacrifice, target, source.getSourceId(), game);\n                }\n                perms.addAll(target.getTargets());\n            }\n        }\n        for (UUID permID: perms) {\n            Permanent permanent = game.getPermanent(permID);\n            if (permanent != null)\n                permanent.sacrifice(source.getSourceId(), game);\n        }\n        return true;\n    }","id":64446,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n\r\n        List<UUID> perms = new ArrayList<UUID>();\r\n        for (UUID playerId : controller.getInRange()) {\r\n            Player player = game.getPlayer(playerId);\r\n            if (player != null) {\r\n                int numTargets = Math.min(amount, game.getBattlefield().countAll(filter, player.getId(), game));\r\n                TargetControlledPermanent target = new TargetControlledPermanent(numTargets, numTargets, filter, false);\r\n                if (target.canChoose(player.getId(), game)) {\r\n                    while (!target.isChosen()) {\r\n                        player.choose(Outcome.Sacrifice, target, source.getSourceId(), game);\r\n                    }\r\n                    perms.addAll(target.getTargets());\r\n                }\r\n            }\r\n        }\r\n        for (UUID permID : perms) {\r\n            Permanent permanent = game.getPermanent(permID);\r\n            if (permanent != null) {\r\n                permanent.sacrifice(source.getSourceId(), game);\r\n            }\r\n        }\r\n        return true;\r\n    }","commit_id":"a6a333422b48f4c6c2261419b09bb88a21b94976","url":"https://github.com/magefree/mage"},{"original_method":"public JCTree transform(IndexExpression access) {\n        boolean safe = access.getIndexOperator() instanceof Tree.SafeIndexOp;\n\n        // depends on the operator\n        ElementOrRange elementOrRange = access.getElementOrRange();\n        if(elementOrRange instanceof Tree.Element){\n            Tree.Element element = (Element) elementOrRange;\n            // let's see what types there are\n            ProducedType leftType = getSupertype(access.getPrimary(), access.getUnit().getCorrespondenceDeclaration());\n            ProducedType rightType = getFirstTypeArgument(leftType);\n            \n            // do the index\n            JCExpression index = transformExpression(element.getExpression(), BoxingStrategy.BOXED, rightType);\n\n            // look at the lhs\n            JCExpression lhs = transformExpression(access.getPrimary(), BoxingStrategy.UNBOXED, leftType);\n\n            if(!safe)\n                // make a \"lhs.item(index)\" call\n                return at(access).Apply(List.<JCTree.JCExpression>nil(), \n                        make().Select(lhs, names().fromString(\"item\")), List.of(index));\n            // make a (let ArrayElem tmp = lhs in (tmp != null ? tmp.item(index) : null)) call\n            JCExpression arrayType = makeJavaType(access.getPrimary().getTypeModel());\n            Name varName = names().fromString(tempName(\"safeaccess\"));\n            // tmpVar.item(index)\n            JCExpression safeAccess = make().Apply(List.<JCTree.JCExpression>nil(), \n                    make().Select(make().Ident(varName), names().fromString(\"item\")), List.of(index));\n\n            at(access.getPrimary());\n            // (tmpVar != null ? safeAccess : null)\n            JCConditional conditional = make().Conditional(make().Binary(JCTree.NE, make().Ident(varName), makeNull()), \n                    safeAccess, makeNull());\n            // ArrayElem tmp = lhs\n            JCVariableDecl tmpVar = make().VarDef(make().Modifiers(0), varName, arrayType, lhs);\n            // (let tmpVar in conditional)\n            return make().LetExpr(tmpVar, conditional);\n        }else{\n            // look at the lhs\n            JCExpression lhs = transformExpression(access.getPrimary(), BoxingStrategy.UNBOXED, null);\n            // do the indices\n            Tree.ElementRange range = (ElementRange) elementOrRange;\n            JCExpression start = transformExpression(range.getLowerBound(), BoxingStrategy.UNBOXED, null);\n            JCExpression end = transformExpression(range.getUpperBound(), BoxingStrategy.UNBOXED, null);\n            // make a \"lhs.span(start, end)\" call\n            return at(access).Apply(List.<JCTree.JCExpression>nil(), \n                    make().Select(lhs, names().fromString(\"span\")), List.of(start, end));\n        }\n    }","id":64447,"modified_method":"public JCTree transform(IndexExpression access) {\n        boolean safe = access.getIndexOperator() instanceof Tree.SafeIndexOp;\n\n        // depends on the operator\n        ElementOrRange elementOrRange = access.getElementOrRange();\n        if(elementOrRange instanceof Tree.Element){\n            Tree.Element element = (Element) elementOrRange;\n            // let's see what types there are\n            ProducedType leftType = access.getPrimary().getTypeModel();\n            if(safe)\n                leftType = access.getUnit().getDefiniteType(leftType);\n            ProducedType leftCorrespondenceType = leftType.getSupertype(access.getUnit().getCorrespondenceDeclaration());\n            ProducedType rightType = getFirstTypeArgument(leftCorrespondenceType);\n            \n            // do the index\n            JCExpression index = transformExpression(element.getExpression(), BoxingStrategy.BOXED, rightType);\n\n            // look at the lhs\n            JCExpression lhs = transformExpression(access.getPrimary(), BoxingStrategy.UNBOXED, leftCorrespondenceType);\n\n            if(!safe)\n                // make a \"lhs.item(index)\" call\n                return at(access).Apply(List.<JCTree.JCExpression>nil(), \n                        make().Select(lhs, names().fromString(\"item\")), List.of(index));\n            // make a (let ArrayElem tmp = lhs in (tmp != null ? tmp.item(index) : null)) call\n            JCExpression arrayType = makeJavaType(leftCorrespondenceType);\n            Name varName = names().fromString(tempName(\"safeaccess\"));\n            // tmpVar.item(index)\n            JCExpression safeAccess = make().Apply(List.<JCTree.JCExpression>nil(), \n                    make().Select(make().Ident(varName), names().fromString(\"item\")), List.of(index));\n\n            at(access.getPrimary());\n            // (tmpVar != null ? safeAccess : null)\n            JCConditional conditional = make().Conditional(make().Binary(JCTree.NE, make().Ident(varName), makeNull()), \n                    safeAccess, makeNull());\n            // ArrayElem tmp = lhs\n            JCVariableDecl tmpVar = make().VarDef(make().Modifiers(0), varName, arrayType, lhs);\n            // (let tmpVar in conditional)\n            return make().LetExpr(tmpVar, conditional);\n        }else{\n            // look at the lhs\n            JCExpression lhs = transformExpression(access.getPrimary(), BoxingStrategy.UNBOXED, null);\n            // do the indices\n            Tree.ElementRange range = (ElementRange) elementOrRange;\n            JCExpression start = transformExpression(range.getLowerBound(), BoxingStrategy.UNBOXED, null);\n            JCExpression end = transformExpression(range.getUpperBound(), BoxingStrategy.UNBOXED, null);\n            // make a \"lhs.span(start, end)\" call\n            return at(access).Apply(List.<JCTree.JCExpression>nil(), \n                    make().Select(lhs, names().fromString(\"span\")), List.of(start, end));\n        }\n    }","commit_id":"128915008792bf076e27881a5ed7be2525c765b2","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public static InvocationBuilder invocation(AbstractTransformer gen, Tree.InvocationExpression invocation) {\n        InvocationBuilder builder = new InvocationBuilder(gen, invocation.getTypeModel(), invocation);\n        builder.invocation = invocation;\n        builder.primary = invocation.getPrimary();\n        if (invocation.getPositionalArgumentList() != null) {\n            builder.transformPositionalInvocation();\n        } else if (invocation.getNamedArgumentList() != null) {\n            builder.transformNamedInvocation();\n        } else {\n            throw new RuntimeException(\"Illegal State\");\n        }\n        return builder;\n    }","id":64448,"modified_method":"public static InvocationBuilder invocation(AbstractTransformer gen, \n            final Tree.InvocationExpression invocation) {\n        \n        Tree.Primary primary = invocation.getPrimary();\n        Declaration primaryDeclaration = ((Tree.MemberOrTypeExpression)primary).getDeclaration();\n        InvocationBuilder builder;\n        if (invocation.getPositionalArgumentList() != null) {\n            final Tree.PositionalArgumentList positional = invocation.getPositionalArgumentList();\n            java.util.List<ParameterList> paramLists = ((Functional)primaryDeclaration).getParameterLists();\n            builder = new PositionalInvocationBuilder(gen, \n                    primary, primaryDeclaration,\n                    invocation.getTypeModel(), \n                    invocation,\n                    paramLists) {\n                \n                @Override\n                protected Expression getExpression(int argIndex) {\n                    return positional.getPositionalArguments().get(argIndex).getExpression();\n                }\n                @Override\n                protected JCExpression getTransformedExpression(int argIndex, boolean isRaw, java.util.List<ProducedType> typeArgumentModels) {\n                    return gen().expressionGen().transformArg(\n                            getExpression(argIndex), \n                            getParameter(argIndex), isRaw, typeArgumentModels);\n                }\n                @Override\n                protected Parameter getParameter(int argIndex) {\n                    return positional.getPositionalArguments().get(argIndex).getParameter();\n                }\n                @Override\n                protected int getNumArguments() {\n                    return positional.getPositionalArguments().size();\n                }\n                @Override\n                protected boolean hasEllipsis() {\n                    return positional.getEllipsis() != null;\n                }\n                \n            };\n        } else if (invocation.getNamedArgumentList() != null) {\n            builder = new InvocationBuilder(gen, primary, primaryDeclaration, invocation.getTypeModel(), invocation) {\n                protected boolean containsParameter(java.util.List<Tree.NamedArgument> namedArguments, Parameter param) {\n                    for (Tree.NamedArgument namedArg : namedArguments) {\n                        Parameter declaredParam = namedArg.getParameter();\n                        if (param == declaredParam) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                @Override\n                protected void compute() {\n                    java.util.List<ProducedType> typeArgumentModels = getTypeArguments();\n                    boolean isRaw = typeArgs.isEmpty();\n                    \n                    if (getPrimaryDeclaration() != null) {\n                        java.util.List<ParameterList> paramLists = ((Functional)getPrimaryDeclaration()).getParameterLists();\n                        java.util.List<Tree.NamedArgument> namedArguments = invocation.getNamedArgumentList().getNamedArguments();\n                        java.util.List<Parameter> declaredParams = paramLists.get(0).getParameters();\n                        Parameter lastDeclared = declaredParams.size() > 0 ? declaredParams.get(declaredParams.size() - 1) : null;\n                        boolean boundSequenced = false;\n                        String varBaseName = gen().aliasName(\"arg\");\n                        callVarName = varBaseName + \"$callable$\";\n                        \n                        int numDeclared = declaredParams.size();\n                        int numDeclaredFixed = (lastDeclared != null && lastDeclared.isSequenced()) ? numDeclared - 1 : numDeclared;\n                        int numPassed = namedArguments.size();\n                        int idx = 0;\n                        for (Tree.NamedArgument namedArg : namedArguments) {\n                            gen().at(namedArg);\n                            Tree.Expression expr = ((Tree.SpecifiedArgument)namedArg).getSpecifierExpression().getExpression();\n                            Parameter declaredParam = namedArg.getParameter();\n                            int index;\n                            BoxingStrategy boxType;\n                            ProducedType type;\n                            if (declaredParam != null) {\n                                if (declaredParam.isSequenced()) {\n                                    boundSequenced = true;\n                                }\n                                index = declaredParams.indexOf(declaredParam);\n                                boxType = Util.getBoxingStrategy(declaredParam);\n                                type = gen().getTypeForParameter(declaredParam, isRaw, typeArgumentModels);\n                            } else {\n                                // Arguments of overloaded methods don't have a reference to parameter\n                                index = idx++;\n                                boxType = BoxingStrategy.UNBOXED;\n                                type = expr.getTypeModel();\n                            }\n                            String varName = varBaseName + \"$\" + index;\n                            // if we can't pick up on the type from the declaration, revert to the type of the expression\n                            if(gen().isTypeParameter(type))\n                                type = expr.getTypeModel();\n                            JCExpression typeExpr = gen().makeJavaType(type, (boxType == BoxingStrategy.BOXED) ? AbstractTransformer.TYPE_ARGUMENT : 0);\n                            JCExpression argExpr = gen().expressionGen().transformExpression(expr, boxType, type);\n                            JCVariableDecl varDecl = gen().makeVar(varName, typeExpr, argExpr);\n                            vars.append(varDecl);\n                        }\n                        \n                        if (!Decl.isOverloaded(getPrimaryDeclaration()) && numPassed < numDeclaredFixed) {\n                            boolean needsThis = false;\n                            if (Decl.withinClassOrInterface(getPrimaryDeclaration())) {\n                                // first append $this\n                                ProducedType thisType = gen().getThisType(getPrimaryDeclaration());\n                                vars.append(gen().makeVar(varBaseName + \"$this$\", gen().makeJavaType(thisType, AbstractTransformer.NO_PRIMITIVES), gen().makeUnquotedIdent(callVarName)));\n                                needsThis = true;\n                            }\n                            // append any arguments for defaulted parameters\n                            for (int ii = 0; ii < numDeclaredFixed; ii++) {\n                                Parameter param = declaredParams.get(ii);\n                                if (containsParameter(namedArguments, param)) {\n                                    continue;\n                                }\n                                String varName = varBaseName + \"$\" + ii;\n                                String methodName = Util.getDefaultedParamMethodName(getPrimaryDeclaration(), param);\n                                List<JCExpression> arglist = makeThisVarRefArgumentList(varBaseName, ii, needsThis);\n                                JCExpression argExpr;\n                                if (!param.isSequenced()) {\n                                    Declaration container = param.getDeclaration().getRefinedDeclaration();\n                                    if (!container.isToplevel()) {\n                                        container = (Declaration)container.getContainer();\n                                    }\n                                    String className = Util.getCompanionClassName(container.getName());\n                                    argExpr = gen().at(node).Apply(null, gen().makeQuotedQualIdent(gen().makeQuotedFQIdent(container.getQualifiedNameString()), className, methodName), arglist);\n                                } else {\n                                    argExpr = gen().makeEmpty();\n                                }\n                                BoxingStrategy boxType = Util.getBoxingStrategy(param);\n                                ProducedType type = gen().getTypeForParameter(param, isRaw, typeArgumentModels);\n                                JCExpression typeExpr = gen().makeJavaType(type, (boxType == BoxingStrategy.BOXED) ? AbstractTransformer.TYPE_ARGUMENT : 0);\n                                JCVariableDecl varDecl = gen().makeVar(varName, typeExpr, argExpr);\n                                vars.append(varDecl);\n                            }\n                        }\n                        \n                        Tree.SequencedArgument sequencedArgument = invocation.getNamedArgumentList().getSequencedArgument();\n                        if (sequencedArgument != null) {\n                            gen().at(sequencedArgument);\n                            String varName = varBaseName + \"$\" + numDeclaredFixed;\n                            JCExpression typeExpr = gen().makeJavaType(lastDeclared.getType(), AbstractTransformer.WANT_RAW_TYPE);\n                            JCExpression argExpr = gen().makeSequenceRaw(sequencedArgument.getExpressionList().getExpressions());\n                            JCVariableDecl varDecl = gen().makeVar(varName, typeExpr, argExpr);\n                            vars.append(varDecl);\n                        } else if (lastDeclared != null \n                                && lastDeclared.isSequenced() \n                                && !boundSequenced) {\n                            String varName = varBaseName + \"$\" + numDeclaredFixed;\n                            JCExpression typeExpr = gen().makeJavaType(lastDeclared.getType(), AbstractTransformer.WANT_RAW_TYPE);\n                            JCVariableDecl varDecl = gen().makeVar(varName, typeExpr, gen().makeEmpty());\n                            vars.append(varDecl);\n                        }\n                        \n                        if (!Decl.isOverloaded(getPrimaryDeclaration())) {\n                            args.appendList(makeVarRefArgumentList(varBaseName, numDeclared));\n                        } else {\n                            // For overloaded methods (and therefore Java interop) we just pass the arguments we have\n                            args.appendList(makeVarRefArgumentList(varBaseName, numPassed));\n                        }\n                    }\n                }\n            };\n        } else {\n            throw new RuntimeException(\"Illegal State\");\n        }\n        builder.compute();\n        return builder;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private List<JCExpression> makeThisVarRefArgumentList(String varBaseName, int argCount, boolean needsThis) {\n        List<JCExpression> names = List.<JCExpression> nil();\n        if (needsThis) {\n            names = names.append(gen.makeUnquotedIdent(varBaseName + \"$this$\"));\n        }\n        names = names.appendList(makeVarRefArgumentList(varBaseName, argCount));\n        return names;\n    }","id":64449,"modified_method":"protected List<JCExpression> makeThisVarRefArgumentList(String varBaseName, int argCount, boolean needsThis) {\n        List<JCExpression> names = List.<JCExpression> nil();\n        if (needsThis) {\n            names = names.append(gen().makeUnquotedIdent(varBaseName + \"$this$\"));\n        }\n        names = names.appendList(makeVarRefArgumentList(varBaseName, argCount));\n        return names;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private InvocationBuilder(AbstractTransformer gen, ProducedType returnType, Node node) {\n        this.gen = gen;\n        this.returnType = returnType;\n        this.node = node;\n    }","id":64450,"modified_method":"protected InvocationBuilder(AbstractTransformer gen, \n            Tree.Primary primary, Declaration primaryDeclaration,\n            ProducedType returnType, Node node) {\n        this.gen = gen;\n        this.primary = primary;\n        this.primaryDeclaration = primaryDeclaration;\n        this.returnType = returnType;\n        this.node = node;\n        typeArgs = transformTypeArguments(getTypeArguments());\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private void transformPositionalInvocation() {\n        Declaration primaryDecl = ((Tree.MemberOrTypeExpression)invocation.getPrimary()).getDeclaration();\n        Tree.PositionalArgumentList positional = invocation.getPositionalArgumentList();\n        java.util.List<ProducedType> typeArgumentModels = getTypeArguments(invocation);\n        java.util.List<ParameterList> paramLists = ((Functional)primaryDecl).getParameterLists();\n        computeCallInfo(primaryDecl, new PositionalArguments(positional), typeArgumentModels, paramLists);\n    }","id":64451,"modified_method":"protected JCExpression transformInvocation(JCExpression primaryExpr, String selector) {\n        JCExpression actualPrimExpr = null;\n        if (primary instanceof Tree.QualifiedTypeExpression\n                && ((Tree.QualifiedTypeExpression)primary).getPrimary() instanceof Tree.BaseTypeExpression) {\n            actualPrimExpr = gen().makeSelect(primaryExpr, \"this\");\n        } else {\n            actualPrimExpr = primaryExpr;\n        }\n        if (vars != null && !vars.isEmpty() \n                && primaryExpr != null \n                && selector != null) {\n            // Prepare the first argument holding the primary for the call\n            JCExpression callVarExpr = gen().makeUnquotedIdent(callVarName);\n            ProducedType type = ((Tree.QualifiedMemberOrTypeExpression)primary).getTarget().getQualifyingType();\n            JCVariableDecl callVar = gen().makeVar(callVarName, gen().makeJavaType(type, AbstractTransformer.NO_PRIMITIVES), actualPrimExpr);\n            vars.prepend(callVar);\n            actualPrimExpr = callVarExpr;\n        }\n        \n        JCExpression resultExpr;\n        if (primary instanceof Tree.BaseTypeExpression) {\n            ProducedType classType = (ProducedType)((Tree.BaseTypeExpression)primary).getTarget();\n            resultExpr = gen().make().NewClass(null, null, gen().makeJavaType(classType, AbstractTransformer.CLASS_NEW), args.toList(), null);\n        } else if (primary instanceof Tree.QualifiedTypeExpression) {\n            resultExpr = gen().make().NewClass(actualPrimExpr, null, gen().makeQuotedIdent(selector), args.toList(), null);\n        } else {\n            Declaration decl = ((Tree.StaticMemberOrTypeExpression)primary).getDeclaration();\n            if (decl instanceof FunctionalParameter) {\n                if (primaryExpr != null) {\n                    actualPrimExpr = gen().makeQualIdent(primaryExpr, decl.getName());\n                } else {\n                    actualPrimExpr = gen().makeQuotedIdent(decl.getName());\n                }\n                selector = \"call\";\n            }\n            resultExpr = gen().make().Apply(typeArgs, gen().makeQuotedQualIdent(actualPrimExpr, selector), args.toList());\n        }\n\n        if (vars != null && !vars.isEmpty()) {\n            if (gen().isVoid(returnType)) {\n                // void methods get wrapped like (let $arg$1=expr, $arg$0=expr in call($arg$0, $arg$1); null)\n                return gen().make().LetExpr(vars.toList(), List.<JCStatement>of(gen().make().Exec(resultExpr)), gen().makeNull());\n            } else {\n                // all other methods like (let $arg$1=expr, $arg$0=expr in call($arg$0, $arg$1))\n                return gen().make().LetExpr(vars.toList(), resultExpr);\n            }\n        } else {\n            return resultExpr;\n        }\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public static InvocationBuilder invocationForCallable(AbstractTransformer gen, Term expr, Functional parameter) {\n        InvocationBuilder builder = new InvocationBuilder(gen, gen.expressionGen().getCallableReturnType(expr), expr);\n        builder.transformForCallable(expr, parameter);\n        return builder;\n    }","id":64452,"modified_method":"public static InvocationBuilder invocationForCallable(AbstractTransformer gen, Term expr, Functional parameter) {\n        final Tree.MemberOrTypeExpression primary;\n        if (expr instanceof Tree.MemberOrTypeExpression) {\n            primary = (Tree.MemberOrTypeExpression)expr;\n        } else {\n            throw new RuntimeException(expr+\"\");\n        }\n        \n        final java.util.List<Parameter> declaredParameters = ((Functional)primary.getDeclaration()).getParameterLists().get(0).getParameters();\n\n        TypeDeclaration primaryDeclaration = expr.getTypeModel().getDeclaration();\n        \n        java.util.List<ParameterList> paramLists = parameter.getParameterLists();\n        final java.util.List<Parameter> functionalParameters = paramLists.get(0).getParameters();\n        \n        \n        PositionalInvocationBuilder builder = new PositionalInvocationBuilder(\n                gen,\n                primary,\n                primaryDeclaration,\n                gen.expressionGen().getCallableReturnType(expr), \n                expr,  \n                paramLists) {\n            \n            @Override\n            protected Expression getExpression(int argIndex) {\n                throw new RuntimeException(\"Defaulted parameters are not defaulted when called via a method reference\");\n            }\n            @Override\n            protected Parameter getParameter(int argIndex) {\n                return paramLists.get(0).getParameters().get(argIndex);\n            }\n            @Override\n            protected int getNumArguments() {\n                return paramLists.get(0).getParameters().size();\n            }\n            @Override\n            protected boolean hasEllipsis() {\n                return false;\n            }\n            @Override\n            protected JCExpression getTransformedExpression(int argIndex,\n                    boolean isRaw,\n                    java.util.List<ProducedType> typeArgumentModels) {\n                Parameter param = declaredParameters.get(argIndex);\n                JCExpression argExpr;\n                if (functionalParameters.size() <= 3) {\n                    // The Callable has overridden one of the non-varargs call() \n                    // methods\n                    argExpr = gen().make().Ident(\n                            gen().names().fromString(\"arg\"+argIndex));\n                } else {\n                    // The Callable has overridden the varargs call() method\n                    // so we need to index into the varargs array\n                    argExpr = gen().make().Indexed(\n                            gen().make().Ident(gen().names().fromString(\"arg0\")), \n                            gen().make().Literal(argIndex));\n                }\n                ProducedType castType = gen().getTypeForParameter(param, isRaw, getTypeArguments());\n                JCTypeCast cast = gen().make().TypeCast(gen().makeJavaType(castType, AbstractTransformer.NO_PRIMITIVES), argExpr);\n                \n                JCExpression boxed = gen().boxUnboxIfNecessary(cast, true, \n                        param.getType(), declaredParameters.get(argIndex).getUnboxed() ? BoxingStrategy.UNBOXED : BoxingStrategy.BOXED);\n                return boxed;\n            }\n        };\n        builder.compute();\n        return builder;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private List<JCExpression> makeVarRefArgumentList(String varBaseName, int argCount) {\n        List<JCExpression> names = List.<JCExpression> nil();\n        for (int i = 0; i < argCount; i++) {\n            names = names.append(gen.makeUnquotedIdent(varBaseName + \"$\" + i));\n        }\n        return names;\n    }","id":64453,"modified_method":"protected List<JCExpression> makeVarRefArgumentList(String varBaseName, int argCount) {\n        List<JCExpression> names = List.<JCExpression> nil();\n        for (int i = 0; i < argCount; i++) {\n            names = names.append(gen().makeUnquotedIdent(varBaseName + \"$\" + i));\n        }\n        return names;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public JCExpression build() {\n        boolean prevFnCall = gen.expressionGen().isWithinInvocation();\n        gen.expressionGen().setWithinInvocation(true);\n        try {\n            return makeInvocation();\n        } finally {\n            gen.expressionGen().setWithinInvocation(prevFnCall);\n        }\n    }","id":64454,"modified_method":"public JCExpression build() {\n        boolean prevFnCall = gen().expressionGen().isWithinInvocation();\n        gen().expressionGen().setWithinInvocation(true);\n        try {\n            return makeInvocation();\n        } finally {\n            gen().expressionGen().setWithinInvocation(prevFnCall);\n        }\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private List<JCExpression> transformTypeArguments(java.util.List<ProducedType> typeArguments) {\n        List<JCExpression> result = List.<JCExpression> nil();\n        if(typeArguments != null){\n            for (ProducedType arg : typeArguments) {\n                // cancel type parameters and go raw if we can't specify them\n                if(gen.willEraseToObject(arg)\n                        || gen.isTypeParameter(arg))\n                    return List.nil();\n                result = result.append(gen.makeJavaType(arg, AbstractTransformer.TYPE_ARGUMENT));\n            }\n        }\n        return result;\n    }","id":64455,"modified_method":"protected List<JCExpression> transformTypeArguments(java.util.List<ProducedType> typeArguments) {\n        List<JCExpression> result = List.<JCExpression> nil();\n        if(typeArguments != null){\n            for (ProducedType arg : typeArguments) {\n                // cancel type parameters and go raw if we can't specify them\n                if(gen().willEraseToObject(arg)\n                        || gen().isTypeParameter(arg))\n                    return List.nil();\n                result = result.append(gen().makeJavaType(arg, AbstractTransformer.TYPE_ARGUMENT));\n            }\n        }\n        return result;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private JCExpression makeInvocation() {\n        gen.at(node);\n        JCExpression result = gen.expressionGen().transformPrimary(primary, new TermTransformer() {\n\n            @Override\n            public JCExpression transform(JCExpression primaryExpr, String selector) {\n                JCExpression actualPrimExpr = null;\n                if (primary instanceof Tree.QualifiedTypeExpression\n                        && ((Tree.QualifiedTypeExpression)primary).getPrimary() instanceof Tree.BaseTypeExpression) {\n                    actualPrimExpr = gen.makeSelect(primaryExpr, \"this\");\n                } else {\n                    actualPrimExpr = primaryExpr;\n                }\n                if (vars != null && !vars.isEmpty() \n                        && primaryExpr != null \n                        && selector != null) {\n                    // Prepare the first argument holding the primary for the call\n                    JCExpression callVarExpr = gen.makeUnquotedIdent(callVarName);\n                    ProducedType type = ((Tree.QualifiedMemberOrTypeExpression)primary).getTarget().getQualifyingType();\n                    JCVariableDecl callVar = gen.makeVar(callVarName, gen.makeJavaType(type, AbstractTransformer.NO_PRIMITIVES), actualPrimExpr);\n                    vars.prepend(callVar);\n                    actualPrimExpr = callVarExpr;\n                }\n                \n                JCExpression resultExpr;\n                if (primary instanceof Tree.BaseTypeExpression) {\n                    ProducedType classType = (ProducedType)((Tree.BaseTypeExpression)primary).getTarget();\n                    resultExpr = gen.make().NewClass(null, null, gen.makeJavaType(classType, AbstractTransformer.CLASS_NEW), args.toList(), null);\n                } else if (primary instanceof Tree.QualifiedTypeExpression) {\n                    resultExpr = gen.make().NewClass(actualPrimExpr, null, gen.makeQuotedIdent(selector), args.toList(), null);\n                } else {\n                    Declaration decl = ((Tree.StaticMemberOrTypeExpression)primary).getDeclaration();\n                    if (decl instanceof FunctionalParameter) {\n                            //&& !gen.isCeylonCallable(primary.getTypeModel())) {\n                        if (primaryExpr != null) {\n                            actualPrimExpr = gen.makeQualIdent(primaryExpr, decl.getName());\n                        } else {\n                            actualPrimExpr = gen.makeQuotedIdent(decl.getName());\n                        }\n                        selector = \"call\";\n                    }\n                    resultExpr = gen.make().Apply(typeArgs, gen.makeQuotedQualIdent(actualPrimExpr, selector), args.toList());\n                }\n\n                if (vars != null && !vars.isEmpty()) {\n                    if (gen.isVoid(returnType)) {\n                        // void methods get wrapped like (let $arg$1=expr, $arg$0=expr in call($arg$0, $arg$1); null)\n                        return gen.make().LetExpr(vars.toList(), List.<JCStatement>of(gen.make().Exec(resultExpr)), gen.makeNull());\n                    } else {\n                        // all other methods like (let $arg$1=expr, $arg$0=expr in call($arg$0, $arg$1))\n                        return gen.make().LetExpr(vars.toList(), resultExpr);\n                    }\n                } else {\n                    return resultExpr;\n                }\n            }\n            \n        });\n        return result;\n    }","id":64456,"modified_method":"protected JCExpression makeInvocation() {\n        gen().at(node);\n        JCExpression result = gen().expressionGen().transformPrimary(primary, new TermTransformer() {\n            @Override\n            public JCExpression transform(JCExpression primaryExpr, String selector) {\n                return transformInvocation(primaryExpr, selector);\n            }\n        });\n        return result;\n    }","commit_id":"0cc0bf6fc5010b666b1e69af9bca1667fb8835a8","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(QualifiedMemberExpression that) {\n        super.visit(that);\n        // handle errors gracefully\n        if(that.getDeclaration() == null)\n            return;\n        if(that.getMemberOperator() instanceof Tree.SafeMemberOp){\n            TypedDeclaration decl = (TypedDeclaration) that.getDeclaration();\n            if(CodegenUtil.isRaw(decl))\n                CodegenUtil.markRaw(that);\n            if(CodegenUtil.hasTypeErased(decl))\n                CodegenUtil.markTypeErased(that);\n            if(CodegenUtil.hasUntrustedType(decl) || hasTypeParameterWithConstraintsOutsideScope(decl.getType(), that.getScope()))\n                CodegenUtil.markUntrustedType(that);\n            // we must be boxed, since safe member op \"?.\" returns an optional type\n            return;\n        }\n        if (Decl.isValueTypeDecl(that.getPrimary()) && CodegenUtil.isUnBoxed(that.getPrimary())) {\n            // it's unboxed iff it's an unboxable type\n            if(Decl.isValueTypeDecl((TypedDeclaration)that.getDeclaration()))\n                CodegenUtil.markUnBoxed(that);\n            if(CodegenUtil.isRaw((TypedDeclaration) that.getDeclaration()))\n                CodegenUtil.markRaw(that);\n            if(CodegenUtil.hasTypeErased((TypedDeclaration) that.getDeclaration()))\n                CodegenUtil.markTypeErased(that);\n        } else {\n            propagateFromDeclaration(that, (TypedDeclaration)that.getDeclaration());\n        }\n        // special case for spread op, because even if the primary is erased (ex: <T> T|String), its application may not\n        // be (ex: <String>), and in that case we will generate a proper Sequential<String> which is not raw at all\n        if(that.getMemberOperator() instanceof Tree.SpreadOp){\n            // find the return element type\n            ProducedType elementType = that.getTarget().getType();\n            CodegenUtil.markTypeErased(that, hasErasure(elementType));\n        }\n        if(ExpressionTransformer.isSuperOrSuperOf(that.getPrimary())){\n            // if the target is an interface whose type arguments have been turned to raw, make this expression\n            // as erased\n            ProducedReference target = that.getTarget();\n            if(target != null\n                    && target.getQualifyingType() != null\n                    && target.getQualifyingType().getDeclaration() instanceof Interface){\n                if(isRaw(target.getQualifyingType())){\n                    CodegenUtil.markTypeErased(that);\n                }\n                // See note in ClassTransformer.makeDelegateToCompanion for a similar test\n                else{\n                    TypeDeclaration declaration = target.getQualifyingType().getDeclaration();\n                    if(needsRawCastForMixinSuperCall(declaration, target.getType()))\n                        CodegenUtil.markTypeErased(that);\n                }\n            }\n        }\n        if(that.getPrimary().getTypeModel() != null\n                && isRaw(that.getPrimary().getTypeModel())\n                && that.getTarget().getDeclaration() instanceof TypedDeclaration\n                && CodegenUtil.containsTypeParameter(((TypedDeclaration)that.getTarget().getDeclaration()).getType())){\n            CodegenUtil.markTypeErased(that);\n        }\n        if (isRaw(that.getPrimary().getTypeModel())\n                && !that.getTypeModel().getDeclaration().getTypeParameters().isEmpty()) {\n            CodegenUtil.markRaw(that);\n        }\n    }","id":64457,"modified_method":"@Override\n    public void visit(QualifiedMemberExpression that) {\n        super.visit(that);\n        // handle errors gracefully\n        if(that.getDeclaration() == null)\n            return;\n        if(that.getMemberOperator() instanceof Tree.SafeMemberOp){\n            TypedDeclaration decl = (TypedDeclaration) that.getDeclaration();\n            if(CodegenUtil.isRaw(decl))\n                CodegenUtil.markRaw(that);\n            if(CodegenUtil.hasTypeErased(decl))\n                CodegenUtil.markTypeErased(that);\n            if(CodegenUtil.hasUntrustedType(decl) || hasTypeParameterWithConstraintsOutsideScope(decl.getType(), that.getScope()))\n                CodegenUtil.markUntrustedType(that);\n            // we must be boxed, since safe member op \"?.\" returns an optional type\n            return;\n        }\n        if (Decl.isValueTypeDecl(that.getPrimary()) && CodegenUtil.isUnBoxed(that.getPrimary())) {\n            // it's unboxed iff it's an unboxable type\n            if(Decl.isValueTypeDecl((TypedDeclaration)that.getDeclaration()))\n                CodegenUtil.markUnBoxed(that);\n            if(CodegenUtil.isRaw((TypedDeclaration) that.getDeclaration()))\n                CodegenUtil.markRaw(that);\n            if(CodegenUtil.hasTypeErased((TypedDeclaration) that.getDeclaration()))\n                CodegenUtil.markTypeErased(that);\n        } else {\n            propagateFromDeclaration(that, (TypedDeclaration)that.getDeclaration());\n        }\n        // special case for spread op, because even if the primary is erased (ex: <T> T|String), its application may not\n        // be (ex: <String>), and in that case we will generate a proper Sequential<String> which is not raw at all\n        if(that.getMemberOperator() instanceof Tree.SpreadOp){\n            // find the return element type\n            ProducedType elementType = that.getTarget().getType();\n            CodegenUtil.markTypeErased(that, hasErasure(elementType));\n        }\n        if(ExpressionTransformer.isSuperOrSuperOf(that.getPrimary())){\n            // if the target is an interface whose type arguments have been turned to raw, make this expression\n            // as erased\n            ProducedReference target = that.getTarget();\n            if(target != null\n                    && target.getQualifyingType() != null\n                    && target.getQualifyingType().getDeclaration() instanceof Interface){\n                if(isRaw(target.getQualifyingType())){\n                    CodegenUtil.markTypeErased(that);\n                }\n                // See note in ClassTransformer.makeDelegateToCompanion for a similar test\n                else{\n                    TypeDeclaration declaration = target.getQualifyingType().getDeclaration();\n                    if(needsRawCastForMixinSuperCall(declaration, target.getType()))\n                        CodegenUtil.markTypeErased(that);\n                }\n            }\n        }\n        ProducedType primaryType;\n        if (that.getPrimary() instanceof Tree.Package\n                || that.getTarget() == null) {\n            primaryType = that.getPrimary().getTypeModel();\n        } else {\n            primaryType = that.getTarget().getQualifyingType();\n        }\n        \n        if(primaryType != null\n                && isRaw(primaryType)\n                && that.getTarget().getDeclaration() instanceof TypedDeclaration\n                && CodegenUtil.containsTypeParameter(((TypedDeclaration)that.getTarget().getDeclaration()).getType())){\n            CodegenUtil.markTypeErased(that);\n        }\n        if (isRaw(primaryType)\n                && !that.getTypeModel().getDeclaration().getTypeParameters().isEmpty()) {\n            CodegenUtil.markRaw(that);\n        }\n    }","commit_id":"b279346147a07a3dd2a89f710c16bec6bc0cada1","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n  public Font getElementFont(NavBarItem navBarItem) {\n    return UIUtil.getLabelFont(UIUtil.FontSize.SMALL);\n  }","id":64458,"modified_method":"@Override\n  public Font getElementFont(NavBarItem navBarItem) {\n    return SystemInfo.isMac ? UIUtil.getLabelFont(UIUtil.FontSize.SMALL) : UIUtil.getLabelFont();\n  }","commit_id":"a28701ac056103527cedbd6a2b86c8e64675f852","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"LabeledButtonsPanel(String label) {\n    super(new BorderLayout());\n    final JLabel text = new JLabel(label);\n    final Font font = UIUtil.getLabelFont();\n    text.setFont(font.deriveFont(Font.BOLD).deriveFont(font.getSize() + 2f));\n    text.setBorder(new EmptyBorder(2, 10, 8, 0));\n    add(text, BorderLayout.NORTH);\n    myButtonsPanel.setLayout(new BoxLayout(myButtonsPanel, BoxLayout.X_AXIS));\n    myButtonsPanel.setOpaque(false);\n    add(myButtonsPanel, BorderLayout.CENTER);\n  }","id":64459,"modified_method":"LabeledButtonsPanel(String label) {\n    super(new BorderLayout());\n    final JLabel text = new JLabel(label);\n    final Font font = UIUtil.getLabelFont();\n    if (SystemInfo.isMac) {\n      text.setFont(new Font(\"Lucida Grande\", Font.BOLD, 12));\n    } else {\n      text.setFont(font.deriveFont(Font.BOLD).deriveFont(font.getSize() + 2f));\n    }\n    text.setBorder(new EmptyBorder(2, 10, 8, 0));\n    add(text, BorderLayout.NORTH);\n    myButtonsPanel.setLayout(new BoxLayout(myButtonsPanel, BoxLayout.X_AXIS));\n    myButtonsPanel.setOpaque(false);\n    add(myButtonsPanel, BorderLayout.CENTER);\n  }","commit_id":"d1d83261c8af37b1242f2d1073d4a8da98474c92","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PreferenceButton(String label, Icon icon) {\n    myLabel = label;\n    myIcon = icon;\n    setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));\n    setPreferredSize(new Dimension(100, 70));\n    setOpaque(false);\n  }","id":64460,"modified_method":"public PreferenceButton(String label, Icon icon) {\n    myLabel = label;\n    myIcon = icon;\n    if (SystemInfo.isMac) {\n      setFont(new Font(\"Lucida Grande\", Font.PLAIN, 11));\n    } else {\n      setFont(UIUtil.getLabelFont());\n    }\n    setPreferredSize(new Dimension(100, 70));\n    setOpaque(false);\n  }","commit_id":"d1d83261c8af37b1242f2d1073d4a8da98474c92","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PreferencesDialog(@Nullable Project project, ConfigurableGroup[] groups) {\n    super(project);\n    init();\n    ((JDialog)getPeer().getWindow()).setUndecorated(true);\n    ((JComponent)((JDialog)getPeer().getWindow()).getContentPane()).setBorder(new LineBorder(Gray._140, 1));\n\n    setTitle(\"Preferences\");\n  }","id":64461,"modified_method":"public PreferencesDialog(@Nullable Project project, ConfigurableGroup[] groups) {\n    super(project);\n    init();\n    ((JDialog)getPeer().getWindow()).setUndecorated(true);\n    if (SystemInfo.isMac) {\n      ((JComponent)((JDialog)getPeer().getWindow()).getContentPane()).setBorder(new EmptyBorder(0, 0, 0, 0));\n    }\n    else {\n      ((JComponent)((JDialog)getPeer().getWindow()).getContentPane()).setBorder(new LineBorder(Gray._140, 1));\n    }\n\n    setTitle(\"Preferences\");\n  }","commit_id":"d1d83261c8af37b1242f2d1073d4a8da98474c92","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createUIComponents() {\n    myTopPanel = new JPanel(new BorderLayout()) {\n      @Override\n      protected void paintComponent(Graphics g) {\n        ((Graphics2D)g).setPaint(new GradientPaint(0,0, Gray._206, 0, getHeight() - 1, Gray._172));\n        g.fillRect(0, 0, getWidth(), getHeight());\n        g.setColor(Gray._145);\n        g.drawLine(0, getHeight() - 2, getWidth(), getHeight() - 2);\n        g.setColor(Gray._103);\n        g.drawLine(0, getHeight()- 1, getWidth(), getHeight() - 1);\n      }\n    };\n    final JLabel title = new JLabel(\"Preferences\");\n    title.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD, 14));\n    title.setHorizontalTextPosition(SwingConstants.CENTER);\n    title.setHorizontalAlignment(SwingConstants.CENTER);\n    title.setVerticalAlignment(SwingConstants.TOP);\n    myTopPanel.add(title, BorderLayout.NORTH);\n    mySearchTextField = new SearchTextField();\n    mySearchTextField.setOpaque(false);\n    myTopPanel.add(mySearchTextField, BorderLayout.EAST);\n  }","id":64462,"modified_method":"private void createUIComponents() {\n    myTopPanel = new JPanel(new BorderLayout()) {\n      @Override\n      protected void paintComponent(Graphics g) {\n        ((Graphics2D)g).setPaint(new GradientPaint(0, 0, Gray._206, 0, getHeight() - 1, Gray._172));\n        g.fillRect(0, 0, getWidth(), getHeight());\n        g.setColor(Gray._145);\n        g.drawLine(0, getHeight() - 2, getWidth(), getHeight() - 2);\n        g.setColor(Gray._103);\n        g.drawLine(0, getHeight() - 1, getWidth(), getHeight() - 1);\n      }\n    };\n    final JLabel title = new JLabel(\"Preferences\");\n    if (!SystemInfo.isMac) {\n      title.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD, 14));\n    }\n    else {\n      title.setFont(new Font(\"Lucuda Grande\", Font.PLAIN, 12));\n    }\n    title.setHorizontalTextPosition(SwingConstants.CENTER);\n    title.setHorizontalAlignment(SwingConstants.CENTER);\n    title.setVerticalAlignment(SwingConstants.TOP);\n    myTopPanel.add(title, BorderLayout.NORTH);\n    mySearchTextField = new SearchTextField();\n    mySearchTextField.setOpaque(false);\n    myTopPanel.add(mySearchTextField, BorderLayout.EAST);\n  }","commit_id":"d1d83261c8af37b1242f2d1073d4a8da98474c92","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public InspectionNodeInfo(final InspectionToolWrapper toolWrapper, Project project) {\n    setLayout(new GridBagLayout());\n    setBorder(IdeBorderFactory.createEmptyBorder(0, 3, 0, 0));\n    myProject = project;\n    myTitle = new SimpleColoredComponent();\n    myCurrentProfile = (InspectionProfileImpl)InspectionProjectProfileManager.getInstance(project).getProjectProfileImpl();\n    myKey = HighlightDisplayKey.find(toolWrapper.getID());\n    myName = toolWrapper.getDisplayName();\n    myButton = new JButton();\n\n    add(myTitle,\n        new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new JBInsets(0, 2, 0, 0),\n                               0, 0));\n    add(new JBLabel(String.valueOf(toolWrapper.loadDescription()), UIUtil.ComponentStyle.SMALL),\n        new GridBagConstraints(0, 1, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH,\n                               new JBInsets(5, 5, 0, 0), 0, 0));\n    add(myButton,\n        new GridBagConstraints(0, 2, 1, 1, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,\n                               new JBInsets(15, 0, 0, 0), 0, 0));\n    updateEnableButtonText(false);\n\n    new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        updateEnableButtonText(true);\n        return true;\n      }\n    }.installOn(myButton);\n  }","id":64463,"modified_method":"public InspectionNodeInfo(final InspectionToolWrapper toolWrapper, Project project) {\n    setLayout(new GridBagLayout());\n    setBorder(IdeBorderFactory.createEmptyBorder(0, 3, 0, 0));\n    myProject = project;\n    myTitle = new SimpleColoredComponent();\n    myCurrentProfile = (InspectionProfileImpl)InspectionProjectProfileManager.getInstance(project).getProjectProfileImpl();\n    myKey = HighlightDisplayKey.find(toolWrapper.getID());\n    myName = toolWrapper.getDisplayName();\n    myButton = new JButton();\n\n    add(myTitle,\n        new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new JBInsets(0, 2, 0, 0),\n                               0, 0));\n\n    JEditorPane description = new JEditorPane();\n    description.setContentType(UIUtil.HTML_MIME);\n    description.setEditable(false);\n    description.setOpaque(false);\n    description.addHyperlinkListener(BrowserHyperlinkListener.INSTANCE);\n    SingleInspectionProfilePanel.readHTML(description, SingleInspectionProfilePanel.toHTML(description, toolWrapper.loadDescription(),\n                                                                                           true));\n\n    add(description,\n        new GridBagConstraints(0, 1, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH,\n                               new JBInsets(5, 5, 0, 0), 0, 0));\n    add(myButton,\n        new GridBagConstraints(0, 2, 1, 1, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,\n                               new JBInsets(15, 0, 0, 0), 0, 0));\n    updateEnableButtonText(false);\n\n    new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        updateEnableButtonText(true);\n        return true;\n      }\n    }.installOn(myButton);\n  }","commit_id":"2c4b86c31d312af4c627832a69ad61d0de9e1ba4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean readHTML(String text) {\n    try {\n      myBrowser.read(new StringReader(text), null);\n      return true;\n    }\n    catch (IOException ignored) {\n      return false;\n    }\n  }","id":64464,"modified_method":"public static boolean readHTML(JEditorPane browser, String text) {\n    try {\n      browser.read(new StringReader(text), null);\n      return true;\n    }\n    catch (IOException ignored) {\n      return false;\n    }\n  }","commit_id":"2c4b86c31d312af4c627832a69ad61d0de9e1ba4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void updateOptionsAndDescriptionPanel(final TreePath... paths) {\n    if (mySelectedProfile == null || paths == null || paths.length == 0) {\n      return;\n    }\n    final TreePath path = paths[0];\n    if (path == null) return;\n    final List<InspectionConfigTreeNode> nodes = InspectionsAggregationUtil.getInspectionsNodes(paths);\n    if (!nodes.isEmpty()) {\n      final InspectionConfigTreeNode singleNode = paths.length == 1 && ((InspectionConfigTreeNode)paths[0].getLastPathComponent()).getDefaultDescriptor() != null\n                                                  ? ContainerUtil.getFirstItem(nodes) : null;\n      if (singleNode != null) {\n        if (singleNode.getDefaultDescriptor().loadDescription() != null) {\n          // need this in order to correctly load plugin-supplied descriptions\n          final Descriptor defaultDescriptor = singleNode.getDefaultDescriptor();\n          final String description = defaultDescriptor.loadDescription();\n          try {\n            if (!readHTML(SearchUtil.markup(toHTML(description), myProfileFilter.getFilter()))) {\n              readHTML(toHTML(\"<b>\" + UNDER_CONSTRUCTION + \"<\/b>\"));\n            }\n          }\n          catch (Throwable t) {\n            LOG.error(\"Failed to load description for: \" +\n                      defaultDescriptor.getToolWrapper().getTool().getClass() +\n                      \"; description: \" +\n                      description, t);\n          }\n\n        }\n        else {\n          readHTML(toHTML(\"Can't find inspection description.\"));\n        }\n      }\n      else {\n        readHTML(toHTML(\"Multiple inspections are selected. You can edit them as a single inspection.\"));\n      }\n\n      myOptionsPanel.removeAll();\n      final Project project = myProjectProfileManager.getProject();\n      final JPanel severityPanel = new JPanel(new GridBagLayout());\n      final JPanel configPanelAnchor = new JPanel(new GridLayout());\n\n      final Set<String> scopesNames = new THashSet<String>();\n      for (final InspectionConfigTreeNode node : nodes) {\n        final List<ScopeToolState> nonDefaultTools = mySelectedProfile.getNonDefaultTools(node.getDefaultDescriptor().getKey().toString(), project);\n        for (final ScopeToolState tool : nonDefaultTools) {\n          scopesNames.add(tool.getScopeName());\n        }\n      }\n\n      final double severityPanelWeightY;\n      if (scopesNames.isEmpty()) {\n\n        final LevelChooserAction severityLevelChooser =\n          new LevelChooserAction(mySelectedProfile) {\n            @Override\n            protected void onChosen(final HighlightSeverity severity) {\n              final HighlightDisplayLevel level = HighlightDisplayLevel.find(severity);\n              for (final InspectionConfigTreeNode node : nodes) {\n                final HighlightDisplayKey key = node.getDefaultDescriptor().getKey();\n                final NamedScope scope = node.getDefaultDescriptor().getScope();\n                final boolean toUpdate = mySelectedProfile.getErrorLevel(key, scope, project) != level;\n                mySelectedProfile.setErrorLevel(key, level, null, project);\n                if (toUpdate) node.dropCache();\n              }\n              myTreeTable.updateUI();\n            }\n          };\n        final HighlightSeverity severity =\n          ScopesAndSeveritiesTable.getSeverity(ContainerUtil.map(nodes, new Function<InspectionConfigTreeNode, ScopeToolState>() {\n            @Override\n            public ScopeToolState fun(InspectionConfigTreeNode node) {\n              return node.getDefaultDescriptor().getState();\n            }\n          }));\n        severityLevelChooser.setChosen(severity);\n\n        final ScopesChooser scopesChooser = new ScopesChooser(ContainerUtil.map(nodes, new Function<InspectionConfigTreeNode, Descriptor>() {\n          @Override\n          public Descriptor fun(final InspectionConfigTreeNode node) {\n            return node.getDefaultDescriptor();\n          }\n        }), mySelectedProfile, project, null) {\n          @Override\n          protected void onScopesOrderChanged() {\n            myTreeTable.updateUI();\n            updateOptionsAndDescriptionPanel();\n          }\n\n          @Override\n          protected void onScopeAdded() {\n            myTreeTable.updateUI();\n            updateOptionsAndDescriptionPanel();\n          }\n        };\n\n        severityPanel.add(new JLabel(InspectionsBundle.message(\"inspection.severity\")),\n                          new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.WEST, GridBagConstraints.VERTICAL,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JComponent severityLevelChooserComponent = severityLevelChooser.createCustomComponent(severityLevelChooser.getTemplatePresentation());\n        severityPanel.add(severityLevelChooserComponent,\n                          new GridBagConstraints(1, 0, 1, 1, 0, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JComponent scopesChooserComponent = scopesChooser.createCustomComponent(scopesChooser.getTemplatePresentation());\n        severityPanel.add(scopesChooserComponent,\n                          new GridBagConstraints(2, 0, 1, 1, 0, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JLabel label = new JLabel(\"\", SwingConstants.RIGHT);\n        severityPanel.add(label,\n                          new GridBagConstraints(3, 0, 1, 1, 1, 0,\n                                                 GridBagConstraints.EAST,\n                                                 GridBagConstraints.BOTH,\n                                                 new Insets(2, 0, 2, 0), 0, 0));\n        severityPanelWeightY = 0.0;\n        if (singleNode != null) {\n          setConfigPanel(configPanelAnchor, mySelectedProfile.getToolDefaultState(singleNode.getDefaultDescriptor().getKey().toString(),\n                                                                                  project));\n        }\n      }\n      else {\n        if (singleNode != null) {\n          for (final Descriptor descriptor : singleNode.getDescriptors().getNonDefaultDescriptors()) {\n            descriptor.loadConfig();\n          }\n        }\n        final JTable scopesAndScopesAndSeveritiesTable =\n          new ScopesAndSeveritiesTable(new ScopesAndSeveritiesTable.TableSettings(nodes, mySelectedProfile, project) {\n            @Override\n            protected void onScopeChosen(@NotNull final ScopeToolState state) {\n              setConfigPanel(configPanelAnchor, state);\n              configPanelAnchor.revalidate();\n              configPanelAnchor.repaint();\n            }\n\n            @Override\n            protected void onSettingsChanged() {\n              update(false);\n            }\n\n            @Override\n            protected void onScopeAdded() {\n              update(true);\n            }\n\n            @Override\n            protected void onScopesOrderChanged() {\n              update(true);\n            }\n\n            @Override\n            protected void onScopeRemoved(final int scopesCount) {\n              update(scopesCount == 1);\n            }\n\n            private void update(final boolean updateOptionsAndDescriptionPanel) {\n              Queue<InspectionConfigTreeNode> q = new Queue<InspectionConfigTreeNode>(nodes.size());\n              for (InspectionConfigTreeNode node : nodes) {\n                q.addLast(node);\n              }\n              while (!q.isEmpty()) {\n                final InspectionConfigTreeNode inspectionConfigTreeNode = q.pullFirst();\n                inspectionConfigTreeNode.dropCache();\n                final TreeNode parent = inspectionConfigTreeNode.getParent();\n                if (parent != null && parent.getParent() != null) {\n                  q.addLast((InspectionConfigTreeNode)parent);\n                }\n              }\n\n              myTreeTable.updateUI();\n              if (updateOptionsAndDescriptionPanel) {\n                updateOptionsAndDescriptionPanel();\n              }\n            }\n          });\n\n        final ToolbarDecorator wrappedTable = ToolbarDecorator.createDecorator(scopesAndScopesAndSeveritiesTable).disableUpDownActions().setRemoveActionUpdater(\n          new AnActionButtonUpdater() {\n            @Override\n            public boolean isEnabled(AnActionEvent e) {\n              final int selectedRow = scopesAndScopesAndSeveritiesTable.getSelectedRow();\n              final int rowCount = scopesAndScopesAndSeveritiesTable.getRowCount();\n              return rowCount - 1 != selectedRow;\n            }\n          });\n        final JPanel panel = wrappedTable.createPanel();\n        panel.setMinimumSize(new Dimension(getMinimumSize().width, 3 * scopesAndScopesAndSeveritiesTable.getRowHeight()));\n        severityPanel.add(new JBLabel(\"Severity by Scope\"),\n                          new GridBagConstraints(0, 0, 1, 1, 1.0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,\n                                                 new Insets(5, 0, 2, 10), 0, 0));\n        severityPanel.add(panel, new GridBagConstraints(0, 1, 1, 1, 0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH,\n                                                        new Insets(0, 0, 0, 0), 0, 0));\n        severityPanelWeightY = 0.3;\n      }\n      myOptionsPanel.add(severityPanel, new GridBagConstraints(0, 0, 1, 1, 1.0, severityPanelWeightY, GridBagConstraints.WEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));\n      if (configPanelAnchor.getComponentCount() != 0) {\n        configPanelAnchor.setBorder(IdeBorderFactory.createTitledBorder(\"Options\", false, new Insets(7, 0, 0, 0)));\n      }\n      GuiUtils.enableChildren(myOptionsPanel, isThoughOneNodeEnabled(nodes));\n      if (configPanelAnchor.getComponentCount() != 0 || scopesNames.isEmpty()) {\n        myOptionsPanel.add(configPanelAnchor, new GridBagConstraints(0, 1, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                                     new Insets(0, 0, 0, 0), 0, 0));\n      }\n      myOptionsPanel.revalidate();\n    }\n    else {\n      initOptionsAndDescriptionPanel();\n    }\n    myOptionsPanel.repaint();\n  }","id":64465,"modified_method":"private void updateOptionsAndDescriptionPanel(final TreePath... paths) {\n    if (mySelectedProfile == null || paths == null || paths.length == 0) {\n      return;\n    }\n    final TreePath path = paths[0];\n    if (path == null) return;\n    final List<InspectionConfigTreeNode> nodes = InspectionsAggregationUtil.getInspectionsNodes(paths);\n    if (!nodes.isEmpty()) {\n      final InspectionConfigTreeNode singleNode = paths.length == 1 && ((InspectionConfigTreeNode)paths[0].getLastPathComponent()).getDefaultDescriptor() != null\n                                                  ? ContainerUtil.getFirstItem(nodes) : null;\n      if (singleNode != null) {\n        if (singleNode.getDefaultDescriptor().loadDescription() != null) {\n          // need this in order to correctly load plugin-supplied descriptions\n          final Descriptor defaultDescriptor = singleNode.getDefaultDescriptor();\n          final String description = defaultDescriptor.loadDescription();\n          try {\n            if (!readHTML(myBrowser, SearchUtil.markup(toHTML(myBrowser, description, false), myProfileFilter.getFilter()))) {\n              readHTML(myBrowser, toHTML(myBrowser, \"<b>\" + UNDER_CONSTRUCTION + \"<\/b>\", false));\n            }\n          }\n          catch (Throwable t) {\n            LOG.error(\"Failed to load description for: \" +\n                      defaultDescriptor.getToolWrapper().getTool().getClass() +\n                      \"; description: \" +\n                      description, t);\n          }\n\n        }\n        else {\n          readHTML(myBrowser, toHTML(myBrowser, \"Can't find inspection description.\", false));\n        }\n      }\n      else {\n        readHTML(myBrowser, toHTML(myBrowser, \"Multiple inspections are selected. You can edit them as a single inspection.\", false));\n      }\n\n      myOptionsPanel.removeAll();\n      final Project project = myProjectProfileManager.getProject();\n      final JPanel severityPanel = new JPanel(new GridBagLayout());\n      final JPanel configPanelAnchor = new JPanel(new GridLayout());\n\n      final Set<String> scopesNames = new THashSet<String>();\n      for (final InspectionConfigTreeNode node : nodes) {\n        final List<ScopeToolState> nonDefaultTools = mySelectedProfile.getNonDefaultTools(node.getDefaultDescriptor().getKey().toString(), project);\n        for (final ScopeToolState tool : nonDefaultTools) {\n          scopesNames.add(tool.getScopeName());\n        }\n      }\n\n      final double severityPanelWeightY;\n      if (scopesNames.isEmpty()) {\n\n        final LevelChooserAction severityLevelChooser =\n          new LevelChooserAction(mySelectedProfile) {\n            @Override\n            protected void onChosen(final HighlightSeverity severity) {\n              final HighlightDisplayLevel level = HighlightDisplayLevel.find(severity);\n              for (final InspectionConfigTreeNode node : nodes) {\n                final HighlightDisplayKey key = node.getDefaultDescriptor().getKey();\n                final NamedScope scope = node.getDefaultDescriptor().getScope();\n                final boolean toUpdate = mySelectedProfile.getErrorLevel(key, scope, project) != level;\n                mySelectedProfile.setErrorLevel(key, level, null, project);\n                if (toUpdate) node.dropCache();\n              }\n              myTreeTable.updateUI();\n            }\n          };\n        final HighlightSeverity severity =\n          ScopesAndSeveritiesTable.getSeverity(ContainerUtil.map(nodes, new Function<InspectionConfigTreeNode, ScopeToolState>() {\n            @Override\n            public ScopeToolState fun(InspectionConfigTreeNode node) {\n              return node.getDefaultDescriptor().getState();\n            }\n          }));\n        severityLevelChooser.setChosen(severity);\n\n        final ScopesChooser scopesChooser = new ScopesChooser(ContainerUtil.map(nodes, new Function<InspectionConfigTreeNode, Descriptor>() {\n          @Override\n          public Descriptor fun(final InspectionConfigTreeNode node) {\n            return node.getDefaultDescriptor();\n          }\n        }), mySelectedProfile, project, null) {\n          @Override\n          protected void onScopesOrderChanged() {\n            myTreeTable.updateUI();\n            updateOptionsAndDescriptionPanel();\n          }\n\n          @Override\n          protected void onScopeAdded() {\n            myTreeTable.updateUI();\n            updateOptionsAndDescriptionPanel();\n          }\n        };\n\n        severityPanel.add(new JLabel(InspectionsBundle.message(\"inspection.severity\")),\n                          new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.WEST, GridBagConstraints.VERTICAL,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JComponent severityLevelChooserComponent = severityLevelChooser.createCustomComponent(severityLevelChooser.getTemplatePresentation());\n        severityPanel.add(severityLevelChooserComponent,\n                          new GridBagConstraints(1, 0, 1, 1, 0, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JComponent scopesChooserComponent = scopesChooser.createCustomComponent(scopesChooser.getTemplatePresentation());\n        severityPanel.add(scopesChooserComponent,\n                          new GridBagConstraints(2, 0, 1, 1, 0, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                 new Insets(10, 0, 10, 0), 0, 0));\n        final JLabel label = new JLabel(\"\", SwingConstants.RIGHT);\n        severityPanel.add(label,\n                          new GridBagConstraints(3, 0, 1, 1, 1, 0,\n                                                 GridBagConstraints.EAST,\n                                                 GridBagConstraints.BOTH,\n                                                 new Insets(2, 0, 2, 0), 0, 0));\n        severityPanelWeightY = 0.0;\n        if (singleNode != null) {\n          setConfigPanel(configPanelAnchor, mySelectedProfile.getToolDefaultState(singleNode.getDefaultDescriptor().getKey().toString(),\n                                                                                  project));\n        }\n      }\n      else {\n        if (singleNode != null) {\n          for (final Descriptor descriptor : singleNode.getDescriptors().getNonDefaultDescriptors()) {\n            descriptor.loadConfig();\n          }\n        }\n        final JTable scopesAndScopesAndSeveritiesTable =\n          new ScopesAndSeveritiesTable(new ScopesAndSeveritiesTable.TableSettings(nodes, mySelectedProfile, project) {\n            @Override\n            protected void onScopeChosen(@NotNull final ScopeToolState state) {\n              setConfigPanel(configPanelAnchor, state);\n              configPanelAnchor.revalidate();\n              configPanelAnchor.repaint();\n            }\n\n            @Override\n            protected void onSettingsChanged() {\n              update(false);\n            }\n\n            @Override\n            protected void onScopeAdded() {\n              update(true);\n            }\n\n            @Override\n            protected void onScopesOrderChanged() {\n              update(true);\n            }\n\n            @Override\n            protected void onScopeRemoved(final int scopesCount) {\n              update(scopesCount == 1);\n            }\n\n            private void update(final boolean updateOptionsAndDescriptionPanel) {\n              Queue<InspectionConfigTreeNode> q = new Queue<InspectionConfigTreeNode>(nodes.size());\n              for (InspectionConfigTreeNode node : nodes) {\n                q.addLast(node);\n              }\n              while (!q.isEmpty()) {\n                final InspectionConfigTreeNode inspectionConfigTreeNode = q.pullFirst();\n                inspectionConfigTreeNode.dropCache();\n                final TreeNode parent = inspectionConfigTreeNode.getParent();\n                if (parent != null && parent.getParent() != null) {\n                  q.addLast((InspectionConfigTreeNode)parent);\n                }\n              }\n\n              myTreeTable.updateUI();\n              if (updateOptionsAndDescriptionPanel) {\n                updateOptionsAndDescriptionPanel();\n              }\n            }\n          });\n\n        final ToolbarDecorator wrappedTable = ToolbarDecorator.createDecorator(scopesAndScopesAndSeveritiesTable).disableUpDownActions().setRemoveActionUpdater(\n          new AnActionButtonUpdater() {\n            @Override\n            public boolean isEnabled(AnActionEvent e) {\n              final int selectedRow = scopesAndScopesAndSeveritiesTable.getSelectedRow();\n              final int rowCount = scopesAndScopesAndSeveritiesTable.getRowCount();\n              return rowCount - 1 != selectedRow;\n            }\n          });\n        final JPanel panel = wrappedTable.createPanel();\n        panel.setMinimumSize(new Dimension(getMinimumSize().width, 3 * scopesAndScopesAndSeveritiesTable.getRowHeight()));\n        severityPanel.add(new JBLabel(\"Severity by Scope\"),\n                          new GridBagConstraints(0, 0, 1, 1, 1.0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,\n                                                 new Insets(5, 0, 2, 10), 0, 0));\n        severityPanel.add(panel, new GridBagConstraints(0, 1, 1, 1, 0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH,\n                                                        new Insets(0, 0, 0, 0), 0, 0));\n        severityPanelWeightY = 0.3;\n      }\n      myOptionsPanel.add(severityPanel, new GridBagConstraints(0, 0, 1, 1, 1.0, severityPanelWeightY, GridBagConstraints.WEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));\n      if (configPanelAnchor.getComponentCount() != 0) {\n        configPanelAnchor.setBorder(IdeBorderFactory.createTitledBorder(\"Options\", false, new Insets(7, 0, 0, 0)));\n      }\n      GuiUtils.enableChildren(myOptionsPanel, isThoughOneNodeEnabled(nodes));\n      if (configPanelAnchor.getComponentCount() != 0 || scopesNames.isEmpty()) {\n        myOptionsPanel.add(configPanelAnchor, new GridBagConstraints(0, 1, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.BOTH,\n                                                                     new Insets(0, 0, 0, 0), 0, 0));\n      }\n      myOptionsPanel.revalidate();\n    }\n    else {\n      initOptionsAndDescriptionPanel();\n    }\n    myOptionsPanel.repaint();\n  }","commit_id":"2c4b86c31d312af4c627832a69ad61d0de9e1ba4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void initOptionsAndDescriptionPanel() {\n    myOptionsPanel.removeAll();\n    readHTML(EMPTY_HTML);\n    myOptionsPanel.validate();\n    myOptionsPanel.repaint();\n  }","id":64466,"modified_method":"private void initOptionsAndDescriptionPanel() {\n    myOptionsPanel.removeAll();\n    readHTML(myBrowser, EMPTY_HTML);\n    myOptionsPanel.validate();\n    myOptionsPanel.repaint();\n  }","commit_id":"2c4b86c31d312af4c627832a69ad61d0de9e1ba4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Builds and creates a new database instance.\n   * @param p parser instance\n   * @param db name of database\n   * @return success of operation\n   */\n  protected final boolean build(final Parser p, final String db) {\n    new Close().execute(context);\n\n    final boolean mem = prop.is(Prop.MAINMEM);\n    if(!mem && context.pinned(db)) return error(DBLOCKED, db);\n\n    final Builder builder = mem ? new MemBuilder(p) : new DiskBuilder(p);\n    progress(builder);\n\n    String err = null;\n    try {\n      final Data data = builder.build(db);\n      if(mem) {\n        context.openDB(data);\n      } else {\n        index(data);\n        data.close();\n        final Process pr = new Open(db);\n        if(!pr.execute(context)) return error(pr.info());\n      }\n      return info(DBCREATED, db, perf);\n    } catch(final FileNotFoundException ex) {\n      Main.debug(ex);\n      err = Main.info(FILEWHICH, p.io);\n    } catch(final ProgressException ex) {\n      err = PROGERR;\n    } catch(final IOException ex) {\n      Main.debug(ex);\n      final String msg = ex.getMessage();\n      err = Main.info(msg != null ? msg : args[0]);\n    } catch(final Throwable ex) {\n      Main.debug(ex);\n      if(ex instanceof OutOfMemoryError) {\n        Performance.gc(2);\n        err = PROCOUTMEM;\n      } else {\n        err = Main.info(CREATEERR, args[0]);\n      }\n    }\n    if(!mem) {\n      try {\n        builder.close();\n      } catch(final IOException ex) {\n        Main.debug(ex);\n      }\n    }\n    return error(err);\n  }","id":64467,"modified_method":"/**\n   * Builds and creates a new database instance.\n   * @param p parser instance\n   * @param db name of database\n   * @return success of operation\n   */\n  protected final boolean build(final Parser p, final String db) {\n    new Close().execute(context);\n\n    final boolean mem = prop.is(Prop.MAINMEM);\n    if(!mem && context.pinned(db)) return error(DBLOCKED, db);\n\n    builder = mem ? new MemBuilder(p) : new DiskBuilder(p);\n    progress(builder);\n\n    try {\n      final Data data = builder.build(db);\n      if(mem) {\n        context.openDB(data);\n      } else {\n        index(data);\n        data.close();\n        final Process pr = new Open(db);\n        if(!pr.execute(context)) return error(pr.info());\n      }\n      return info(DBCREATED, db, perf);\n    } catch(final FileNotFoundException ex) {\n      Main.debug(ex);\n      return error(FILEWHICH, p.io);\n    } catch(final ProgressException ex) {\n      return error(PROGERR);\n    } catch(final IOException ex) {\n      Main.debug(ex);\n      final String msg = ex.getMessage();\n      return error(msg != null ? msg : args[0]);\n    } catch(final Exception ex) {\n      Main.debug(ex);\n      return error(CREATEERR, args[0]);\n    }\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Builds the specified index.\n   * @param i index to be built.\n   * @param d data reference\n   * @throws IOException I/O exception\n   */\n  protected void buildIndex(final Type i, final Data d) throws IOException {\n    final Prop pr = d.meta.prop;\n    IndexBuilder builder = null;\n    switch(i) {\n      case TXT: builder = new ValueBuilder(d, true); break;\n      case ATV: builder = new ValueBuilder(d, false); break;\n      case FTX: builder = d.meta.ftfz ?\n          new FTFuzzyBuilder(d, pr) : new FTTrieBuilder(d, pr); break;\n      default: break;\n    }\n    d.closeIndex(i);\n    progress(builder);\n    d.setIndex(i, builder.build());\n  }","id":64468,"modified_method":"/**\n   * Builds the specified index.\n   * @param i index to be built.\n   * @param d data reference\n   * @throws IOException I/O exception\n   */\n  protected void buildIndex(final Type i, final Data d) throws IOException {\n    final Prop pr = d.meta.prop;\n    IndexBuilder b = null;\n    switch(i) {\n      case TXT: b = new ValueBuilder(d, true); break;\n      case ATV: b = new ValueBuilder(d, false); break;\n      case FTX: b = d.meta.ftfz ?\n          new FTFuzzyBuilder(d, pr) : new FTTrieBuilder(d, pr); break;\n      default: break;\n    }\n    d.closeIndex(i);\n    progress(b);\n    d.setIndex(i, b.build());\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public String toString() {\n    return Cmd.CREATE + \" \" + CmdCreate.INDEX + \" \" + args();\n  }","id":64469,"modified_method":"@Override\n  public String toString() {\n    return Cmd.CREATE + \" \" + CmdCreate.INDEX + args();\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public String toString() {\n    return Cmd.DROP + \" \" + CmdDrop.INDEX + \" \" + args();\n  }","id":64470,"modified_method":"@Override\n  public String toString() {\n    return Cmd.DROP + \" \" + CmdDrop.INDEX + args();\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Calculates the tf-idf data for a single token.\r\n   * @param vpre pre values for a token\r\n   */\r\n  protected final void getFreq(final byte[] vpre) {\r\n    int np = 4;\r\n    int nl = Num.len(vpre, np);\r\n    int p = Num.read(vpre, np);\r\n    final int ns = Num.size(vpre);\r\n    while(np < ns) {\r\n      int up = unit.find(p);\r\n      if(up < 0) up = -up - 1;\r\n\r\n      int fr = 0;\r\n      do {\r\n        fr++;\r\n        np += nl;\r\n        if(np >= ns) break;\r\n        p = Num.read(vpre, np);\r\n        nl = Num.len(vpre, np);\r\n      } while(scm == 1 && (up == unit.size() || p < unit.get(up)) ||\r\n          scm == 2 && p == unit.get(up));\r\n\r\n      if(maxfreq[up] < fr) maxfreq[up] = fr;\r\n      freq.add(fr);\r\n      ntoken[token]++;\r\n    }\r\n    token++;\r\n  }","id":64471,"modified_method":"/**\r\n   * Calculates the tf-idf data for a single token.\r\n   * @param vpre pre values for a token\r\n   */\r\n  protected final void getFreq(final byte[] vpre) {\r\n    int np = 4;\r\n    int nl = Num.len(vpre, np);\r\n    int p = Num.read(vpre, np);\r\n    final int ns = Num.size(vpre);\r\n    while(np < ns) {\r\n      int u = unit.find(p);\r\n      if(u < 0) u = -u - 1;\r\n\r\n      int fr = 0;\r\n      do {\r\n        fr++;\r\n        np += nl;\r\n        if(np >= ns) break;\r\n        p = Num.read(vpre, np);\r\n        nl = Num.len(vpre, np);\r\n      } while(scm == 1 && (u == unit.size() || p < unit.get(u)) ||\r\n          scm == 2 && p == unit.get(u));\r\n\r\n      freq.add(fr);\r\n      if(maxfreq[u] < fr) maxfreq[u] = fr;\r\n      ntoken[token]++;\r\n    }\r\n    token++;\r\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Writes full-text data for a single token to disk.\r\n   * @param out DataOutput for disk access\r\n   * @param vpre compressed pre values\r\n   * @param vpos compressed pos values\r\n   * @throws IOException IOException\r\n   */\r\n  protected final void writeFTData(final DataOutput out, final byte[] vpre,\r\n      final byte[] vpos) throws IOException {\r\n\r\n    int np = 4, pp = 4, lp = -1, up = -1, fc = -1, p;\r\n    final int ns = Num.size(vpre);\r\n    while(np < ns) {\r\n      if(scm > 0) {\r\n        p = Num.read(vpre, np);\r\n        if(lp != p) {\r\n          // find document root\r\n          up = unit.find(p);\r\n          if(up < 0) up = -up - 1;\r\n\r\n          if(scm == 1 && (up == unit.size() || p < unit.get(up)) || scm == 2) {\r\n            final int s = Scoring.tfIDF(freq.get(++fc),\r\n                maxfreq[up], unit.size(), ntoken[token]);\r\n            if(max < s) max = s;\r\n            if(min > s) min = s;\r\n            if(np != 4) out.write(0);\r\n            out.write(Num.num(s));\r\n          }\r\n          lp = p;\r\n        }\r\n      }\r\n      // fulltext data is stored here, with -scoreU, pre1, pos1, ...,\r\n      // -scoreU, preU, posU\r\n      for(final int l = np + Num.len(vpre, np); np < l; np++)\r\n        out.write(vpre[np]);\r\n      for(final int l = pp + Num.len(vpos, pp); pp < l; pp++)\r\n        out.write(vpos[pp]);\r\n    }\r\n    token++;\r\n  }","id":64472,"modified_method":"/**\r\n   * Writes full-text data for a single token to disk.\r\n   * @param out DataOutput for disk access\r\n   * @param vpre compressed pre values\r\n   * @param vpos compressed pos values\r\n   * @throws IOException IOException\r\n   */\r\n  protected final void writeFTData(final DataOutput out, final byte[] vpre,\r\n      final byte[] vpos) throws IOException {\r\n\r\n    int np = 4, pp = 4, lp = -1, u = -1, lu = -1, p;\r\n    final int ns = Num.size(vpre);\r\n    while(np < ns) {\r\n      if(scm > 0) {\r\n        p = Num.read(vpre, np);\r\n        if(lp != p) {\r\n          // find document root\r\n          u = unit.find(p);\r\n          if(u < 0) u = -u - 1;\r\n\r\n          if(lu != u) {\r\n            final int s = Scoring.tfIDF(freq.get(++fc),\r\n                maxfreq[u], unit.size(), ntoken[token]);\r\n            if(max < s) max = s;\r\n            if(min > s) min = s;\r\n            if(np != 4) out.write(0);\r\n            out.write(Num.num(s));\r\n            lu = u;\r\n          }\r\n          lp = p;\r\n        }\r\n      }\r\n      // fulltext data is stored here, with -scoreU, pre1, pos1, ...,\r\n      // -scoreU, preU, posU\r\n      for(final int l = np + Num.len(vpre, np); np < l; np++)\r\n        out.write(vpre[np]);\r\n      for(final int l = pp + Num.len(vpos, pp); pp < l; pp++)\r\n        out.write(vpos[pp]);\r\n    }\r\n    token++;\r\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Executes the process, prints the result to the specified output stream\n   * and returns a success flag.\n   * @param ctx database context\n   * @param out output stream\n   * @return success flag\n   */\n  public final boolean execute(final Context ctx, final PrintOutput out) {\n    perf = new Performance();\n    context = ctx;\n    prop = ctx.prop;\n\n    // check data reference\n    final Data data = context.data;\n    if(data == null && (flags & DATAREF) != 0) return error(PROCNODB);\n    // check permissions\n    final int i = context.perm(flags & 0xFF, data);\n    if(i != -1) return error(PERMNO, CmdPerm.values()[i]);\n\n    boolean ok = false;\n    try {\n      ok = exec(out);\n    } catch(final IOException ex) {\n      return error(ex.getMessage());\n    } catch(final Throwable ex) {\n      // catch unexpected errors...\n      Main.debug(ex);\n      return error(PROCERR, this, ex.toString());\n    }\n    return ok;\n  }","id":64473,"modified_method":"/**\n   * Executes the process, prints the result to the specified output stream\n   * and returns a success flag.\n   * @param ctx database context\n   * @param out output stream\n   * @return success flag\n   */\n  public final boolean execute(final Context ctx, final PrintOutput out) {\n    perf = new Performance();\n    context = ctx;\n    prop = ctx.prop;\n\n    // check data reference\n    final Data data = context.data;\n    if(data == null && (flags & DATAREF) != 0) return error(PROCNODB);\n    // check permissions\n    final int i = context.perm(flags & 0xFF, data);\n    if(i != -1) return error(PERMNO, CmdPerm.values()[i]);\n\n    boolean ok = false;\n    try {\n      ok = exec(out);\n    } catch(final Throwable ex) {\n      Performance.gc(2);\n      Main.debug(ex);\n      abort();\n      if(ex instanceof OutOfMemoryError) return error(PROCOUTMEM);\n      if(ex instanceof IOException) return error(ex.getMessage());\n      return error(PROCERR, this, ex.toString());\n    }\n    return ok;\n  }","commit_id":"4bdce77b7d2bfb6fcd3771cc8e6c95330fd9054e","url":"https://github.com/BaseXdb/basex"},{"original_method":"private void executeList(Tree statement)\n        throws TException, InvalidRequestException, NotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException, UnavailableException, TimedOutException\n    {\n        if (!CliMain.isConnected() || !hasKeySpace())\n            return;\n        \n        // extract column family\n        String columnFamily = statement.getChild(0).getText();\n\n        String startKey = \"\";\n        String endKey = \"\";\n        int limitCount = Integer.MAX_VALUE; // will reset to default later if it's not specified\n\n        // optional arguments: key range and limit\n        for (int i = 1; i < statement.getChildCount(); i++)\n        {\n            Tree child = statement.getChild(i);\n            if (child.getType() == CliParser.NODE_KEY_RANGE)\n            {\n                if (child.getChildCount() > 0)\n                {\n                    startKey = CliUtils.unescapeSQLString(child.getChild(0).getText());\n                    if (child.getChildCount() > 1)\n                        endKey = CliUtils.unescapeSQLString(child.getChild(1).getText());\n                }\n            }\n            else\n            {\n                if (child.getChildCount() != 1)\n                {\n                    sessionState.out.println(\"Invalid limit clause\");\n                    return;\n                }\n                limitCount = Integer.parseInt(child.getChild(0).getText());\n                if (limitCount <= 0)\n                {\n                    sessionState.out.println(\"Invalid limit \" + limitCount);\n                    return;\n                }\n            }\n        }\n\n        if (limitCount == Integer.MAX_VALUE)\n        {\n            limitCount = 100;\n            sessionState.out.println(\"Using default limit of 100\");\n        }\n\n        CfDef columnFamilyDef = getCfDef(columnFamily);\n\n        // read all columns and superColumns\n        SlicePredicate predicate = new SlicePredicate();\n        SliceRange sliceRange = new SliceRange();\n        sliceRange.setStart(new byte[0]).setFinish(new byte[0]);\n        sliceRange.setCount(Integer.MAX_VALUE);\n        predicate.setSlice_range(sliceRange);\n\n        // set the key range\n        KeyRange range = new KeyRange(limitCount);\n        AbstractType keyComparator = this.cfKeysComparators.get(columnFamily);\n        range.setStart_key(getBytesAccordingToType(startKey, keyComparator))\n             .setEnd_key(getBytesAccordingToType(endKey, keyComparator));\n\n        ColumnParent columnParent = new ColumnParent(columnFamily);\n        List<KeySlice> keySlices = thriftClient.get_range_slices(columnParent, predicate, range, ConsistencyLevel.ONE);\n        printSliceList(columnFamilyDef, keySlices);\n    }","id":64474,"modified_method":"private void executeList(Tree statement)\n        throws TException, InvalidRequestException, NotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException, UnavailableException, TimedOutException\n    {\n        if (!CliMain.isConnected() || !hasKeySpace())\n            return;\n        \n        // extract column family\n        String columnFamily = statement.getChild(0).getText();\n\n        String rawStartKey = \"\";\n        String rawEndKey = \"\";\n        int limitCount = Integer.MAX_VALUE; // will reset to default later if it's not specified\n\n        // optional arguments: key range and limit\n        for (int i = 1; i < statement.getChildCount(); i++)\n        {\n            Tree child = statement.getChild(i);\n            if (child.getType() == CliParser.NODE_KEY_RANGE)\n            {\n                if (child.getChildCount() > 0)\n                {\n                    rawStartKey = CliUtils.unescapeSQLString(child.getChild(0).getText());\n                    if (child.getChildCount() > 1)\n                        rawEndKey = CliUtils.unescapeSQLString(child.getChild(1).getText());\n                }\n            }\n            else\n            {\n                if (child.getChildCount() != 1)\n                {\n                    sessionState.out.println(\"Invalid limit clause\");\n                    return;\n                }\n                limitCount = Integer.parseInt(child.getChild(0).getText());\n                if (limitCount <= 0)\n                {\n                    sessionState.out.println(\"Invalid limit \" + limitCount);\n                    return;\n                }\n            }\n        }\n\n        if (limitCount == Integer.MAX_VALUE)\n        {\n            limitCount = 100;\n            sessionState.out.println(\"Using default limit of 100\");\n        }\n\n        CfDef columnFamilyDef = getCfDef(columnFamily);\n\n        // read all columns and superColumns\n        SlicePredicate predicate = new SlicePredicate();\n        SliceRange sliceRange = new SliceRange();\n        sliceRange.setStart(new byte[0]).setFinish(new byte[0]);\n        sliceRange.setCount(Integer.MAX_VALUE);\n        predicate.setSlice_range(sliceRange);\n\n        // set the key range\n        KeyRange range = new KeyRange(limitCount);\n        AbstractType keyComparator = this.cfKeysComparators.get(columnFamily);\n        ByteBuffer startKey = rawStartKey.isEmpty() ? FBUtilities.EMPTY_BYTE_BUFFER : getBytesAccordingToType(rawStartKey, keyComparator);\n        ByteBuffer endKey = rawEndKey.isEmpty() ? FBUtilities.EMPTY_BYTE_BUFFER : getBytesAccordingToType(rawEndKey, keyComparator);\n        range.setStart_key(startKey).setEnd_key(endKey);\n\n        ColumnParent columnParent = new ColumnParent(columnFamily);\n        List<KeySlice> keySlices = thriftClient.get_range_slices(columnParent, predicate, range, ConsistencyLevel.ONE);\n        printSliceList(columnFamilyDef, keySlices);\n    }","commit_id":"8ef5d503390d77b95c1639d7b139980597315c34","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCli() throws IOException, TTransportException, ConfigurationException\n    {\n        setup();\n\n        // new error/output streams for CliSessionState\n        ByteArrayOutputStream errStream = new ByteArrayOutputStream();\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n        // checking if we can connect to the running cassandra node on localhost\n        CliMain.connect(\"127.0.0.1\", 9170);\n\n        // setting new output stream\n        CliMain.sessionState.setOut(new PrintStream(outStream));\n        CliMain.sessionState.setErr(new PrintStream(errStream));\n\n        // re-creating keyspace for tests\n        // dropping in case it exists e.g. could be left from previous run\n        CliMain.processStatement(\"drop keyspace TestKeySpace\");\n        CliMain.processStatement(\"create keyspace TestKeySpace\");\n\n        for (String statement : statements)\n        {\n            errStream.reset();\n            // System.out.println(\"Executing statement: \" + statement);\n            CliMain.processStatement(statement);\n            String result = outStream.toString();\n            // System.out.println(\"Result:\\n\" + result);\n            assertEquals(\"\", errStream.toString());\n            if (statement.startsWith(\"drop \") || statement.startsWith(\"create \") || statement.startsWith(\"update \"))\n            {\n                assertTrue(result.matches(\"(.{8})-(.{4})-(.{4})-(.{4})-(.{12})\\n\"));\n            }\n            else if (statement.startsWith(\"set \"))\n            {\n                assertEquals(result, \"Value inserted.\\n\");\n            }\n            else if (statement.startsWith(\"get \"))\n            {\n                if (statement.contains(\"where\"))\n                {\n                    assertTrue(result.startsWith(\"-------------------\\nRowKey:\"));\n                }\n                else\n                {\n                    assertTrue(result.startsWith(\"=> (column=\") || result.startsWith(\"Value was not found\"));\n                }\n            }\n            else if (statement.startsWith(\"truncate \"))\n            {\n                assertTrue(result.contains(\" truncated.\"));\n            }\n            else if (statement.startsWith(\"assume \"))\n            {\n                assertTrue(result.contains(\"successfully.\"));\n            }\n\n            outStream.reset(); // reset stream so we have only output from next statement all the time\n            errStream.reset(); // no errors to the end user.\n        }\n    }","id":64475,"modified_method":"@Test\n    public void testCli() throws IOException, TTransportException, ConfigurationException\n    {\n        setup();\n\n        // new error/output streams for CliSessionState\n        ByteArrayOutputStream errStream = new ByteArrayOutputStream();\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n        // checking if we can connect to the running cassandra node on localhost\n        CliMain.connect(\"127.0.0.1\", 9170);\n\n        // setting new output stream\n        CliMain.sessionState.setOut(new PrintStream(outStream));\n        CliMain.sessionState.setErr(new PrintStream(errStream));\n\n        // re-creating keyspace for tests\n        // dropping in case it exists e.g. could be left from previous run\n        CliMain.processStatement(\"drop keyspace TestKeySpace\");\n        CliMain.processStatement(\"create keyspace TestKeySpace\");\n\n        for (String statement : statements)\n        {\n            errStream.reset();\n            // System.out.println(\"Executing statement: \" + statement);\n            CliMain.processStatement(statement);\n            String result = outStream.toString();\n            // System.out.println(\"Result:\\n\" + result);\n            assertEquals(errStream.toString() + \" processing \" + statement, \"\", errStream.toString());\n            if (statement.startsWith(\"drop \") || statement.startsWith(\"create \") || statement.startsWith(\"update \"))\n            {\n                assertTrue(result.matches(\"(.{8})-(.{4})-(.{4})-(.{4})-(.{12})\\n\"));\n            }\n            else if (statement.startsWith(\"set \"))\n            {\n                assertEquals(result, \"Value inserted.\\n\");\n            }\n            else if (statement.startsWith(\"get \"))\n            {\n                if (statement.contains(\"where\"))\n                {\n                    assertTrue(result.startsWith(\"-------------------\\nRowKey:\"));\n                }\n                else\n                {\n                    assertTrue(result.startsWith(\"=> (column=\") || result.startsWith(\"Value was not found\"));\n                }\n            }\n            else if (statement.startsWith(\"truncate \"))\n            {\n                assertTrue(result.contains(\" truncated.\"));\n            }\n            else if (statement.startsWith(\"assume \"))\n            {\n                assertTrue(result.contains(\"successfully.\"));\n            }\n\n            outStream.reset(); // reset stream so we have only output from next statement all the time\n            errStream.reset(); // no errors to the end user.\n        }\n    }","commit_id":"8ef5d503390d77b95c1639d7b139980597315c34","url":"https://github.com/apache/cassandra"},{"original_method":"/** validate that the byte array is a valid sequence for the type we are supposed to be comparing */\n    public void validate(ByteBuffer bytes)\n    {\n        getString(bytes);\n    }","id":64476,"modified_method":"public void validate(ByteBuffer bytes)\n    {\n        getString(bytes);\n    }","commit_id":"ad38251db14d29df1843353cb3a8aea200679e79","url":"https://github.com/apache/cassandra"},{"original_method":"/** convenience method */\n    public String getColumnsString(Collection<IColumn> columns)\n    {\n        StringBuilder builder = new StringBuilder();\n        for (IColumn column : columns)\n        {\n            builder.append(column.getString(this)).append(\",\");\n        }\n        return builder.toString();\n    }","id":64477,"modified_method":"public String getColumnsString(Collection<IColumn> columns)\n    {\n        StringBuilder builder = new StringBuilder();\n        for (IColumn column : columns)\n        {\n            builder.append(column.getString(this)).append(\",\");\n        }\n        return builder.toString();\n    }","commit_id":"ad38251db14d29df1843353cb3a8aea200679e79","url":"https://github.com/apache/cassandra"},{"original_method":"/** convenience method */\n    public String getString(Collection<ByteBuffer> names)\n    {\n        StringBuilder builder = new StringBuilder();\n        for (ByteBuffer name : names)\n        {\n            builder.append(getString(name)).append(\",\");\n        }\n        return builder.toString();\n    }","id":64478,"modified_method":"public String getString(Collection<ByteBuffer> names)\n    {\n        StringBuilder builder = new StringBuilder();\n        for (ByteBuffer name : names)\n        {\n            builder.append(getString(name)).append(\",\");\n        }\n        return builder.toString();\n    }","commit_id":"ad38251db14d29df1843353cb3a8aea200679e79","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Used to convert value (function argument, string) into byte[]\n     * @param functionCall - tree representing function call ^(FUNCTION_CALL function_name value)\n     * @param columnFamily - column family definition (CfDef)\n     * @param columnName   - column name as byte[] (used to update CfDef)\n     * @param withUpdate   - also updates column family metadata for given column\n     * @return byte[] - string value as byte[]\n     */\n    private ByteBuffer convertValueByFunction(Tree functionCall, CfDef columnFamily, ByteBuffer columnName, boolean withUpdate)\n    {\n        String functionName = functionCall.getChild(0).getText();\n        Tree argumentTree = functionCall.getChild(1);\n        String functionArg  = (argumentTree == null) ? \"\" : CliUtils.unescapeSQLString(argumentTree.getText());\n        AbstractType validator = getTypeByFunction(functionName);\n\n        try\n        {\n            ByteBuffer value = getBytesAccordingToType(functionArg, validator);\n\n            // performing ColumnDef local validator update\n            if (withUpdate)\n            {\n                updateColumnMetaData(columnFamily, columnName, validator.getClass().getName());\n            }\n\n            return value;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e.getMessage());\n        }\n    }","id":64479,"modified_method":"/**\n     * Used to convert value (function argument, string) into byte[]\n     * @param functionCall - tree representing function call ^(FUNCTION_CALL function_name value)\n     * @param columnFamily - column family definition (CfDef)\n     * @param columnName   - column name as byte[] (used to update CfDef)\n     * @param withUpdate   - also updates column family metadata for given column\n     * @return byte[] - string value as byte[]\n     */\n    private ByteBuffer convertValueByFunction(Tree functionCall, CfDef columnFamily, ByteBuffer columnName, boolean withUpdate)\n    {\n        String functionName = functionCall.getChild(0).getText();\n        Tree argumentTree = functionCall.getChild(1);\n        String functionArg  = (argumentTree == null) ? \"\" : CliUtils.unescapeSQLString(argumentTree.getText());\n        AbstractType validator = getTypeByFunction(functionName);\n\n        try\n        {\n\n            ByteBuffer value;\n\n            if (functionArg.isEmpty())\n            {\n                if (validator instanceof TimeUUIDType)\n                {\n                    value = ByteBuffer.wrap(UUIDGenerator.getInstance().generateTimeBasedUUID().asByteArray());\n                }\n                else if (validator instanceof LexicalUUIDType)\n                {\n                    value = ByteBuffer.wrap(UUIDGen.decompose(UUID.randomUUID()));\n                }\n                else if (validator instanceof BytesType)\n                {\n                    value = ByteBuffer.wrap(new byte[0]);\n                }\n                else\n                {\n                    throw new RuntimeException(String.format(\"Argument for '%s' could not be empty.\", functionName));\n                }\n            }\n            else\n            {\n                value = getBytesAccordingToType(functionArg, validator);\n            }\n\n            // performing ColumnDef local validator update\n            if (withUpdate)\n            {\n                updateColumnMetaData(columnFamily, columnName, validator.getClass().getName());\n            }\n\n            return value;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e.getMessage());\n        }\n    }","commit_id":"ad38251db14d29df1843353cb3a8aea200679e79","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Converts object represented as string into byte[] according to comparator\n     * @param object - object to covert into byte array\n     * @param comparator - comparator used to convert object\n     * @return byte[] - object in the byte array representation\n     */\n    private ByteBuffer getBytesAccordingToType(String object, AbstractType comparator)\n    {\n        // TODO there is tension here between using this function to generate default values,\n        // and using it to parse input.  For instance, normally we want to convert empty string\n        // to empty byte array for any type -- all types special case empty byte[] to mean\n        // \"minimum value\" -- but we also want timeuuid() to create a valid uuid for us.\n        // For now, this function takes the create-valid-values approach, and we leave\n        // other use cases to special case \"\" -> byte[0] before calling this.\n        if (comparator instanceof LongType)\n        {\n            long longType;\n            try\n            {\n                longType = Long.valueOf(object);\n            }\n            catch (Exception e)\n            {\n                throw new RuntimeException(\"'\" + object + \"' could not be translated into a LongType.\");\n            }\n\n            return FBUtilities.toByteBuffer(longType);\n        }\n        else if (comparator instanceof LexicalUUIDType || comparator instanceof TimeUUIDType)\n        {\n            // generate new time based UUID if object is empty\n            // this means that we have timeuuid() call\n            if (comparator instanceof TimeUUIDType && object.isEmpty())\n                return ByteBuffer.wrap(UUIDGenerator.getInstance().generateTimeBasedUUID().asByteArray());\n\n            UUID uuid = (object.isEmpty()) ? UUID.randomUUID() : UUID.fromString(object);\n\n            if (comparator instanceof TimeUUIDType && uuid.version() != 1)\n                throw new IllegalArgumentException(\"TimeUUID supports only version 1 UUIDs\");    \n\n            return ByteBuffer.wrap(UUIDGen.decompose(uuid));    \n        }\n        else if (comparator instanceof IntegerType)\n        {\n            BigInteger integerType;\n\n            try\n            {\n                integerType =  new BigInteger(object);\n            }\n            catch (Exception e)\n            {\n                throw new RuntimeException(\"'\" + object + \"' could not be translated into an IntegerType.\");\n            }\n\n            return ByteBuffer.wrap(integerType.toByteArray());\n        }\n        else if (comparator instanceof AsciiType)\n        {\n            return ByteBuffer.wrap(object.getBytes(Charsets.US_ASCII));\n        }\n        else\n        {\n            return ByteBuffer.wrap(object.getBytes(Charsets.UTF_8));\n        }\n    }","id":64480,"modified_method":"/**\n     * Converts object represented as string into byte[] according to comparator\n     * @param object - object to covert into byte array\n     * @param comparator - comparator used to convert object\n     * @return byte[] - object in the byte array representation\n     */\n    private ByteBuffer getBytesAccordingToType(String object, AbstractType comparator)\n    {\n        if (comparator == null) // default comparator is BytesType\n            comparator = BytesType.instance;\n\n        return comparator.fromString(object);\n    }","commit_id":"ad38251db14d29df1843353cb3a8aea200679e79","url":"https://github.com/apache/cassandra"},{"original_method":"public abstract CompletionSorter weighAfter(@NotNull String afterId, LookupElementWeigher weigher);","id":64481,"modified_method":"public abstract CompletionSorter weighAfter(@NotNull String afterId, LookupElementWeigher... weighers);","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public abstract CompletionSorter weighBefore(@NotNull String beforeId, LookupElementWeigher weigher);","id":64482,"modified_method":"public abstract CompletionSorter weighBefore(@NotNull String beforeId, LookupElementWeigher... weighers);","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public CompletionSorterImpl weighBefore(@NotNull final String beforeId, final LookupElementWeigher weigher) {\n    return withClassifier(beforeId, true, weighingFactory(weigher));\n  }","id":64483,"modified_method":"@Override public CompletionSorterImpl weighBefore(@NotNull final String beforeId, LookupElementWeigher... weighers) {\n    assert weighers.length > 0 : \"there should be weighers\";\n    CompletionSorterImpl result = this;\n    for (LookupElementWeigher weigher : weighers) {\n      result = result.withClassifier(beforeId, true, weighingFactory(weigher));\n    }\n    return result;\n  }","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public CompletionSorterImpl weighAfter(@NotNull final String afterId, final LookupElementWeigher weigher) {\n    return withClassifier(afterId, false, weighingFactory(weigher));\n  }","id":64484,"modified_method":"@Override public CompletionSorterImpl weighAfter(@NotNull final String afterId, LookupElementWeigher... weighers) {\n    assert weighers.length > 0 : \"there should be weighers\";\n    CompletionSorterImpl result = this;\n    for (int i = weighers.length - 1; i >= 0; i--) {\n      LookupElementWeigher weigher = weighers[i];\n      result = result.withClassifier(afterId, false, weighingFactory(weigher));\n    }\n    return result;\n  }","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static CompletionResultSet addJavaSorting(final CompletionParameters parameters, CompletionResultSet result) {\n    final PsiElement position = parameters.getPosition();\n    final ExpectedTypeInfo[] expectedTypes = PsiJavaPatterns.psiElement().beforeLeaf(PsiJavaPatterns.psiElement().withText(\".\")).accepts(position) ? ExpectedTypeInfo.EMPTY_ARRAY : JavaSmartCompletionContributor.getExpectedTypes(parameters);\n    final CompletionType type = parameters.getCompletionType();\n\n    final boolean smart = type == CompletionType.SMART;\n    CompletionSorter sorter = CompletionSorter.defaultSorter(parameters);\n    final boolean afterNew = JavaSmartCompletionContributor.AFTER_NEW.accepts(position);\n    if (!smart && afterNew) {\n      sorter = sorter.weighBefore(\"liftShorter\", new LookupElementWeigher(\"expectedAfterNew\") {\n        @NotNull\n        @Override\n        public Comparable weigh(@NotNull LookupElement element) {\n          return getExpectedTypeMatching(element, expectedTypes);\n        }\n      });\n    }\n    sorter = sorter.weighAfter(\"negativeStats\", new PreferLocalVariablesLiteralsAndAnnoMethodsWeigher(type));\n    if (!smart) {\n      sorter = preferStatics(sorter, position);\n    }\n    if (smart) {\n      sorter = sorter.weighAfter(\"negativeStats\", new PreferDefaultTypeWeigher(expectedTypes, parameters));\n    }\n    sorter = recursion(sorter, parameters, expectedTypes);\n\n    sorter = sorter.weighAfter(\"recursion\", new LookupElementWeigher(\"nameEnd\") {\n      @NotNull\n      @Override\n      public Comparable weigh(@NotNull LookupElement element) {\n        final String name = JavaCompletionUtil.getLookupObjectName(element.getObject());\n        return -JavaCompletionUtil.getNameEndMatchingDegree(name, expectedTypes, element.getPrefixMatcher().getPrefix());\n      }\n    });\n\n    if (!smart) {\n      sorter = sorter.weighAfter(\"recursion\", new LookupElementWeigher(\"expectedType\") {\n        @NotNull\n        @Override\n        public Comparable weigh(@NotNull LookupElement item) {\n          return item.getObject() instanceof PsiClass && !afterNew ? ExpectedTypeMatching.normal : getExpectedTypeMatching(item, expectedTypes);\n        }\n      });\n    }\n    return result.withRelevanceSorter(sorter);\n  }","id":64485,"modified_method":"public static CompletionResultSet addJavaSorting(final CompletionParameters parameters, CompletionResultSet result) {\n    final PsiElement position = parameters.getPosition();\n    final ExpectedTypeInfo[] expectedTypes = PsiJavaPatterns.psiElement().beforeLeaf(PsiJavaPatterns.psiElement().withText(\".\")).accepts(position) ? ExpectedTypeInfo.EMPTY_ARRAY : JavaSmartCompletionContributor.getExpectedTypes(parameters);\n    final CompletionType type = parameters.getCompletionType();\n\n    final boolean smart = type == CompletionType.SMART;\n    CompletionSorter sorter = CompletionSorter.defaultSorter(parameters);\n    final boolean afterNew = JavaSmartCompletionContributor.AFTER_NEW.accepts(position);\n\n    if (!smart && afterNew) {\n      sorter = sorter.weighBefore(\"liftShorter\", new LookupElementWeigher(\"expectedAfterNew\") {\n        @NotNull\n        @Override\n        public Comparable weigh(@NotNull LookupElement element) {\n          return getExpectedTypeMatching(element, expectedTypes);\n        }\n      });\n    }\n\n    List<LookupElementWeigher> afterNegativeStats = new ArrayList<LookupElementWeigher>();\n    ContainerUtil.addIfNotNull(afterNegativeStats, smart ? new PreferDefaultTypeWeigher(expectedTypes, parameters) : preferStatics(position));\n    afterNegativeStats.add(new PreferLocalVariablesLiteralsAndAnnoMethodsWeigher(type));\n    ContainerUtil.addIfNotNull(afterNegativeStats, recursion(parameters, expectedTypes));\n    if (!smart) {\n      afterNegativeStats.add(new LookupElementWeigher(\"expectedType\") {\n        @NotNull\n        @Override\n        public Comparable weigh(@NotNull LookupElement item) {\n          return item.getObject() instanceof PsiClass && !afterNew ? ExpectedTypeMatching.normal : getExpectedTypeMatching(item, expectedTypes);\n        }\n      });\n    }\n    afterNegativeStats.add(new LookupElementWeigher(\"nameEnd\") {\n      @NotNull\n      @Override\n      public Comparable weigh(@NotNull LookupElement element) {\n        final String name = JavaCompletionUtil.getLookupObjectName(element.getObject());\n        return -JavaCompletionUtil.getNameEndMatchingDegree(name, expectedTypes, element.getPrefixMatcher().getPrefix());\n      }\n    });\n    sorter = sorter.weighAfter(\"negativeStats\", afterNegativeStats.toArray(new LookupElementWeigher[afterNegativeStats.size()]));\n\n    return result.withRelevanceSorter(sorter);\n  }","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static CompletionSorter recursion(CompletionSorter sorter, CompletionParameters parameters, final ExpectedTypeInfo[] expectedInfos) {\n\n    final PsiElement position = parameters.getPosition();\n    final PsiMethod positionMethod = PsiTreeUtil.getParentOfType(position, PsiMethod.class, false);\n    final ElementFilter filter = JavaCompletionUtil.recursionFilter(position);\n    final PsiMethodCallExpression expression = PsiTreeUtil.getParentOfType(position, PsiMethodCallExpression.class, true, PsiClass.class);\n    final PsiReferenceExpression reference = expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position, PsiReferenceExpression.class);\n    if (reference == null) return sorter;\n\n    return sorter.weighAfter(\"local\", new RecursionWeigher(filter, position, reference, expression, positionMethod, expectedInfos));\n  }","id":64486,"modified_method":"@Nullable\n  static LookupElementWeigher recursion(CompletionParameters parameters, final ExpectedTypeInfo[] expectedInfos) {\n\n    final PsiElement position = parameters.getPosition();\n    final PsiMethod positionMethod = PsiTreeUtil.getParentOfType(position, PsiMethod.class, false);\n    final ElementFilter filter = JavaCompletionUtil.recursionFilter(position);\n    final PsiMethodCallExpression expression = PsiTreeUtil.getParentOfType(position, PsiMethodCallExpression.class, true, PsiClass.class);\n    final PsiReferenceExpression reference = expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position, PsiReferenceExpression.class);\n    if (reference == null) return null;\n\n    return new RecursionWeigher(filter, position, reference, expression, positionMethod, expectedInfos);\n  }","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static CompletionSorter preferStatics(CompletionSorter sorter, PsiElement position) {\n    if (PsiTreeUtil.getParentOfType(position, PsiDocComment.class) != null) {\n      return sorter;\n    }\n    if (position.getParent() instanceof PsiReferenceExpression) {\n      final PsiReferenceExpression refExpr = (PsiReferenceExpression)position.getParent();\n      final PsiElement qualifier = refExpr.getQualifier();\n      if (qualifier == null) {\n        return sorter;\n      }\n      if (!(qualifier instanceof PsiJavaCodeReferenceElement) || !(((PsiJavaCodeReferenceElement)qualifier).resolve() instanceof PsiClass)) {\n        return sorter;\n      }\n    }\n\n    return sorter.weighAfter(\"negativeStats\", new LookupElementWeigher(\"statics\") {\n      @NotNull\n      @Override\n      public Comparable weigh(@NotNull LookupElement element) {\n        final Object o = element.getObject();\n        if (!(o instanceof PsiMember)) return 0;\n\n        if (((PsiMember)o).hasModifierProperty(PsiModifier.STATIC)) {\n          if (o instanceof PsiMethod) return -5;\n          if (o instanceof PsiField) return -4;\n        }\n\n        if (o instanceof PsiClass) return -3;\n\n        //instance method or field\n        return -5;\n      }\n    });\n  }","id":64487,"modified_method":"@Nullable\n  static LookupElementWeigher preferStatics(PsiElement position) {\n    if (PsiTreeUtil.getParentOfType(position, PsiDocComment.class) != null) {\n      return null;\n    }\n    if (position.getParent() instanceof PsiReferenceExpression) {\n      final PsiReferenceExpression refExpr = (PsiReferenceExpression)position.getParent();\n      final PsiElement qualifier = refExpr.getQualifier();\n      if (qualifier == null) {\n        return null;\n      }\n      if (!(qualifier instanceof PsiJavaCodeReferenceElement) || !(((PsiJavaCodeReferenceElement)qualifier).resolve() instanceof PsiClass)) {\n        return null;\n      }\n    }\n\n    return new LookupElementWeigher(\"statics\") {\n      @NotNull\n      @Override\n      public Comparable weigh(@NotNull LookupElement element) {\n        final Object o = element.getObject();\n        if (!(o instanceof PsiMember)) return 0;\n\n        if (((PsiMember)o).hasModifierProperty(PsiModifier.STATIC)) {\n          if (o instanceof PsiMethod) return -5;\n          if (o instanceof PsiField) return -4;\n        }\n\n        if (o instanceof PsiClass) return -3;\n\n        //instance method or field\n        return -5;\n      }\n    };\n  }","commit_id":"bdd957f1577feabdec5c0aa58727e2b6a8eecfb5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * @throws ResourceNotFoundException if the resource of the request is a non\n     *             existing resource.\n     */\n    @Override\n    protected void doGet(SlingHttpServletRequest request,\n            SlingHttpServletResponse response) throws ServletException,\n            IOException {\n\n        // cannot handle the request for missing resources\n        if (ResourceUtil.isNonExistingResource(request.getResource())) {\n            throw new ResourceNotFoundException(\n                request.getResource().getPath(), \"No Resource found\");\n        }\n\n        Servlet rendererServlet;\n        String ext = request.getRequestPathInfo().getExtension();\n        if (ext == null) {\n            rendererServlet = streamerServlet;\n        } else {\n            rendererServlet = rendererMap.get(ext);\n        }\n\n        // fail if we should not just stream or we cannot support the ext.\n        if (rendererServlet == null) {\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                \"No renderer for extension='\" + ext + \"'\");\n            return;\n        }\n\n        request.getRequestProgressTracker().log(\"Using \"\n                + rendererServlet.getClass().getName()\n                + \" to render for extension=\" + ext);\n        rendererServlet.service(request, response);\n    }","id":64488,"modified_method":"/**\n     * @throws ResourceNotFoundException if the resource of the request is a non\n     *             existing resource.\n     */\n    @Override\n    protected void doGet(SlingHttpServletRequest request,\n            SlingHttpServletResponse response) throws ServletException,\n            IOException {\n\n        // cannot handle the request for missing resources\n        if (ResourceUtil.isNonExistingResource(request.getResource())) {\n            throw new ResourceNotFoundException(\n                request.getResource().getPath(), \"No Resource found\");\n        }\n\n        Servlet rendererServlet;\n        String ext = request.getRequestPathInfo().getExtension();\n        if (ext == null) {\n            rendererServlet = streamerServlet;\n        } else {\n            rendererServlet = rendererMap.get(ext);\n        }\n\n        // fail if we should not just stream or we cannot support the ext.\n        if (rendererServlet == null) {\n            request.getRequestProgressTracker().log(\n                \"No Renderer for extension \" + ext);\n            response.sendError(HttpServletResponse.SC_FORBIDDEN);\n            return;\n        }\n\n        request.getRequestProgressTracker().log(\n            \"Using \" + rendererServlet.getClass().getName()\n                + \" to render for extension=\" + ext);\n        rendererServlet.service(request, response);\n    }","commit_id":"46aa1a4a86fdd82b80f39918d9f933eaea3b5ef1","url":"https://github.com/apache/sling"},{"original_method":"protected void deactivate(ComponentContext ctx) {\n        this.aliases = null;\n    }","id":64489,"modified_method":"protected void deactivate(ComponentContext ctx) {\n        this.aliases = null;\n        this.index = false;\n        this.indexFiles = null;\n    }","commit_id":"46aa1a4a86fdd82b80f39918d9f933eaea3b5ef1","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    public void init() throws ServletException {\n        super.init();\n\n        // Register renderer servlets\n        setupServlet(rendererMap, HtmlRendererServlet.EXT_HTML,\n            new HtmlRendererServlet());\n        setupServlet(rendererMap, PlainTextRendererServlet.EXT_TXT,\n            new PlainTextRendererServlet());\n        setupServlet(rendererMap, JsonRendererServlet.EXT_JSON,\n            new JsonRendererServlet());\n        setupServlet(rendererMap, StreamRendererServlet.EXT_RES,\n            new StreamRendererServlet());\n        setupServlet(rendererMap, XMLRendererServlet.EXT_XML,\n                new XMLRendererServlet());\n\n        // check additional aliases\n        if ( this.aliases != null ) {\n            for(final String m : aliases) {\n                final int pos = m.indexOf(':');\n                if ( pos != -1 ) {\n                    final String type = m.substring(0, pos);\n                    final Servlet servlet = rendererMap.get(type);\n                    if ( servlet != null ) {\n                        final String extensions = m.substring(pos+1);\n                        final StringTokenizer st = new StringTokenizer(extensions, \",\");\n                        while ( st.hasMoreTokens() ) {\n                            final String ext = st.nextToken();\n                            rendererMap.put(ext, servlet);\n                        }\n                    }\n                }\n            }\n        }\n        // use the servlet for rendering StreamRendererServlet.EXT_RES as the\n        // streamer servlet\n        streamerServlet = rendererMap.get(StreamRendererServlet.EXT_RES);\n    }","id":64490,"modified_method":"@Override\n    public void init() throws ServletException {\n        super.init();\n\n        // Register renderer servlets\n        setupServlet(rendererMap, StreamRendererServlet.EXT_RES,\n            new StreamRendererServlet(index, indexFiles));\n\n        if (enableHtml) {\n            setupServlet(rendererMap, HtmlRendererServlet.EXT_HTML,\n                new HtmlRendererServlet());\n        }\n\n        if (enableTxt) {\n            setupServlet(rendererMap, PlainTextRendererServlet.EXT_TXT,\n                new PlainTextRendererServlet());\n        }\n        \n        if (enableJson) {\n            setupServlet(rendererMap, JsonRendererServlet.EXT_JSON,\n                new JsonRendererServlet());\n        }\n        \n        if (enableXml) {\n            setupServlet(rendererMap, XMLRendererServlet.EXT_XML,\n                new XMLRendererServlet());\n        }\n        \n        // use the servlet for rendering StreamRendererServlet.EXT_RES as the\n        // streamer servlet\n        streamerServlet = rendererMap.get(StreamRendererServlet.EXT_RES);\n\n        // check additional aliases\n        if (this.aliases != null) {\n            for (final String m : aliases) {\n                final int pos = m.indexOf(':');\n                if (pos != -1) {\n                    final String type = m.substring(0, pos);\n                    final Servlet servlet = rendererMap.get(type);\n                    if (servlet != null) {\n                        final String extensions = m.substring(pos + 1);\n                        final StringTokenizer st = new StringTokenizer(\n                            extensions, \",\");\n                        while (st.hasMoreTokens()) {\n                            final String ext = st.nextToken();\n                            rendererMap.put(ext, servlet);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"46aa1a4a86fdd82b80f39918d9f933eaea3b5ef1","url":"https://github.com/apache/sling"},{"original_method":"protected void activate(ComponentContext ctx) {\n        this.aliases = OsgiUtil.toStringArray(ctx.getProperties().get(ALIAS_PROPERTY));\n    }","id":64491,"modified_method":"protected void activate(ComponentContext ctx) {\n        Dictionary<?, ?> props = ctx.getProperties();\n        this.aliases = OsgiUtil.toStringArray(props.get(ALIAS_PROPERTY));\n        this.index = OsgiUtil.toBoolean(props.get(INDEX_PROPERTY),\n            DEFAULT_INDEX_PROPERTY);\n        this.indexFiles = OsgiUtil.toStringArray(\n            props.get(INDEX_FILES_PROPERTY), DEFAULT_INDEX_FILES_PROPERTY);\n\n        this.enableHtml = OsgiUtil.toBoolean(props.get(HTML_RENDERER_PROPERTY),\n            DEFAULT_RENDERER_PROPERTY);\n        this.enableTxt = OsgiUtil.toBoolean(props.get(TXT_RENDERER_PROPERTY),\n            DEFAULT_RENDERER_PROPERTY);\n        this.enableJson = OsgiUtil.toBoolean(props.get(JSON_RENDERER_PROPERTY),\n            DEFAULT_RENDERER_PROPERTY);\n        this.enableXml = OsgiUtil.toBoolean(props.get(XML_RENDERER_PROPERTY),\n            DEFAULT_RENDERER_PROPERTY);\n    }","commit_id":"46aa1a4a86fdd82b80f39918d9f933eaea3b5ef1","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    protected void doGet(SlingHttpServletRequest request,\n            SlingHttpServletResponse response) throws ServletException,\n            IOException {\n\n        // ensure no extension or \"res\"\n        String ext = request.getRequestPathInfo().getExtension();\n        if (ext != null && !ext.equals(EXT_RES)) {\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                \"No default renderer found for extension='\" + ext + \"'\");\n            return;\n        }\n\n        final Resource resource = request.getResource();\n        if (ResourceUtil.isNonExistingResource(resource)) {\n            throw new ResourceNotFoundException(\"No data to render.\");\n        }\n\n        // check the last modification time and If-Modified-Since header\n        ResourceMetadata meta = resource.getResourceMetadata();\n        long modifTime = meta.getModificationTime();\n        if (unmodified(request, modifTime)) {\n            response.setStatus(SC_NOT_MODIFIED);\n            return;\n        }\n\n        // fall back to plain text rendering if the resource has no stream\n        InputStream stream = resource.adaptTo(InputStream.class);\n        if (stream == null) {\n            super.doGet(request, response);\n            return;\n        }\n\n        // finally stream the resource\n        try {\n\n            if (modifTime > 0) {\n                response.setDateHeader(HEADER_LAST_MODIFIED, modifTime);\n            }\n\n            final String defaultContentType = \"application/octet-stream\";\n            String contentType = meta.getContentType();\n            if (contentType == null || defaultContentType.equals(contentType)) {\n                // if repository doesn't provide a content-type, or\n                // provides the\n                // default one,\n                // try to do better using our servlet context\n                final String ct = getServletContext().getMimeType(\n                    resource.getPath());\n                if (ct != null) {\n                    contentType = ct;\n                }\n            }\n            if (contentType != null) {\n                response.setContentType(contentType);\n            }\n\n            String encoding = meta.getCharacterEncoding();\n            if (encoding != null) {\n                response.setCharacterEncoding(encoding);\n            }\n\n            long length = meta.getContentLength();\n            if (length > 0 && length < Integer.MAX_VALUE) {\n                response.setContentLength((int) length);\n            }\n\n            OutputStream out = response.getOutputStream();\n\n            byte[] buf = new byte[1024];\n            int rd;\n            while ((rd = stream.read(buf)) >= 0) {\n                out.write(buf, 0, rd);\n            }\n\n        } finally {\n            try {\n                stream.close();\n            } catch (IOException ignore) {\n                // don't care\n            }\n        }\n    }","id":64492,"modified_method":"@Override\n    protected void doGet(SlingHttpServletRequest request,\n            SlingHttpServletResponse response) throws ServletException,\n            IOException {\n\n        // ensure no extension or \"res\"\n        String ext = request.getRequestPathInfo().getExtension();\n        if (ext != null && !ext.equals(EXT_RES)) {\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                \"No default renderer found for extension='\" + ext + \"'\");\n            return;\n        }\n\n        final Resource resource = request.getResource();\n        if (ResourceUtil.isNonExistingResource(resource)) {\n            throw new ResourceNotFoundException(\"No data to render.\");\n        }\n\n        // trailing slash on url means directory listing\n        if (\"/\".equals(request.getRequestPathInfo().getSuffix())) {\n            renderDirectory(request, response);\n            return;\n        }\n\n        // check the last modification time and If-Modified-Since header\n        ResourceMetadata meta = resource.getResourceMetadata();\n        long modifTime = meta.getModificationTime();\n        if (unmodified(request, modifTime)) {\n            response.setStatus(SC_NOT_MODIFIED);\n            return;\n        }\n\n        // fall back to plain text rendering if the resource has no stream\n        InputStream stream = resource.adaptTo(InputStream.class);\n        if (stream != null) {\n            \n            streamResource(resource, stream, response);\n            \n        } else {\n            \n            // the resource is the root, do not redirect, immediately index\n            if (\"/\".equals(resource.getPath())) {\n                \n                renderDirectory(request, response);\n                \n            } else {\n                \n                // redirect to this with trailing slash to render the index\n                String url = request.getResourceResolver().map(request,\n                    resource.getPath())\n                    + \"/\";\n                response.sendRedirect(url);\n                \n            }\n        }\n    }","commit_id":"46aa1a4a86fdd82b80f39918d9f933eaea3b5ef1","url":"https://github.com/apache/sling"},{"original_method":"private Optional<? extends VolumeAttachmentApi> getAttachmentApi(final String location) {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeAttachmentExtensionForZone(location);\n\t}","id":64493,"modified_method":"private Optional<? extends VolumeAttachmentApi> getAttachmentApi() {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeAttachmentExtensionForZone(region);\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * \n\t * @param duration .\n\t * @param timeUnit .\n\t * @return .\n\t * @throws TimeoutException .\n\t * @throws StorageProvisioningException .\n\t */\n\tpublic Set<VolumeDetails> listAllVolumes(final long duration, final TimeUnit timeUnit) throws TimeoutException, \n\t\tStorageProvisioningException {\n\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\t/*Optional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\t//TODO : is this OK? or should we wait?\n\t\t\tthrow new StorageProvisioningException(\"Failed to list all volumes.\");\n\t\t}\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tFluentIterable<? extends Volume> volumesList = volumeApi.get().list();\n\t\tif (volumesList != null) {\n\t\t\tfor (Volume volume : volumesList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t*/\n\t\treturn volumeDetailsSet;\n\t}","id":64494,"modified_method":"/**\n\t * @return .\n\t * @throws StorageProvisioningException .\n\t */\n\t@Override\n\tpublic Set<VolumeDetails> listAllVolumes() throws StorageProvisioningException {\n\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list all volumes.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends Volume> volumesList = volumeApi.get().list();\n\t\tif (volumesList != null) {\n\t\t\tfor (Volume volume : volumesList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Optional<? extends VolumeApi> getVolumeApi(final String location) {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeExtensionForZone(location);\n\t}","id":64495,"modified_method":"private Optional<? extends VolumeApi> getVolumeApi() {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeExtensionForZone(region);\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t}","id":64496,"modified_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tcomputeTemplate = cloud.getCloudCompute().getTemplates().get(computeTemplateName);\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t\tregion = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\n\t}","id":64497,"modified_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\t\t\n\t\t// TODO: wait for state \"Deleting\"?\n\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\t\t\tstorageTemplate.getDeviceName());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t}","id":64498,"modified_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\tlogger.fine(\"Attaching volume on Openstack\");\n\t\t\n\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\tstorageTemplate.getDeviceName());\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.IN_USE, volumeApi, volumeId, endTime);\n\t\t\tlogger.fine(\"Volume \" + volumeId + \" attached successfully to machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to attach to machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdetachVolume(region, volumeId, duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while detaching volume: \" + volumeId \n\t\t\t\t\t\t+ \" after a failed attachment. Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tString location = node.getLocation().getParent().getId();\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi(location);\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\t\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(location, attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","id":64499,"modified_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\t\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\t//TODO might be faster without the location at all\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\n\t}","id":64500,"modified_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\t//TODO might be faster without the location at all\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volumeId, endTime);\n\t\t\tlogger.fine(\"Volume \" + volumeId + \" detached successfully from machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to detach from machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private String getStorageZone() throws IllegalArgumentException {\n\t\tString zone;\n\t\tMap<String, Object> customSettings = storageTemplate.getCustom();\n\t\t\n\t\tif (customSettings != null) {\n\t\t\tObject zoneObj = customSettings.get(OPENSTACK_VOLUME_ZONE);\n\t\t\tif (zoneObj instanceof String) {\n\t\t\t\tzone = (String) zoneObj;\n\t\t\t\tif (StringUtils.isBlank(zone)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property is missing or empty: \" \n\t\t\t\t\t\t\t+ OPENSTACK_VOLUME_ZONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property \\\"\" + OPENSTACK_VOLUME_ZONE \n\t\t\t\t\t\t+ \"\\\" must be of type String\"); \n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Storate template is missing a \\\"custom\\\" section with the required \"\n\t\t\t\t\t+ \"property \\\"\" + OPENSTACK_VOLUME_ZONE  + \"\\\"\");\n\t\t}\n\t\t\n\t\treturn zone;\n\t}","id":64501,"modified_method":"private String getStorageZone() throws IllegalArgumentException {\n\t\tString zone;\n\t\tMap<String, Object> customSettings = storageTemplate.getCustom();\n\t\t\n\t\tif (customSettings != null) {\n\t\t\tObject zoneObj = customSettings.get(OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\tif (zoneObj instanceof String) {\n\t\t\t\tzone = (String) zoneObj;\n\t\t\t\tif (StringUtils.isBlank(zone)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property is missing or empty: \" \n\t\t\t\t\t\t\t+ OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE \n\t\t\t\t\t\t+ \"\\\" is missing or not a String\"); \n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Storate template is missing a \\\"custom\\\" section with the required \"\n\t\t\t\t\t+ \"property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE  + \"\\\"\");\n\t\t}\n\t\t\n\t\treturn zone;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\t/*Volume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();*/\n\t\treturn \"\";\n\t}","id":64502,"modified_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\tVolume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private JCloudsDeployer initDeployer(final Cloud cloud, final String computeTemplateName, final String \n\t\t\tstorageTemplateName) {\n\t\t\n\t\tif (deployer != null) {\n\t\t\treturn deployer;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tlogger.fine(\"Creating JClouds context deployer for Openstack with user: \" + cloud.getUser().getUser());\n\t\t\tfinal StorageTemplate storageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t\t\tfinal ComputeTemplate computeTemplate = cloud.getCloudCompute().getTemplates().get(computeTemplateName);\n\t\t\tfinal Properties props = new Properties();\n\t\t\t//props.put(OPENSTACK_JCLOUDS_ENDPOINT, getComputeEndpoint(computeTemplate));\n\t\t\tprops.put(CREDENTIALS_TYPE_PROPERTY, CREDENTIALS_TYPE);\n\t\t\tprops.putAll(storageTemplate.getCustom());\n\t\t\t\n\t\t\t\n\t\t\tdeployer = new JCloudsDeployer(cloud.getProvider().getProvider(), cloud.getUser().getUser(),\n\t\t\t\t\tcloud.getUser().getApiKey(), props);\n\t\t} catch (final Exception e) {\n\t\t\tpublishEvent(\"connection_to_cloud_api_failed\", cloud.getProvider().getProvider());\n\t\t\tthrow new IllegalStateException(\"Failed to create cloud Deployer\", e);\n\t\t}\n\t\t\n\t\treturn deployer;\n\t}","id":64503,"modified_method":"private JCloudsDeployer initDeployer(final Cloud cloud, final String computeTemplateName, final String \n\t\t\tstorageTemplateName) {\n\t\t\n\t\tif (deployer != null) {\n\t\t\treturn deployer;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tlogger.fine(\"Creating JClouds context deployer for Openstack with user: \" + cloud.getUser().getUser());\n\t\t\tfinal Properties props = new Properties();\n\t\t\tprops.putAll(computeTemplate.getOverrides());\n\t\t\tprops.putAll(storageTemplate.getCustom());\n\n\t\t\tdeployer = new JCloudsDeployer(cloud.getProvider().getProvider(), cloud.getUser().getUser(),\n\t\t\t\t\tcloud.getUser().getApiKey(), props);\n\t\t} catch (final Exception e) {\n\t\t\tpublishEvent(\"connection_to_cloud_api_failed\", cloud.getProvider().getProvider());\n\t\t\tthrow new IllegalStateException(\"Failed to create cloud Deployer\", e);\n\t\t}\n\t\t\n\t\treturn deployer;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private VolumeDetails waitForVolume(final Optional<? extends VolumeApi> volumeApi, final String volumeId, \n\t\t\tfinal long endTime) throws StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tVolumeDetails volumeDetails = new VolumeDetails();\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == Volume.Status.AVAILABLE) {\n\t\t\t\t\t//volume is available for use\n\t\t\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t} else if (volumeStatus == Volume.Status.DELETING\n\t\t\t\t\t|| volumeStatus == Volume.Status.IN_USE\n\t\t\t\t\t|| volumeStatus == Volume.Status.UNRECOGNIZED) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack, \"\n\t\t\t\t\t\t\t+ \"unexpected volume status reported: \" + volumeStatus + \". Volume id \" + volumeId);\n\t\t\t\t}\n\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout creating volume. status:\" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","id":64504,"modified_method":"private void waitForVolumeToReachStatus(final Volume.Status targetStatus, \n\t\t\tfinal Optional<? extends VolumeApi> volumeApi, final String volumeId, final long endTime) \n\t\t\t\t\tthrows StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tlogger.info(\"waiting for volume to reach status: \" + targetStatus.toString());\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == targetStatus) {\n\t\t\t\t\t//volume is ready\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Storage volume management encountered an error. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t}\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout while waiting for volume to reach status \\\" \" + targetStatus \n\t\t\t\t\t\t\t+ \"\\\". Current status is: \" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String location, final String volumeId) throws StorageProvisioningException {\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","id":64505,"modified_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String volumeId) throws StorageProvisioningException {\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails;\n\t\tfinal Volume volume;\n\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(1, options);\n\t\t\n\t\ttry {\n\t\t\tvolumeDetails = waitForVolume(volumeApi, volume.getId(), endTime);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(location, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \".It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","id":64506,"modified_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails = new VolumeDetails();\n\t\tVolume volume;\n\t\t\n\t\t//ignoring the passed location, it's a wrong format, taking the compute location instead\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(storageTemplate.getSize(), options);\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volume.getId(), endTime);\n\t\t\tvolume = volumeApi.get().get(volume.getId());\n\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(region, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","commit_id":"2992684fe20fa57a11496e26eacd1b69ec5a8672","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private String getStorageZone() throws IllegalArgumentException {\n\t\tString zone;\n\t\tMap<String, Object> customSettings = storageTemplate.getCustom();\n\t\t\n\t\tif (customSettings != null) {\n\t\t\tObject zoneObj = customSettings.get(OPENSTACK_VOLUME_ZONE);\n\t\t\tif (zoneObj instanceof String) {\n\t\t\t\tzone = (String) zoneObj;\n\t\t\t\tif (StringUtils.isBlank(zone)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property is missing or empty: \" \n\t\t\t\t\t\t\t+ OPENSTACK_VOLUME_ZONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property \\\"\" + OPENSTACK_VOLUME_ZONE \n\t\t\t\t\t\t+ \"\\\" must be of type String\"); \n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Storate template is missing a \\\"custom\\\" section with the required \"\n\t\t\t\t\t+ \"property \\\"\" + OPENSTACK_VOLUME_ZONE  + \"\\\"\");\n\t\t}\n\t\t\n\t\treturn zone;\n\t}","id":64507,"modified_method":"private Optional<? extends VolumeAttachmentApi> getAttachmentApi(final String location) {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeAttachmentExtensionForZone(location);\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Optional<? extends VolumeApi> getVolumeApi() {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeExtensionForZone(region);\n\t}","id":64508,"modified_method":"private Optional<? extends VolumeApi> getVolumeApi(final String location) {\n\t\tif (novaContext == null) {\n\t\t\tthrow new IllegalStateException(\"Nova context is null\");\n\t\t}\n\t\t\n\t\treturn novaContext.getApi().getVolumeExtensionForZone(location);\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tcomputeTemplate = cloud.getCloudCompute().getTemplates().get(computeTemplateName);\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t\tregion = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t}","id":64509,"modified_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\tlogger.fine(\"Attaching volume on Openstack\");\n\t\t\n\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\tstorageTemplate.getDeviceName());\n\t\t\n\t\t/*try {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.IN_USE, volumeApi, volumeId, endTime);\n\t\t\tlogger.fine(\"Volume \" + volumeId + \" attached successfully to machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to attach to machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdetachVolume(region, volumeId, duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while detaching volume: \" + volumeId \n\t\t\t\t\t\t+ \" after a failed attachment. Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}*/\n\t\t\n\t}","id":64510,"modified_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\t\t\tstorageTemplate.getDeviceName());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volumeId, endTime);\n\t\t\tlogger.fine(\"Volume \" + volumeId + \" detached successfully from machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to detach from machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\n\t}","id":64511,"modified_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\t//TODO might be faster without the location at all\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\tVolume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();\n\t}","id":64512,"modified_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\t/*Volume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();*/\n\t\treturn \"\";\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * @return .\n\t * @throws StorageProvisioningException .\n\t */\n\t@Override\n\tpublic Set<VolumeDetails> listAllVolumes() throws StorageProvisioningException {\n\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list all volumes.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends Volume> volumesList = volumeApi.get().list();\n\t\tif (volumesList != null) {\n\t\t\tfor (Volume volume : volumesList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","id":64513,"modified_method":"/**\n\t * \n\t * @param duration .\n\t * @param timeUnit .\n\t * @return .\n\t * @throws TimeoutException .\n\t * @throws StorageProvisioningException .\n\t */\n\tpublic Set<VolumeDetails> listAllVolumes(final long duration, final TimeUnit timeUnit) throws TimeoutException, \n\t\tStorageProvisioningException {\n\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\t/*Optional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\t//TODO : is this OK? or should we wait?\n\t\t\tthrow new StorageProvisioningException(\"Failed to list all volumes.\");\n\t\t}\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tFluentIterable<? extends Volume> volumesList = volumeApi.get().list();\n\t\tif (volumesList != null) {\n\t\t\tfor (Volume volume : volumesList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t*/\n\t\treturn volumeDetailsSet;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private JCloudsDeployer initDeployer(final Cloud cloud, final String computeTemplateName, final String \n\t\t\tstorageTemplateName) {\n\t\t\n\t\tif (deployer != null) {\n\t\t\treturn deployer;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tlogger.fine(\"Creating JClouds context deployer for Openstack with user: \" + cloud.getUser().getUser());\n\t\t\tfinal Properties props = new Properties();\n\t\t\tprops.putAll(computeTemplate.getOverrides());\n\t\t\tprops.putAll(storageTemplate.getCustom());\n\n\t\t\tdeployer = new JCloudsDeployer(cloud.getProvider().getProvider(), cloud.getUser().getUser(),\n\t\t\t\t\tcloud.getUser().getApiKey(), props);\n\t\t} catch (final Exception e) {\n\t\t\tpublishEvent(\"connection_to_cloud_api_failed\", cloud.getProvider().getProvider());\n\t\t\tthrow new IllegalStateException(\"Failed to create cloud Deployer\", e);\n\t\t}\n\t\t\n\t\treturn deployer;\n\t}","id":64514,"modified_method":"private JCloudsDeployer initDeployer(final Cloud cloud, final String computeTemplateName, final String \n\t\t\tstorageTemplateName) {\n\t\t\n\t\tif (deployer != null) {\n\t\t\treturn deployer;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tlogger.fine(\"Creating JClouds context deployer for Openstack with user: \" + cloud.getUser().getUser());\n\t\t\tfinal StorageTemplate storageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t\t\tfinal ComputeTemplate computeTemplate = cloud.getCloudCompute().getTemplates().get(computeTemplateName);\n\t\t\tfinal Properties props = new Properties();\n\t\t\t//props.put(OPENSTACK_JCLOUDS_ENDPOINT, getComputeEndpoint(computeTemplate));\n\t\t\tprops.put(CREDENTIALS_TYPE_PROPERTY, CREDENTIALS_TYPE);\n\t\t\tprops.putAll(storageTemplate.getCustom());\n\t\t\t\n\t\t\t\n\t\t\tdeployer = new JCloudsDeployer(cloud.getProvider().getProvider(), cloud.getUser().getUser(),\n\t\t\t\t\tcloud.getUser().getApiKey(), props);\n\t\t} catch (final Exception e) {\n\t\t\tpublishEvent(\"connection_to_cloud_api_failed\", cloud.getProvider().getProvider());\n\t\t\tthrow new IllegalStateException(\"Failed to create cloud Deployer\", e);\n\t\t}\n\t\t\n\t\treturn deployer;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails = new VolumeDetails();\n\t\tVolume volume;\n\t\t\n\t\t//ignoring the passed location, it's a wrong format, taking the compute location instead\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(storageTemplate.getSize(), options);\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volume.getId(), endTime);\n\t\t\tvolume = volumeApi.get().get(volume.getId());\n\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(region, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","id":64515,"modified_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails;\n\t\tfinal Volume volume;\n\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(1, options);\n\t\t\n\t\ttry {\n\t\t\tvolumeDetails = waitForVolume(volumeApi, volume.getId(), endTime);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(location, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \".It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi();\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","id":64516,"modified_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tString location = node.getLocation().getParent().getId();\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi(location);\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\t\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(location, attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void waitForVolumeToReachStatus(final Volume.Status targetStatus, \n\t\t\tfinal Optional<? extends VolumeApi> volumeApi, final String volumeId, final long endTime) \n\t\t\t\t\tthrows StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tlogger.info(\"waiting for volume to reach status: \" + targetStatus.toString());\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == targetStatus) {\n\t\t\t\t\t//volume is ready\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Storage volume management encountered an error. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t}\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout while waiting for volume to reach status \\\" \" + targetStatus \n\t\t\t\t\t\t\t+ \"\\\". Current status is: \" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t}","id":64517,"modified_method":"private VolumeDetails waitForVolume(final Optional<? extends VolumeApi> volumeApi, final String volumeId, \n\t\t\tfinal long endTime) throws StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tVolumeDetails volumeDetails = new VolumeDetails();\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == Volume.Status.AVAILABLE) {\n\t\t\t\t\t//volume is available for use\n\t\t\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t} else if (volumeStatus == Volume.Status.DELETING\n\t\t\t\t\t|| volumeStatus == Volume.Status.IN_USE\n\t\t\t\t\t|| volumeStatus == Volume.Status.UNRECOGNIZED) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack, \"\n\t\t\t\t\t\t\t+ \"unexpected volume status reported: \" + volumeStatus + \". Volume id \" + volumeId);\n\t\t\t\t}\n\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout creating volume. status:\" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\t\t\n\t\t// TODO: wait for state \"Deleting\"?\n\n\t}","id":64518,"modified_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String volumeId) throws StorageProvisioningException {\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi();\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","id":64519,"modified_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String location, final String volumeId) throws StorageProvisioningException {\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","commit_id":"a67a652304e5e38cb5a04292a2787a5f6e0da668","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\t\t\tstorageTemplate.getDeviceName());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t}","id":64520,"modified_method":"@Override\n\tpublic void attachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId + \" to server. Server \"\n\t\t\t\t\t+ \"with ip: \" + machineIp + \" not found\");\n\t\t}\n\t\t\n\t\tString region = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to attach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\tlogger.info(\"Attaching volume on Openstack\");\n\t\t\n\t\tvolumeAttachmentApi.get().attachVolumeToServerAsDevice(volumeId, node.getProviderId(), \n\t\t\tstorageTemplate.getDeviceName());\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.IN_USE, volumeApi, volumeId, endTime);\n\t\t\tlogger.info(\"Volume \" + volumeId + \" attached successfully to machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to attach to machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdetachVolume(region, volumeId, duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while detaching volume: \" + volumeId \n\t\t\t\t\t\t+ \" after a failed attachment. Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tThread.sleep(30 * 1000);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tString location = node.getLocation().getParent().getId();\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi(location);\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\t\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(location, attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","id":64521,"modified_method":"@Override\n\tpublic Set<VolumeDetails> listVolumes(final String machineIp, final long duration, final TimeUnit timeUnit)\n\t\t\tthrows TimeoutException, StorageProvisioningException {\n\t\t\n\t\tSet<VolumeDetails> volumeDetailsSet = new HashSet<VolumeDetails>();\n\t\t\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes attached to \" + machineIp \n\t\t\t\t\t+ \". Server not found\");\n\t\t}\n\t\t\n\t\tString location = node.getLocation().getParent().getId();\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = getAttachmentApi(location);\n\t\t\n\t\tif (!volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to list volumes, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tFluentIterable<? extends VolumeAttachment> volumesAttachmentsList = \n\t\t\t\tvolumeAttachmentApi.get().listAttachmentsOnServer(node.getProviderId());\n\t\t\n\t\tif (volumesAttachmentsList != null) {\n\t\t\tVolume volume;\n\t\t\tfor (VolumeAttachment attachment : volumesAttachmentsList) {\n\t\t\t\tVolumeDetails details = new VolumeDetails();\n\t\t\t\tvolume = getVolume(attachment.getVolumeId());\n\t\t\t\tdetails.setId(volume.getId());\n\t\t\t\tdetails.setName(volume.getName());\n\t\t\t\tdetails.setSize(volume.getSize());\n\t\t\t\tdetails.setLocation(volume.getZone());\n\t\t\t\tvolumeDetailsSet.add(details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn volumeDetailsSet;\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\t/*Volume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();*/\n\t\treturn \"\";\n\t}","id":64522,"modified_method":"@Override\n\tpublic String getVolumeName(final String volumeId) throws StorageProvisioningException {\n\t\tString region = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tVolume volume = getVolume(volumeId);\n\t\tif (volume == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume with id: \" + volumeId + \", volume not found\");\n\t\t}\n\t\t\n\t\treturn volume.getName();\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\n\t}","id":64523,"modified_method":"@Override\n\tpublic void deleteVolume(final String location, final String volumeId, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tString region = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to delete volume \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\t\t\n\t\tif (!volumeApi.get().delete(volumeId)) {\n\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volumeId + \".It may be leaking.\");\n\t\t}\n\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String location, final String volumeId) throws StorageProvisioningException {\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","id":64524,"modified_method":"/**\n\t * Returns the volume by its id if exists or null otherwise.\n\t * @param volumeId The of the requested volume\n\t * @return The Volume matching the given id\n\t * @throws StorageProvisioningException Indicates the storage APIs are not available\n\t */\n\tprivate Volume getVolume(final String volumeId) throws StorageProvisioningException {\n\t\tString region = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume by id \" + volumeId + \", Openstack API is not \"\n\t\t\t\t\t+ \"initialized.\");\n\t\t}\n\t\t\n\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\n\t\treturn volume;\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private VolumeDetails waitForVolume(final Optional<? extends VolumeApi> volumeApi, final String volumeId, \n\t\t\tfinal long endTime) throws StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tVolumeDetails volumeDetails = new VolumeDetails();\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == Volume.Status.AVAILABLE) {\n\t\t\t\t\t//volume is available for use\n\t\t\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t} else if (volumeStatus == Volume.Status.DELETING\n\t\t\t\t\t|| volumeStatus == Volume.Status.IN_USE\n\t\t\t\t\t|| volumeStatus == Volume.Status.UNRECOGNIZED) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Failed to create storage volume on Openstack, \"\n\t\t\t\t\t\t\t+ \"unexpected volume status reported: \" + volumeStatus + \". Volume id \" + volumeId);\n\t\t\t\t}\n\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout creating volume. status:\" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","id":64525,"modified_method":"private void waitForVolumeToReachStatus(final Volume.Status targetStatus, \n\t\t\tfinal Optional<? extends VolumeApi> volumeApi, final String volumeId, final long endTime) \n\t\t\t\t\tthrows StorageProvisioningException, TimeoutException, InterruptedException {\n\t\t\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to get volume status, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tlogger.info(\"waiting for volume to reach status: \" + targetStatus.toString());\n\t\t\n\t\twhile (true) {\n\t\t\tfinal Volume volume = volumeApi.get().get(volumeId);\n\t\t\tif (volume != null) {\n\t\t\t\tVolume.Status volumeStatus = volume.getStatus();\n\t\t\t\tif (volumeStatus == targetStatus) {\n\t\t\t\t\t//volume is ready\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (volumeStatus == Volume.Status.ERROR) {\n\t\t\t\t\tthrow new StorageProvisioningException(\"Storage volume management encountered an error. \"\n\t\t\t\t\t\t\t+ \"Volume id: \" + volumeId);\n\t\t\t\t}\n\n\t\t\t\tif (System.currentTimeMillis() > endTime) {\n\t\t\t\t\tthrow new TimeoutException(\"timeout while waiting for volume to reach status \\\" \" + targetStatus \n\t\t\t\t\t\t\t+ \"\\\". Current status is: \" + volume.getStatus());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(VOLUME_POLLING_INTERVAL_MILLIS);\n\t\t}\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t}","id":64526,"modified_method":"@Override\n\tpublic void setConfig(final Cloud cloud, final String computeTemplateName, final String storageTemplateName) {\n\n\t\tlogger.fine(\"Initializing storage provisioning on Openstack. Using template: \" + storageTemplateName);\n\t\t\n\t\tpublishEvent(EVENT_ATTEMPT_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tinitDeployer(cloud, computeTemplateName, storageTemplateName);\n\t\tpublishEvent(EVENT_ACCOMPLISHED_CONNECTION_TO_CLOUD_API, cloud.getProvider().getProvider());\n\t\tnovaContext = this.computeContext.unwrap();\n\t\tcomputeTemplate = cloud.getCloudCompute().getTemplates().get(computeTemplateName);\n\t\tstorageTemplate = cloud.getCloudStorage().getTemplates().get(storageTemplateName);\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails;\n\t\tfinal Volume volume;\n\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(location);\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(storageTemplate.getSize(), options);\n\t\t\n\t\ttry {\n\t\t\tvolumeDetails = waitForVolume(volumeApi, volume.getId(), endTime);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(location, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \".It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","id":64527,"modified_method":"@Override\n\tpublic VolumeDetails createVolume(final String location, final long duration, final TimeUnit timeUnit) throws \n\t\tTimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tfinal VolumeDetails volumeDetails = new VolumeDetails();\n\t\tfinal String region;\n\t\tVolume volume;\n\t\t\n\t\t//ignoring the passed location, it's a wrong format, taking the compute location instead\n\t\tregion = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\tlogger.info(\"region: \" + region);\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\n\t\tif (!volumeApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tif (computeContext == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to create volume, compute context is not initialized.\");\n\t\t}\n\t\t\n\t\tString volumeName = storageTemplate.getNamePrefix() + System.currentTimeMillis();\n\t\tCreateVolumeOptions options = CreateVolumeOptions.Builder\n\t\t\t\t.name(volumeName)\n\t\t\t\t.description(VOLUME_DESCRIPTION)\n\t\t\t\t.availabilityZone(getStorageZone());\n\n\t\tvolume = volumeApi.get().create(storageTemplate.getSize(), options);\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volume.getId(), endTime);\n\t\t\tvolume = volumeApi.get().get(volume.getId());\n\t\t\tvolumeDetails.setId(volume.getId());\n\t\t\tvolumeDetails.setName(volume.getName());\n\t\t\tvolumeDetails.setSize(volume.getSize());\n\t\t\tvolumeDetails.setLocation(volume.getZone());\n\t\t\tlogger.fine(\"Volume provisioned: \" + volumeDetails.toString());\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volume.getId() + \" failed to start up correctly. Shutting it down.\"\n\t\t\t\t\t+ \" Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tdeleteVolume(region, volume.getId(), duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while deleting volume: \" + volume.getId() \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\n\t\t\n\t\treturn volumeDetails;\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\t//TODO might be faster without the location at all\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (volumeAttachmentApi.isPresent()) {\n\t\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t} else {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\n\t}","id":64528,"modified_method":"@Override\n\tpublic void detachVolume(final String volumeId, final String machineIp, final long duration, \n\t\t\tfinal TimeUnit timeUnit) throws TimeoutException, StorageProvisioningException {\n\t\t\n\t\tfinal long endTime = System.currentTimeMillis() + timeUnit.toMillis(duration);\n\t\tNodeMetadata node = deployer.getServerWithIP(machineIp);\n\t\tif (node == null) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId + \" from server \" + machineIp\n\t\t\t\t\t+ \". Server not found.\");\n\t\t}\n\t\t\n\t\t//TODO might be faster without the location at all\n\t\tString region = getRegionFromHardwareId(computeTemplate.getHardwareId());\n\t\t\n\t\tOptional<? extends VolumeApi> volumeApi = getVolumeApi(region);\n\t\tOptional<? extends VolumeAttachmentApi> volumeAttachmentApi = \n\t\t\t\tgetAttachmentApi(node.getLocation().getParent().getId());\n\t\t\n\t\tif (!volumeApi.isPresent() || !volumeAttachmentApi.isPresent()) {\n\t\t\tthrow new StorageProvisioningException(\"Failed to detach volume \" + volumeId \n\t\t\t\t\t+ \", Openstack API is not initialized.\");\n\t\t}\n\t\t\n\t\tvolumeAttachmentApi.get().detachVolumeFromServer(volumeId, node.getProviderId());\n\t\t\n\t\ttry {\n\t\t\twaitForVolumeToReachStatus(Volume.Status.AVAILABLE, volumeApi, volumeId, endTime);\n\t\t\tlogger.fine(\"Volume \" + volumeId + \" detached successfully from machine : \" + machineIp);\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"volume: \" + volumeId + \" failed to detach from machine \" + machineIp\n\t\t\t\t\t+ \". Error was: \" + e.getMessage(), e);\n\t\t\ttry {\n\t\t\t\tattachVolume(region, volumeId, duration, timeUnit);\n\t\t\t} catch (final Exception e2) {\n\t\t\t\tlogger.log(Level.WARNING, \"Error while re-attaching volume: \" + volumeId \n\t\t\t\t\t\t+ \". Error was: \" + e.getMessage() + \". It may be leaking.\", e);\n\t\t\t}\n\t\t\tthrow new StorageProvisioningException(e);\n\t\t}\t\t\n\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private String getStorageZone() throws IllegalArgumentException {\n\t\tString zone;\n\t\tMap<String, Object> customSettings = storageTemplate.getCustom();\n\t\t\n\t\tif (customSettings != null) {\n\t\t\tObject zoneObj = customSettings.get(OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\tif (zoneObj instanceof String) {\n\t\t\t\tzone = (String) zoneObj;\n\t\t\t\tif (StringUtils.isBlank(zone)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property is missing or empty: \" \n\t\t\t\t\t\t\t+ OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE\n\t\t\t\t\t\t+ \"\\\" must be of type String\"); \n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Storate template is missing a \\\"custom\\\" section with the required \"\n\t\t\t\t\t+ \"property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE  + \"\\\"\");\n\t\t}\n\t\t\n\t\treturn zone;\n\t}","id":64529,"modified_method":"private String getStorageZone() throws IllegalArgumentException {\n\t\tString zone;\n\t\tMap<String, Object> customSettings = storageTemplate.getCustom();\n\t\t\n\t\tif (customSettings != null) {\n\t\t\tObject zoneObj = customSettings.get(OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\tif (zoneObj instanceof String) {\n\t\t\t\tzone = (String) zoneObj;\n\t\t\t\tif (StringUtils.isBlank(zone)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property is missing or empty: \" \n\t\t\t\t\t\t\t+ OPENSTACK_CUSTOM_VOLUME_ZONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Storate template custom property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE\n\t\t\t\t\t\t+ \"\\\" is missing or not a String\"); \n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Storate template is missing a \\\"custom\\\" section with the required \"\n\t\t\t\t\t+ \"property \\\"\" + OPENSTACK_CUSTOM_VOLUME_ZONE  + \"\\\"\");\n\t\t}\n\t\t\n\t\treturn zone;\n\t}","commit_id":"9ef437803bde46d165e8dc0f38812835636bb414","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n     * Loads the update center data, if any.\n     *\n     * @return  null if no data is available.\n     */\n    public Data getData() {\n        TextFile df = getDataFile();\n        if(df.exists()) {\n            try {\n                return new Data(JSONObject.fromObject(df.read()));\n            } catch (IOException e) {\n                LOGGER.log(Level.SEVERE,\"Failed to parse \"+df,e);\n                df.delete(); // if we keep this file, it will cause repeated failures\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }","id":64530,"modified_method":"/**\n     * Loads the update center data, if any.\n     *\n     * @return  null if no data is available.\n     */\n    public Data getData() {\n        JSONObject o = getJSONObject();\n        if (o!=null)    return new Data(o);\n        return null;\n    }","commit_id":"3a38a67cf8838a04fe2e3c7b938ab9d305c99367","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n     * This is the endpoint that receives the update center data file from the browser.\n     */\n    public void doPostBack(StaplerRequest req, StaplerResponse rsp) throws IOException, GeneralSecurityException {\n        dataTimestamp = System.currentTimeMillis();\n        String json = IOUtils.toString(req.getInputStream(),\"UTF-8\");\n        JSONObject o = JSONObject.fromObject(json);\n\n        int v = o.getInt(\"updateCenterVersion\");\n        if(v !=1) {\n            LOGGER.warning(\"Unrecognized update center version: \"+v);\n            return;\n        }\n\n        if (signatureCheck)\n            verifySignature(o);\n\n        LOGGER.info(\"Obtained the latest update center data file for UpdateSource \" + id);\n        getDataFile().write(json);\n        rsp.setContentType(\"text/plain\");  // So browser won't try to parse response\n    }","id":64531,"modified_method":"/**\n     * This is the endpoint that receives the update center data file from the browser.\n     */\n    public FormValidation doPostBack(StaplerRequest req) throws IOException, GeneralSecurityException {\n        dataTimestamp = System.currentTimeMillis();\n        String json = IOUtils.toString(req.getInputStream(),\"UTF-8\");\n        JSONObject o = JSONObject.fromObject(json);\n\n        int v = o.getInt(\"updateCenterVersion\");\n        if(v !=1)\n            throw new IllegalArgumentException(\"Unrecognized update center version: \"+v);\n\n        if (signatureCheck) {\n            FormValidation e = verifySignature(o);\n            if (e.kind!=Kind.OK)\n                LOGGER.severe(e.renderHtml());\n            return e;\n        }\n\n        LOGGER.info(\"Obtained the latest update center data file for UpdateSource \" + id);\n        getDataFile().write(json);\n        return FormValidation.ok();\n    }","commit_id":"3a38a67cf8838a04fe2e3c7b938ab9d305c99367","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n     * Verifies the signature in the update center data file.\n     */\n    private boolean verifySignature(JSONObject o) throws GeneralSecurityException, IOException {\n        JSONObject signature = o.getJSONObject(\"signature\");\n        if (signature.isNullObject()) {\n            LOGGER.severe(\"No signature block found\");\n            return false;\n        }\n        o.remove(\"signature\");\n\n        List<X509Certificate> certs = new ArrayList<X509Certificate>();\n        {// load and verify certificates\n            CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n            for (Object cert : signature.getJSONArray(\"certificates\")) {\n                X509Certificate c = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(Base64.decode(cert.toString().toCharArray())));\n                c.checkValidity();\n                certs.add(c);\n            }\n\n            // all default root CAs in JVM are trusted, plus certs bundled in Jenkins\n            Set<TrustAnchor> anchors = new HashSet<TrustAnchor>(); // CertificateUtil.getDefaultRootCAs();\n            ServletContext context = Jenkins.getInstance().servletContext;\n            for (String cert : (Set<String>) context.getResourcePaths(\"/WEB-INF/update-center-rootCAs\")) {\n                if (cert.endsWith(\".txt\"))  continue;       // skip text files that are meant to be documentation\n                anchors.add(new TrustAnchor((X509Certificate)cf.generateCertificate(context.getResourceAsStream(cert)),null));\n            }\n            CertificateUtil.validatePath(certs,anchors);\n        }\n\n        // this is for computing a digest to check sanity\n        MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n        DigestOutputStream dos = new DigestOutputStream(new NullOutputStream(),sha1);\n\n        // this is for computing a signature\n        Signature sig = Signature.getInstance(\"SHA1withRSA\");\n        sig.initVerify(certs.get(0));\n        SignatureOutputStream sos = new SignatureOutputStream(sig);\n\n        o.writeCanonical(new OutputStreamWriter(new TeeOutputStream(dos,sos),\"UTF-8\"));\n\n        // did the digest match? this is not a part of the signature validation, but if we have a bug in the c14n\n        // (which is more likely than someone tampering with update center), we can tell\n        String computedDigest = new String(Base64.encode(sha1.digest()));\n        String providedDigest = signature.getString(\"digest\");\n        if (!computedDigest.equalsIgnoreCase(providedDigest)) {\n            LOGGER.severe(\"Digest mismatch: \"+computedDigest+\" vs \"+providedDigest);\n            return false;\n        }\n\n        if (!sig.verify(Base64.decode(signature.getString(\"signature\").toCharArray()))) {\n            LOGGER.severe(\"Signature in the update center doesn't match with the certificate\");\n            return false;\n        }\n\n        return true;\n    }","id":64532,"modified_method":"/**\n     * Verifies the signature in the update center data file.\n     */\n    private FormValidation verifySignature(JSONObject o) throws IOException {\n        try {\n            FormValidation warning = null;\n\n            JSONObject signature = o.getJSONObject(\"signature\");\n            if (signature.isNullObject()) {\n                return FormValidation.error(\"No signature block found in update center '\"+id+\"'\");\n            }\n            o.remove(\"signature\");\n\n            List<X509Certificate> certs = new ArrayList<X509Certificate>();\n            {// load and verify certificates\n                CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n                for (Object cert : signature.getJSONArray(\"certificates\")) {\n                    X509Certificate c = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(Base64.decode(cert.toString().toCharArray())));\n                    try {\n                        c.checkValidity();\n                    } catch (CertificateExpiredException e) { // even if the certificate isn't valid yet, we'll proceed it anyway\n                        warning = FormValidation.warning(e,String.format(\"Certificate %s has expired in update center '%s'\",cert.toString(),id));\n                    } catch (CertificateNotYetValidException e) {\n                        warning = FormValidation.warning(e,String.format(\"Certificate %s is not yet valid in update center '%s'\",cert.toString(),id));\n                    }\n                    certs.add(c);\n                }\n\n                // all default root CAs in JVM are trusted, plus certs bundled in Jenkins\n                Set<TrustAnchor> anchors = new HashSet<TrustAnchor>(); // CertificateUtil.getDefaultRootCAs();\n                ServletContext context = Jenkins.getInstance().servletContext;\n                for (String cert : (Set<String>) context.getResourcePaths(\"/WEB-INF/update-center-rootCAs\")) {\n                    if (cert.endsWith(\".txt\"))  continue;       // skip text files that are meant to be documentation\n                    anchors.add(new TrustAnchor((X509Certificate)cf.generateCertificate(context.getResourceAsStream(cert)),null));\n                }\n                CertificateUtil.validatePath(certs,anchors);\n            }\n\n            // this is for computing a digest to check sanity\n            MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n            DigestOutputStream dos = new DigestOutputStream(new NullOutputStream(),sha1);\n\n            // this is for computing a signature\n            Signature sig = Signature.getInstance(\"SHA1withRSA\");\n            sig.initVerify(certs.get(0));\n            SignatureOutputStream sos = new SignatureOutputStream(sig);\n\n            o.writeCanonical(new OutputStreamWriter(new TeeOutputStream(dos,sos),\"UTF-8\"));\n\n            // did the digest match? this is not a part of the signature validation, but if we have a bug in the c14n\n            // (which is more likely than someone tampering with update center), we can tell\n            String computedDigest = new String(Base64.encode(sha1.digest()));\n            String providedDigest = signature.getString(\"digest\");\n            if (!computedDigest.equalsIgnoreCase(providedDigest)) {\n                return FormValidation.error(\"Digest mismatch: \"+computedDigest+\" vs \"+providedDigest+\" in update center '\"+id+\"'\");\n            }\n\n            if (!sig.verify(Base64.decode(signature.getString(\"signature\").toCharArray()))) {\n                return FormValidation.error(\"Signature in the update center doesn't match with the certificate in update center '\"+id+\"'\");\n            }\n\n            if (warning!=null)  return warning;\n            return FormValidation.ok();\n        } catch (GeneralSecurityException e) {\n            return FormValidation.error(e,\"Signature verification failed in the update center '\"+id+\"'\");\n        }\n    }","commit_id":"3a38a67cf8838a04fe2e3c7b938ab9d305c99367","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * send the message\n         *\n         * @return true if the message was sent ok, false if the connection b0rked\n         */\n        private boolean doSend(OutNetMessage msg) {\n            msg.timestamp(\"TCPConnection.runner.doSend fetched\");\n            long afterExpire = _context.clock().now();\n\n            byte data[] = msg.getMessageData();\n            if (data == null) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"message \" + msg.getMessageType() + \"/\" + msg.getMessageId() \n                              + \" expired before it could be sent\");\n                _transport.afterSend(msg, false, false);\n                return true;\n            }\n            msg.timestamp(\"TCPConnection.runner.doSend before sending \" \n                          + data.length + \" bytes\");\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Sending \" + data.length + \" bytes to \" \n                           + _remoteIdentity.getHash().toBase64());\n\n            long exp = msg.getMessage().getMessageExpiration().getTime();\n\n            long beforeWrite = 0;\n            try {\n                synchronized (_out) {\n                    beforeWrite = _context.clock().now();\n                    _out.write(data);\n                    _out.flush();\n                }\n            } catch (IOException ioe) {\n                if (_log.shouldLog(Log.ERROR))\n                    _log.error(\"IO error writing out a \" + data.length + \" byte message to \" \n                              + _remoteIdentity.getHash().toBase64());\n                return false;\n            }\n\n            long end = _context.clock().now();\n            long timeLeft = exp - end;\n\n            msg.timestamp(\"TCPConnection.runner.doSend sent and flushed\");\n\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Message \" + msg.getMessageType()\n                          + \" (expiring in \" + timeLeft + \"ms) sent to \" \n                          + _remoteIdentity.getHash().toBase64() + \" from \" \n                          + _context.routerHash().toBase64()\n                          + \" over connection \" + _id + \" with \" + data.length \n                          + \" bytes in \" + (end - afterExpire) + \"ms (write took \"\n                          + (end - beforeWrite) + \"ms, prepare took \"\n                          + (beforeWrite - afterExpire) + \"ms)\");\n\n            long lifetime = msg.getLifetime();\n            if (lifetime > 10*1000) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"The processing of the message took way too long (\" + lifetime \n                              + \"ms) - time left (\" + timeLeft + \") to \" \n                              + _remoteIdentity.getHash().toBase64() + \"\\n\" + msg.toString());\n            }\n            _transport.afterSend(msg, true);\n\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"doSend - message sent completely: \" \n                           + msg.getMessageSize() + \" byte \" + msg.getMessageType()  + \" message to \" \n                           + _remoteIdentity.getHash().toBase64());\n            if (end - afterExpire > 1000) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"Actual sending took too long ( \" + (end-afterExpire) \n                              + \"ms) sending \" + data.length + \" bytes to \" \n                              + _remoteIdentity.getHash().toBase64());\n            }\n            if (data.length > 2*1024)\n                _context.statManager().addRateData(\"tcp.writeTimeLarge\", end - beforeWrite, end - beforeWrite);\n            else\n                _context.statManager().addRateData(\"tcp.writeTimeSmall\", end - beforeWrite, end - beforeWrite);\n            if (end-beforeWrite > 1*1024)\n                _context.statManager().addRateData(\"tcp.writeTimeSlow\", end - beforeWrite, end - beforeWrite);\n            return true;\n        }","id":64533,"modified_method":"/**\n         * send the message\n         *\n         * @return true if the message was sent ok, false if the connection b0rked\n         */\n        private boolean doSend(OutNetMessage msg) {\n            msg.timestamp(\"TCPConnection.runner.doSend fetched\");\n            long afterExpire = _context.clock().now();\n\n            byte data[] = msg.getMessageData();\n            if (data == null) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"message \" + msg.getMessageType() + \"/\" + msg.getMessageId() \n                              + \" expired before it could be sent\");\n                _transport.afterSend(msg, false, false);\n                return true;\n            }\n            msg.timestamp(\"TCPConnection.runner.doSend before sending \" \n                          + data.length + \" bytes\");\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Sending \" + data.length + \" bytes to \" \n                           + _remoteIdentity.getHash().toBase64());\n\n            long exp = msg.getMessage().getMessageExpiration().getTime();\n\n            long beforeWrite = 0;\n            try {\n                synchronized (_out) {\n                    beforeWrite = _context.clock().now();\n                    _out.write(data);\n                    _out.flush();\n                }\n            } catch (IOException ioe) {\n                if (_log.shouldLog(Log.ERROR))\n                    _log.error(\"IO error writing out a \" + data.length + \" byte message to \" \n                              + _remoteIdentity.getHash().toBase64());\n                return false;\n            }\n\n            long end = _context.clock().now();\n            long timeLeft = exp - end;\n\n            msg.timestamp(\"TCPConnection.runner.doSend sent and flushed \" + data.length + \" bytes\");\n\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Message \" + msg.getMessageType()\n                          + \" (expiring in \" + timeLeft + \"ms) sent to \" \n                          + _remoteIdentity.getHash().toBase64() + \" from \" \n                          + _context.routerHash().toBase64()\n                          + \" over connection \" + _id + \" with \" + data.length \n                          + \" bytes in \" + (end - afterExpire) + \"ms (write took \"\n                          + (end - beforeWrite) + \"ms, prepare took \"\n                          + (beforeWrite - afterExpire) + \"ms)\");\n\n            long lifetime = msg.getLifetime();\n            if (lifetime > 10*1000) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"The processing of the message took way too long (\" + lifetime \n                              + \"ms) - time left (\" + timeLeft + \") to \" \n                              + _remoteIdentity.getHash().toBase64() + \"\\n\" + msg.toString());\n            }\n            _transport.afterSend(msg, true);\n\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"doSend - message sent completely: \" \n                           + msg.getMessageSize() + \" byte \" + msg.getMessageType()  + \" message to \" \n                           + _remoteIdentity.getHash().toBase64());\n            if (end - afterExpire > 1000) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"Actual sending took too long ( \" + (end-afterExpire) \n                              + \"ms) sending \" + data.length + \" bytes to \" \n                              + _remoteIdentity.getHash().toBase64());\n            }\n            if (data.length > 2*1024)\n                _context.statManager().addRateData(\"tcp.writeTimeLarge\", end - beforeWrite, end - beforeWrite);\n            else\n                _context.statManager().addRateData(\"tcp.writeTimeSmall\", end - beforeWrite, end - beforeWrite);\n            if (end-beforeWrite > 1*1024)\n                _context.statManager().addRateData(\"tcp.writeTimeSlow\", end - beforeWrite, end - beforeWrite);\n            return true;\n        }","commit_id":"54aeab152471df8f4a24b26ceb25f10fa94d95fe","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void addMessage(OutNetMessage msg) {\n        msg.timestamp(\"TCPConnection.addMessage\");\n        int totalPending = 0;\n        boolean fail = false;\n        long beforeAdd = _context.clock().now();\n        StringBuffer pending = new StringBuffer(64);\n        List removed = null;\n        synchronized (_toBeSent) {\n            for (int i = 0; i < _toBeSent.size(); i++) {\n                OutNetMessage cur = (OutNetMessage)_toBeSent.get(i);\n                if (cur.getExpiration() < beforeAdd) {\n                    if (cur.getLifetime() > MIN_MESSAGE_LIFETIME_FOR_PENALTY) {\n                        fail = true;\n                        break;\n                    } else {\n                        // yeah, it expired, so drop it, but it wasn't our\n                        // fault (since it was almost expired when we got it\n                        if (removed == null)\n                            removed = new ArrayList(2);\n                        removed.add(cur);\n                        _toBeSent.remove(i);\n                        i--;\n                    }\n                }\n            }\n            if (!fail) {\n                _toBeSent.add(msg);\n            }\n            totalPending = _toBeSent.size();\n            pending.append(totalPending).append(\": \");\n            if (fail) {\n                for (int i = 0; i < totalPending; i++) {\n                    OutNetMessage cur = (OutNetMessage)_toBeSent.get(i);\n                    pending.append(cur.getMessageSize()).append(\" byte \");\n                    pending.append(cur.getMessageType()).append(\" message added\");\n                    pending.append(\" added \").append(cur.getLifetime()).append(\" ms ago, \");\n                }\n            }\n            \n            // the ConnectionRunner.getNext does a wait() until we have messages\n            _toBeSent.notifyAll();\n        }\n        long afterAdd = _context.clock().now();\n\n        if (totalPending >= 2)\n            _context.statManager().addRateData(\"tcp.queueSize\", totalPending-1, 0);\n\n        if (removed != null) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"messages expired on the queue to \" + _remoteIdentity.getHash().toBase64() \n                          + \" but they weren't that old: \" + removed.size());\n            for (int i = 0; i < removed.size(); i++) {\n                OutNetMessage cur = (OutNetMessage)removed.get(i);\n                msg.timestamp(\"TCPConnection.addMessage expired but not our fault\");\n                _transport.afterSend(cur, false);\n            }\n        }\n        \n        if (fail) {\n            if (_log.shouldLog(Log.ERROR))\n                _log.error(\"messages expired on the queue to \" + _remoteIdentity.getHash().toBase64() + \": \" + pending.toString());\n\n            // do we really want to give them a comm error because they're so.damn.slow reading their stream?\n            _context.profileManager().commErrorOccurred(_remoteIdentity.getHash());\n            \n            msg.timestamp(\"TCPConnection.addMessage saw an expired queued message\");\n            _transport.afterSend(msg, false);\n            // should we really be closing a connection if they're that slow?  \n            // yeah, i think we should.\n            closeConnection();\n        } else {\n\n            long diff = afterAdd - beforeAdd;\n            if (diff > 500) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"Lock contention adding a message: \" + diff + \"ms to \" \n                              + _remoteIdentity.getHash().toBase64() + \": \" + totalPending);\n            }\n\n            msg.timestamp(\"TCPConnection.addMessage after toBeSent.add and notify\");\n\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Add message with toBeSent.size = \" + totalPending + \" to \" + _remoteIdentity.getHash().toBase64());\n            if (totalPending <= 0) {\n                if (_log.shouldLog(Log.ERROR))\n                    _log.error(\"WTF, total pending after adding \" + msg.getMessage().getClass().getName() + \" <= 0! \" + msg);\n            }\n        }\n    }","id":64534,"modified_method":"public void addMessage(OutNetMessage msg) {\n        msg.timestamp(\"TCPConnection.addMessage\");\n        int totalPending = 0;\n        boolean fail = false;\n        long beforeAdd = _context.clock().now();\n        StringBuffer pending = new StringBuffer(64);\n        List removed = null;\n        synchronized (_toBeSent) {\n            for (int i = 0; i < _toBeSent.size(); i++) {\n                OutNetMessage cur = (OutNetMessage)_toBeSent.get(i);\n                if (cur.getExpiration() < beforeAdd) {\n                    if (cur.getLifetime() > MIN_MESSAGE_LIFETIME_FOR_PENALTY) {\n                        fail = true;\n                        break;\n                    } else {\n                        // yeah, it expired, so drop it, but it wasn't our\n                        // fault (since it was almost expired when we got it\n                        if (removed == null)\n                            removed = new ArrayList(2);\n                        removed.add(cur);\n                        _toBeSent.remove(i);\n                        i--;\n                    }\n                }\n            }\n            if (!fail) {\n                _toBeSent.add(msg);\n            }\n            totalPending = _toBeSent.size();\n            pending.append(totalPending).append(\": \");\n            if (fail) {\n                for (int i = 0; i < totalPending; i++) {\n                    OutNetMessage cur = (OutNetMessage)_toBeSent.get(i);\n                    pending.append(cur.getMessageSize()).append(\" byte \");\n                    pending.append(cur.getMessageType()).append(\" message added\");\n                    pending.append(\" added \").append(cur.getLifetime()).append(\" ms ago, \");\n                }\n            }\n            \n            // the ConnectionRunner.getNext does a wait() until we have messages\n            _toBeSent.notifyAll();\n        }\n        long afterAdd = _context.clock().now();\n\n        if (totalPending >= 2)\n            _context.statManager().addRateData(\"tcp.queueSize\", totalPending-1, 0);\n\n        if (removed != null) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"messages expired on the queue to \" + _remoteIdentity.getHash().toBase64() \n                          + \" but they weren't that old: \" + removed.size());\n            for (int i = 0; i < removed.size(); i++) {\n                OutNetMessage cur = (OutNetMessage)removed.get(i);\n                msg.timestamp(\"TCPConnection.addMessage expired but not our fault\");\n                _transport.afterSend(cur, false);\n            }\n        }\n        \n        if (fail) {\n            if (_log.shouldLog(Log.ERROR))\n                _log.error(\"messages expired on the queue to \" + _remoteIdentity.getHash().toBase64() + \": \" + pending.toString());\n\n            if (_out instanceof BandwidthLimitedOutputStream) {\n                BandwidthLimitedOutputStream o = (BandwidthLimitedOutputStream)_out;\n                FIFOBandwidthLimiter.Request req = o.getCurrentRequest();\n                if (req != null) {\n                    if (_log.shouldLog(Log.ERROR))\n                        _log.error(\"When the messages timed out, our outbound con requested \" \n                                   + req.getTotalOutboundRequested() + \" bytes (\" + req.getPendingOutboundRequested() \n                                   + \" pending) after waiting \" + (_context.clock().now() - req.getRequestTime()) + \"ms\");\n                }\n            }\n            // do we really want to give them a comm error because they're so.damn.slow reading their stream?\n            _context.profileManager().commErrorOccurred(_remoteIdentity.getHash());\n            \n            msg.timestamp(\"TCPConnection.addMessage saw an expired queued message\");\n            _transport.afterSend(msg, false);\n            // should we really be closing a connection if they're that slow?  \n            // yeah, i think we should.\n            closeConnection();\n        } else {\n\n            long diff = afterAdd - beforeAdd;\n            if (diff > 500) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"Lock contention adding a message: \" + diff + \"ms to \" \n                              + _remoteIdentity.getHash().toBase64() + \": \" + totalPending);\n            }\n\n            msg.timestamp(\"TCPConnection.addMessage after toBeSent.add and notify\");\n\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Add message with toBeSent.size = \" + totalPending + \" to \" + _remoteIdentity.getHash().toBase64());\n            if (totalPending <= 0) {\n                if (_log.shouldLog(Log.ERROR))\n                    _log.error(\"WTF, total pending after adding \" + msg.getMessage().getClass().getName() + \" <= 0! \" + msg);\n            }\n        }\n    }","commit_id":"54aeab152471df8f4a24b26ceb25f10fa94d95fe","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"protected boolean identifyStationToStation() throws IOException, DataFormatException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n        _context.router().getRouterInfo().getIdentity().writeBytes(baos);\n        Hash keyHash = _context.sha().calculateHash(_key.getData());\n        keyHash.writeBytes(baos);\n        Signature sig = _context.dsa().sign(baos.toByteArray(), _context.keyManager().getSigningPrivateKey());\n        sig.writeBytes(baos);\n    \n        byte encr[] = _context.AESEngine().safeEncrypt(baos.toByteArray(),  _key, _iv, 1024);\n        DataHelper.writeLong(_out, 2, encr.length);\n        _out.write(encr);\n\n        // we've identified ourselves, now read who they are\n        int rlen = (int)DataHelper.readLong(_in, 2);\n        byte pencr[] = new byte[rlen];\n        int read = DataHelper.read(_in, pencr);\n        if (read != rlen) \n            throw new DataFormatException(\"Not enough data in peer ident\");\n        byte decr[] = _context.AESEngine().safeDecrypt(pencr, _key, _iv);\n        if (decr == null)\n            throw new DataFormatException(\"Unable to decrypt - failed exchange?\");\n\n        ByteArrayInputStream bais = new ByteArrayInputStream(decr);\n        _remoteIdentity = new RouterIdentity();\n        _remoteIdentity.readBytes(bais);\n        Hash peerKeyHash = new Hash();\n        peerKeyHash.readBytes(bais);\n\n        if (!peerKeyHash.equals(keyHash)) {\n            if (_log.shouldLog(Log.ERROR))\n                _log.error(\"Peer tried to spoof!\");\n            return false;\n        }\n\t\n        Signature rsig = new Signature();\n        rsig.readBytes(bais);\n        byte signedData[] = new byte[decr.length - rsig.getData().length];\n        System.arraycopy(decr, 0, signedData, 0, signedData.length);\n        return _context.dsa().verifySignature(rsig, signedData, _remoteIdentity.getSigningPublicKey());\n    }","id":64535,"modified_method":"protected boolean identifyStationToStation() throws IOException, DataFormatException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(10*1024);\n        _context.router().getRouterInfo().writeBytes(baos);\n        Hash keyHash = _context.sha().calculateHash(_key.getData());\n        keyHash.writeBytes(baos);\n        Signature sig = _context.dsa().sign(baos.toByteArray(), _context.keyManager().getSigningPrivateKey());\n        sig.writeBytes(baos);\n    \n        byte encr[] = _context.AESEngine().safeEncrypt(baos.toByteArray(),  _key, _iv, 10*1024);\n        DataHelper.writeLong(_out, 2, encr.length);\n        _out.write(encr);\n\n        // we've identified ourselves, now read who they are\n        int rlen = (int)DataHelper.readLong(_in, 2);\n        byte pencr[] = new byte[rlen];\n        int read = DataHelper.read(_in, pencr);\n        if (read != rlen) \n            throw new DataFormatException(\"Not enough data in peer ident\");\n        byte decr[] = _context.AESEngine().safeDecrypt(pencr, _key, _iv);\n        if (decr == null)\n            throw new DataFormatException(\"Unable to decrypt - failed exchange?\");\n\n        ByteArrayInputStream bais = new ByteArrayInputStream(decr);\n        RouterInfo peer = new RouterInfo();\n        peer.readBytes(bais);\n        _remoteIdentity = peer.getIdentity();\n        Hash peerKeyHash = new Hash();\n        peerKeyHash.readBytes(bais);\n\n        if (!peerKeyHash.equals(keyHash)) {\n            if (_log.shouldLog(Log.ERROR))\n                _log.error(\"Peer tried to spoof!\");\n            return false;\n        }\n\t\n        Signature rsig = new Signature();\n        rsig.readBytes(bais);\n        byte signedData[] = new byte[decr.length - rsig.getData().length];\n        System.arraycopy(decr, 0, signedData, 0, signedData.length);\n        boolean valid = _context.dsa().verifySignature(rsig, signedData, _remoteIdentity.getSigningPublicKey());\n        if (valid) \n            _context.netDb().store(_remoteIdentity.getHash(), peer);\n        return valid;\n    }","commit_id":"54aeab152471df8f4a24b26ceb25f10fa94d95fe","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private void invokeProcessors(final XtendFile xtendFile, final Map<MacroAnnotation,List<XtendAnnotationTarget>> annotatedElements, final CancelIndicator cancelIndicator) {\n    Set<MacroAnnotation> _keySet = annotatedElements.keySet();\n    for (final MacroAnnotation macroAnnotation : _keySet) {\n      {\n        final List<XtendAnnotationTarget> elements = this.getElements(macroAnnotation, annotatedElements);\n        List<? extends Object> _xifexpression = null;\n        Processor _processor = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n        boolean _isEach = _processor.isEach();\n        if (_isEach) {\n          _xifexpression = elements;\n        } else {\n          ArrayList<List<XtendAnnotationTarget>> _newArrayList = CollectionLiterals.<List<XtendAnnotationTarget>>newArrayList(elements);\n          _xifexpression = _newArrayList;\n        }\n        final Iterable<?> each = _xifexpression;\n        for (final Object element : each) {\n          {\n            final ProcessingContextImpl processingCtx = this.processingContextProvider.get();\n            processingCtx.setSource(xtendFile);\n            processingCtx.setTypesBuilder(this.jvmTypesBuilder);\n            DefaultEvaluationContext _defaultEvaluationContext = new DefaultEvaluationContext();\n            final DefaultEvaluationContext ctx = _defaultEvaluationContext;\n            QualifiedName _create = QualifiedName.create(\"this\");\n            ctx.newValue(_create, processingCtx);\n            Processor _processor_1 = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n            String _variableName = _processor_1.getVariableName();\n            final String varName = ObjectExtensions.<String>operator_elvis(_variableName, \"it\");\n            QualifiedName _create_1 = QualifiedName.create(varName);\n            ctx.newValue(_create_1, element);\n            QualifiedName _create_2 = QualifiedName.create(\"source\");\n            ctx.newValue(_create_2, xtendFile);\n            try {\n              Processor _processor_2 = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n              XExpression _expression = _processor_2.getExpression();\n              final IEvaluationResult result = this.interpreter.evaluate(_expression, ctx, cancelIndicator);\n              Throwable _exception = result.getException();\n              boolean _notEquals = (!Objects.equal(_exception, null));\n              if (_notEquals) {\n                Resource _eResource = xtendFile.eResource();\n                Throwable _exception_1 = result.getException();\n                this.handleError(_eResource, elements, macroAnnotation, _exception_1);\n              }\n            } catch (final Throwable _t) {\n              if (_t instanceof Exception) {\n                final Exception e = (Exception)_t;\n                String _message = e.getMessage();\n                AnnotationProcessor.LOG.error(_message, e);\n              } else {\n                throw Exceptions.sneakyThrow(_t);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","id":64536,"modified_method":"private void invokeProcessors(final XtendFile xtendFile, final Map<MacroAnnotation,List<XtendAnnotationTarget>> annotatedElements, final CancelIndicator cancelIndicator) {\n    Set<MacroAnnotation> _keySet = annotatedElements.keySet();\n    for (final MacroAnnotation macroAnnotation : _keySet) {\n      {\n        final List<XtendAnnotationTarget> elements = this.getElements(macroAnnotation, annotatedElements);\n        List<? extends Object> _xifexpression = null;\n        Processor _processor = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n        boolean _isEach = _processor.isEach();\n        if (_isEach) {\n          _xifexpression = elements;\n        } else {\n          ArrayList<List<XtendAnnotationTarget>> _newArrayList = CollectionLiterals.<List<XtendAnnotationTarget>>newArrayList(elements);\n          _xifexpression = _newArrayList;\n        }\n        final Iterable<?> each = _xifexpression;\n        for (final Object element : each) {\n          {\n            final ProcessingContextImpl processingCtx = this.processingContextProvider.get();\n            processingCtx.setSource(xtendFile);\n            processingCtx.setTypesBuilder(this.jvmTypesBuilder);\n            processingCtx.setAssociations(this.associations);\n            DefaultEvaluationContext _defaultEvaluationContext = new DefaultEvaluationContext();\n            final DefaultEvaluationContext ctx = _defaultEvaluationContext;\n            QualifiedName _create = QualifiedName.create(\"this\");\n            ctx.newValue(_create, processingCtx);\n            Processor _processor_1 = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n            String _variableName = _processor_1.getVariableName();\n            final String varName = ObjectExtensions.<String>operator_elvis(_variableName, \"it\");\n            QualifiedName _create_1 = QualifiedName.create(varName);\n            ctx.newValue(_create_1, element);\n            QualifiedName _create_2 = QualifiedName.create(\"source\");\n            ctx.newValue(_create_2, xtendFile);\n            try {\n              Processor _processor_2 = this._macroAnnotationExtensions.getProcessor(macroAnnotation);\n              XExpression _expression = _processor_2.getExpression();\n              final IEvaluationResult result = this.interpreter.evaluate(_expression, ctx, cancelIndicator);\n              Throwable _exception = result.getException();\n              boolean _notEquals = (!Objects.equal(_exception, null));\n              if (_notEquals) {\n                Resource _eResource = xtendFile.eResource();\n                Throwable _exception_1 = result.getException();\n                this.handleError(_eResource, elements, macroAnnotation, _exception_1);\n              }\n            } catch (final Throwable _t) {\n              if (_t instanceof Exception) {\n                final Exception e = (Exception)_t;\n                String _message = e.getMessage();\n                AnnotationProcessor.LOG.error(_message, e);\n              } else {\n                throw Exceptions.sneakyThrow(_t);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"public String getProcessorClassName(final MacroAnnotation it) {\n    String _qualifiedName = this.getQualifiedName(it);\n    String _plus = (_qualifiedName + \"Processor\");\n    return _plus;\n  }","id":64537,"modified_method":"public String getProcessorClassName(final MacroAnnotation it) {\n    String _qualifiedName = it==null?(String)null:this.getQualifiedName(it);\n    String _plus = (\"\" + _qualifiedName);\n    String _plus_1 = (_plus + \"Processor\");\n    return _plus_1;\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"public String getRegistratorClassName(final MacroAnnotation it) {\n    String _qualifiedName = this.getQualifiedName(it);\n    String _plus = (_qualifiedName + \"Registrator\");\n    return _plus;\n  }","id":64538,"modified_method":"public String getRegistratorClassName(final MacroAnnotation it) {\n    String _qualifiedName = it==null?(String)null:this.getQualifiedName(it);\n    String _plus = (\"\" + _qualifiedName);\n    String _plus_1 = (_plus + \"Registrator\");\n    return _plus_1;\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"public String getQualifiedName(final MacroAnnotation it) {\n    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(it);\n    String _string = _fullyQualifiedName.toString();\n    return _string;\n  }","id":64539,"modified_method":"public String getQualifiedName(final MacroAnnotation it) {\n    QualifiedName _fullyQualifiedName = it==null?(QualifiedName)null:this._iQualifiedNameProvider.getFullyQualifiedName(it);\n    String _string = _fullyQualifiedName==null?(String)null:_fullyQualifiedName.toString();\n    return _string;\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"public void warning(final Object target, final String message) {\n    boolean _matched = false;\n    if (!_matched) {\n      if (target instanceof EObject) {\n        final EObject _eObject = (EObject)target;\n        _matched=true;\n        Resource _eResource = _eObject.eResource();\n        EList<Diagnostic> _errors = _eResource.getErrors();\n        int _minus = (-1);\n        EObjectDiagnosticImpl _eObjectDiagnosticImpl = new EObjectDiagnosticImpl(Severity.ERROR, \"macro_error\", message, _eObject, null, _minus, null);\n        _errors.add(_eObjectDiagnosticImpl);\n      }\n    }\n    if (!_matched) {\n      IllegalArgumentException _illegalArgumentException = new IllegalArgumentException(\"Only EObjects are supported atm.\");\n      throw _illegalArgumentException;\n    }\n  }","id":64540,"modified_method":"public void warning(final Object target, final String message) {\n    boolean _matched = false;\n    if (!_matched) {\n      if (target instanceof EObject) {\n        final EObject _eObject = (EObject)target;\n        _matched=true;\n        Resource _eResource = _eObject.eResource();\n        EList<Diagnostic> _errors = _eResource.getErrors();\n        IXtendJvmAssociations _associations = this.getAssociations();\n        EObject _primarySourceElement = _associations==null?(EObject)null:_associations.getPrimarySourceElement(_eObject);\n        EObject _elvis = ObjectExtensions.<EObject>operator_elvis(_primarySourceElement, _eObject);\n        int _minus = (-1);\n        EObjectDiagnosticImpl _eObjectDiagnosticImpl = new EObjectDiagnosticImpl(Severity.ERROR, \"macro_error\", message, _elvis, null, _minus, null);\n        _errors.add(_eObjectDiagnosticImpl);\n      }\n    }\n    if (!_matched) {\n      IllegalArgumentException _illegalArgumentException = new IllegalArgumentException(\"Only EObjects are supported atm.\");\n      throw _illegalArgumentException;\n    }\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"public void error(final Object target, final String message) {\n    boolean _matched = false;\n    if (!_matched) {\n      if (target instanceof EObject) {\n        final EObject _eObject = (EObject)target;\n        _matched=true;\n        Resource _eResource = _eObject.eResource();\n        EList<Diagnostic> _errors = _eResource.getErrors();\n        int _minus = (-1);\n        EObjectDiagnosticImpl _eObjectDiagnosticImpl = new EObjectDiagnosticImpl(Severity.ERROR, \"macro_error\", message, _eObject, null, _minus, null);\n        _errors.add(_eObjectDiagnosticImpl);\n      }\n    }\n    if (!_matched) {\n      IllegalArgumentException _illegalArgumentException = new IllegalArgumentException(\"Only EObjects are supported atm.\");\n      throw _illegalArgumentException;\n    }\n  }","id":64541,"modified_method":"public void error(final Object target, final String message) {\n    boolean _matched = false;\n    if (!_matched) {\n      if (target instanceof EObject) {\n        final EObject _eObject = (EObject)target;\n        _matched=true;\n        Resource _eResource = _eObject.eResource();\n        EList<Diagnostic> _errors = _eResource.getErrors();\n        IXtendJvmAssociations _associations = this.getAssociations();\n        EObject _primarySourceElement = _associations==null?(EObject)null:_associations.getPrimarySourceElement(_eObject);\n        EObject _elvis = ObjectExtensions.<EObject>operator_elvis(_primarySourceElement, _eObject);\n        int _minus = (-1);\n        EObjectDiagnosticImpl _eObjectDiagnosticImpl = new EObjectDiagnosticImpl(Severity.ERROR, \"macro_error\", message, _elvis, null, _minus, null);\n        _errors.add(_eObjectDiagnosticImpl);\n      }\n    }\n    if (!_matched) {\n      IllegalArgumentException _illegalArgumentException = new IllegalArgumentException(\"Only EObjects are supported atm.\");\n      throw _illegalArgumentException;\n    }\n  }","commit_id":"42762702a881b092f55bacfbbadd72e59d3c1935","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @since 2.7\n\t */\n\tprotected JvmDeclaredType createType(IType jdtType, IJavaProject javaProject) {\n\t\tif (jdtType.getDeclaringType() != null)\n\t\t\tthrow new IllegalArgumentException(\"Cannot create type from non-toplevel-type: '\"\n\t\t\t\t\t+ jdtType.getFullyQualifiedName() + \"'.\");\n\t\tresolveBinding.start();\n\n\t\tparser.setWorkingCopyOwner(workingCopyOwner);\n\t\tparser.setIgnoreMethodBodies(true);\n\t\t\n\t\tparser.setProject(javaProject);\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Object, Object> options = javaProject.getOptions(true);\n\t\t\n\t\toptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);\n\t\tparser.setCompilerOptions(options);\n\n\t\tIBinding[] bindings = parser.createBindings(new IJavaElement[] { jdtType }, null);\n\t\tresolveBinding.stop();\n\t\tif (bindings[0] == null)\n\t\t\tthrow new IllegalStateException(\"Could not create binding for '\" + jdtType.getFullyQualifiedName() + \"'.\");\n\t\tIBinding binding = bindings[0];\n\t\tif (binding instanceof ITypeBinding) {\n\t\t\tcreateType.start();\n\t\t\tITypeBinding typeBinding = (ITypeBinding) binding;\n\t\t\t\n\t\t\tJvmDeclaredType result = createType(jdtType, typeBinding);\n\n\t\t\t// Clear the cached information.\n\t\t\t//\n\t\t\tclearCache();\n\t\t\tcreateType.stop();\n\t\t\treturn result;\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Expected ITypeBinding for '\" + jdtType.getFullyQualifiedName()\n\t\t\t\t\t+ \"', but got '\" + binding.toString() + \"'.\");\n\t\t}\n\t}","id":64542,"modified_method":"/**\n\t * @since 2.7\n\t */\n\tprotected JvmDeclaredType createType(IType jdtType, IJavaProject javaProject) {\n\t\tif (jdtType.getDeclaringType() != null)\n\t\t\tthrow new IllegalArgumentException(\"Cannot create type from non-toplevel-type: '\"\n\t\t\t\t\t+ jdtType.getFullyQualifiedName() + \"'.\");\n\t\tIBinding binding = resolveBindings(jdtType, javaProject);\n\t\tif (binding == null) {\n\t\t\tIJavaProject fallbackProject = jdtType.getJavaProject();\n\t\t\t// fallback to the project of the given jdtType if it is different from the explicitly given project\n\t\t\tif (!fallbackProject.equals(javaProject)) {\n\t\t\t\tbinding = resolveBindings(jdtType, fallbackProject);\n\t\t\t\tif (binding == null) {\n\t\t\t\t\tthrow new IllegalStateException(\"Could not create binding for '\" + jdtType.getFullyQualifiedName() + \n\t\t\t\t\t\t\t\"' in context of projects '\" + javaProject.getElementName() + \"' and '\" + fallbackProject.getElementName() + \"'.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Could not create binding for '\" + jdtType.getFullyQualifiedName() + \"' in context of project '\" + javaProject.getElementName() + \"'.\");\n\t\t\t}\n\t\t}\n\t\tif (binding instanceof ITypeBinding) {\n\t\t\tcreateType.start();\n\t\t\tITypeBinding typeBinding = (ITypeBinding) binding;\n\t\t\t\n\t\t\tJvmDeclaredType result = createType(jdtType, typeBinding);\n\n\t\t\t// Clear the cached information.\n\t\t\t//\n\t\t\tclearCache();\n\t\t\tcreateType.stop();\n\t\t\treturn result;\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Expected ITypeBinding for '\" + jdtType.getFullyQualifiedName()\n\t\t\t\t\t+ \"', but got '\" + binding.toString() + \"'.\");\n\t\t}\n\t}","commit_id":"f99f286c10a2901c2ae6ba6dcfcac91fff15fdb5","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test public void testRenameParamter() throws Exception {\n\t\tperformRenameTest(\"Foo\", \"class Foo { def foo(int bar) { bar + 1 }}\", \"bar\", \"baz\");\n\t}","id":64543,"modified_method":"@Test public void testRenameParameter() throws Exception {\n\t\tperformRenameTest(\"Foo\", \"class Foo { def foo(int bar) { bar + 1 }}\", \"bar\", \"baz\");\n\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"public void acceptImport(JvmDeclaredType type) {\n\t\t\timportCollection.getImportedTypes().add(type);\n\t\t}","id":64544,"modified_method":"public void acceptImport(JvmDeclaredType type, boolean isStatic, boolean isExtension) {\n\t\t\tif(isStatic) {\n\t\t\t\tif(isExtension)\n\t\t\t\t\timportSection.addStaticExtensionImport(type);\n\t\t\t\telse\n\t\t\t\t\timportSection.addStaticImport(type);\n\t\t\t} else {\n\t\t\t\timportSection.addImport(type);\n\t\t\t}\n\t\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"public ImportAwareUpdateAcceptor(IRefactoringUpdateAcceptor delegate, ImportCollection importCollection) {\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.importCollection = importCollection;\n\t\t}","id":64545,"modified_method":"public ImportAwareUpdateAcceptor(IRefactoringUpdateAcceptor delegate, RewritableImportSection importSection) {\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.importSection = importSection;\n\t\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tprotected void createTextChange(ITextRegion referenceTextRegion, String newReferenceText, EObject referringElement,\n\t\t\tEObject newTargetElement, EReference reference, URI referringResourceURI,\n\t\t\tIRefactoringUpdateAcceptor updateAcceptor) {\n\t\tJvmDeclaredType targetContainerType = EcoreUtil2.getContainerOfType(newTargetElement, JvmDeclaredType.class);\n\t\tif (targetContainerType != null && updateAcceptor instanceof ImportAwareUpdateAcceptor) {\n\t\t\tif (targetContainerType.getIdentifier().contains(\".\")) {\n\t\t\t\tIScope scope = scopeProvider.getScope(referringElement, reference);\n\t\t\t\tif (scope != null) {\n\t\t\t\t\tif(newReferenceText != null && newReferenceText.startsWith(targetContainerType.getIdentifier())) {\n\t\t\t\t\t\t// check for ambiguities if there were an import\n\t\t\t\t\t\tString shortName = targetContainerType.getSimpleName() \n\t\t\t\t\t\t\t\t+ newReferenceText.substring(targetContainerType.getIdentifier().length());\n\t\t\t\t\t\tIEObjectDescription singleElement = scope.getSingleElement(\n\t\t\t\t\t\t\t\tqualifiedNameConverter.toQualifiedName(shortName));\n\t\t\t\t\t\tif (singleElement == null) {\n\t\t\t\t\t\t\tnewReferenceText = shortName;\n\t\t\t\t\t\t\t((ImportAwareUpdateAcceptor) updateAcceptor).acceptImport(targetContainerType);\n\t\t\t\t\t\t} else if(singleElement.getQualifiedName().equals(qualifiedNameProvider.getFullyQualifiedName(newTargetElement))) {\n\t\t\t\t\t\t\t// same element on scope with simple name\n\t\t\t\t\t\t\tnewReferenceText = shortName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsuper.createTextChange(referenceTextRegion, newReferenceText, referringElement, newTargetElement, reference,\n\t\t\t\treferringResourceURI, updateAcceptor);\n\t}","id":64546,"modified_method":"@Override\n\tprotected void createTextChange(ITextRegion referenceTextRegion, String newReferenceText, EObject referringElement,\n\t\t\tEObject newTargetElement, EReference reference, URI referringResourceURI,\n\t\t\tIRefactoringUpdateAcceptor updateAcceptor) {\n\t\tJvmDeclaredType targetContainerType = getTopLevelContainerType(newTargetElement);\n\t\tif (targetContainerType != null && updateAcceptor instanceof ImportAwareUpdateAcceptor) {\n\t\t\tboolean isStaticFeatureCall = isStaticFeatureCall(referringElement, reference, newTargetElement);\n\t\t\tboolean isStaticExtensionFeatureCall = isStaticExtensionFeatureCall(referringElement, reference, newTargetElement);\n\t\t\tif(newTargetElement instanceof JvmMember)\n\t\t\t\t((ImportAwareUpdateAcceptor) updateAcceptor).removeImport(targetContainerType,\n\t\t\t\t\t\tisStaticFeatureCall,\n\t\t\t\t\t\tisStaticExtensionFeatureCall);\n\t\t\tif (targetContainerType.getIdentifier().contains(\".\")) {\n\t\t\t\tIScope scope = scopeProvider.getScope(referringElement, reference);\n\t\t\t\tif (scope != null && newReferenceText != null) {\n\t\t\t\t\tString shortName = (newReferenceText.startsWith(targetContainerType.getIdentifier())) \n\t\t\t\t\t\t\t? newReferenceText.substring(targetContainerType.getPackageName().length() + 1)\n\t\t\t\t\t\t\t: newReferenceText;\n\t\t\t\t\t// check for ambiguities if there were an import\n\t\t\t\t\tIEObjectDescription singleElement = scope.getSingleElement(\n\t\t\t\t\t\t\tqualifiedNameConverter.toQualifiedName(shortName));\n\t\t\t\t\tEObject resolvedSingleElement = null;\n\t\t\t\t\tif(singleElement != null) \n\t\t\t\t\t\tresolvedSingleElement = EcoreUtil.resolve(singleElement.getEObjectOrProxy(), referringElement);\n\t\t\t\t\tif (resolvedSingleElement == newTargetElement) {\n\t\t\t\t\t\t((ImportAwareUpdateAcceptor) updateAcceptor).acceptImport(targetContainerType,\n\t\t\t\t\t\t\t\tisStaticFeatureCall,\n\t\t\t\t\t\t\t\tisStaticExtensionFeatureCall);\n\t\t\t\t\t\tnewReferenceText = shortName;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tQualifiedName newTargetQualifiedName = qualifiedNameProvider.getFullyQualifiedName(newTargetElement);\n\t\t\t\t\t\t// same element on scope with simple name, so use FQNs\n\t\t\t\t\t\tnewReferenceText = qualifiedNameConverter.toString(newTargetQualifiedName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsuper.createTextChange(referenceTextRegion, newReferenceText, referringElement, newTargetElement, reference,\n\t\t\t\treferringResourceURI, updateAcceptor);\n\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"protected ImportAwareUpdateAcceptor createUpdateAcceptor(IRefactoringUpdateAcceptor updateAcceptor, ImportCollection importCollection) {\n\t\treturn new ImportAwareUpdateAcceptor(updateAcceptor, importCollection);\n\t}","id":64547,"modified_method":"protected ImportAwareUpdateAcceptor createUpdateAcceptor(IRefactoringUpdateAcceptor updateAcceptor, RewritableImportSection importSection) {\n\t\treturn new ImportAwareUpdateAcceptor(updateAcceptor, importSection);\n\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tprotected void processReferringResource(Resource referringResource,\n\t\t\tIterable<IReferenceDescription> referenceDescriptions, ElementRenameArguments elementRenameArguments,\n\t\t\tIRefactoringUpdateAcceptor updateAcceptor) {\n\t\tIterable<IReferenceDescription> nonImportReferences = filter(referenceDescriptions,\n\t\t\t\tnew Predicate<IReferenceDescription>() {\n\t\t\t\t\tpublic boolean apply(IReferenceDescription input) {\n\t\t\t\t\t\treturn !isImportTypeReference(input);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tXImportSection originalImportCollection = importsConfiguration.getImportSection((XtextResource) referringResource);\n\t\tImportCollection importSection = new ImportCollection(originalImportCollection);\n\t\tImportAwareUpdateAcceptor importAwareUpdateAcceptor = createUpdateAcceptor(updateAcceptor, importSection);\n\t\tsuper.processReferringResource(referringResource, nonImportReferences, elementRenameArguments,\n\t\t\t\timportAwareUpdateAcceptor);\n\t\tReplaceRegion importSectionReplace = importSectionSerializer.serialize((XtextResource) referringResource, importSection);\n\t\tReplaceEdit replaceEdit = new ReplaceEdit(importSectionReplace.getOffset(), importSectionReplace.getLength(), importSectionReplace.getText());\n\t\tupdateAcceptor.accept(referringResource.getURI(), replaceEdit);\n\t}","id":64548,"modified_method":"@Override\n\tprotected void processReferringResource(Resource referringResource,\n\t\t\tIterable<IReferenceDescription> referenceDescriptions, ElementRenameArguments elementRenameArguments,\n\t\t\tIRefactoringUpdateAcceptor updateAcceptor) {\n\t\tIterable<IReferenceDescription> nonImportReferences = filter(referenceDescriptions,\n\t\t\t\tnew Predicate<IReferenceDescription>() {\n\t\t\t\t\tpublic boolean apply(IReferenceDescription input) {\n\t\t\t\t\t\treturn !isImportTypeReference(input);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tRewritableImportSection importSection = importSectionFactory.create((XtextResource) referringResource);\n\t\tImportAwareUpdateAcceptor importAwareUpdateAcceptor = createUpdateAcceptor(updateAcceptor, importSection);\n\t\tsuper.processReferringResource(referringResource, nonImportReferences, elementRenameArguments,\n\t\t\t\timportAwareUpdateAcceptor);\n\t\tList<ReplaceRegion> importChanges = importSection.rewrite();\n\t\tTextEdit importChangeEdit = replaceConverter.convertToTextEdit(importChanges);\n\t\tif(importChangeEdit != null) \n\t\t\tupdateAcceptor.accept(referringResource.getURI(), importChangeEdit);\n\t}","commit_id":"932b6e2d9b9dcfbe8258d6dbbaf3c113441144bd","url":"https://github.com/eclipse/xtext"},{"original_method":"public Location resolveLocationDefinition(LocationDefinition ld, Map locationFlags, String optionalName) {\n        ConfigBag newLocationFlags = ConfigBag.newInstance(ld.getConfig())\n            .putAll(locationFlags)\n            .putIfAbsentAndNotNull(LocationInternal.NAMED_SPEC_NAME, ld.getName())\n            .putIfAbsentAndNotNull(LocationInternal.ORIGINAL_SPEC, ld.getName());\n        try {\n            return resolve(ld.getSpec(), newLocationFlags.getAllConfig());\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Cannot instantiate named location '\"+optionalName+\"' pointing at \"+ld.getSpec()+\": \"+e, e);\n        }\n    }","id":64549,"modified_method":"public Location resolveLocationDefinition(LocationDefinition ld, Map locationFlags, String optionalName) {\n        ConfigBag newLocationFlags = ConfigBag.newInstance(ld.getConfig())\n            .putAll(locationFlags)\n            .putIfAbsentAndNotNull(LocationInternal.NAMED_SPEC_NAME, ld.getName())\n            .putIfAbsentAndNotNull(LocationInternal.ORIGINAL_SPEC, ld.getName());\n        try {\n            return resolve(ld.getSpec(), newLocationFlags.getAllConfig());\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Cannot instantiate location '\"+\n                (optionalName!=null ? optionalName : ld)+\"' pointing at \"+ld.getSpec()+\": \"+e, e);\n        }\n    }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n  public List<LocationSummary> list() {\n    return Lists.newArrayList(Iterables.transform(brooklyn().getLocationRegistry().getDefinedLocations().values(),\n        new Function<LocationDefinition, LocationSummary>() {\n          @Override\n          public LocationSummary apply(LocationDefinition l) {\n            return LocationTransformer.newInstance(mgmt(), l, LocationDetailLevel.LOCAL_EXCLUDING_SECRET);\n          }\n        }));\n  }","id":64550,"modified_method":"@Override\n  public List<LocationSummary> list() {\n    return Lists.newArrayList(Iterables.filter(Iterables.transform(brooklyn().getLocationRegistry().getDefinedLocations().values(),\n        new Function<LocationDefinition, LocationSummary>() {\n          @Override\n          public LocationSummary apply(LocationDefinition l) {\n              try {\n                  return LocationTransformer.newInstance(mgmt(), l, LocationDetailLevel.LOCAL_EXCLUDING_SECRET);\n              } catch (Exception e) {\n                  Exceptions.propagateIfFatal(e);\n                  log.warn(\"Unable to find details of location \"+l+\" in REST call to list (ignoring location): \"+e);\n                  log.debug(\"Error details for location \"+l, e);\n                  return null;\n              }\n          }\n        }), LocationSummary.class));\n  }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static LocationSummary newInstance(ManagementContext mgmt, LocationDefinition l, LocationDetailLevel level) {\n        Set<?> config = l.getConfig().entrySet();\n        if (level==LocationDetailLevel.FULL_EXCLUDING_SECRET || level==LocationDetailLevel.FULL_INCLUDING_SECRET) {\n            Location ll = mgmt.getLocationRegistry().resolve(l);\n            if (ll!=null) config = ll.getAllConfig(true).entrySet();\n        }\n\n        return new LocationSummary(\n                l.getId(),\n                l.getName(),\n                l.getSpec(),\n                null,\n                copyConfig(config, level),\n                ImmutableMap.of(\"self\", URI.create(\"/v1/locations/\" + l.getId())));\n    }","id":64551,"modified_method":"public static LocationSummary newInstance(ManagementContext mgmt, LocationDefinition l, LocationDetailLevel level) {\n        Map<String, Object> config = l.getConfig();\n        if (level==LocationDetailLevel.FULL_EXCLUDING_SECRET || level==LocationDetailLevel.FULL_INCLUDING_SECRET) {\n            Location ll = mgmt.getLocationRegistry().resolve(l);\n            if (ll!=null) config = ll.getAllConfig(true);\n        } else if (level==LocationDetailLevel.LOCAL_EXCLUDING_SECRET) {\n            // get displayName\n            if (!config.containsKey(LocationConfigKeys.DISPLAY_NAME.getName())) {\n                Location ll = mgmt.getLocationRegistry().resolve(l);\n                if (ll!=null) {\n                    Map<String, Object> configExtra = ll.getAllConfig(true);\n                    if (configExtra.containsKey(LocationConfigKeys.DISPLAY_NAME.getName())) {\n                        ConfigBag configNew = ConfigBag.newInstance(config);\n                        configNew.configure(LocationConfigKeys.DISPLAY_NAME, (String)configExtra.get(LocationConfigKeys.DISPLAY_NAME.getName()));\n                        config = configNew.getAllConfig();\n                    }\n                }\n            }\n        }\n\n        return new LocationSummary(\n                l.getId(),\n                l.getName(),\n                l.getSpec(),\n                null,\n                copyConfig(config, level),\n                ImmutableMap.of(\"self\", URI.create(\"/v1/locations/\" + l.getId())));\n    }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private static Map<String, ?> copyConfig(@SuppressWarnings(\"rawtypes\") Set entries, LocationDetailLevel level) {\n        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n        if (level!=LocationDetailLevel.NONE) {\n            for (Object entryO : entries) {\n                @SuppressWarnings(\"unchecked\")\n                Map.Entry<String, ?> entry = (Map.Entry<String, ?>) entryO;\n                if (level==LocationDetailLevel.FULL_INCLUDING_SECRET || !Entities.isSecret(entry.getKey())) {\n                    builder.put(entry.getKey(), WebResourceUtils.getValueForDisplay(entry.getValue(), true, false));\n                }\n            }\n        }\n        return builder.build();\n    }","id":64552,"modified_method":"private static Map<String, ?> copyConfig(Map<String,?> entries, LocationDetailLevel level) {\n        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n        if (level!=LocationDetailLevel.NONE) {\n            for (Object entryO : entries.entrySet()) {\n                @SuppressWarnings(\"unchecked\")\n                Map.Entry<String, ?> entry = (Map.Entry<String, ?>) entryO;\n                if (level==LocationDetailLevel.FULL_INCLUDING_SECRET || !Entities.isSecret(entry.getKey())) {\n                    builder.put(entry.getKey(), WebResourceUtils.getValueForDisplay(entry.getValue(), true, false));\n                }\n            }\n        }\n        return builder.build();\n    }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static LocationSummary newInstance(ManagementContext mgmt, Location l, LocationDetailLevel level) {\n        String spec = null;\n        String specId = null;\n        Location lp = l;\n        while (lp!=null && (spec==null || specId==null)) {\n            // walk parent locations\n            // TODO not sure this is the best strategy, or if it's needed, as the spec config is inherited anyway... \n            if (spec==null)\n                spec = Strings.toString( lp.getAllConfig(true).get(LocationInternal.ORIGINAL_SPEC.getName()) );\n            if (specId==null) {\n                LocationDefinition ld = null;\n                // prefer looking it up by name as this loads the canonical definition\n                if (spec!=null) ld = mgmt.getLocationRegistry().getDefinedLocationByName(spec);\n                if (ld==null && spec!=null && spec.startsWith(\"named:\")) \n                    ld = mgmt.getLocationRegistry().getDefinedLocationByName(Strings.removeFromStart(spec, \"named:\"));\n                if (ld==null) ld = mgmt.getLocationRegistry().getDefinedLocationById(lp.getId());\n                if (ld!=null) {\n                    if (spec==null) spec = ld.getSpec();\n                    specId = ld.getId();\n                }\n            }\n            lp = lp.getParent();\n        }\n        if (specId==null && spec!=null) {\n            // fall back to attempting to resolve it\n            Location ll = mgmt.getLocationRegistry().resolveIfPossible(spec);\n            if (ll!=null) specId = ll.getId();\n        }\n        \n        Map<String, ?> config = level!=LocationDetailLevel.NONE ? null : copyConfig(l.getAllConfig(level!=LocationDetailLevel.LOCAL_EXCLUDING_SECRET).entrySet(), level);\n        \n        return new LocationSummary(\n            l.getId(),\n            l.getDisplayName(),\n            spec,\n            l.getClass().getName(),\n            config,\n            MutableMap.of(\"self\", URI.create(\"/v1/locations/\" + l.getId()))\n                .addIfNotNull(\"parent\", l.getParent()!=null ? URI.create(\"/v1/locations/\"+l.getParent().getId()) : null)\n                .addIfNotNull(\"spec\", specId!=null ? URI.create(\"/v1/locations/\"+specId) : null)\n                .toImmutable() );\n    }","id":64553,"modified_method":"public static LocationSummary newInstance(ManagementContext mgmt, Location l, LocationDetailLevel level) {\n        String spec = null;\n        String specId = null;\n        Location lp = l;\n        while (lp!=null && (spec==null || specId==null)) {\n            // walk parent locations\n            // TODO not sure this is the best strategy, or if it's needed, as the spec config is inherited anyway... \n            if (spec==null)\n                spec = Strings.toString( lp.getAllConfig(true).get(LocationInternal.ORIGINAL_SPEC.getName()) );\n            if (specId==null) {\n                LocationDefinition ld = null;\n                // prefer looking it up by name as this loads the canonical definition\n                if (spec!=null) ld = mgmt.getLocationRegistry().getDefinedLocationByName(spec);\n                if (ld==null && spec!=null && spec.startsWith(\"named:\")) \n                    ld = mgmt.getLocationRegistry().getDefinedLocationByName(Strings.removeFromStart(spec, \"named:\"));\n                if (ld==null) ld = mgmt.getLocationRegistry().getDefinedLocationById(lp.getId());\n                if (ld!=null) {\n                    if (spec==null) spec = ld.getSpec();\n                    specId = ld.getId();\n                }\n            }\n            lp = lp.getParent();\n        }\n        if (specId==null && spec!=null) {\n            // fall back to attempting to resolve it\n            Location ll = mgmt.getLocationRegistry().resolveIfPossible(spec);\n            if (ll!=null) specId = ll.getId();\n        }\n        \n        Map<String, Object> configOrig = l.getAllConfig(level!=LocationDetailLevel.LOCAL_EXCLUDING_SECRET);\n        if (level==LocationDetailLevel.LOCAL_EXCLUDING_SECRET) {\n            // for LOCAL, also get the display name\n            if (!configOrig.containsKey(LocationConfigKeys.DISPLAY_NAME.getName())) {\n                Map<String, Object> configExtra = l.getAllConfig(true);\n                if (configExtra.containsKey(LocationConfigKeys.DISPLAY_NAME.getName()))\n                    configOrig.put(LocationConfigKeys.DISPLAY_NAME.getName(), configExtra.get(LocationConfigKeys.DISPLAY_NAME.getName()));\n            }\n        }\n        Map<String, ?> config = level!=LocationDetailLevel.NONE ? null : copyConfig(configOrig, level);\n        \n        return new LocationSummary(\n            l.getId(),\n            l.getDisplayName(),\n            spec,\n            l.getClass().getName(),\n            config,\n            MutableMap.of(\"self\", URI.create(\"/v1/locations/\" + l.getId()))\n                .addIfNotNull(\"parent\", l.getParent()!=null ? URI.create(\"/v1/locations/\"+l.getParent().getId()) : null)\n                .addIfNotNull(\"spec\", specId!=null ? URI.create(\"/v1/locations/\"+specId) : null)\n                .toImmutable() );\n    }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static LocationSummary newInstance(ManagementContext mgmt, String id, LocationSpec locationSpec, LocationDetailLevel level) {\n        Set<?> config = locationSpec.getConfig().entrySet();\n        if (level==LocationDetailLevel.FULL_EXCLUDING_SECRET || level==LocationDetailLevel.FULL_INCLUDING_SECRET) {\n            LocationDefinition ld = new BasicLocationDefinition(id, locationSpec.getName(), locationSpec.getSpec(), locationSpec.getConfig());\n            Location ll = mgmt.getLocationRegistry().resolve(ld);\n            if (ll!=null) config = ll.getAllConfig(true).entrySet();\n        }\n        return new LocationSummary(\n                id,\n                locationSpec.getName(),\n                locationSpec.getSpec(),\n                null,\n                copyConfig(config, level),\n                ImmutableMap.of(\"self\", URI.create(\"/v1/locations/\" + id)));\n    }","id":64554,"modified_method":"public static LocationSummary newInstance(ManagementContext mgmt, String id, LocationSpec locationSpec, LocationDetailLevel level) {\n        Map<String, ?> config = locationSpec.getConfig();\n        if (level==LocationDetailLevel.FULL_EXCLUDING_SECRET || level==LocationDetailLevel.FULL_INCLUDING_SECRET) {\n            LocationDefinition ld = new BasicLocationDefinition(id, locationSpec.getName(), locationSpec.getSpec(), locationSpec.getConfig());\n            Location ll = mgmt.getLocationRegistry().resolve(ld);\n            if (ll!=null) config = ll.getAllConfig(true);\n        } else if (level==LocationDetailLevel.LOCAL_EXCLUDING_SECRET) {\n            // get displayName\n            if (!config.containsKey(LocationConfigKeys.DISPLAY_NAME.getName()) && mgmt!=null) {\n                LocationDefinition ld = new BasicLocationDefinition(id, locationSpec.getName(), locationSpec.getSpec(), locationSpec.getConfig());\n                Location ll = mgmt.getLocationRegistry().resolve(ld);\n                if (ll!=null) {\n                    Map<String, Object> configExtra = ll.getAllConfig(true);\n                    if (configExtra.containsKey(LocationConfigKeys.DISPLAY_NAME.getName())) {\n                        ConfigBag configNew = ConfigBag.newInstance(configExtra);\n                        configNew.configure(LocationConfigKeys.DISPLAY_NAME, (String)configExtra.get(LocationConfigKeys.DISPLAY_NAME.getName()));\n                        config = configNew.getAllConfig();\n                    }\n                }\n            }\n        }\n        return new LocationSummary(\n                id,\n                locationSpec.getName(),\n                locationSpec.getSpec(),\n                null,\n                copyConfig(config, level),\n                ImmutableMap.of(\"self\", URI.create(\"/v1/locations/\" + id)));\n    }","commit_id":"e25073cbe9a4956c9a68af6638ca4821c07a6938","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tlong questionId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"questionId\", StringPool.BLANK));\n\n\t\tif (questionId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No question id found in preferences of portlet \" +\n\t\t\t\t\t\tportletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tPollsQuestion question = null;\n\n\t\ttry {\n\t\t\tquestion = PollsQuestionUtil.findByPrimaryKey(questionId);\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(nsqe, nsqe);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tportletDataContext.addPortletPermissions(\n\t\t\tPollsResourcePermissionChecker.RESOURCE_NAME);\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, question);\n\n\t\tfor (PollsChoice choice : question.getChoices()) {\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, choice);\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tPollsPortletDataHandler.NAMESPACE, \"votes\")) {\n\n\t\t\tfor (PollsVote vote : question.getVotes()) {\n\t\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\t\tportletDataContext, portletId, vote);\n\t\t\t}\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":64555,"modified_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tString portletId = portletDataContext.getPortletId();\n\n\t\tlong questionId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"questionId\", StringPool.BLANK));\n\n\t\tif (questionId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No question id found in preferences of portlet \" +\n\t\t\t\t\t\tportletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tPollsQuestion question = null;\n\n\t\ttry {\n\t\t\tquestion = PollsQuestionUtil.findByPrimaryKey(questionId);\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(nsqe, nsqe);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\ttry {\n\t\t\tportletDataContext.addPortletPermissions(\n\t\t\t\tPollsResourcePermissionChecker.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export portlet permissions\", pe);\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, question);\n\n\t\tfor (PollsChoice choice : question.getChoices()) {\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, choice);\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tPollsPortletDataHandler.NAMESPACE, \"votes\")) {\n\n\t\t\tfor (PollsVote vote : question.getVotes()) {\n\t\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\t\tportletDataContext, portletId, vote);\n\t\t\t}\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"edb541f453341175587cc73aff7984f8b2527e57","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tPollsResourcePermissionChecker.RESOURCE_NAME);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsQuestion.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsChoice.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsVote.class);\n\n\t\tlong questionId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"questionId\", StringPool.BLANK));\n\n\t\tif (questionId > 0) {\n\t\t\tMap<Long, Long> questionIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tPollsQuestion.class);\n\n\t\t\tquestionId = MapUtil.getLong(questionIds, questionId, questionId);\n\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"questionId\", String.valueOf(questionId));\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":64556,"modified_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tportletDataContext.importPortletPermissions(\n\t\t\t\tPollsResourcePermissionChecker.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to import portlet permissions\", pe);\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsQuestion.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsChoice.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, PollsVote.class);\n\n\t\tlong questionId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"questionId\", StringPool.BLANK));\n\n\t\tif (questionId > 0) {\n\t\t\tMap<Long, Long> questionIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tPollsQuestion.class);\n\n\t\t\tquestionId = MapUtil.getLong(questionIds, questionId, questionId);\n\n\t\t\ttry {\n\t\t\t\tportletPreferences.setValue(\n\t\t\t\t\t\"questionId\", String.valueOf(questionId));\n\t\t\t}\n\t\t\tcatch (ReadOnlyException roe) {\n\t\t\t\tthrow new PortletDataException(\n\t\t\t\t\t\"Unable to update portlet preferences during import\", roe);\n\t\t\t}\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"edb541f453341175587cc73aff7984f8b2527e57","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tDDLPermission.RESOURCE_NAME);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDLRecordSet.class);\n\n\t\tlong importedRecordSetId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"recordSetId\", null));\n\t\tlong importedDisplayDDMTemplateId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"displayDDMTemplateId\", null));\n\t\tlong importedFormDDMTemplateId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"formDDMTemplateId\", null));\n\n\t\tMap<Long, Long> recordSetIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDLRecordSet.class);\n\n\t\tlong recordSetId = MapUtil.getLong(\n\t\t\trecordSetIds, importedRecordSetId, importedRecordSetId);\n\n\t\tMap<Long, Long> templateIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMTemplate.class);\n\n\t\tlong displayDDMTemplateId = MapUtil.getLong(\n\t\t\ttemplateIds, importedDisplayDDMTemplateId,\n\t\t\timportedDisplayDDMTemplateId);\n\n\t\tlong formDDMTemplateId = MapUtil.getLong(\n\t\t\ttemplateIds, importedFormDDMTemplateId, importedFormDDMTemplateId);\n\n\t\tportletPreferences.setValue(\"recordSetId\", String.valueOf(recordSetId));\n\t\tportletPreferences.setValue(\n\t\t\t\"displayDDMTemplateId\", String.valueOf(displayDDMTemplateId));\n\t\tportletPreferences.setValue(\n\t\t\t\"formDDMTemplateId\", String.valueOf(formDDMTemplateId));\n\n\t\treturn portletPreferences;\n\t}","id":64557,"modified_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tportletDataContext.importPortletPermissions(\n\t\t\t\tDDLPermission.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export portlet permissions\", pe);\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDLRecordSet.class);\n\n\t\tlong importedRecordSetId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"recordSetId\", null));\n\t\tlong importedDisplayDDMTemplateId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"displayDDMTemplateId\", null));\n\t\tlong importedFormDDMTemplateId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"formDDMTemplateId\", null));\n\n\t\tMap<Long, Long> recordSetIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDLRecordSet.class);\n\n\t\tlong recordSetId = MapUtil.getLong(\n\t\t\trecordSetIds, importedRecordSetId, importedRecordSetId);\n\n\t\tMap<Long, Long> templateIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMTemplate.class);\n\n\t\tlong displayDDMTemplateId = MapUtil.getLong(\n\t\t\ttemplateIds, importedDisplayDDMTemplateId,\n\t\t\timportedDisplayDDMTemplateId);\n\n\t\tlong formDDMTemplateId = MapUtil.getLong(\n\t\t\ttemplateIds, importedFormDDMTemplateId, importedFormDDMTemplateId);\n\n\t\ttry {\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"recordSetId\", String.valueOf(recordSetId));\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"displayDDMTemplateId\", String.valueOf(displayDDMTemplateId));\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"formDDMTemplateId\", String.valueOf(formDDMTemplateId));\n\t\t}\n\t\tcatch (ReadOnlyException roe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to update portlet preferences during import\", roe);\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"bade33eb66a4dae3c631a03e504c278361245cc3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.addPortletPermissions(DDLPermission.RESOURCE_NAME);\n\n\t\tlong recordSetId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"recordSetId\", null), 0);\n\n\t\tif (recordSetId == 0) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Unable to get record set with ID \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tDDLRecordSet recordSet = DDLRecordSetLocalServiceUtil.fetchRecordSet(\n\t\t\trecordSetId);\n\n\t\tif (recordSet == null) {\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, recordSet);\n\n\t\treturn portletPreferences;\n\t}","id":64558,"modified_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tportletDataContext.addPortletPermissions(\n\t\t\t\tDDLPermission.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export portlet permissions\", pe);\n\t\t}\n\n\t\tString portletId = portletDataContext.getPortletId();\n\n\t\tlong recordSetId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"recordSetId\", null), 0);\n\n\t\tif (recordSetId == 0) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Unable to get record set with ID \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tDDLRecordSet recordSet = DDLRecordSetLocalServiceUtil.fetchRecordSet(\n\t\t\trecordSetId);\n\n\t\tif (recordSet == null) {\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, recordSet);\n\n\t\treturn portletPreferences;\n\t}","commit_id":"bade33eb66a4dae3c631a03e504c278361245cc3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tlong nodeId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"nodeId\", StringPool.BLANK));\n\n\t\tif (nodeId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No node id found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tString title = portletPreferences.getValue(\"title\", null);\n\n\t\tif (title == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No title found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tWikiNode node = WikiNodeUtil.fetchByPrimaryKey(nodeId);\n\n\t\tif (node == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to find wiki node\");\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tportletDataContext.addPortletPermissions(\n\t\t\tWikiResourcePermissionChecker.RESOURCE_NAME);\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, node);\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tgetPageActionableDynamicQuery(\n\t\t\t\tportletDataContext, node.getNodeId(), portletId);\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\treturn portletPreferences;\n\t}","id":64559,"modified_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tString portletId = portletDataContext.getPortletId();\n\n\t\tlong nodeId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"nodeId\", StringPool.BLANK));\n\n\t\tif (nodeId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No node id found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tString title = portletPreferences.getValue(\"title\", null);\n\n\t\tif (title == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No title found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tWikiNode node = WikiNodeUtil.fetchByPrimaryKey(nodeId);\n\n\t\tif (node == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to find wiki node\");\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\ttry {\n\t\t\tportletDataContext.addPortletPermissions(\n\t\t\t\tWikiResourcePermissionChecker.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export portlet permissions\", pe);\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, node);\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tgetPageActionableDynamicQuery(\n\t\t\t\tportletDataContext, node.getNodeId(), portletId);\n\n\t\ttry {\n\t\t\tactionableDynamicQuery.performActions();\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export referenced pages\", pe);\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"3c4390fe671ee4e5dc98e21544d3b0379a00798e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tWikiResourcePermissionChecker.RESOURCE_NAME);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, WikiNode.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, WikiPage.class);\n\n\t\tlong nodeId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"nodeId\", StringPool.BLANK));\n\n\t\tif (nodeId > 0) {\n\t\t\tMap<Long, Long> nodeIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tWikiNode.class);\n\n\t\t\tnodeId = MapUtil.getLong(nodeIds, nodeId, nodeId);\n\n\t\t\tportletPreferences.setValue(\"nodeId\", String.valueOf(nodeId));\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":64560,"modified_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tportletDataContext.importPortletPermissions(\n\t\t\t\tWikiResourcePermissionChecker.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to import portlet permissions\", pe);\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, WikiNode.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, WikiPage.class);\n\n\t\tlong nodeId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"nodeId\", StringPool.BLANK));\n\n\t\tif (nodeId > 0) {\n\t\t\tMap<Long, Long> nodeIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tWikiNode.class);\n\n\t\t\tnodeId = MapUtil.getLong(nodeIds, nodeId, nodeId);\n\n\t\t\ttry {\n\t\t\t\tportletPreferences.setValue(\"nodeId\", String.valueOf(nodeId));\n\t\t\t}\n\t\t\tcatch (ReadOnlyException roe) {\n\t\t\t\tthrow new PortletDataException(\n\t\t\t\t\t\"Unable to update portlet preferences during import\", roe);\n\t\t\t}\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"3c4390fe671ee4e5dc98e21544d3b0379a00798e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tString hiddenNodeNames = portletPreferences.getValue(\n\t\t\t\"hiddenNodes\", null);\n\n\t\tfor (String hiddenNodeName : StringUtil.split(hiddenNodeNames)) {\n\t\t\tWikiNode wikiNode = WikiNodeLocalServiceUtil.getNode(\n\t\t\t\tportletDataContext.getScopeGroupId(), hiddenNodeName);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, wikiNode);\n\t\t}\n\n\t\tString visibleNodeNames = portletPreferences.getValue(\n\t\t\t\"visibleNodes\", null);\n\n\t\tfor (String visibleNodeName : StringUtil.split(visibleNodeNames)) {\n\t\t\tWikiNode wikiNode = WikiNodeLocalServiceUtil.getNode(\n\t\t\t\tportletDataContext.getScopeGroupId(), visibleNodeName);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, wikiNode);\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":64561,"modified_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tString portletId = portletDataContext.getPortletId();\n\n\t\tString hiddenNodeNames = portletPreferences.getValue(\n\t\t\t\"hiddenNodes\", null);\n\n\t\tfor (String hiddenNodeName : StringUtil.split(hiddenNodeNames)) {\n\t\t\tWikiNode wikiNode = WikiNodeLocalServiceUtil.fetchNode(\n\t\t\t\tportletDataContext.getScopeGroupId(), hiddenNodeName);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, wikiNode);\n\t\t}\n\n\t\tString visibleNodeNames = portletPreferences.getValue(\n\t\t\t\"visibleNodes\", null);\n\n\t\tfor (String visibleNodeName : StringUtil.split(visibleNodeNames)) {\n\t\t\tWikiNode wikiNode = WikiNodeLocalServiceUtil.fetchNode(\n\t\t\t\tportletDataContext.getScopeGroupId(), visibleNodeName);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, portletId, wikiNode);\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"3c4390fe671ee4e5dc98e21544d3b0379a00798e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.addPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tString articleId = portletPreferences.getValue(\"articleId\", null);\n\n\t\tif (articleId == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"No article ID found in preferences of portlet \" +\n\t\t\t\t\t\tportletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tlong articleGroupId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"groupId\", StringPool.BLANK));\n\n\t\tif (articleGroupId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No group ID found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tif (articleGroupId != previousScopeGroupId) {\n\t\t\tportletDataContext.setScopeGroupId(articleGroupId);\n\t\t}\n\n\t\tJournalArticle article = null;\n\n\t\tarticle = JournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\tarticleGroupId, articleId, WorkflowConstants.STATUS_APPROVED);\n\n\t\tif (article == null) {\n\t\t\tarticle = JournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\t\tarticleGroupId, articleId, WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tif (article == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"Portlet \" + portletId +\n\t\t\t\t\t\t\" refers to an invalid article ID \" + articleId);\n\t\t\t}\n\n\t\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, article);\n\n\t\tString defaultDDMTemplateKey = article.getDDMTemplateKey();\n\t\tString preferenceDDMTemplateKey = portletPreferences.getValue(\n\t\t\t\"ddmTemplateKey\", null);\n\n\t\tif (Validator.isNotNull(defaultDDMTemplateKey) &&\n\t\t\tValidator.isNotNull(preferenceDDMTemplateKey) &&\n\t\t\t!defaultDDMTemplateKey.equals(preferenceDDMTemplateKey)) {\n\n\t\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.getTemplate(\n\t\t\t\tarticle.getGroupId(),\n\t\t\t\tPortalUtil.getClassNameId(DDMStructure.class),\n\t\t\t\tpreferenceDDMTemplateKey, true);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, article, ddmTemplate,\n\t\t\t\tPortletDataContext.REFERENCE_TYPE_STRONG);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\treturn portletPreferences;\n\t}","id":64562,"modified_method":"@Override\n\tpublic PortletPreferences processExportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tString portletId = portletDataContext.getPortletId();\n\n\t\ttry {\n\t\t\tportletDataContext.addPortletPermissions(\n\t\t\t\tJournalPermission.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to export portlet permissions\", pe);\n\t\t}\n\n\t\tString articleId = portletPreferences.getValue(\"articleId\", null);\n\n\t\tif (articleId == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"No article ID found in preferences of portlet \" +\n\t\t\t\t\t\tportletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tlong articleGroupId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"groupId\", StringPool.BLANK));\n\n\t\tif (articleGroupId <= 0) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"No group ID found in preferences of portlet \" + portletId);\n\t\t\t}\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tif (articleGroupId != previousScopeGroupId) {\n\t\t\tportletDataContext.setScopeGroupId(articleGroupId);\n\t\t}\n\n\t\tJournalArticle article = null;\n\n\t\tarticle = JournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\tarticleGroupId, articleId, WorkflowConstants.STATUS_APPROVED);\n\n\t\tif (article == null) {\n\t\t\tarticle = JournalArticleLocalServiceUtil.fetchLatestArticle(\n\t\t\t\tarticleGroupId, articleId, WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tif (article == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"Portlet \" + portletId +\n\t\t\t\t\t\t\" refers to an invalid article ID \" + articleId);\n\t\t\t}\n\n\t\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\tportletDataContext, portletId, article);\n\n\t\tString defaultDDMTemplateKey = article.getDDMTemplateKey();\n\t\tString preferenceDDMTemplateKey = portletPreferences.getValue(\n\t\t\t\"ddmTemplateKey\", null);\n\n\t\tif (Validator.isNotNull(defaultDDMTemplateKey) &&\n\t\t\tValidator.isNotNull(preferenceDDMTemplateKey) &&\n\t\t\t!defaultDDMTemplateKey.equals(preferenceDDMTemplateKey)) {\n\n\t\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.getTemplate(\n\t\t\t\tarticle.getGroupId(),\n\t\t\t\tPortalUtil.getClassNameId(DDMStructure.class),\n\t\t\t\tpreferenceDDMTemplateKey, true);\n\n\t\t\tStagedModelDataHandlerUtil.exportReferenceStagedModel(\n\t\t\t\tportletDataContext, article, ddmTemplate,\n\t\t\t\tPortletDataContext.REFERENCE_TYPE_STRONG);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\treturn portletPreferences;\n\t}","commit_id":"a740fd01d8e02af3bacd1e8f2a0e78a67798cf0f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tMap<Long, Long> groupIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tGroup.class);\n\n\t\tlong importGroupId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"groupId\", null));\n\n\t\tlong groupId = MapUtil.getLong(groupIds, importGroupId, importGroupId);\n\n\t\tportletDataContext.setScopeGroupId(groupId);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDMStructure.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDMTemplate.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, JournalArticle.class);\n\n\t\tString articleId = portletPreferences.getValue(\"articleId\", null);\n\n\t\tif (Validator.isNotNull(articleId)) {\n\t\t\tMap<String, String> articleIds =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\t\tarticleId = MapUtil.getString(articleIds, articleId, articleId);\n\n\t\t\tportletPreferences.setValue(\"articleId\", articleId);\n\n\t\t\tportletPreferences.setValue(\"groupId\", String.valueOf(groupId));\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\tportletDataContext.getPlid());\n\n\t\t\tJournalContentSearchLocalServiceUtil.updateContentSearch(\n\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\tlayout.getLayoutId(), portletId, articleId, true);\n\t\t}\n\t\telse {\n\t\t\tportletPreferences.setValue(\"groupId\", StringPool.BLANK);\n\t\t\tportletPreferences.setValue(\"articleId\", StringPool.BLANK);\n\t\t}\n\n\t\tString ddmTemplateKey = portletPreferences.getValue(\n\t\t\t\"ddmTemplateKey\", null);\n\n\t\tif (Validator.isNotNull(ddmTemplateKey)) {\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tddmTemplateKey = MapUtil.getString(\n\t\t\t\tddmTemplateKeys, ddmTemplateKey, ddmTemplateKey);\n\n\t\t\tportletPreferences.setValue(\"ddmTemplateKey\", ddmTemplateKey);\n\t\t}\n\t\telse {\n\t\t\tportletPreferences.setValue(\"ddmTemplateKey\", StringPool.BLANK);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\treturn portletPreferences;\n\t}","id":64563,"modified_method":"@Override\n\tpublic PortletPreferences processImportPortletPreferences(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tportletDataContext.importPortletPermissions(\n\t\t\t\tJournalPermission.RESOURCE_NAME);\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to import portlet permissions\", pe);\n\t\t}\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tMap<Long, Long> groupIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tGroup.class);\n\n\t\tlong importGroupId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"groupId\", null));\n\n\t\tlong groupId = MapUtil.getLong(groupIds, importGroupId, importGroupId);\n\n\t\tportletDataContext.setScopeGroupId(groupId);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDMStructure.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, DDMTemplate.class);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModels(\n\t\t\tportletDataContext, JournalArticle.class);\n\n\t\tString articleId = portletPreferences.getValue(\"articleId\", null);\n\n\t\ttry {\n\t\t\tif (Validator.isNotNull(articleId)) {\n\t\t\t\tMap<String, String> articleIds =\n\t\t\t\t\t(Map<String, String>)\n\t\t\t\t\t\tportletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\t\t\tarticleId = MapUtil.getString(articleIds, articleId, articleId);\n\n\t\t\t\tportletPreferences.setValue(\"articleId\", articleId);\n\n\t\t\t\tportletPreferences.setValue(\"groupId\", String.valueOf(groupId));\n\n\t\t\t\tLayout layout = LayoutLocalServiceUtil.fetchLayout(\n\t\t\t\t\tportletDataContext.getPlid());\n\n\t\t\t\tJournalContentSearchLocalServiceUtil.updateContentSearch(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(), portletDataContext.getPortletId(),\n\t\t\t\t\tarticleId, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportletPreferences.setValue(\"groupId\", StringPool.BLANK);\n\t\t\t\tportletPreferences.setValue(\"articleId\", StringPool.BLANK);\n\t\t\t}\n\n\t\t\tString ddmTemplateKey = portletPreferences.getValue(\n\t\t\t\t\"ddmTemplateKey\", null);\n\n\t\t\tif (Validator.isNotNull(ddmTemplateKey)) {\n\t\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t\t(Map<String, String>)\n\t\t\t\t\t\tportletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\t\tddmTemplateKey = MapUtil.getString(\n\t\t\t\t\tddmTemplateKeys, ddmTemplateKey, ddmTemplateKey);\n\n\t\t\t\tportletPreferences.setValue(\"ddmTemplateKey\", ddmTemplateKey);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportletPreferences.setValue(\"ddmTemplateKey\", StringPool.BLANK);\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to update journal content search data during import\",\n\t\t\t\tpe);\n\t\t}\n\t\tcatch (ReadOnlyException roe) {\n\t\t\tthrow new PortletDataException(\n\t\t\t\t\"Unable to update portlet preferences during import\", roe);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\treturn portletPreferences;\n\t}","commit_id":"a740fd01d8e02af3bacd1e8f2a0e78a67798cf0f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setCategorySettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(true);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setNoneIsSpecial(true);\n\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","id":64564,"modified_method":"public void setCategorySettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(true);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setNoneIsSpecial(true);\n\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"public void setKeywordCategorySettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(true);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Categories + Keywords\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","id":64565,"modified_method":"public void setKeywordCategorySettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(true);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Categories + Keywords\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"public void setSearchEverywhereAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(true);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Search everything\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(true);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","id":64566,"modified_method":"public void setSearchEverywhereAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(true);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Search everything\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(true);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"SearchTextField() {\n\t\t// super(VueResources.getString(\"search.text.default\"),15);\n\t\t//super(11);\n\t\t\n\t\tthisTxtFld = this;\t\t\n\t\tthisTxtFld.setText(VueResources.getString(\"search.text.default\"));\n\t\tGUI.init();\n\t\tinitMenuSettings();\n\t\tif (!isWindows) {\n\t\t\tif (Util.isMacTiger()) {\n\t\t\t\tsetColumns(15);\n\t\t\t\tthisTxtFld.setText(\"\");\n\t\t\t\tfieldTxt = new JTextField(12);\n\t\t\t\tfieldTxt.setBorder(null);\n\t\t\t\tfieldTxt.setText(VueResources.getString(\"search.text.default\"));\n\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\tfieldTxt.addMouseListener(new MouseAdapter() {\n\t\t\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void evaluatePopup(MouseEvent e) {\n\t\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX(), e.getY());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (fieldTxt.getText().trim().equals(\n\t\t\t\t\t\t\t\t\tVueResources\n\t\t\t\t\t\t\t\t\t\t\t.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\t\tfieldTxt.setText(\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseEntered(MouseEvent e) {\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseExited(MouseEvent e) {\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\t// addMouseListener(new MouseAdapter() {\n\t\t\t\t// public void mouseEntered(MouseEvent e){\n\t\t\t\t// if((e.getX()< 23) ){\n\t\t\t\t// mouse_over = true;\n\t\t\t\t// repaint();\n\t\t\t\t// }else if(e.getX() < getWidth()-23){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else{\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t// public void mouseExited(MouseEvent e){\n\t\t\t\t// if((e.getX()< 23) ){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else if(e.getX() < getWidth()-23){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else{\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t//\n\t\t\t\t// });\n\t\t\t\tfieldTxt.addKeyListener(new KeyAdapter() {\n\t\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {\n\t\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}/*\n\t\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthisTxtFld.setEditable(false);\n\t\t\t\tthisTxtFld.setLayout(new FlowLayout(FlowLayout.CENTER, 1, 0));\n\t\t\t\tthisTxtFld.add(fieldTxt, BorderLayout.CENTER);\n\t\t\t} else {\n\t\t\t\tsetColumns(11);\n\t\t\t\tsetEditable(true);\n\t\t\t\tputClientProperty(\"JTextField.variant\", \"search\");\n\t\t\t\tInsets noInsets = new Insets(0, 30, 0, 25);\n\t\t\t\tsetMargin(noInsets);\n\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\taddMouseListener(new MouseAdapter() {\n\t\t\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void evaluatePopup(MouseEvent e) {\n\t\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX(), e.getY());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (getText().trim().equals(\n\t\t\t\t\t\t\t\t\tVueResources\n\t\t\t\t\t\t\t\t\t\t\t.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\t\tsetText(\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\taddKeyListener(new KeyAdapter() {\n\t\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {\n\t\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}/*\n\t\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t} else {\n\t\t\tsetEditable(true);\n\t\t\tsetPreferredSize(new Dimension(180,23));\n\t\t\tInsets noInsets = new Insets(0, 15, 0, 25);\n\t\t\tsetMargin(noInsets);\t\t\t\n\t\t\taddMouseListener(new MouseAdapter() {\n\t\t\t\tpublic void mouseEntered(MouseEvent e) {\n\t\t\t\t\tif ((e.getX() < 23)) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.TEXT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmouse_over = true;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic void mouseExited(MouseEvent e) {\n\t\t\t\t\tif ((e.getX() < 23)) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.TEXT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\tif ((e.getX() < 23)) {\n\n\t\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\t\tcreateEditPopupMenu();\n\t\t\t\t\t\t\teditPopup.show(e.getComponent(), e.getX() + 5, e\n\t\t\t\t\t\t\t\t\t.getY());\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((e.getX() < 23)) {\n\t\t\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX() + 5, e.getY());\n\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tif (getText().trim().equals(\n\t\t\t\t\t\t\t\tVueResources.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\tsetText(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}/*\n\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\taddKeyListener(new KeyAdapter() {\n\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {\n\n\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}/*\n\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t}","id":64567,"modified_method":"SearchTextField() {\n\t\t// super(VueResources.getString(\"search.text.default\"),15);\n\t\t//super(11);\n\t\t\n\t\tthisTxtFld = this;\t\t\n\t\tthisTxtFld.setText(VueResources.getString(\"search.text.default\"));\n\t\tGUI.init();\n\t\tinitMenuSettings();\n\t\tif (!isWindows) {\n\t\t\tif (Util.isMacTiger()) {\n\t\t\t\tsetColumns(15);\n\t\t\t\tthisTxtFld.setText(\"\");\n\t\t\t\tfieldTxt = new JTextField(12);\n\t\t\t\tfieldTxt.setBorder(null);\n\t\t\t\tfieldTxt.setText(VueResources.getString(\"search.text.default\"));\n\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\tfieldTxt.addMouseListener(new MouseAdapter() {\n\t\t\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void evaluatePopup(MouseEvent e) {\n\t\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX(), e.getY());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (fieldTxt.getText().trim().equals(\n\t\t\t\t\t\t\t\t\tVueResources\n\t\t\t\t\t\t\t\t\t\t\t.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\t\tfieldTxt.setText(\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseEntered(MouseEvent e) {\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseExited(MouseEvent e) {\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\t// addMouseListener(new MouseAdapter() {\n\t\t\t\t// public void mouseEntered(MouseEvent e){\n\t\t\t\t// if((e.getX()< 23) ){\n\t\t\t\t// mouse_over = true;\n\t\t\t\t// repaint();\n\t\t\t\t// }else if(e.getX() < getWidth()-23){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else{\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t// public void mouseExited(MouseEvent e){\n\t\t\t\t// if((e.getX()< 23) ){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else if(e.getX() < getWidth()-23){\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }else{\n\t\t\t\t// mouse_over = false;\n\t\t\t\t// repaint();\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t//\n\t\t\t\t// });\n\t\t\t\tfieldTxt.addKeyListener(new KeyAdapter() {\n\t\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {\n\t\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}/*\n\t\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthisTxtFld.setEditable(false);\n\t\t\t\tthisTxtFld.setLayout(new FlowLayout(FlowLayout.CENTER, 1, 0));\n\t\t\t\tthisTxtFld.add(fieldTxt, BorderLayout.CENTER);\n\t\t\t} else {\n\t\t\t\tsetColumns(11);\n\t\t\t\tsetEditable(true);\n\t\t\t\tputClientProperty(\"JTextField.variant\", \"search\");\n\t\t\t\tInsets noInsets = new Insets(0, 30, 0, 25);\n\t\t\t\tsetMargin(noInsets);\n\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\taddMouseListener(new MouseAdapter() {\n\t\t\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\t\tevaluatePopup(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void evaluatePopup(MouseEvent e) {\n\t\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX(), e.getY());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (getText().trim().equals(\n\t\t\t\t\t\t\t\t\tVueResources\n\t\t\t\t\t\t\t\t\t\t\t.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\t\tsetText(\"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\taddKeyListener(new KeyAdapter() {\n\t\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {\n\t\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}/*\n\t\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t} else {\n\t\t\tsetEditable(true);\n\t\t\tfieldTxt = new JTextField();\n\t\t\tfieldTxt.setBorder(null);\n\t\t\tfieldTxt.setText(VueResources.getString(\"search.text.default\"));\n\t\t\tfieldTxt.setPreferredSize(new Dimension(135,18));\n\t\t\tsetPreferredSize(new Dimension(180,23));\n\t\t\tInsets noInsets = new Insets(0, 15, 0, 25);\n\t\t\tsetMargin(noInsets);\t\t\t\n\t\t\tfieldTxt.addMouseListener(new MouseAdapter() {\n\t\t\t\tpublic void mouseEntered(MouseEvent e) {\n\t\t\t\t\tmouse_over = false;\n\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.TEXT_CURSOR));\n\t\t\t\t\trepaint();\n\t\t\t\t\trevalidate();\n\t\t\t\t}\n\n\t\t\t\tpublic void mouseExited(MouseEvent e) {\t\t\t\t\t\n\t\t\t\t\tmouse_over = false;\n\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\trepaint();\n\t\t\t\t\trevalidate();\n\t\t\t\t}\n\t\t\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\t\t\tif (fieldTxt.getText().trim().equals(\n\t\t\t\t\t\t\tVueResources.getString(\"search.text.default\"))) {\n\t\t\t\t\t\tfieldTxt.setText(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n//\t\t\t\t\tif (fieldTxt.getText().trim().equals(\n//\t\t\t\t\t\t\tVueResources.getString(\"search.text.default\"))) {\n//\t\t\t\t\t\tsetText(\"\");\n//\t\t\t\t\t}\n\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\tcreateEditPopupMenu();\n\t\t\t\t\t\teditPopup.show(e.getComponent(), e.getX() + 5, e\n\t\t\t\t\t\t\t\t.getY());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\taddMouseListener(new MouseAdapter() {\n\t\t\t\tpublic void mouseEntered(MouseEvent e) {\t\t\t\t\t\n\t\t\t\t\tif ((e.getX() < 23)) {\t\t\t\t\t\t\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} /*else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tSystem.err.println(\"1\");\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.TEXT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t}*/ else {\t\t\t\t\t\t\n\t\t\t\t\t\tmouse_over = true;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic void mouseExited(MouseEvent e) {\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif ((e.getX() < 23)) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.TEXT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmouse_over = false;\n\t\t\t\t\t\tsetCursor(Cursor\n\t\t\t\t\t\t\t\t.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\t\trepaint();\n\t\t\t\t\t\trevalidate();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\t\t\t\n\t\t\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\t\t\tif ((e.getX() < 23)) {\n\n\t\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\t\tcreateEditPopupMenu();\n\t\t\t\t\t\t\teditPopup.show(e.getComponent(), e.getX() + 5, e\n\t\t\t\t\t\t\t\t\t.getY());\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((e.getX() < 23)) {\n\t\t\t\t\t\tcreatePopupMenu(isWindows);\n\t\t\t\t\t\tpopup.show(e.getComponent(), e.getX() + 5, e.getY());\n\t\t\t\t\t} else if (e.getX() < getWidth() - 23) {\n\t\t\t\t\t\tif (getText().trim().equals(\n\t\t\t\t\t\t\t\tVueResources.getString(\"search.text.default\"))) {\n\t\t\t\t\t\t\tsetText(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}/*\n\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfieldTxt.addKeyListener(new KeyAdapter() {\n\t\t\t\tpublic void keyReleased(KeyEvent ke) {\n\t\t\t\t\tif (ke.getKeyCode() == KeyEvent.VK_ENTER) {                  \n\t\t\t\t\t\tif (searcheveryWhereMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}/*\n\t\t\t\t\t\t * else if(editSettingsMenuItem.isSelected()){\n\t\t\t\t\t\t * setEditSettingsAction(); }\n\t\t\t\t\t\t */else if (labelMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetLabelSettingsAction();\n\t\t\t\t\t\t} else if (keywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordSettingsAction();\n\t\t\t\t\t\t} else if (categoryKeywordMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t\t\t\t} else if (categoriesMenuItem.isSelected()) {\n\t\t\t\t\t\t\tsetCategorySettingsAction();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetSearchEverywhereAction();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthisTxtFld.setEditable(true);\n\t\t\tthisTxtFld.setLayout(new FlowLayout(FlowLayout.CENTER, 1, 0));\n\t\t\tthisTxtFld.add(fieldTxt, BorderLayout.CENTER);\n\t\t}\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"public void actionPerformed(ActionEvent actionEvent) {\n\t\t\tif (VueResources.getString(\"search.popup.select.all\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger()) {\n\t\t\t\t\tfieldTxt.grabFocus();\n\t\t\t\t\tfieldTxt.selectAll();\n\t\t\t\t} else{\n\t\t\t\t\tthisTxtFld.grabFocus();\n\t\t\t\t\tthisTxtFld.selectAll();\n\t\t\t\t}\n\t\t\t} else if (VueResources.getString(\"search.popup.cut\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger()) {\n\t\t\t\t\tfieldTxt.cut();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.cut();\n\t\t\t} else if (VueResources.getString(\"search.popup.copy\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger()) {\n\t\t\t\t\tfieldTxt.copy();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.copy();\n\t\t\t} else if (VueResources.getString(\"search.popup.paste\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger()) {\n\t\t\t\t\tfieldTxt.paste();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.paste();\n\t\t\t} else if (VueResources.getString(\"search.popup.clear\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger()) {\n\t\t\t\t\tfieldTxt.setText(\"\");\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.setText(\"\");\n\t\t\t} else if (VueResources.getString(\"search.popup.searcheverywhere\")\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetSearchEverywhereAction();\n\t\t\t} else if (VueResources.getString(\n\t\t\t\t\t\"search.popup.edit.search.settings\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetEditSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.labels\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetLabelSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.keywords\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetKeywordSettingsAction();\n\t\t\t} else if ((VueResources.getString(\"search.popup.categories\")\n\t\t\t\t\t+ \" + \" + VueResources.getString(\"search.popup.keywords\"))\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.reset\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetResetSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.categories\")\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetCategorySettingsAction();\n\t\t\t}\n\n\t\t}","id":64568,"modified_method":"public void actionPerformed(ActionEvent actionEvent) {\n\t\t\tif (VueResources.getString(\"search.popup.select.all\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\t\t\tfieldTxt.grabFocus();\n\t\t\t\t\tfieldTxt.selectAll();\n\t\t\t\t} else{\n\t\t\t\t\tthisTxtFld.grabFocus();\n\t\t\t\t\tthisTxtFld.selectAll();\n\t\t\t\t}\n\t\t\t} else if (VueResources.getString(\"search.popup.cut\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\t\t\tfieldTxt.cut();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.cut();\n\t\t\t} else if (VueResources.getString(\"search.popup.copy\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\t\t\tfieldTxt.copy();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.copy();\n\t\t\t} else if (VueResources.getString(\"search.popup.paste\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\t\t\tfieldTxt.paste();\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.paste();\n\t\t\t} else if (VueResources.getString(\"search.popup.clear\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\t\t\tfieldTxt.setText(\"\");\n\t\t\t\t} else\n\t\t\t\t\tthisTxtFld.setText(\"\");\n\t\t\t} else if (VueResources.getString(\"search.popup.searcheverywhere\")\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetSearchEverywhereAction();\n\t\t\t} else if (VueResources.getString(\n\t\t\t\t\t\"search.popup.edit.search.settings\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetEditSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.labels\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetLabelSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.keywords\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetKeywordSettingsAction();\n\t\t\t} else if ((VueResources.getString(\"search.popup.categories\")\n\t\t\t\t\t+ \" + \" + VueResources.getString(\"search.popup.keywords\"))\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetKeywordCategorySettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.reset\").equals(\n\t\t\t\t\tactionEvent.getActionCommand().toString())) {\n\t\t\t\tsetResetSettingsAction();\n\t\t\t} else if (VueResources.getString(\"search.popup.categories\")\n\t\t\t\t\t.equals(actionEvent.getActionCommand().toString())) {\n\t\t\t\tsetCategorySettingsAction();\n\t\t\t}\n\n\t\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"public void setLabelSettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(true);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Labels\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(true);\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","id":64569,"modified_method":"public void setLabelSettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(false);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(true);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Labels\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(true);\n\t\ttermsAction.setTextOnly(false);\n\t\ttermsAction.setMetadataOnly(false);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"public void setKeywordSettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(true);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Keywords\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(true);\n\t\ttermsAction.setMetadataOnly(true);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","id":64570,"modified_method":"public void setKeywordSettingsAction() {\n\t\tsearcheveryWhereMenuItem.setSelected(false);\n\t\tkeywordMenuItem.setSelected(true);\n\t\tcategoriesMenuItem.setSelected(false);\n\t\tcategoryKeywordMenuItem.setSelected(false);\n\t\tlabelMenuItem.setSelected(false);\n\t\t//editSettingsMenuItem.setSelected(false);\n\t\t//VUE.getMetadataSearchMainGUI().setVisible(false);\n\t\tVUE.getMetadataSearchMainPanel().searchTypeCmbBox.setSelectedItem(\"Keywords\");\n\t\t// resetSettingsMenuItem.setSelected(false);\n\t\tList<VueMetadataElement> searchTerms = new ArrayList<VueMetadataElement>();\n\t\tVueMetadataElement vme = new VueMetadataElement();\n\t\tString getTxtStr = \"\";\n\t\tif (Util.isMacTiger() || Util.isWindowsPlatform()) {\n\t\t\tgetTxtStr = fieldTxt.getText().trim();\n\t\t} else {\n\t\t\tgetTxtStr = thisTxtFld.getText().trim();\n\t\t}\n\t\tString statementObject[] = {\n\t\t\t\tVueResources.getString(\"metadata.vue.url\") + \"#none\",\n\t\t\t\tgetTxtStr,\n\t\t\t\tedu.tufts.vue.rdf.Query.Qualifier.CONTAINS.toString() };\n\t\tvme.setObject(statementObject);\n\t\tvme.setType(VueMetadataElement.SEARCH_STATEMENT);\n\t\tsearchTerms.add(vme);\n\t\tSearchAction termsAction = new SearchAction(searchTerms);\n\t\ttermsAction.setBasic(false);\n\t\ttermsAction.setTextOnly(true);\n\t\ttermsAction.setMetadataOnly(true);\n\t\ttermsAction.setOperator(VUE.getMetadataSearchMainPanel()\n\t\t\t\t.getSelectedOperator());\n\t\ttermsAction.setEverything(false);\n\t\tif (VUE.getMetadataSearchMainPanel() != null) {\n\t\t\tsetTermsAction(termsAction);\n\t\t}\n\t\tJButton btn = new JButton();\n\t\tbtn.setAction(termsAction);\n\t\tbtn.doClick();\n\t}","commit_id":"c210dc1ec28b18fd74390eb0d3d65498e40dcb2a","url":"https://github.com/VUE/VUE"},{"original_method":"@Override\n  protected void perform(XValueNodeImpl node, @NotNull String nodeName, AnActionEvent e) {\n    ConsoleExecuteAction action = getConsoleExecuteAction(e);\n    if (action != null) {\n      String expression = node.getValueContainer().getEvaluationExpression();\n      if (expression != null) {\n        action.execute(null, expression, null);\n      }\n    }\n  }","id":64571,"modified_method":"@Override\n  protected void perform(XValueNodeImpl node, @NotNull String nodeName, AnActionEvent e) {\n    final ConsoleExecuteAction action = getConsoleExecuteAction(e);\n    if (action != null) {\n      node.getValueContainer().calculateEvaluationExpression().done(new Consumer<String>() {\n        @Override\n        public void consume(String expression) {\n          if (expression != null) {\n            action.execute(null, expression, null);\n          }\n        }\n      });\n    }\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  @Override\n  public String getEvaluationExpression() {\n    if (evaluationExpression == null) {\n      // TODO: change API to allow to calculate it asynchronously\n      myEvaluationContext.getManagerThread().invokeAndWait(new SuspendContextCommandImpl(myEvaluationContext.getSuspendContext()) {\n        @Override\n        public Priority getPriority() {\n          return Priority.HIGH;\n        }\n\n        @Override\n        public void contextAction() throws Exception {\n          evaluationExpression = ApplicationManager.getApplication().runReadAction(new Computable<String>() {\n            @Override\n            public String compute() {\n              try {\n                PsiExpression psiExpression = getDescriptor().getTreeEvaluation(JavaValue.this, getDebuggerContext());\n                if (psiExpression != null) {\n                  return new TextWithImportsImpl(psiExpression).getText();\n                }\n              }\n              catch (EvaluateException e) {\n                LOG.info(e);\n              }\n              return null;\n            }\n          });\n        }\n      });\n    }\n    return evaluationExpression;\n  }","id":64572,"modified_method":"@NotNull\n  @Override\n  public Promise<String> calculateEvaluationExpression() {\n    if (evaluationExpression != null) {\n      return Promise.resolve(evaluationExpression);\n    }\n    else {\n      final AsyncPromise<String> res = new AsyncPromise<String>();\n      myEvaluationContext.getManagerThread().schedule(new SuspendContextCommandImpl(myEvaluationContext.getSuspendContext()) {\n        @Override\n        public Priority getPriority() {\n          return Priority.HIGH;\n        }\n\n        @Override\n        public void contextAction() throws Exception {\n          evaluationExpression = ApplicationManager.getApplication().runReadAction(new Computable<String>() {\n            @Override\n            public String compute() {\n              try {\n                PsiExpression psiExpression = getDescriptor().getTreeEvaluation(JavaValue.this, getDebuggerContext());\n                if (psiExpression != null) {\n                  return new TextWithImportsImpl(psiExpression).getText();\n                }\n              }\n              catch (EvaluateException e) {\n                LOG.info(e);\n              }\n              return null;\n            }\n          });\n          res.setResult(evaluationExpression);\n        }\n      });\n      return res;\n    }\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected boolean isEnabled(@NotNull final XValueNodeImpl node, @NotNull AnActionEvent e) {\n    return super.isEnabled(node, e) && node.getValueContainer().getEvaluationExpression() != null && getWatchesView(e) != null;\n  }","id":64573,"modified_method":"@Override\n  protected boolean isEnabled(@NotNull final XValueNodeImpl node, @NotNull AnActionEvent e) {\n    return super.isEnabled(node, e) && DebuggerUIUtil.hasEvaluationExpression(node.getValueContainer()) && getWatchesView(e) != null;\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void perform(final XValueNodeImpl node, @NotNull final String nodeName, final AnActionEvent e) {\n    XWatchesView watchesView = getWatchesView(e);\n    if (watchesView != null) {\n      String expression = node.getValueContainer().getEvaluationExpression();\n      if (!StringUtil.isEmpty(expression)) {\n        watchesView.addWatchExpression(XExpressionImpl.fromText(expression), -1, true);\n      }\n    }\n  }","id":64574,"modified_method":"@Override\n  protected void perform(final XValueNodeImpl node, @NotNull final String nodeName, final AnActionEvent e) {\n    final XWatchesView watchesView = getWatchesView(e);\n    if (watchesView != null) {\n      node.getValueContainer().calculateEvaluationExpression().done(new Consumer<String>() {\n        @Override\n        public void consume(String expression) {\n          if (!StringUtil.isEmpty(expression)) {\n            watchesView.addWatchExpression(XExpressionImpl.fromText(expression), -1, true);\n          }\n        }\n      });\n    }\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void perform(@NotNull final XDebugSession session, final DataContext dataContext) {\n    XDebuggerEditorsProvider editorsProvider = session.getDebugProcess().getEditorsProvider();\n    XStackFrame stackFrame = session.getCurrentStackFrame();\n    final XDebuggerEvaluator evaluator = session.getDebugProcess().getEvaluator();\n    if (evaluator == null) {\n      return;\n    }\n\n    Editor editor = CommonDataKeys.EDITOR.getData(dataContext);\n\n    EvaluationMode mode = EvaluationMode.EXPRESSION;\n    String selectedText = editor != null ? editor.getSelectionModel().getSelectedText() : null;\n    if (selectedText != null) {\n      selectedText = evaluator.formatTextForEvaluation(selectedText);\n      mode = evaluator.getEvaluationMode(selectedText,\n                                         editor.getSelectionModel().getSelectionStart(),\n                                         editor.getSelectionModel().getSelectionEnd(),\n                                         CommonDataKeys.PSI_FILE.getData(dataContext));\n    }\n    String text = selectedText;\n\n    if (text == null && editor != null) {\n      text = getExpressionText(evaluator, CommonDataKeys.PROJECT.getData(dataContext), editor);\n    }\n\n    if (text == null) {\n      XValue value = XDebuggerTreeActionBase.getSelectedValue(dataContext);\n      if (value != null) {\n        text = value.getEvaluationExpression();\n      }\n    }\n\n    Language language = null;\n    if (stackFrame != null) {\n      XSourcePosition position = stackFrame.getSourcePosition();\n      if (position != null) {\n        language = XDebuggerEditorBase.getFileTypeLanguage(position.getFile().getFileType());\n      }\n    }\n    if (language == null) {\n      VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext);\n      if (file != null) {\n        language = XDebuggerEditorBase.getFileTypeLanguage(file.getFileType());\n      }\n    }\n    XExpression expression = new XExpressionImpl(StringUtil.notNullize(text), language, null, mode);\n    new XDebuggerEvaluationDialog(session, editorsProvider, evaluator, expression, stackFrame == null ? null : stackFrame.getSourcePosition()).show();\n  }","id":64575,"modified_method":"@Override\n  protected void perform(@NotNull final XDebugSession session, final DataContext dataContext) {\n    final XDebuggerEditorsProvider editorsProvider = session.getDebugProcess().getEditorsProvider();\n    final XStackFrame stackFrame = session.getCurrentStackFrame();\n    final XDebuggerEvaluator evaluator = session.getDebugProcess().getEvaluator();\n    if (evaluator == null) {\n      return;\n    }\n\n    Editor editor = CommonDataKeys.EDITOR.getData(dataContext);\n\n    EvaluationMode mode = EvaluationMode.EXPRESSION;\n    String selectedText = editor != null ? editor.getSelectionModel().getSelectedText() : null;\n    if (selectedText != null) {\n      selectedText = evaluator.formatTextForEvaluation(selectedText);\n      mode = evaluator.getEvaluationMode(selectedText,\n                                         editor.getSelectionModel().getSelectionStart(),\n                                         editor.getSelectionModel().getSelectionEnd(),\n                                         CommonDataKeys.PSI_FILE.getData(dataContext));\n    }\n    String text = selectedText;\n\n    if (text == null && editor != null) {\n      text = getExpressionText(evaluator, CommonDataKeys.PROJECT.getData(dataContext), editor);\n    }\n\n    if (text == null) {\n      XValue value = XDebuggerTreeActionBase.getSelectedValue(dataContext);\n      if (value != null) {\n        final EvaluationMode evalMode = mode;\n        value.calculateEvaluationExpression().done(new Consumer<String>() {\n          @Override\n          public void consume(final String text) {\n            AppUIUtil.invokeOnEdt(new Runnable() {\n              @Override\n              public void run() {\n                showDialog(session, dataContext, editorsProvider, stackFrame, evaluator, evalMode, text);\n              }\n            });\n          }\n        });\n        return;\n      }\n    }\n\n    showDialog(session, dataContext, editorsProvider, stackFrame, evaluator, mode, text);\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private XValueNodeImpl[] getNodesToDrag() {\n    return myTree.getSelectedNodes(XValueNodeImpl.class, new Tree.NodeFilter<XValueNodeImpl>() {\n      @Override\n      public boolean accept(final XValueNodeImpl node) {\n        return node.getValueContainer().getEvaluationExpression() != null;\n      }\n    });\n  }","id":64576,"modified_method":"private XValueNodeImpl[] getNodesToDrag() {\n    return myTree.getSelectedNodes(XValueNodeImpl.class, new Tree.NodeFilter<XValueNodeImpl>() {\n      @Override\n      public boolean accept(final XValueNodeImpl node) {\n        return DebuggerUIUtil.hasEvaluationExpression(node.getValueContainer());\n      }\n    });\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drop(DnDEvent aEvent) {\n    Object object = aEvent.getAttachedObject();\n    if (object instanceof XValueNodeImpl[]) {\n      final XValueNodeImpl[] nodes = (XValueNodeImpl[])object;\n      for (XValueNodeImpl node : nodes) {\n        String expression = node.getValueContainer().getEvaluationExpression();\n        if (expression != null) {\n          //noinspection ConstantConditions\n          addWatchExpression(XExpressionImpl.fromText(expression), -1, false);\n        }\n      }\n    }\n    else if (object instanceof EventInfo) {\n      String text = ((EventInfo)object).getTextForFlavor(DataFlavor.stringFlavor);\n      if (text != null) {\n        //noinspection ConstantConditions\n        addWatchExpression(XExpressionImpl.fromText(text), -1, false);\n      }\n    }\n  }","id":64577,"modified_method":"@Override\n  public void drop(DnDEvent aEvent) {\n    Object object = aEvent.getAttachedObject();\n    if (object instanceof XValueNodeImpl[]) {\n      final XValueNodeImpl[] nodes = (XValueNodeImpl[])object;\n      for (XValueNodeImpl node : nodes) {\n        node.getValueContainer().calculateEvaluationExpression().done(new Consumer<String>() {\n          @Override\n          public void consume(String expression) {\n            if (expression != null) {\n              //noinspection ConstantConditions\n              addWatchExpression(XExpressionImpl.fromText(expression), -1, false);\n            }\n          }\n        });\n      }\n    }\n    else if (object instanceof EventInfo) {\n      String text = ((EventInfo)object).getTextForFlavor(DataFlavor.stringFlavor);\n      if (text != null) {\n        //noinspection ConstantConditions\n        addWatchExpression(XExpressionImpl.fromText(text), -1, false);\n      }\n    }\n  }","commit_id":"f150c53d8e417732b238d7574d92a8527690d817","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * @return the current session id for stateful pages and <code>null<\/code> for stateless pages\n\t */\n\tprotected String getSessionId()\n\t{\n\t\treturn Session.get().getId();\n\t}","id":64578,"modified_method":"/**\n\t * @return the current session id for stateful pages and <code>null<\/code> for stateless pages\n\t *         and non-http threads\n\t */\n\tprotected String getSessionId()\n\t{\n\t\treturn RequestCycle.get() != null ? Session.get().getId() : null;\n\t}","commit_id":"644040d4e6703adc266aee6e08f7051430281c82","url":"https://github.com/apache/wicket"},{"original_method":"protected BufferedWebResponse getAndRemoveBufferedResponse(Url url)\n\t{\n\t\treturn WebApplication.get().getAndRemoveBufferedResponse(getSessionId(), url);\n\t}","id":64579,"modified_method":"protected BufferedWebResponse getAndRemoveBufferedResponse(Url url)\n\t{\n\t\tString sessionId = getSessionId();\n\t\tBufferedWebResponse response = null;\n\t\tif (Strings.isEmpty(sessionId) == false)\n\t\t{\n\t\t\tresponse = WebApplication.get().getAndRemoveBufferedResponse(sessionId, url);\n\t\t}\n\t\treturn response;\n\t}","commit_id":"644040d4e6703adc266aee6e08f7051430281c82","url":"https://github.com/apache/wicket"},{"original_method":"protected boolean hasBufferedResponse(Url url)\n\t{\n\t\treturn WebApplication.get().hasBufferedResponse(getSessionId(), url);\n\t}","id":64580,"modified_method":"protected boolean hasBufferedResponse(Url url)\n\t{\n\t\tString sessionId = getSessionId();\n\t\tboolean hasResponse = false;\n\t\tif (Strings.isEmpty(sessionId) == false)\n\t\t{\n\t\t\thasResponse = WebApplication.get().hasBufferedResponse(sessionId, url);\n\t\t}\n\t\treturn hasResponse;\n\t}","commit_id":"644040d4e6703adc266aee6e08f7051430281c82","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @param sessionId\n\t * @return true if this {@code PageKey} is for the same session\n\t */\n\tpublic boolean isForSession(String sessionId)\n\t{\n\t\treturn getSessionId().equals(sessionId);\n\t}","id":64581,"modified_method":"/**\n\t * @param sessionId\n\t * @return true if this {@code PageKey} is for the same session\n\t */\n\tpublic boolean isForSession(String sessionId)\n\t{\n\t\tString sid = getSessionId();\n\t\treturn sid != null && sid.equals(sessionId);\n\t}","commit_id":"f3c873c7bc8af199a428c59c072902b29aad8b4b","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Publish a public key to repository, if it isn't already there.\n\t * @param keyName content name of the public key to publish under (adds a version)\n\t * @param keyToPublish the key to publish\n\t * @param signingKeyID the key to sign with\n\t * @param signingKeyLocator the key locator to use\n\t * @param timeToWaitForPreexisting how long to wait to see if it has already been published\n\t * (avoid re-publishing). If 0, we don't even try to find preexisting content.\n\t * @param requirePublisherMatch check to see if we match the specified publisher. Key locator\n\t * match too complex to check, make caller do that one.\n\t * @param handle the handle to use to publish it with\n\t * @return the published information about this key, whether we published it or someone else had\n\t * @throws IOException \n\t */\n\tpublic static PublicKeyObject publishKeyToRepository(\n\t\t\tContentName keyName, \n\t\t\tPublicKey keyToPublish,\n\t\t\tPublisherPublicKeyDigest signingKeyID, \n\t\t\tKeyLocator signingKeyLocator,\n\t\t\tlong timeToWaitForPreexisting,\n\t\t\tboolean requirePublisherMatch,\n\t\t\tCCNHandle handle) throws IOException {\n\n\n\t\t// To avoid repeating work, we first see if this content is available on the network, then\n\t\t// if it's in a repository. That's because if it's not in a repository, we need to know if\n\t\t// it's on the network, and this way we save doing that work twice (as the repo-checking code\n\t\t// also needs to know if it's on the network).\n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\t\n\t\t// Returns immediately if timeToWaitForPreexisting is 0.\n\t\tContentObject availableContent = \n\t\t\tCCNReader.isVersionedContentAvailable(keyName, ContentType.KEY, keyDigest.digest(), \n\t\t\t\t\t(requirePublisherMatch ? signingKeyID : null), null, timeToWaitForPreexisting, handle);\n\t\t\n\t\t// If we want it self-signed...\n\t\tif ((SELF_SIGNED_KEY_LOCATOR == signingKeyLocator) && (null != availableContent)) {\n\t\t\t// do mean == here....\n\t\t\t// have already verified that keyDigest is the digest of the content of availableContent\n\t\t\tif (!PublicKeyObject.isSelfSigned(SegmentationProfile.segmentRoot(availableContent.name()), \n\t\t\t\t\tkeyDigest, availableContent.signedInfo().getKeyLocator())) {\n\t\t\t\t// it would be perfect, but it's not self-signed\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) {\n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"Found our key published under desired name {0}, but not self-signed as required - key locator is {1}.\",\n\t\t\t\t\t\t\tavailableContent.name(), availableContent.signedInfo().getKeyLocator());\n\t\t\t\t}\n\t\t\t\tavailableContent = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != availableContent) {\n\t\t\t\n\t\t\t// See if some repository has this key already\n\t\t\tif (null != CCNReader.isContentInRepository(availableContent, timeToWaitForPreexisting, handle)) {\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"publishKeyToRepository: key {0} is already in a repository; not re-publishing.\", keyName);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, we just need to trick the repo into pulling it.\n\t\t\t\tContentName streamName = SegmentationProfile.segmentRoot(availableContent.name());\n\t\t\t\tRepositoryFlowControl rfc = new RepositoryFlowControl(streamName, handle);\n\t\t\t\t// This will throw an IOException if there is no repository there to read it.\n\t\t\t\trfc.startWrite(streamName, Shape.STREAM);\n\t\t\t\t// OK, once we've emitted the interest, we don't actually need that flow controller anymore.\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"Key {0} published to repository.\", keyName);\n\t\t\t\t}\n\t\t\t\trfc.close();\n\t\t\t}\n\t\t\treturn new PublicKeyObject(availableContent, handle);\n\t\t\t\n\t\t} else {\t\t\n\t\t\t// We need to write this content ourselves, nobody else has it. We know we really want to \n\t\t\t// write it, no point in checking again to see if it's there.\n\t\t\treturn publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator, \n\t\t\t\t\t\t\t  null, SaveType.REPOSITORY, handle, handle.keyManager());\n\t\t}\n\t}","id":64582,"modified_method":"/**\n\t * Publish a public key to repository, if it isn't already there.\n\t * @param keyName content name of the public key to publish under (adds a version)\n\t * @param keyToPublish the key to publish\n\t * @param signingKeyID the key to sign with\n\t * @param signingKeyLocator the key locator to use\n\t * @param timeToWaitForPreexisting how long to wait to see if it has already been published\n\t * (avoid re-publishing). If 0, we don't even try to find preexisting content.\n\t * @param requirePublisherMatch check to see if we match the specified publisher. Key locator\n\t * match too complex to check, make caller do that one.\n\t * @param handle the handle to use to publish it with\n\t * @return the published information about this key, whether we published it or someone else had\n\t * @throws IOException \n\t */\n\tpublic static PublicKeyObject publishKeyToRepository(\n\t\t\tContentName keyName, \n\t\t\tPublicKey keyToPublish,\n\t\t\tPublisherPublicKeyDigest signingKeyID, \n\t\t\tKeyLocator signingKeyLocator,\n\t\t\tlong timeToWaitForPreexisting,\n\t\t\tboolean requirePublisherMatch,\n\t\t\tCCNHandle handle) throws IOException {\n\n\n\t\t// To avoid repeating work, we first see if this content is available on the network, then\n\t\t// if it's in a repository. That's because if it's not in a repository, we need to know if\n\t\t// it's on the network, and this way we save doing that work twice (as the repo-checking code\n\t\t// also needs to know if it's on the network).\n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\t\n\t\t// Returns immediately if timeToWaitForPreexisting is 0.\n\t\tContentObject availableContent = \n\t\t\tCCNReader.isVersionedContentAvailable(keyName, ContentType.KEY, keyDigest.digest(), \n\t\t\t\t\t(requirePublisherMatch ? signingKeyID : null), null, timeToWaitForPreexisting, handle);\n\t\t\n\t\t// If we want it self-signed...\n\t\tif ((SELF_SIGNED_KEY_LOCATOR == signingKeyLocator) && (null != availableContent)) {\n\t\t\t// do mean == here....\n\t\t\t// have already verified that keyDigest is the digest of the content of availableContent\n\t\t\tif (!PublicKeyObject.isSelfSigned(SegmentationProfile.segmentRoot(availableContent.name()), \n\t\t\t\t\tkeyDigest, availableContent.signedInfo().getKeyLocator())) {\n\t\t\t\t// it would be perfect, but it's not self-signed\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) {\n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"Found our key published under desired name {0}, but not self-signed as required - key locator is {1}.\",\n\t\t\t\t\t\t\tavailableContent.name(), availableContent.signedInfo().getKeyLocator());\n\t\t\t\t}\n\t\t\t\tavailableContent = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != availableContent) {\n\t\t\t\n\t\t\t// See if some repository has this key already\n\t\t\tif (null != CCNReader.isContentInRepository(availableContent, timeToWaitForPreexisting, handle)) {\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"publishKeyToRepository: key {0} is already in a repository; not re-publishing. Content digest {1}.\",\n\t\t\t\t\t\t\tkeyName, ContentName.componentPrintURI(availableContent.digest()));\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, we just need to trick the repo into pulling it.\n\t\t\t\tContentName streamName = SegmentationProfile.segmentRoot(availableContent.name());\n\t\t\t\tRepositoryFlowControl rfc = new RepositoryFlowControl(streamName, handle);\n\t\t\t\t// This will throw an IOException if there is no repository there to read it.\n\t\t\t\trfc.startWrite(streamName, Shape.STREAM);\n\t\t\t\t// OK, once we've emitted the interest, we don't actually need that flow controller anymore.\n\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\t\tLog.info(Log.FAC_KEYS, \"Key {0} published to repository as content {1}.\", keyName, \n\t\t\t\t\t\t\tContentName.componentPrintURI(availableContent.digest()));\n\t\t\t\t}\n\t\t\t\trfc.close();\n\t\t\t}\n\t\t\treturn new PublicKeyObject(availableContent, handle);\n\t\t\t\n\t\t} else {\t\t\n\t\t\t// We need to write this content ourselves, nobody else has it. We know we really want to \n\t\t\t// write it, no point in checking again to see if it's there.\n\t\t\tPublicKeyObject publishedKey =\n\t\t\t\tpublishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator, \n\t\t\t\t\t\t\t  null, SaveType.REPOSITORY, handle, handle.keyManager());\n\t\t\t\n\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) {\n\t\t\t\tLog.info(Log.FAC_KEYS, \"Published key {0} from scratch as content {1}.\", publishedKey.getVersionedName(), \n\t\t\t\t\t\tContentName.componentPrintURI(publishedKey.getContentDigest()));\n\t\t\t}\n\t\t\treturn publishedKey;\n\t\t}\n\t}","commit_id":"35c48d4e4e6110d68830800572618ebc664acf8b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Note: this is the lowest level interface to key publication; there are many higher-level\n\t * interfaces that are probably what you want. This needs to be public to get across\n\t * package constraints.\n\t * Publish a signed record for this key. We've already decided we need to publish,\n\t * and how; no more checks are made to see if the key already exists.\n\t * \n\t * @param keyName the key's content name. Will add a version when saving if it doesn't\n\t * \thave one already. If it does have a version, will use that one (see below for effect\n\t * \tof version on the key locator). (Note that this is not\n\t * \t\tstandard behavior for savable network content, which needs its version explicitly\n\t * \t\tset.)\n\t * @param keyToPublish the public key to publish\n\t * @param keyID the publisher id\n\t * @param signingKeyID the key id of the key pair to sign with\n\t * @param signingKeyLocator the key locator to use if we save this key (if it is not already published).\n\t * \tIf not specified, we look for the default locator for the signing key. If there is none,\n\t * \tand we are signing with the same key we are publishing, we build a\n\t * \tself-referential key locator, using the name passed in (versioned or not).\n\t * @param flowController flow controller to use. If non-null, saveType is ignored.\n\t * @param saveType -- if we don't want to hand in a special-purpose flow controller, set saveType to RAW\n\t *   or REPO to get standard publishing behavior.\n\t * @param handle the handle to use if we haven't specified a flow controller. Makes a flow controller\n\t * \tof the type specified by saveType. \n\t * @param keyManager the key manager to use to pull additional signing information (default keys\n\t *   and locators if not specified). If null, taken from handle. Also publish key added to its cache.\n\t * @return the published information about this key, whether we published it or someone else had\n\t * @throws IOException\n\t */\n\tpublic static PublicKeyObject publishKey(\n\t\t\tContentName keyName, PublicKey keyToPublish,\n\t\t\tPublisherPublicKeyDigest signingKeyID, KeyLocator signingKeyLocator,\n\t\t\tCCNFlowControl flowController,\n\t\t\tSaveType saveType, \n\t\t\tCCNHandle handle,\n\t\t\tKeyManager keyManager) \n\n\tthrows IOException {\n\n\t\tif ((null == keyManager) && (null != handle)) {\n\t\t\tkeyManager = handle.keyManager();\n\t\t}\n\t\t\n\t\tif ((null == keyManager) || ((null == flowController) && (null == handle)) || \n\t\t\t\t((null == flowController) && (null == saveType))) {\n\t\t\t\n\t\t\t// TODO DKS not quite right type...\n\t\t\tthrow new ErrorStateException(\"Must provide a flow controller or a handle and a save type, and a key manager!\");\n\t\t}\n\t\t\n\t\t// Now, finally; it's not published, so make an object to write it\n\t\t// with. We've already tried to pull it, so don't try here. Will\n\t\t// set publisher info below.\n\t\t\n\t\t// Need a key locator to stick in data entry for\n\t\t// locator. Could use key itself, but then would have\n\t\t// key both in the content for this item and in the\n\t\t// key locator, which is redundant. Use naming form\n\t\t// that allows for self-referential key names -- the\n\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t// we will refer to only the base key name and the publisher ID.\n\t\tif (null == signingKeyID) {\n\t\t\tsigningKeyID = keyManager.getDefaultKeyID();\n\t\t}\n\n\t\t// Here is where we get tricky. We might really want the key to be of a particular\n\t\t// version. In general, as we use the network objects to write versioned versioned stuff,\n\t\t// we might not be able to take the last component of a name, if versioned, as the version\n\t\t// to use to save -- might really want <name>/<version1>/<version2>. So unless we want to \n\t\t// make that impossible to achieve, we need to not have the network objects take the \n\t\t// name <name>/<version1> and save to <version1> (though they read from <version1> just\n\t\t// fine given the same). You always want to save to a new version, unless someone tells you\n\t\t// something different from the outside. \n\t\t// Come up with a contorted option. If you want to publish <version>/<version> stuff, you\n\t\t// need to pass in the second version...\n\t\t\n\t\tCCNTime keyVersion = null; // do we force a version?\n\t\tTuple<ContentName, byte []> nameAndVersion = VersioningProfile.cutTerminalVersion(keyName);\n\n\t\tif (null != nameAndVersion.second()) {\n\t\t\tkeyVersion = VersioningProfile.getVersionComponentAsTimestamp(nameAndVersion.second());\n\t\t} else {\n\t\t\tkeyVersion = new CCNTime(); // so we can use it in locator\n\t\t}\n\t\t\n\t\t// Set key locator if not specified, include version for self-signed.\n\t\t// Really do want == here\n\t\tif ((null == signingKeyLocator) || (SELF_SIGNED_KEY_LOCATOR == signingKeyLocator)) {\n\t\t\t\n\t\t\tKeyLocator existingLocator = keyManager.getKeyLocator(signingKeyID);\n\t\t\t\n\t\t\t// If we've asked for this to be self-signed, or we have made the default KEY\n\t\t\t// type key locator, make this a self-signed key.\n\t\t\tif ((SELF_SIGNED_KEY_LOCATOR == signingKeyLocator) || \n\t\t\t\t\t(existingLocator.type() == KeyLocatorType.KEY)) {\n\t\t\t\t\n\t\t\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\t\t\tif (signingKeyID.equals(keyDigest)) {\n\t\t\t\t\t// Make a self-referential key locator. Include the version, in case we are not using the key ID in the name.\n\t\t\t\t\t// People wanting versionless key locators need to construct their own.\n\t\t\t\t\texistingLocator = new KeyLocator(\n\t\t\t\t\t\t\tnew KeyName(VersioningProfile.addVersion(nameAndVersion.first(), keyVersion), signingKeyID));\n\t\t\t\t\t\n\t\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.FINER)) {\n\t\t\t\t\t\tLog.finer(Log.FAC_KEYS, \"Overriding constructed key locator of type KEY, making self-referential locator {0}\", existingLocator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsigningKeyLocator = existingLocator;\n\t\t}\t\t\t\n\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != flowController) {\n\t\t\t// If a flow controller was specified, use that\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), keyToPublish, \n\t\t\t\t\t\t\t\t\t\t\tsigningKeyID, signingKeyLocator, flowController);\n\t\t} else {\n\t\t\t// No flow controller given, use specified saveType.\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), keyToPublish, saveType,\n\t\t\t\t\t\t\t\t\t\t\tsigningKeyID, signingKeyLocator, handle);\n\t\t}\n\t\t\n\t\t\n\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\tLog.info(Log.FAC_KEYS, \"publishKey: key not previously published, making new key object {0} with version {1} displayed as {2}\", \n\t\t\t\tkeyObject.getVersionedName(), keyVersion, \n\t\t\t\t((null != nameAndVersion.second()) ? ContentName.componentPrintURI(nameAndVersion.second()) : \"<no version>\"));\n\t\t}\n\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\tif (!keyObject.save(keyVersion)) {\n\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\tLog.info(Log.FAC_KEYS, \"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t}\n\t\t} else {\n\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\tLog.info(Log.FAC_KEYS, \"Published key {0} to name {1} with key locator {2}; ephemeral digest {3}.\", \n\t\t\t\t\t\tkeyToPublish, keyObject.getVersionedName(), signingKeyLocator,\n\t\t\t\t\t\tContentName.componentPrintURI(keyObject.getContentDigest()));\n\t\t\t}\n\t\t}\n\t\tkeyManager.getPublicKeyCache().remember(keyObject);\n\t\treturn keyObject;\n\t}","id":64583,"modified_method":"/**\n\t * Note: this is the lowest level interface to key publication; there are many higher-level\n\t * interfaces that are probably what you want. This needs to be public to get across\n\t * package constraints.\n\t * Publish a signed record for this key. We've already decided we need to publish,\n\t * and how; no more checks are made to see if the key already exists.\n\t * \n\t * @param keyName the key's content name. Will add a version when saving if it doesn't\n\t * \thave one already. If it does have a version, will use that one (see below for effect\n\t * \tof version on the key locator). (Note that this is not\n\t * \t\tstandard behavior for savable network content, which needs its version explicitly\n\t * \t\tset.)\n\t * @param keyToPublish the public key to publish\n\t * @param keyID the publisher id\n\t * @param signingKeyID the key id of the key pair to sign with\n\t * @param signingKeyLocator the key locator to use if we save this key (if it is not already published).\n\t * \tIf not specified, we look for the default locator for the signing key. If there is none,\n\t * \tand we are signing with the same key we are publishing, we build a\n\t * \tself-referential key locator, using the name passed in (versioned or not).\n\t * @param flowController flow controller to use. If non-null, saveType is ignored.\n\t * @param saveType -- if we don't want to hand in a special-purpose flow controller, set saveType to RAW\n\t *   or REPO to get standard publishing behavior.\n\t * @param handle the handle to use if we haven't specified a flow controller. Makes a flow controller\n\t * \tof the type specified by saveType. \n\t * @param keyManager the key manager to use to pull additional signing information (default keys\n\t *   and locators if not specified). If null, taken from handle. Also publish key added to its cache.\n\t * @return the published information about this key, whether we published it or someone else had\n\t * @throws IOException\n\t */\n\tpublic static PublicKeyObject publishKey(\n\t\t\tContentName keyName, PublicKey keyToPublish,\n\t\t\tPublisherPublicKeyDigest signingKeyID, KeyLocator signingKeyLocator,\n\t\t\tCCNFlowControl flowController,\n\t\t\tSaveType saveType, \n\t\t\tCCNHandle handle,\n\t\t\tKeyManager keyManager) \n\n\tthrows IOException {\n\n\t\tif ((null == keyManager) && (null != handle)) {\n\t\t\tkeyManager = handle.keyManager();\n\t\t}\n\t\t\n\t\tif ((null == keyManager) || ((null == flowController) && (null == handle)) || \n\t\t\t\t((null == flowController) && (null == saveType))) {\n\t\t\t\n\t\t\t// TODO DKS not quite right type...\n\t\t\tthrow new ErrorStateException(\"Must provide a flow controller or a handle and a save type, and a key manager!\");\n\t\t}\n\t\t\n\t\t// Now, finally; it's not published, so make an object to write it\n\t\t// with. We've already tried to pull it, so don't try here. Will\n\t\t// set publisher info below.\n\t\t\n\t\t// Need a key locator to stick in data entry for\n\t\t// locator. Could use key itself, but then would have\n\t\t// key both in the content for this item and in the\n\t\t// key locator, which is redundant. Use naming form\n\t\t// that allows for self-referential key names -- the\n\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t// we will refer to only the base key name and the publisher ID.\n\t\tif (null == signingKeyID) {\n\t\t\tsigningKeyID = keyManager.getDefaultKeyID();\n\t\t}\n\n\t\t// Here is where we get tricky. We might really want the key to be of a particular\n\t\t// version. In general, as we use the network objects to write versioned versioned stuff,\n\t\t// we might not be able to take the last component of a name, if versioned, as the version\n\t\t// to use to save -- might really want <name>/<version1>/<version2>. So unless we want to \n\t\t// make that impossible to achieve, we need to not have the network objects take the \n\t\t// name <name>/<version1> and save to <version1> (though they read from <version1> just\n\t\t// fine given the same). You always want to save to a new version, unless someone tells you\n\t\t// something different from the outside. \n\t\t// Come up with a contorted option. If you want to publish <version>/<version> stuff, you\n\t\t// need to pass in the second version...\n\t\t\n\t\tCCNTime keyVersion = null; // do we force a version?\n\t\tTuple<ContentName, byte []> nameAndVersion = VersioningProfile.cutTerminalVersion(keyName);\n\n\t\tif (null != nameAndVersion.second()) {\n\t\t\tkeyVersion = VersioningProfile.getVersionComponentAsTimestamp(nameAndVersion.second());\n\t\t} else {\n\t\t\tkeyVersion = new CCNTime(); // so we can use it in locator\n\t\t}\n\t\t\n\t\t// Set key locator if not specified, include version for self-signed.\n\t\t// Really do want == here\n\t\tif ((null == signingKeyLocator) || (SELF_SIGNED_KEY_LOCATOR == signingKeyLocator)) {\n\t\t\t\n\t\t\tKeyLocator existingLocator = keyManager.getKeyLocator(signingKeyID);\n\t\t\t\n\t\t\t// If we've asked for this to be self-signed, or we have made the default KEY\n\t\t\t// type key locator, make this a self-signed key.\n\t\t\tif ((SELF_SIGNED_KEY_LOCATOR == signingKeyLocator) || \n\t\t\t\t\t(existingLocator.type() == KeyLocatorType.KEY)) {\n\t\t\t\t\n\t\t\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\t\t\tif (signingKeyID.equals(keyDigest)) {\n\t\t\t\t\t// Make a self-referential key locator. Include the version, in case we are not using the key ID in the name.\n\t\t\t\t\t// People wanting versionless key locators need to construct their own.\n\t\t\t\t\texistingLocator = new KeyLocator(\n\t\t\t\t\t\t\tnew KeyName(VersioningProfile.addVersion(nameAndVersion.first(), keyVersion), signingKeyID));\n\t\t\t\t\t\n\t\t\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.FINER)) {\n\t\t\t\t\t\tLog.finer(Log.FAC_KEYS, \"Overriding constructed key locator of type KEY, making self-referential locator {0}\", existingLocator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsigningKeyLocator = existingLocator;\n\t\t}\t\t\t\n\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != flowController) {\n\t\t\t// If a flow controller was specified, use that\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), keyToPublish, \n\t\t\t\t\t\t\t\t\t\t\tsigningKeyID, signingKeyLocator, flowController);\n\t\t} else {\n\t\t\t// No flow controller given, use specified saveType.\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), keyToPublish, saveType,\n\t\t\t\t\t\t\t\t\t\t\tsigningKeyID, signingKeyLocator, handle);\n\t\t}\n\t\t\n\t\t\n\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\tLog.info(Log.FAC_KEYS, \"publishKey: key not previously published, making new key object {0} with version {1} displayed as {2}\", \n\t\t\t\tkeyObject.getVersionedName(), keyVersion, \n\t\t\t\t((null != nameAndVersion.second()) ? ContentName.componentPrintURI(nameAndVersion.second()) : \"<no version>\"));\n\t\t}\n\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\tif (!keyObject.save(keyVersion)) {\n\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\tLog.info(Log.FAC_KEYS, \"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t}\n\t\t} else {\n\t\t\tif (Log.isLoggable(Log.FAC_KEYS, Level.INFO)) { \n\t\t\t\tLog.info(Log.FAC_KEYS, \"Published key {0} to name {1} with key locator {2}; ephemeral digest {3}.\", \n\t\t\t\t\t\tkeyToPublish, keyObject.getVersionedName(), signingKeyLocator,\n\t\t\t\t\t\tContentName.componentPrintURI(keyObject.getFirstDigest()));\n\t\t\t}\n\t\t}\n\t\tkeyManager.getPublicKeyCache().remember(keyObject);\n\t\treturn keyObject;\n\t}","commit_id":"35c48d4e4e6110d68830800572618ebc664acf8b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\tpublic void publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublicKey keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultPublicKey();\n\t\t} \n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\tif (null == keyName) {\n\t\t\tCCNTime version = getKeyVersion(keyDigest);\n\t\t\tkeyName = getDefaultKeyName(null, keyDigest, version);\n\t\t}\n\t\tboolean resetFlag = false;\n\t\tif (SystemConfiguration.checkDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES)) {\n\t\t\tresetFlag = true;\n\t\t\tSystemConfiguration.setDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES, false);\n\t\t}\n\t\t_keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t\tif (resetFlag) {\n\t\t\tSystemConfiguration.setDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES, true);\n\t\t}\n\t}","id":64584,"modified_method":"@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublicKey keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultPublicKey();\n\t\t} \n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\tif (null == keyName) {\n\t\t\tCCNTime version = getKeyVersion(keyDigest);\n\t\t\tkeyName = getDefaultKeyName(null, keyDigest, version);\n\t\t}\n\t\treturn _keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t}","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Publish my public key to a local key server run in this JVM.\n\t * @param keyName content name of the public key\n\t * @param keyToPublish public key digest\n\t * @param handle handle for ccn\n\t * @throws IOException\n\t * @throws InvalidKeyException\n\t * @throws ConfigurationException\n\t */\n\t@Override\n\tpublic void publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultKeyID();\n\t\t} \n\t\tLog.info(\"publishKey: publishing key {0} under specified key name {1}\", keyToPublish, keyName);\n\t\tif (null == keyName) {\n\t\t\tCCNTime version = getKeyVersion(keyToPublish);\n\t\t\tkeyName = getDefaultKeyName(null, keyToPublish, version);\n\t\t}\n\t\tboolean resetFlag = false;\n\t\tif (SystemConfiguration.checkDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES)) {\n\t\t\tresetFlag = true;\n\t\t\tSystemConfiguration.setDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES, false);\n\t\t}\n\t\t_keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t\tif (resetFlag) {\n\t\t\tSystemConfiguration.setDebugFlag(DEBUGGING_FLAGS.DEBUG_SIGNATURES, true);\n\t\t}\n\t}","id":64585,"modified_method":"/**\n\t * Publish my public key to a local key server run in this JVM.\n\t * @param keyName content name of the public key\n\t * @param keyToPublish public key digest\n\t * @param handle handle for ccn\n\t * @throws IOException\n\t * @throws InvalidKeyException\n\t * @throws ConfigurationException\n\t */\n\t@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultKeyID();\n\t\t} \n\t\tLog.info(\"publishKey: publishing key {0} under specified key name {1}\", keyToPublish, keyName);\n\t\tif (null == keyName) {\n\t\t\tCCNTime version = getKeyVersion(keyToPublish);\n\t\t\tkeyName = getDefaultKeyName(null, keyToPublish, version);\n\t\t}\n\t\treturn _keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t}","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\tpublic synchronized void publishDefaultKey(ContentName keyName) throws IOException, InvalidKeyException {\n\t\tif (!initialized()) {\n\t\t\tthrow new IOException(\"Cannot publish keys, have not yet initialized KeyManager!\");\n\t\t}\n\t\t// we've put together enough of this KeyManager to let the\n\t\t// KeyRepository use it to make a CCNHandle, even though we're\n\t\t// not done...\n\t\tif (_defaultKeysPublished) {\n\t\t\treturn;\n\t\t}\n\n\t\tpublishKey(keyName, getDefaultKeyID(), null, null);\n\t\t_defaultKeysPublished = true;\n\t}","id":64586,"modified_method":"@Override\n\tpublic synchronized PublicKeyObject publishDefaultKey(ContentName keyName) throws IOException, InvalidKeyException {\n\t\tif (!initialized()) {\n\t\t\tthrow new IOException(\"Cannot publish keys, have not yet initialized KeyManager!\");\n\t\t}\n\t\t// we've put together enough of this KeyManager to let the\n\t\t// KeyRepository use it to make a CCNHandle, even though we're\n\t\t// not done...\n\t\tif (_defaultKeysPublished) {\n\t\t\treturn null;\n\t\t}\n\n\t\tPublicKeyObject keyObject = publishKey(keyName, getDefaultKeyID(), null, null);\n\t\t_defaultKeysPublished = true;\n\t\treturn keyObject;\n\t}","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\r\n\t * Publish a key at a certain name, signed by a specified identity (our\n\t * default, if null). Usually used to\r\n\t * publish our own keys, but can specify other keys we have in our cache.\n\t * \n\t * This publishes our key to our own internal key server, from where it can be retrieved\n\t * as long as this KeyManager is running. It does not put it on the wire until someone\n\t * requests it. \n\t * Implementation Note: This code is used in CCNHandle initialization, and as such it\n\t * cannot use a CCNHandle or any of the standard network operations without introducing\n\t * a circular dependency. The code is very low-level and should only be modified with\n\t * great caution.\n\t * \r\n\t * @param keyName the name under which the key should be published. For the moment, keys are\r\n\t * \t\t  unversioned.\r\n\t * @param keyToPublish can be null, in which case we publish our own default public key\n\t * @throws InvalidKeyException \n\t * @throws IOException\r\n\t * @throws ConfigurationException \r\n\t */\r\n\tpublic abstract void publishKey(ContentName keyName, \n\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException;","id":64587,"modified_method":"/**\r\n\t * Publish a key at a certain name, signed by a specified identity (our\n\t * default, if null). Usually used to\r\n\t * publish our own keys, but can specify other keys we have in our cache.\n\t * \n\t * This publishes our key to our own internal key server, from where it can be retrieved\n\t * as long as this KeyManager is running. It does not put it on the wire until someone\n\t * requests it. \n\t * Implementation Note: This code is used in CCNHandle initialization, and as such it\n\t * cannot use a CCNHandle or any of the standard network operations without introducing\n\t * a circular dependency. The code is very low-level and should only be modified with\n\t * great caution.\n\t * \r\n\t * @param keyName the name under which the key should be published. For the moment, keys are\r\n\t * \t\t  unversioned.\r\n\t * @param keyToPublish can be null, in which case we publish our own default public key\n\t * @throws InvalidKeyException \n\t * @throws IOException\r\n\t * @throws ConfigurationException \r\n\t */\r\n\tpublic abstract PublicKeyObject publishKey(ContentName keyName, \n\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException;","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Publish a key at a certain name, signed by our default identity. Usually used to\n\t * publish our own keys, but can specify other keys we have in our cache.\n\t * \n\t * This publishes our key to our own internal key server, from where it can be retrieved\n\t * as long as this KeyManager is running. It does not put it on the wire until someone\n\t * requests it. \n\t * Implementation Note: This code is used in CCNHandle initialization, and as such it\n\t * cannot use a CCNHandle or any of the standard network operations without introducing\n\t * a circular dependency. The code is very low-level and should only be modified with\n\t * great caution.\n\t * \n\t * @param keyName the name under which the key should be published. For the moment, keys are\n\t * \t\t  unversioned.\n\t * @param keyToPublish can be null, in which case we publish our own default public key\n\t * @throws InvalidKeyException \n\t * @throws IOException\n\t * @throws ConfigurationException \n\t */\n\tpublic abstract void publishKey(ContentName keyName, \n\t\t\t   PublicKey keyToPublish,\n\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException;","id":64588,"modified_method":"/**\n\t * Publish a key at a certain name, signed by our default identity. Usually used to\n\t * publish our own keys, but can specify other keys we have in our cache.\n\t * \n\t * This publishes our key to our own internal key server, from where it can be retrieved\n\t * as long as this KeyManager is running. It does not put it on the wire until someone\n\t * requests it. \n\t * Implementation Note: This code is used in CCNHandle initialization, and as such it\n\t * cannot use a CCNHandle or any of the standard network operations without introducing\n\t * a circular dependency. The code is very low-level and should only be modified with\n\t * great caution.\n\t * \n\t * @param keyName the name under which the key should be published. For the moment, keys are\n\t * \t\t  unversioned.\n\t * @param keyToPublish can be null, in which case we publish our own default public key\n\t * @throws InvalidKeyException \n\t * @throws IOException\n\t * @throws ConfigurationException \n\t */\n\tpublic abstract PublicKeyObject publishKey(ContentName keyName, \n\t\t\t   PublicKey keyToPublish,\n\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException;","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Allow subclasses to specialize key publication, if any.\n\t * @param defaultPrefix our default namespace, if we know\n\t * \tone for this environment. If null, take user defaults.\n\t * @throws ConfigurationException \n\t */\n\tpublic abstract void publishDefaultKey(ContentName defaultPrefix) throws IOException, InvalidKeyException;","id":64589,"modified_method":"/**\n\t * Allow subclasses to specialize key publication, if any.\n\t * @param defaultPrefix our default namespace, if we know\n\t * \tone for this environment. If null, take user defaults.\n\t * @throws ConfigurationException \n\t */\n\tpublic abstract PublicKeyObject publishDefaultKey(ContentName defaultPrefix) throws IOException, InvalidKeyException;","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Overly duplicated code. TODO condense with method above.\n\t */\n\tpublic void publishKey(ContentName keyName, PublicKey theKey, PublisherPublicKeyDigest signingKeyID, \n\t\t\t\t\t\t\tKeyLocator keyLocator) \n\tthrows IOException {\n\n\t\t// Set up key server if it hasn't been set up already\n\t\tinitializeKeyServer();\n\n\t\t// See if we can pull something acceptable for this key at this name.\n\t\t// Use same code path for default key retrieval as getPublicKey, so that we can manage\n\t\t// version handling in a single place.\n\t\tif (null == theKey) {\n\t\t\ttheKey = handle().keyManager().getDefaultPublicKey();\n\t\t}\n\t\tPublisherPublicKeyDigest keyToPublish = new PublisherPublicKeyDigest(theKey);\n\t\t\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != theKey) {\n\t\t\tkeyObject = retrieve(keyToPublish);\n\t\t} \n\t\tif (null == keyObject) {\n\t\t\tkeyObject = new PublicKeyObject(keyName, signingKeyID, _keyServer);\n\t\t}\n\n\t\tif (!keyObject.available() || (!keyObject.publicKeyDigest().equals(keyToPublish))) {\n\t\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\t\t// Need a key locator to stick in data entry for\n\t\t\t// locator. Could use key itself, but then would have\n\t\t\t// key both in the content for this item and in the\n\t\t\t// key locator, which is redundant. Use naming form\n\t\t\t// that allows for self-referential key names -- the\n\t\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t\t// we will refer to only the base key name and the publisher ID.\n\t\t\tif (null == signingKeyID) {\n\t\t\t\tsigningKeyID = handle().keyManager().getDefaultKeyID();\n\t\t\t}\n\n\t\t\tif (null == keyLocator) {\n\t\t\t\tKeyLocator constructedLocator = handle().keyManager().getKeyLocator(signingKeyID);\n\t\t\t\tif ((constructedLocator.type() == KeyLocatorType.KEY) && \n\t\t\t\t\t(signingKeyID.equals(keyToPublish))) {\n\t\t\t\t\t\t// Make a self-referential key locator. For now do not include the\n\t\t\t\t\t\t// version.\n\t\t\t\t\tconstructedLocator = new KeyLocator(new KeyName(keyName, signingKeyID));\n\t\t\t\t}\n\t\t\t\tkeyLocator = constructedLocator;\n\t\t\t}\n\n\t\t\tkeyObject.setOurPublisherInformation(signingKeyID, keyLocator);\n\t\t\t// nobody's written it where we can find it fast enough.\n\t\t\t// theKey will be retrieved from cache if not stored on network\n\t\t\tkeyObject.setData(theKey);\n\n\t\t\tif (!keyObject.save()) {\n\t\t\t\tLog.info(\"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t} else {\n\t\t\t\tLog.info(\"Published key {0} to name {1}\", keyToPublish, keyObject.getVersionedName());\n\t\t\t}\n\t\t} else {\n\t\t\tLog.info(\"Retrieved existing key object {0}, whose key locator is {1}.\", keyObject.getVersionedName(), keyObject.getPublisherKeyLocator());\n\t\t}\n\t\tremember(keyObject);\n\t}","id":64590,"modified_method":"/**\n\t * Overly duplicated code. TODO condense with method above.\n\t */\n\tpublic PublicKeyObject publishKey(ContentName keyName, PublicKey theKey, PublisherPublicKeyDigest signingKeyID, \n\t\t\t\t\t\t\tKeyLocator keyLocator) \n\tthrows IOException {\n\n\t\t// Set up key server if it hasn't been set up already\n\t\tinitializeKeyServer();\n\n\t\t// See if we can pull something acceptable for this key at this name.\n\t\t// Use same code path for default key retrieval as getPublicKey, so that we can manage\n\t\t// version handling in a single place.\n\t\tif (null == theKey) {\n\t\t\ttheKey = handle().keyManager().getDefaultPublicKey();\n\t\t}\n\t\tPublisherPublicKeyDigest keyToPublish = new PublisherPublicKeyDigest(theKey);\n\t\t\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != theKey) {\n\t\t\tkeyObject = retrieve(keyToPublish);\n\t\t} \n\t\tif (null == keyObject) {\n\t\t\tkeyObject = new PublicKeyObject(keyName, signingKeyID, _keyServer);\n\t\t}\n\n\t\tif (!keyObject.available() || (!keyObject.publicKeyDigest().equals(keyToPublish))) {\n\t\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\t\t// Need a key locator to stick in data entry for\n\t\t\t// locator. Could use key itself, but then would have\n\t\t\t// key both in the content for this item and in the\n\t\t\t// key locator, which is redundant. Use naming form\n\t\t\t// that allows for self-referential key names -- the\n\t\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t\t// we will refer to only the base key name and the publisher ID.\n\t\t\tif (null == signingKeyID) {\n\t\t\t\tsigningKeyID = handle().keyManager().getDefaultKeyID();\n\t\t\t}\n\n\t\t\tif (null == keyLocator) {\n\t\t\t\tKeyLocator constructedLocator = handle().keyManager().getKeyLocator(signingKeyID);\n\t\t\t\tif ((constructedLocator.type() == KeyLocatorType.KEY) && \n\t\t\t\t\t(signingKeyID.equals(keyToPublish))) {\n\t\t\t\t\t\t// Make a self-referential key locator. For now do not include the\n\t\t\t\t\t\t// version.\n\t\t\t\t\tconstructedLocator = new KeyLocator(new KeyName(keyName, signingKeyID));\n\t\t\t\t}\n\t\t\t\tkeyLocator = constructedLocator;\n\t\t\t}\n\n\t\t\tkeyObject.setOurPublisherInformation(signingKeyID, keyLocator);\n\t\t\t// nobody's written it where we can find it fast enough.\n\t\t\t// theKey will be retrieved from cache if not stored on network\n\t\t\tkeyObject.setData(theKey);\n\n\t\t\tif (!keyObject.save()) {\n\t\t\t\tLog.info(\"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t} else {\n\t\t\t\tLog.info(\"Published key {0} to name {1}\", keyToPublish, keyObject.getVersionedName());\n\t\t\t}\n\t\t} else {\n\t\t\tLog.info(\"Retrieved existing key object {0}, whose key locator is {1}.\", keyObject.getVersionedName(), keyObject.getPublisherKeyLocator());\n\t\t}\n\t\tremember(keyObject);\n\t\treturn keyObject;\n\t}","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Publish a signed record for this key if one doesn't exist.\n\t * (if it does exist, pulls it at least to our ccnd, and optionally\n\t * makes it available). (TODO: decide what to do if it's published by someone\n\t * else... need another option for that.)\n\t * @param keyName the key's content name. Will add a version when saving if it doesn't\n\t * \thave one already. If it does have a version, will use that one (see below for effect\n\t * \tof version on the key locator). (Note that this is not\n\t * \t\tstandard behavior for savable network content, which needs its version explicitly\n\t * \t\tset.)\n\t * @param keyToPublish the public key to publish\n\t * @param keyID the publisher id\n\t * @param signingKeyID the key id of the key pair to sign with\n\t * @param signingKeyLocator the key locator to use if we save this key (if it is not already published).\n\t * \tIf not specified, we look for the default locator for the signing key. If there is none,\n\t * \tand we are signing with the same key we are publishing, we build a\n\t * \tself-referential key locator, using the name passed in (versioned or not).\n\t * @return void\n\t * @throws IOException\n\t */\n\tpublic void publishKey(ContentName keyName, PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID, KeyLocator signingKeyLocator) \n\tthrows IOException {\n\n\t\t// Set up key server if it hasn't been set up already\n\t\tinitializeKeyServer();\n\n\t\t// See if we can pull something acceptable for this key at this name.\n\t\t// Use same code path for default key retrieval as getPublicKey, so that we can manage\n\t\t// version handling in a single place.\n\t\tKeyLocator targetKeyLocator = new KeyLocator(keyName);\n\t\tLog.info(\"publishKey: publishing key {0}, first retrieving using {1}\", keyName, targetKeyLocator);\n\t\t\n\t\tPublicKey theKey = getPublicKey(keyToPublish, targetKeyLocator, SystemConfiguration.SHORT_TIMEOUT);\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != theKey) {\n\t\t\tkeyObject = retrieve(keyToPublish);\n\t\t} \n\t\tif (null == keyObject) {\n\t\t\t// This might have been one of our keys, so we got it straight from\n\t\t\t// cache; try to ensure it's not on the network. Might eventually\n\t\t\t// want to check publisher as well\n\t\t\tkeyObject = getPublicKeyObject(keyToPublish, targetKeyLocator, SystemConfiguration.SHORT_TIMEOUT);\n\t\t\tif ((null == theKey) && (null != keyObject) && (keyObject.available())) {\n\t\t\t\ttheKey = keyObject.publicKey();\n\t\t\t}\n\t\t}\n\t\t// Now, finally; it's not published, so make an object to write it\n\t\t// with. We've already tried to pull it, so don't try here. Will\n\t\t// set publisher info below.\n\t\tCCNTime keyVersion = null; // do we force a version?\n\t\t\n\t\tif (null == keyObject) {\n\t\t\t// Here is where we get tricky. We might really want the key to be of a particular\n\t\t\t// version. In general, as we use the network objects to write versioned versioned stuff,\n\t\t\t// we might not be able to take the last component of a name, if versioned, as the version\n\t\t\t// to use to save -- might really want <name>/<version1>/<version2>. So unless we want to \n\t\t\t// make that impossible to achieve, we need to not have the network objects take the \n\t\t\t// name <name>/<version1> and save to <version1> (though they read from <version1> just\n\t\t\t// fine given the same). You always want to save to a new version, unless someone tells you\n\t\t\t// something different from the outside. \n\t\t\t// Come up with a contorted option. If you want to publish <version>/<version> stuff, you\n\t\t\t// need to pass in the second version...\n\t\t\tTuple<ContentName, byte []> nameAndVersion = VersioningProfile.cutTerminalVersion(keyName);\n\t\t\t\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), theKey, null, null, _keyServer);\n\t\t\tif (null != nameAndVersion.second()) {\n\t\t\t\tkeyVersion = VersioningProfile.getVersionComponentAsTimestamp(nameAndVersion.second());\n\t\t\t}\n\t\t\tLog.info(\"publishKey: key not previously published, making new key object {0} with version {1} displayed as {2}\", \n\t\t\t\t\t\t\tkeyObject.getVersionedName(), keyVersion, \n\t\t\t\t\t\t\t((null != nameAndVersion.second()) ? ContentName.componentPrintURI(nameAndVersion.second()) : \"<no version>\"));\n\t\t}\n\n\t\tif (!keyObject.isSaved() || (!keyObject.publicKeyDigest().equals(keyToPublish))) {\n\t\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\t\t// Need a key locator to stick in data entry for\n\t\t\t// locator. Could use key itself, but then would have\n\t\t\t// key both in the content for this item and in the\n\t\t\t// key locator, which is redundant. Use naming form\n\t\t\t// that allows for self-referential key names -- the\n\t\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t\t// we will refer to only the base key name and the publisher ID.\n\t\t\tif (null == signingKeyID) {\n\t\t\t\tsigningKeyID = handle().keyManager().getDefaultKeyID();\n\t\t\t}\n\n\t\t\tif (null == signingKeyLocator) {\n\t\t\t\tKeyLocator constructedLocator = handle().keyManager().getKeyLocator(signingKeyID);\n\t\t\t\tif ((constructedLocator.type() == KeyLocatorType.KEY) && \n\t\t\t\t\t(signingKeyID.equals(keyToPublish))) {\n\t\t\t\t\t\t// Make a self-referential key locator. For now do not include the\n\t\t\t\t\t\t// version.\n\t\t\t\t\tconstructedLocator = new KeyLocator(new KeyName(keyName, signingKeyID));\n\t\t\t\t}\n\t\t\t\tsigningKeyLocator = constructedLocator;\n\t\t\t}\n\n\t\t\tkeyObject.setOurPublisherInformation(signingKeyID, signingKeyLocator);\n\t\t\t// nobody's written it where we can find it fast enough.\n\t\t\t// theKey will be retrieved from cache if not stored on network\n\t\t\tkeyObject.setData(theKey);\n\n\t\t\tif (!keyObject.save(keyVersion)) {\n\t\t\t\tLog.info(\"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t} else {\n\t\t\t\tLog.info(\"Published key {0} to name {1} with key locator {2}.\", keyToPublish, keyObject.getVersionedName(), signingKeyLocator);\n\t\t\t}\n\t\t} else {\n\t\t\tLog.info(\"Retrieved existing key object {0}, whose key locator is {1}.\", keyObject.getVersionedName(), keyObject.getPublisherKeyLocator());\n\t\t}\n\t\tremember(keyObject);\n\t}","id":64591,"modified_method":"/**\n\t * Publish a signed record for this key if one doesn't exist.\n\t * (if it does exist, pulls it at least to our ccnd, and optionally\n\t * makes it available). (TODO: decide what to do if it's published by someone\n\t * else... need another option for that.)\n\t * @param keyName the key's content name. Will add a version when saving if it doesn't\n\t * \thave one already. If it does have a version, will use that one (see below for effect\n\t * \tof version on the key locator). (Note that this is not\n\t * \t\tstandard behavior for savable network content, which needs its version explicitly\n\t * \t\tset.)\n\t * @param keyToPublish the public key to publish\n\t * @param keyID the publisher id\n\t * @param signingKeyID the key id of the key pair to sign with\n\t * @param signingKeyLocator the key locator to use if we save this key (if it is not already published).\n\t * \tIf not specified, we look for the default locator for the signing key. If there is none,\n\t * \tand we are signing with the same key we are publishing, we build a\n\t * \tself-referential key locator, using the name passed in (versioned or not).\n\t * @return void\n\t * @throws IOException\n\t */\n\tpublic PublicKeyObject publishKey(ContentName keyName, PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID, KeyLocator signingKeyLocator) \n\tthrows IOException {\n\n\t\t// Set up key server if it hasn't been set up already\n\t\tinitializeKeyServer();\n\n\t\t// See if we can pull something acceptable for this key at this name.\n\t\t// Use same code path for default key retrieval as getPublicKey, so that we can manage\n\t\t// version handling in a single place.\n\t\tKeyLocator targetKeyLocator = new KeyLocator(keyName);\n\t\tLog.info(\"publishKey: publishing key {0}, first retrieving using {1}\", keyName, targetKeyLocator);\n\t\t\n\t\tPublicKey theKey = getPublicKey(keyToPublish, targetKeyLocator, SystemConfiguration.SHORT_TIMEOUT);\n\t\tPublicKeyObject keyObject = null;\n\t\tif (null != theKey) {\n\t\t\tkeyObject = retrieve(keyToPublish);\n\t\t} \n\t\tif (null == keyObject) {\n\t\t\t// This might have been one of our keys, so we got it straight from\n\t\t\t// cache; try to ensure it's not on the network. Might eventually\n\t\t\t// want to check publisher as well\n\t\t\tkeyObject = getPublicKeyObject(keyToPublish, targetKeyLocator, SystemConfiguration.SHORT_TIMEOUT);\n\t\t\tif ((null == theKey) && (null != keyObject) && (keyObject.available())) {\n\t\t\t\ttheKey = keyObject.publicKey();\n\t\t\t}\n\t\t}\n\t\t// Now, finally; it's not published, so make an object to write it\n\t\t// with. We've already tried to pull it, so don't try here. Will\n\t\t// set publisher info below.\n\t\tCCNTime keyVersion = null; // do we force a version?\n\t\t\n\t\tif (null == keyObject) {\n\t\t\t// Here is where we get tricky. We might really want the key to be of a particular\n\t\t\t// version. In general, as we use the network objects to write versioned versioned stuff,\n\t\t\t// we might not be able to take the last component of a name, if versioned, as the version\n\t\t\t// to use to save -- might really want <name>/<version1>/<version2>. So unless we want to \n\t\t\t// make that impossible to achieve, we need to not have the network objects take the \n\t\t\t// name <name>/<version1> and save to <version1> (though they read from <version1> just\n\t\t\t// fine given the same). You always want to save to a new version, unless someone tells you\n\t\t\t// something different from the outside. \n\t\t\t// Come up with a contorted option. If you want to publish <version>/<version> stuff, you\n\t\t\t// need to pass in the second version...\n\t\t\tTuple<ContentName, byte []> nameAndVersion = VersioningProfile.cutTerminalVersion(keyName);\n\t\t\t\n\t\t\tkeyObject = new PublicKeyObject(nameAndVersion.first(), theKey, null, null, _keyServer);\n\t\t\tif (null != nameAndVersion.second()) {\n\t\t\t\tkeyVersion = VersioningProfile.getVersionComponentAsTimestamp(nameAndVersion.second());\n\t\t\t}\n\t\t\tLog.info(\"publishKey: key not previously published, making new key object {0} with version {1} displayed as {2}\", \n\t\t\t\t\t\t\tkeyObject.getVersionedName(), keyVersion, \n\t\t\t\t\t\t\t((null != nameAndVersion.second()) ? ContentName.componentPrintURI(nameAndVersion.second()) : \"<no version>\"));\n\t\t}\n\n\t\tif (!keyObject.isSaved() || (!keyObject.publicKeyDigest().equals(keyToPublish))) {\n\t\t\t// Eventually may want to find something already published and link to it, but be simple here.\n\n\t\t\t// Need a key locator to stick in data entry for\n\t\t\t// locator. Could use key itself, but then would have\n\t\t\t// key both in the content for this item and in the\n\t\t\t// key locator, which is redundant. Use naming form\n\t\t\t// that allows for self-referential key names -- the\n\t\t\t// CCN equivalent of a \"self-signed cert\". Means that\n\t\t\t// we will refer to only the base key name and the publisher ID.\n\t\t\tif (null == signingKeyID) {\n\t\t\t\tsigningKeyID = handle().keyManager().getDefaultKeyID();\n\t\t\t}\n\n\t\t\tif (null == signingKeyLocator) {\n\t\t\t\tKeyLocator constructedLocator = handle().keyManager().getKeyLocator(signingKeyID);\n\t\t\t\tif ((constructedLocator.type() == KeyLocatorType.KEY) && \n\t\t\t\t\t(signingKeyID.equals(keyToPublish))) {\n\t\t\t\t\t\t// Make a self-referential key locator. For now do not include the\n\t\t\t\t\t\t// version.\n\t\t\t\t\tconstructedLocator = new KeyLocator(new KeyName(keyName, signingKeyID));\n\t\t\t\t}\n\t\t\t\tsigningKeyLocator = constructedLocator;\n\t\t\t}\n\n\t\t\tkeyObject.setOurPublisherInformation(signingKeyID, signingKeyLocator);\n\t\t\t// nobody's written it where we can find it fast enough.\n\t\t\t// theKey will be retrieved from cache if not stored on network\n\t\t\tkeyObject.setData(theKey);\n\n\t\t\tif (!keyObject.save(keyVersion)) {\n\t\t\t\tLog.info(\"Not saving key when we thought we needed to: desired key value {0}, have key value {1}, \" +\n\t\t\t\t\t\tkeyToPublish, new PublisherPublicKeyDigest(keyObject.publicKey()));\n\t\t\t} else {\n\t\t\t\tLog.info(\"Published key {0} to name {1} with key locator {2}.\", keyToPublish, keyObject.getVersionedName(), signingKeyLocator);\n\t\t\t}\n\t\t} else {\n\t\t\tLog.info(\"Retrieved existing key object {0}, whose key locator is {1}.\", keyObject.getVersionedName(), keyObject.getPublisherKeyLocator());\n\t\t}\n\t\tremember(keyObject);\n\t\treturn keyObject;\n\t}","commit_id":"1c074374fced6cce58b83a6984ce27d38e74fe12","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Get the key locator to use for a given key. Use\n\t * this to publish this key in the future if not overridden by method\n\t * calls. If no key locator stored for this key, and no override\n\t * given, compute a default key locator based on user information and\n\t * parameters in UserConfiguration.\n\t * @return key locator\n\t */\n\t@Override\n\tpublic KeyLocator getKeyLocator(PublisherPublicKeyDigest keyID) {\n\t\tif (null == keyID) {\n\t\t\tkeyID = getDefaultKeyID();\n\t\t}\n\t\tPublicKeyObject keyObject = _keyRepository.retrieve(keyID);\n\n\t\tif (null != keyObject) {\n\t\t\ttry {\n\t\t\t\tif (keyObject.isSaved()) {\n\t\t\t\t\treturn new KeyLocator(new KeyName(keyObject.getVersionedName(), new PublisherID(keyObject.getContentPublisher())));\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\tLog.warning(\"IOException checking saved status or retrieving version of key object {0}: {1}!\", keyObject.getVersionedName(), ex.getMessage());\n\t\t\t\tLog.warningStackTrace(ex);\n\t\t\t\tLog.warning(\"Falling through and retrieving KEY type key locator for key {1}\", keyID);\n\t\t\t}\n\t\t} \n\t\treturn getKeyTypeKeyLocator(keyID);\n\t}","id":64592,"modified_method":"/**\n\t * Get the key locator to use for a given key. If a value has been stored\n\t * by calling setKeyLocator, that value will be used. Such values can\n\t * also be initialized using command-line properties, environment variables,\n\t * or configuration files. Usually it refers to content already published.\n\t * As we don't know where the key might be published, if no value is\n\t * specified, we return a locator of type KEY. We have deprecated the\n\t * previous behavior of trying to look at objects we have published\n\t * containing this key; this does not allow the user enough control over\n\t * what key locator will be used.\n\t * @return key locator\n\t */\n\t@Override\n\tpublic KeyLocator getKeyLocator(PublisherPublicKeyDigest keyID) {\n\t\tif (null == keyID) {\n\t\t\tkeyID = getDefaultKeyID();\n\t\t}\n\t\tKeyLocator keyLocator = getStoredKeyLocator(keyID);\n\t\tif (null == keyLocator) {\n\t\t\tkeyLocator = getKeyTypeKeyLocator(keyID);\n\t\t}\n\t\tLog.info(\"getKeyLocator: returning locator {0} for key {1}\", keyID);\n\t\treturn keyLocator;\n\t}","commit_id":"29d588d82a9f326f17b1f7c95b7ab2f36a80f33d","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Publish my public key to a local key server run in this JVM.\n\t * @param keyName content name of the public key\n\t * @param keyToPublish public key digest\n\t * @param handle handle for ccn\n\t * @throws IOException\n\t * @throws InvalidKeyException\n\t * @throws ConfigurationException\n\t */\n\t@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultKeyID();\n\t\t} \n\t\tif (null == keyName) {\n\t\t\tkeyName = getDefaultKeyName(keyToPublish);\n\t\t}\n\t\tLog.info(\"publishKey: publishing key {0} under specified key name {1}\", keyToPublish, keyName);\n\t\treturn _keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t}","id":64593,"modified_method":"/**\n\t * Publish my public key to a local key server run in this JVM.\n\t * @param keyName content name of the public key\n\t * @param keyToPublish public key digest\n\t * @param handle handle for ccn\n\t * @throws IOException\n\t * @throws InvalidKeyException\n\t * @throws ConfigurationException\n\t */\n\t@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublisherPublicKeyDigest keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultKeyID();\n\t\t} \n\t\tPublicKey theKey = getPublicKey(keyToPublish);\n\t\tif (null == theKey) {\n\t\t\tLog.warning(\"Cannot publish key {0} to name {1}, do not have public key in cache.\", keyToPublish, keyName);\n\t\t\treturn null;\n\t\t}\n\t\treturn publishKey(keyName, theKey, signingKeyID, signingKeyLocator);\n\t}","commit_id":"29d588d82a9f326f17b1f7c95b7ab2f36a80f33d","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublicKey keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultPublicKey();\n\t\t} \n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\tif (null == keyName) {\n\t\t\tkeyName = getDefaultKeyName(keyDigest);\n\t\t}\n\t\tLog.info(\"publishKey: publishing key {0} under specified key name {1}\", keyToPublish, keyName);\n\t\treturn _keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t}","id":64594,"modified_method":"@Override\n\tpublic PublicKeyObject publishKey(ContentName keyName, \n\t\t\t\t\t\t   PublicKey keyToPublish,\n\t\t\t\t\t\t   PublisherPublicKeyDigest signingKeyID,\n\t\t\t\t\t\t   KeyLocator signingKeyLocator) throws InvalidKeyException, IOException {\n\t\tif (null == keyToPublish) {\n\t\t\tkeyToPublish = getDefaultPublicKey();\n\t\t} \n\t\tPublisherPublicKeyDigest keyDigest = new PublisherPublicKeyDigest(keyToPublish);\n\t\t\n\t\tif (null == keyName) {\n\t\t\tkeyName = getDefaultKeyName(keyDigest);\n\t\t}\n\t\tLog.info(\"publishKey: publishing key {0} under specified key name {1}\", keyDigest, keyName);\n\t\tPublicKeyObject keyObject =  _keyRepository.publishKey(keyName, keyToPublish, signingKeyID, signingKeyLocator);\n\t\t\n\t\tif (!haveStoredKeyLocator(keyDigest) && (null != keyObject)) {\n\t\t\t// So once we publish self-signed key object, we store a pointer to that\n\t\t\t// to use. Don't override any manually specified values.\n\t\t\tKeyLocator newKeyLocator = new KeyLocator(keyObject.getVersionedName(), keyObject.getContentPublisher());\n\t\t\tsetKeyLocator(keyDigest, newKeyLocator);\n\t\t\tLog.info(\"publishKey: storing key locator {1} for key {1}\", keyDigest, newKeyLocator);\n\t\t}\n\t\treturn keyObject;\n\t}","commit_id":"29d588d82a9f326f17b1f7c95b7ab2f36a80f33d","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void testInitXObjectDocumentDocName() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64595,"modified_method":"public void testInitXObjectDocumentDocName() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXObjectDocumentEmpty() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64596,"modified_method":"public void testInitXObjectDocumentEmpty() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws XWikiException\n    {\n        this.context = new XWikiContext();\n        this.xwiki = new XWiki();\n        this.xwiki.setNotificationManager(new XWikiNotificationManager());\n        this.context.setWiki(this.xwiki);\n\n        // //////////////////////////////////////////////////\n        // XWikiHibernateStore\n\n        this.mockXWikiStore =\n            mock(XWikiHibernateStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {this.xwiki,\n            this.context});\n        this.mockXWikiStore.stubs().method(\"loadXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.loadXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument shallowDoc = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    if (documents.containsKey(shallowDoc.getFullName())) {\n                        return documents.get(shallowDoc.getFullName());\n                    } else {\n                        return shallowDoc;\n                    }\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"saveXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.saveXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    document.setNew(false);\n                    document.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n                    documents.put(document.getFullName(), document);\n\n                    return null;\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"getTranslationList\").will(returnValue(Collections.EMPTY_LIST));\n\n        this.mockXWikiVersioningStore =\n            mock(XWikiHibernateVersioningStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {\n            this.xwiki, this.context});\n        this.mockXWikiVersioningStore.stubs().method(\"getXWikiDocumentArchive\").will(returnValue(null));\n        this.mockXWikiVersioningStore.stubs().method(\"resetRCSArchive\").will(returnValue(null));\n\n        this.xwiki.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n        this.xwiki.setVersioningStore((XWikiVersioningStoreInterface) mockXWikiVersioningStore.proxy());\n\n        // ////////////////////////////////////////////////////////////////////////////////\n        // XWikiRightService\n\n        this.xwiki.setRightService(new XWikiRightService()\n        {\n            public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)\n                throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAdminRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiDocument doc, XWikiContext context)\n            {\n                return true;\n            }\n\n            public List listAllLevels(XWikiContext context) throws XWikiException\n            {\n                return Collections.EMPTY_LIST;\n            }\n        });\n    }","id":64597,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        \n        this.xwiki = new XWiki();\n        this.xwiki.setNotificationManager(new XWikiNotificationManager());\n        getContext().setWiki(this.xwiki);\n\n        // //////////////////////////////////////////////////\n        // XWikiHibernateStore\n\n        this.mockXWikiStore =\n            mock(XWikiHibernateStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {this.xwiki,\n            getContext()});\n        this.mockXWikiStore.stubs().method(\"loadXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.loadXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument shallowDoc = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    if (documents.containsKey(shallowDoc.getFullName())) {\n                        return documents.get(shallowDoc.getFullName());\n                    } else {\n                        return shallowDoc;\n                    }\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"saveXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.saveXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    document.setNew(false);\n                    document.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n                    documents.put(document.getFullName(), document);\n\n                    return null;\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"getTranslationList\").will(returnValue(Collections.EMPTY_LIST));\n\n        this.mockXWikiVersioningStore =\n            mock(XWikiHibernateVersioningStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {\n            this.xwiki, getContext()});\n        this.mockXWikiVersioningStore.stubs().method(\"getXWikiDocumentArchive\").will(returnValue(null));\n        this.mockXWikiVersioningStore.stubs().method(\"resetRCSArchive\").will(returnValue(null));\n\n        this.xwiki.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n        this.xwiki.setVersioningStore((XWikiVersioningStoreInterface) mockXWikiVersioningStore.proxy());\n\n        // ////////////////////////////////////////////////////////////////////////////////\n        // XWikiRightService\n\n        this.xwiki.setRightService(new XWikiRightService()\n        {\n            public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)\n                throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAdminRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiDocument doc, XWikiContext context)\n            {\n                return true;\n            }\n\n            public List listAllLevels(XWikiContext context) throws XWikiException\n            {\n                return Collections.EMPTY_LIST;\n            }\n        });\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testMergeObject() throws XWikiException\n    {\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc1 = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        DefaultXObjectDocument sdoc2 = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc1\");\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string2, \"value2sdoc1\");\n\n        sdoc2.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc2\");\n        sdoc2.setIntValue(TestAbstractXClassManagerTest.FIELD_int, 2);\n\n        sdoc1.mergeObject(sdoc2);\n\n        assertEquals(\"The field is not overwritten\", sdoc1.getStringValue(TestAbstractXClassManagerTest.FIELD_string),\n            sdoc2.getStringValue(TestAbstractXClassManagerTest.FIELD_string));\n        assertEquals(\"The field is removed\", \"value2sdoc1\", sdoc1\n            .getStringValue(TestAbstractXClassManagerTest.FIELD_string2));\n        assertEquals(\"The field is not added\", sdoc1.getIntValue(TestAbstractXClassManagerTest.FIELD_int), sdoc1\n            .getIntValue(TestAbstractXClassManagerTest.FIELD_int));\n    }","id":64598,"modified_method":"public void testMergeObject() throws XWikiException\n    {\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc1 = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        DefaultXObjectDocument sdoc2 = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc1\");\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string2, \"value2sdoc1\");\n\n        sdoc2.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc2\");\n        sdoc2.setIntValue(TestAbstractXClassManagerTest.FIELD_int, 2);\n\n        sdoc1.mergeObject(sdoc2);\n\n        assertEquals(\"The field is not overwritten\", sdoc1.getStringValue(TestAbstractXClassManagerTest.FIELD_string),\n            sdoc2.getStringValue(TestAbstractXClassManagerTest.FIELD_string));\n        assertEquals(\"The field is removed\", \"value2sdoc1\", sdoc1\n            .getStringValue(TestAbstractXClassManagerTest.FIELD_string2));\n        assertEquals(\"The field is not added\", sdoc1.getIntValue(TestAbstractXClassManagerTest.FIELD_int), sdoc1\n            .getIntValue(TestAbstractXClassManagerTest.FIELD_int));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXObjectDocumentDocNameExists() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XWikiDocument doc = xwiki.getDocument(DEFAULT_DOCFULLNAME, context);\n        xwiki.saveDocument(doc, context);\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64599,"modified_method":"public void testInitXObjectDocumentDocNameExists() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XWikiDocument doc = xwiki.getDocument(DEFAULT_DOCFULLNAME, getContext());\n        xwiki.saveDocument(doc, getContext());\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassFullName(), context);\n        Document docFromClass = xClassManager.getClassDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64600,"modified_method":"private void ptestGetClassDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassFullName(), getContext());\n        Document docFromClass = xClassManager.getClassDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCkeckDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(context));\n    }","id":64601,"modified_method":"public void testCkeckDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws XWikiException\n    {\n        this.context = new XWikiContext();\n\n        Mock mockXWiki = mock(XWiki.class, new Class[] {}, new Object[] {});\n        mockXWiki.stubs().method(\"getDocument\").will(new CustomStub(\"Implements XWiki.getDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String docFullName = (String) invocation.parameterValues.get(0);\n                XWikiDocument shallowDoc = new XWikiDocument();\n                shallowDoc.setFullName(docFullName);\n\n                if (documents.containsKey(shallowDoc.getFullName())) {\n                    return documents.get(shallowDoc.getFullName());\n                } else {\n                    return shallowDoc;\n                }\n            }\n        });\n        mockXWiki.stubs().method(\"saveDocument\").will(new CustomStub(\"Implements XWiki.saveDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                document.setNew(false);\n                documents.put(document.getFullName(), document);\n\n                return null;\n            }\n        });\n        mockXWiki.stubs().method(\"getClass\").will(new CustomStub(\"Implements XWiki.getClass\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String classFullName = (String) invocation.parameterValues.get(0);\n                XWikiContext context = (XWikiContext) invocation.parameterValues.get(1);\n\n                XWikiDocument doc = context.getWiki().getDocument(classFullName, context);\n\n                return doc.getxWikiClass();\n            }\n        });\n        mockXWiki.stubs().method(\"clearName\").will(new CustomStub(\"Implements XWiki.clearName\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                return invocation.parameterValues.get(0);\n            }\n        });\n\n        this.xwiki = (XWiki) mockXWiki.proxy();\n        this.context.setWiki(this.xwiki);\n    }","id":64602,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        Mock mockXWiki = mock(XWiki.class, new Class[] {}, new Object[] {});\n        mockXWiki.stubs().method(\"getDocument\").will(new CustomStub(\"Implements XWiki.getDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String docFullName = (String) invocation.parameterValues.get(0);\n                XWikiDocument shallowDoc = new XWikiDocument();\n                shallowDoc.setFullName(docFullName);\n\n                if (documents.containsKey(shallowDoc.getFullName())) {\n                    return documents.get(shallowDoc.getFullName());\n                } else {\n                    return shallowDoc;\n                }\n            }\n        });\n        mockXWiki.stubs().method(\"saveDocument\").will(new CustomStub(\"Implements XWiki.saveDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                document.setNew(false);\n                documents.put(document.getFullName(), document);\n\n                return null;\n            }\n        });\n        mockXWiki.stubs().method(\"getClass\").will(new CustomStub(\"Implements XWiki.getClass\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String classFullName = (String) invocation.parameterValues.get(0);\n                XWikiContext context = (XWikiContext) invocation.parameterValues.get(1);\n\n                XWikiDocument doc = context.getWiki().getDocument(classFullName, context);\n\n                return doc.getxWikiClass();\n            }\n        });\n        mockXWiki.stubs().method(\"clearName\").will(new CustomStub(\"Implements XWiki.clearName\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                return invocation.parameterValues.get(0);\n            }\n        });\n\n        this.xwiki = (XWiki) mockXWiki.proxy();\n        getContext().setWiki(this.xwiki);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_obj() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_obj, list);\n\n        assertEquals(WHERECLAUSE_obj, where);\n    }","id":64603,"modified_method":"public void testCreateWhereClause_obj() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_obj, list);\n\n        assertEquals(WHERECLAUSE_obj, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(DispatchXClassManager.getInstance(context));\n    }","id":64604,"modified_method":"public void testGetClassDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultFullNameDispatch() throws XWikiException\n    {\n        assertEquals(DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, DispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, context));\n    }","id":64605,"modified_method":"public void testGetItemDocumentDefaultFullNameDispatch() throws XWikiException\n    {\n        assertEquals(DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, DispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassTemplateDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(DispatchXClassManager.getInstance(context));\n    }","id":64606,"modified_method":"public void testGetClassTemplateDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassSheetDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassSheetFullName(), context);\n        Document docFromClass = xClassManager.getClassSheetDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64607,"modified_method":"private void ptestGetClassSheetDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassSheetFullName(), getContext());\n        Document docFromClass = xClassManager.getClassSheetDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testIsInstanceNoDispatch() throws XWikiException\n    {\n        assertTrue(NoDispatchXClassManager.getInstance(context).isInstance(\n            NoDispatchXClassManager.getInstance(context).newXObjectDocument(context).getDocumentApi()));\n        assertFalse(NoDispatchXClassManager.getInstance(context).isInstance(new XWikiDocument()));\n    }","id":64608,"modified_method":"public void testIsInstanceNoDispatch() throws XWikiException\n    {\n        assertTrue(NoDispatchXClassManager.getInstance(getContext()).isInstance(\n            NoDispatchXClassManager.getInstance(getContext()).newXObjectDocument(getContext()).getDocumentApi()));\n        assertFalse(NoDispatchXClassManager.getInstance(getContext()).isInstance(new XWikiDocument()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestCkeck(XClassManager<XObjectDocument> xclass) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xclass.getClassFullName(), context);\n\n        assertFalse(doc.isNew());\n\n        BaseClass baseclass = doc.getxWikiClass();\n\n        assertEquals(xclass.getClassFullName(), baseclass.getName());\n\n        PropertyInterface prop = baseclass.getField(FIELD_string);\n\n        assertNotNull(prop);\n\n        prop = baseclass.getField(FIELD_stringlist);\n\n        assertNotNull(prop);\n\n        // ///\n\n        XWikiDocument docSheet = xwiki.getDocument(xclass.getClassSheetFullName(), context);\n\n        assertFalse(docSheet.isNew());\n\n        // ///\n\n        XWikiDocument docTemplate = xwiki.getDocument(xclass.getClassTemplateFullName(), context);\n\n        assertFalse(docTemplate.isNew());\n\n        BaseObject baseobject = docTemplate.getObject(xclass.getClassFullName());\n\n        assertNotNull(baseobject);\n    }","id":64609,"modified_method":"private void ptestCkeck(XClassManager<XObjectDocument> xclass) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xclass.getClassFullName(), getContext());\n\n        assertFalse(doc.isNew());\n\n        BaseClass baseclass = doc.getxWikiClass();\n\n        assertEquals(xclass.getClassFullName(), baseclass.getName());\n\n        PropertyInterface prop = baseclass.getField(FIELD_string);\n\n        assertNotNull(prop);\n\n        prop = baseclass.getField(FIELD_stringlist);\n\n        assertNotNull(prop);\n\n        // ///\n\n        XWikiDocument docSheet = xwiki.getDocument(xclass.getClassSheetFullName(), getContext());\n\n        assertFalse(docSheet.isNew());\n\n        // ///\n\n        XWikiDocument docTemplate = xwiki.getDocument(xclass.getClassTemplateFullName(), getContext());\n\n        assertFalse(docTemplate.isNew());\n\n        BaseObject baseobject = docTemplate.getObject(xclass.getClassFullName());\n\n        assertNotNull(baseobject);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultNameDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, DispatchXClassManager.getInstance(context).getItemDocumentDefaultName(\n            DEFAULT_ITEM_NAME, context));\n    }","id":64610,"modified_method":"public void testGetItemDocumentDefaultNameDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, DispatchXClassManager.getInstance(getContext()).getItemDocumentDefaultName(\n            DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, NoDispatchXClassManager.getInstance(context).getItemDefaultName(\n            NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","id":64611,"modified_method":"public void testGetItemDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, NoDispatchXClassManager.getInstance(getContext()).getItemDefaultName(\n            NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassSheetDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(DispatchXClassManager.getInstance(context));\n    }","id":64612,"modified_method":"public void testGetClassSheetDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCkeckNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(context));\n    }","id":64613,"modified_method":"public void testCkeckNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_obj_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_obj_multi, list);\n\n        assertEquals(WHERECLAUSE_obj_multi, where);\n    }","id":64614,"modified_method":"public void testCreateWhereClause_obj_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_obj_multi, list);\n\n        assertEquals(WHERECLAUSE_obj_multi, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXClassManagerNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = NoDispatchXClassManager.getInstance(context);\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(NODISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(NODISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(NODISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(NODISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","id":64615,"modified_method":"public void testInitXClassManagerNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = NoDispatchXClassManager.getInstance(getContext());\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(NODISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(NODISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(NODISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(NODISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_doc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_doc, list);\n\n        assertEquals(WHERECLAUSE_doc, where);\n    }","id":64616,"modified_method":"public void testCreateWhereClause_doc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_doc, list);\n\n        assertEquals(WHERECLAUSE_doc, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, NoDispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultName(DEFAULT_ITEM_NAME, context));\n    }","id":64617,"modified_method":"public void testGetItemDocumentDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, NoDispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDefaultNameDisptach() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, DispatchXClassManager.getInstance(context).getItemDefaultName(\n            DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","id":64618,"modified_method":"public void testGetItemDefaultNameDisptach() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, DispatchXClassManager.getInstance(getContext()).getItemDefaultName(\n            DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_nothing() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n        String[][] fieldDescriptors = new String[][] {};\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(fieldDescriptors, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","id":64619,"modified_method":"public void testCreateWhereClause_nothing() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n        String[][] fieldDescriptors = new String[][] {};\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(fieldDescriptors, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXClassManagerDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = DispatchXClassManager.getInstance(context);\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(DISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(DISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(DISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(DISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(DISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(DISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","id":64620,"modified_method":"public void testInitXClassManagerDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = DispatchXClassManager.getInstance(getContext());\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(DISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(DISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(DISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(DISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(DISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(DISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassSheetDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64621,"modified_method":"public void testGetClassSheetDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultFullNameNoDispatch() throws XWikiException\n    {\n        assertEquals(NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, NoDispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, context));\n    }","id":64622,"modified_method":"public void testGetItemDocumentDefaultFullNameNoDispatch() throws XWikiException\n    {\n        assertEquals(NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, NoDispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_doc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_doc_multi, list);\n\n        assertEquals(WHERECLAUSE_doc_multi, where);\n    }","id":64623,"modified_method":"public void testCreateWhereClause_doc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_doc_multi, list);\n\n        assertEquals(WHERECLAUSE_doc_multi, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_objdoc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_objdoc, list);\n\n        assertEquals(WHERECLAUSE_objdoc, where);\n    }","id":64624,"modified_method":"public void testCreateWhereClause_objdoc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_objdoc, list);\n\n        assertEquals(WHERECLAUSE_objdoc, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64625,"modified_method":"public void testGetClassDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassTemplateDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64626,"modified_method":"public void testGetClassTemplateDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_objdoc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where =\n            DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_objdoc_multi, list);\n\n        assertEquals(WHERECLAUSE_objdoc_multi, where);\n    }","id":64627,"modified_method":"public void testCreateWhereClause_objdoc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where =\n            DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_objdoc_multi, list);\n\n        assertEquals(WHERECLAUSE_objdoc_multi, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testIsInstanceDispatch() throws XWikiException\n    {\n        assertTrue(DispatchXClassManager.getInstance(context).isInstance(\n            DispatchXClassManager.getInstance(context).newXObjectDocument(context).getDocumentApi()));\n        assertFalse(DispatchXClassManager.getInstance(context).isInstance(new XWikiDocument()));\n    }","id":64628,"modified_method":"public void testIsInstanceDispatch() throws XWikiException\n    {\n        assertTrue(DispatchXClassManager.getInstance(getContext()).isInstance(\n            DispatchXClassManager.getInstance(getContext()).newXObjectDocument(getContext()).getDocumentApi()));\n        assertFalse(DispatchXClassManager.getInstance(getContext()).isInstance(new XWikiDocument()));\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassTemplateDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassTemplateFullName(), context);\n        Document docFromClass = xClassManager.getClassTemplateDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64629,"modified_method":"private void ptestGetClassTemplateDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassTemplateFullName(), getContext());\n        Document docFromClass = xClassManager.getClassTemplateDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_null() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(null, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","id":64630,"modified_method":"public void testCreateWhereClause_null() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(null, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","commit_id":"5f99acf25b41994168faaf3bf4724b0ab12c9c5a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXObjectDocumentEmpty() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64631,"modified_method":"public void testInitXObjectDocumentEmpty() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXObjectDocumentDocNameExists() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XWikiDocument doc = xwiki.getDocument(DEFAULT_DOCFULLNAME, context);\n        xwiki.saveDocument(doc, context);\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64632,"modified_method":"public void testInitXObjectDocumentDocNameExists() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XWikiDocument doc = xwiki.getDocument(DEFAULT_DOCFULLNAME, getContext());\n        xwiki.saveDocument(doc, getContext());\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testMergeObject() throws XWikiException\n    {\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc1 = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        DefaultXObjectDocument sdoc2 = (DefaultXObjectDocument) sclass.newXObjectDocument(context);\n\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc1\");\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string2, \"value2sdoc1\");\n\n        sdoc2.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc2\");\n        sdoc2.setIntValue(TestAbstractXClassManagerTest.FIELD_int, 2);\n\n        sdoc1.mergeObject(sdoc2);\n\n        assertEquals(\"The field is not overwritten\", sdoc1.getStringValue(TestAbstractXClassManagerTest.FIELD_string),\n            sdoc2.getStringValue(TestAbstractXClassManagerTest.FIELD_string));\n        assertEquals(\"The field is removed\", \"value2sdoc1\", sdoc1\n            .getStringValue(TestAbstractXClassManagerTest.FIELD_string2));\n        assertEquals(\"The field is not added\", sdoc1.getIntValue(TestAbstractXClassManagerTest.FIELD_int), sdoc1\n            .getIntValue(TestAbstractXClassManagerTest.FIELD_int));\n    }","id":64633,"modified_method":"public void testMergeObject() throws XWikiException\n    {\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc1 = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        DefaultXObjectDocument sdoc2 = (DefaultXObjectDocument) sclass.newXObjectDocument(getContext());\n\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc1\");\n        sdoc1.setStringValue(TestAbstractXClassManagerTest.FIELD_string2, \"value2sdoc1\");\n\n        sdoc2.setStringValue(TestAbstractXClassManagerTest.FIELD_string, \"valuesdoc2\");\n        sdoc2.setIntValue(TestAbstractXClassManagerTest.FIELD_int, 2);\n\n        sdoc1.mergeObject(sdoc2);\n\n        assertEquals(\"The field is not overwritten\", sdoc1.getStringValue(TestAbstractXClassManagerTest.FIELD_string),\n            sdoc2.getStringValue(TestAbstractXClassManagerTest.FIELD_string));\n        assertEquals(\"The field is removed\", \"value2sdoc1\", sdoc1\n            .getStringValue(TestAbstractXClassManagerTest.FIELD_string2));\n        assertEquals(\"The field is not added\", sdoc1.getIntValue(TestAbstractXClassManagerTest.FIELD_int), sdoc1\n            .getIntValue(TestAbstractXClassManagerTest.FIELD_int));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXObjectDocumentDocName() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(context);\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, context);\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","id":64634,"modified_method":"public void testInitXObjectDocumentDocName() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager sclass = TestAbstractXClassManagerTest.DispatchXClassManager.getInstance(getContext());\n        DefaultXObjectDocument sdoc =\n            (DefaultXObjectDocument) sclass.newXObjectDocument(DEFAULT_DOCFULLNAME, 0, getContext());\n\n        assertNotNull(sdoc);\n        assertTrue(sdoc.isNew());\n\n        com.xpn.xwiki.api.Object obj = sdoc.getObject(sclass.getClassFullName());\n\n        assertNotNull(obj);\n        assertEquals(sdoc.getXClassManager(), sclass);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws XWikiException\n    {\n        this.context = new XWikiContext();\n        this.xwiki = new XWiki();\n        this.xwiki.setNotificationManager(new XWikiNotificationManager());\n        this.context.setWiki(this.xwiki);\n\n        // //////////////////////////////////////////////////\n        // XWikiHibernateStore\n\n        this.mockXWikiStore =\n            mock(XWikiHibernateStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {this.xwiki,\n            this.context});\n        this.mockXWikiStore.stubs().method(\"loadXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.loadXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument shallowDoc = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    if (documents.containsKey(shallowDoc.getFullName())) {\n                        return documents.get(shallowDoc.getFullName());\n                    } else {\n                        return shallowDoc;\n                    }\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"saveXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.saveXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    document.setNew(false);\n                    document.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n                    documents.put(document.getFullName(), document);\n\n                    return null;\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"getTranslationList\").will(returnValue(Collections.EMPTY_LIST));\n\n        this.mockXWikiVersioningStore =\n            mock(XWikiHibernateVersioningStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {\n            this.xwiki, this.context});\n        this.mockXWikiVersioningStore.stubs().method(\"getXWikiDocumentArchive\").will(returnValue(null));\n        this.mockXWikiVersioningStore.stubs().method(\"resetRCSArchive\").will(returnValue(null));\n\n        this.xwiki.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n        this.xwiki.setVersioningStore((XWikiVersioningStoreInterface) mockXWikiVersioningStore.proxy());\n\n        // ////////////////////////////////////////////////////////////////////////////////\n        // XWikiRightService\n\n        this.xwiki.setRightService(new XWikiRightService()\n        {\n            public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)\n                throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAdminRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiDocument doc, XWikiContext context)\n            {\n                return true;\n            }\n\n            public List listAllLevels(XWikiContext context) throws XWikiException\n            {\n                return Collections.EMPTY_LIST;\n            }\n        });\n    }","id":64635,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        \n        this.xwiki = new XWiki();\n        this.xwiki.setNotificationManager(new XWikiNotificationManager());\n        getContext().setWiki(this.xwiki);\n\n        // //////////////////////////////////////////////////\n        // XWikiHibernateStore\n\n        this.mockXWikiStore =\n            mock(XWikiHibernateStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {this.xwiki,\n            getContext()});\n        this.mockXWikiStore.stubs().method(\"loadXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.loadXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument shallowDoc = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    if (documents.containsKey(shallowDoc.getFullName())) {\n                        return documents.get(shallowDoc.getFullName());\n                    } else {\n                        return shallowDoc;\n                    }\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"saveXWikiDoc\").will(\n            new CustomStub(\"Implements XWikiStoreInterface.saveXWikiDoc\")\n            {\n                public Object invoke(Invocation invocation) throws Throwable\n                {\n                    XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                    document.setNew(false);\n                    document.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n                    documents.put(document.getFullName(), document);\n\n                    return null;\n                }\n            });\n        this.mockXWikiStore.stubs().method(\"getTranslationList\").will(returnValue(Collections.EMPTY_LIST));\n\n        this.mockXWikiVersioningStore =\n            mock(XWikiHibernateVersioningStore.class, new Class[] {XWiki.class, XWikiContext.class}, new Object[] {\n            this.xwiki, getContext()});\n        this.mockXWikiVersioningStore.stubs().method(\"getXWikiDocumentArchive\").will(returnValue(null));\n        this.mockXWikiVersioningStore.stubs().method(\"resetRCSArchive\").will(returnValue(null));\n\n        this.xwiki.setStore((XWikiStoreInterface) mockXWikiStore.proxy());\n        this.xwiki.setVersioningStore((XWikiVersioningStoreInterface) mockXWikiVersioningStore.proxy());\n\n        // ////////////////////////////////////////////////////////////////////////////////\n        // XWikiRightService\n\n        this.xwiki.setRightService(new XWikiRightService()\n        {\n            public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)\n                throws XWikiException\n            {\n                return true;\n            }\n\n            public boolean hasAdminRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiContext context)\n            {\n                return true;\n            }\n\n            public boolean hasProgrammingRights(XWikiDocument doc, XWikiContext context)\n            {\n                return true;\n            }\n\n            public List listAllLevels(XWikiContext context) throws XWikiException\n            {\n                return Collections.EMPTY_LIST;\n            }\n        });\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultNameDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, DispatchXClassManager.getInstance(context).getItemDocumentDefaultName(\n            DEFAULT_ITEM_NAME, context));\n    }","id":64636,"modified_method":"public void testGetItemDocumentDefaultNameDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, DispatchXClassManager.getInstance(getContext()).getItemDocumentDefaultName(\n            DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_nothing() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n        String[][] fieldDescriptors = new String[][] {};\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(fieldDescriptors, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","id":64637,"modified_method":"public void testCreateWhereClause_nothing() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n        String[][] fieldDescriptors = new String[][] {};\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(fieldDescriptors, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws XWikiException\n    {\n        this.context = new XWikiContext();\n\n        Mock mockXWiki = mock(XWiki.class, new Class[] {}, new Object[] {});\n        mockXWiki.stubs().method(\"getDocument\").will(new CustomStub(\"Implements XWiki.getDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String docFullName = (String) invocation.parameterValues.get(0);\n                XWikiDocument shallowDoc = new XWikiDocument();\n                shallowDoc.setFullName(docFullName);\n\n                if (documents.containsKey(shallowDoc.getFullName())) {\n                    return documents.get(shallowDoc.getFullName());\n                } else {\n                    return shallowDoc;\n                }\n            }\n        });\n        mockXWiki.stubs().method(\"saveDocument\").will(new CustomStub(\"Implements XWiki.saveDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                document.setNew(false);\n                documents.put(document.getFullName(), document);\n\n                return null;\n            }\n        });\n        mockXWiki.stubs().method(\"getClass\").will(new CustomStub(\"Implements XWiki.getClass\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String classFullName = (String) invocation.parameterValues.get(0);\n                XWikiContext context = (XWikiContext) invocation.parameterValues.get(1);\n\n                XWikiDocument doc = context.getWiki().getDocument(classFullName, context);\n\n                return doc.getxWikiClass();\n            }\n        });\n        mockXWiki.stubs().method(\"clearName\").will(new CustomStub(\"Implements XWiki.clearName\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                return invocation.parameterValues.get(0);\n            }\n        });\n\n        this.xwiki = (XWiki) mockXWiki.proxy();\n        this.context.setWiki(this.xwiki);\n    }","id":64638,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see junit.framework.TestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        Mock mockXWiki = mock(XWiki.class, new Class[] {}, new Object[] {});\n        mockXWiki.stubs().method(\"getDocument\").will(new CustomStub(\"Implements XWiki.getDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String docFullName = (String) invocation.parameterValues.get(0);\n                XWikiDocument shallowDoc = new XWikiDocument();\n                shallowDoc.setFullName(docFullName);\n\n                if (documents.containsKey(shallowDoc.getFullName())) {\n                    return documents.get(shallowDoc.getFullName());\n                } else {\n                    return shallowDoc;\n                }\n            }\n        });\n        mockXWiki.stubs().method(\"saveDocument\").will(new CustomStub(\"Implements XWiki.saveDocument\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                XWikiDocument document = (XWikiDocument) invocation.parameterValues.get(0);\n\n                document.setNew(false);\n                documents.put(document.getFullName(), document);\n\n                return null;\n            }\n        });\n        mockXWiki.stubs().method(\"getClass\").will(new CustomStub(\"Implements XWiki.getClass\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                String classFullName = (String) invocation.parameterValues.get(0);\n                XWikiContext context = (XWikiContext) invocation.parameterValues.get(1);\n\n                XWikiDocument doc = context.getWiki().getDocument(classFullName, context);\n\n                return doc.getxWikiClass();\n            }\n        });\n        mockXWiki.stubs().method(\"clearName\").will(new CustomStub(\"Implements XWiki.clearName\")\n        {\n            public Object invoke(Invocation invocation) throws Throwable\n            {\n                return invocation.parameterValues.get(0);\n            }\n        });\n\n        this.xwiki = (XWiki) mockXWiki.proxy();\n        getContext().setWiki(this.xwiki);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_objdoc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where =\n            DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_objdoc_multi, list);\n\n        assertEquals(WHERECLAUSE_objdoc_multi, where);\n    }","id":64639,"modified_method":"public void testCreateWhereClause_objdoc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where =\n            DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_objdoc_multi, list);\n\n        assertEquals(WHERECLAUSE_objdoc_multi, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultFullNameNoDispatch() throws XWikiException\n    {\n        assertEquals(NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, NoDispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, context));\n    }","id":64640,"modified_method":"public void testGetItemDocumentDefaultFullNameNoDispatch() throws XWikiException\n    {\n        assertEquals(NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, NoDispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_null() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(null, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","id":64641,"modified_method":"public void testCreateWhereClause_null() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(null, list);\n\n        assertEquals(WHERECLAUSE_null, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, NoDispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultName(DEFAULT_ITEM_NAME, context));\n    }","id":64642,"modified_method":"public void testGetItemDocumentDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEMDOCUMENT_NAME, NoDispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassFullName(), context);\n        Document docFromClass = xClassManager.getClassDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64643,"modified_method":"private void ptestGetClassDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassFullName(), getContext());\n        Document docFromClass = xClassManager.getClassDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, NoDispatchXClassManager.getInstance(context).getItemDefaultName(\n            NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","id":64644,"modified_method":"public void testGetItemDefaultNameNoDispatch() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, NoDispatchXClassManager.getInstance(getContext()).getItemDefaultName(\n            NODISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassSheetDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(DispatchXClassManager.getInstance(context));\n    }","id":64645,"modified_method":"public void testGetClassSheetDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_doc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_doc_multi, list);\n\n        assertEquals(WHERECLAUSE_doc_multi, where);\n    }","id":64646,"modified_method":"public void testCreateWhereClause_doc_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_doc_multi, list);\n\n        assertEquals(WHERECLAUSE_doc_multi, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassTemplateDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassTemplateFullName(), context);\n        Document docFromClass = xClassManager.getClassTemplateDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64647,"modified_method":"private void ptestGetClassTemplateDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassTemplateFullName(), getContext());\n        Document docFromClass = xClassManager.getClassTemplateDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_obj_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_obj_multi, list);\n\n        assertEquals(WHERECLAUSE_obj_multi, where);\n    }","id":64648,"modified_method":"public void testCreateWhereClause_obj_multi() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_obj_multi, list);\n\n        assertEquals(WHERECLAUSE_obj_multi, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestGetClassSheetDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassSheetFullName(), context);\n        Document docFromClass = xClassManager.getClassSheetDocument(context);\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","id":64649,"modified_method":"private void ptestGetClassSheetDocument(XClassManager<XObjectDocument> xClassManager) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xClassManager.getClassSheetFullName(), getContext());\n        Document docFromClass = xClassManager.getClassSheetDocument(getContext());\n\n        assertFalse(docFromClass.isNew());\n        assertEquals(doc.getFullName(), docFromClass.getFullName());\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDocumentDefaultFullNameDispatch() throws XWikiException\n    {\n        assertEquals(DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, DispatchXClassManager.getInstance(context)\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, context));\n    }","id":64650,"modified_method":"public void testGetItemDocumentDefaultFullNameDispatch() throws XWikiException\n    {\n        assertEquals(DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME, DispatchXClassManager.getInstance(getContext())\n            .getItemDocumentDefaultFullName(DEFAULT_ITEM_NAME, getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXClassManagerNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = NoDispatchXClassManager.getInstance(context);\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(NODISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(NODISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(NODISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(NODISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","id":64651,"modified_method":"public void testInitXClassManagerNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = NoDispatchXClassManager.getInstance(getContext());\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(NODISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(NODISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(NODISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(NODISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(NODISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCkeckDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(context));\n    }","id":64652,"modified_method":"public void testCkeckDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testIsInstanceNoDispatch() throws XWikiException\n    {\n        assertTrue(NoDispatchXClassManager.getInstance(context).isInstance(\n            NoDispatchXClassManager.getInstance(context).newXObjectDocument(context).getDocumentApi()));\n        assertFalse(NoDispatchXClassManager.getInstance(context).isInstance(new XWikiDocument()));\n    }","id":64653,"modified_method":"public void testIsInstanceNoDispatch() throws XWikiException\n    {\n        assertTrue(NoDispatchXClassManager.getInstance(getContext()).isInstance(\n            NoDispatchXClassManager.getInstance(getContext()).newXObjectDocument(getContext()).getDocumentApi()));\n        assertFalse(NoDispatchXClassManager.getInstance(getContext()).isInstance(new XWikiDocument()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_doc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_doc, list);\n\n        assertEquals(WHERECLAUSE_doc, where);\n    }","id":64654,"modified_method":"public void testCreateWhereClause_doc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_doc, list);\n\n        assertEquals(WHERECLAUSE_doc, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64655,"modified_method":"public void testGetClassDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void ptestCkeck(XClassManager<XObjectDocument> xclass) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xclass.getClassFullName(), context);\n\n        assertFalse(doc.isNew());\n\n        BaseClass baseclass = doc.getxWikiClass();\n\n        assertEquals(xclass.getClassFullName(), baseclass.getName());\n\n        PropertyInterface prop = baseclass.getField(FIELD_string);\n\n        assertNotNull(prop);\n\n        prop = baseclass.getField(FIELD_stringlist);\n\n        assertNotNull(prop);\n\n        // ///\n\n        XWikiDocument docSheet = xwiki.getDocument(xclass.getClassSheetFullName(), context);\n\n        assertFalse(docSheet.isNew());\n\n        // ///\n\n        XWikiDocument docTemplate = xwiki.getDocument(xclass.getClassTemplateFullName(), context);\n\n        assertFalse(docTemplate.isNew());\n\n        BaseObject baseobject = docTemplate.getObject(xclass.getClassFullName());\n\n        assertNotNull(baseobject);\n    }","id":64656,"modified_method":"private void ptestCkeck(XClassManager<XObjectDocument> xclass) throws XWikiException\n    {\n        XWikiDocument doc = xwiki.getDocument(xclass.getClassFullName(), getContext());\n\n        assertFalse(doc.isNew());\n\n        BaseClass baseclass = doc.getxWikiClass();\n\n        assertEquals(xclass.getClassFullName(), baseclass.getName());\n\n        PropertyInterface prop = baseclass.getField(FIELD_string);\n\n        assertNotNull(prop);\n\n        prop = baseclass.getField(FIELD_stringlist);\n\n        assertNotNull(prop);\n\n        // ///\n\n        XWikiDocument docSheet = xwiki.getDocument(xclass.getClassSheetFullName(), getContext());\n\n        assertFalse(docSheet.isNew());\n\n        // ///\n\n        XWikiDocument docTemplate = xwiki.getDocument(xclass.getClassTemplateFullName(), getContext());\n\n        assertFalse(docTemplate.isNew());\n\n        BaseObject baseobject = docTemplate.getObject(xclass.getClassFullName());\n\n        assertNotNull(baseobject);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetItemDefaultNameDisptach() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, DispatchXClassManager.getInstance(context).getItemDefaultName(\n            DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","id":64657,"modified_method":"public void testGetItemDefaultNameDisptach() throws XWikiException\n    {\n        assertEquals(DEFAULT_ITEM_NAME, DispatchXClassManager.getInstance(getContext()).getItemDefaultName(\n            DISPATCH_DEFAULT_ITEMDOCUMENT_FULLNAME));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassTemplateDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64658,"modified_method":"public void testGetClassTemplateDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testInitXClassManagerDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = DispatchXClassManager.getInstance(context);\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(DISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(DISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(DISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(DISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(DISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(DISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","id":64659,"modified_method":"public void testInitXClassManagerDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        XClassManager<XObjectDocument> xClassManager = DispatchXClassManager.getInstance(getContext());\n\n        assertEquals(CLASS_SPACE_PREFIX, xClassManager.getClassSpacePrefix());\n        assertEquals(CLASS_PREFIX, xClassManager.getClassPrefix());\n\n        assertEquals(CLASS_NAME, xClassManager.getClassName());\n        assertEquals(CLASSSHEET_NAME, xClassManager.getClassSheetName());\n        assertEquals(CLASSTEMPLATE_NAME, xClassManager.getClassTemplateName());\n\n        assertEquals(DISPATCH_CLASS_SPACE, xClassManager.getClassSpace());\n        assertEquals(DISPATCH_CLASS_FULLNAME, xClassManager.getClassFullName());\n        assertEquals(DISPATCH_CLASSSHEET_SPACE, xClassManager.getClassSheetSpace());\n        assertEquals(DISPATCH_CLASSSHEET_FULLNAME, xClassManager.getClassSheetFullName());\n        assertEquals(DISPATCH_CLASSTEMPLATE_SPACE, xClassManager.getClassTemplateSpace());\n        assertEquals(DISPATCH_CLASSTEMPLATE_FULLNAME, xClassManager.getClassTemplateFullName());\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCkeckNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(context));\n    }","id":64660,"modified_method":"public void testCkeckNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestCkeck(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_obj() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_obj, list);\n\n        assertEquals(WHERECLAUSE_obj, where);\n    }","id":64661,"modified_method":"public void testCreateWhereClause_obj() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_obj, list);\n\n        assertEquals(WHERECLAUSE_obj, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassSheetDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(NoDispatchXClassManager.getInstance(context));\n    }","id":64662,"modified_method":"public void testGetClassSheetDocumentNoDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassSheetDocument(NoDispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(DispatchXClassManager.getInstance(context));\n    }","id":64663,"modified_method":"public void testGetClassDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testGetClassTemplateDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(DispatchXClassManager.getInstance(context));\n    }","id":64664,"modified_method":"public void testGetClassTemplateDocumentDispatch() throws XWikiException\n    {\n        documents.clear();\n\n        // ///\n\n        ptestGetClassTemplateDocument(DispatchXClassManager.getInstance(getContext()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testCreateWhereClause_objdoc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(context).createWhereClause(WHERECLAUSE_PARAM_objdoc, list);\n\n        assertEquals(WHERECLAUSE_objdoc, where);\n    }","id":64665,"modified_method":"public void testCreateWhereClause_objdoc() throws XWikiException\n    {\n        List<Object> list = new ArrayList<Object>();\n\n        String where = DispatchXClassManager.getInstance(getContext()).createWhereClause(WHERECLAUSE_PARAM_objdoc, list);\n\n        assertEquals(WHERECLAUSE_objdoc, where);\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testIsInstanceDispatch() throws XWikiException\n    {\n        assertTrue(DispatchXClassManager.getInstance(context).isInstance(\n            DispatchXClassManager.getInstance(context).newXObjectDocument(context).getDocumentApi()));\n        assertFalse(DispatchXClassManager.getInstance(context).isInstance(new XWikiDocument()));\n    }","id":64666,"modified_method":"public void testIsInstanceDispatch() throws XWikiException\n    {\n        assertTrue(DispatchXClassManager.getInstance(getContext()).isInstance(\n            DispatchXClassManager.getInstance(getContext()).newXObjectDocument(getContext()).getDocumentApi()));\n        assertFalse(DispatchXClassManager.getInstance(getContext()).isInstance(new XWikiDocument()));\n    }","commit_id":"b6da4d919827e5d5d0c35b72f76a9aef1e39e251","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\tObject source = parserContext.extractSource(element);\n\n\t\t// Register SimpleUrlHandlerMapping for view controllers\n\t\tBeanDefinition handlerMappingDef = registerHandlerMapping(parserContext, source);\n\n\t\t// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n\t\tMvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n\n\t\t// Create view controller bean definition\n\t\tRootBeanDefinition viewControllerDef = new RootBeanDefinition(ParameterizableViewController.class);\n\t\tviewControllerDef.setSource(source);\n\t\tif (element.hasAttribute(\"view-name\")) {\n\t\t\tviewControllerDef.getPropertyValues().add(\"viewName\", element.getAttribute(\"view-name\"));\n\t\t}\n\t\tMap<String, BeanDefinition> urlMap;\n\t\tif (handlerMappingDef.getPropertyValues().contains(\"urlMap\")) {\n\t\t\turlMap = (Map<String, BeanDefinition>) handlerMappingDef.getPropertyValues().getPropertyValue(\"urlMap\").getValue();\n\t\t}\n\t\telse {\n\t\t\turlMap = new ManagedMap<String, BeanDefinition>();\n\t\t\thandlerMappingDef.getPropertyValues().add(\"urlMap\", urlMap);\n\t\t}\n\t\turlMap.put(element.getAttribute(\"path\"), viewControllerDef);\n\n\t\treturn null;\n\t}","id":64667,"modified_method":"@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\tObject source = parserContext.extractSource(element);\n\n\t\t// Register SimpleUrlHandlerMapping for view controllers\n\t\tBeanDefinition handlerMapping = registerHandlerMapping(parserContext, source);\n\n\t\t// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n\t\tMvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n\n\t\t// Create view controller bean definition\n\t\tRootBeanDefinition controller = new RootBeanDefinition(ParameterizableViewController.class);\n\t\tcontroller.setSource(source);\n\t\tif (element.hasAttribute(\"view-name\")) {\n\t\t\tcontroller.getPropertyValues().add(\"viewName\", element.getAttribute(\"view-name\"));\n\t\t}\n\t\tMap<String, BeanDefinition> urlMap;\n\t\tif (handlerMapping.getPropertyValues().contains(\"urlMap\")) {\n\t\t\turlMap = (Map<String, BeanDefinition>) handlerMapping.getPropertyValues().getPropertyValue(\"urlMap\").getValue();\n\t\t}\n\t\telse {\n\t\t\turlMap = new ManagedMap<String, BeanDefinition>();\n\t\t\thandlerMapping.getPropertyValues().add(\"urlMap\", urlMap);\n\t\t}\n\t\turlMap.put(element.getAttribute(\"path\"), controller);\n\n\t\treturn null;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private BeanDefinition registerHandlerMapping(ParserContext parserContext, Object source) {\n\t\tif (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_BEAN_NAME)) {\n\t\t\tRuntimeBeanReference pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(null, parserContext, source);\n\t\t\tRuntimeBeanReference pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(null, parserContext, source);\n\n\t\t\tRootBeanDefinition handlerMappingDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);\n\t\t\thandlerMappingDef.setSource(source);\n\t\t\thandlerMappingDef.getPropertyValues().add(\"order\", \"1\");\n\t\t\thandlerMappingDef.getPropertyValues().add(\"pathMatcher\", pathMatcherRef).add(\"urlPathHelper\", pathHelperRef);\n\t\t\thandlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tparserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);\n\t\t\tparserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));\n\t\t\treturn handlerMappingDef;\n\t\t}\n\t\telse {\n\t\t\treturn parserContext.getRegistry().getBeanDefinition(HANDLER_MAPPING_BEAN_NAME);\n\t\t}\n\n\t}","id":64668,"modified_method":"private BeanDefinition registerHandlerMapping(ParserContext context, Object source) {\n\t\tif (context.getRegistry().containsBeanDefinition(HANDLER_MAPPING_BEAN_NAME)) {\n\t\t\treturn context.getRegistry().getBeanDefinition(HANDLER_MAPPING_BEAN_NAME);\n\t\t}\n\t\tRootBeanDefinition beanDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);\n\t\tbeanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tcontext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, beanDef);\n\t\tcontext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_BEAN_NAME));\n\n\t\tbeanDef.setSource(source);\n\t\tbeanDef.getPropertyValues().add(\"order\", \"1\");\n\t\tbeanDef.getPropertyValues().add(\"pathMatcher\", MvcNamespaceUtils.registerPathMatcher(null, context, source));\n\t\tbeanDef.getPropertyValues().add(\"urlPathHelper\", MvcNamespaceUtils.registerUrlPathHelper(null, context, source));\n\n\t\treturn beanDef;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Sets the view name to use for this view controller. This field is optional. If not specified the\n\t * view controller will return a {@code null} view name, which will be resolved through the configured\n\t * {@link RequestToViewNameTranslator}. By default that means \"/foo/bar\" would resolve to \"foo/bar\".\n\t */\n\tpublic void setViewName(String viewName) {\n\t\tthis.viewName = viewName;\n\t}","id":64669,"modified_method":"/**\n\t * Set the view name to return.\n\t *\n\t * <p>If not specified, the view controller returns {@code null} as the view\n\t * name in which case the configured {@link RequestToViewNameTranslator}\n\t * selects the view. In effect {@code DefaultRequestToViewNameTranslator}\n\t * translates \"/foo/bar\" to \"foo/bar\".\n\t *\n\t * @see org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n\t */\n\tpublic void setViewName(String viewName) {\n\t\tthis.viewName = viewName;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Returns the view controllers.\n\t */\n\tprotected Object getViewController() {\n\t\tParameterizableViewController controller = new ParameterizableViewController();\n\t\tcontroller.setViewName(viewName);\n\t\treturn controller;\n\t}","id":64670,"modified_method":"protected Object getViewController() {\n\t\tParameterizableViewController controller = new ParameterizableViewController();\n\t\tcontroller.setViewName(this.viewName);\n\t\treturn controller;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Creates a {@link ViewControllerRegistration} with the given URL path. When a request matches\n\t * to the given URL path this view controller will process it.\n\t */\n\tpublic ViewControllerRegistration(String urlPath) {\n\t\tAssert.notNull(urlPath, \"A URL path is required to create a view controller.\");\n\t\tthis.urlPath = urlPath;\n\t}","id":64671,"modified_method":"/**\n\t * Creates a registration for the given URL path (or path pattern).\n\t */\n\tpublic ViewControllerRegistration(String urlPath) {\n\t\tAssert.notNull(urlPath, \"'urlPath' is required.\");\n\t\tthis.urlPath = urlPath;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Returns the URL path for the view controller.\n\t */\n\tprotected String getUrlPath() {\n\t\treturn urlPath;\n\t}","id":64672,"modified_method":"protected String getUrlPath() {\n\t\treturn this.urlPath;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public ViewControllerRegistration addViewController(String urlPath) {\n\t\tViewControllerRegistration registration = new ViewControllerRegistration(urlPath);\n\t\tregistrations.add(registration);\n\t\treturn registration;\n\t}","id":64673,"modified_method":"/**\n\t * Register a view controller mapped to the given URL path or URL path pattern.\n\t */\n\tpublic ViewControllerRegistration addViewController(String urlPath) {\n\t\tViewControllerRegistration registration = new ViewControllerRegistration(urlPath);\n\t\tthis.registrations.add(registration);\n\t\treturn registration;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Returns a handler mapping with the mapped ViewControllers; or {@code null} in case of no registrations.\n\t */\n\tprotected AbstractHandlerMapping getHandlerMapping() {\n\t\tif (registrations.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<String, Object> urlMap = new LinkedHashMap<String, Object>();\n\t\tfor (ViewControllerRegistration registration : registrations) {\n\t\t\turlMap.put(registration.getUrlPath(), registration.getViewController());\n\t\t}\n\n\t\tSimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();\n\t\thandlerMapping.setOrder(order);\n\t\thandlerMapping.setUrlMap(urlMap);\n\t\treturn handlerMapping;\n\t}","id":64674,"modified_method":"/**\n\t * Return the {@code HandlerMapping} that contains the registered view\n\t * controller mappings, or {@code null} for no registrations.\n\t */\n\tprotected AbstractHandlerMapping getHandlerMapping() {\n\t\tif (this.registrations.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> urlMap = new LinkedHashMap<String, Object>();\n\t\tfor (ViewControllerRegistration registration : this.registrations) {\n\t\t\turlMap.put(registration.getUrlPath(), registration.getViewController());\n\t\t}\n\t\tSimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();\n\t\thandlerMapping.setOrder(this.order);\n\t\thandlerMapping.setUrlMap(urlMap);\n\t\treturn handlerMapping;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Specify the order to use for ViewControllers mappings relative to other {@link HandlerMapping}s\n\t * configured in the Spring MVC application context. The default value for view controllers is 1,\n\t * which is 1 higher than the value used for annotated controllers.\n\t */\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}","id":64675,"modified_method":"/**\n\t * Specify the order to use for the {@code HandlerMapping} used to map view\n\t * controllers relative to other handler mappings configured in Spring MVC.\n\t * <p>By default this is set to 1, i.e. right after annotated controllers,\n\t * which are ordered at 0.\n\t */\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void addViewControllerWithViewName() {\n\t\tregistry.addViewController(\"/path\").setViewName(\"viewName\");\n\t\tMap<String, ?> urlMap = getHandlerMapping().getUrlMap();\n\t\tParameterizableViewController controller = (ParameterizableViewController) urlMap.get(\"/path\");\n\t\tassertNotNull(controller);\n\t\tassertEquals(\"viewName\", controller.getViewName());\n\t}","id":64676,"modified_method":"@Test\n\tpublic void addViewControllerWithDefaultViewName() {\n\t\tthis.registry.addViewController(\"/path\");\n\t\tMap<String, ?> urlMap = getHandlerMapping().getUrlMap();\n\t\tParameterizableViewController controller = (ParameterizableViewController) urlMap.get(\"/path\");\n\t\tassertNotNull(controller);\n\t\tassertNull(controller.getViewName());\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void noViewControllers() throws Exception {\n\t\tassertNull(registry.getHandlerMapping());\n\t}","id":64677,"modified_method":"@Test\n\tpublic void noViewControllers() throws Exception {\n\t\tassertNull(this.registry.getHandlerMapping());\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void order() {\n\t\tregistry.addViewController(\"/path\");\n\t\tSimpleUrlHandlerMapping handlerMapping = getHandlerMapping();\n\t\tassertEquals(1, handlerMapping.getOrder());\n\n\t\tregistry.setOrder(2);\n\t\thandlerMapping = getHandlerMapping();\n\t\tassertEquals(2, handlerMapping.getOrder());\n\t}","id":64678,"modified_method":"@Test\n\tpublic void order() {\n\t\tthis.registry.addViewController(\"/path\");\n\t\tSimpleUrlHandlerMapping handlerMapping = getHandlerMapping();\n\t\tassertEquals(1, handlerMapping.getOrder());\n\n\t\tthis.registry.setOrder(2);\n\t\thandlerMapping = getHandlerMapping();\n\t\tassertEquals(2, handlerMapping.getOrder());\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private SimpleUrlHandlerMapping getHandlerMapping() {\n\t\treturn (SimpleUrlHandlerMapping) registry.getHandlerMapping();\n\t}","id":64679,"modified_method":"private SimpleUrlHandlerMapping getHandlerMapping() {\n\t\treturn (SimpleUrlHandlerMapping) this.registry.getHandlerMapping();\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Before\n\tpublic void setUp() {\n\t\tregistry = new ViewControllerRegistry();\n\t}","id":64680,"modified_method":"@Before\n\tpublic void setUp() {\n\t\tthis.registry = new ViewControllerRegistry();\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void addViewController() {\n\t\tregistry.addViewController(\"/path\");\n\t\tMap<String, ?> urlMap = getHandlerMapping().getUrlMap();\n\t\tParameterizableViewController controller = (ParameterizableViewController) urlMap.get(\"/path\");\n\t\tassertNotNull(controller);\n\t\tassertNull(controller.getViewName());\n\t}","id":64681,"modified_method":"@Test\n\tpublic void addViewController() {\n\t\tthis.registry.addViewController(\"/path\").setViewName(\"viewName\");\n\t\tMap<String, ?> urlMap = getHandlerMapping().getUrlMap();\n\t\tParameterizableViewController controller = (ParameterizableViewController) urlMap.get(\"/path\");\n\t\tassertNotNull(controller);\n\t\tassertEquals(\"viewName\", controller.getViewName());\n\t}","commit_id":"7f7fd7d3110c664a255e5ddf52899205d64b68a5","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public final AnnotationMetadata getMetadata() {\n\t\t return this.annotationMetadata;\n\t}","id":64682,"modified_method":"public final AnnotationMetadata getMetadata() {\n\t\t return this.metadata;\n\t}","commit_id":"e81df2ef3e6b2359de1970f2b0b5df0075abc554","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Create a new AnnotatedGenericBeanDefinition for the given bean class.\n\t * @param beanClass the loaded bean class\n\t */\n\tpublic AnnotatedGenericBeanDefinition(Class beanClass) {\n\t\tsetBeanClass(beanClass);\n\t\tthis.annotationMetadata = new StandardAnnotationMetadata(beanClass, true);\n\t}","id":64683,"modified_method":"/**\n\t * Create a new AnnotatedGenericBeanDefinition for the given bean class.\n\t * @param beanClass the loaded bean class\n\t */\n\tpublic AnnotatedGenericBeanDefinition(Class<?> beanClass) {\n\t\tsetBeanClass(beanClass);\n\t\tthis.metadata = new StandardAnnotationMetadata(beanClass, true);\n\t}","commit_id":"e81df2ef3e6b2359de1970f2b0b5df0075abc554","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Register the {@link Configuration} class itself as a bean definition.\n\t */\n\tprivate void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass) {\n\t\tif (!configClass.isImported()) {\n\t\t\treturn;\n\t\t}\n\n\t\tBeanDefinition configBeanDef = new GenericBeanDefinition();\n\t\tString className = configClass.getMetadata().getClassName();\n\t\tconfigBeanDef.setBeanClassName(className);\n\t\tMetadataReader reader;\n\t\ttry {\n\t\t\treader = this.metadataReaderFactory.getMetadataReader(className);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Could not create MetadataReader for class \" + className);\n\t\t}\n\t\tif (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {\n\t\t\tMap<String, Object> configAttributes =\n\t\t\t\t\treader.getAnnotationMetadata().getAnnotationAttributes(Configuration.class.getName());\n\n\t\t\t// has the 'value' attribute of @Configuration been set?\n\t\t\tString configBeanName = (String) configAttributes.get(\"value\");\n\t\t\tif (StringUtils.hasText(configBeanName)) {\n\t\t\t\t// yes -> register the configuration class bean with this name\n\t\t\t\tthis.registry.registerBeanDefinition(configBeanName, configBeanDef);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// no -> register the configuration class bean with a generated name\n\t\t\t\tconfigBeanName = BeanDefinitionReaderUtils.registerWithGeneratedName((AbstractBeanDefinition)configBeanDef, this.registry);\n\t\t\t}\n\t\t\tconfigClass.setBeanName(configBeanName);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(String.format(\"Registered bean definition for imported @Configuration class %s\", configBeanName));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tAnnotationMetadata metadata = reader.getAnnotationMetadata();\n\t\t\tthis.problemReporter.error(\n\t\t\t\t\tnew InvalidConfigurationImportProblem(className, reader.getResource(), metadata));\n\t\t}\n\t}","id":64684,"modified_method":"/**\n\t * Register the {@link Configuration} class itself as a bean definition.\n\t */\n\tprivate void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass) {\n\t\tif (!configClass.isImported()) {\n\t\t\treturn;\n\t\t}\n\n\t\tAnnotationMetadata metadata = configClass.getMetadata();\n\t\tBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);\n\t\tString className = metadata.getClassName();\n\t\tconfigBeanDef.setBeanClassName(className);\n\t\tif (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {\n\t\t\tString configBeanName = this.beanNameGenerator.generateBeanName(configBeanDef, this.registry);\n\t\t\tthis.registry.registerBeanDefinition(configBeanName, configBeanDef);\n\t\t\tconfigClass.setBeanName(configBeanName);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(String.format(\"Registered bean definition for imported @Configuration class %s\", configBeanName));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.problemReporter.error(\n\t\t\t\t\tnew InvalidConfigurationImportProblem(className, configClass.getResource(), metadata));\n\t\t}\n\t}","commit_id":"e81df2ef3e6b2359de1970f2b0b5df0075abc554","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override public ModelMetricsListSchemaV3 fillFromImpl(ModelMetricsList mml) {\n      // TODO: this is failing in PojoUtils with an IllegalAccessException.  Why?  Different class loaders?\n      // PojoUtils.copyProperties(this, m, PojoUtils.FieldNaming.CONSISTENT);\n\n      // Shouldn't need to do this manually. . .\n      this.model = (mml._model == null ? null : new KeyV3.ModelKeyV3(mml._model._key));\n      this.frame = (mml._frame == null ? null : new KeyV3.FrameKeyV3(mml._frame._key));\n      this.predictions_frame = (mml._predictions_name == null ? null : new KeyV3.FrameKeyV3(Key.make(mml._predictions_name)));\n      this.reconstruction_error = mml._reconstruction_error;\n      this.deep_features_hidden_layer = mml._deep_features_hidden_layer;\n\n      if (null != mml._model_metrics) {\n        this.model_metrics = new ModelMetricsBase[mml._model_metrics.length];\n        for( int i=0; i<model_metrics.length; i++ ) {\n          ModelMetrics mm = mml._model_metrics[i];\n          ModelMetricsBase schema = null;\n          try {\n            schema = (ModelMetricsBase)Schema.schema(3, mm.getClass());\n          }\n          catch (H2ONotFoundArgumentException e) {\n            schema = (ModelMetricsBase)Schema.schema(Schema.getExperimentalVersion(), mm.getClass());\n          }\n          this.model_metrics[i] = schema.fillFromImpl(mm);\n        }\n      } else {\n        this.model_metrics = new ModelMetricsBase[0];\n      }\n      return this;\n    }","id":64685,"modified_method":"@Override public ModelMetricsListSchemaV3 fillFromImpl(ModelMetricsList mml) {\n      // TODO: this is failing in PojoUtils with an IllegalAccessException.  Why?  Different class loaders?\n      // PojoUtils.copyProperties(this, m, PojoUtils.FieldNaming.CONSISTENT);\n\n      // Shouldn't need to do this manually. . .\n      this.model = (mml._model == null ? null : new KeyV3.ModelKeyV3(mml._model._key));\n      this.frame = (mml._frame == null ? null : new KeyV3.FrameKeyV3(mml._frame._key));\n      this.predictions_frame = (mml._predictions_name == null ? null : new KeyV3.FrameKeyV3(Key.make(mml._predictions_name)));\n      this.reconstruction_error = mml._reconstruction_error;\n      this.deep_features_hidden_layer = mml._deep_features_hidden_layer;\n\n      if (null != mml._model_metrics) {\n        this.model_metrics = new ModelMetricsBase[mml._model_metrics.length];\n        for( int i=0; i<model_metrics.length; i++ ) {\n          ModelMetrics mm = mml._model_metrics[i];\n          try {\n            this.model_metrics[i] = (ModelMetricsBase)Schema.schema(3, mm.getClass()).fillFromImpl(mm);\n          }\n          catch (H2ONotFoundArgumentException e) {\n            this.model_metrics[i] = (ModelMetricsBase)Schema.schema(Schema.getExperimentalVersion(), mm.getClass()).fillFromImpl(mm);\n          }\n        }\n      } else {\n        this.model_metrics = new ModelMetricsBase[0];\n      }\n      return this;\n    }","commit_id":"178ec138bf2b52da7f57fa3476e9c0bc86406042","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public ModelMetricsBase fillFromImpl(ModelMetrics modelMetrics) {\n    // If we're copying in a Model we need a ModelSchema of the right class to fill into.\n    Model m = modelMetrics.model();\n    if( m != null ) {\n      this.model = new ModelKeyV1(m._key);\n      this.model_category = m._output.getModelCategory();\n      this.model_checksum = m.checksum();\n    }\n\n    // If we're copying in a Frame we need a Frame Schema of the right class to fill into.\n    Frame f = modelMetrics.frame();\n    if (null != f) { //true == f.getClass().getSuperclass().getGenericSuperclass() instanceof ParameterizedType\n      this.frame = new FrameKeyV1(f._key);\n      this.frame_checksum = f.checksum();\n    }\n\n    // super.fillFromImpl(modelMetrics);\n\n    if (null != modelMetrics._aucdata)\n      this.auc = (AUCBase)Schema.schema(this.getSchemaVersion(), modelMetrics._aucdata);\n\n    if (null != modelMetrics._cm)\n      this.cm = (ConfusionMatrixBase)Schema.schema(this.getSchemaVersion(), modelMetrics._cm);\n\n    return this;\n  }","id":64686,"modified_method":"@Override public ModelMetricsBase fillFromImpl(ModelMetrics modelMetrics) {\n    // If we're copying in a Model we need a ModelSchema of the right class to fill into.\n    Model m = modelMetrics.model();\n    if( m != null ) {\n      this.model = new ModelKeyV1(m._key);\n      this.model_category = m._output.getModelCategory();\n      this.model_checksum = m.checksum();\n    }\n\n    // If we're copying in a Frame we need a Frame Schema of the right class to fill into.\n    Frame f = modelMetrics.frame();\n    if (null != f) { //true == f.getClass().getSuperclass().getGenericSuperclass() instanceof ParameterizedType\n      this.frame = new FrameKeyV1(f._key);\n      this.frame_checksum = f.checksum();\n    }\n\n    // super.fillFromImpl(modelMetrics);\n\n    if (null != modelMetrics._aucdata)\n      this.auc = (AUCBase)Schema.schema(this.getSchemaVersion(), modelMetrics._aucdata).fillFromImpl(modelMetrics._aucdata);\n\n    if (null != modelMetrics._cm)\n      this.cm = (ConfusionMatrixBase)Schema.schema(this.getSchemaVersion(), modelMetrics._cm).fillFromImpl(modelMetrics._cm);\n\n    return this;\n  }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public ModelMetricsHandler.ModelMetricsList fillImpl(ModelMetricsList mml) {\n      if (null != model) {\n        Value v = DKV.get(this.model);\n        if (null == v)\n          throw new IllegalArgumentException(\"Model key not found: \" + model);\n        mml.model = v.get();\n      }\n      if (null != frame) {\n        Value v = DKV.get(this.frame);\n        if (null == v)\n          throw new IllegalArgumentException(\"Frame key not found: \" + frame);\n        mml.frame = v.get();\n      }\n\n      if (null != model_metrics) {\n        mml.model_metrics = new ModelMetrics[model_metrics.length];\n\n        int i = 0;\n        for (ModelMetricsBase mmb : this.model_metrics) {\n          mml.model_metrics[i++] = mmb.createImpl();\n        }\n      }\n      return mml;\n    }","id":64687,"modified_method":"@Override public ModelMetricsHandler.ModelMetricsList fillImpl(ModelMetricsList mml) {\n      mml._model = DKV.getGet(this.model);\n      mml._frame = DKV.getGet(this.frame);\n      if (null != model_metrics) {\n        mml._model_metrics = new ModelMetrics[model_metrics.length];\n        for( int i=0; i<model_metrics.length; i++ )\n          mml._model_metrics[i++] = model_metrics[i].createImpl();\n      }\n      return mml;\n    }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n     * Return all the models.\n     */\n    public Schema list(int version, ModelMetricsList m) {\n      m.model_metrics = m.fetch();\n      return this.schema(version).fillFromImpl(m);\n    }","id":64688,"modified_method":"/** Return all the models matching the model&frame filters */\n    public Schema list(int version, ModelMetricsList m) { \n      return this.schema(version).fillFromImpl(m.fetch());\n    }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public ModelMetricsListSchemaV3 fillFromImpl(ModelMetricsList mml) {\n      // TODO: this is failing in PojoUtils with an IllegalAccessException.  Why?  Different class loaders?\n      // PojoUtils.copyProperties(this, m, PojoUtils.FieldNaming.CONSISTENT);\n\n      // Shouldn't need to do this manually. . .\n      this.model = (null == mml.model ? null : mml.model._key.toString());\n      this.frame = (null == mml.frame ? null : mml.frame._key.toString());\n\n      if (null != mml.model_metrics) {\n        this.model_metrics = new ModelMetricsBase[mml.model_metrics.length];\n\n        int i = 0;\n        for (ModelMetrics mm : mml.model_metrics) {\n          this.model_metrics[i++] = mm.schema().fillFromImpl(mm);\n        }\n      } else {\n        this.model_metrics = new ModelMetricsBase[0];\n      }\n      return this;\n    }","id":64689,"modified_method":"@Override public ModelMetricsListSchemaV3 fillFromImpl(ModelMetricsList mml) {\n      // TODO: this is failing in PojoUtils with an IllegalAccessException.  Why?  Different class loaders?\n      // PojoUtils.copyProperties(this, m, PojoUtils.FieldNaming.CONSISTENT);\n\n      // Shouldn't need to do this manually. . .\n      this.model = (null == mml._model ? null : mml._model._key.toString());\n      this.frame = (null == mml._frame ? null : mml._frame._key.toString());\n\n      if (null != mml._model_metrics) {\n        this.model_metrics = new ModelMetricsBase[mml._model_metrics.length];\n        for( int i=0; i<model_metrics.length; i++ ) {\n          ModelMetrics mm = mml._model_metrics[i];\n          this.model_metrics[i] = mm.schema().fillFromImpl(mm);\n        }\n      } else {\n        this.model_metrics = new ModelMetricsBase[0];\n      }\n      return this;\n    }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Score a frame with the given model and return just the metrics.\n   */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 score(int version, ModelMetricsListSchemaV3 s) {\n    // NOTE: ModelMetrics are now always being created by model.score. . .\n    ModelMetricsList parms = s.createAndFillImpl();\n    ModelMetrics metrics = ModelMetrics.getFromDKV(parms.model, parms.frame);\n\n    if (null != metrics) {\n      Log.debug(\"using ModelMetrics from the cache. . .\");\n      return this.fetch(version, s);\n    }\n    Log.debug(\"Cache miss: computing ModelMetrics. . .\");\n    parms.model.score(parms.frame); // throw away predictions\n    ModelMetricsListSchemaV3 mm = this.fetch(version, s);\n\n    // TODO: for now only binary predictors write an MM object.\n    // For the others cons one up here to return the predictions frame.\n    if (null == mm)\n      mm = new ModelMetricsListSchemaV3();\n\n    if (null == mm.model_metrics || 0 == mm.model_metrics.length) {\n      mm.model_metrics = new ModelMetricsV3[1];\n      mm.model_metrics[0] = new ModelMetricsV3();\n    }\n\n    return mm;\n  }","id":64690,"modified_method":"/**\n   * Score a frame with the given model and return just the metrics.\n   */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 score(int version, ModelMetricsListSchemaV3 s) {\n    // NOTE: ModelMetrics are now always being created by model.score. . .\n    ModelMetricsList parms = s.createAndFillImpl();\n    ModelMetrics metrics = ModelMetrics.getFromDKV(parms._model, parms._frame);\n\n    if (null != metrics) {\n      Log.debug(\"using ModelMetrics from the cache. . .\");\n      return this.fetch(version, s);\n    }\n    Log.debug(\"Cache miss: computing ModelMetrics. . .\");\n    parms._model.score(parms._frame); // throw away predictions\n    ModelMetricsListSchemaV3 mm = this.fetch(version, s);\n\n    // TODO: for now only binary predictors write an MM object.\n    // For the others cons one up here to return the predictions frame.\n    if (null == mm)\n      mm = new ModelMetricsListSchemaV3();\n\n    if (null == mm.model_metrics || 0 == mm.model_metrics.length) {\n      mm.model_metrics = new ModelMetricsV3[1];\n      mm.model_metrics[0] = new ModelMetricsV3();\n    }\n\n    return mm;\n  }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** Return a single ModelMetrics. */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 fetch(int version, ModelMetricsListSchemaV3 s) {\n    ModelMetricsList m = s.createAndFillImpl();\n    m.model_metrics = m.fetch();\n    s.fillFromImpl(m);\n    return s;\n  }","id":64691,"modified_method":"/** Return a single ModelMetrics. */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 fetch(int version, ModelMetricsListSchemaV3 s) {\n    ModelMetricsList m = s.createAndFillImpl();\n    s.fillFromImpl(m.fetch());\n    return s;\n  }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Score a frame with the given model and return the metrics AND the prediction frame.\n   */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 predict(int version, ModelMetricsListSchemaV3 s) {\n    // No caching for predict()\n    ModelMetricsList parms = s.createAndFillImpl();\n    Frame predictions = parms.model.score(parms.frame);\n    ModelMetricsListSchemaV3 mm = this.fetch(version, s);\n\n    // TODO: for now only binary predictors write an MM object.\n    // For the others cons one up here to return the predictions frame.\n    if (null == mm)\n      mm = new ModelMetricsListSchemaV3();\n\n    if (null == mm.model_metrics || 0 == mm.model_metrics.length) {\n      mm.model_metrics = new ModelMetricsV3[1];\n      mm.model_metrics[0] = new ModelMetricsV3();\n    }\n\n    Frame persisted = new Frame(Key.make(\"predictions_\" + Key.rand()), predictions.names(), predictions.vecs());\n    DKV.put(persisted);\n    mm.model_metrics[0].predictions = new FrameV2(persisted, 0, 100); // TODO: Should call schema(version)\n    return mm;\n  }","id":64692,"modified_method":"/**\n   * Score a frame with the given model and return the metrics AND the prediction frame.\n   */\n  @SuppressWarnings(\"unused\") // called through reflection by RequestServer\n  public ModelMetricsListSchemaV3 predict(int version, ModelMetricsListSchemaV3 s) {\n    // No caching for predict()\n    ModelMetricsList parms = s.createAndFillImpl();\n    Frame predictions = parms._model.score(parms._frame);\n    ModelMetricsListSchemaV3 mm = this.fetch(version, s);\n\n    // TODO: for now only binary predictors write an MM object.\n    // For the others cons one up here to return the predictions frame.\n    if (null == mm)\n      mm = new ModelMetricsListSchemaV3();\n\n    if (null == mm.model_metrics || 0 == mm.model_metrics.length) {\n      mm.model_metrics = new ModelMetricsV3[1];\n      mm.model_metrics[0] = new ModelMetricsV3();\n    }\n\n    Frame persisted = new Frame(Key.make(\"predictions_\" + Key.rand()), predictions.names(), predictions.vecs());\n    DKV.put(persisted);\n    mm.model_metrics[0].predictions = new FrameV2(persisted, 0, 100); // TODO: Should call schema(version)\n    return mm;\n  }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public ModelMetrics[] fetch() {\n      final Key[] modelMetricsKeys = KeySnapshot.globalSnapshot().filter(new KeySnapshot.KVFilter() {\n        @Override\n        public boolean filter(KeySnapshot.KeyInfo k) {\n          if (!Value.isSubclassOf(k._type, ModelMetrics.class))\n            return false;\n          if (null == model && null == frame)\n            return true;\n\n          Value mmv = DKV.get(k._key);\n          if (null == mmv)\n            throw H2O.fail(\"Failed to find ModelMetrics object for which we have a key: \" + k._key.toString());\n          if (\"water.ModelMetrics\".equals(mmv.className()))\n            throw H2O.fail(\"ModelMetrics key points to a non-ModelMetrics object in the DKV: \" + k._key.toString() + \" has class: \" + mmv.className());\n\n          ModelMetrics mm = mmv.get();\n          if (null == mm)\n            throw H2O.fail(\"Failed to find ModelMetrics object for which we have a key: \" + k._key.toString());\n\n          // If we're filtering by model filter by Model.  :-)\n          if (model != null) {\n            // TODO: support old model versions\n            Value v = DKV.get(model._key);\n            if (null == v)\n              return false; // Warn that the model is gone?  TODO: allow fetch of metrics for deleted Frames and Models.\n\n            if (!v.isModel() || !mm.isForModel((Model) v.get())) return false;\n          }\n\n          // If we're filtering by frame filter by Frame.  :-)\n          if (frame != null) {\n            // TODO: support old frame versions\n            Value v = DKV.get(frame._key);\n            if (null == v)\n              return false; // Warn that the frame is gone?  TODO: allow fetch of metrics for deleted Frames and Models.\n\n            if (!v.isFrame() || !mm.isForFrame((Frame) v.get())) return false;\n          }\n\n          return true;\n        }\n      }).keys();\n\n      ModelMetrics[] model_metrics_list = new ModelMetrics[modelMetricsKeys.length];\n      for (int i = 0; i < modelMetricsKeys.length; i++) {\n        Key key = modelMetricsKeys[i];\n        Value v = DKV.get(key);\n        if (null == v) {\n          Log.warn(\"ModelMetrics key not found in DKV: \" + key.toString());\n          continue;\n        }\n        if (!ModelMetrics.class.getCanonicalName().equals(v.className())) {\n          Log.warn(\"ModelMetrics key: \" + key.toString() + \" points to a value of some other class: \" + v.className());\n          continue;\n        }\n\n        ModelMetrics model_metrics = v.get();\n        model_metrics_list[i] = model_metrics;\n      }\n\n      return model_metrics_list;\n    }","id":64693,"modified_method":"ModelMetricsList fetch() {\n      final Key[] modelMetricsKeys = KeySnapshot.globalSnapshot().filter(new KeySnapshot.KVFilter() {\n        @Override public boolean filter(KeySnapshot.KeyInfo k) {\n          try {\n            if( !Value.isSubclassOf(k._type, ModelMetrics.class) ) return false; // Fast-path cutout\n            ModelMetrics mm = DKV.getGet(k._key);\n            // If we're filtering by model filter by Model.  :-)\n            if( _model != null && !mm.isForModel((Model)DKV.getGet(_model._key)) ) return false;\n            // If we're filtering by frame filter by Frame.  :-)\n            if( _frame != null && !mm.isForFrame((Frame)DKV.getGet(_frame._key)) ) return false;\n          } catch( NullPointerException | ClassCastException ex ) {\n            return false;       // Handle all kinds of broken racey key updates\n          }\n          return true;\n        }\n      }).keys();\n\n      _model_metrics = new ModelMetrics[modelMetricsKeys.length];\n      for (int i = 0; i < modelMetricsKeys.length; i++)\n        _model_metrics[i] = DKV.getGet(modelMetricsKeys[i]);\n      return this;              // Flow coding\n    }","commit_id":"580c84927da33b5482dbda2df203a4cfec366f9e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override protected void compute2() {\n      ExampleModel model = null;\n      try {\n        Scope.enter();\n        _parms.lock_frames(Example.this); // Fetch & read-lock source frame\n        init(true);\n\n        // The model to be built\n        model = new ExampleModel(dest(), _parms, new ExampleModel.ExampleOutput(Example.this));\n        model.delete_and_lock(_key);\n\n        // ---\n        // Run the main Example Loop\n        // Stop after enough iterations\n        for( ; model._output._iters < _parms._max_iters; model._output._iters++ ) {\n          if( !isRunning() ) return; // Stopped/cancelled\n\n          double[] maxs = new Max().doAll(_parms.train())._maxs;\n\n          // Fill in the model; denormalized centers\n          model._output._maxs = maxs;\n          model.update(_key); // Update model in K/V store\n          update(1);          // One unit of work\n\n          StringBuilder sb = new StringBuilder();\n          sb.append(\"Example: iter: \").append(model._output._iters);\n          Log.info(sb);\n        }\n\n      } catch( Throwable t ) {\n        t.printStackTrace();\n        cancel2(t);\n        throw t;\n      } finally {\n        if( model != null ) model.unlock(_key);\n        _parms.unlock_frames(Example.this);\n        Scope.exit();\n        done();                 // Job done!\n      }\n      tryComplete();\n    }","id":64694,"modified_method":"@Override protected void compute2() {\n      ExampleModel model = null;\n      try {\n        Scope.enter();\n        _parms.lock_frames(Example.this); // Fetch & read-lock source frame\n        init(true);\n\n        // The model to be built\n        model = new ExampleModel(dest(), _parms, new ExampleModel.ExampleOutput(Example.this));\n        model.delete_and_lock(_key);\n\n        // ---\n        // Run the main Example Loop\n        // Stop after enough iterations\n        for( ; model._output._iters < _parms._max_iters; model._output._iters++ ) {\n          if( !isRunning() ) return; // Stopped/cancelled\n\n          double[] maxs = new Max().doAll(_parms.train())._maxs;\n\n          // Fill in the model; denormalized centers\n          model._output._maxs = maxs;\n          model.update(_key); // Update model in K/V store\n          update(1);          // One unit of work\n\n          StringBuilder sb = new StringBuilder();\n          sb.append(\"Example: iter: \").append(model._output._iters);\n          Log.info(sb);\n        }\n\n      } catch( Throwable t ) {\n        t.printStackTrace();\n        cancel2(t);\n        throw t;\n      } finally {\n        if( model != null ) model.unlock(_key);\n        _parms.unlock_frames(Example.this);\n        Scope.exit(model._key);\n        done();                 // Job done!\n      }\n      tryComplete();\n    }","commit_id":"176acf90907d9d2bb73fd13500f1c726f1573b32","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public KMeansV2 train(int version, KMeans builder) {\n    KMeansParameters parms = builder._parms;\n    assert parms != null; /* impl._job = */\n    builder.trainModel();\n    KMeansV2 schema = schema(version); // TODO: superclass!\n    schema.parameters = new KMeansV2.KMeansParametersV2();\n    schema.job = builder._key;\n    return schema;\n  }","id":64695,"modified_method":"public KMeansV2 train(int version, KMeans builder) {\n    KMeansParameters parms = builder._parms;\n    assert parms != null; /* impl._job = */\n    builder.trainModel();\n    KMeansV2 schema = schema(version).fillFromImpl(builder); // TODO: superclass!\n    schema.job = builder._key;\n    return schema;\n  }","commit_id":"176acf90907d9d2bb73fd13500f1c726f1573b32","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public KMeansParametersV2 fillFromImpl(KMeansParameters parms) {\n      super.fillFromImpl(parms);\n      super.fillFromImpl(parms);\n      this.init = KMeans.Initialization.Furthest;\n      return this;\n    }","id":64696,"modified_method":"@Override public KMeansParametersV2 fillFromImpl(KMeansParameters parms) {\n      super.fillFromImpl(parms);\n      this.init = KMeans.Initialization.Furthest;\n      return this;\n    }","commit_id":"176acf90907d9d2bb73fd13500f1c726f1573b32","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public S fillFromImpl(P parms) {\n    PojoUtils.copyProperties(this, parms, PojoUtils.FieldNaming.ORIGIN_HAS_UNDERSCORES );\n    return (S)this;\n  }","id":64697,"modified_method":"public S fillFromImpl(P impl) {\n    PojoUtils.copyProperties(this, impl, PojoUtils.FieldNaming.ORIGIN_HAS_UNDERSCORES );\n\n    if (null != impl._train) {\n      Value v = DKV.get(impl._train);\n      if (null == v) throw new IllegalArgumentException(\"Failed to find training_frame: \" + impl._train);\n      training_frame = v.get();\n    }\n\n    if (null != impl._valid) {\n      Value v = DKV.get(impl._valid);\n      if (null == v) throw new IllegalArgumentException(\"Failed to find validation_frame: \" + impl._valid);\n      validation_frame = v.get();\n    }\n\n    return (S)this;\n  }","commit_id":"176acf90907d9d2bb73fd13500f1c726f1573b32","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public SynonymV1 findSynonyms(int version, Synonyms synonym) {\n    Word2VecModel w2vmodel = DKV.get(synonym._w2vec_key).get();\n    HashMap<String, Float> hm = w2vmodel.findSynonyms(synonym._target, synonym._cnt);\n    synonym._synonyms = hm.keySet().toArray(new String[hm.keySet().size()]);\n    Float[] f = hm.values().toArray(new Float[hm.keySet().size()]);\n    float[] cos_sim = new float[f.length];\n    for(int i = 0; i < f.length; ++i) cos_sim[i] = f[i];\n    synonym._cos_sim = cos_sim;\n    return schema(version).fillFromImpl(synonym);\n  }","id":64698,"modified_method":"public SynonymV1 findSynonyms(int version, Synonyms synonym) {\n    Word2VecModel w2vmodel = DKV.get(synonym.key).get();\n    HashMap<String, Float> hm = w2vmodel.findSynonyms(synonym.target, synonym.cnt);\n    synonym.synonyms = hm.keySet().toArray(new String[hm.keySet().size()]);\n    Float[] f = hm.values().toArray(new Float[hm.keySet().size()]);\n    float[] cos_sim = new float[f.length];\n    for(int i = 0; i < f.length; ++i) cos_sim[i] = f[i];\n    synonym.cos_sim = cos_sim;\n    return schema(version).fillFromImpl(synonym);\n  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Create an initial Word2Vec model, typically to be trained by trainModel(model)\n   * @return Randomly initialized model\n   */\n  public final Word2VecModel initModel() {\n    try {\n      _parms.lock_frames(Word2Vec.this);\n      if (_parms.sanityCheckParameters() > 0)\n        throw new IllegalArgumentException(\"Error(s) in model parameters: \" + _parms.validationErrors());\n      final Word2VecModel model = new Word2VecModel(dest(), _parms.train(), (Word2VecModel.Word2VecParameters)_parms.clone());\n      model.delete_and_lock(self());\n      return model;\n    }\n    finally {\n      _parms.unlock_frames(Word2Vec.this);\n    }\n  }","id":64699,"modified_method":"/** Start the KMeans training Job on an F/J thread. */\n  @Override public Job<Word2VecModel> trainModel() { return start(new Word2VecDriver(), _parms._epochs); }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override\n    protected void compute2() {\n      try {\n        buildModel();\n      } catch (Throwable t) {\n        t.printStackTrace();\n        cancel2(t);\n        throw t;\n      } finally {\n        done();                 // Job done!\n      }\n      tryComplete();\n    }","id":64700,"modified_method":"@Override\n    protected void compute2() {\n      Word2VecModel model = null;\n      long start, stop, lastCnt=0;\n      long tstart, tstop;\n      float tDiff;\n\n      try {\n        init(true);\n        _parms.lock_frames(Word2Vec.this);\n\n        //The model to be built\n        model = new Word2VecModel(dest(), _parms, new Word2VecOutput(Word2Vec.this));\n        model.delete_and_lock(_key);\n\n        // main loop\n        Log.info(\"Word2Vec: Starting to train model.\");\n        tstart = System.currentTimeMillis();\n        for (int i = 0; i < _parms._epochs; i++) {\n          start = System.currentTimeMillis();\n          model.setModelInfo(new WordVectorTrainer(model.getModelInfo()).doAll(_parms.train()).getModelInfo());\n          stop = System.currentTimeMillis();\n          model.getModelInfo().updateLearningRate();\n          model.update(_key); // Early version of model is visible\n          Job.update(1, _key);\n          tDiff = (float)(stop-start)/1000;\n          Log.info(\"Epoch \"+i+\" \"+tDiff+\"s  Words trained/s: \"+ (model.getModelInfo().getTotalProcessed()-lastCnt)/tDiff);\n          lastCnt = model.getModelInfo().getTotalProcessed();\n        }\n        tstop  = System.currentTimeMillis();\n        Log.info(\"Total time :\" + ((float)(tstop-tstart))/1000f);\n        Log.info(\"Finished training the Word2Vec model.\");\n        model.buildModelOutput();\n\n      } catch (Throwable t) {\n        //model = DKV.get(dest()).get();\n        //_state = JobState.CANCELLED; //for JSON REST response\n        Log.info(\"Word2Vec model building was cancelled.\");\n        t.printStackTrace();\n        cancel2(t);\n        throw t;\n      } finally {\n        if( model != null ) model.unlock(_key);\n        _parms.unlock_frames(Word2Vec.this);\n        done();                 // Job done!\n      }\n      tryComplete();\n    }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override protected Word2VecV2 schema(int version) { return new Word2VecV2(); }","id":64701,"modified_method":"@Override protected Word2VecV2 schema(int version) { Word2VecV2 schema = new Word2VecV2(); schema.parameters = schema.createParametersSchema(); return schema;  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public Word2VecV2 train(int version, Word2Vec builder) {\n    Word2VecModel.Word2VecParameters parms = builder._parms;\n    assert parms != null;\n    builder.train();\n    Word2VecV2 schema = schema(version);\n    schema.parameters = new Word2VecV2.Word2VecParametersV2();\n    schema.job = builder._key;\n    return schema;\n  }","id":64702,"modified_method":"public Word2VecV2 train(int version, Word2Vec builder) {\n    Word2VecModel.Word2VecParameters parms = builder._parms;\n    assert parms != null; /* impl._job = */\n    builder.trainModel();\n    Word2VecV2 schema = schema(version).fillFromImpl(builder); // TODO: superclass!\n    schema.job = builder._key;\n    return schema;\n  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public Word2VecModel(final Key selfKey, Frame fr, final Word2VecParameters params) {\n    super(selfKey, fr, params, new Word2VecOutput());\n    _modelInfo = new Word2VecModelInfo(params);\n    assert(Arrays.equals(_key._kb, selfKey._kb));\n  }","id":64703,"modified_method":"public Word2VecModel(Key selfKey, Word2VecParameters params, Word2VecOutput output) {\n    super(selfKey, params, output);\n    _modelInfo = new Word2VecModelInfo(params);\n    assert(Arrays.equals(_key._kb, selfKey._kb));\n  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public int sanityCheckParameters() {\n      if (_vecSize > MAX_VEC_SIZE) validation_error(\"vecSize\", \"Requested vector size of \"+_vecSize+\" in Word2Vec, exceeds limit of \"+MAX_VEC_SIZE+\".\");\n      if (_vecSize < 1) validation_error(\"vecSize\", \"Requested vector size of \"+_vecSize+\" in Word2Vec, is not allowed.\");\n      if (_windowSize < 1) validation_error(\"windowSize\", \"Negative window size not allowed for Word2Vec.  Expected value > 0, received \"+_windowSize);\n      if (_sentSampleRate < 0.0) validation_error(\"sentSampleRate\", \"Negative sentence sample rate not allowed for Word2Vec.  Expected a value > 0.0, received \"+_sentSampleRate);\n      if (_initLearningRate < 0.0) validation_error(\"initLearningRate\", \"Negative learning rate not allowed for Word2Vec.  Expected a value > 0.0, received \"+ _initLearningRate);\n      if (_epochs < 1) validation_error(\"epochs\", \"Negative epoch count not allowed for Word2Vec.  Expected value > 0, received \"+_epochs);\n\n      return _validation_error_count;\n    }","id":64704,"modified_method":"public Word2VecOutput(Word2Vec b) { super(b);}","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public Word2VecModel.Word2VecOutput createImpl() {\n      Word2VecModel.Word2VecOutput impl = new Word2VecModel.Word2VecOutput();\n      PojoUtils.copyProperties(impl, this, PojoUtils.FieldNaming.DEST_HAS_UNDERSCORES);\n      return impl;\n    }","id":64705,"modified_method":"@Override public Word2VecModel.Word2VecOutput createImpl() {\n      Word2VecModel.Word2VecOutput impl = new Word2VecModel.Word2VecOutput(null);\n      PojoUtils.copyProperties(impl, this, PojoUtils.FieldNaming.DEST_HAS_UNDERSCORES);\n      return impl;\n    }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public Word2VecModel createImpl() {\n    Word2VecV2.Word2VecParametersV2 p = ((Word2VecV2.Word2VecParametersV2)this.parameters);\n    Word2VecModel.Word2VecParameters parms = p.createImpl();\n    return new Word2VecModel( key, p.training_frame, parms);\n  }","id":64706,"modified_method":"@Override public Word2VecModel createImpl() {\n    Word2VecV2.Word2VecParametersV2 p = ((Word2VecV2.Word2VecParametersV2)this.parameters);\n    Word2VecModel.Word2VecParameters parms = p.createImpl();\n    return new Word2VecModel( key, parms, null);\n  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Ignore\n  @Test public void testW2V_CBOW_HSM() {\n    Word2Vec job = null;\n    Word2VecModel w2vm = null;\n    Frame fr = null;\n    try {\n      fr = parse_test_file(\"bigdata/laptop/text8.gz\");\n\n      Word2VecModel.Word2VecParameters parms = new Word2VecModel.Word2VecParameters();\n      parms._train = fr._key;\n      parms._minWordFreq = 20;\n      parms._wordModel = Word2Vec.WordModel.CBOW;\n      parms._normModel = Word2Vec.NormModel.HSM;\n      parms._vecSize = 100;\n      parms._windowSize = 4;\n      parms._sentSampleRate = 0.01f;\n      parms._initLearningRate = 0.05f;\n      parms._epochs = 25;\n      job = new Word2Vec(parms);\n      job.train();\n      w2vm = job.get();\n      HashMap hm = w2vm.findSynonyms(\"dog\",10);\n      printResults(hm);\n      Assert.assertTrue(hm.containsKey(\"dogs\"));\n    } finally {\n      if( fr  != null ) fr .remove();\n      if( job != null) job.remove();\n      if( w2vm != null) w2vm.delete();\n    }\n  }","id":64707,"modified_method":"@Ignore\n  @Test public void testW2V_CBOW_HSM() {\n    Word2Vec job = null;\n    Word2VecModel w2vm = null;\n    Frame fr = null;\n    try {\n      fr = parse_test_file(\"bigdata/laptop/text8.gz\");\n\n      Word2VecModel.Word2VecParameters parms = new Word2VecModel.Word2VecParameters();\n      parms._train = fr._key;\n      parms._minWordFreq = 20;\n      parms._wordModel = Word2Vec.WordModel.CBOW;\n      parms._normModel = Word2Vec.NormModel.HSM;\n      parms._vecSize = 100;\n      parms._windowSize = 4;\n      parms._sentSampleRate = 0.01f;\n      parms._initLearningRate = 0.05f;\n      parms._epochs = 25;\n      job = new Word2Vec(parms);\n      job.trainModel();\n      w2vm = job.get();\n      HashMap hm = w2vm.findSynonyms(\"dog\",10);\n      printResults(hm);\n      Assert.assertTrue(hm.containsKey(\"dogs\"));\n    } finally {\n      if( fr  != null ) fr .remove();\n      if( job != null) job.remove();\n      if( w2vm != null) w2vm.delete();\n    }\n  }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@BeforeClass() public static void setup() { stall_till_cloudsize(5); }","id":64708,"modified_method":"@BeforeClass() public static void setup() { stall_till_cloudsize(1); }","commit_id":"135c4dda510a25c6861b288af9c115d7ed20609f","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Load edit log.\n   *\n   * @param info\n   *          The Master Info.\n   *        path\n   *          The path of the edit logs.\n   *        currentLogNum\n   *          The smallest completed log number that this master has not loaded\n   * @return The last transaction id.\n   * @throws IOException\n   */\n  public static long load(MasterInfo info, String path, int currentLogFileNum) throws IOException {\n    UnderFileSystem ufs = UnderFileSystem.get(path);\n    if (!ufs.exists(path)) {\n      LOG.info(\"Edit Log \" + path + \" does not exist.\");\n      return 0;\n    }\n    LOG.info(\"currentLogNum passed in was \" + currentLogFileNum);\n    int completedLogs = currentLogFileNum;\n    int numFiles = 1;\n    String completedPath = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n    if (!ufs.exists(completedPath)) {\n      LOG.info(\"No completed edit logs to be parsed\");\n    } else {\n      while (ufs.exists(completedPath + \"/\" + (completedLogs ++) + \".editLog\")) {\n        numFiles ++;\n      }\n    }\n    if (numFiles == 1) {\n      mBackUpCurrentLog = true;\n    }\n    String editLogs[] = new String[numFiles];\n    for (int i = 0; i < numFiles; i ++) {\n      if (i != numFiles - 1) {\n        editLogs[i] = completedPath + \"/\" + (i + currentLogFileNum) + \".editLog\";\n      } else {\n        editLogs[i] = path;\n      }\n    }\n\n    for (String currentPath : editLogs) {\n      LOG.info(\"Loading Edit Log \" + currentPath);\n      loadSingleLog(info, currentPath);\n    }\n    ufs.close();\n    return mCurrentTId;\n  }","id":64709,"modified_method":"/**\n   * Load edit log.\n   *\n   * @param info\n   *          The Master Info.\n   *        path\n   *          The path of the edit logs.\n   *        currentLogNum\n   *          The smallest completed log number that this master has not loaded\n   * @return The last transaction id.\n   * @throws IOException\n   */\n  public static long load(MasterInfo info, String path, int currentLogFileNum) throws IOException {\n    UnderFileSystem ufs = UnderFileSystem.get(path);\n    if (!ufs.exists(path)) {\n      LOG.info(\"Edit Log \" + path + \" does not exist.\");\n      return 0;\n    }\n    LOG.info(\"currentLogNum passed in was \" + currentLogFileNum);\n    int completedLogs = currentLogFileNum;\n    mBackUpLogStartNum = currentLogFileNum;\n    int numFiles = 1;\n    String completedPath = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n    if (!ufs.exists(completedPath)) {\n      LOG.info(\"No completed edit logs to be parsed\");\n    } else {\n      while (ufs.exists(completedPath + \"/\" + (completedLogs ++) + \".editLog\")) {\n        numFiles ++;\n      }\n    }\n    String editLogs[] = new String[numFiles];\n    for (int i = 0; i < numFiles; i ++) {\n      if (i != numFiles - 1) {\n        editLogs[i] = completedPath + \"/\" + (i + currentLogFileNum) + \".editLog\";\n      } else {\n        editLogs[i] = path;\n      }\n    }\n\n    for (String currentPath : editLogs) {\n      LOG.info(\"Loading Edit Log \" + currentPath);\n      loadSingleLog(info, currentPath);\n    }\n    ufs.close();\n    return mCurrentTId;\n  }","commit_id":"1d599a238779ff67b21f79dfc86df86cda5c1e90","url":"https://github.com/amplab/tachyon"},{"original_method":"public EditLog(String path, boolean inactive, long transactionId) throws IOException {\n    INACTIVE = inactive;\n\n    if (!INACTIVE) {\n      LOG.info(\"Creating edit log file \" + path);\n      PATH = path;\n      UFS = UnderFileSystem.get(path);\n      if (mBackUpCurrentLog) {\n        String folder = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n        LOG.info(\"Backing up current log since image is not updated.\");\n        UFS.mkdirs(folder, true);\n        UFS.rename(path, folder + \"/\" + (mCurrentLogFileNum ++) + \".editLog\");\n        LOG.info(\"Renaming \" + path + \" to \" + folder + \"/\" + (mCurrentLogFileNum ++) +\n            \".editLog\");\n        mBackUpCurrentLog = false;\n      }\n      OS = UFS.create(path);\n      DOS = new DataOutputStream(OS);\n      LOG.info(\"Created file \" + path);\n      mFlushedTransactionId = transactionId;\n      mTransactionId = transactionId;\n    } else {\n      PATH = null;\n      UFS = null;\n      OS = null;\n      DOS = null;\n    }\n  }","id":64710,"modified_method":"public EditLog(String path, boolean inactive, long transactionId) throws IOException {\n    INACTIVE = inactive;\n\n    if (!INACTIVE) {\n      LOG.info(\"Creating edit log file \" + path);\n      PATH = path;\n      UFS = UnderFileSystem.get(path);\n      if (mBackUpLogStartNum != -1) {\n        String folder = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n        LOG.info(\"Deleting completed editlogs that are part of the image.\");\n        deleteCompletedLogs(path, mBackUpLogStartNum);\n        LOG.info(\"Backing up logs from \" + mBackUpLogStartNum + \" since image is not updated.\");\n        UFS.mkdirs(folder, true);\n        String toRename = folder + \"/\" + mBackUpLogStartNum + \".editLog\";\n        int mCurrentLogFileNum = 0;\n        while (UFS.exists(toRename)) {\n          LOG.info(\"Rename \" + toRename + \" to \" + folder + \"/\" + mCurrentLogFileNum + \".editLog\");\n          mCurrentLogFileNum ++;\n          mBackUpLogStartNum ++;\n          toRename = folder + \"/\" + mBackUpLogStartNum + \".editLog\";\n        }\n        if (UFS.exists(path)) {\n          UFS.rename(path, folder + \"/\" + (mCurrentLogFileNum ++) + \".editLog\");\n          LOG.info(\n              \"Rename \" + path + \" to \" + folder + \"/\" + (mCurrentLogFileNum - 1) + \".editLog\");\n        }\n        mBackUpLogStartNum = -1;\n      }\n      OS = UFS.create(path);\n      DOS = new DataOutputStream(OS);\n      LOG.info(\"Created file \" + path);\n      mFlushedTransactionId = transactionId;\n      mTransactionId = transactionId;\n    } else {\n      PATH = null;\n      UFS = null;\n      OS = null;\n      DOS = null;\n    }\n  }","commit_id":"1d599a238779ff67b21f79dfc86df86cda5c1e90","url":"https://github.com/amplab/tachyon"},{"original_method":"public static void deleteCompletedLogs(String path) {\n    UnderFileSystem ufs = UnderFileSystem.get(path);\n    String folder = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n    try {\n      if (ufs.exists(folder)) {\n        LOG.info(\"Deleting folder \" + folder);\n        ufs.delete(folder, true);\n      }\n    } catch (IOException e) {\n      CommonUtils.runtimeException(e);\n    }\n  }","id":64711,"modified_method":"public static void deleteCompletedLogs(String path, int upTo) {\n    UnderFileSystem ufs = UnderFileSystem.get(path);\n    String folder = path.substring(0, path.lastIndexOf(\"/\")) + \"/completed\";\n    try {\n      for (int i = 0; i < upTo; i ++) {\n        String toDelete = folder + \"/\" + i + \".editLog\";\n        LOG.info(\"Deleting editlog \" + toDelete);\n        ufs.delete(toDelete, true);\n      }\n    } catch (IOException e) {\n      CommonUtils.runtimeException(e);\n    }\n  }","commit_id":"1d599a238779ff67b21f79dfc86df86cda5c1e90","url":"https://github.com/amplab/tachyon"},{"original_method":"public void createEditLog(long transactionId) throws IOException {\n    EditLog.deleteCompletedLogs(mEditLogPath);\n    mEditLog = new EditLog(mEditLogPath, false, transactionId);\n  }","id":64712,"modified_method":"public void createEditLog(long transactionId) throws IOException {\n    mEditLog = new EditLog(mEditLogPath, false, transactionId);\n  }","commit_id":"1d599a238779ff67b21f79dfc86df86cda5c1e90","url":"https://github.com/amplab/tachyon"},{"original_method":"public void createImage(MasterInfo info) throws IOException {\n    if (!EditLog.getIsBackUpCurrentLog() || mStandbyImagePath == \"\") {\n      Image.create(info, mImagePath);\n    } else {\n      Image.rename(mStandbyImagePath, mImagePath);\n    }\n  }","id":64713,"modified_method":"public void createImage(MasterInfo info) throws IOException {\n    if (mStandbyImagePath == \"\") {\n      Image.create(info, mImagePath);\n      EditLog.markUpToDate();\n    } else {\n      Image.rename(mStandbyImagePath, mImagePath);\n    }\n  }","commit_id":"1d599a238779ff67b21f79dfc86df86cda5c1e90","url":"https://github.com/amplab/tachyon"},{"original_method":"public void put(String categoryName, String keyName, InputStream is) {\n    Log.info(\"NPS put content category(\" + categoryName + \") keyName(\" + keyName + \")\");\n\n    // Error checking\n    validateGeneral();\n    validateCategoryName(categoryName);\n    validateKeyName(keyName);\n\n    // Create common directories\n    PersistManager pm = H2O.getPM();\n    if (! pm.exists(NPS_DIR)) {\n      boolean success = pm.mkdirs(NPS_DIR);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage directory (\" + NPS_DIR + \")\");\n      }\n    }\n\n    if (! pm.exists(NPS_DIR)) {\n      throw new RuntimeException(\"NodePersistentStorage directory does not exist (\" + NPS_DIR + \")\");\n    }\n\n    String tmpd = NPS_DIR + NPS_SEPARATOR + \"_tmp\";\n    if (! pm.exists(tmpd)) {\n      boolean success = pm.mkdirs(tmpd);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage category directory (\" + tmpd + \")\");\n      }\n    }\n    if (! pm.exists(tmpd)) {\n      throw new RuntimeException(\"NodePersistentStorage category directory does not exist (\" + tmpd + \")\");\n    }\n\n    // Create category directory\n    String d2 = NPS_DIR + NPS_SEPARATOR + categoryName;\n    if (! pm.exists(d2)) {\n      boolean success = pm.mkdirs(d2);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage category directory (\" + d2 + \")\");\n      }\n    }\n    if (! pm.exists(d2)) {\n      throw new RuntimeException(\"NodePersistentStorage category directory does not exist (\" + d2 + \")\");\n    }\n\n    // Create tmp file\n    String tmpf = tmpd + NPS_SEPARATOR + keyName;\n    OutputStream os = null;\n    try {\n      os = pm.create(tmpf, true);\n      FileUtils.copyStream(is, os, 1024);\n    }\n    finally {\n      if (os != null) {\n        try {\n          os.close();\n        }\n        catch (Exception e) {\n          Log.err(e);\n        }\n      }\n    }\n\n    // Move tmp file to final spot\n    String realf = d2 + NPS_SEPARATOR + keyName;\n    boolean success = pm.rename(tmpf, realf);\n    if (! success) {\n      throw new RuntimeException(\"NodePersistentStorage move failed (\" + tmpf + \" -> \" + realf + \")\");\n    }\n\n    if (! pm.exists(realf)) {\n      throw new RuntimeException(\"NodePersistentStorage file does not exist (\" + realf + \")\");\n    }\n\n    Log.info(\"Put succeeded\");\n  }","id":64714,"modified_method":"public void put(String categoryName, String keyName, InputStream is) {\n    Log.info(\"NPS put content category(\" + categoryName + \") keyName(\" + keyName + \")\");\n\n    // Error checking\n    validateGeneral();\n    validateCategoryName(categoryName);\n    validateKeyName(keyName);\n\n    // Create common directories\n    PersistManager pm = H2O.getPM();\n    if (! pm.exists(NPS_DIR)) {\n      boolean success = pm.mkdirs(NPS_DIR);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage directory (\" + NPS_DIR + \")\");\n      }\n    }\n\n    if (! pm.exists(NPS_DIR)) {\n      throw new RuntimeException(\"NodePersistentStorage directory does not exist (\" + NPS_DIR + \")\");\n    }\n\n    String tmpd = NPS_DIR + NPS_SEPARATOR + \"_tmp\";\n    if (! pm.exists(tmpd)) {\n      boolean success = pm.mkdirs(tmpd);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage category directory (\" + tmpd + \")\");\n      }\n    }\n    if (! pm.exists(tmpd)) {\n      throw new RuntimeException(\"NodePersistentStorage category directory does not exist (\" + tmpd + \")\");\n    }\n\n    // Create category directory\n    String d2 = NPS_DIR + NPS_SEPARATOR + categoryName;\n    if (! pm.exists(d2)) {\n      boolean success = pm.mkdirs(d2);\n      if (! success) {\n        throw new RuntimeException(\"Could not make NodePersistentStorage category directory (\" + d2 + \")\");\n      }\n    }\n    if (! pm.exists(d2)) {\n      throw new RuntimeException(\"NodePersistentStorage category directory does not exist (\" + d2 + \")\");\n    }\n\n    // Create tmp file\n    String tmpf = tmpd + NPS_SEPARATOR + keyName;\n    OutputStream os = null;\n    try {\n      os = pm.create(tmpf, true);\n      FileUtils.copyStream(is, os, 1024);\n    }\n    finally {\n      if (os != null) {\n        try {\n          os.close();\n        }\n        catch (Exception e) {\n          Log.err(e);\n        }\n      }\n    }\n\n    // Make final spot available if needed, and move tmp file to final spot.\n    boolean success;\n    String realf = d2 + NPS_SEPARATOR + keyName;\n    if (pm.exists(realf)) {\n      success = pm.delete(realf);\n      if (! success) {\n        throw new RuntimeException(\"NodePersistentStorage delete failed (\" + realf + \")\");\n      }\n    }\n\n    success = pm.rename(tmpf, realf);\n    if (! success) {\n      throw new RuntimeException(\"NodePersistentStorage rename failed (\" + tmpf + \" -> \" + realf + \")\");\n    }\n\n    if (! pm.exists(realf)) {\n      throw new RuntimeException(\"NodePersistentStorage file does not exist (\" + realf + \")\");\n    }\n\n    Log.info(\"Put succeeded\");\n  }","commit_id":"db710a4dc7dda4570f5b87cb9e386be6c76f001e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override\n  public boolean rename(String fromPath, String toPath) {\n    Path f = new Path(fromPath);\n    Path t = new Path(toPath);\n    URI uri = f.toUri();\n    try {\n      FileSystem fs = FileSystem.get(uri, CONF);\n      if (fs.exists(t)) {\n        boolean recursive = false;\n        boolean success = fs.delete(t, recursive);\n        if (! success) {\n          Log.info(\"PersistHdfs rename failed (\" + fromPath + \" -> \" + toPath +\")\");\n          return false;\n        }\n      }\n      return fs.rename(f, t);\n    }\n    catch (IOException e) {\n      throw new HDFSIOException(toPath, CONF.toString(), e);\n    }\n  }","id":64715,"modified_method":"@Override\n  public boolean rename(String fromPath, String toPath) {\n    Path f = new Path(fromPath);\n    Path t = new Path(toPath);\n    URI uri = f.toUri();\n    try {\n      FileSystem fs = FileSystem.get(uri, CONF);\n      return fs.rename(f, t);\n    }\n    catch (IOException e) {\n      throw new HDFSIOException(toPath, CONF.toString(), e);\n    }\n  }","commit_id":"db710a4dc7dda4570f5b87cb9e386be6c76f001e","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public static void doRename(PsiElement element, Project project, PsiElement nameSuggestionContext, Editor editor) {\n    PsiDirectory psiDirectory = (PsiDirectory)element;\n    PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(psiDirectory);\n    final String qualifiedName = aPackage != null ? aPackage.getQualifiedName() : \"\";\n    if (aPackage == null || qualifiedName.length() == 0/*default package*/ ||\n        !JavaPsiFacade.getInstance(project).getNameHelper().isIdentifier(psiDirectory.getName())) {\n      PsiElementRenameHandler.rename(element, project, nameSuggestionContext, editor);\n    }\n    else {\n      PsiDirectory[] directories = aPackage.getDirectories();\n      final VirtualFile[] virtualFiles = aPackage.occursInPackagePrefixes();\n      if (virtualFiles.length == 0 && directories.length == 1) {\n        PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor);\n      }\n      else { // the directory corresponds to a package that has multiple associated directories\n        StringBuffer message = new StringBuffer();\n        RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName);\n        buildMultipleDirectoriesInPackageMessage(message, aPackage, directories);\n        message.append(RefactoringBundle.message(\"directories.and.all.references.to.package.will.be.renamed\", qualifiedName));\n        int ret =\n          Messages.showYesNoDialog(project, message.toString(), RefactoringBundle.message(\"warning.title\"), Messages.getWarningIcon());\n        if (ret != 0) {\n          return;\n        }\n        // if confirmed\n        PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor);\n      }\n    }\n  }","id":64716,"modified_method":"public static void doRename(PsiElement element, Project project, PsiElement nameSuggestionContext, Editor editor) {\n    PsiDirectory psiDirectory = (PsiDirectory)element;\n    PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(psiDirectory);\n    final String qualifiedName = aPackage != null ? aPackage.getQualifiedName() : \"\";\n    if (aPackage == null || qualifiedName.length() == 0/*default package*/ ||\n        !JavaPsiFacade.getInstance(project).getNameHelper().isIdentifier(psiDirectory.getName())) {\n      PsiElementRenameHandler.rename(element, project, nameSuggestionContext, editor);\n    }\n    else {\n      PsiDirectory[] directories = aPackage.getDirectories();\n      final VirtualFile[] virtualFiles = aPackage.occursInPackagePrefixes();\n      if (virtualFiles.length == 0 && directories.length == 1) {\n        PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor);\n      }\n      else { // the directory corresponds to a package that has multiple associated directories\n        StringBuffer message = new StringBuffer();\n        RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName);\n        buildMultipleDirectoriesInPackageMessage(message, aPackage, directories);\n        message.append(RefactoringBundle.message(\"directories.and.all.references.to.package.will.be.renamed\", psiDirectory.getVirtualFile().getPresentableUrl()));\n        int ret =\n          Messages.showDialog(project, message.toString(), RefactoringBundle.message(\"warning.title\"),\n                              new String[]{\n                                RefactoringBundle.message(\"rename.package.button.text\"),\n                                RefactoringBundle.message(\"rename.directory.button.text\"),\n                              CommonBundle.getCancelButtonText()}, 0, Messages.getWarningIcon());\n        if (ret == 0) {\n          PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor);\n        } else if (ret == 1){\n          PsiElementRenameHandler.rename(psiDirectory, project, nameSuggestionContext, editor);\n        }\n      }\n    }\n  }","commit_id":"ff675be50acc0d929a2e1e132f7279c8180bff98","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static UsageInfo[] findUsages(final PsiElement element,\n                                       String newName,\n                                       boolean searchInStringsAndComments,\n                                       boolean searchForTextOccurences,\n                                       Map<? extends PsiElement, String> allRenames) {\n    final List<UsageInfo> result = new ArrayList<UsageInfo>();\n\n    PsiManager manager = element.getManager();\n    GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject());\n    RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element);\n\n    Collection<PsiReference> refs = processor.findReferences(element);\n    for (PsiReference ref : refs) {\n      PsiElement referenceElement = ref.getElement();\n      result.add(new MoveRenameUsageInfo(referenceElement, ref, ref.getRangeInElement().getStartOffset(),\n                                         ref.getRangeInElement().getEndOffset(), element,\n                                         false));\n    }\n\n    processor.findCollisions(element, newName, allRenames, result);\n\n    if (searchInStringsAndComments && !(element instanceof PsiDirectory)) {\n      String stringToSearch = ElementDescriptionUtil.getElementDescription(element, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);\n      if (stringToSearch != null && stringToSearch.length() > 0) {\n        final String stringToReplace = getStringToReplace(element, newName, false, processor);\n        TextOccurrencesUtil.UsageInfoFactory factory = new NonCodeUsageInfoFactory(element, stringToReplace);\n        TextOccurrencesUtil.addUsagesInStringsAndComments(element, stringToSearch, result, factory);\n      }\n    }\n\n\n    if (searchForTextOccurences && !(element instanceof PsiDirectory)) {\n      String stringToSearch = ElementDescriptionUtil.getElementDescription(element, NonCodeSearchDescriptionLocation.NON_JAVA);\n\n      if (stringToSearch != null) {\n        final String stringToReplace = getStringToReplace(element, newName, true, processor);\n        addTextOccurence(element, result, projectScope, stringToSearch, stringToReplace);\n\n        Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(element, newName);\n        if (additionalStringToSearch != null) {\n          addTextOccurence(element, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second);\n        }\n      }\n    }\n\n    return result.toArray(new UsageInfo[result.size()]);\n  }","id":64717,"modified_method":"@NotNull\n  public static UsageInfo[] findUsages(final PsiElement element,\n                                       String newName,\n                                       boolean searchInStringsAndComments,\n                                       boolean searchForTextOccurences,\n                                       Map<? extends PsiElement, String> allRenames) {\n    final List<UsageInfo> result = new ArrayList<UsageInfo>();\n\n    PsiManager manager = element.getManager();\n    GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject());\n    RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element);\n\n    Collection<PsiReference> refs = processor.findReferences(element);\n    for (PsiReference ref : refs) {\n      PsiElement referenceElement = ref.getElement();\n      result.add(new MoveRenameUsageInfo(referenceElement, ref, ref.getRangeInElement().getStartOffset(),\n                                         ref.getRangeInElement().getEndOffset(), element,\n                                         false));\n    }\n\n    processor.findCollisions(element, newName, allRenames, result);\n\n    final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element);\n    if (searchInStringsAndComments && searchForInComments != null) {\n      String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);\n      if (stringToSearch.length() > 0) {\n        final String stringToReplace = getStringToReplace(element, newName, false, processor);\n        TextOccurrencesUtil.UsageInfoFactory factory = new NonCodeUsageInfoFactory(searchForInComments, stringToReplace);\n        TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory);\n      }\n    }\n\n\n    if (searchForTextOccurences && searchForInComments != null) {\n      String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.NON_JAVA);\n\n      final String stringToReplace = getStringToReplace(element, newName, true, processor);\n      addTextOccurence(searchForInComments, result, projectScope, stringToSearch, stringToReplace);\n\n      Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(searchForInComments, newName);\n      if (additionalStringToSearch != null) {\n        addTextOccurence(searchForInComments, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second);\n      }\n    }\n\n    return result.toArray(new UsageInfo[result.size()]);\n  }","commit_id":"ff675be50acc0d929a2e1e132f7279c8180bff98","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * close writer if it's not null\n     */\n    void closeWriter() throws IOException {\n        //If reindex or fresh index and write is null on close\n        //it indicates that the index is empty. In such a case trigger\n        //creation of write such that an empty Lucene index state is persisted\n        //in directory\n        if (reindex && writer == null){\n            getWriter();\n        }\n\n        if (writer != null) {\n            if (log.isTraceEnabled()) {\n                trackIndexSizeInfo(writer, definition, directory);\n            }\n\n            final long start = PERF_LOGGER.start();\n\n            updateSuggester(writer.getAnalyzer());\n            PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n\n            writer.close();\n            PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n\n            directory.close();\n            PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n\n            //OAK-2029 Record the last updated status so\n            //as to make IndexTracker detect changes when index\n            //is stored in file system\n            NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", ISO8601.format(getCalendar()), Type.DATE);\n            status.setProperty(\"indexedNodes\",indexedNodes);\n            PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }","id":64718,"modified_method":"/**\n     * close writer if it's not null\n     */\n    void closeWriter() throws IOException {\n        //If reindex or fresh index and write is null on close\n        //it indicates that the index is empty. In such a case trigger\n        //creation of write such that an empty Lucene index state is persisted\n        //in directory\n        if (reindex && writer == null){\n            getWriter();\n        }\n\n        boolean updateSuggestions = shouldUpdateSuggestions();\n        if (writer == null && updateSuggestions) {\n            log.debug(\"Would update suggester dictionary although no index changes were detected in current cycle\");\n            getWriter();\n        }\n\n        if (writer != null) {\n            if (log.isTraceEnabled()) {\n                trackIndexSizeInfo(writer, definition, directory);\n            }\n\n            final long start = PERF_LOGGER.start();\n\n            Calendar lastUpdated = null;\n            if (updateSuggestions) {\n                lastUpdated = updateSuggester(writer.getAnalyzer());\n                PERF_LOGGER.end(start, -1, \"Completed suggester for directory {}\", definition);\n            }\n            if (lastUpdated == null) {\n                lastUpdated = getCalendar();\n            }\n\n            writer.close();\n            PERF_LOGGER.end(start, -1, \"Closed writer for directory {}\", definition);\n\n            directory.close();\n            PERF_LOGGER.end(start, -1, \"Closed directory for directory {}\", definition);\n\n            //OAK-2029 Record the last updated status so\n            //as to make IndexTracker detect changes when index\n            //is stored in file system\n            NodeBuilder status = definitionBuilder.child(\":status\");\n            status.setProperty(\"lastUpdated\", ISO8601.format(lastUpdated), Type.DATE);\n            status.setProperty(\"indexedNodes\", indexedNodes);\n\n            PERF_LOGGER.end(start, -1, \"Overall Closed IndexWriter for directory {}\", definition);\n\n            textExtractionStats.log(reindex);\n            textExtractionStats.collectStats(extractedTextCache);\n        }\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * eventually update suggest dictionary\n     * @throws IOException if suggest dictionary update fails\n     * @param analyzer the analyzer used to update the suggester\n     */\n    private void updateSuggester(Analyzer analyzer) throws IOException {\n\n        if (definition.isSuggestEnabled()) {\n\n            boolean updateSuggester = false;\n            NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n            if (suggesterStatus.hasProperty(\"lastUpdated\")) {\n                PropertyState suggesterLastUpdatedValue = suggesterStatus.getProperty(\"lastUpdated\");\n                Calendar suggesterLastUpdatedTime = ISO8601.parse(suggesterLastUpdatedValue.getValue(Type.DATE));\n                int updateFrequency = definition.getSuggesterUpdateFrequencyMinutes();\n                suggesterLastUpdatedTime.add(Calendar.MINUTE, updateFrequency);\n                if (getCalendar().after(suggesterLastUpdatedTime)) {\n                    updateSuggester = true;\n                }\n            } else {\n                updateSuggester = true;\n            }\n\n            if (updateSuggester) {\n                DirectoryReader reader = DirectoryReader.open(writer, false);\n                final OakDirectory suggestDirectory = new OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n                try {\n                    SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n                    suggesterStatus.setProperty(\"lastUpdated\", ISO8601.format(getCalendar()), Type.DATE);\n                } catch (Throwable e) {\n                    log.warn(\"could not update suggester\", e);\n                } finally {\n                    suggestDirectory.close();\n                    reader.close();\n                }\n            }\n        }\n    }","id":64719,"modified_method":"/**\n     * eventually update suggest dictionary\n     * @throws IOException if suggest dictionary update fails\n     * @param analyzer the analyzer used to update the suggester\n     * @return {@link Calendar} object representing the lastUpdated value written by suggestions\n     */\n    private Calendar updateSuggester(Analyzer analyzer) throws IOException {\n        Calendar ret = null;\n        NodeBuilder suggesterStatus = definitionBuilder.child(\":suggesterStatus\");\n        DirectoryReader reader = DirectoryReader.open(writer, false);\n        final OakDirectory suggestDirectory = new OakDirectory(definitionBuilder, \":suggest-data\", definition, false);\n        try {\n            SuggestHelper.updateSuggester(suggestDirectory, analyzer, reader);\n            ret = getCalendar();\n            suggesterStatus.setProperty(\"lastUpdated\", ISO8601.format(ret), Type.DATE);\n        } catch (Throwable e) {\n            log.warn(\"could not update suggester\", e);\n        } finally {\n            suggestDirectory.close();\n            reader.close();\n        }\n\n        return ret;\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void createSuggestIndex(String indexedNodeType)\n            throws Exception {\n        String indexName = \"lucene-suggest\";\n        Node def = root.getNode(INDEX_DEFINITIONS_NAME)\n                .addNode(indexName, INDEX_DEFINITIONS_NODE_TYPE);\n        def.setProperty(TYPE_PROPERTY_NAME, LuceneIndexConstants.TYPE_LUCENE);\n        def.setProperty(REINDEX_PROPERTY_NAME, true);\n        def.setProperty(\"name\", indexName);\n        def.setProperty(LuceneIndexConstants.COMPAT_MODE, IndexFormatVersion.V2.getVersion());\n\n        Node propertyIdxDef = def.addNode(INDEX_RULES, JcrConstants.NT_UNSTRUCTURED)\n                .addNode(indexedNodeType, JcrConstants.NT_UNSTRUCTURED)\n                .addNode(LuceneIndexConstants.PROP_NODE, JcrConstants.NT_UNSTRUCTURED)\n                .addNode(\"indexedProperty\", JcrConstants.NT_UNSTRUCTURED);\n        propertyIdxDef.setProperty(\"propertyIndex\", true);\n        propertyIdxDef.setProperty(\"analyzed\", true);\n        propertyIdxDef.setProperty(\"useInSuggest\", true);\n        propertyIdxDef.setProperty(\"name\", LuceneIndexConstants.PROPDEF_PROP_NODE_NAME);\n    }","id":64720,"modified_method":"private Tree createSuggestIndex(String indexedNodeType)\n            throws Exception {\n        String indexName = \"lucene-suggest\";\n        Tree def = root.getTree(\"/\" + INDEX_DEFINITIONS_NAME)\n                .addChild(indexName);\n        def.setProperty(JcrConstants.JCR_PRIMARYTYPE, INDEX_DEFINITIONS_NODE_TYPE);\n        def.setProperty(TYPE_PROPERTY_NAME, LuceneIndexConstants.TYPE_LUCENE);\n        def.setProperty(REINDEX_PROPERTY_NAME, true);\n        def.setProperty(\"name\", indexName);\n        def.setProperty(LuceneIndexConstants.COMPAT_MODE, IndexFormatVersion.V2.getVersion());\n\n        Tree propertyIdxDef = def.addChild(INDEX_RULES)\n                .addChild(indexedNodeType)\n                .addChild(LuceneIndexConstants.PROP_NODE)\n                .addChild(\"indexedProperty\");\n        propertyIdxDef.setProperty(\"propertyIndex\", true);\n        propertyIdxDef.setProperty(\"analyzed\", true);\n        propertyIdxDef.setProperty(\"useInSuggest\", true);\n        propertyIdxDef.setProperty(\"name\", LuceneIndexConstants.PROPDEF_PROP_NODE_NAME);\n\n        return def;\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@After\n    public void after() {\n        LuceneIndexEditorContext.setClock(Clock.SIMPLE);\n\n        session.logout();\n        shutdown(repository);\n    }","id":64721,"modified_method":"@After\n    public void after() throws Exception {\n        LuceneIndexEditorContext.setClock(Clock.SIMPLE);\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"Set<String> getSuggestions(String nodeType, String suggestFor) throws Exception {\n        Set<String> ret = Sets.newHashSet();\n\n        String suggQuery = createSuggestQuery(nodeType, suggestFor);\n        QueryManager queryManager = session.getWorkspace().getQueryManager();\n        QueryResult result = queryManager.createQuery(suggQuery, Query.JCR_SQL2).execute();\n        RowIterator rows = result.getRows();\n\n        while (rows.hasNext()) {\n            Row firstRow = rows.nextRow();\n            ret.add(firstRow.getValue(\"suggestion\").getString());\n        }\n\n        return ret;\n    }","id":64722,"modified_method":"Set<String> getSuggestions(String nodeType, String suggestFor) throws Exception {\n        Set<String> ret = Sets.newHashSet();\n\n        String suggQuery = createSuggestQuery(nodeType, suggestFor);\n        QueryEngine qe = root.getQueryEngine();\n        Result result = qe.executeQuery(suggQuery, Query.JCR_SQL2, null, null);\n\n        for (ResultRow row : result.getRows()) {\n            ret.add(row.getValue(\"suggestion\").toString());\n        }\n\n        return ret;\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void defaultSuggestInterval() throws Exception {\n        final String nodeType = \"nt:unstructured\";\n\n        createSuggestIndex(nodeType);\n        session.save();\n\n        //wait for documented time before suggestions are refreshed\n        clock.waitUntil(clock.getTime() + TimeUnit.MINUTES.toMillis(10));\n        clock.getTime();//get one more tick\n\n        root.addNode(\"indexedNode\", nodeType);\n        session.save();\n\n        Set<String> suggestions = getSuggestions(nodeType, \"indexedn\");\n\n        assertEquals(1, suggestions.size());\n        assertEquals(\"indexedNode\", suggestions.iterator().next());\n    }","id":64723,"modified_method":"@Test\n    public void defaultSuggestInterval() throws Exception {\n        final String nodeType = \"nt:unstructured\";\n\n        //initial data\n        createSuggestIndex(nodeType);\n        root.commit();\n\n        //wait for documented time before suggestions are refreshed\n        clock.waitUntil(clock.getTime() + TimeUnit.MINUTES.toMillis(10));\n        clock.getTime();//get one more tick\n\n        //add a node... this should kick in a suggestions udpate too as enough time has passed\n        root.getTree(\"/\").addChild(\"indexedNode\")\n                .setProperty(JcrConstants.JCR_PRIMARYTYPE, nodeType);\n        root.commit();\n\n        Set<String> suggestions = getSuggestions(nodeType, \"indexedn\");\n\n        assertEquals(1, suggestions.size());\n        assertEquals(\"indexedNode\", suggestions.iterator().next());\n    }","commit_id":"9a109aa3120f456649557dcaed46ccd849d0b683","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@NotNull\n  private static List<GithubAuthorization> getAllTokens(@NotNull GithubConnection connection) throws IOException {\n    try {\n      String path = \"/authorizations\";\n\n      PagedRequest<GithubAuthorization> request =\n        new PagedRequest<>(path, GithubAuthorization.class, GithubAuthorizationRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get available tokens\");\n      throw e;\n    }\n  }","id":64724,"modified_method":"@NotNull\n  private static List<GithubAuthorization> getAllTokens(@NotNull GithubConnection connection) throws IOException {\n    try {\n      String path = \"/authorizations\";\n\n      PagedRequest<GithubAuthorization> request = new PagedRequest<>(path, GithubAuthorization[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get available tokens\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static PagedRequest<GithubPullRequest> getPullRequests(@NotNull String user, @NotNull String repo) {\n    String path = \"/repos/\" + user + \"/\" + repo + \"/pulls?\" + PER_PAGE;\n\n    return new PagedRequest<>(path, GithubPullRequest.class, GithubPullRequestRaw[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n  }","id":64725,"modified_method":"@NotNull\n  public static PagedRequest<GithubPullRequest> getPullRequests(@NotNull String user, @NotNull String repo) {\n    String path = \"/repos/\" + user + \"/\" + repo + \"/pulls?\" + PER_PAGE;\n\n    return new PagedRequest<>(path, GithubPullRequest[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubIssue getIssue(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo, @NotNull String id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id;\n\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return createDataFromRaw(fromJson(result, GithubIssueRaw.class), GithubIssue.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get issue info: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64726,"modified_method":"@NotNull\n  public static GithubIssue getIssue(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo, @NotNull String id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id;\n\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return fromJson(result, GithubIssue.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get issue info: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  /*\n   * All issues - open and closed\n   */\n  public static List<GithubIssue> getIssuesQueried(@NotNull GithubConnection connection,\n                                                   @NotNull String user,\n                                                   @NotNull String repo,\n                                                   @Nullable String assignedUser,\n                                                   @Nullable String query,\n                                                   boolean withClosed) throws IOException {\n    try {\n      String state = withClosed ? \"\" : \" state:open\";\n      String assignee = StringUtil.isEmptyOrSpaces(assignedUser) ? \"\" : \" assignee:\" + assignedUser;\n      query = URLEncoder.encode(\"repo:\" + user + \"/\" + repo + state + assignee + \" \" + query, CharsetToolkit.UTF8);\n      String path = \"/search/issues?q=\" + query;\n\n      //TODO: Use bodyHtml for issues - GitHub does not support this feature for SearchApi yet\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return createDataFromRaw(fromJson(result, GithubIssuesSearchResultRaw.class), GithubIssuesSearchResult.class).getIssues();\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get queried issues: \" + user + \"/\" + repo + \" - \" + query);\n      throw e;\n    }\n  }","id":64727,"modified_method":"@NotNull\n  /*\n   * All issues - open and closed\n   */\n  public static List<GithubIssue> getIssuesQueried(@NotNull GithubConnection connection,\n                                                   @NotNull String user,\n                                                   @NotNull String repo,\n                                                   @Nullable String assignedUser,\n                                                   @Nullable String query,\n                                                   boolean withClosed) throws IOException {\n    try {\n      String state = withClosed ? \"\" : \" state:open\";\n      String assignee = StringUtil.isEmptyOrSpaces(assignedUser) ? \"\" : \" assignee:\" + assignedUser;\n      query = URLEncoder.encode(\"repo:\" + user + \"/\" + repo + state + assignee + \" \" + query, CharsetToolkit.UTF8);\n      String path = \"/search/issues?q=\" + query;\n\n      //TODO: Use bodyHtml for issues - GitHub does not support this feature for SearchApi yet\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return fromJson(result, GithubIssuesSearchResult.class).getIssues();\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get queried issues: \" + user + \"/\" + repo + \" - \" + query);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubGist createGist(@NotNull GithubConnection connection,\n                                      @NotNull List<GithubGistRequest.FileContent> contents,\n                                      @NotNull String description,\n                                      boolean isPrivate) throws IOException {\n    try {\n      String request = gson.toJson(new GithubGistRequest(contents, description, !isPrivate));\n      return createDataFromRaw(fromJson(connection.postRequest(\"/gists\", request, ACCEPT_V3_JSON), GithubGistRaw.class), GithubGist.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create gist\");\n      throw e;\n    }\n  }","id":64728,"modified_method":"@NotNull\n  public static GithubGist createGist(@NotNull GithubConnection connection,\n                                      @NotNull List<GithubGistRequest.FileContent> contents,\n                                      @NotNull String description,\n                                      boolean isPrivate) throws IOException {\n    try {\n      String request = gson.toJson(new GithubGistRequest(contents, description, !isPrivate));\n      return fromJson(connection.postRequest(\"/gists\", request, ACCEPT_V3_JSON), GithubGist.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create gist\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubRepoDetailed getDetailedRepoInfo(@NotNull GithubConnection connection, @NotNull String owner, @NotNull String name)\n    throws IOException {\n    try {\n      final String request = \"/repos/\" + owner + \"/\" + name;\n\n      JsonElement jsonObject = connection.getRequest(request, ACCEPT_V3_JSON);\n\n      return createDataFromRaw(fromJson(jsonObject, GithubRepoRaw.class), GithubRepoDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get repository info: \" + owner + \"/\" + name);\n      throw e;\n    }\n  }","id":64729,"modified_method":"@NotNull\n  public static GithubRepoDetailed getDetailedRepoInfo(@NotNull GithubConnection connection, @NotNull String owner, @NotNull String name)\n    throws IOException {\n    try {\n      final String request = \"/repos/\" + owner + \"/\" + name;\n\n      JsonElement jsonObject = connection.getRequest(request, ACCEPT_V3_JSON);\n\n      return fromJson(jsonObject, GithubRepoDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get repository info: \" + owner + \"/\" + name);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubIssueComment> getIssueComments(@NotNull GithubConnection connection,\n                                                          @NotNull String user,\n                                                          @NotNull String repo,\n                                                          long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id + \"/comments?\" + PER_PAGE;\n\n      PagedRequest<GithubIssueComment> request =\n        new PagedRequest<>(path, GithubIssueComment.class, GithubIssueCommentRaw[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get issue comments: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64730,"modified_method":"@NotNull\n  public static List<GithubIssueComment> getIssueComments(@NotNull GithubConnection connection,\n                                                          @NotNull String user,\n                                                          @NotNull String repo,\n                                                          long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id + \"/comments?\" + PER_PAGE;\n\n      PagedRequest<GithubIssueComment> request = new PagedRequest<>(path, GithubIssueComment[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get issue comments: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubPullRequest getPullRequest(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo, int id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id;\n      return createDataFromRaw(fromJson(connection.getRequest(path, ACCEPT_V3_JSON_HTML_MARKUP), GithubPullRequestRaw.class),\n                               GithubPullRequest.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request info: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64731,"modified_method":"@NotNull\n  public static GithubPullRequest getPullRequest(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo, int id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id;\n      return fromJson(connection.getRequest(path, ACCEPT_V3_JSON_HTML_MARKUP), GithubPullRequest.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request info: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubBranch> getRepoBranches(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/branches?\" + PER_PAGE;\n\n      PagedRequest<GithubBranch> request =\n        new PagedRequest<>(path, GithubBranch.class, GithubBranchRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get repository branches: \" + user + \"/\" + repo);\n      throw e;\n    }\n  }","id":64732,"modified_method":"@NotNull\n  public static List<GithubBranch> getRepoBranches(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/branches?\" + PER_PAGE;\n\n      PagedRequest<GithubBranch> request = new PagedRequest<>(path, GithubBranch[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get repository branches: \" + user + \"/\" + repo);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubCommit> getPullRequestCommits(@NotNull GithubConnection connection,\n                                                         @NotNull String user,\n                                                         @NotNull String repo,\n                                                         long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/commits?\" + PER_PAGE;\n\n      PagedRequest<GithubCommit> request =\n        new PagedRequest<>(path, GithubCommit.class, GithubCommitRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request commits: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64733,"modified_method":"@NotNull\n  public static List<GithubCommit> getPullRequestCommits(@NotNull GithubConnection connection,\n                                                         @NotNull String user,\n                                                         @NotNull String repo,\n                                                         long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/commits?\" + PER_PAGE;\n\n      PagedRequest<GithubCommit> request = new PagedRequest<>(path, GithubCommit[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request commits: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubPullRequest> getPullRequests(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls?\" + PER_PAGE;\n\n      PagedRequest<GithubPullRequest> request =\n        new PagedRequest<>(path, GithubPullRequest.class, GithubPullRequestRaw[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull requests\" + user + \"/\" + repo);\n      throw e;\n    }\n  }","id":64734,"modified_method":"@NotNull\n  public static List<GithubPullRequest> getPullRequests(@NotNull GithubConnection connection, @NotNull String user, @NotNull String repo)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls?\" + PER_PAGE;\n\n      PagedRequest<GithubPullRequest> request = new PagedRequest<>(path, GithubPullRequest[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull requests\" + user + \"/\" + repo);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubFile> getPullRequestFiles(@NotNull GithubConnection connection,\n                                                     @NotNull String user,\n                                                     @NotNull String repo,\n                                                     long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/files?\" + PER_PAGE;\n\n      PagedRequest<GithubFile> request = new PagedRequest<>(path, GithubFile.class, GithubFileRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request files: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64735,"modified_method":"@NotNull\n  public static List<GithubFile> getPullRequestFiles(@NotNull GithubConnection connection,\n                                                     @NotNull String user,\n                                                     @NotNull String repo,\n                                                     long id)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/files?\" + PER_PAGE;\n\n      PagedRequest<GithubFile> request = new PagedRequest<>(path, GithubFile[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request files: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubUserDetailed getCurrentUserDetailed(@NotNull GithubConnection connection) throws IOException {\n    try {\n      JsonElement result = connection.getRequest(\"/user\", ACCEPT_V3_JSON);\n      return createDataFromRaw(fromJson(result, GithubUserRaw.class), GithubUserDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user info\");\n      throw e;\n    }\n  }","id":64736,"modified_method":"@NotNull\n  public static GithubUserDetailed getCurrentUserDetailed(@NotNull GithubConnection connection) throws IOException {\n    try {\n      JsonElement result = connection.getRequest(\"/user\", ACCEPT_V3_JSON);\n      return fromJson(result, GithubUserDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user info\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubRepo createRepo(@NotNull GithubConnection connection,\n                                      @NotNull String name,\n                                      @NotNull String description,\n                                      boolean isPrivate)\n    throws IOException {\n    try {\n      String path = \"/user/repos\";\n\n      GithubRepoRequest request = new GithubRepoRequest(name, description, isPrivate);\n\n      return createDataFromRaw(fromJson(connection.postRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubRepoRaw.class),\n                               GithubRepo.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create repository: \" + name);\n      throw e;\n    }\n  }","id":64737,"modified_method":"@NotNull\n  public static GithubRepo createRepo(@NotNull GithubConnection connection,\n                                      @NotNull String name,\n                                      @NotNull String description,\n                                      boolean isPrivate)\n    throws IOException {\n    try {\n      String path = \"/user/repos\";\n\n      GithubRepoRequest request = new GithubRepoRequest(name, description, isPrivate);\n\n      return fromJson(connection.postRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubRepo.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create repository: \" + name);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static GithubAuthorization updateTokenScopes(@NotNull GithubConnection connection,\n                                                       @NotNull GithubAuthorization token,\n                                                       @NotNull Collection<String> scopes) throws IOException {\n    try {\n      String path = \"/authorizations/\" + token.getId();\n\n      GithubAuthorizationUpdateRequest request = new GithubAuthorizationUpdateRequest(new ArrayList<>(scopes));\n\n      return createDataFromRaw(fromJson(connection.patchRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubAuthorizationRaw.class),\n                               GithubAuthorization.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't update token: scopes - \" + scopes);\n      throw e;\n    }\n  }","id":64738,"modified_method":"@NotNull\n  private static GithubAuthorization updateTokenScopes(@NotNull GithubConnection connection,\n                                                       @NotNull GithubAuthorization token,\n                                                       @NotNull Collection<String> scopes) throws IOException {\n    try {\n      String path = \"/authorizations/\" + token.getId();\n\n      GithubAuthorizationUpdateRequest request = new GithubAuthorizationUpdateRequest(new ArrayList<>(scopes));\n\n      return fromJson(connection.patchRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubAuthorization.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't update token: scopes - \" + scopes);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubRepo> getForks(@NotNull GithubConnection connection, @NotNull String owner, @NotNull String name)\n    throws IOException {\n    String path = \"/repos/\" + owner + \"/\" + name + \"/forks?\" + PER_PAGE;\n    PagedRequest<GithubRepo> requestWatched =\n      new PagedRequest<>(path, GithubRepo.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n    return requestWatched.getAll(connection);\n  }","id":64739,"modified_method":"@NotNull\n  public static List<GithubRepo> getForks(@NotNull GithubConnection connection, @NotNull String owner, @NotNull String name)\n    throws IOException {\n    String path = \"/repos/\" + owner + \"/\" + name + \"/forks?\" + PER_PAGE;\n    PagedRequest<GithubRepo> requestWatched = new PagedRequest<>(path, GithubRepo[].class, ACCEPT_V3_JSON);\n    return requestWatched.getAll(connection);\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static GithubRepo findForkByUser(@NotNull GithubConnection connection,\n                                          @NotNull String user,\n                                          @NotNull String repo,\n                                          @NotNull String forkUser) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/forks?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n\n      while (request.hasNext()) {\n        for (GithubRepo fork : request.next(connection)) {\n          if (StringUtil.equalsIgnoreCase(fork.getUserName(), forkUser)) {\n            return fork;\n          }\n        }\n      }\n\n      return null;\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't find fork by user: \" + user + \"/\" + repo + \" - \" + forkUser);\n      throw e;\n    }\n  }","id":64740,"modified_method":"@Nullable\n  public static GithubRepo findForkByUser(@NotNull GithubConnection connection,\n                                          @NotNull String user,\n                                          @NotNull String repo,\n                                          @NotNull String forkUser) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/forks?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo[].class, ACCEPT_V3_JSON);\n\n      while (request.hasNext()) {\n        for (GithubRepo fork : request.next(connection)) {\n          if (StringUtil.equalsIgnoreCase(fork.getUserName(), forkUser)) {\n            return fork;\n          }\n        }\n      }\n\n      return null;\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't find fork by user: \" + user + \"/\" + repo + \" - \" + forkUser);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubGist getGist(@NotNull GithubConnection connection, @NotNull String id) throws IOException {\n    try {\n      String path = \"/gists/\" + id;\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return createDataFromRaw(fromJson(result, GithubGistRaw.class), GithubGist.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get gist info: id \" + id);\n      throw e;\n    }\n  }","id":64741,"modified_method":"@NotNull\n  public static GithubGist getGist(@NotNull GithubConnection connection, @NotNull String id) throws IOException {\n    try {\n      String path = \"/gists/\" + id;\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n\n      return fromJson(result, GithubGist.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get gist info: id \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubCommitComment> getPullRequestComments(@NotNull GithubConnection connection,\n                                                                 @NotNull String user,\n                                                                 @NotNull String repo,\n                                                                 long id) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/comments\";\n\n      PagedRequest<GithubCommitComment> request =\n        new PagedRequest<>(path, GithubCommitComment.class, GithubCommitCommentRaw[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request comments: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","id":64742,"modified_method":"@NotNull\n  public static List<GithubCommitComment> getPullRequestComments(@NotNull GithubConnection connection,\n                                                                 @NotNull String user,\n                                                                 @NotNull String repo,\n                                                                 long id) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls/\" + id + \"/comments\";\n\n      PagedRequest<GithubCommitComment> request = new PagedRequest<>(path, GithubCommitComment[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get pull request comments: \" + user + \"/\" + repo + \" - \" + id);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubPullRequest createPullRequest(@NotNull GithubConnection connection,\n                                                    @NotNull String user,\n                                                    @NotNull String repo,\n                                                    @NotNull String title,\n                                                    @NotNull String description,\n                                                    @NotNull String head,\n                                                    @NotNull String base) throws IOException {\n    try {\n      String request = gson.toJson(new GithubPullRequestRequest(title, description, head, base));\n      return createDataFromRaw(\n        fromJson(connection.postRequest(\"/repos/\" + user + \"/\" + repo + \"/pulls\", request, ACCEPT_V3_JSON), GithubPullRequestRaw.class),\n        GithubPullRequest.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create pull request\");\n      throw e;\n    }\n  }","id":64743,"modified_method":"@NotNull\n  public static GithubPullRequest createPullRequest(@NotNull GithubConnection connection,\n                                                    @NotNull String user,\n                                                    @NotNull String repo,\n                                                    @NotNull String title,\n                                                    @NotNull String description,\n                                                    @NotNull String head,\n                                                    @NotNull String base) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/pulls\";\n      String request = gson.toJson(new GithubPullRequestRequest(title, description, head, base));\n      return fromJson(connection.postRequest(path, request, ACCEPT_V3_JSON), GithubPullRequest.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create pull request\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubUser getCurrentUser(@NotNull GithubConnection connection) throws IOException {\n    try {\n      JsonElement result = connection.getRequest(\"/user\", ACCEPT_V3_JSON);\n      return createDataFromRaw(fromJson(result, GithubUserRaw.class), GithubUser.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user info\");\n      throw e;\n    }\n  }","id":64744,"modified_method":"@NotNull\n  public static GithubUser getCurrentUser(@NotNull GithubConnection connection) throws IOException {\n    try {\n      JsonElement result = connection.getRequest(\"/user\", ACCEPT_V3_JSON);\n      return fromJson(result, GithubUser.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user info\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Gson initGson() {\n    GsonBuilder builder = new GsonBuilder();\n    builder.setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n    return builder.create();\n  }","id":64745,"modified_method":"private static Gson initGson() {\n    GsonBuilder builder = new GsonBuilder();\n    builder.setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n    builder.registerTypeAdapterFactory(NullCheckingFactory.INSTANCE);\n    return builder.create();\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static GithubAuthorization getNewScopedToken(@NotNull GithubConnection connection,\n                                                       @NotNull Collection<String> scopes,\n                                                       @NotNull String note)\n    throws IOException {\n    try {\n      String path = \"/authorizations\";\n\n      GithubAuthorizationCreateRequest request = new GithubAuthorizationCreateRequest(new ArrayList<>(scopes), note, null);\n\n      return createDataFromRaw(fromJson(connection.postRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubAuthorizationRaw.class),\n                               GithubAuthorization.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create token: scopes - \" + scopes + \" - note \" + note);\n      throw e;\n    }\n  }","id":64746,"modified_method":"@NotNull\n  private static GithubAuthorization getNewScopedToken(@NotNull GithubConnection connection,\n                                                       @NotNull Collection<String> scopes,\n                                                       @NotNull String note)\n    throws IOException {\n    try {\n      String path = \"/authorizations\";\n\n      GithubAuthorizationCreateRequest request = new GithubAuthorizationCreateRequest(new ArrayList<>(scopes), note, null);\n\n      return fromJson(connection.postRequest(path, gson.toJson(request), ACCEPT_V3_JSON), GithubAuthorization.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't create token: scopes - \" + scopes + \" - note \" + note);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubRepo> getUserRepos(@NotNull GithubConnection connection, @NotNull String user) throws IOException {\n    try {\n      String path = \"/users/\" + user + \"/repos?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user repositories: \" + user);\n      throw e;\n    }\n  }","id":64747,"modified_method":"@NotNull\n  public static List<GithubRepo> getUserRepos(@NotNull GithubConnection connection, @NotNull String user) throws IOException {\n    try {\n      String path = \"/users/\" + user + \"/repos?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user repositories: \" + user);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubIssue> getIssuesAssigned(@NotNull GithubConnection connection,\n                                                    @NotNull String user,\n                                                    @NotNull String repo,\n                                                    @Nullable String assigned,\n                                                    int max,\n                                                    boolean withClosed) throws IOException {\n    try {\n      String state = \"state=\" + (withClosed ? \"all\" : \"open\");\n      String path;\n      if (StringUtil.isEmptyOrSpaces(assigned)) {\n        path = \"/repos/\" + user + \"/\" + repo + \"/issues?\" + PER_PAGE + \"&\" + state;\n      }\n      else {\n        path = \"/repos/\" + user + \"/\" + repo + \"/issues?assignee=\" + assigned + \"&\" + PER_PAGE + \"&\" + state;\n      }\n\n      PagedRequest<GithubIssue> request = new PagedRequest<>(path, GithubIssue.class, GithubIssueRaw[].class, ACCEPT_V3_JSON);\n\n      List<GithubIssue> result = new ArrayList<>();\n      while (request.hasNext() && max > result.size()) {\n        result.addAll(request.next(connection));\n      }\n      return result;\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get assigned issues: \" + user + \"/\" + repo + \" - \" + assigned);\n      throw e;\n    }\n  }","id":64748,"modified_method":"@NotNull\n  public static List<GithubIssue> getIssuesAssigned(@NotNull GithubConnection connection,\n                                                    @NotNull String user,\n                                                    @NotNull String repo,\n                                                    @Nullable String assigned,\n                                                    int max,\n                                                    boolean withClosed) throws IOException {\n    try {\n      String state = \"state=\" + (withClosed ? \"all\" : \"open\");\n      String path;\n      if (StringUtil.isEmptyOrSpaces(assigned)) {\n        path = \"/repos/\" + user + \"/\" + repo + \"/issues?\" + PER_PAGE + \"&\" + state;\n      }\n      else {\n        path = \"/repos/\" + user + \"/\" + repo + \"/issues?assignee=\" + assigned + \"&\" + PER_PAGE + \"&\" + state;\n      }\n\n      PagedRequest<GithubIssue> request = new PagedRequest<>(path, GithubIssue[].class, ACCEPT_V3_JSON);\n\n      List<GithubIssue> result = new ArrayList<>();\n      while (request.hasNext() && max > result.size()) {\n        result.addAll(request.next(connection));\n      }\n      return result;\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get assigned issues: \" + user + \"/\" + repo + \" - \" + assigned);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void setIssueState(@NotNull GithubConnection connection,\n                                   @NotNull String user,\n                                   @NotNull String repo,\n                                   @NotNull String id,\n                                   boolean open)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id;\n\n      GithubChangeIssueStateRequest request = new GithubChangeIssueStateRequest(open ? \"open\" : \"closed\");\n\n      JsonElement result = connection.patchRequest(path, gson.toJson(request), ACCEPT_V3_JSON);\n\n      createDataFromRaw(fromJson(result, GithubIssueRaw.class), GithubIssue.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't set issue state: \" + user + \"/\" + repo + \" - \" + id + \"@\" + (open ? \"open\" : \"closed\"));\n      throw e;\n    }\n  }","id":64749,"modified_method":"public static void setIssueState(@NotNull GithubConnection connection,\n                                   @NotNull String user,\n                                   @NotNull String repo,\n                                   @NotNull String id,\n                                   boolean open)\n    throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/issues/\" + id;\n\n      GithubChangeIssueStateRequest request = new GithubChangeIssueStateRequest(open ? \"open\" : \"closed\");\n\n      JsonElement result = connection.patchRequest(path, gson.toJson(request), ACCEPT_V3_JSON);\n\n      fromJson(result, GithubIssue.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't set issue state: \" + user + \"/\" + repo + \" - \" + id + \"@\" + (open ? \"open\" : \"closed\"));\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static GithubCommitDetailed getCommit(@NotNull GithubConnection connection,\n                                               @NotNull String user,\n                                               @NotNull String repo,\n                                               @NotNull String sha) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/commits/\" + sha;\n\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n      return createDataFromRaw(fromJson(result, GithubCommitRaw.class), GithubCommitDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get commit info: \" + user + \"/\" + repo + \" - \" + sha);\n      throw e;\n    }\n  }","id":64750,"modified_method":"@NotNull\n  public static GithubCommitDetailed getCommit(@NotNull GithubConnection connection,\n                                               @NotNull String user,\n                                               @NotNull String repo,\n                                               @NotNull String sha) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/commits/\" + sha;\n\n      JsonElement result = connection.getRequest(path, ACCEPT_V3_JSON);\n      return fromJson(result, GithubCommitDetailed.class);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get commit info: \" + user + \"/\" + repo + \" - \" + sha);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubCommitComment> getCommitComments(@NotNull GithubConnection connection,\n                                                            @NotNull String user,\n                                                            @NotNull String repo,\n                                                            @NotNull String sha) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/commits/\" + sha + \"/comments\";\n\n      PagedRequest<GithubCommitComment> request =\n        new PagedRequest<>(path, GithubCommitComment.class, GithubCommitCommentRaw[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get commit comments: \" + user + \"/\" + repo + \" - \" + sha);\n      throw e;\n    }\n  }","id":64751,"modified_method":"@NotNull\n  public static List<GithubCommitComment> getCommitComments(@NotNull GithubConnection connection,\n                                                            @NotNull String user,\n                                                            @NotNull String repo,\n                                                            @NotNull String sha) throws IOException {\n    try {\n      String path = \"/repos/\" + user + \"/\" + repo + \"/commits/\" + sha + \"/comments\";\n\n      PagedRequest<GithubCommitComment> request = new PagedRequest<>(path, GithubCommitComment[].class, ACCEPT_V3_JSON_HTML_MARKUP);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get commit comments: \" + user + \"/\" + repo + \" - \" + sha);\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubRepoOrg> getMembershipRepos(@NotNull GithubConnection connection) throws IOException {\n    String orgsPath = \"/user/orgs?\" + PER_PAGE;\n    PagedRequest<GithubOrg> orgsRequest = new PagedRequest<>(orgsPath, GithubOrg.class, GithubOrgRaw[].class);\n\n    List<GithubRepoOrg> repos = new ArrayList<>();\n    for (GithubOrg org : orgsRequest.getAll(connection)) {\n      String path = \"/orgs/\" + org.getLogin() + \"/repos?type=member&\" + PER_PAGE;\n      PagedRequest<GithubRepoOrg> request =\n        new PagedRequest<>(path, GithubRepoOrg.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n      repos.addAll(request.getAll(connection));\n    }\n\n    return repos;\n  }","id":64752,"modified_method":"@NotNull\n  public static List<GithubRepoOrg> getMembershipRepos(@NotNull GithubConnection connection) throws IOException {\n    String orgsPath = \"/user/orgs?\" + PER_PAGE;\n    PagedRequest<GithubOrg> orgsRequest = new PagedRequest<>(orgsPath, GithubOrg[].class);\n\n    List<GithubRepoOrg> repos = new ArrayList<>();\n    for (GithubOrg org : orgsRequest.getAll(connection)) {\n      String path = \"/orgs/\" + org.getLogin() + \"/repos?type=member&\" + PER_PAGE;\n      PagedRequest<GithubRepoOrg> request = new PagedRequest<>(path, GithubRepoOrg[].class, ACCEPT_V3_JSON);\n      repos.addAll(request.getAll(connection));\n    }\n\n    return repos;\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubRepo> getUserRepos(@NotNull GithubConnection connection) throws IOException {\n    try {\n      String path = \"/user/repos?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user repositories\");\n      throw e;\n    }\n  }","id":64753,"modified_method":"@NotNull\n  public static List<GithubRepo> getUserRepos(@NotNull GithubConnection connection) throws IOException {\n    try {\n      String path = \"/user/repos?\" + PER_PAGE;\n\n      PagedRequest<GithubRepo> request = new PagedRequest<>(path, GithubRepo[].class, ACCEPT_V3_JSON);\n\n      return request.getAll(connection);\n    }\n    catch (GithubConfusingException e) {\n      e.setDetails(\"Can't get user repositories\");\n      throw e;\n    }\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static List<GithubRepo> getWatchedRepos(@NotNull GithubConnection connection) throws IOException {\n    String pathWatched = \"/user/subscriptions?\" + PER_PAGE;\n    PagedRequest<GithubRepo> requestWatched =\n      new PagedRequest<>(pathWatched, GithubRepo.class, GithubRepoRaw[].class, ACCEPT_V3_JSON);\n    return requestWatched.getAll(connection);\n  }","id":64754,"modified_method":"@NotNull\n  public static List<GithubRepo> getWatchedRepos(@NotNull GithubConnection connection) throws IOException {\n    String pathWatched = \"/user/subscriptions?\" + PER_PAGE;\n    PagedRequest<GithubRepo> requestWatched = new PagedRequest<>(pathWatched, GithubRepo[].class, ACCEPT_V3_JSON);\n    return requestWatched.getAll(connection);\n  }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    public List<T> next(@NotNull GithubConnection connection) throws IOException {\n      String url;\n      if (myFirstRequest) {\n        url = getRequestUrl(connection.getHost(), myPath);\n        myFirstRequest = false;\n      }\n      else {\n        if (myNextPage == null) throw new NoSuchElementException();\n        url = myNextPage;\n        myNextPage = null;\n      }\n\n      ResponsePage response = connection.doRequest(url, null, myHeaders, HttpVerb.GET);\n\n      if (response.getJsonElement() == null) {\n        throw new GithubConfusingException(\"Empty response\");\n      }\n\n      if (!response.getJsonElement().isJsonArray()) {\n        throw new GithubJsonException(\"Wrong json type: expected JsonArray\", new Exception(response.getJsonElement().toString()));\n      }\n\n      myNextPage = response.getNextPage();\n\n      List<T> result = new ArrayList<>();\n      for (DataConstructor raw : fromJson(response.getJsonElement().getAsJsonArray(), myRawArray)) {\n        result.add(createDataFromRaw(raw, myResult));\n      }\n      return result;\n    }","id":64755,"modified_method":"@NotNull\n    public List<T> next(@NotNull GithubConnection connection) throws IOException {\n      String url;\n      if (myFirstRequest) {\n        url = getRequestUrl(connection.getHost(), myPath);\n        myFirstRequest = false;\n      }\n      else {\n        if (myNextPage == null) throw new NoSuchElementException();\n        url = myNextPage;\n        myNextPage = null;\n      }\n\n      ResponsePage response = connection.doRequest(url, null, myHeaders, HttpVerb.GET);\n\n      if (response.getJsonElement() == null) {\n        throw new GithubConfusingException(\"Empty response\");\n      }\n\n      if (!response.getJsonElement().isJsonArray()) {\n        throw new GithubJsonException(\"Wrong json type: expected JsonArray\", new Exception(response.getJsonElement().toString()));\n      }\n\n      myNextPage = response.getNextPage();\n\n      T[] result = fromJson(response.getJsonElement().getAsJsonArray(), myTypeArray);\n      return Arrays.asList(result);\n    }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PagedRequest(@NotNull String path,\n                        @NotNull Class<T> result,\n                        @NotNull Class<? extends DataConstructor[]> rawArray,\n                        @NotNull Header... headers) {\n      myPath = path;\n      myResult = result;\n      myRawArray = rawArray;\n      myHeaders = Arrays.asList(headers);\n    }","id":64756,"modified_method":"public PagedRequest(@NotNull String path,\n                        @NotNull Class<? extends T[]> typeArray,\n                        @NotNull Header... headers) {\n      myPath = path;\n      myTypeArray = typeArray;\n      myHeaders = Arrays.asList(headers);\n    }","commit_id":"d36dc73a7fecc330d354b2e747f72b98928cd7e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void removeScheme(@NotNull T scheme) {\n    for (int i = 0, n = mySchemes.size(); i < n; i++) {\n      T s = mySchemes.get(i);\n      if (scheme.getName().equals(s.getName())) {\n        schemeDeleted(s);\n        mySchemes.remove(i);\n        break;\n      }\n    }\n  }","id":64757,"modified_method":"@Override\n  public void removeScheme(@NotNull T scheme) {\n    for (int i = 0, n = mySchemes.size(); i < n; i++) {\n      T s = mySchemes.get(i);\n      if (scheme.getName().equals(s.getName())) {\n        if (myCurrentScheme == s) {\n          myCurrentScheme = null;\n        }\n\n        if (s instanceof ExternalizableScheme) {\n          ExternalInfo info = mySchemeToInfo.remove((ExternalizableScheme)s);\n          if (info != null) {\n            ContainerUtilRt.addIfNotNull(myFilesToDelete, info.getCurrentFileName());\n          }\n        }\n        mySchemes.remove(i);\n        break;\n      }\n    }\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void readSchemesFromProviders(@NotNull Map<String, E> result) {\n    assert myProvider != null;\n    for (String subPath : myProvider.listSubFiles(myFileSpec, myRoamingType)) {\n      try {\n        Element element = loadElementOrNull(myProvider.loadContent(getFileFullPath(subPath), myRoamingType));\n        if (element == null) {\n          return;\n        }\n\n        E scheme = readScheme(element, true);\n        boolean fileRenamed = false;\n        assert scheme != null;\n        T existing = findSchemeByName(scheme.getName());\n        if (existing instanceof ExternalizableScheme) {\n          String currentFileName = getCurrentFileName((ExternalizableScheme)existing);\n          if (currentFileName != null && !currentFileName.equals(subPath)) {\n            deleteServerFile(subPath);\n            subPath = currentFileName;\n            fileRenamed = true;\n          }\n        }\n        String fileName = checkFileNameIsFree(subPath, scheme.getName());\n        if (!fileRenamed && !fileName.equals(subPath)) {\n          deleteServerFile(subPath);\n        }\n\n        loadScheme(scheme, false, fileName);\n        getExternalInfo(scheme).markRemote();\n        result.put(scheme.getName(), scheme);\n      }\n      catch (Exception e) {\n        LOG.info(\"Cannot load data from stream provider: \" + e.getMessage());\n      }\n    }\n  }","id":64758,"modified_method":"private void readSchemesFromProviders(@NotNull Map<String, E> result) {\n    assert myProvider != null;\n    for (String subPath : myProvider.listSubFiles(myFileSpec, myRoamingType)) {\n      try {\n        Element element = loadElementOrNull(myProvider.loadContent(getFileFullPath(subPath), myRoamingType));\n        if (element == null) {\n          return;\n        }\n\n        E scheme = readScheme(element, true);\n        boolean fileRenamed = false;\n        assert scheme != null;\n        T existing = findSchemeByName(scheme.getName());\n        if (existing instanceof ExternalizableScheme) {\n          String currentFileName = getCurrentFileName((ExternalizableScheme)existing);\n          if (currentFileName != null && !currentFileName.equals(subPath)) {\n            deleteServerFile(subPath);\n            subPath = currentFileName;\n            fileRenamed = true;\n          }\n        }\n        String fileName = checkFileNameIsFree(subPath, scheme.getName());\n        if (!fileRenamed && !fileName.equals(subPath)) {\n          deleteServerFile(subPath);\n        }\n\n        loadScheme(scheme, false, fileName);\n        result.put(scheme.getName(), scheme);\n      }\n      catch (Exception e) {\n        LOG.info(\"Cannot load data from stream provider: \" + e.getMessage());\n      }\n    }\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void setSchemes(@NotNull final List<T> schemes, @Nullable Condition<T> removeCondition) {\n    if (removeCondition == null) {\n      doRemoveAll();\n    }\n    else {\n      for (int i = 0; i < schemes.size(); i++) {\n        T scheme = schemes.get(i);\n        if (removeCondition.value(scheme)) {\n          schemeDeleted(scheme);\n          mySchemes.remove(i);\n        }\n      }\n    }\n\n    mySchemeToInfo.retainEntries(new TObjectObjectProcedure<ExternalizableScheme, ExternalInfo>() {\n      @Override\n      public boolean execute(ExternalizableScheme scheme, ExternalInfo b) {\n        // yes, by equals, not by identity\n        //noinspection SuspiciousMethodCalls\n        return schemes.contains(scheme);\n      }\n    });\n\n    mySchemes.ensureCapacity(schemes.size());\n    for (T scheme : schemes) {\n      mySchemes.add(scheme);\n      schemeAdded(scheme);\n    }\n\n    if (myCurrentSchemeName != null) {\n      myCurrentScheme = findSchemeByName(myCurrentSchemeName);\n      if (myCurrentScheme != null) {\n        return;\n      }\n    }\n\n    myCurrentScheme = mySchemes.isEmpty() ? null : mySchemes.get(0);\n    myCurrentSchemeName = myCurrentScheme == null ? null : myCurrentScheme.getName();\n  }","id":64759,"modified_method":"@Override\n  public void setSchemes(@NotNull final List<T> schemes, @Nullable Condition<T> removeCondition) {\n    if (removeCondition == null) {\n      mySchemes.clear();\n    }\n    else {\n      for (int i = schemes.size() - 1; i >= 0; i--) {\n        T scheme = schemes.get(i);\n        if (removeCondition.value(scheme)) {\n          mySchemes.remove(i);\n        }\n      }\n    }\n\n    mySchemeToInfo.retainEntries(new TObjectObjectProcedure<ExternalizableScheme, ExternalInfo>() {\n      @Override\n      public boolean execute(ExternalizableScheme scheme, ExternalInfo info) {\n        // yes, by equals, not by identity\n        //noinspection SuspiciousMethodCalls\n        boolean keep = schemes.contains(scheme);\n        if (!keep && info.getCurrentFileName() != null) {\n          myFilesToDelete.remove(info.getCurrentFileName());\n        }\n        return keep;\n      }\n    });\n\n    mySchemes.ensureCapacity(schemes.size());\n    for (T scheme : schemes) {\n      mySchemes.add(scheme);\n      schemeAdded(scheme);\n    }\n\n    if (myCurrentSchemeName != null) {\n      myCurrentScheme = findSchemeByName(myCurrentSchemeName);\n      if (myCurrentScheme != null) {\n        return;\n      }\n    }\n\n    myCurrentScheme = mySchemes.isEmpty() ? null : mySchemes.get(0);\n    myCurrentSchemeName = myCurrentScheme == null ? null : myCurrentScheme.getName();\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void addNewScheme(@NotNull T scheme, boolean replaceExisting) {\n    int toReplace = -1;\n    for (int i = 0; i < mySchemes.size(); i++) {\n      T existingScheme = mySchemes.get(i);\n      if (existingScheme.getName().equals(scheme.getName())) {\n        toReplace = i;\n        if (replaceExisting && existingScheme instanceof ExternalizableScheme && scheme instanceof ExternalizableScheme) {\n          ExternalInfo newInfo = mySchemeToInfo.get((ExternalizableScheme)existingScheme);\n          if (newInfo == null || newInfo.getCurrentFileName() == null) {\n            ExternalInfo oldInfo = mySchemeToInfo.get((ExternalizableScheme)existingScheme);\n            if (oldInfo != null) {\n              getExternalInfo((ExternalizableScheme)scheme).setCurrentFileName(oldInfo.getCurrentFileName());\n            }\n          }\n        }\n        break;\n      }\n    }\n    if (toReplace == -1) {\n      mySchemes.add(scheme);\n    }\n    else if (replaceExisting || !(scheme instanceof ExternalizableScheme)) {\n      mySchemes.set(toReplace, scheme);\n    }\n    else {\n      //noinspection unchecked\n      renameScheme((ExternalizableScheme)scheme, UniqueNameGenerator.generateUniqueName(scheme.getName(), collectExistingNames(mySchemes)));\n      mySchemes.add(scheme);\n    }\n\n    schemeAdded(scheme);\n    checkCurrentScheme(scheme);\n  }","id":64760,"modified_method":"@Override\n  public void addNewScheme(@NotNull T scheme, boolean replaceExisting) {\n    int toReplace = -1;\n    for (int i = 0; i < mySchemes.size(); i++) {\n      T existingScheme = mySchemes.get(i);\n      if (existingScheme.getName().equals(scheme.getName())) {\n        toReplace = i;\n        if (replaceExisting && existingScheme instanceof ExternalizableScheme && scheme instanceof ExternalizableScheme) {\n          ExternalInfo newInfo = mySchemeToInfo.get((ExternalizableScheme)scheme);\n          if (newInfo == null || newInfo.getCurrentFileName() == null) {\n            ExternalInfo oldInfo = mySchemeToInfo.remove((ExternalizableScheme)existingScheme);\n            if (oldInfo != null && oldInfo.getCurrentFileName() != null) {\n              getExternalInfo((ExternalizableScheme)scheme).setCurrentFileName(oldInfo.getCurrentFileName());\n            }\n          }\n        }\n        break;\n      }\n    }\n    if (toReplace == -1) {\n      mySchemes.add(scheme);\n    }\n    else if (replaceExisting || !(scheme instanceof ExternalizableScheme)) {\n      mySchemes.set(toReplace, scheme);\n    }\n    else {\n      //noinspection unchecked\n      renameScheme((ExternalizableScheme)scheme, UniqueNameGenerator.generateUniqueName(scheme.getName(), collectExistingNames(mySchemes)));\n      mySchemes.add(scheme);\n    }\n\n    schemeAdded(scheme);\n    checkCurrentScheme(scheme);\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void saveScheme(@NotNull E scheme, @NotNull UniqueNameGenerator nameGenerator) throws WriteExternalException, IOException {\n    ExternalInfo externalInfo = getExternalInfo(scheme);\n    String currentFileNameWithoutExtension = externalInfo.getCurrentFileName();\n    Parent parent = myProcessor.writeScheme(scheme);\n    Element element = parent == null || parent instanceof Element ? (Element)parent : ((Document)parent).detachRootElement();\n    if (JDOMUtil.isEmpty(element)) {\n      ContainerUtilRt.addIfNotNull(myFilesToDelete, currentFileNameWithoutExtension);\n      return;\n    }\n\n    String fileNameWithoutExtension = currentFileNameWithoutExtension;\n    if (fileNameWithoutExtension == null || isRenamed(scheme)) {\n      fileNameWithoutExtension = nameGenerator.generateUniqueName(FileUtil.sanitizeName(scheme.getName()));\n    }\n    String fileName = fileNameWithoutExtension + mySchemeExtension;\n\n    int newHash = JDOMUtil.getTreeHash(element, true);\n    if (currentFileNameWithoutExtension == fileNameWithoutExtension && newHash == externalInfo.getHash()) {\n      return;\n    }\n\n    // file will be overwritten, so, we don't need to delete it\n    myFilesToDelete.remove(fileNameWithoutExtension);\n\n    // stream provider always use LF separator\n    final BufferExposingByteArrayOutputStream byteOut = StorageUtil.writeToBytes(element, \"\\n\");\n\n    // if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)\n    boolean renamed = currentFileNameWithoutExtension != null && fileNameWithoutExtension != currentFileNameWithoutExtension && nameGenerator.value(currentFileNameWithoutExtension);\n    if (!externalInfo.isRemote()) {\n      VirtualFile file = null;\n      if (renamed) {\n        file = myDir.findChild(currentFileNameWithoutExtension + mySchemeExtension);\n        if (file != null) {\n          AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);\n          try {\n            file.rename(this, fileName);\n          }\n          finally {\n            token.finish();\n          }\n        }\n      }\n\n      if (file == null) {\n        if (myDir == null || !myDir.isValid()) {\n          myDir = DirectoryBasedStorage.createDir(myIoDir, this);\n        }\n        file = DirectoryBasedStorage.getFile(fileName, myDir, this);\n      }\n\n      AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);\n      try {\n        OutputStream out = file.getOutputStream(this);\n        try {\n          byteOut.writeTo(out);\n        }\n        finally {\n          out.close();\n        }\n      }\n      finally {\n        token.finish();\n      }\n    }\n    else if (renamed) {\n      myFilesToDelete.add(currentFileNameWithoutExtension);\n    }\n\n    externalInfo.setHash(newHash);\n    externalInfo.setPreviouslySavedName(scheme.getName());\n    externalInfo.setCurrentFileName(createFileName(fileName));\n\n    if (myProvider != null && myProvider.isEnabled()) {\n      String fileSpec = getFileFullPath(fileName);\n      if (myProvider.isApplicable(fileSpec, myRoamingType)) {\n        myProvider.saveContent(fileSpec, byteOut.getInternalBuffer(), byteOut.size(), myRoamingType, true);\n      }\n    }\n  }","id":64761,"modified_method":"private void saveScheme(@NotNull E scheme, @NotNull UniqueNameGenerator nameGenerator) throws WriteExternalException, IOException {\n    ExternalInfo externalInfo = getExternalInfo(scheme);\n    String currentFileNameWithoutExtension = externalInfo.getCurrentFileName();\n    Parent parent = myProcessor.writeScheme(scheme);\n    Element element = parent == null || parent instanceof Element ? (Element)parent : ((Document)parent).detachRootElement();\n    if (JDOMUtil.isEmpty(element)) {\n      ContainerUtilRt.addIfNotNull(myFilesToDelete, currentFileNameWithoutExtension);\n      return;\n    }\n\n    String fileNameWithoutExtension = currentFileNameWithoutExtension;\n    if (fileNameWithoutExtension == null || isRenamed(scheme)) {\n      fileNameWithoutExtension = nameGenerator.generateUniqueName(FileUtil.sanitizeName(scheme.getName()));\n    }\n    String fileName = fileNameWithoutExtension + mySchemeExtension;\n\n    int newHash = JDOMUtil.getTreeHash(element, true);\n    if (currentFileNameWithoutExtension == fileNameWithoutExtension && newHash == externalInfo.getHash()) {\n      return;\n    }\n\n    // file will be overwritten, so, we don't need to delete it\n    myFilesToDelete.remove(fileNameWithoutExtension);\n\n    // stream provider always use LF separator\n    final BufferExposingByteArrayOutputStream byteOut = StorageUtil.writeToBytes(element, \"\\n\");\n\n    String providerPath;\n    if (myProvider != null && myProvider.isEnabled()) {\n      providerPath = getFileFullPath(fileName);\n      if (!myProvider.isApplicable(providerPath, myRoamingType)) {\n        providerPath = null;\n      }\n    }\n    else {\n      providerPath = null;\n    }\n\n    // if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)\n    boolean renamed = currentFileNameWithoutExtension != null && fileNameWithoutExtension != currentFileNameWithoutExtension && nameGenerator.value(currentFileNameWithoutExtension);\n    if (providerPath == null) {\n      VirtualFile file = null;\n      if (renamed) {\n        file = myDir.findChild(currentFileNameWithoutExtension + mySchemeExtension);\n        if (file != null) {\n          AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);\n          try {\n            file.rename(this, fileName);\n          }\n          finally {\n            token.finish();\n          }\n        }\n      }\n\n      if (file == null) {\n        if (myDir == null || !myDir.isValid()) {\n          myDir = DirectoryBasedStorage.createDir(myIoDir, this);\n        }\n        file = DirectoryBasedStorage.getFile(fileName, myDir, this);\n      }\n\n      AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);\n      try {\n        OutputStream out = file.getOutputStream(this);\n        try {\n          byteOut.writeTo(out);\n        }\n        finally {\n          out.close();\n        }\n      }\n      finally {\n        token.finish();\n      }\n    }\n    else if (renamed) {\n      myFilesToDelete.add(currentFileNameWithoutExtension);\n    }\n\n    externalInfo.setHash(newHash);\n    externalInfo.setPreviouslySavedName(scheme.getName());\n    externalInfo.setCurrentFileName(createFileName(fileName));\n\n    if (providerPath != null) {\n      myProvider.saveContent(providerPath, byteOut.getInternalBuffer(), byteOut.size(), myRoamingType, true);\n    }\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void schemeAdded(@NotNull T scheme) {\n    if (!(scheme instanceof ExternalizableScheme)) {\n      return;\n    }\n\n    ExternalInfo info = mySchemeToInfo.get((ExternalizableScheme)scheme);\n    if (info != null) {\n      String fileName = info.getCurrentFileName();\n      if (fileName != null) {\n        myFilesToDelete.remove(fileName);\n      }\n    }\n\n    // todo is flag \"remote\" really need?\n    if (myProvider != null && myProvider.isEnabled()) {\n      // do not save locally\n      getExternalInfo((ExternalizableScheme)scheme).markRemote();\n    }\n  }","id":64762,"modified_method":"private void schemeAdded(@NotNull T scheme) {\n    if (!(scheme instanceof ExternalizableScheme)) {\n      return;\n    }\n\n    String fileName = getCurrentFileName((ExternalizableScheme)scheme);\n    if (fileName != null) {\n      myFilesToDelete.remove(fileName);\n    }\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void clearAllSchemes() {\n    doRemoveAll();\n  }","id":64763,"modified_method":"@Override\n  public void clearAllSchemes() {\n    mySchemeToInfo.forEachValue(new TObjectProcedure<ExternalInfo>() {\n      @Override\n      public boolean execute(ExternalInfo info) {\n        ContainerUtilRt.addIfNotNull(myFilesToDelete, info.getCurrentFileName());\n        return true;\n      }\n    });\n\n    myCurrentScheme = null;\n    mySchemes.clear();\n    mySchemeToInfo.clear();\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @NotNull\n  public Collection<String> getAllSchemeNames() {\n    List<String> names = new ArrayList<String>(mySchemes.size());\n    for (T scheme : mySchemes) {\n      names.add(scheme.getName());\n    }\n    return names;\n  }","id":64764,"modified_method":"@Override\n  @NotNull\n  public Collection<String> getAllSchemeNames() {\n    if (mySchemes.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<String> names = new ArrayList<String>(mySchemes.size());\n    for (T scheme : mySchemes) {\n      names.add(scheme.getName());\n    }\n    return names;\n  }","commit_id":"e1abac1106c18fb38200ee8f83e6034dc562a826","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @NotNull\n  public String getName() {\n    return \"Generate stubs for binary module \" + myQualifiedName;\n  }","id":64765,"modified_method":"@Override\n  @NotNull\n  public String getName() {\n    return PyBundle.message(\"sdk.gen.stubs.for.binary.modules\", myQualifiedName);\n  }","commit_id":"5ab2bd89ef14165606fad5de74b6b9ebf4eb0870","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static Sdk getPythonSdk(@NotNull final PsiReference ref) {\n    final Module module = ModuleUtilCore.findModuleForPsiElement(ref.getElement());\n    return module == null ? null : PythonSdkType.findPythonSdk(module);\n  }","id":64766,"modified_method":"@Nullable\n  private static Sdk getPythonSdk(@NotNull final PsiElement element) {\n    final Module module = ModuleUtilCore.findModuleForPsiElement(element);\n    return (module == null) ? null : PythonSdkType.findPythonSdk(module);\n  }","commit_id":"5ab2bd89ef14165606fad5de74b6b9ebf4eb0870","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private List<String> collectAssemblyReferences(PsiFile file) {\n    if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) {\n      return Collections.emptyList();\n    }\n    final List<String> result = new ArrayList<String>();\n    file.accept(new PyRecursiveElementVisitor() {\n      @Override\n      public void visitPyCallExpression(PyCallExpression node) {\n        super.visitPyCallExpression(node);\n        if (node.isCalleeText(\"AddReference\", \"AddReferenceByPartialName\")) {\n          final PyExpression[] args = node.getArguments();\n          if (args.length == 1 && args [0] instanceof PyStringLiteralExpression) {\n            result.add(((PyStringLiteralExpression) args [0]).getStringValue());\n          }\n        }\n      }\n    });\n    return result;\n  }","id":64767,"modified_method":"private List<String> collectAssemblyReferences(PsiFile file) {\n    if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) {\n      return Collections.emptyList();\n    }\n    final List<String> result = new ArrayList<String>();\n    file.accept(new PyRecursiveElementVisitor() {\n      @Override\n      public void visitPyCallExpression(PyCallExpression node) {\n        super.visitPyCallExpression(node);\n        // TODO: What if user loads it not by literal? We need to ask user for list of DLLs\n        if (node.isCalleeText(\"AddReference\", \"AddReferenceByPartialName\", \"AddReferenceByName\")) {\n          final PyExpression[] args = node.getArguments();\n          if (args.length == 1 && args [0] instanceof PyStringLiteralExpression) {\n            result.add(((PyStringLiteralExpression) args [0]).getStringValue());\n          }\n        }\n      }\n    });\n    return result;\n  }","commit_id":"5ab2bd89ef14165606fad5de74b6b9ebf4eb0870","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void registerUnresolvedReferenceProblem(@NotNull PyElement node, @NotNull final PsiReference reference,\n                                                    @NotNull HighlightSeverity severity) {\n      if (reference instanceof DocStringTypeReference) {\n        return;\n      }\n      String description = null;\n      final String text = reference.getElement().getText();\n      TextRange rangeInElement = reference.getRangeInElement();\n      String refText = text;  // text of the part we're working with\n      if (rangeInElement.getStartOffset() > 0 && rangeInElement.getEndOffset() > 0) {\n        refText = rangeInElement.substring(text);\n      }\n      final PsiElement element = reference.getElement();\n      final List<LocalQuickFix> actions = new ArrayList<LocalQuickFix>(2);\n      final String refName = (element instanceof PyQualifiedExpression) ? ((PyQualifiedExpression)element).getReferencedName() : refText;\n      // Empty text, nothing to highlight\n      if (refName == null || refName.length() <= 0) {\n        return;\n      }\n\n      final QualifiedName canonicalQName = getCanonicalName(reference, myTypeEvalContext);\n      final String canonicalName = canonicalQName != null ? canonicalQName.toString() : null;\n      if (canonicalName != null) {\n        for (String ignored : myIgnoredIdentifiers) {\n          if (ignored.endsWith(END_WILDCARD)) {\n            final String prefix = ignored.substring(0, ignored.length() - END_WILDCARD.length());\n            if (canonicalName.startsWith(prefix)) {\n              return;\n            }\n          }\n          else if (canonicalName.equals(ignored)) {\n            return;\n          }\n        }\n      }\n      // Legacy non-qualified ignore patterns\n      if (myIgnoredIdentifiers.contains(refName)) {\n        return;\n      }\n\n      if (element instanceof PyReferenceExpression) {\n        PyReferenceExpression expr = (PyReferenceExpression)element;\n        if (PyNames.COMPARISON_OPERATORS.contains(refName)) {\n          return;\n        }\n        if (expr.isQualified()) {\n          final PyClassTypeImpl object_type = (PyClassTypeImpl)PyBuiltinCache.getInstance(node).getObjectType();\n          if ((object_type != null) && object_type.getPossibleInstanceMembers().contains(refName)) return;\n        }\n        else {\n          if (PyUnreachableCodeInspection.hasAnyInterruptedControlFlowPaths(expr)) {\n            return;\n          }\n          if (LanguageLevel.forElement(node).isOlderThan(LanguageLevel.PYTHON26)) {\n            if (\"with\".equals(refName)) {\n              actions.add(new UnresolvedRefAddFutureImportQuickFix());\n            }\n          }\n          if (refText.equals(\"true\") || refText.equals(\"false\")) {\n            actions.add(new UnresolvedRefTrueFalseQuickFix(element));\n          }\n          addAddSelfFix(node, expr, actions);\n          PyCallExpression callExpression = PsiTreeUtil.getParentOfType(element, PyCallExpression.class);\n          if (callExpression != null && (!(callExpression.getCallee() instanceof PyQualifiedExpression) ||\n              ((PyQualifiedExpression)callExpression.getCallee()).getQualifier() == null)) {\n            actions.add(new UnresolvedRefCreateFunctionQuickFix(callExpression, expr));\n          }\n          PyFunction parentFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class);\n          PyDecorator decorator = PsiTreeUtil.getParentOfType(element, PyDecorator.class);\n          PyImportStatement importStatement = PsiTreeUtil.getParentOfType(element, PyImportStatement.class);\n          if (parentFunction != null && decorator == null && importStatement == null) {\n            actions.add(new UnresolvedReferenceAddParameterQuickFix(refName));\n          }\n          actions.add(new PyRenameUnresolvedRefQuickFix());\n        }\n        // unqualified:\n        // may be module's\n        if (PyModuleType.getPossibleInstanceMembers().contains(refName)) return;\n        // may be a \"try: import ...\"; not an error not to resolve\n        if ((\n          PsiTreeUtil.getParentOfType(\n            PsiTreeUtil.getParentOfType(node, PyImportElement.class), PyTryExceptStatement.class, PyIfStatement.class\n          ) != null\n        )) {\n          severity = HighlightSeverity.WEAK_WARNING;\n          description = PyBundle.message(\"INSP.module.$0.not.found\", refText);\n          // TODO: mark the node so that future references pointing to it won't result in a error, but in a warning\n        }\n      }\n      if (reference instanceof PsiReferenceEx && description == null) {\n        description = ((PsiReferenceEx)reference).getUnresolvedDescription();\n      }\n      if (description == null) {\n        boolean markedQualified = false;\n        if (element instanceof PyQualifiedExpression) {\n          // TODO: Add __qualname__ for Python 3.3 to the skeleton of <class 'object'>, introduce a pseudo-class skeleton for\n          // <class 'function'>\n          if (\"__qualname__\".equals(refText) && LanguageLevel.forElement(element).isAtLeast(LanguageLevel.PYTHON33)) {\n            return;\n          }\n          final PyQualifiedExpression expr = (PyQualifiedExpression)element;\n          if (PyNames.COMPARISON_OPERATORS.contains(expr.getReferencedName())) {\n            return;\n          }\n          final PyExpression qualifier = expr.getQualifier();\n          if (qualifier != null) {\n            PyType type = myTypeEvalContext.getType(qualifier);\n            if (type != null) {\n              if (ignoreUnresolvedMemberForType(type, reference, refName)) {\n                return;\n              }\n              addCreateMemberFromUsageFixes(type, reference, refText, actions);\n              if (type instanceof PyClassTypeImpl) {\n                if (reference instanceof PyOperatorReference) {\n                  description = PyBundle.message(\"INSP.unresolved.operator.ref\",\n                                                 type.getName(), refName,\n                                                 ((PyOperatorReference)reference).getReadableOperatorName());\n                }\n                else {\n                  description = PyBundle.message(\"INSP.unresolved.ref.$0.for.class.$1\", refText, type.getName());\n                }\n                markedQualified = true;\n              }\n              else {\n                description = PyBundle.message(\"INSP.cannot.find.$0.in.$1\", refText, type.getName());\n                markedQualified = true;\n              }\n            }\n          }\n        }\n        if (!markedQualified) {\n          description = PyBundle.message(\"INSP.unresolved.ref.$0\", refText);\n\n          // look in other imported modules for this whole name\n          if (PythonReferenceImporter.isImportable(element)) {\n            addAutoImportFix(node, reference, actions);\n          }\n\n          addCreateClassFix(refText, element, actions);\n        }\n      }\n      ProblemHighlightType hl_type;\n      if (severity == HighlightSeverity.WARNING) {\n        hl_type = ProblemHighlightType.GENERIC_ERROR_OR_WARNING;\n      }\n      else if (severity == HighlightSeverity.ERROR) {\n        hl_type = ProblemHighlightType.GENERIC_ERROR;\n      }\n      else {\n        hl_type = ProblemHighlightType.LIKE_UNKNOWN_SYMBOL;\n      }\n\n      if (GenerateBinaryStubsFix.isApplicable(reference)) {\n        actions.add(new GenerateBinaryStubsFix(reference));\n      }\n      if (canonicalQName != null) {\n        actions.add(new AddIgnoredIdentifierQuickFix(canonicalQName, false));\n        if (canonicalQName.getComponentCount() > 1) {\n          actions.add(new AddIgnoredIdentifierQuickFix(canonicalQName.removeLastComponent(), true));\n        }\n      }\n      addPluginQuickFixes(reference, actions);\n\n      if (reference instanceof PyImportReference) {\n        // TODO: Ignore references in the second part of the 'from ... import ...' expression\n        final QualifiedName qname = QualifiedName.fromDottedString(refName);\n        final List<String> components = qname.getComponents();\n        if (!components.isEmpty()) {\n          final String packageName = components.get(0);\n          final Module module = ModuleUtilCore.findModuleForPsiElement(node);\n          final Sdk sdk = PythonSdkType.findPythonSdk(module);\n          if (module != null && sdk != null) {\n            if (PyPIPackageUtil.INSTANCE.isInPyPI(packageName)) {\n              final List<PyRequirement> requirements = Collections.singletonList(new PyRequirement(packageName));\n              final String name = \"Install package \" + packageName;\n              if (PyPackageManager.getInstance(sdk).hasPip()) {\n                actions.add(new PyPackageRequirementsInspection.PyInstallRequirementsFix(name, module, sdk, requirements));\n              }\n            }\n          }\n        }\n      }\n      registerProblem(node, description, hl_type, null, rangeInElement, actions.toArray(new LocalQuickFix[actions.size()]));\n    }","id":64768,"modified_method":"private void registerUnresolvedReferenceProblem(@NotNull PyElement node, @NotNull final PsiReference reference,\n                                                    @NotNull HighlightSeverity severity) {\n      if (reference instanceof DocStringTypeReference) {\n        return;\n      }\n      String description = null;\n      PsiElement element = reference.getElement();\n      final String text = element.getText();\n      TextRange rangeInElement = reference.getRangeInElement();\n      String refText = text;  // text of the part we're working with\n      if (rangeInElement.getStartOffset() > 0 && rangeInElement.getEndOffset() > 0) {\n        refText = rangeInElement.substring(text);\n      }\n\n      final List<LocalQuickFix> actions = new ArrayList<LocalQuickFix>(2);\n      final String refName = (element instanceof PyQualifiedExpression) ? ((PyQualifiedExpression)element).getReferencedName() : refText;\n      // Empty text, nothing to highlight\n      if (refName == null || refName.length() <= 0) {\n        return;\n      }\n\n      final QualifiedName canonicalQName = getCanonicalName(reference, myTypeEvalContext);\n      final String canonicalName = canonicalQName != null ? canonicalQName.toString() : null;\n      if (canonicalName != null) {\n        for (String ignored : myIgnoredIdentifiers) {\n          if (ignored.endsWith(END_WILDCARD)) {\n            final String prefix = ignored.substring(0, ignored.length() - END_WILDCARD.length());\n            if (canonicalName.startsWith(prefix)) {\n              return;\n            }\n          }\n          else if (canonicalName.equals(ignored)) {\n            return;\n          }\n        }\n      }\n      // Legacy non-qualified ignore patterns\n      if (myIgnoredIdentifiers.contains(refName)) {\n        return;\n      }\n\n      if (element instanceof PyReferenceExpression) {\n        PyReferenceExpression expr = (PyReferenceExpression)element;\n        if (PyNames.COMPARISON_OPERATORS.contains(refName)) {\n          return;\n        }\n        if (expr.isQualified()) {\n          final PyClassTypeImpl object_type = (PyClassTypeImpl)PyBuiltinCache.getInstance(node).getObjectType();\n          if ((object_type != null) && object_type.getPossibleInstanceMembers().contains(refName)) return;\n        }\n        else {\n          if (PyUnreachableCodeInspection.hasAnyInterruptedControlFlowPaths(expr)) {\n            return;\n          }\n          if (LanguageLevel.forElement(node).isOlderThan(LanguageLevel.PYTHON26)) {\n            if (\"with\".equals(refName)) {\n              actions.add(new UnresolvedRefAddFutureImportQuickFix());\n            }\n          }\n          if (refText.equals(\"true\") || refText.equals(\"false\")) {\n            actions.add(new UnresolvedRefTrueFalseQuickFix(element));\n          }\n          addAddSelfFix(node, expr, actions);\n          PyCallExpression callExpression = PsiTreeUtil.getParentOfType(element, PyCallExpression.class);\n          if (callExpression != null && (!(callExpression.getCallee() instanceof PyQualifiedExpression) ||\n              ((PyQualifiedExpression)callExpression.getCallee()).getQualifier() == null)) {\n            actions.add(new UnresolvedRefCreateFunctionQuickFix(callExpression, expr));\n          }\n          PyFunction parentFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class);\n          PyDecorator decorator = PsiTreeUtil.getParentOfType(element, PyDecorator.class);\n          PyImportStatement importStatement = PsiTreeUtil.getParentOfType(element, PyImportStatement.class);\n          if (parentFunction != null && decorator == null && importStatement == null) {\n            actions.add(new UnresolvedReferenceAddParameterQuickFix(refName));\n          }\n          actions.add(new PyRenameUnresolvedRefQuickFix());\n        }\n        // unqualified:\n        // may be module's\n        if (PyModuleType.getPossibleInstanceMembers().contains(refName)) return;\n        // may be a \"try: import ...\"; not an error not to resolve\n        if ((\n          PsiTreeUtil.getParentOfType(\n            PsiTreeUtil.getParentOfType(node, PyImportElement.class), PyTryExceptStatement.class, PyIfStatement.class\n          ) != null\n        )) {\n          severity = HighlightSeverity.WEAK_WARNING;\n          description = PyBundle.message(\"INSP.module.$0.not.found\", refText);\n          // TODO: mark the node so that future references pointing to it won't result in a error, but in a warning\n        }\n      }\n      if (reference instanceof PsiReferenceEx && description == null) {\n        description = ((PsiReferenceEx)reference).getUnresolvedDescription();\n      }\n      if (description == null) {\n        boolean markedQualified = false;\n        if (element instanceof PyQualifiedExpression) {\n          // TODO: Add __qualname__ for Python 3.3 to the skeleton of <class 'object'>, introduce a pseudo-class skeleton for\n          // <class 'function'>\n          if (\"__qualname__\".equals(refText) && LanguageLevel.forElement(element).isAtLeast(LanguageLevel.PYTHON33)) {\n            return;\n          }\n          final PyQualifiedExpression expr = (PyQualifiedExpression)element;\n          if (PyNames.COMPARISON_OPERATORS.contains(expr.getReferencedName())) {\n            return;\n          }\n          final PyExpression qualifier = expr.getQualifier();\n          if (qualifier != null) {\n            PyType type = myTypeEvalContext.getType(qualifier);\n            if (type != null) {\n              if (ignoreUnresolvedMemberForType(type, reference, refName)) {\n                return;\n              }\n              addCreateMemberFromUsageFixes(type, reference, refText, actions);\n              if (type instanceof PyClassTypeImpl) {\n                if (reference instanceof PyOperatorReference) {\n                  description = PyBundle.message(\"INSP.unresolved.operator.ref\",\n                                                 type.getName(), refName,\n                                                 ((PyOperatorReference)reference).getReadableOperatorName());\n                }\n                else {\n                  description = PyBundle.message(\"INSP.unresolved.ref.$0.for.class.$1\", refText, type.getName());\n                }\n                markedQualified = true;\n              }\n              else {\n                description = PyBundle.message(\"INSP.cannot.find.$0.in.$1\", refText, type.getName());\n                markedQualified = true;\n              }\n            }\n          }\n        }\n        if (!markedQualified) {\n          description = PyBundle.message(\"INSP.unresolved.ref.$0\", refText);\n\n          // look in other imported modules for this whole name\n          if (PythonReferenceImporter.isImportable(element)) {\n            addAutoImportFix(node, reference, actions);\n          }\n\n          addCreateClassFix(refText, element, actions);\n        }\n      }\n      ProblemHighlightType hl_type;\n      if (severity == HighlightSeverity.WARNING) {\n        hl_type = ProblemHighlightType.GENERIC_ERROR_OR_WARNING;\n      }\n      else if (severity == HighlightSeverity.ERROR) {\n        hl_type = ProblemHighlightType.GENERIC_ERROR;\n      }\n      else {\n        hl_type = ProblemHighlightType.LIKE_UNKNOWN_SYMBOL;\n      }\n\n      if (element != null) {\n        PyImportStatementBase importStatementBase = PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class);\n        if ((importStatementBase != null) && GenerateBinaryStubsFix.isApplicable(importStatementBase)) {\n          actions.addAll(GenerateBinaryStubsFix.generateFixes(importStatementBase));\n        }\n      }\n      if (canonicalQName != null) {\n        actions.add(new AddIgnoredIdentifierQuickFix(canonicalQName, false));\n        if (canonicalQName.getComponentCount() > 1) {\n          actions.add(new AddIgnoredIdentifierQuickFix(canonicalQName.removeLastComponent(), true));\n        }\n      }\n      addPluginQuickFixes(reference, actions);\n\n      if (reference instanceof PyImportReference) {\n        // TODO: Ignore references in the second part of the 'from ... import ...' expression\n        final QualifiedName qname = QualifiedName.fromDottedString(refName);\n        final List<String> components = qname.getComponents();\n        if (!components.isEmpty()) {\n          final String packageName = components.get(0);\n          final Module module = ModuleUtilCore.findModuleForPsiElement(node);\n          final Sdk sdk = PythonSdkType.findPythonSdk(module);\n          if (module != null && sdk != null) {\n            if (PyPIPackageUtil.INSTANCE.isInPyPI(packageName)) {\n              final List<PyRequirement> requirements = Collections.singletonList(new PyRequirement(packageName));\n              final String name = \"Install package \" + packageName;\n              if (PyPackageManager.getInstance(sdk).hasPip()) {\n                actions.add(new PyPackageRequirementsInspection.PyInstallRequirementsFix(name, module, sdk, requirements));\n              }\n            }\n          }\n        }\n      }\n      registerProblem(node, description, hl_type, null, rangeInElement, actions.toArray(new LocalQuickFix[actions.size()]));\n    }","commit_id":"5ab2bd89ef14165606fad5de74b6b9ebf4eb0870","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean startInWriteAction() {\n    return false;\n  }","id":64769,"modified_method":"public boolean startInWriteAction() {\n    return true;\n  }","commit_id":"4ddf6456d84f34f2b056cc8a87f2529801354876","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ArrayList<TemplateImpl> getApplicableTemplates(Editor editor, PsiFile file, boolean selection) {\n    int offset = editor.getCaretModel().getOffset();\n    int startOffset = offset;\n    if (selection && editor.getSelectionModel().hasSelection()) {\n      final int selStart = editor.getSelectionModel().getSelectionStart();\n      final int selEnd = editor.getSelectionModel().getSelectionEnd();\n      startOffset = (offset == selStart) ? selEnd : selStart;\n    }\n\n    if (!selection) {\n      file = (PsiFile)file.copy();\n      final Document document = file.getViewProvider().getDocument();\n      assert document != null;\n      document.insertString(offset, CompletionUtil.DUMMY_IDENTIFIER_TRIMMED);\n      PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);\n    }\n    \n    ArrayList<TemplateImpl> list = new ArrayList<TemplateImpl>();\n    for (TemplateImpl template : TemplateSettings.getInstance().getTemplates()) {\n      if (!template.isDeactivated() &&\n          template.isSelectionTemplate() == selection &&\n          (TemplateManagerImpl.isApplicable(file, offset, template) ||\n           (selection && TemplateManagerImpl.isApplicable(file, startOffset, template)))) {\n        list.add(template);\n      }\n    }\n    return list;\n  }","id":64770,"modified_method":"public static ArrayList<TemplateImpl> getApplicableTemplates(Editor editor, PsiFile file, boolean selection) {\n    file = (PsiFile)file.copy();\n    final Document document = file.getViewProvider().getDocument();\n    assert document != null;\n\n    int startOffset = editor.getCaretModel().getOffset();\n    if (selection && editor.getSelectionModel().hasSelection()) {\n      startOffset = editor.getSelectionModel().getSelectionStart();\n      document.deleteString(startOffset, editor.getSelectionModel().getSelectionEnd());\n    }\n    document.insertString(startOffset, CompletionUtil.DUMMY_IDENTIFIER_TRIMMED);\n    PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);\n\n    ArrayList<TemplateImpl> list = new ArrayList<TemplateImpl>();\n    for (TemplateImpl template : TemplateSettings.getInstance().getTemplates()) {\n      if (!template.isDeactivated() &&\n          template.isSelectionTemplate() == selection &&\n          TemplateManagerImpl.isApplicable(file, startOffset, template)) {\n        list.add(template);\n      }\n    }\n    return list;\n  }","commit_id":"4ddf6456d84f34f2b056cc8a87f2529801354876","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isApplicable(PsiFile file, int offset, TemplateImpl template) {\n    TemplateManager instance = getInstance(file.getProject());\n    TemplateContext context = template.getTemplateContext();\n    if (isEnabled(file, offset, null, context)) {\n      return true;\n    }\n\n    Language baseLanguage = file.getViewProvider().getBaseLanguage();\n\n    if (baseLanguage != file.getLanguage()) {\n      PsiFile basePsi = file.getViewProvider().getPsi(baseLanguage);\n      if (basePsi != null && isEnabled(basePsi, offset, null, context)) {\n        return true;\n      }\n    }\n\n    final Language baseLanguageForBaseLanguage = baseLanguage.getBaseLanguage();\n    if (baseLanguageForBaseLanguage != null) {\n      final LanguageFileType associatedFileType = baseLanguageForBaseLanguage.getAssociatedFileType();\n      if (associatedFileType != null && associatedFileType != file.getFileType()) {\n        if (isEnabled(null, 0, associatedFileType, context)) {\n          return true;\n        }\n      }\n    }\n\n    // if we have, for example, a Ruby fragment in RHTML selected with its exact bounds, the file language and the base\n    // language will be ERb, so we won't match HTML templates for it. but they're actually valid\n    if (offset > 0) {\n      final Language prevLanguage = PsiUtilBase.getLanguageAtOffset(file, offset - 1);\n      final PsiFile prevPsi = file.getViewProvider().getPsi(prevLanguage);\n      if (prevPsi != null && isEnabled(prevPsi, offset - 1, null, context)) {\n        return true;\n      }\n    }\n\n    return false;\n  }","id":64771,"modified_method":"public static boolean isApplicable(PsiFile file, int offset, TemplateImpl template) {\n    TemplateContext context = template.getTemplateContext();\n    if (isEnabled(file, offset, null, context)) {\n      return true;\n    }\n\n    Language baseLanguage = file.getViewProvider().getBaseLanguage();\n\n    if (baseLanguage != file.getLanguage()) {\n      PsiFile basePsi = file.getViewProvider().getPsi(baseLanguage);\n      if (basePsi != null && isEnabled(basePsi, offset, null, context)) {\n        return true;\n      }\n    }\n\n    final Language baseLanguageForBaseLanguage = baseLanguage.getBaseLanguage();\n    if (baseLanguageForBaseLanguage != null) {\n      final LanguageFileType associatedFileType = baseLanguageForBaseLanguage.getAssociatedFileType();\n      if (associatedFileType != null && associatedFileType != file.getFileType()) {\n        if (isEnabled(null, 0, associatedFileType, context)) {\n          return true;\n        }\n      }\n    }\n\n    // if we have, for example, a Ruby fragment in RHTML selected with its exact bounds, the file language and the base\n    // language will be ERb, so we won't match HTML templates for it. but they're actually valid\n    if (offset > 0) {\n      final Language prevLanguage = PsiUtilBase.getLanguageAtOffset(file, offset - 1);\n      final PsiFile prevPsi = file.getViewProvider().getPsi(prevLanguage);\n      if (prevPsi != null && isEnabled(prevPsi, offset - 1, null, context)) {\n        return true;\n      }\n    }\n\n    return false;\n  }","commit_id":"4ddf6456d84f34f2b056cc8a87f2529801354876","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void run() {\n            if (isExpired()) return;\n            \n            if (!m_interval.scheduledSuspension())\n                Schedule.this.run();\n\n            // if it is expired by the current run then don't reschedule\n            if (isExpired()) return;\n            \n            long interval = m_interval.getInterval();\n            if (interval >= 0 && m_scheduled)\n                m_timer.schedule(this, interval);\n\n        }","id":64772,"modified_method":"public void run() {\n            if (isExpired()) {\n                ThreadCategory.getInstance(getClass()).debug(\"Schedule \"+this+\" expired.  No need to run.\");\n                return;\n            }\n            \n            if (!m_interval.scheduledSuspension())\n                Schedule.this.run();\n\n            // if it is expired by the current run then don't reschedule\n            if (isExpired()) {\n                ThreadCategory.getInstance(getClass()).debug(\"Schedule \"+this+\" expired.  No need to reschedule.\");\n                return;\n            }\n            \n            long interval = m_interval.getInterval();\n            if (interval >= 0 && m_scheduled)\n                m_timer.schedule(this, interval);\n\n        }","commit_id":"846b96c52fa495745b68d3f498ff511c09651480","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * The main method of the scheduler. This method is responsible for checking\n     * the runnable queues for ready objects and then enqueuing them into the\n     * thread pool for execution.\n     * \n     */\n    public void run() {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        synchronized (this) {\n            m_status = RUNNING;\n        }\n\n        if (log.isDebugEnabled())\n            log.debug(\"run: scheduler running\");\n\n        // Loop until a fatal exception occurs or until\n        // the thread is interrupted.\n        //\n        for (;;) {\n            // block if there is nothing in the queue(s)\n            // When something is added to the queue it\n            // signals us to wakeup\n            //\n            synchronized (this) {\n                if (m_status != RUNNING && m_status != PAUSED && m_status != PAUSE_PENDING && m_status != RESUME_PENDING) {\n                    if (log.isDebugEnabled())\n                        log.debug(\"run: status = \" + m_status + \", time to exit\");\n                    break;\n                }\n\n                if (m_scheduled == 0) {\n                    try {\n                        if (log.isDebugEnabled())\n                            log.debug(\"run: no interfaces scheduled, waiting...\");\n                        wait();\n                    } catch (InterruptedException ex) {\n                        break;\n                    }\n                }\n            }\n\n            // cycle through the queues checking for\n            // what's ready to run. The queues are keyed\n            // by the interval, but the mapped elements\n            // are peekable fifo queues.\n            //\n            int runned = 0;\n            FifoQueue out = m_runner.getRunQueue();\n            synchronized (m_queues) {\n                // get an iterator so that we can cycle\n                // through the queue elements.\n                //\n                Iterator iter = m_queues.entrySet().iterator();\n                while (iter.hasNext()) {\n                    // Peak for Runnable objects until\n                    // there are no more ready runnables\n                    //\n                    // Also, only go through each queue once!\n                    // if we didn't add a count then it would\n                    // be possible to starve other queues.\n                    //\n                    PeekableFifoQueue in = (PeekableFifoQueue) ((Map.Entry) iter.next()).getValue();\n                    ReadyRunnable readyRun = null;\n                    int maxLoops = in.size();\n                    do {\n                        try {\n                            readyRun = (ReadyRunnable) in.peek();\n                            if (readyRun != null && readyRun.isReady()) {\n                                if (log.isDebugEnabled()) {\n                                    log.debug(\"run: found ready runnable\");\n                                }\n\n                                // Pop the interface/readyRunnable from the\n                                // queue for execution.\n                                //\n                                in.remove();\n\n                                // Add runnable to the execution queue\n                                out.add(readyRun);\n                                ++runned;\n                            }\n                        } catch (InterruptedException ex) {\n                            return; // jump all the way out\n                        } catch (FifoQueueException qe) {\n                            throw new UndeclaredThrowableException(qe);\n                        }\n\n                    } while (readyRun != null && readyRun.isReady() && --maxLoops > 0);\n                }\n            }\n\n            // Wait for 1 second if there were no runnables\n            // executed during this loop, otherwise just\n            // start over.\n            //\n            synchronized (this) {\n                m_scheduled -= runned;\n                if (runned == 0) {\n                    try {\n                        wait(1000);\n                    } catch (InterruptedException ex) {\n                        break; // exit for loop\n                    }\n                }\n            }\n\n        } // end for(;;)\n\n        if (log.isDebugEnabled())\n            log.debug(\"run: scheduler exiting, state = STOPPED\");\n        synchronized (this) {\n            m_status = STOPPED;\n        }\n\n    }","id":64773,"modified_method":"/**\n     * The main method of the scheduler. This method is responsible for checking\n     * the runnable queues for ready objects and then enqueuing them into the\n     * thread pool for execution.\n     * \n     */\n    public void run() {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        synchronized (this) {\n            m_status = RUNNING;\n        }\n\n        if (log.isDebugEnabled())\n            log.debug(\"run: scheduler running\");\n\n        // Loop until a fatal exception occurs or until\n        // the thread is interrupted.\n        //\n        for (;;) {\n            // block if there is nothing in the queue(s)\n            // When something is added to the queue it\n            // signals us to wakeup\n            //\n            synchronized (this) {\n                if (m_status != RUNNING && m_status != PAUSED && m_status != PAUSE_PENDING && m_status != RESUME_PENDING) {\n                    if (log.isDebugEnabled())\n                        log.debug(\"run: status = \" + m_status + \", time to exit\");\n                    break;\n                }\n\n                if (m_scheduled == 0) {\n                    try {\n                        if (log.isDebugEnabled())\n                            log.debug(\"run: no interfaces scheduled, waiting...\");\n                        wait();\n                    } catch (InterruptedException ex) {\n                        break;\n                    }\n                }\n            }\n\n            // cycle through the queues checking for\n            // what's ready to run. The queues are keyed\n            // by the interval, but the mapped elements\n            // are peekable fifo queues.\n            //\n            int runned = 0;\n            FifoQueue out = m_runner.getRunQueue();\n            synchronized (m_queues) {\n                // get an iterator so that we can cycle\n                // through the queue elements.\n                //\n                Iterator iter = m_queues.entrySet().iterator();\n                while (iter.hasNext()) {\n                    // Peak for Runnable objects until\n                    // there are no more ready runnables\n                    //\n                    // Also, only go through each queue once!\n                    // if we didn't add a count then it would\n                    // be possible to starve other queues.\n                    //\n                    PeekableFifoQueue in = (PeekableFifoQueue) ((Map.Entry) iter.next()).getValue();\n                    ReadyRunnable readyRun = null;\n                    int maxLoops = in.size();\n                    do {\n                        try {\n                            readyRun = (ReadyRunnable) in.peek();\n                            if (readyRun != null && readyRun.isReady()) {\n                                if (log.isDebugEnabled()) {\n                                    log.debug(\"run: found ready runnable \"+readyRun);\n                                }\n\n                                // Pop the interface/readyRunnable from the\n                                // queue for execution.\n                                //\n                                in.remove();\n\n                                // Add runnable to the execution queue\n                                out.add(readyRun);\n                                ++runned;\n                            }\n                        } catch (InterruptedException ex) {\n                            return; // jump all the way out\n                        } catch (FifoQueueException qe) {\n                            throw new UndeclaredThrowableException(qe);\n                        }\n\n                    } while (readyRun != null && readyRun.isReady() && --maxLoops > 0);\n                }\n            }\n\n            // Wait for 1 second if there were no runnables\n            // executed during this loop, otherwise just\n            // start over.\n            //\n            synchronized (this) {\n                m_scheduled -= runned;\n                if (runned == 0) {\n                    try {\n                        wait(1000);\n                    } catch (InterruptedException ex) {\n                        break; // exit for loop\n                    }\n                }\n            }\n\n        } // end for(;;)\n\n        if (log.isDebugEnabled())\n            log.debug(\"run: scheduler exiting, state = STOPPED\");\n        synchronized (this) {\n            m_status = STOPPED;\n        }\n\n    }","commit_id":"846b96c52fa495745b68d3f498ff511c09651480","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is used to schedule a ready runnable in the system. The\n     * interval is used as the key for determining which queue to add the\n     * runnable.\n     * \n     * @param runnable\n     *            The element to run when interval expires.\n     * @param interval\n     *            The queue to add the runnable to.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if an error occurs adding the element to the queue.\n     */\n    public synchronized void schedule(ReadyRunnable runnable, long interval) {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"schedule: Adding ready runnable at interval \" + interval);\n        }\n\n        Long key = new Long(interval);\n        if (!m_queues.containsKey(key)) {\n            if (log.isDebugEnabled())\n                log.debug(\"schedule: interval queue did not exist, a new one has been created\");\n            m_queues.put(key, new PeekableFifoQueue());\n        }\n\n        try {\n            ((FifoQueue) m_queues.get(key)).add(runnable);\n            if (m_scheduled++ == 0) {\n                if (log.isDebugEnabled())\n                    log.debug(\"schedule: queue element added, calling notify all since none were scheduled\");\n                notifyAll();\n            } else if (log.isDebugEnabled()) {\n                log.debug(\"schedule: queue element added, notification not performed\");\n            }\n        } catch (InterruptedException ie) {\n            if (log.isInfoEnabled())\n                log.info(\"schedule: failed to add new ready runnable instance to scheduler\", ie);\n            Thread.currentThread().interrupt();\n        } catch (FifoQueueException ex) {\n            if (log.isInfoEnabled())\n                log.info(\"schedule: failed to add new ready runnable instance to scheduler\", ex);\n            throw new UndeclaredThrowableException(ex);\n        }\n    }","id":64774,"modified_method":"/**\n     * This method is used to schedule a ready runnable in the system. The\n     * interval is used as the key for determining which queue to add the\n     * runnable.\n     * \n     * @param runnable\n     *            The element to run when interval expires.\n     * @param interval\n     *            The queue to add the runnable to.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if an error occurs adding the element to the queue.\n     */\n    public synchronized void schedule(ReadyRunnable runnable, long interval) {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"schedule: Adding ready runnable \"+runnable+\" at interval \" + interval);\n        }\n\n        Long key = new Long(interval);\n        if (!m_queues.containsKey(key)) {\n            if (log.isDebugEnabled())\n                log.debug(\"schedule: interval queue did not exist, a new one has been created\");\n            m_queues.put(key, new PeekableFifoQueue());\n        }\n\n        try {\n            ((FifoQueue) m_queues.get(key)).add(runnable);\n            if (m_scheduled++ == 0) {\n                if (log.isDebugEnabled())\n                    log.debug(\"schedule: queue element added, calling notify all since none were scheduled\");\n                notifyAll();\n            } else if (log.isDebugEnabled()) {\n                log.debug(\"schedule: queue element added, notification not performed\");\n            }\n        } catch (InterruptedException ie) {\n            if (log.isInfoEnabled())\n                log.info(\"schedule: failed to add new ready runnable instance \"+runnable+\" to scheduler\", ie);\n            Thread.currentThread().interrupt();\n        } catch (FifoQueueException ex) {\n            if (log.isInfoEnabled())\n                log.info(\"schedule: failed to add new ready runnable instance \"+runnable+\" to scheduler\", ex);\n            throw new UndeclaredThrowableException(ex);\n        }\n    }","commit_id":"846b96c52fa495745b68d3f498ff511c09651480","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static EditorTextField createCommitTextEditor(Project project, boolean checkSpelling) {\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    Set<EditorCustomization.Feature> enabledFeatures = EnumSet.of(EditorCustomization.Feature.SOFT_WRAP);\n    Set<EditorCustomization.Feature> disabledFeatures = EnumSet.of(EditorCustomization.Feature.ADDITIONAL_PAGE_AT_BOTTOM);\n    if (checkSpelling) {\n      enabledFeatures.add(EditorCustomization.Feature.SPELL_CHECK);\n    }\n    else {\n      disabledFeatures.add(EditorCustomization.Feature.SPELL_CHECK);\n    }\n\n    return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project, enabledFeatures, disabledFeatures);\n  }","id":64775,"modified_method":"/**\n   * Creates a text editor appropriate for creating commit messages.\n   *\n   * @param project project this commit message editor is intended for\n   * @param forceSpellCheckOn if false, {@link com.intellij.openapi.vcs.VcsConfiguration#CHECK_COMMIT_MESSAGE_SPELLING} will control\n   *                          whether or not the editor has spell check enabled\n   * @return a commit message editor\n   */\n  public static EditorTextField createCommitTextEditor(final Project project, boolean forceSpellCheckOn) {\n    final boolean checkSpelling;\n    final boolean useCommitMessageMargin;\n    final int commitMessageMarginSize;\n\n    VcsConfiguration configuration = VcsConfiguration.getInstance(project);\n\n    if (configuration != null) {\n      checkSpelling = forceSpellCheckOn || configuration.CHECK_COMMIT_MESSAGE_SPELLING;\n      useCommitMessageMargin = configuration.USE_COMMIT_MESSAGE_MARGIN;\n      commitMessageMarginSize = configuration.COMMIT_MESSAGE_MARGIN_SIZE;\n    } else {\n      checkSpelling = true;\n      useCommitMessageMargin = false;\n      commitMessageMarginSize = -1;\n    }\n\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(),\n                                  project,\n                                  new EditorTextFieldProvider.AdHocEditorCustomizer() {\n                                    @Override\n                                    public void customize(EditorEx editor) {\n                                      editor.getScrollPane().setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\n                                      editor.setHorizontalScrollbarVisible(true);\n                                      EditorSettings settings = editor.getSettings();\n                                      settings.setAdditionalColumnsCount(3);\n                                      settings.setVirtualSpace(false);\n                                      settings.setUseSoftWraps(true);\n                                      settings.setAdditionalPageAtBottom(true);\n\n                                      toggleEditorSpellchecking(project, editor, checkSpelling);\n\n                                      if (useCommitMessageMargin) {\n                                        editor.setColorsScheme(EditorColorsManager.getInstance().getGlobalScheme());\n                                        settings.setRightMarginShown(true);\n                                        settings.setRightMargin(commitMessageMarginSize);\n                                      }\n                                    }\n                                  });\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setCheckSpelling(boolean check) {\n    myCheckSpelling = check;\n    Editor editor = myEditorField.getEditor();\n    if (!(editor instanceof EditorEx)) {\n      return;\n    }\n    EditorEx editorEx = (EditorEx)editor;\n    EditorCustomization[] customizations = Extensions.getExtensions(EditorCustomization.EP_NAME, myProject);\n    EditorCustomization.Feature feature = EditorCustomization.Feature.SPELL_CHECK;\n    for (EditorCustomization customization : customizations) {\n      if (customization.getSupportedFeatures().contains(feature)) {\n        if (check) {\n          customization.addCustomization(editorEx, feature);\n        }\n        else {\n          customization.removeCustomization(editorEx, feature);\n        }\n      }\n    }\n  }","id":64776,"modified_method":"public void setCheckSpelling(boolean check) {\n    myCheckSpelling = check;\n    Editor editor = myEditorField.getEditor();\n    if (!(editor instanceof EditorEx)) {\n      return;\n    }\n    EditorEx editorEx = (EditorEx)editor;\n    toggleEditorSpellchecking(myProject, editorEx, check);\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static EditorTextField createEditorField(final Project project, final boolean checkSpelling) {\n    EditorTextField editorField = createCommitTextEditor(project, checkSpelling);\n    editorField.getDocument().putUserData(DATA_CONTEXT_KEY, DataManager.getInstance().getDataContext(editorField.getComponent()));\n    return editorField;\n  }","id":64777,"modified_method":"private static EditorTextField createEditorField(final Project project) {\n    EditorTextField editorField = createCommitTextEditor(project, false);\n    editorField.getDocument().putUserData(DATA_CONTEXT_KEY, DataManager.getInstance().getDataContext(editorField.getComponent()));\n    return editorField;\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CommitMessage(Project project, final boolean withSeparator) {\n    super(new BorderLayout());\n    boolean checkSpelling = true;\n    VcsConfiguration configuration = VcsConfiguration.getInstance(project);\n    if (configuration != null) {\n      checkSpelling = configuration.CHECK_COMMIT_MESSAGE_SPELLING;\n    }\n    myEditorField = createEditorField(project, checkSpelling);\n    myProject = project;\n    \n    // Note that we assume here that editor used for commit message processing uses font family implied by LAF (in contrast,\n    // IJ code editor uses monospaced font). Hence, we don't need any special actions here\n    // (myEditorField.setFontInheritedFromLAF(true) should be used instead).\n    \n    add(myEditorField, BorderLayout.CENTER);\n\n    JPanel labelPanel = new JPanel(new BorderLayout());\n    labelPanel.setBorder(BorderFactory.createEmptyBorder());\n    if (withSeparator) {\n      mySeparator = SeparatorFactory.createSeparator(VcsBundle.message(\"label.commit.comment\"), myEditorField.getComponent(), true, true);\n      JPanel separatorPanel = new JPanel(new BorderLayout());\n      separatorPanel.add(mySeparator, BorderLayout.SOUTH);\n      separatorPanel.add(Box.createVerticalGlue(), BorderLayout.NORTH);\n      labelPanel.add(separatorPanel, BorderLayout.CENTER);\n    }\n    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, getToolbarActions(), withSeparator);\n    toolbar.updateActionsImmediately();\n    toolbar.setReservePlaceAutoPopupIcon(false);\n    toolbar.getComponent().setBorder(BorderFactory.createEmptyBorder());\n    if (withSeparator) {\n      labelPanel.add(toolbar.getComponent(), BorderLayout.EAST);\n      add(labelPanel, BorderLayout.NORTH);\n    } else {\n      add(toolbar.getComponent(), BorderLayout.EAST);\n    }\n\n    setBorder(BorderFactory.createEmptyBorder());\n  }","id":64778,"modified_method":"public CommitMessage(Project project, final boolean withSeparator) {\n    super(new BorderLayout());\n    myEditorField = createEditorField(project);\n    myProject = project;\n    \n    // Note that we assume here that editor used for commit message processing uses font family implied by LAF (in contrast,\n    // IJ code editor uses monospaced font). Hence, we don't need any special actions here\n    // (myEditorField.setFontInheritedFromLAF(true) should be used instead).\n    \n    add(myEditorField, BorderLayout.CENTER);\n\n    JPanel labelPanel = new JPanel(new BorderLayout());\n    labelPanel.setBorder(BorderFactory.createEmptyBorder());\n    if (withSeparator) {\n      mySeparator = SeparatorFactory.createSeparator(VcsBundle.message(\"label.commit.comment\"), myEditorField.getComponent(), true, true);\n      JPanel separatorPanel = new JPanel(new BorderLayout());\n      separatorPanel.add(mySeparator, BorderLayout.SOUTH);\n      separatorPanel.add(Box.createVerticalGlue(), BorderLayout.NORTH);\n      labelPanel.add(separatorPanel, BorderLayout.CENTER);\n    }\n    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, getToolbarActions(), withSeparator);\n    toolbar.updateActionsImmediately();\n    toolbar.setReservePlaceAutoPopupIcon(false);\n    toolbar.getComponent().setBorder(BorderFactory.createEmptyBorder());\n    if (withSeparator) {\n      labelPanel.add(toolbar.getComponent(), BorderLayout.EAST);\n      add(labelPanel, BorderLayout.NORTH);\n    } else {\n      add(toolbar.getComponent(), BorderLayout.EAST);\n    }\n\n    setBorder(BorderFactory.createEmptyBorder());\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isModified() {\n    if (myRecentlyChangedConfigurable.isModified()) return true;\n    if (myLimitHistory.isModified()) return true;\n    if (myScopeFilterConfig.isModified()) return true;\n    if (myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF != myBaseRevisionTexts.isSelected()) return true;\n    if (myVcsConfiguration.SHOW_VCS_ERROR_NOTIFICATIONS != myShowVcsRootErrorNotification.isSelected()) {\n      return true;\n    }\n    if (myVcsConfiguration.SHOW_DIRTY_RECURSIVELY != myShowChangedRecursively.isSelected()) {\n      return true;\n    }\n    return !myModel.getItems().equals(myVcsManager.getDirectoryMappings());\n  }","id":64779,"modified_method":"public boolean isModified() {\n    if (myRecentlyChangedConfigurable.isModified()) return true;\n    if (myLimitHistory.isModified()) return true;\n    if (myScopeFilterConfig.isModified()) return true;\n    if (myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF != myBaseRevisionTexts.isSelected()) return true;\n    if (myVcsConfiguration.SHOW_VCS_ERROR_NOTIFICATIONS != myShowVcsRootErrorNotification.isSelected()) {\n      return true;\n    }\n    if (myVcsConfiguration.SHOW_DIRTY_RECURSIVELY != myShowChangedRecursively.isSelected()) {\n      return true;\n    }\n    if (myCommitMessageMarginConfigurable.isModified()) {\n      return true;\n    }\n    return !myModel.getItems().equals(myVcsManager.getDirectoryMappings());\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void initializeModel() {\n    List<VcsDirectoryMapping> mappings = new ArrayList<VcsDirectoryMapping>();\n    for (VcsDirectoryMapping mapping : ProjectLevelVcsManager.getInstance(myProject).getDirectoryMappings()) {\n      mappings.add(new VcsDirectoryMapping(mapping.getDirectory(), mapping.getVcs(), mapping.getRootSettings()));\n    }\n    myModel = new ListTableModel<VcsDirectoryMapping>(new ColumnInfo[]{DIRECTORY, VCS_SETTING}, mappings, 0);\n    myDirectoryMappingTable.setModelAndUpdateColumns(myModel);\n\n    myRecentlyChangedConfigurable.reset();\n    myLimitHistory.reset();\n    myScopeFilterConfig.reset();\n    myBaseRevisionTexts.setSelected(myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF);\n    myShowChangedRecursively.setSelected(myVcsConfiguration.SHOW_DIRTY_RECURSIVELY);\n  }","id":64780,"modified_method":"private void initializeModel() {\n    List<VcsDirectoryMapping> mappings = new ArrayList<VcsDirectoryMapping>();\n    for (VcsDirectoryMapping mapping : ProjectLevelVcsManager.getInstance(myProject).getDirectoryMappings()) {\n      mappings.add(new VcsDirectoryMapping(mapping.getDirectory(), mapping.getVcs(), mapping.getRootSettings()));\n    }\n    myModel = new ListTableModel<VcsDirectoryMapping>(new ColumnInfo[]{DIRECTORY, VCS_SETTING}, mappings, 0);\n    myDirectoryMappingTable.setModelAndUpdateColumns(myModel);\n\n    myRecentlyChangedConfigurable.reset();\n    myLimitHistory.reset();\n    myScopeFilterConfig.reset();\n    myBaseRevisionTexts.setSelected(myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF);\n    myShowChangedRecursively.setSelected(myVcsConfiguration.SHOW_DIRTY_RECURSIVELY);\n    myCommitMessageMarginConfigurable.reset();\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected JComponent createMainComponent() {\n    JPanel panel = new JPanel(new GridBagLayout());\n    GridBag gb = new GridBag()\n      .setDefaultInsets(new Insets(0, 0, DEFAULT_VGAP, DEFAULT_HGAP))\n      .setDefaultWeightX(1)\n      .setDefaultFill(GridBagConstraints.HORIZONTAL);\n\n    panel.add(createMappingsTable(), gb.nextLine().next().fillCell().weighty(1.0));\n    panel.add(createProjectMappingDescription(), gb.nextLine().next());\n    panel.add(createErrorList(), gb.nextLine().next());\n    panel.add(myLimitHistory.createComponent(), gb.nextLine().next());\n    panel.add(createShowRecursivelyDirtyOption(), gb.nextLine().next());\n    panel.add(createStoreBaseRevisionOption(), gb.nextLine().next());\n    panel.add(createShowChangedOption(), gb.nextLine().next());\n    panel.add(createShowVcsRootErrorNotificationOption(), gb.nextLine().next());\n    panel.add(myScopeFilterConfig.createComponent(), gb.nextLine().next());\n\n    return panel;\n  }","id":64781,"modified_method":"protected JComponent createMainComponent() {\n    JPanel panel = new JPanel(new GridBagLayout());\n    GridBag gb = new GridBag()\n      .setDefaultInsets(new Insets(0, 0, DEFAULT_VGAP, DEFAULT_HGAP))\n      .setDefaultWeightX(1)\n      .setDefaultFill(GridBagConstraints.HORIZONTAL);\n\n    panel.add(createMappingsTable(), gb.nextLine().next().fillCell().weighty(1.0));\n    panel.add(createProjectMappingDescription(), gb.nextLine().next());\n    panel.add(createErrorList(), gb.nextLine().next());\n    panel.add(myLimitHistory.createComponent(), gb.nextLine().next());\n    panel.add(createShowRecursivelyDirtyOption(), gb.nextLine().next());\n    panel.add(createStoreBaseRevisionOption(), gb.nextLine().next());\n    panel.add(createShowChangedOption(), gb.nextLine().next());\n    panel.add(createShowVcsRootErrorNotificationOption(), gb.nextLine().next());\n    panel.add(myScopeFilterConfig.createComponent(), gb.nextLine().next());\n    panel.add(createUseCommitMessageRightMargin(), gb.nextLine().next().fillCellHorizontally());\n\n    return panel;\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void apply() throws ConfigurationException {\n    myVcsManager.setDirectoryMappings(myModel.getItems());\n    myRecentlyChangedConfigurable.apply();\n    myLimitHistory.apply();\n    myScopeFilterConfig.apply();\n    myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF = myBaseRevisionTexts.isSelected();\n    myVcsConfiguration.SHOW_VCS_ERROR_NOTIFICATIONS = myShowVcsRootErrorNotification.isSelected();\n    myVcsConfiguration.SHOW_DIRTY_RECURSIVELY = myShowChangedRecursively.isSelected();\n    initializeModel();\n  }","id":64782,"modified_method":"public void apply() throws ConfigurationException {\n    myVcsManager.setDirectoryMappings(myModel.getItems());\n    myRecentlyChangedConfigurable.apply();\n    myLimitHistory.apply();\n    myScopeFilterConfig.apply();\n    myVcsConfiguration.INCLUDE_TEXT_INTO_SHELF = myBaseRevisionTexts.isSelected();\n    myVcsConfiguration.SHOW_VCS_ERROR_NOTIFICATIONS = myShowVcsRootErrorNotification.isSelected();\n    myVcsConfiguration.SHOW_DIRTY_RECURSIVELY = myShowChangedRecursively.isSelected();\n    myCommitMessageMarginConfigurable.apply();\n    initializeModel();\n  }","commit_id":"513eb87edd5828595358d1940a8f370900a3edbf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static EditorTextField createEditorField(final Project project, final boolean checkSpelling) {\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    Set<EditorCustomization.Feature> features = EnumSet.of(EditorCustomization.Feature.SOFT_WRAP);\n    if (checkSpelling) {\n      features.add(EditorCustomization.Feature.SPELL_CHECK);\n    }\n    return service.getEditorField(\n      FileTypes.PLAIN_TEXT.getLanguage(), project, features.toArray(new EditorCustomization.Feature[features.size()])\n    );\n  }","id":64783,"modified_method":"private static EditorTextField createEditorField(final Project project, final boolean checkSpelling) {\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    Set<EditorCustomization.Feature> features = EnumSet.of(EditorCustomization.Feature.SOFT_WRAP);\n    if (checkSpelling) {\n      features.add(EditorCustomization.Feature.SPELL_CHECK);\n    }\n    EditorTextField editorField = service.getEditorField(\n      FileTypes.PLAIN_TEXT.getLanguage(), project, features.toArray(new EditorCustomization.Feature[features.size()])\n    );\n    editorField.getDocument().putUserData(DATA_CONTEXT_KEY, DataManager.getInstance().getDataContext(editorField.getComponent()));\n    return editorField;\n  }","commit_id":"e0e7838cb55e34ba847c8274e658edbf7b7ed29a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void toggleEditorSpellchecking(Project project, EditorEx editorEx, boolean spellCheckingEnabled) {\n    EditorCustomization[] customizations = Extensions.getExtensions(EditorCustomization.EP_NAME, project);\n    EditorCustomization.Feature spellCheckFeature = EditorCustomization.Feature.SPELL_CHECK;\n    for (EditorCustomization customization : customizations) {\n      if (customization.getSupportedFeatures().contains(spellCheckFeature)) {\n        if (spellCheckingEnabled) {\n          customization.addCustomization(editorEx, spellCheckFeature);\n        }\n        else {\n          customization.removeCustomization(editorEx, spellCheckFeature);\n        }\n      }\n    }\n  }","id":64784,"modified_method":"private static void toggleEditorSpellchecking(Project project, EditorEx editorEx, boolean spellCheckingEnabled) {\n    EditorCustomization[] customizations = Extensions.getExtensions(EditorCustomization.EP_NAME, project);\n    SpellCheckingEditorFeature spellCheckFeature = new SpellCheckingEditorFeature(spellCheckingEnabled);\n\n    for (EditorCustomization customization : customizations) {\n      customization.doProcessCustomization(editorEx, spellCheckFeature);\n    }\n  }","commit_id":"0dc2c3aa1de72273d2b1ff1186353be0cb92893a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates a text editor appropriate for creating commit messages.\n   *\n   * @param project project this commit message editor is intended for\n   * @param forceSpellCheckOn if false, {@link com.intellij.openapi.vcs.VcsConfiguration#CHECK_COMMIT_MESSAGE_SPELLING} will control\n   *                          whether or not the editor has spell check enabled\n   * @return a commit message editor\n   */\n  public static EditorTextField createCommitTextEditor(final Project project, boolean forceSpellCheckOn) {\n    final boolean checkSpelling;\n    final boolean useCommitMessageMargin;\n    final int commitMessageMarginSize;\n\n    VcsConfiguration configuration = VcsConfiguration.getInstance(project);\n\n    if (configuration != null) {\n      checkSpelling = forceSpellCheckOn || configuration.CHECK_COMMIT_MESSAGE_SPELLING;\n      useCommitMessageMargin = configuration.USE_COMMIT_MESSAGE_MARGIN;\n      commitMessageMarginSize = configuration.COMMIT_MESSAGE_MARGIN_SIZE;\n    } else {\n      checkSpelling = true;\n      useCommitMessageMargin = false;\n      commitMessageMarginSize = -1;\n    }\n\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(),\n                                  project,\n                                  new EditorTextFieldProvider.AdHocEditorCustomizer() {\n                                    @Override\n                                    public void customize(EditorEx editor) {\n                                      toggleEditorSpellchecking(project, editor, checkSpelling);\n\n                                      if (useCommitMessageMargin) {\n                                        editor.setColorsScheme(EditorColorsManager.getInstance().getGlobalScheme());\n                                        editor.getSettings().setRightMarginShown(true);\n                                        editor.getSettings().setRightMargin(commitMessageMarginSize);\n                                      }\n                                    }\n                                  });\n  }","id":64785,"modified_method":"/**\n   * Creates a text editor appropriate for creating commit messages.\n   *\n   * @param project project this commit message editor is intended for\n   * @param forceSpellCheckOn if false, {@link com.intellij.openapi.vcs.VcsConfiguration#CHECK_COMMIT_MESSAGE_SPELLING} will control\n   *                          whether or not the editor has spell check enabled\n   * @return a commit message editor\n   */\n  public static EditorTextField createCommitTextEditor(final Project project, boolean forceSpellCheckOn) {\n    Set<EditorFeature> features = new HashSet<EditorFeature>();\n\n    VcsConfiguration configuration = VcsConfiguration.getInstance(project);\n    if (configuration != null) {\n      features.add(new SpellCheckingEditorFeature(forceSpellCheckOn || configuration.CHECK_COMMIT_MESSAGE_SPELLING));\n      features.add(new RightMarginEditorFeature(configuration.USE_COMMIT_MESSAGE_MARGIN, configuration.COMMIT_MESSAGE_MARGIN_SIZE));\n    } else {\n      features.add(new SpellCheckingEditorFeature(true));\n      features.add(new RightMarginEditorFeature(false, -1));\n    }\n\n    EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project, features);\n  }","commit_id":"0dc2c3aa1de72273d2b1ff1186353be0cb92893a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public EditorTextField getEditorField(@NotNull Language language,\n                                        @NotNull Project project,\n                                        @NotNull final Iterable<EditorCustomization.Feature> enabledFeatures,\n                                        @NotNull final Iterable<EditorCustomization.Feature> disabledFeatures) {\n    return new MyEditorTextField(language, project) {\n      @Override\n      protected void applyFeatures(@NotNull EditorCustomization[] customizations, @NotNull EditorEx editor) {\n        for (EditorCustomization.Feature feature : enabledFeatures) {\n          for (EditorCustomization customization : customizations) {\n            if (customization.getSupportedFeatures().contains(feature)) {\n              customization.addCustomization(editor, feature);\n              break;\n            }\n          }\n        }\n        for (EditorCustomization.Feature feature : disabledFeatures) {\n          for (EditorCustomization customization : customizations) {\n            if (customization.getSupportedFeatures().contains(feature)) {\n              customization.removeCustomization(editor, feature);\n              break;\n            }\n          }\n        }\n      }\n    };\n  }","id":64786,"modified_method":"@NotNull\n  @Override\n  public EditorTextField getEditorField(@NotNull Language language,\n                                        @NotNull Project project,\n                                        @NotNull final Iterable<EditorFeature> features) {\n    return new MyEditorTextField(language, project) {\n      @Override\n      protected void applyFeatures(@NotNull EditorCustomization[] customizations, @NotNull EditorEx editor) {\n        for (EditorFeature feature : features) {\n          for (EditorCustomization customization : customizations) {\n              customization.doProcessCustomization(editor, feature);\n          }\n        }\n      }\n    };\n  }","commit_id":"0dc2c3aa1de72273d2b1ff1186353be0cb92893a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static EditorTextField createEditorField(final Project project, final int defaultLines) {\n    final EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    final EditorTextField editorField;\n    final EnumSet<EditorCustomization.Feature> enabledFeatures = EnumSet.of(EditorCustomization.Feature.SPELL_CHECK);\n    final EnumSet<EditorCustomization.Feature> disabledFeatures = EnumSet.noneOf(EditorCustomization.Feature.class);\n    if (defaultLines == 1) {\n      disabledFeatures.add(EditorCustomization.Feature.HORIZONTAL_SCROLLBAR);\n      enabledFeatures.add(EditorCustomization.Feature.ONE_LINE);\n    } else {\n      enabledFeatures.add(EditorCustomization.Feature.SOFT_WRAP);\n    }\n    editorField = service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project, enabledFeatures, disabledFeatures);\n    final int height = editorField.getFontMetrics(editorField.getFont()).getHeight();\n    editorField.getComponent().setMinimumSize(new Dimension(100, (int)(height * 1.3)));\n    return editorField;\n  }","id":64787,"modified_method":"private static EditorTextField createEditorField(final Project project, final int defaultLines) {\n    final EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    final EditorTextField editorField;\n\n    final Set<EditorFeature> editorFeatures = new HashSet<EditorFeature>();\n    editorFeatures.add(new SpellCheckingEditorFeature(true));\n\n    if (defaultLines == 1) {\n      editorFeatures.add(new HorizontalScrollBarEditorFeature(false));\n      editorFeatures.add(new OneLineEditorFeature(true));\n    } else {\n      editorFeatures.add(new SoftWrapsEditorFeature(true));\n    }\n    editorField = service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project, editorFeatures);\n    final int height = editorField.getFontMetrics(editorField.getFont()).getHeight();\n    editorField.getComponent().setMinimumSize(new Dimension(100, (int)(height * 1.3)));\n    return editorField;\n  }","commit_id":"0dc2c3aa1de72273d2b1ff1186353be0cb92893a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createPopup(Project project) {\n    final JPanel panel = new JPanel(new BorderLayout());\n    final EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    myEditorField = service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project,\n                                           Collections.singletonList(EditorCustomization.Feature.SOFT_WRAP),\n                                           Collections.singletonList(EditorCustomization.Feature.SPELL_CHECK));\n    myEditorField.setBorder(new CompoundBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2), myEditorField.getBorder()));\n    myEditorField.setText(\"s\");\n    myEditorField.setText(myCurrentText);\n    myEditorField.setOneLineMode(false);\n    panel.add(myEditorField, BorderLayout.CENTER);\n\n    myTextFieldCompletionProvider = new TextFieldCompletionProviderDumbAware(true) {\n      @NotNull\n      @Override\n      protected String getPrefix(@NotNull String currentTextPrefix) {\n        final int text = currentTextPrefix.lastIndexOf(',');\n        return text == -1 ? currentTextPrefix : currentTextPrefix.substring(text + 1).trim();\n      }\n\n      @Override\n      protected void addCompletionVariants(@NotNull String text,\n                                           int offset,\n                                           @NotNull String prefix,\n                                           @NotNull CompletionResultSet result) {\n        final List<String> list = myUsers.get();\n        if (list != null) {\n          for (String completionVariant : list) {\n            final LookupElementBuilder element = LookupElementBuilder.create(completionVariant);\n            result.addElement(element.withLookupString(completionVariant.toLowerCase()));\n          }\n        }\n      }\n    };\n\n    myComponentPopupBuilder = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, myEditorField)\n      .setCancelOnClickOutside(true)\n      .setAdText(KeymapUtil.getShortcutsText(CommonShortcuts.CTRL_ENTER.getShortcuts()) + \" to finish\")\n      .setTitle(\"Specify user names, comma separated\")\n      .setMovable(true)\n      .setRequestFocus(true).setResizable(true);\n    mySelectOkAction = new AnAction() {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        myPopup.closeOk(e.getInputEvent());\n        final String newText = myEditorField.getText();\n        if (Comparing.equal(newText.trim(), myCurrentText.trim())) return;\n        myCurrentText = newText;\n        setText(myCurrentText.trim());\n        myPanel.setToolTipText(USER + \" \" + myCurrentText);\n        myUserFilterI.filter(myCurrentText);\n      }\n    };\n  }","id":64788,"modified_method":"private void createPopup(Project project) {\n    final JPanel panel = new JPanel(new BorderLayout());\n    final EditorTextFieldProvider service = ServiceManager.getService(project, EditorTextFieldProvider.class);\n    Set<EditorFeature> features = new HashSet<EditorFeature>();\n    features.add(new SoftWrapsEditorFeature(true));\n    features.add(new SpellCheckingEditorFeature(false));\n    myEditorField = service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(), project, features);\n    myEditorField.setBorder(new CompoundBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2), myEditorField.getBorder()));\n    myEditorField.setText(\"s\");\n    myEditorField.setText(myCurrentText);\n    myEditorField.setOneLineMode(false);\n    panel.add(myEditorField, BorderLayout.CENTER);\n\n    myTextFieldCompletionProvider = new TextFieldCompletionProviderDumbAware(true) {\n      @NotNull\n      @Override\n      protected String getPrefix(@NotNull String currentTextPrefix) {\n        final int text = currentTextPrefix.lastIndexOf(',');\n        return text == -1 ? currentTextPrefix : currentTextPrefix.substring(text + 1).trim();\n      }\n\n      @Override\n      protected void addCompletionVariants(@NotNull String text,\n                                           int offset,\n                                           @NotNull String prefix,\n                                           @NotNull CompletionResultSet result) {\n        final List<String> list = myUsers.get();\n        if (list != null) {\n          for (String completionVariant : list) {\n            final LookupElementBuilder element = LookupElementBuilder.create(completionVariant);\n            result.addElement(element.withLookupString(completionVariant.toLowerCase()));\n          }\n        }\n      }\n    };\n\n    myComponentPopupBuilder = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, myEditorField)\n      .setCancelOnClickOutside(true)\n      .setAdText(KeymapUtil.getShortcutsText(CommonShortcuts.CTRL_ENTER.getShortcuts()) + \" to finish\")\n      .setTitle(\"Specify user names, comma separated\")\n      .setMovable(true)\n      .setRequestFocus(true).setResizable(true);\n    mySelectOkAction = new AnAction() {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        myPopup.closeOk(e.getInputEvent());\n        final String newText = myEditorField.getText();\n        if (Comparing.equal(newText.trim(), myCurrentText.trim())) return;\n        myCurrentText = newText;\n        setText(myCurrentText.trim());\n        myPanel.setToolTipText(USER + \" \" + myCurrentText);\n        myUserFilterI.filter(myCurrentText);\n      }\n    };\n  }","commit_id":"0dc2c3aa1de72273d2b1ff1186353be0cb92893a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void respondToStateRequester(String id, Address stateRequester, boolean open_barrier) {\n\n        // setup the plumbing if needed\n        if(spawner == null) {           \n            spawner=new StateProviderThreadSpawner(setupThreadPool(), Util.createServerSocket(bind_addr, bind_port));\n            Thread t=getThreadFactory().newThread(spawner,\n                                                  \"STREAMING_STATE_TRANSFER server socket acceptor\");\n            t.start();\n        }\n\n        Digest digest=isDigestNeeded()? (Digest)down_prot.down(Event.GET_DIGEST_EVT) : null;\n      \n        Message state_rsp=new Message(stateRequester);\n        StateHeader hdr=new StateHeader(StateHeader.STATE_RSP,\n                                        local_addr,\n                                        spawner.getServerSocketAddress(),\n                                        digest,\n                                        id);\n        state_rsp.putHeader(getName(), hdr);\n\n        if(log.isDebugEnabled())\n            log.debug(\"Responding to state requester \" + state_rsp.getDest()\n                      + \" with address \"\n                      + spawner.getServerSocketAddress()\n                      + \" and digest \"\n                      + digest);\n        down_prot.down(new Event(Event.MSG, state_rsp));\n        if(stats) {\n            num_state_reqs.incrementAndGet();\n        }\n\n        if(open_barrier)\n            down_prot.down(new Event(Event.OPEN_BARRIER));\n    }","id":64789,"modified_method":"private void respondToStateRequester(String id, Address stateRequester, boolean open_barrier) {\n\n        // setup socket plumbing if needed\n        if(spawner == null && !use_default_transport) {           \n            spawner=new StateProviderThreadSpawner(setupThreadPool(), Util.createServerSocket(bind_addr, bind_port));\n            Thread t=getThreadFactory().newThread(spawner,\n                                                  \"STREAMING_STATE_TRANSFER server socket acceptor\");\n            t.start();\n        }\n\n        Digest digest=isDigestNeeded()? (Digest)down_prot.down(Event.GET_DIGEST_EVT) : null;\n      \n        Message state_rsp=new Message(stateRequester);\n        StateHeader hdr=new StateHeader(StateHeader.STATE_RSP,\n                                        local_addr,\n                                        use_default_transport?null:spawner.getServerSocketAddress(),\n                                        digest,\n                                        id);\n        state_rsp.putHeader(getName(), hdr);\n\n        if(log.isDebugEnabled())\n            log.debug(\"Responding to state requester \" + state_rsp.getDest()\n                      + \" with address \"\n                      + (use_default_transport?null:spawner.getServerSocketAddress())\n                      + \" and digest \"\n                      + digest);\n        down_prot.down(new Event(Event.MSG, state_rsp));\n        if(stats) {\n            num_state_reqs.incrementAndGet();\n        }\n\n        if(open_barrier)\n            down_prot.down(new Event(Event.OPEN_BARRIER));\n        \n        if(use_default_transport){\n        \topenAndProvideOutputStreamToStateRecipient(stateRequester, id);\n        }\n    }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object up(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.MSG:\n                Message msg=(Message)evt.getArg();\n                StateHeader hdr=(StateHeader)msg.getHeader(getName());\n                if(hdr != null) {\n                    switch(hdr.type) {\n                        case StateHeader.STATE_REQ:\n                            handleStateReq(hdr);\n                            break;\n                        case StateHeader.STATE_RSP:\n                            handleStateRsp(hdr);\n                            break;\n                        default:\n                            if(log.isErrorEnabled())\n                                log.error(\"type \" + hdr.type + \" not known in StateHeader\");\n                            break;\n                    }\n                    return null;\n                }\n                break;\n\n            case Event.SET_LOCAL_ADDRESS:\n                local_addr=(Address)evt.getArg();\n                break;\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(bind_addr == null && (config != null && config.containsKey(\"bind_addr\"))) {\n                    bind_addr=(InetAddress)config.get(\"bind_addr\");\n                    if(log.isDebugEnabled())\n                        log.debug(\"using bind_addr from CONFIG event \" + bind_addr);\n                }\n                if(config != null && config.containsKey(\"state_transfer\")) {\n                    log.error(\"Protocol stack cannot contain two state transfer protocols. Remove either one of them\");\n                }\n                break;\n        }\n        return up_prot.up(evt);\n    }","id":64790,"modified_method":"public Object up(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.MSG:\n                Message msg=(Message)evt.getArg();\n                StateHeader hdr=(StateHeader)msg.getHeader(getName());\n                if(hdr != null) {\n                    switch(hdr.type) {\n                        case StateHeader.STATE_REQ:\n                            handleStateReq(hdr);\n                            break;\n                        case StateHeader.STATE_RSP:\n                            handleStateRsp(hdr);\n                            break;\n                        case StateHeader.STATE_PART:\n                        \tBlockingQueue<Message> queue = statesMap.get(hdr.state_id);\n                        \ttry {\n                        \t\tqueue.put(msg);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\t\t\t\t\t\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n                        \tbreak;\n                        default:\n                            if(log.isErrorEnabled())\n                                log.error(\"type \" + hdr.type + \" not known in StateHeader\");\n                            break;\n                    }\n                    return null;\n                }\n                break;\n\n            case Event.SET_LOCAL_ADDRESS:\n                local_addr=(Address)evt.getArg();\n                break;\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(bind_addr == null && (config != null && config.containsKey(\"bind_addr\"))) {\n                    bind_addr=(InetAddress)config.get(\"bind_addr\");\n                    if(log.isDebugEnabled())\n                        log.debug(\"using bind_addr from CONFIG event \" + bind_addr);\n                }\n                if(config != null && config.containsKey(\"state_transfer\")) {\n                    log.error(\"Protocol stack cannot contain two state transfer protocols. Remove either one of them\");\n                }\n                break;\n        }\n        return up_prot.up(evt);\n    }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n\n        switch(evt.getType()) {\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.GET_STATE:\n                StateTransferInfo info=(StateTransferInfo)evt.getArg();\n                Address target;\n                if(info.target == null) {\n                    target=determineCoordinator();\n                }\n                else {\n                    target=info.target;\n                    if(target.equals(local_addr)) {\n                        if(log.isErrorEnabled())\n                            log.error(\"GET_STATE: cannot fetch state from myself !\");\n                        target=null;\n                    }\n                }\n                if(target == null) {\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: first member (no state)\");\n                    up_prot.up(new Event(Event.GET_STATE_OK, new StateTransferInfo()));\n                }\n                else {\n                    Message state_req=new Message(target, null, null);\n                    state_req.putHeader(getName(), new StateHeader(StateHeader.STATE_REQ,\n                                                              local_addr,\n                                                              info.state_id));\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: asking \" + target\n                                  + \" for state, passing down a SUSPEND_STABLE event, timeout=\"\n                                  + info.timeout);\n\n                    down_prot.down(new Event(Event.SUSPEND_STABLE, new Long(info.timeout)));\n                    down_prot.down(new Event(Event.MSG, state_req));\n                }\n                return null; // don't pass down any further !\n\n            case Event.STATE_TRANSFER_INPUTSTREAM_CLOSED:\n                if(log.isDebugEnabled())\n                    log.debug(\"STATE_TRANSFER_INPUTSTREAM_CLOSED received,passing down a RESUME_STABLE event\");\n\n                down_prot.down(new Event(Event.RESUME_STABLE));\n                return null;\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(config != null && config.containsKey(\"flush_supported\")) {\n                    flushProtocolInStack=true;\n                }\n                break;\n\n        }\n\n        return down_prot.down(evt); // pass on to the layer below us\n    }","id":64791,"modified_method":"public Object down(Event evt) {\n\n        switch(evt.getType()) {\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.GET_STATE:\n                StateTransferInfo info=(StateTransferInfo)evt.getArg();\n                Address target;\n                if(info.target == null) {\n                    target=determineCoordinator();\n                }\n                else {\n                    target=info.target;\n                    if(target.equals(local_addr)) {\n                        if(log.isErrorEnabled())\n                            log.error(\"GET_STATE: cannot fetch state from myself !\");\n                        target=null;\n                    }\n                }\n                if(target == null) {\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: first member (no state)\");\n                    up_prot.up(new Event(Event.GET_STATE_OK, new StateTransferInfo()));\n                }\n                else {\n                    Message state_req=new Message(target, null, null);\n                    state_req.putHeader(getName(), new StateHeader(StateHeader.STATE_REQ,\n                                                              local_addr,\n                                                              info.state_id));\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: asking \" + target\n                                  + \" for state, passing down a SUSPEND_STABLE event, timeout=\"\n                                  + info.timeout);\n\n                    if(use_default_transport){\n                    \tstatesMap.put(info.state_id, new LinkedBlockingQueue<Message>());\n                    }\n                    down_prot.down(new Event(Event.SUSPEND_STABLE, new Long(info.timeout)));\n                    down_prot.down(new Event(Event.MSG, state_req));\n                }\n                return null; // don't pass down any further !\n\n            case Event.STATE_TRANSFER_INPUTSTREAM_CLOSED:\n                if(log.isDebugEnabled())\n                    log.debug(\"STATE_TRANSFER_INPUTSTREAM_CLOSED received,passing down a RESUME_STABLE event\");\n\n                down_prot.down(new Event(Event.RESUME_STABLE));\n                return null;\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(config != null && config.containsKey(\"flush_supported\")) {\n                    flushProtocolInStack=true;\n                }\n                break;\n\n        }\n\n        return down_prot.down(evt); // pass on to the layer below us\n    }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"static String type2Str(int t) {\n            switch(t) {\n                case STATE_REQ:\n                    return \"STATE_REQ\";\n                case STATE_RSP:\n                    return \"STATE_RSP\";\n                default:\n                    return \"<unknown>\";\n            }\n        }","id":64792,"modified_method":"static String type2Str(int t) {\n            switch(t) {\n                case STATE_REQ:\n                    return \"STATE_REQ\";\n                case STATE_RSP:\n                    return \"STATE_RSP\";\n                case STATE_PART:\n                    return \"STATE_PART\";    \n                default:\n                    return \"<unknown>\";\n            }\n        }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"void handleStateRsp(StateHeader hdr) {\n        Digest tmp_digest=hdr.my_digest;\n        if(isDigestNeeded()) {\n            if(tmp_digest == null) {\n                if(log.isWarnEnabled())\n                    log.warn(\"digest received from \" + hdr.sender\n                             + \" is null, skipping setting digest !\");\n            }\n            else {\n                down_prot.down(new Event(Event.SET_DIGEST, tmp_digest));\n            }\n        }\n        connectToStateProvider(hdr);\n    }","id":64793,"modified_method":"void handleStateRsp(final StateHeader hdr) {\n        Digest tmp_digest=hdr.my_digest;\n        if(isDigestNeeded()) {\n            if(tmp_digest == null) {\n                if(log.isWarnEnabled())\n                    log.warn(\"digest received from \" + hdr.sender\n                             + \" is null, skipping setting digest !\");\n            }\n            else {\n                down_prot.down(new Event(Event.SET_DIGEST, tmp_digest));\n            }\n        }\n        if(use_default_transport){\n\t        //have to use another thread to read state while state recipient \n\t        //has to accept state messages from state provider\n\t\t\tThread t = getThreadFactory().newThread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\topenAndProvideInputStreamToStateProvider(hdr);\n\t\t\t\t}\n\t\t\t}, \"STREAMING_STATE_TRANSFER state reader\");\n\t\t\tt.start();        \n        } else{\n        \tconnectToStateProvider(hdr);\n        }        \n    }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"public STREAMING_STATE_TRANSFER() {}","id":64794,"modified_method":"public STREAMING_STATE_TRANSFER() {\n    \tstatesMap = Collections.synchronizedMap(new HashMap<String, LinkedBlockingQueue<Message>>());\n    }","commit_id":"fe2da3697cfbed5873e3f506fcd3b4a21b3fae97","url":"https://github.com/belaban/JGroups"},{"original_method":"private void respondToStateRequester(String id, Address stateRequester, boolean open_barrier) {\n\n        // setup the plumbing if needed\n        if(spawner == null) {           \n            spawner=new StateProviderThreadSpawner(setupThreadPool(), Util.createServerSocket(bind_addr, bind_port));\n            Thread t=getThreadFactory().newThread(spawner,\n                                                  \"STREAMING_STATE_TRANSFER server socket acceptor\");\n            t.start();\n        }\n\n        Digest digest=isDigestNeeded()? (Digest)down_prot.down(Event.GET_DIGEST_EVT) : null;\n      \n        Message state_rsp=new Message(stateRequester);\n        StateHeader hdr=new StateHeader(StateHeader.STATE_RSP,\n                                        local_addr,\n                                        spawner.getServerSocketAddress(),\n                                        digest,\n                                        id);\n        state_rsp.putHeader(getName(), hdr);\n\n        if(log.isDebugEnabled())\n            log.debug(\"Responding to state requester \" + state_rsp.getDest()\n                      + \" with address \"\n                      + spawner.getServerSocketAddress()\n                      + \" and digest \"\n                      + digest);\n        down_prot.down(new Event(Event.MSG, state_rsp));\n        if(stats) {\n            num_state_reqs.incrementAndGet();\n        }\n\n        if(open_barrier)\n            down_prot.down(new Event(Event.OPEN_BARRIER));\n    }","id":64795,"modified_method":"private void respondToStateRequester(String id, Address stateRequester, boolean open_barrier) {\n\n        // setup socket plumbing if needed\n        if(spawner == null && !use_default_transport) {           \n            spawner=new StateProviderThreadSpawner(setupThreadPool(), Util.createServerSocket(bind_addr, bind_port));\n            Thread t=getThreadFactory().newThread(spawner,\n                                                  \"STREAMING_STATE_TRANSFER server socket acceptor\");\n            t.start();\n        }\n\n        Digest digest=isDigestNeeded()? (Digest)down_prot.down(Event.GET_DIGEST_EVT) : null;\n      \n        Message state_rsp=new Message(stateRequester);\n        StateHeader hdr=new StateHeader(StateHeader.STATE_RSP,\n                                        local_addr,\n                                        use_default_transport?null:spawner.getServerSocketAddress(),\n                                        digest,\n                                        id);\n        state_rsp.putHeader(getName(), hdr);\n\n        if(log.isDebugEnabled())\n            log.debug(\"Responding to state requester \" + state_rsp.getDest()\n                      + \" with address \"\n                      + (use_default_transport?null:spawner.getServerSocketAddress())\n                      + \" and digest \"\n                      + digest);\n        down_prot.down(new Event(Event.MSG, state_rsp));\n        if(stats) {\n            num_state_reqs.incrementAndGet();\n        }\n\n        if(open_barrier)\n            down_prot.down(new Event(Event.OPEN_BARRIER));\n        \n        if(use_default_transport){\n        \topenAndProvideOutputStreamToStateRecipient(stateRequester, id);\n        }\n    }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"void handleStateRsp(StateHeader hdr) {\n        Digest tmp_digest=hdr.my_digest;\n        if(isDigestNeeded()) {\n            if(tmp_digest == null) {\n                if(log.isWarnEnabled())\n                    log.warn(\"digest received from \" + hdr.sender\n                             + \" is null, skipping setting digest !\");\n            }\n            else {\n                down_prot.down(new Event(Event.SET_DIGEST, tmp_digest));\n            }\n        }\n        connectToStateProvider(hdr);\n    }","id":64796,"modified_method":"void handleStateRsp(final StateHeader hdr) {\n        Digest tmp_digest=hdr.my_digest;\n        if(isDigestNeeded()) {\n            if(tmp_digest == null) {\n                if(log.isWarnEnabled())\n                    log.warn(\"digest received from \" + hdr.sender\n                             + \" is null, skipping setting digest !\");\n            }\n            else {\n                down_prot.down(new Event(Event.SET_DIGEST, tmp_digest));\n            }\n        }\n        if(use_default_transport){\n\t        //have to use another thread to read state while state recipient \n\t        //has to accept state messages from state provider\n\t\t\tThread t = getThreadFactory().newThread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\topenAndProvideInputStreamToStateProvider(hdr);\n\t\t\t\t}\n\t\t\t}, \"STREAMING_STATE_TRANSFER state reader\");\n\t\t\tt.start();        \n        } else{\n        \tconnectToStateProvider(hdr);\n        }        \n    }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object up(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.MSG:\n                Message msg=(Message)evt.getArg();\n                StateHeader hdr=(StateHeader)msg.getHeader(getName());\n                if(hdr != null) {\n                    switch(hdr.type) {\n                        case StateHeader.STATE_REQ:\n                            handleStateReq(hdr);\n                            break;\n                        case StateHeader.STATE_RSP:\n                            handleStateRsp(hdr);\n                            break;\n                        default:\n                            if(log.isErrorEnabled())\n                                log.error(\"type \" + hdr.type + \" not known in StateHeader\");\n                            break;\n                    }\n                    return null;\n                }\n                break;\n\n            case Event.SET_LOCAL_ADDRESS:\n                local_addr=(Address)evt.getArg();\n                break;\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(bind_addr == null && (config != null && config.containsKey(\"bind_addr\"))) {\n                    bind_addr=(InetAddress)config.get(\"bind_addr\");\n                    if(log.isDebugEnabled())\n                        log.debug(\"using bind_addr from CONFIG event \" + bind_addr);\n                }\n                if(config != null && config.containsKey(\"state_transfer\")) {\n                    log.error(\"Protocol stack cannot contain two state transfer protocols. Remove either one of them\");\n                }\n                break;\n        }\n        return up_prot.up(evt);\n    }","id":64797,"modified_method":"public Object up(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.MSG:\n                Message msg=(Message)evt.getArg();\n                StateHeader hdr=(StateHeader)msg.getHeader(getName());\n                if(hdr != null) {\n                    switch(hdr.type) {\n                        case StateHeader.STATE_REQ:\n                            handleStateReq(hdr);\n                            break;\n                        case StateHeader.STATE_RSP:\n                            handleStateRsp(hdr);\n                            break;\n                        case StateHeader.STATE_PART:\n                        \tBlockingQueue<Message> queue = statesMap.get(hdr.state_id);\n                        \ttry {\n                        \t\tqueue.put(msg);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\t\t\t\t\t\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n                        \tbreak;\n                        default:\n                            if(log.isErrorEnabled())\n                                log.error(\"type \" + hdr.type + \" not known in StateHeader\");\n                            break;\n                    }\n                    return null;\n                }\n                break;\n\n            case Event.SET_LOCAL_ADDRESS:\n                local_addr=(Address)evt.getArg();\n                break;\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(bind_addr == null && (config != null && config.containsKey(\"bind_addr\"))) {\n                    bind_addr=(InetAddress)config.get(\"bind_addr\");\n                    if(log.isDebugEnabled())\n                        log.debug(\"using bind_addr from CONFIG event \" + bind_addr);\n                }\n                if(config != null && config.containsKey(\"state_transfer\")) {\n                    log.error(\"Protocol stack cannot contain two state transfer protocols. Remove either one of them\");\n                }\n                break;\n        }\n        return up_prot.up(evt);\n    }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n\n        switch(evt.getType()) {\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.GET_STATE:\n                StateTransferInfo info=(StateTransferInfo)evt.getArg();\n                Address target;\n                if(info.target == null) {\n                    target=determineCoordinator();\n                }\n                else {\n                    target=info.target;\n                    if(target.equals(local_addr)) {\n                        if(log.isErrorEnabled())\n                            log.error(\"GET_STATE: cannot fetch state from myself !\");\n                        target=null;\n                    }\n                }\n                if(target == null) {\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: first member (no state)\");\n                    up_prot.up(new Event(Event.GET_STATE_OK, new StateTransferInfo()));\n                }\n                else {\n                    Message state_req=new Message(target, null, null);\n                    state_req.putHeader(getName(), new StateHeader(StateHeader.STATE_REQ,\n                                                              local_addr,\n                                                              info.state_id));\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: asking \" + target\n                                  + \" for state, passing down a SUSPEND_STABLE event, timeout=\"\n                                  + info.timeout);\n\n                    down_prot.down(new Event(Event.SUSPEND_STABLE, new Long(info.timeout)));\n                    down_prot.down(new Event(Event.MSG, state_req));\n                }\n                return null; // don't pass down any further !\n\n            case Event.STATE_TRANSFER_INPUTSTREAM_CLOSED:\n                if(log.isDebugEnabled())\n                    log.debug(\"STATE_TRANSFER_INPUTSTREAM_CLOSED received,passing down a RESUME_STABLE event\");\n\n                down_prot.down(new Event(Event.RESUME_STABLE));\n                return null;\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(config != null && config.containsKey(\"flush_supported\")) {\n                    flushProtocolInStack=true;\n                }\n                break;\n\n        }\n\n        return down_prot.down(evt); // pass on to the layer below us\n    }","id":64798,"modified_method":"public Object down(Event evt) {\n\n        switch(evt.getType()) {\n\n            case Event.TMP_VIEW:\n            case Event.VIEW_CHANGE:\n                handleViewChange((View)evt.getArg());\n                break;\n\n            case Event.GET_STATE:\n                StateTransferInfo info=(StateTransferInfo)evt.getArg();\n                Address target;\n                if(info.target == null) {\n                    target=determineCoordinator();\n                }\n                else {\n                    target=info.target;\n                    if(target.equals(local_addr)) {\n                        if(log.isErrorEnabled())\n                            log.error(\"GET_STATE: cannot fetch state from myself !\");\n                        target=null;\n                    }\n                }\n                if(target == null) {\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: first member (no state)\");\n                    up_prot.up(new Event(Event.GET_STATE_OK, new StateTransferInfo()));\n                }\n                else {\n                    Message state_req=new Message(target, null, null);\n                    state_req.putHeader(getName(), new StateHeader(StateHeader.STATE_REQ,\n                                                              local_addr,\n                                                              info.state_id));\n                    if(log.isDebugEnabled())\n                        log.debug(\"GET_STATE: asking \" + target\n                                  + \" for state, passing down a SUSPEND_STABLE event, timeout=\"\n                                  + info.timeout);\n\n                    if(use_default_transport){\n                    \tstatesMap.put(info.state_id, new LinkedBlockingQueue<Message>());\n                    }\n                    down_prot.down(new Event(Event.SUSPEND_STABLE, new Long(info.timeout)));\n                    down_prot.down(new Event(Event.MSG, state_req));\n                }\n                return null; // don't pass down any further !\n\n            case Event.STATE_TRANSFER_INPUTSTREAM_CLOSED:\n                if(log.isDebugEnabled())\n                    log.debug(\"STATE_TRANSFER_INPUTSTREAM_CLOSED received,passing down a RESUME_STABLE event\");\n\n                down_prot.down(new Event(Event.RESUME_STABLE));\n                return null;\n            case Event.CONFIG:\n                Map<String,Object> config=(Map<String,Object>)evt.getArg();\n                if(config != null && config.containsKey(\"flush_supported\")) {\n                    flushProtocolInStack=true;\n                }\n                break;\n\n        }\n\n        return down_prot.down(evt); // pass on to the layer below us\n    }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"public STREAMING_STATE_TRANSFER() {}","id":64799,"modified_method":"public STREAMING_STATE_TRANSFER() {\n    \tstatesMap = Collections.synchronizedMap(new HashMap<String, LinkedBlockingQueue<Message>>());\n    }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"static String type2Str(int t) {\n            switch(t) {\n                case STATE_REQ:\n                    return \"STATE_REQ\";\n                case STATE_RSP:\n                    return \"STATE_RSP\";\n                default:\n                    return \"<unknown>\";\n            }\n        }","id":64800,"modified_method":"static String type2Str(int t) {\n            switch(t) {\n                case STATE_REQ:\n                    return \"STATE_REQ\";\n                case STATE_RSP:\n                    return \"STATE_RSP\";\n                case STATE_PART:\n                    return \"STATE_PART\";    \n                default:\n                    return \"<unknown>\";\n            }\n        }","commit_id":"038ab398aab47329e9b03946ae469dfa80186930","url":"https://github.com/belaban/JGroups"},{"original_method":"public static SNode asNode(SConcept concept) {\n    if (concept == null) {\n      return null;\n    }\n    return (SNode) concept.getDeclarationNode();\n  }","id":64801,"modified_method":"public static SNode asNode(SAbstractConcept concept) {\n    if (concept == null) {\n      return null;\n    }\n    return (SNode) concept.getDeclarationNode();\n  }","commit_id":"bf006aa7702f61503a4084729cc8aee8a8c553a1","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * this method is used where both concept and declaration should be acceptable\n   */\n  @Deprecated\n  public static SConcept asSConcept(SConcept concept) {\n    return concept;\n  }","id":64802,"modified_method":"/**\n   * this method is used where both concept and declaration should be acceptable\n   */\n  @Deprecated\n  public static SAbstractConcept asSConcept(SAbstractConcept concept) {\n    return concept;\n  }","commit_id":"bf006aa7702f61503a4084729cc8aee8a8c553a1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SConcept asSConcept(SNode node) {\n    if (node == null) {\n      return null;\n    }\n    return MetaAdapterByDeclaration.getConcept((jetbrains.mps.smodel.SNode) node);\n  }","id":64803,"modified_method":"public static SAbstractConcept asSConcept(SNode node) {\n    if (node == null) {\n      return null;\n    }\n    return MetaAdapterByDeclaration.getConcept((jetbrains.mps.smodel.SNode) node);\n  }","commit_id":"bf006aa7702f61503a4084729cc8aee8a8c553a1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void copyAllAttributes(SNode oldChild, SNode newChild) {\n    for (SNode attribute : AttributeOperations.getAllAttributes(oldChild)) {\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049750l, \"jetbrains.mps.lang.core.structure.PropertyAttribute\"))) {\n        String propertyName = AttributeOperations.getPropertyName(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049750l, \"jetbrains.mps.lang.core.structure.PropertyAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(newChild), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findPropertyDeclaration_1219835742593\", new Object[]{propertyName}) == null)) {\n          // no such property in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for property '\" + propertyName + \"' : so such property in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049745l, \"jetbrains.mps.lang.core.structure.LinkAttribute\"))) {\n        String linkRole = AttributeOperations.getLinkRole(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049745l, \"jetbrains.mps.lang.core.structure.LinkAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(newChild), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{linkRole}) == null)) {\n          // no such link in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for link '\" + linkRole + \"' : so such link in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n\n      newChild.addChild(SNodeOperations.getContainingLinkRole(attribute), SNodeOperations.copyNode(attribute));\n    }\n  }","id":64804,"modified_method":"private static void copyAllAttributes(SNode oldChild, SNode newChild) {\n    for (SNode attribute : AttributeOperations.getAllAttributes(oldChild)) {\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049750l, \"jetbrains.mps.lang.core.structure.PropertyAttribute\"))) {\n        String propertyName = AttributeOperations.getPropertyName(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049750l, \"jetbrains.mps.lang.core.structure.PropertyAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(newChild)), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findPropertyDeclaration_1219835742593\", new Object[]{propertyName}) == null)) {\n          // no such property in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for property '\" + propertyName + \"' : so such property in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049745l, \"jetbrains.mps.lang.core.structure.LinkAttribute\"))) {\n        String linkRole = AttributeOperations.getLinkRole(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 3364660638048049745l, \"jetbrains.mps.lang.core.structure.LinkAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(newChild)), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{linkRole}) == null)) {\n          // no such link in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for link '\" + linkRole + \"' : so such link in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n\n      newChild.addChild(SNodeOperations.getContainingLinkRole(attribute), SNodeOperations.copyNode(attribute));\n    }\n  }","commit_id":"bf006aa7702f61503a4084729cc8aee8a8c553a1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {\n    return SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, \"jetbrains.mps.build.structure.BuildProject\")) && ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(parentNode, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, \"jetbrains.mps.build.structure.BuildProject\")), MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x5c3f3e2c1ce9ac70L, \"plugins\"))).any(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5c3f3e2c1ce9ac67L, \"jetbrains.mps.build.structure.BuildJavaPlugin\"));\n      }\n    }) || parentNode.getConcept().getQualifiedName().startsWith(\"jetbrains.mps.lang.generator\");\n  }","id":64805,"modified_method":"public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {\n    return SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, \"jetbrains.mps.build.structure.BuildProject\")) && ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(parentNode, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, \"jetbrains.mps.build.structure.BuildProject\")), MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x5c3f3e2c1ce9ac70L, \"plugins\"))).any(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5c3f3e2c1ce9ac67L, \"jetbrains.mps.build.structure.BuildJavaPlugin\"));\n      }\n    }) || parentNode.getConcept().getLanguage().getSourceModule().equals(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference(\"b401a680-8325-4110-8fd3-84331ff25bef(jetbrains.mps.lang.generator)\"), Language.class));\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void setupIDeprecatableStyles(SNode node, EditorCell cell) {\n    SNode deprecatable = SNodeOperations.as(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11d205fe38dL, \"jetbrains.mps.lang.core.structure.IDeprecatable\"));\n    if (deprecatable != null && (BehaviorReflection.invokeVirtual(Boolean.TYPE, deprecatable, \"virtual_isDeprecated_1224609060727\", new Object[]{}) || BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.getConceptDeclaration(deprecatable), \"virtual_isDeprecated_1224609060727\", new Object[]{}))) {\n      cell.getStyle().set(StyleAttributes.STRIKE_OUT, true);\n    }\n  }","id":64806,"modified_method":"public static void setupIDeprecatableStyles(SNode node, EditorCell cell) {\n    SNode deprecatable = SNodeOperations.as(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11d205fe38dL, \"jetbrains.mps.lang.core.structure.IDeprecatable\"));\n    if (deprecatable != null && (BehaviorReflection.invokeVirtual(Boolean.TYPE, deprecatable, \"virtual_isDeprecated_1224609060727\", new Object[]{}) || BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(deprecatable)), \"virtual_isDeprecated_1224609060727\", new Object[]{}))) {\n      cell.getStyle().set(StyleAttributes.STRIKE_OUT, true);\n    }\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean isExcluded(SNode node) {\n    SNode editorCellId = SNodeOperations.as(node, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L, \"jetbrains.mps.lang.editor.structure.EditorCellId\"));\n    if (editorCellId == null) {\n      return true;\n    }\n    SNode conceptAspect = SNodeOperations.getNodeAncestor(editorCellId, MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, \"jetbrains.mps.lang.structure.structure.IConceptAspect\"), false, false);\n    return conceptAspect == null || !(AbstractConceptDeclaration_Behavior.call_isSubconceptOf_8134325418312549386(myConceptDeclaration, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), conceptAspect, \"virtual_getBaseConcept_2621449412040133768\", new Object[]{})));\n  }","id":64807,"modified_method":"@Override\n  public boolean isExcluded(SNode node) {\n    SNode editorCellId = SNodeOperations.as(node, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L, \"jetbrains.mps.lang.editor.structure.EditorCellId\"));\n    if (editorCellId == null) {\n      return true;\n    }\n    SNode conceptAspect = SNodeOperations.getNodeAncestor(editorCellId, MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, \"jetbrains.mps.lang.structure.structure.IConceptAspect\"), false, false);\n    return conceptAspect == null || !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(myConceptDeclaration), SNodeOperations.asSConcept(SNodeOperations.asSConcept(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), conceptAspect, \"virtual_getBaseConcept_2621449412040133768\", new Object[]{})))));\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCellIdScope(SModel model, SNode conceptDeclaration) {\n    super(new ModelsScope(getModels(model), false, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L, \"jetbrains.mps.lang.editor.structure.EditorCellId\")));\n    myConceptDeclaration = conceptDeclaration;\n  }","id":64808,"modified_method":"public EditorCellIdScope(SModel model, SNode conceptDeclaration) {\n    super(new ModelsScope(getModels(model), false, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L, \"jetbrains.mps.lang.editor.structure.EditorCellId\")));\n    myConceptDeclaration = SNodeOperations.asSConcept(conceptDeclaration);\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void copyAllAttributes(SNode oldChild, SNode newChild) {\n    for (SNode attribute : AttributeOperations.getAllAttributes(oldChild)) {\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, \"jetbrains.mps.lang.core.structure.PropertyAttribute\"))) {\n        String propertyName = AttributeOperations.getPropertyName(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, \"jetbrains.mps.lang.core.structure.PropertyAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(newChild), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findPropertyDeclaration_1219835742593\", new Object[]{propertyName}) == null)) {\n          // no such property in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for property '\" + propertyName + \"' : so such property in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, \"jetbrains.mps.lang.core.structure.LinkAttribute\"))) {\n        String linkRole = AttributeOperations.getLinkRole(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, \"jetbrains.mps.lang.core.structure.LinkAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(newChild), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{linkRole}) == null)) {\n          // no such link in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for link '\" + linkRole + \"' : so such link in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n\n      newChild.addChild(SNodeOperations.getContainingLinkRole(attribute), SNodeOperations.copyNode(attribute));\n    }\n  }","id":64809,"modified_method":"private static void copyAllAttributes(SNode oldChild, SNode newChild) {\n    for (SNode attribute : AttributeOperations.getAllAttributes(oldChild)) {\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, \"jetbrains.mps.lang.core.structure.PropertyAttribute\"))) {\n        String propertyName = AttributeOperations.getPropertyName(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, \"jetbrains.mps.lang.core.structure.PropertyAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(newChild)), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findPropertyDeclaration_1219835742593\", new Object[]{propertyName}) == null)) {\n          // no such property in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for property '\" + propertyName + \"' : so such property in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n      if (SNodeOperations.isInstanceOf(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, \"jetbrains.mps.lang.core.structure.LinkAttribute\"))) {\n        String linkRole = AttributeOperations.getLinkRole(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, \"jetbrains.mps.lang.core.structure.LinkAttribute\")));\n        if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(newChild)), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{linkRole}) == null)) {\n          // no such link in new child : don't copy the attribute \n          LOG.error(\"couldn't copy attribute \" + attribute.getConcept().getName() + \" for link '\" + linkRole + \"' : so such link in concept \" + newChild.getConcept().getName(), newChild);\n          continue;\n        }\n      }\n\n      newChild.addChild(SNodeOperations.getContainingLinkRole(attribute), SNodeOperations.copyNode(attribute));\n    }\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean resolve(@NotNull final SReference reference, @NotNull final SNode sourceNode, @NotNull final SRepository repository) {\n    SNode linkDeclaration = BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(sourceNode), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{reference.getRole()});\n    if (linkDeclaration == null) {\n      return false;\n    }\n    final SNode referentConcept = SLinkOperations.getTarget(linkDeclaration, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98055fef0L, \"target\"));\n    return TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        Scope refScope = ModelConstraints.getScope(reference);\n        if (refScope instanceof ErrorScope) {\n          LOG.error(\"Couldn't create referent search scope : \" + ((ErrorScope) refScope).getMessage());\n          return false;\n        }\n        SNode result = null;\n        String resolveInfo = ((jetbrains.mps.smodel.SReference) reference).getResolveInfo();\n        if (resolveInfo != null) {\n          try {\n            result = refScope.resolve(sourceNode, resolveInfo);\n          } catch (Throwable t) {\n            LOG.warn(\"Exception was thrown during reference resolving\", t);\n          }\n        }\n        if (result == null) {\n          return false;\n        }\n        sourceNode.setReferenceTarget(reference.getRole(), result);\n        return true;\n      }\n    });\n  }","id":64810,"modified_method":"@Override\n  public boolean resolve(@NotNull final SReference reference, @NotNull final SNode sourceNode, @NotNull final SRepository repository) {\n    SNode linkDeclaration = BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(sourceNode)), \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\", \"call_findLinkDeclaration_1213877394467\", new Object[]{reference.getRole()});\n    if (linkDeclaration == null) {\n      return false;\n    }\n    final SNode referentConcept = SLinkOperations.getTarget(linkDeclaration, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98055fef0L, \"target\"));\n    return TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        Scope refScope = ModelConstraints.getScope(reference);\n        if (refScope instanceof ErrorScope) {\n          LOG.error(\"Couldn't create referent search scope : \" + ((ErrorScope) refScope).getMessage());\n          return false;\n        }\n        SNode result = null;\n        String resolveInfo = ((jetbrains.mps.smodel.SReference) reference).getResolveInfo();\n        if (resolveInfo != null) {\n          try {\n            result = refScope.resolve(sourceNode, resolveInfo);\n          } catch (Throwable t) {\n            LOG.warn(\"Exception was thrown during reference resolving\", t);\n          }\n        }\n        if (result == null) {\n          return false;\n        }\n        sourceNode.setReferenceTarget(reference.getRole(), result);\n        return true;\n      }\n    });\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode rule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode applicableConcept = PatternReduction_MappingRule_Behavior.call_getConcept_1805153994417064763(rule);\n    if (SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179be4dc5eL, \"sourceConcept\")) != null && (applicableConcept != null)) {\n      if (!(AbstractConceptDeclaration_Behavior.call_isSubconceptOf_8134325418312549386(applicableConcept, SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179be4dc5eL, \"sourceConcept\"))))) {\n        {\n          MessageTarget errorTarget = new NodeMessageTarget();\n          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(rule, \"Label has incorrect type\", \"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)\", \"1805153994417064793\", null, errorTarget);\n        }\n      }\n      {\n        SNode _nodeToCheck_1029348928467 = rule;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)\", \"1805153994417064796\", 0, null);\n        typeCheckingContext.createLessThanInequality((SNode) _quotation_createNode_xjg16h_a0b0b0b(PatternReduction_MappingRule_Behavior.call_getTemplateType_1805153994417123441(rule)), (SNode) _quotation_createNode_xjg16h_a0b0b0b_0(SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179bfe3866L, \"targetConcept\"))), false, false, _info_12389875345);\n      }\n    }\n  }","id":64811,"modified_method":"public void applyRule(final SNode rule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode applicableConcept = PatternReduction_MappingRule_Behavior.call_getConcept_1805153994417064763(rule);\n    if (SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179be4dc5eL, \"sourceConcept\")) != null && (applicableConcept != null)) {\n      if (!(AbstractConceptDeclaration_Behavior.call_isSubconceptOf_8134325418312549386(SNodeOperations.asNode(applicableConcept), SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179be4dc5eL, \"sourceConcept\"))))) {\n        {\n          MessageTarget errorTarget = new NodeMessageTarget();\n          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(rule, \"Label has incorrect type\", \"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)\", \"1805153994417064793\", null, errorTarget);\n        }\n      }\n      {\n        SNode _nodeToCheck_1029348928467 = rule;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)\", \"1805153994417064796\", 0, null);\n        typeCheckingContext.createLessThanInequality((SNode) _quotation_createNode_xjg16h_a0b0b0b(PatternReduction_MappingRule_Behavior.call_getTemplateType_1805153994417123441(rule)), (SNode) _quotation_createNode_xjg16h_a0b0b0b_0(SLinkOperations.getTarget(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, \"labelDeclaration\")), MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, 0x1179bfe3866L, \"targetConcept\"))), false, false, _info_12389875345);\n      }\n    }\n  }","commit_id":"7f7f4ef613a2a86280ef7fd37fa1cf5cb750fc37","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n        WOComponent component = context.component();\n        String divID=AjaxUtils.toSafeElementID(context.elementID());\n        response.appendContentString(\"<a\");\n        String href = (String) valueForBinding(\"href\", component);\n        if(href == null) {\n            if(associations().objectForKey(\"action\") != null) {\n            \t// don't use ajax request handler here\n                href = context.componentActionURL();\n            }\n            if(href == null) {\n                href = \"#\" + divID;\n            }\n        }\n        appendTagAttributeToResponse(response, \"href\", href);\n\t\tString relAttributeValue = \"ibox\";\n\t\tObject height = valueForBinding(\"height\", component);\n\t\tObject width = valueForBinding(\"width\", component);\n\t\tObject closeLabel = valueForBinding(\"closeLabel\", component);\n\t\tif (height != null) {\n\t\t\trelAttributeValue += \"&height=\" + height;\n\t\t}\n\t\tif (width != null) {\n\t\t\trelAttributeValue += \"&width=\" + width;\n\t\t}\n\t\tif (closeLabel != null) {\n\t\t\trelAttributeValue += \"&closeLabel=\" + ERXStringUtilities.urlEncode(closeLabel.toString());\n\t\t}\n\t\tresponse._appendTagAttributeAndValue(\"rel\", relAttributeValue, false); // don't escape the ampersands\n        appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n        appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n        appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n        appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n        appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n        response.appendContentString(\">\");\n        response.appendContentString((String) valueForBinding(\"label\",component));\n        response.appendContentString(\"<\/a><div\");\n        appendTagAttributeToResponse(response, \"id\", divID);\n        appendTagAttributeToResponse(response, \"style\", \"display:none;\");\n        response.appendContentString(\">\");\n        appendChildrenToResponse(response, context);\n        response.appendContentString(\"<\/div>\");\n        super.appendToResponse(response, context);\n    }","id":64812,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n        WOComponent component = context.component();\n        String divID=AjaxUtils.toSafeElementID(context.elementID());\n        response.appendContentString(\"<a\");\n        String href = (String) valueForBinding(\"href\", component);\n        if(href == null) {\n            if(associations().objectForKey(\"action\") != null) {\n            \t// don't use ajax request handler here\n                href = context.componentActionURL();\n            }\n            if(href == null) {\n                href = \"#\" + divID;\n            }\n        }\n        appendTagAttributeToResponse(response, \"href\", href);\n\t\tString relAttributeValue = \"ibox\";\n\t\tObject height = valueForBinding(\"height\", component);\n\t\tObject width = valueForBinding(\"width\", component);\n\t\tObject closeLabel = valueForBinding(\"closeLabel\", component);\n\t\tif (height != null) {\n\t\t\trelAttributeValue += \"&height=\" + height;\n\t\t}\n\t\tif (width != null) {\n\t\t\trelAttributeValue += \"&width=\" + width;\n\t\t}\n\t\tif (closeLabel != null) {\n\t\t\trelAttributeValue += \"&closeLabel=\" + ERXStringUtilities.urlEncode(closeLabel.toString());\n\t\t}\n\t\tresponse._appendTagAttributeAndValue(\"rel\", relAttributeValue, false); // don't escape the ampersands\n        appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n        appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n        appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n        appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n        appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n        response.appendContentString(\">\");\n        response.appendContentString((String) valueForBinding(\"label\",component));\n        response.appendContentString(\"<\/a>\");\n        if(href.startsWith(\"#\")) {\n        \tresponse.appendContentString(\"<div\");\n\n        \tappendTagAttributeToResponse(response, \"id\", divID);\n        \tappendTagAttributeToResponse(response, \"style\", \"display:none;\");\n        \tresponse.appendContentString(\">\");\n        \tappendChildrenToResponse(response, context);\n        \tresponse.appendContentString(\"<\/div>\");\n        }\n        super.appendToResponse(response, context);\n    }","commit_id":"45f0b6c0397b3a2faf0da879c3a5b72903fbdaff","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tsuper.appendToResponse(response, context);\n\t\tresponse.appendContentString(\"<script>\\nBehaviour.register(\");\n\t\tappendChildrenToResponse(response, context);\n\t\tresponse.appendContentString(\");<\/script>\");\n\t}","id":64813,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tsuper.appendToResponse(response, context);\n\t\tboolean includeScriptTag = booleanValueForBinding(\"includeScriptTag\", true, context.component());\n\t\tif(includeScriptTag) {\n\t\t\tresponse.appendContentString(\"<script>\\n\");\n\t\t}\n\t\tresponse.appendContentString(\"Behaviour.register(\");\n\t\tappendChildrenToResponse(response, context);\n\t\tresponse.appendContentString(\");\");\n\t\tif(includeScriptTag) {\n\t\t\tresponse.appendContentString(\"<\/script>\");\n\t\t}\n\t}","commit_id":"9b1e8d647de129c1581d7b7e98fc3ffb93694f71","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tWOComponent component = context.component();\n\n\t\tboolean disabled = booleanValueForBinding(\"disabled\", false, component);\n\t\tString elementName = (String) valueForBinding(\"elementName\", \"a\", component);\n\t\tString functionName = (String) valueForBinding(\"functionName\", null, component);\n\t\tboolean isATag = \"a\".equalsIgnoreCase(elementName);\n\t\tboolean renderTags = ((!disabled || !isATag) && functionName == null);\n\t\tif (renderTags) {\n\t\t\tresponse.appendContentString(\"<\");\n\t\t\tresponse.appendContentString(elementName);\n\t\t\tresponse.appendContentString(\" \");\n\t\t\tif (isATag) {\n\t\t\t\tappendTagAttributeToResponse(response, \"href\", \"javascript:void(0)\");\n\t\t\t}\n\t\t\tappendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n\t\t\tappendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n\t\t\tappendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t\t\tappendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t\t\tappendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n\t\t\tif (!disabled) {\n\t\t\t\tappendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t\t\t}\n\t\t\tresponse.appendContentString(\">\");\n\t\t}\n\t\tif (functionName != null) {\n\t\t\tAjaxUtils.appendScriptHeader(response);\n\t\t\tresponse.appendContentString(functionName + \" = function() { \" + onClick(context) + \" }\\n\");\n\t\t\tAjaxUtils.appendScriptFooter(response);\n\t\t}\n\t\tappendChildrenToResponse(response, context);\n\t\tif (renderTags) {\n\t\t\tresponse.appendContentString(\"<\/\");\n\t\t\tresponse.appendContentString(elementName);\n\t\t\tresponse.appendContentString(\">\");\n\t\t}\n\t\tsuper.appendToResponse(response, context);\n\t}","id":64814,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tWOComponent component = context.component();\n\n\t\tboolean disabled = booleanValueForBinding(\"disabled\", false, component);\n\t\tString elementName = (String) valueForBinding(\"elementName\", \"a\", component);\n\t\tString functionName = (String) valueForBinding(\"functionName\", null, component);\n\t\tboolean isATag = \"a\".equalsIgnoreCase(elementName);\n\t\tboolean renderTags = ((!disabled || !isATag) && functionName == null);\n\t\tif (renderTags) {\n\t\t\tresponse.appendContentString(\"<\");\n\t\t\tresponse.appendContentString(elementName);\n\t\t\tresponse.appendContentString(\" \");\n\t\t\tif (isATag) {\n\t\t\t\tappendTagAttributeToResponse(response, \"href\", \"javascript:void(0)\");\n\t\t\t}\n\t\t\tappendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n\t\t\tappendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n\t\t\tappendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t\t\tappendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t\t\tappendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n\t\t\tif (!disabled) {\n\t\t\t\tappendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t\t\t}\n\t\t\tresponse.appendContentString(\">\");\n\t\t}\n\t\tif (functionName != null) {\n\t\t\tAjaxUtils.appendScriptHeader(response);\n\t\t\tresponse.appendContentString(functionName + \" = function() { \" + onClick(context) + \" }\\n\");\n\t\t\tAjaxUtils.appendScriptFooter(response);\n\t\t}\n\t\tif ( ! hasBinding(\"string\")) {\n\t\t\tappendChildrenToResponse(response, context);\n\t\t} else {\n\t\t\tresponse.appendContentString((String)valueForBinding(\"string\", component));\n\t\t}\n\t\t\n\t\tif (renderTags) {\n\t\t\tresponse.appendContentString(\"<\/\");\n\t\t\tresponse.appendContentString(elementName);\n\t\t\tresponse.appendContentString(\">\");\n\t\t}\n\t\tsuper.appendToResponse(response, context);\n\t}","commit_id":"ddc63d83b16844ec03281edeb4a30955f9225275","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public void emitError(InvalidEntry<T> value) {\n    errorList.add(value);\n  }","id":64815,"modified_method":"@Override\n  public void emitError(InvalidEntry<T> value) {\n    errorList.add(value);\n    metrics.count(\"records.error\", 1);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize(MapReduceContext context) throws Exception {\n      Map<String, String> runtimeArgs = context.getRuntimeArguments();\n      ETLBatchConfig etlConfig = GSON.fromJson(runtimeArgs.get(Constants.CONFIG_KEY), ETLBatchConfig.class);\n      String sourcePluginId = runtimeArgs.get(Constants.Source.PLUGINID);\n      String sinkPluginId = runtimeArgs.get(Constants.Sink.PLUGINID);\n      List<String> transformIds = GSON.fromJson(runtimeArgs.get(Constants.Transform.PLUGINIDS), STRING_LIST_TYPE);\n\n\n      List<ETLStage> stageList = etlConfig.getTransforms();\n      List<Transformation> pipeline = Lists.newArrayListWithCapacity(stageList.size() + 2);\n      List<StageMetrics> stageMetrics = Lists.newArrayListWithCapacity(stageList.size() + 2);\n      transforms = Lists.newArrayListWithCapacity(stageList.size());\n\n      BatchSource source = context.newPluginInstance(sourcePluginId);\n      BatchSourceContext batchSourceContext = new MapReduceSourceContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(batchSourceContext);\n      pipeline.add(source);\n      stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId)));\n\n      addTransforms(stageList, pipeline, stageMetrics, transformIds, context);\n\n      BatchSink sink = context.newPluginInstance(sinkPluginId);\n      BatchSinkContext batchSinkContext = new MapReduceSinkContext(context, mapperMetrics, sinkPluginId);\n      sink.initialize(batchSinkContext);\n      pipeline.add(sink);\n      stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(sinkPluginId)));\n\n      transformExecutor = new TransformExecutor<>(pipeline, stageMetrics);\n    }","id":64816,"modified_method":"@Override\n    public void initialize(MapReduceContext context) throws Exception {\n      Map<String, String> runtimeArgs = context.getRuntimeArguments();\n      ETLBatchConfig etlConfig = GSON.fromJson(runtimeArgs.get(Constants.CONFIG_KEY), ETLBatchConfig.class);\n      String sourcePluginId = runtimeArgs.get(Constants.Source.PLUGINID);\n      String sinkPluginId = runtimeArgs.get(Constants.Sink.PLUGINID);\n      List<String> transformIds = GSON.fromJson(runtimeArgs.get(Constants.Transform.PLUGINIDS), STRING_LIST_TYPE);\n      StageMetrics stageMetrics;\n\n      List<ETLStage> stageList = etlConfig.getTransforms();\n      List<TransformDetail> pipeline = Lists.newArrayListWithCapacity(stageList.size() + 2);\n      transforms = Lists.newArrayListWithCapacity(stageList.size());\n\n      BatchSource source = context.newPluginInstance(sourcePluginId);\n      BatchSourceContext batchSourceContext = new MapReduceSourceContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(batchSourceContext);\n      stageMetrics = new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId));\n      pipeline.add(new TransformDetail(sourcePluginId, source, stageMetrics));\n\n\n      addTransforms(stageList, pipeline, transformIds, context);\n\n      BatchSink sink = context.newPluginInstance(sinkPluginId);\n      BatchSinkContext batchSinkContext = new MapReduceSinkContext(context, mapperMetrics, sinkPluginId);\n      sink.initialize(batchSinkContext);\n      stageMetrics = new StageMetrics(mapperMetrics, PluginID.from(sinkPluginId));\n      pipeline.add(new TransformDetail(sinkPluginId, sink, stageMetrics));\n\n      transformExecutor = new TransformExecutor<>(pipeline);\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"private void addTransforms(List<ETLStage> stageConfigs, List<Transformation> pipeline,\n                               List<StageMetrics> stageMetrics, List<String> transformIds,\n                               MapReduceContext context) throws Exception {\n      Preconditions.checkArgument(stageConfigs.size() == transformIds.size());\n\n      for (int i = 0; i < stageConfigs.size(); i++) {\n        ETLStage stageConfig = stageConfigs.get(i);\n        String transformId = transformIds.get(i);\n        Transform transform = context.newPluginInstance(transformId);\n        BatchTransformContext transformContext = new BatchTransformContext(context, mapperMetrics, transformId);\n        LOG.debug(\"Transform Stage : {}\", stageConfig.getName());\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        pipeline.add(transform);\n        transforms.add(transform);\n        stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(transformId)));\n      }\n    }","id":64817,"modified_method":"private void addTransforms(List<ETLStage> stageConfigs, List<TransformDetail> pipeline,\n                               List<String> transformIds, MapReduceContext context) throws Exception {\n      Preconditions.checkArgument(stageConfigs.size() == transformIds.size());\n\n      for (int i = 0; i < stageConfigs.size(); i++) {\n        ETLStage stageConfig = stageConfigs.get(i);\n        String transformId = transformIds.get(i);\n        Transform transform = context.newPluginInstance(transformId);\n        BatchTransformContext transformContext = new BatchTransformContext(context, mapperMetrics, transformId);\n        LOG.debug(\"Transform Stage : {}\", stageConfig.getName());\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        StageMetrics stageMetrics = new StageMetrics(mapperMetrics, PluginID.from(transformId));\n        pipeline.add(new TransformDetail(transformId, transform, stageMetrics));\n        transforms.add(transform);\n      }\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue input = new KeyValue(key, value);\n        for (KeyValue output : transformExecutor.runOneIteration(input)) {\n          context.write(output.getKey(), output.getValue());\n        }\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","id":64818,"modified_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue input = new KeyValue(key, value);\n        Iterator<KeyValue> iterator = transformExecutor.runOneIteration(input).getEmittedRecords();\n        while (iterator.hasNext()) {\n          KeyValue output = iterator.next();\n          context.write(output.getKey(), output.getValue());\n        }\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize(MapReduceContext context) throws Exception {\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n      String sinkPluginId = properties.get(Constants.Sink.PLUGINID);\n      List<String> transformIds = GSON.fromJson(properties.get(Constants.Transform.PLUGINIDS), STRING_LIST_TYPE);\n      transforms = Lists.newArrayListWithCapacity(transformIds.size());\n\n      List<Transformation> pipeline = Lists.newArrayListWithCapacity(transformIds.size() + 2);\n      List<StageMetrics> stageMetrics = Lists.newArrayListWithCapacity(pipeline.size());\n\n      BatchSource source = context.newInstance(sourcePluginId);\n      BatchSourceContext batchSourceContext = new MapReduceSourceContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(batchSourceContext);\n      pipeline.add(source);\n      stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId)));\n\n      addTransforms(pipeline, stageMetrics, transformIds, context);\n\n      BatchSink sink = context.newInstance(sinkPluginId);\n      BatchSinkContext batchSinkContext = new MapReduceSinkContext(context, mapperMetrics, sinkPluginId);\n      sink.initialize(batchSinkContext);\n      pipeline.add(sink);\n      stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(sinkPluginId)));\n\n      transformExecutor = new TransformExecutor<>(pipeline, stageMetrics);\n    }","id":64819,"modified_method":"@Override\n    public void initialize(MapReduceContext context) throws Exception {\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n      String sinkPluginId = properties.get(Constants.Sink.PLUGINID);\n      List<TransformInfo> transformInfos = GSON.fromJson(properties.get(Constants.Transform.PLUGINIDS),\n                                                               TRANSFORMDETAILS_LIST_TYPE);\n\n      List<TransformDetail> pipeline = Lists.newArrayListWithCapacity(transformInfos.size() + 2);\n\n      BatchSource source = context.newInstance(sourcePluginId);\n      BatchSourceContext batchSourceContext = new MapReduceSourceContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(batchSourceContext);\n      pipeline.add(new TransformDetail(sourcePluginId, source,\n                                             new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId))));\n\n      addTransforms(pipeline, transformInfos, context);\n\n      BatchSink sink = context.newInstance(sinkPluginId);\n      BatchSinkContext batchSinkContext = new MapReduceSinkContext(context, mapperMetrics, sinkPluginId);\n      sink.initialize(batchSinkContext);\n      pipeline.add(new TransformDetail(sinkPluginId, sink,\n                                             new StageMetrics(mapperMetrics, PluginID.from(sinkPluginId))));\n\n      transformExecutor = new TransformExecutor<>(pipeline);\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"private void addTransforms(List<Transformation> pipeline,\n                               List<StageMetrics> stageMetrics,\n                               List<String> transformIds,\n                               MapReduceContext context) throws Exception {\n\n      for (int i = 0; i < transformIds.size(); i++) {\n        String transformId = transformIds.get(i);\n        Transform transform = context.newInstance(transformId);\n        BatchTransformContext transformContext = new BatchTransformContext(context, mapperMetrics, transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        pipeline.add(transform);\n        transforms.add(transform);\n        stageMetrics.add(new StageMetrics(mapperMetrics, PluginID.from(transformId)));\n      }\n    }","id":64820,"modified_method":"private void addTransforms(List<TransformDetail> pipeline,\n                               List<TransformInfo> transformInfos,\n                               MapReduceContext context) throws Exception {\n\n      for (int i = 0; i < transformInfos.size(); i++) {\n        String transformId = transformInfos.get(i).getTransformId();\n        Transform transform = context.newInstance(transformId);\n        BatchTransformContext transformContext = new BatchTransformContext(context, mapperMetrics, transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        pipeline.add(new TransformDetail(transformId, transform,\n                                               new StageMetrics(mapperMetrics, PluginID.from(transformId))));\n      }\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue input = new KeyValue(key, value);\n        for (KeyValue output : transformExecutor.runOneIteration(input)) {\n          context.write(output.getKey(), output.getValue());\n        }\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","id":64821,"modified_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue input = new KeyValue(key, value);\n        Iterator<KeyValue> iterator = transformExecutor.runOneIteration(input).getEmittedRecords();\n        while (iterator.hasNext()) {\n          KeyValue output = iterator.next();\n          context.write(output.getKey(), output.getValue());\n        }\n        transformExecutor.resetEmitters();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"MapReduce driver for Batch ETL Adapters\");\n\n    PipelineRegisterer pipelineRegisterer = new PipelineRegisterer(getConfigurer());\n    Pipeline pipelineIds = pipelineRegisterer.registerPlugins(config);\n\n    if (config.getResources() != null) {\n      setMapperResources(config.getResources());\n    }\n\n    // add source, sink, transform ids to the properties. These are needed at runtime to instantiate the plugins\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pipelineIds.getSource());\n    properties.put(Constants.Sink.PLUGINID, pipelineIds.getSink());\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pipelineIds.getTransforms()));\n    setProperties(properties);\n  }","id":64822,"modified_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"MapReduce driver for Batch ETL Adapters\");\n\n    PipelineRegisterer pipelineRegisterer = new PipelineRegisterer(getConfigurer());\n    //TODO : CDAP-3480 - passing null now, will implement error dataset using Fileset for ETLMapReduce\n    Pipeline pipelineIds = pipelineRegisterer.registerPlugins(config, null, DatasetProperties.EMPTY);\n\n    if (config.getResources() != null) {\n      setMapperResources(config.getResources());\n    }\n\n    // add source, sink, transform ids to the properties. These are needed at runtime to instantiate the plugins\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pipelineIds.getSource());\n    properties.put(Constants.Sink.PLUGINID, pipelineIds.getSink());\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pipelineIds.getTransforms()));\n    setProperties(properties);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"public ETLStage(String name, Map<String, String> properties) {\n    this.name = name;\n    this.properties = properties;\n  }","id":64823,"modified_method":"public ETLStage(String name, Map<String, String> properties) {\n    this(name, properties, null);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> runtimeArgs = context.getRuntimeArguments();\n\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.ADAPTER_NAME));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.CONFIG_KEY));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Source.PLUGINID));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Sink.PLUGINID));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Transform.PLUGINIDS));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Realtime.UNIQUE_ID));\n\n    adapterName = runtimeArgs.get(Constants.ADAPTER_NAME);\n    // Each worker instance should have its own unique state.\n    stateStoreKey = String.format(\"%s%s%s%s%s\", adapterName, SEPARATOR, runtimeArgs.get(Constants.Realtime.UNIQUE_ID),\n                                  SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n    final ETLRealtimeConfig config = GSON.fromJson(runtimeArgs.get(Constants.CONFIG_KEY), ETLRealtimeConfig.class);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", adapterName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    initializeSource(context, config.getSource());\n    List<Transformation> transforms = initializeTransforms(context, config.getTransforms());\n    initializeSink(context, config.getSink());\n\n    transformExecutor = new TransformExecutor(transforms, transformMetrics);\n  }","id":64824,"modified_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> runtimeArgs = context.getRuntimeArguments();\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.ADAPTER_NAME));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.CONFIG_KEY));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Source.PLUGINID));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Sink.PLUGINID));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Transform.PLUGINIDS));\n    Preconditions.checkArgument(runtimeArgs.containsKey(Constants.Realtime.UNIQUE_ID));\n\n    adapterName = runtimeArgs.get(Constants.ADAPTER_NAME);\n    // Each worker instance should have its own unique state.\n    stateStoreKey = String.format(\"%s%s%s%s%s\", adapterName, SEPARATOR, runtimeArgs.get(Constants.Realtime.UNIQUE_ID),\n                                  SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n    final ETLRealtimeConfig config = GSON.fromJson(runtimeArgs.get(Constants.CONFIG_KEY), ETLRealtimeConfig.class);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", adapterName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    initializeSource(context, config.getSource());\n    List<TransformDetail> transforms = initializeTransforms(context, config.getTransforms());\n    initializeSink(context, config.getSink());\n\n    transformExecutor = new TransformExecutor(transforms);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"private List<Transformation> initializeTransforms(WorkerContext context, List<ETLStage> stages) throws Exception {\n    List<String> transformIds = GSON.fromJson(context.getRuntimeArguments().get(Constants.Transform.PLUGINIDS),\n                                              STRING_LIST_TYPE);\n    List<Transformation> transforms = Lists.newArrayList();\n\n    Preconditions.checkArgument(transformIds != null);\n    Preconditions.checkArgument(stages.size() == transformIds.size());\n    transformMetrics = Lists.newArrayListWithCapacity(stages.size());\n    for (int i = 0; i < stages.size(); i++) {\n      ETLStage stage = stages.get(i);\n      String transformId = transformIds.get(i);\n      try {\n        Transform transform = context.newPluginInstance(transformId);\n        RealtimeTransformContext transformContext = new RealtimeTransformContext(context, metrics, transformId);\n        LOG.debug(\"Transform Stage : {}\", stage.getName());\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        transforms.add(transform);\n        transformMetrics.add(new StageMetrics(metrics, PluginID.from(transformId)));\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform : {}\", stage.getName(), e);\n        Throwables.propagate(e);\n      }\n    }\n    return transforms;\n  }","id":64825,"modified_method":"private List<TransformDetail> initializeTransforms(WorkerContext context,\n                                                           List<ETLStage> stages) throws Exception {\n    List<String> transformIds = GSON.fromJson(context.getRuntimeArguments().get(Constants.Transform.PLUGINIDS),\n                                              STRING_LIST_TYPE);\n    List<TransformDetail> transforms = new ArrayList<>();\n\n    Preconditions.checkArgument(transformIds != null);\n    Preconditions.checkArgument(stages.size() == transformIds.size());\n    for (int i = 0; i < stages.size(); i++) {\n      ETLStage stage = stages.get(i);\n      String transformId = transformIds.get(i);\n      try {\n        Transform transform = context.newPluginInstance(transformId);\n        RealtimeTransformContext transformContext = new RealtimeTransformContext(context, metrics, transformId);\n        LOG.debug(\"Transform Stage : {}\", stage.getName());\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        transforms.add(new TransformDetail(transformId, transform,\n                                           new StageMetrics(metrics, PluginID.from(transformId))));\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform : {}\", stage.getName(), e);\n        Throwables.propagate(e);\n      }\n    }\n    return transforms;\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void run() {\n    final SourceState currentState = new SourceState();\n    final SourceState nextState = new SourceState();\n    final List<Object> dataToSink = Lists.newArrayList();\n\n    // Fetch SourceState from State Table.\n    // Only required at the beginning since we persist the state if there is a change.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext context) throws Exception {\n        KeyValueTable stateTable = context.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n        byte[] stateBytes = stateTable.read(stateStoreKeyBytes);\n        if (stateBytes != null) {\n          SourceState state = GSON.fromJson(Bytes.toString(stateBytes), SourceState.class);\n          currentState.setState(state);\n        }\n      }\n    });\n\n    while (!stopped) {\n      // Invoke poll method of the source to fetch data\n      try {\n        SourceState newState = source.poll(sourceEmitter, new SourceState(currentState));\n        if (newState != null) {\n          nextState.setState(newState);\n        }\n      } catch (Exception e) {\n        // Continue since the source threw an exception. No point in processing records and state is not changed.\n        LOG.warn(\"Adapter {} : Exception thrown during polling of Source for data\", adapterName, e);\n        sourceEmitter.reset();\n        continue;\n      }\n\n      // For each object emitted by the source, invoke the transformExecutor and collect all the data\n      // to be persisted in the sink.\n      for (Object sourceData : sourceEmitter) {\n        try {\n          for (Object object : transformExecutor.runOneIteration(sourceData)) {\n            dataToSink.add(object);\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Adapter {} : Exception thrown while processing data {}\", adapterName, sourceData, e);\n        }\n      }\n      sourceEmitter.reset();\n\n      // Start a Transaction if there is data to persist or if the Source state has changed.\n      try {\n        if ((!dataToSink.isEmpty()) || (!nextState.equals(currentState))) {\n          getContext().execute(new TxRunnable() {\n            @Override\n            public void run(DatasetContext context) throws Exception {\n\n              // Invoke the sink's write method if there is any object to be written.\n              if (!dataToSink.isEmpty()) {\n                DefaultDataWriter defaultDataWriter = new DefaultDataWriter(getContext(), context);\n                sink.write(dataToSink, defaultDataWriter);\n              }\n\n              // Persist nextState if it is different from currentState\n              if (!nextState.equals(currentState)) {\n                KeyValueTable stateTable = context.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n                stateTable.write(stateStoreKey, GSON.toJson(nextState));\n              }\n            }\n          });\n\n          // Update the in-memory copy of the state only if the transaction succeeded.\n          currentState.setState(nextState);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Adapter {} : Exception thrown during persisting of data\", adapterName, e);\n      } finally {\n        // Clear the persisted sink data (in case transaction failure occurred, we will poll the source with old state)\n        dataToSink.clear();\n      }\n    }\n  }","id":64826,"modified_method":"@Override\n  public void run() {\n    final SourceState currentState = new SourceState();\n    final SourceState nextState = new SourceState();\n    final List<Object> dataToSink = Lists.newArrayList();\n\n    // Fetch SourceState from State Table.\n    // Only required at the beginning since we persist the state if there is a change.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext context) throws Exception {\n        KeyValueTable stateTable = context.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n        byte[] stateBytes = stateTable.read(stateStoreKeyBytes);\n        if (stateBytes != null) {\n          SourceState state = GSON.fromJson(Bytes.toString(stateBytes), SourceState.class);\n          currentState.setState(state);\n        }\n      }\n    });\n\n    while (!stopped) {\n      // Invoke poll method of the source to fetch data\n      try {\n        SourceState newState = source.poll(sourceEmitter, new SourceState(currentState));\n        if (newState != null) {\n          nextState.setState(newState);\n        }\n      } catch (Exception e) {\n        // Continue since the source threw an exception. No point in processing records and state is not changed.\n        LOG.warn(\"Adapter {} : Exception thrown during polling of Source for data\", adapterName, e);\n        sourceEmitter.reset();\n        continue;\n      }\n\n      // For each object emitted by the source, invoke the transformExecutor and collect all the data\n      // to be persisted in the sink.\n      for (Object sourceData : sourceEmitter) {\n        try {\n          TransformResponse transformResponse = transformExecutor.runOneIteration(sourceData);\n          while (transformResponse.getEmittedRecords().hasNext()) {\n            dataToSink.add(transformResponse.getEmittedRecords().next());\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Adapter {} : Exception thrown while processing data {}\", adapterName, sourceData, e);\n        }\n      }\n      sourceEmitter.reset();\n\n      // Start a Transaction if there is data to persist or if the Source state has changed.\n      try {\n        if ((!dataToSink.isEmpty()) || (!nextState.equals(currentState))) {\n          getContext().execute(new TxRunnable() {\n            @Override\n            public void run(DatasetContext context) throws Exception {\n\n              // Invoke the sink's write method if there is any object to be written.\n              if (!dataToSink.isEmpty()) {\n                DefaultDataWriter defaultDataWriter = new DefaultDataWriter(getContext(), context);\n                sink.write(dataToSink, defaultDataWriter);\n              }\n\n              // Persist nextState if it is different from currentState\n              if (!nextState.equals(currentState)) {\n                KeyValueTable stateTable = context.getDataset(ETLRealtimeTemplate.STATE_TABLE);\n                stateTable.write(stateStoreKey, GSON.toJson(nextState));\n              }\n            }\n          });\n\n          // Update the in-memory copy of the state only if the transaction succeeded.\n          currentState.setState(nextState);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Adapter {} : Exception thrown during persisting of data\", adapterName, e);\n      } finally {\n        // Clear the persisted sink data (in case transaction failure occurred, we will poll the source with old state)\n        dataToSink.clear();\n      }\n    }\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"private List<Transformation> initializeTransforms(WorkerContext context) throws Exception {\n    List<String> transformIds = GSON.fromJson(context.getSpecification().getProperty(Constants.Transform.PLUGINIDS),\n                                              STRING_LIST_TYPE);\n    List<Transformation> transforms = Lists.newArrayList();\n\n    Preconditions.checkArgument(transformIds != null);\n    transformMetrics = Lists.newArrayListWithCapacity(transformIds.size());\n    for (String transformId : transformIds) {\n      try {\n        Transform transform = context.newInstance(transformId);\n        RealtimeTransformContext transformContext = new RealtimeTransformContext(context, metrics, transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        transforms.add(transform);\n        transformMetrics.add(new StageMetrics(metrics, PluginID.from(transformId)));\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform\", e);\n        Throwables.propagate(e);\n      }\n    }\n    return transforms;\n  }","id":64827,"modified_method":"private List<TransformDetail> initializeTransforms(WorkerContext context) throws Exception {\n    List<TransformInfo> transformIds =\n      GSON.fromJson(context.getSpecification().getProperty(Constants.Transform.PLUGINIDS), TRANSFORMDETAILS_LIST_TYPE);\n    Preconditions.checkArgument(transformIds != null);\n    List<TransformDetail> transformDetailList = new ArrayList<>(transformIds.size());\n    tranformIdToDatasetName = new HashMap<>(transformIds.size());\n\n    for (int i = 0; i < transformIds.size(); i++) {\n      String transformId = transformIds.get(i).getTransformId();\n      try {\n        Transform transform = context.newInstance(transformId);\n        RealtimeTransformContext transformContext = new RealtimeTransformContext(context, metrics, transformId);\n        LOG.debug(\"Transform Class : {}\", transform.getClass().getName());\n        transform.initialize(transformContext);\n        StageMetrics stageMetrics = new StageMetrics(metrics, PluginID.from(transformId));\n        transformDetailList.add(new TransformDetail(transformId, transform, stageMetrics));\n        tranformIdToDatasetName.put(transformId, transformIds.get(i).getErrorDatasetName());\n      } catch (InstantiationException e) {\n        LOG.error(\"Unable to instantiate Transform\", e);\n        Throwables.propagate(e);\n      }\n    }\n    return transformDetailList;\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void run() {\n    final SourceState currentState = new SourceState();\n    final SourceState nextState = new SourceState();\n    final List<Object> dataToSink = Lists.newArrayList();\n\n    // Fetch SourceState from State Table.\n    // Only required at the beginning since we persist the state if there is a change.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext context) throws Exception {\n        KeyValueTable stateTable = context.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] stateBytes = stateTable.read(stateStoreKeyBytes);\n        if (stateBytes != null) {\n          SourceState state = GSON.fromJson(Bytes.toString(stateBytes), SourceState.class);\n          currentState.setState(state);\n        }\n      }\n    });\n\n    while (!stopped) {\n      // Invoke poll method of the source to fetch data\n      try {\n        SourceState newState = source.poll(sourceEmitter, new SourceState(currentState));\n        if (newState != null) {\n          nextState.setState(newState);\n        }\n      } catch (Exception e) {\n        // Continue since the source threw an exception. No point in processing records and state is not changed.\n        LOG.warn(\"Exception thrown during polling of Source for data\", e);\n        sourceEmitter.reset();\n        continue;\n      }\n\n      // For each object emitted by the source, invoke the transformExecutor and collect all the data\n      // to be persisted in the sink.\n      for (Object sourceData : sourceEmitter) {\n        try {\n          for (Object object : transformExecutor.runOneIteration(sourceData)) {\n            dataToSink.add(object);\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Exception thrown while processing data {}\", sourceData, e);\n        }\n      }\n      sourceEmitter.reset();\n\n      // Start a Transaction if there is data to persist or if the Source state has changed.\n      try {\n        if ((!dataToSink.isEmpty()) || (!nextState.equals(currentState))) {\n          getContext().execute(new TxRunnable() {\n            @Override\n            public void run(DatasetContext context) throws Exception {\n\n              // Invoke the sink's write method if there is any object to be written.\n              if (!dataToSink.isEmpty()) {\n                DefaultDataWriter defaultDataWriter = new DefaultDataWriter(getContext(), context);\n                sink.write(dataToSink, defaultDataWriter);\n              }\n\n              // Persist nextState if it is different from currentState\n              if (!nextState.equals(currentState)) {\n                KeyValueTable stateTable = context.getDataset(ETLRealtimeApplication.STATE_TABLE);\n                stateTable.write(stateStoreKey, GSON.toJson(nextState));\n              }\n            }\n          });\n\n          // Update the in-memory copy of the state only if the transaction succeeded.\n          currentState.setState(nextState);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception thrown during persisting of data\", e);\n      } finally {\n        // Clear the persisted sink data (in case transaction failure occurred, we will poll the source with old state)\n        dataToSink.clear();\n      }\n    }\n  }","id":64828,"modified_method":"@Override\n  public void run() {\n    final SourceState currentState = new SourceState();\n    final SourceState nextState = new SourceState();\n    final List<Object> dataToSink = Lists.newArrayList();\n    final Map<String, List<InvalidEntry>> transformIdToErrorRecords = intializeTransformIdToErrorsList();\n    Set<String> transformErrorsWithoutDataset = Sets.newHashSet();\n    // Fetch SourceState from State Table.\n    // Only required at the beginning since we persist the state if there is a change.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext context) throws Exception {\n        KeyValueTable stateTable = context.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] stateBytes = stateTable.read(stateStoreKeyBytes);\n        if (stateBytes != null) {\n          SourceState state = GSON.fromJson(Bytes.toString(stateBytes), SourceState.class);\n          currentState.setState(state);\n        }\n      }\n    });\n\n    while (!stopped) {\n      // Invoke poll method of the source to fetch data\n      try {\n        SourceState newState = source.poll(sourceEmitter, new SourceState(currentState));\n        if (newState != null) {\n          nextState.setState(newState);\n        }\n      } catch (Exception e) {\n        // Continue since the source threw an exception. No point in processing records and state is not changed.\n        LOG.warn(\"Exception thrown during polling of Source for data\", e);\n        sourceEmitter.reset();\n        continue;\n      }\n\n      // For each object emitted by the source, invoke the transformExecutor and collect all the data\n      // to be persisted in the sink.\n      for (Object sourceData : sourceEmitter) {\n        try {\n          TransformResponse transformResponse = transformExecutor.runOneIteration(sourceData);\n          while (transformResponse.getEmittedRecords().hasNext()) {\n            dataToSink.add(transformResponse.getEmittedRecords().next());\n          }\n\n          Map<String, Collection<InvalidEntry>> entryMap = transformResponse.getMapTransformIdToErrorEmitter();\n\n          for (Map.Entry<String, Collection<InvalidEntry>> entry : entryMap.entrySet()) {\n            String transformId = entry.getKey();\n            if (!tranformIdToDatasetName.containsKey(transformId)) {\n              if (!transformErrorsWithoutDataset.contains(transformId)) {\n                LOG.warn(\"Error records were emitted in transform {}, \" +\n                           \"but error dataset is not configured for this transform\", transformId);\n              }\n              continue;\n            }\n            transformIdToErrorRecords.get(transformId).addAll(entry.getValue());\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Exception thrown while processing data {}\", sourceData, e);\n        }\n      }\n      sourceEmitter.reset();\n\n      // Start a Transaction if there is data to persist or if the Source state has changed.\n      try {\n        if ((!dataToSink.isEmpty()) || (!nextState.equals(currentState))) {\n          getContext().execute(new TxRunnable() {\n            @Override\n            public void run(DatasetContext context) throws Exception {\n\n              // Invoke the sink's write method if there is any object to be written.\n              if (!dataToSink.isEmpty()) {\n                DefaultDataWriter defaultDataWriter = new DefaultDataWriter(getContext(), context);\n                sink.write(dataToSink, defaultDataWriter);\n              }\n\n              for (Map.Entry<String, List<InvalidEntry>> errorRecordEntry : transformIdToErrorRecords.entrySet()) {\n                String transformId = errorRecordEntry.getKey();\n                final String datasetName = tranformIdToDatasetName.get(transformId);\n                Table errorTable = context.getDataset(datasetName);\n                byte[] currentTime = Bytes.toBytes(System.currentTimeMillis());\n                String transformIdentifier = appName + SEPARATOR + transformId;\n                for (InvalidEntry invalidEntry : errorRecordEntry.getValue()) {\n                  // using random uuid as we want to write each record uniquely,\n                  // but we are not concerned about the uuid while scanning later.\n                  byte[] rowKey = Bytes.concat(currentTime,\n                                               Bytes.toBytes(transformIdentifier), Bytes.toBytes(UUID.randomUUID()));\n                  Put errorPut = constructErrorPut(rowKey, invalidEntry);\n                  errorTable.write(rowKey, errorPut);\n                }\n              }\n\n              // Persist nextState if it is different from currentState\n              if (!nextState.equals(currentState)) {\n                KeyValueTable stateTable = context.getDataset(ETLRealtimeApplication.STATE_TABLE);\n                stateTable.write(stateStoreKey, GSON.toJson(nextState));\n              }\n\n              // after running one iteration and succesfully writing to sinks and error datasets, reset the emitters.\n              transformExecutor.resetEmitters();\n            }\n          });\n\n          // Update the in-memory copy of the state only if the transaction succeeded.\n          currentState.setState(nextState);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception thrown during persisting of data\", e);\n      } finally {\n        // Clear the persisted sink data (in case transaction failure occurred, we will poll the source with old state)\n        dataToSink.clear();\n        for (List<InvalidEntry> invalidEntryList : transformIdToErrorRecords.values()) {\n          invalidEntryList.clear();\n        }\n      }\n    }\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> properties = context.getSpecification().getProperties();\n\n    Preconditions.checkArgument(properties.containsKey(Constants.Source.PLUGINID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Sink.PLUGINID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Transform.PLUGINIDS));\n    Preconditions.checkArgument(properties.containsKey(Constants.Realtime.UNIQUE_ID));\n\n    String uniqueId = properties.get(Constants.Realtime.UNIQUE_ID);\n\n    // Each worker instance should have its own unique state.\n    final String appName = context.getApplicationSpecification().getName();\n    stateStoreKey = String.format(\"%s%s%s%s%s\", appName, SEPARATOR, uniqueId, SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", appName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    initializeSource(context);\n    List<Transformation> transforms = initializeTransforms(context);\n    initializeSink(context);\n\n    transformExecutor = new TransformExecutor(transforms, transformMetrics);\n  }","id":64829,"modified_method":"@Override\n  public void initialize(final WorkerContext context) throws Exception {\n    super.initialize(context);\n    Map<String, String> properties = context.getSpecification().getProperties();\n    appName = context.getApplicationSpecification().getName();\n    Preconditions.checkArgument(properties.containsKey(Constants.Source.PLUGINID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Sink.PLUGINID));\n    Preconditions.checkArgument(properties.containsKey(Constants.Transform.PLUGINIDS));\n    Preconditions.checkArgument(properties.containsKey(Constants.Realtime.UNIQUE_ID));\n\n    String uniqueId = properties.get(Constants.Realtime.UNIQUE_ID);\n\n    // Each worker instance should have its own unique state.\n    final String appName = context.getApplicationSpecification().getName();\n    stateStoreKey = String.format(\"%s%s%s%s%s\", appName, SEPARATOR, uniqueId, SEPARATOR, context.getInstanceId());\n    stateStoreKeyBytes = Bytes.toBytes(stateStoreKey);\n\n    // Cleanup the rows in statetable for runs with same adapter name but other runids.\n    getContext().execute(new TxRunnable() {\n      @Override\n      public void run(DatasetContext dsContext) throws Exception {\n        KeyValueTable stateTable = dsContext.getDataset(ETLRealtimeApplication.STATE_TABLE);\n        byte[] startKey = Bytes.toBytes(String.format(\"%s%s\", appName, SEPARATOR));\n        // Scan the table for adaptername: prefixes and remove rows which doesn't match the unique id of this adapter.\n        CloseableIterator<KeyValue<byte[], byte[]>> rows = stateTable.scan(startKey, Bytes.stopKeyForPrefix(startKey));\n        try {\n          while (rows.hasNext()) {\n            KeyValue<byte[], byte[]> row = rows.next();\n            if (Bytes.compareTo(stateStoreKeyBytes, row.getKey()) != 0) {\n              stateTable.delete(row.getKey());\n            }\n          }\n        } finally {\n          rows.close();\n        }\n      }\n    });\n\n    initializeSource(context);\n    transformationDetailList = initializeTransforms(context);\n    initializeSink(context);\n\n    transformExecutor = new TransformExecutor(transformationDetailList);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"Worker Driver for Realtime ETL Adapters\");\n\n    PipelineRegisterer registerer = new PipelineRegisterer(getConfigurer());\n    Pipeline pluginIDs = registerer.registerPlugins(config);\n\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pluginIDs.getSource());\n    properties.put(Constants.Sink.PLUGINID, pluginIDs.getSink());\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pluginIDs.getTransforms()));\n    // Generate unique id for this app creation.\n    properties.put(Constants.Realtime.UNIQUE_ID, String.valueOf(System.currentTimeMillis()));\n    setProperties(properties);\n  }","id":64830,"modified_method":"@Override\n  public void configure() {\n    setName(NAME);\n    setDescription(\"Worker Driver for Realtime ETL Adapters\");\n\n    PipelineRegisterer registerer = new PipelineRegisterer(getConfigurer());\n    // using table dataset type for error dataset\n    Pipeline pluginIDs = registerer.registerPlugins(config, Table.class, DatasetProperties.builder()\n      .add(Table.PROPERTY_SCHEMA, ERROR_SCHEMA.toString())\n      .build());\n\n    Map<String, String> properties = new HashMap<>();\n    properties.put(Constants.Source.PLUGINID, pluginIDs.getSource());\n    properties.put(Constants.Sink.PLUGINID, pluginIDs.getSink());\n    properties.put(Constants.Transform.PLUGINIDS, GSON.toJson(pluginIDs.getTransforms()));\n    // Generate unique id for this app creation.\n    properties.put(Constants.Realtime.UNIQUE_ID, String.valueOf(System.currentTimeMillis()));\n    setProperties(properties);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"public Pipeline(String source, String sink, List<String> transforms) {\n    this.source = source;\n    this.sink = sink;\n    this.transforms = transforms;\n  }","id":64831,"modified_method":"public Pipeline(String source, String sink, List<TransformInfo> transforms) {\n    this.source = source;\n    this.sink = sink;\n    this.transforms = transforms;\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"public List<String> getTransforms() {\n    return transforms;\n  }","id":64832,"modified_method":"public List<TransformInfo> getTransforms() {\n    return transforms;\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Registers the plugins that will be used in the pipeline\n   *\n   * @param config the config containing pipeline information\n   * @return the ids of each plugin used in the pipeline\n   */\n  public Pipeline registerPlugins(ETLConfig config) {\n    ETLStage sourceConfig = config.getSource();\n    ETLStage sinkConfig = config.getSink();\n    List<ETLStage> transformConfigs = config.getTransforms();\n    String sourcePluginId = PluginID.from(Constants.Source.PLUGINTYPE, sourceConfig.getName(), 1).getID();\n    // 2 + since we start at 1, and there is always a source.  For example, if there are 0 transforms, sink is stage 2.\n    String sinkPluginId =\n      PluginID.from(Constants.Sink.PLUGINTYPE, sinkConfig.getName(), 2 + transformConfigs.size()).getID();\n\n    // Instantiate Source, Transforms, Sink stages.\n    // Use the plugin name as the plugin id for source and sink stages since there can be only one source and one sink.\n    PipelineConfigurable source = configurer.usePlugin(Constants.Source.PLUGINTYPE, sourceConfig.getName(),\n                                                       sourcePluginId, getPluginProperties(sourceConfig));\n    if (source == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Source.PLUGINTYPE, sourceConfig.getName()));\n    }\n\n    PipelineConfigurable sink = configurer.usePlugin(Constants.Sink.PLUGINTYPE, sinkConfig.getName(),\n                                                     sinkPluginId, getPluginProperties(sinkConfig));\n    if (sink == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Sink.PLUGINTYPE, sinkConfig.getName()));\n    }\n\n    // Store transform id list to be serialized and passed to the driver program\n    List<String> transformIds = Lists.newArrayListWithCapacity(transformConfigs.size());\n    List<Transformation> transforms = Lists.newArrayListWithCapacity(transformConfigs.size());\n    for (int i = 0; i < transformConfigs.size(); i++) {\n      ETLStage transformConfig = transformConfigs.get(i);\n\n      // Generate a transformId based on transform name and the array index (since there could\n      // multiple transforms - ex, N filter transforms in the same pipeline)\n      // stage number starts from 1, plus source is always #1, so add 2 for stage number.\n      String transformId = PluginID.from(Constants.Transform.PLUGINTYPE, transformConfig.getName(), 2 + i).getID();\n      PluginProperties transformProperties = getPluginProperties(transformConfig);\n      Transform transformObj = configurer.usePlugin(Constants.Transform.PLUGINTYPE, transformConfig.getName(),\n                                                    transformId, transformProperties);\n      if (transformObj == null) {\n        throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found\",\n                                                         Constants.Transform.PLUGINTYPE, transformConfig.getName()));\n      }\n      PipelineConfigurer transformConfigurer = new DefaultPipelineConfigurer(configurer, transformId);\n      transformObj.configurePipeline(transformConfigurer);\n      transformIds.add(transformId);\n      transforms.add(transformObj);\n    }\n\n    // Validate Source -> Transform -> Sink hookup\n    try {\n      validateStages(source, sink, transforms);\n      PipelineConfigurer sourceConfigurer = new DefaultPipelineConfigurer(configurer, sourcePluginId);\n      PipelineConfigurer sinkConfigurer = new DefaultPipelineConfigurer(configurer, sinkPluginId);\n      source.configurePipeline(sourceConfigurer);\n      sink.configurePipeline(sinkConfigurer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return new Pipeline(sourcePluginId, sinkPluginId, transformIds);\n  }","id":64833,"modified_method":"/**\n   * Registers the plugins that will be used in the pipeline\n   *\n   * @param config the config containing pipeline information\n   * @param errorDatasetType error dataset type class\n   * @return the ids of each plugin used in the pipeline\n   */\n  public Pipeline registerPlugins(ETLConfig config, Class errorDatasetType, DatasetProperties datasetProperties) {\n    ETLStage sourceConfig = config.getSource();\n    ETLStage sinkConfig = config.getSink();\n    List<ETLStage> transformConfigs = config.getTransforms();\n    String sourcePluginId = PluginID.from(Constants.Source.PLUGINTYPE, sourceConfig.getName(), 1).getID();\n    // 2 + since we start at 1, and there is always a source.  For example, if there are 0 transforms, sink is stage 2.\n    String sinkPluginId =\n      PluginID.from(Constants.Sink.PLUGINTYPE, sinkConfig.getName(), 2 + transformConfigs.size()).getID();\n\n    // Instantiate Source, Transforms, Sink stages.\n    // Use the plugin name as the plugin id for source and sink stages since there can be only one source and one sink.\n    PipelineConfigurable source = configurer.usePlugin(Constants.Source.PLUGINTYPE, sourceConfig.getName(),\n                                                       sourcePluginId, getPluginProperties(sourceConfig));\n    if (source == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Source.PLUGINTYPE, sourceConfig.getName()));\n    }\n\n    PipelineConfigurable sink = configurer.usePlugin(Constants.Sink.PLUGINTYPE, sinkConfig.getName(),\n                                                     sinkPluginId, getPluginProperties(sinkConfig));\n    if (sink == null) {\n      throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found.\",\n                                                       Constants.Sink.PLUGINTYPE, sinkConfig.getName()));\n    }\n\n    // Store transform id list to be serialized and passed to the driver program\n    List<TransformInfo> transformIds = new ArrayList<>(transformConfigs.size());\n    List<Transformation> transforms = new ArrayList<>(transformConfigs.size());\n    for (int i = 0; i < transformConfigs.size(); i++) {\n      ETLStage transformConfig = transformConfigs.get(i);\n\n      // Generate a transformId based on transform name and the array index (since there could\n      // multiple transforms - ex, N filter transforms in the same pipeline)\n      // stage number starts from 1, plus source is always #1, so add 2 for stage number.\n      String transformId = PluginID.from(Constants.Transform.PLUGINTYPE, transformConfig.getName(), 2 + i).getID();\n      PluginProperties transformProperties = getPluginProperties(transformConfig);\n      Transform transformObj = configurer.usePlugin(Constants.Transform.PLUGINTYPE, transformConfig.getName(),\n                                                    transformId, transformProperties);\n      if (transformObj == null) {\n        throw new IllegalArgumentException(String.format(\"No Plugin of type '%s' named '%s' was found\",\n                                                         Constants.Transform.PLUGINTYPE, transformConfig.getName()));\n      }\n      // if the transformation is configured to write filtered records to error dataset, we create that dataset.\n      if (transformConfig.getErrorDatasetName() != null) {\n        // TODO : can remove this after implementing CDAP-3480\n        if (errorDatasetType != null) {\n          configurer.createDataset(transformConfig.getErrorDatasetName(), errorDatasetType, datasetProperties);\n        }\n      }\n      PipelineConfigurer transformConfigurer = new DefaultPipelineConfigurer(configurer, transformId);\n      transformObj.configurePipeline(transformConfigurer);\n      transformIds.add(new TransformInfo(transformId, transformConfig.getErrorDatasetName()));\n      transforms.add(transformObj);\n    }\n\n    // Validate Source -> Transform -> Sink hookup\n    try {\n      validateStages(source, sink, transforms);\n      PipelineConfigurer sourceConfigurer = new DefaultPipelineConfigurer(configurer, sourcePluginId);\n      PipelineConfigurer sinkConfigurer = new DefaultPipelineConfigurer(configurer, sinkPluginId);\n      source.configurePipeline(sourceConfigurer);\n      sink.configurePipeline(sinkConfigurer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return new Pipeline(sourcePluginId, sinkPluginId, transformIds);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void destroy() {\n    for (Transformation transform : transforms) {\n      if (transform instanceof Destroyable) {\n        Destroyables.destroyQuietly((Destroyable) transform);\n      }\n    }\n  }","id":64834,"modified_method":"@Override\n  public void destroy() {\n    for (TransformDetail transformDetail : transforms) {\n      Transformation transformation = transformDetail.getTransformation();\n      if (transformation instanceof Destroyable) {\n        Destroyables.destroyQuietly((Destroyable) transformation);\n      }\n    }\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"public TransformExecutor(List<Transformation> transforms, List<StageMetrics> transformMetrics) {\n    int numTransforms = transforms.size();\n    Preconditions.checkArgument(numTransforms == transformMetrics.size());\n    this.transforms = Lists.newArrayListWithCapacity(numTransforms);\n    this.emitters = Lists.newArrayListWithCapacity(numTransforms);\n    for (int i = 0; i < numTransforms; i++) {\n      StageMetrics stageMetrics = transformMetrics.get(i);\n      this.transforms.add(new TrackedTransform<>(transforms.get(i), stageMetrics));\n      this.emitters.add(new DefaultEmitter(stageMetrics));\n    }\n  }","id":64835,"modified_method":"public TransformExecutor(List<TransformDetail> transformDetailList) {\n    int numTransforms = transformDetailList.size();\n    this.transforms = new ArrayList<>(numTransforms);\n    this.emitters = Lists.newArrayListWithCapacity(numTransforms);\n\n    for (TransformDetail transformDetail : transformDetailList) {\n      this.transforms.add(new TransformDetail(transformDetail,\n                                              new TrackedTransform(transformDetail.getTransformation(),\n                                                                   transformDetail.getMetrics())));\n      this.emitters.add(new DefaultEmitter(transformDetail.getMetrics()));\n    }\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"public Iterable<OUT> runOneIteration(IN input) throws Exception {\n    if (transforms.isEmpty()) {\n      return Lists.newArrayList((OUT) input);\n    }\n\n    Transformation transform = transforms.get(0);\n    DefaultEmitter currentEmitter = emitters.get(0);\n    currentEmitter.reset();\n    transform.transform(input, currentEmitter);\n\n    DefaultEmitter previousEmitter = currentEmitter;\n\n    for (int i = 1; i < transforms.size(); i++) {\n      transform = transforms.get(i);\n      currentEmitter = emitters.get(i);\n      currentEmitter.reset();\n      for (Object transformedVal : previousEmitter) {\n        transform.transform(transformedVal, currentEmitter);\n      }\n      previousEmitter.reset();\n      previousEmitter = currentEmitter;\n    }\n\n    return previousEmitter;\n  }","id":64836,"modified_method":"public TransformResponse<OUT> runOneIteration(IN input) throws Exception {\n\n    Map<String, Collection<OUT>> errorRecordsMap = new HashMap<>(transforms.size());\n\n    if (transforms.isEmpty()) {\n      return new TransformResponse<>(Lists.newArrayList((OUT) input).iterator(), errorRecordsMap);\n    }\n\n    TransformDetail transformDetail = transforms.get(0);\n    DefaultEmitter currentEmitter = emitters.get(0);\n    currentEmitter.reset();\n    Transformation transform = transformDetail.getTransformation();\n    transform.transform(input, currentEmitter);\n\n    if (!currentEmitter.getErrors().isEmpty()) {\n      errorRecordsMap.put(transformDetail.getTransformId(), currentEmitter.getErrors());\n    }\n\n    DefaultEmitter previousEmitter = currentEmitter;\n    for (int i = 1; i < transforms.size(); i++) {\n      transformDetail = transforms.get(i);\n      transform = transformDetail.getTransformation();\n      currentEmitter = emitters.get(i);\n      for (Object transformedVal : previousEmitter) {\n        transform.transform(transformedVal, currentEmitter);\n      }\n      if (!currentEmitter.getErrors().isEmpty()) {\n        errorRecordsMap.put(transformDetail.getTransformId(), currentEmitter.getErrors());\n      }\n      previousEmitter = currentEmitter;\n    }\n\n    return new TransformResponse<>(previousEmitter.iterator(), errorRecordsMap);\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testEmptyTransforms() throws Exception {\n    TransformExecutor<String, String> executor =\n      new TransformExecutor<>(Lists.<Transformation>newArrayList(), Lists.<StageMetrics>newArrayList());\n    List<String> results = Lists.newArrayList(executor.runOneIteration(\"foo\"));\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\"foo\", results.get(0));\n  }","id":64837,"modified_method":"@Test\n  public void testEmptyTransforms() throws Exception {\n    TransformExecutor<String, String> executor =\n      new TransformExecutor<>(Lists.<TransformDetail>newArrayList());\n    TransformResponse transformResponse = executor.runOneIteration(\"foo\");\n    List<String> results = Lists.newArrayList(transformResponse.getEmittedRecords());\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\"foo\", results.get(0));\n    executor.resetEmitters();\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void transform(Double input, Emitter<Double> emitter) throws Exception {\n      if (input > threshold) {\n        emitter.emit(input);\n      }\n    }","id":64838,"modified_method":"@Override\n    public void transform(Double input, Emitter<Double> emitter) throws Exception {\n      if (input > threshold) {\n        emitter.emit(input);\n      } else {\n        emitter.emitError(new InvalidEntry<Double>(100, \"less than threshold\", input));\n      }\n    }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    List<Transformation> transforms = Lists.<Transformation>newArrayList(\n      new IntToDouble(), new Filter(100d), new DoubleToString());\n    List<StageMetrics> stageMetrics = Lists.newArrayList(\n      new StageMetrics(mockMetrics, PluginID.from(Constants.Source.PLUGINTYPE, \"first\", 1)),\n      new StageMetrics(mockMetrics, PluginID.from(Constants.Transform.PLUGINTYPE, \"second\", 2)),\n      new StageMetrics(mockMetrics, PluginID.from(Constants.Sink.PLUGINTYPE, \"third\", 3))\n    );\n    TransformExecutor<Integer, String> executor = new TransformExecutor<>(transforms, stageMetrics);\n\n    List<String> results = Lists.newArrayList(executor.runOneIteration(1));\n    Assert.assertTrue(results.isEmpty());\n    Assert.assertEquals(3, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"sink.third.3.records.out\"));\n\n    results = Lists.newArrayList(executor.runOneIteration(10));\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\"1000.0\", results.get(0));\n    Assert.assertEquals(6, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"sink.third.3.records.out\"));\n\n    results = Lists.newArrayList(executor.runOneIteration(100));\n    Assert.assertEquals(2, results.size());\n    Assert.assertEquals(\"1000.0\", results.get(0));\n    Assert.assertEquals(\"10000.0\", results.get(1));\n    Assert.assertEquals(9, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink.third.3.records.out\"));\n  }","id":64839,"modified_method":"@Test\n  public void testTransforms() throws Exception {\n    MockMetrics mockMetrics = new MockMetrics();\n    List<TransformDetail> transforms = Lists.<TransformDetail>newArrayList();\n    transforms.add(\n      new TransformDetail(\"intToDoubleTransform\", new IntToDouble(),\n                                new StageMetrics(mockMetrics, PluginID.from(Constants.Source.PLUGINTYPE, \"first\", 1))));\n\n    transforms.add(\n      new TransformDetail(\"filterTransform\", new Filter(100d),\n                                new StageMetrics(mockMetrics,\n                                                 PluginID.from(Constants.Transform.PLUGINTYPE, \"second\", 2))));\n\n    transforms.add(\n      new TransformDetail(\"doubleToStringTransform\", new DoubleToString(),\n                                new StageMetrics(mockMetrics, PluginID.from(Constants.Sink.PLUGINTYPE, \"third\", 3))));\n\n    TransformExecutor<Integer, String> executor = new TransformExecutor<>(transforms);\n\n    TransformResponse transformResponse = executor.runOneIteration(1);\n    List<String> results = Lists.newArrayList(transformResponse.getEmittedRecords());\n    Assert.assertTrue(results.isEmpty());\n    Map<String, Collection> errorIteratorsMap = transformResponse.getMapTransformIdToErrorEmitter();\n\n    Assert.assertEquals(1, errorIteratorsMap.size());\n    Assert.assertEquals(3, Lists.newArrayList(errorIteratorsMap.get(\"filterTransform\")).size());\n\n    Assert.assertEquals(3, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(0, mockMetrics.getCount(\"sink.third.3.records.out\"));\n\n    executor.resetEmitters();\n    results = Lists.newArrayList(executor.runOneIteration(10).getEmittedRecords());\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\"1000.0\", results.get(0));\n    Assert.assertEquals(6, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(1, mockMetrics.getCount(\"sink.third.3.records.out\"));\n\n    executor.resetEmitters();\n    results = Lists.newArrayList(executor.runOneIteration(100).getEmittedRecords());\n    Assert.assertEquals(2, results.size());\n    Assert.assertEquals(\"1000.0\", results.get(0));\n    Assert.assertEquals(\"10000.0\", results.get(1));\n    Assert.assertEquals(9, mockMetrics.getCount(\"source.first.1.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"transform.second.2.records.out\"));\n    Assert.assertEquals(3, mockMetrics.getCount(\"sink.third.3.records.out\"));\n\n    executor.resetEmitters();\n  }","commit_id":"9fa9a7430595f5f84d1617862efc5867192f34f6","url":"https://github.com/caskdata/cdap"},{"original_method":"private void onRunFinishSink(MapReduceContext context, boolean succeeded) {\n    List<String> sinkPluginIds = GSON.fromJson(context.getSpecification().getProperty(Constants.Sink.PLUGINIDS),\n                                               STRING_LIST_TYPE);\n    for (int i = 0; i < sinkPluginIds.size(); i++) {\n      BatchSink batchSink = batchSinks.get(i);\n      String sinkPluginId = sinkPluginIds.get(i);\n      BatchSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics, sinkPluginId);\n      try {\n        batchSink.onRunFinish(succeeded, sinkContext);\n      } catch (Throwable t) {\n        LOG.warn(\"Exception when calling onRunFinish on {}\", batchSink, t);\n      }\n    }\n  }","id":64840,"modified_method":"private void onRunFinishSink(MapReduceContext context, boolean succeeded) {\n    String sinkPluginIdsStr = context.getSpecification().getProperty(Constants.Sink.PLUGINIDS);\n    // should never happen\n    Preconditions.checkNotNull(sinkPluginIdsStr, \"sink plugin ids could not be found in program properties.\");\n\n    List<String> sinkPluginIds = GSON.fromJson(sinkPluginIdsStr, STRING_LIST_TYPE);\n    for (int i = 0; i < sinkPluginIds.size(); i++) {\n      BatchConfigurable<BatchSinkContext> batchSink = batchSinks.get(i);\n      String sinkPluginId = sinkPluginIds.get(i);\n      BatchSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics, sinkPluginId);\n      try {\n        batchSink.onRunFinish(succeeded, sinkContext);\n      } catch (Throwable t) {\n        LOG.warn(\"Exception when calling onRunFinish on {}\", batchSink, t);\n      }\n    }\n  }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void beforeSubmit(MapReduceContext context) throws Exception {\n    Job job = context.getHadoopJob();\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n\n    batchSource = context.newInstance(sourcePluginId);\n    BatchSourceContext sourceContext = new MapReduceSourceContext(context, mrMetrics, sourcePluginId);\n    batchSource.prepareRun(sourceContext);\n\n    List<String> sinkPluginIds = GSON.fromJson(properties.get(Constants.Sink.PLUGINIDS), STRING_LIST_TYPE);\n    batchSinks = Lists.newArrayListWithCapacity(sinkPluginIds.size());\n    for (String sinkPluginId : sinkPluginIds) {\n      BatchSink batchSink = context.newInstance(sinkPluginId);\n      BatchSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics, sinkPluginId);\n      batchSink.prepareRun(sinkContext);\n      batchSinks.add(batchSink);\n    }\n\n    job.setMapperClass(ETLMapper.class);\n    job.setNumReduceTasks(0);\n  }","id":64841,"modified_method":"@Override\n  public void beforeSubmit(MapReduceContext context) throws Exception {\n    Job job = context.getHadoopJob();\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n\n    batchSource = context.newInstance(sourcePluginId);\n    BatchSourceContext sourceContext = new MapReduceSourceContext(context, mrMetrics, sourcePluginId);\n    batchSource.prepareRun(sourceContext);\n\n    Map<String, Set<String>> sinkOutputs = new HashMap<>();\n    String sinkPluginIdsStr = properties.get(Constants.Sink.PLUGINIDS);\n    // should never happen\n    Preconditions.checkNotNull(sinkPluginIdsStr, \"sink plugin ids could not be found in program properties.\");\n\n    List<String> sinkPluginIds = GSON.fromJson(sinkPluginIdsStr, STRING_LIST_TYPE);\n    batchSinks = Lists.newArrayListWithCapacity(sinkPluginIds.size());\n    for (String sinkPluginId : sinkPluginIds) {\n      BatchConfigurable<BatchSinkContext> batchSink = context.newInstance(sinkPluginId);\n      MapReduceSinkContext sinkContext = new MapReduceSinkContext(context, mrMetrics, sinkPluginId);\n      batchSink.prepareRun(sinkContext);\n      batchSinks.add(batchSink);\n      sinkOutputs.put(sinkPluginId, sinkContext.getOutputNames());\n    }\n    job.getConfiguration().set(SINK_OUTPUTS_KEY, GSON.toJson(sinkOutputs));\n\n    job.setMapperClass(ETLMapper.class);\n    job.setNumReduceTasks(0);\n  }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue input = new KeyValue(key, value);\n        Iterator<KeyValue> iterator = transformExecutor.runOneIteration(input).getEmittedRecords();\n        while (iterator.hasNext()) {\n          KeyValue output = iterator.next();\n          context.write(output.getKey(), output.getValue());\n        }\n        transformExecutor.resetEmitters();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","id":64842,"modified_method":"@Override\n    public void map(Object key, Object value, Context context) throws IOException, InterruptedException {\n      try {\n        KeyValue<Object, Object> input = new KeyValue<>(key, value);\n        TransformResponse<Object> recordsAndErrors = transformExecutor.runOneIteration(input);\n        Iterator<Object> transformedRecords = recordsAndErrors.getEmittedRecords();\n        while (transformedRecords.hasNext()) {\n          Object transformedRecord = transformedRecords.next();\n          for (WrappedSink<Object, Object, Object> sink : sinks) {\n            sink.write(transformedRecord);\n          }\n        }\n        transformExecutor.resetEmitters();\n      } catch (Exception e) {\n        LOG.error(\"Exception thrown in BatchDriver Mapper : {}\", e);\n        Throwables.propagate(e);\n      }\n    }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize(MapReduceTaskContext context) throws Exception {\n\n      // get source, transform, sink ids from program properties\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n      List<TransformInfo> transformInfos = GSON.fromJson(properties.get(Constants.Transform.PLUGINIDS),\n        TRANSFORMDETAILS_LIST_TYPE);\n\n      List<TransformDetail> pipeline = Lists.newArrayListWithCapacity(transformInfos.size() + 2);\n\n      BatchSource source = context.newInstance(sourcePluginId);\n      BatchRuntimeContext runtimeContext = new MapReduceRuntimeContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(runtimeContext);\n      pipeline.add(new TransformDetail(sourcePluginId, source,\n                                             new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId))));\n\n      addTransforms(pipeline, transformInfos, context);\n\n      List<String> sinkPluginIds = GSON.fromJson(properties.get(Constants.Sink.PLUGINIDS), STRING_LIST_TYPE);\n      // multi-output for mapreduce coming in a later PR\n      String sinkPluginId = sinkPluginIds.get(0);\n      BatchSink sink = context.newInstance(sinkPluginId);\n      runtimeContext = new MapReduceRuntimeContext(context, mapperMetrics, sinkPluginId);\n      sink.initialize(runtimeContext);\n      pipeline.add(new TransformDetail(sinkPluginId, sink,\n                                             new StageMetrics(mapperMetrics, PluginID.from(sinkPluginId))));\n\n      transformExecutor = new TransformExecutor<>(pipeline);\n    }","id":64843,"modified_method":"@Override\n    public void initialize(MapReduceTaskContext context) throws Exception {\n      // get source, transform, sink ids from program properties\n      context.getSpecification().getProperties();\n      Map<String, String> properties = context.getSpecification().getProperties();\n\n      String sourcePluginId = properties.get(Constants.Source.PLUGINID);\n      // should never happen\n      String transformInfosStr = properties.get(Constants.Transform.PLUGINIDS);\n      Preconditions.checkNotNull(transformInfosStr, \"Transform plugin ids not found in program properties.\");\n\n      List<TransformInfo> transformInfos = GSON.fromJson(transformInfosStr, TRANSFORMDETAILS_LIST_TYPE);\n      List<TransformDetail> pipeline = Lists.newArrayListWithCapacity(transformInfos.size() + 2);\n\n      BatchSource source = context.newInstance(sourcePluginId);\n      BatchRuntimeContext runtimeContext = new MapReduceRuntimeContext(context, mapperMetrics, sourcePluginId);\n      source.initialize(runtimeContext);\n      pipeline.add(new TransformDetail(sourcePluginId, source,\n        new StageMetrics(mapperMetrics, PluginID.from(sourcePluginId))));\n\n      addTransforms(pipeline, transformInfos, context);\n\n      // get the list of sinks, and the names of the outputs each sink writes to\n      Context hadoopContext = (Context) context.getHadoopContext();\n      String sinkOutputsStr = hadoopContext.getConfiguration().get(SINK_OUTPUTS_KEY);\n      // should never happen, this is set in beforeSubmit\n      Preconditions.checkNotNull(sinkOutputsStr, \"Sink outputs not found in hadoop conf.\");\n\n      Map<String, Set<String>> sinkOutputs = GSON.fromJson(sinkOutputsStr, SINK_OUTPUTS_TYPE);\n      sinks = new ArrayList<>(sinkOutputs.size());\n      for (Map.Entry<String, Set<String>> sinkOutput : sinkOutputs.entrySet()) {\n        String sinkPluginId = sinkOutput.getKey();\n        Set<String> sinkOutputNames = sinkOutput.getValue();\n\n        BatchSink<Object, Object, Object> sink = context.newInstance(sinkPluginId);\n        runtimeContext = new MapReduceRuntimeContext(context, mapperMetrics, sinkPluginId);\n        sink.initialize(runtimeContext);\n        sinks.add(new WrappedSink<>(sinkPluginId, sink, sinkOutputNames, context, mapperMetrics));\n      }\n\n      transformExecutor = new TransformExecutor<>(pipeline);\n    }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testFiletoTPFS() throws Exception {\n    String filePath = \"file:///tmp/test/text.txt\";\n    String testData = \"String for testing purposes.\";\n\n    Path textFile = new Path(filePath);\n    Configuration conf = new Configuration();\n    FileSystem fs = FileSystem.get(conf);\n    FSDataOutputStream writeData = fs.create(textFile);\n    writeData.write(testData.getBytes());\n    writeData.flush();\n    writeData.close();\n\n    ETLStage source = new ETLStage(\"File\", ImmutableMap.<String, String>builder()\n      .put(Properties.File.FILESYSTEM, \"Text\")\n      .put(Properties.File.PATH, filePath)\n      .build());\n\n    ETLStage sink = new ETLStage(\"TPFSAvro\",\n                                 ImmutableMap.of(Properties.TimePartitionedFileSetDataset.SCHEMA,\n                                                 FileBatchSource.DEFAULT_SCHEMA.toString(),\n                                                 Properties.TimePartitionedFileSetDataset.TPFS_NAME, \"fileSink\"));\n    ETLBatchConfig etlConfig = new ETLBatchConfig(\"* * * * *\", source, sink, Lists.<ETLStage>newArrayList());\n\n    AppRequest<ETLBatchConfig> appRequest = new AppRequest<>(ETLBATCH_ARTIFACT, etlConfig);\n    Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"FileToTPFS\");\n    ApplicationManager appManager = deployApplication(appId, appRequest);\n\n    MapReduceManager mrManager = appManager.getMapReduceManager(ETLMapReduce.NAME);\n    mrManager.start();\n    mrManager.waitForFinish(2, TimeUnit.MINUTES);\n\n    DataSetManager<TimePartitionedFileSet> fileSetManager = getDataset(\"fileSink\");\n    TimePartitionedFileSet fileSet = fileSetManager.get();\n    List<GenericRecord> records = readOutput(fileSet, FileBatchSource.DEFAULT_SCHEMA);\n    Assert.assertEquals(1, records.size());\n    Assert.assertEquals(testData, records.get(0).get(\"body\").toString());\n    fileSet.close();\n  }","id":64844,"modified_method":"@Test\n  public void testFiletoMultipleTPFS() throws Exception {\n    String filePath = \"file:///tmp/test/text.txt\";\n    String testData = \"String for testing purposes.\";\n\n    Path textFile = new Path(filePath);\n    Configuration conf = new Configuration();\n    FileSystem fs = FileSystem.get(conf);\n    FSDataOutputStream writeData = fs.create(textFile);\n    writeData.write(testData.getBytes());\n    writeData.flush();\n    writeData.close();\n\n    ETLStage source = new ETLStage(\"File\", ImmutableMap.<String, String>builder()\n      .put(Properties.File.FILESYSTEM, \"Text\")\n      .put(Properties.File.PATH, filePath)\n      .build());\n\n    ETLStage sink1 = new ETLStage(\"TPFSAvro\",\n                                  ImmutableMap.of(Properties.TimePartitionedFileSetDataset.SCHEMA,\n                                    FileBatchSource.DEFAULT_SCHEMA.toString(),\n                                    Properties.TimePartitionedFileSetDataset.TPFS_NAME, \"fileSink1\"));\n    ETLStage sink2 = new ETLStage(\"TPFSParquet\",\n                                  ImmutableMap.of(Properties.TimePartitionedFileSetDataset.SCHEMA,\n                                    FileBatchSource.DEFAULT_SCHEMA.toString(),\n                                    Properties.TimePartitionedFileSetDataset.TPFS_NAME, \"fileSink2\"));\n    ETLBatchConfig etlConfig = new ETLBatchConfig(\"* * * * *\",\n                                                  source,\n                                                  Lists.newArrayList(sink1, sink2),\n                                                  Lists.<ETLStage>newArrayList(),\n                                                  new Resources(),\n                                                  Lists.<ETLStage>newArrayList());\n\n    AppRequest<ETLBatchConfig> appRequest = new AppRequest<>(ETLBATCH_ARTIFACT, etlConfig);\n    Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"FileToTPFS\");\n    ApplicationManager appManager = deployApplication(appId, appRequest);\n\n    MapReduceManager mrManager = appManager.getMapReduceManager(ETLMapReduce.NAME);\n    mrManager.start();\n    mrManager.waitForFinish(2, TimeUnit.MINUTES);\n\n    for (String sinkName : new String[] { \"fileSink1\", \"fileSink2\" } ) {\n      DataSetManager<TimePartitionedFileSet> fileSetManager = getDataset(sinkName);\n      TimePartitionedFileSet fileSet = fileSetManager.get();\n      List<GenericRecord> records = readOutput(fileSet, FileBatchSource.DEFAULT_SCHEMA);\n      Assert.assertEquals(1, records.size());\n      Assert.assertEquals(testData, records.get(0).get(\"body\").toString());\n      fileSet.close();\n    }\n  }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void prepareRun(BatchSinkContext context) {\n    Map<String, String> sinkArgs = new HashMap<>();\n    TimePartitionedFileSetArguments.setOutputPartitionTime(sinkArgs, context.getLogicalStartTime());\n    if (!Strings.isNullOrEmpty(tpfsSinkConfig.filePathFormat)) {\n      TimePartitionedFileSetArguments.setOutputPathFormat(sinkArgs, tpfsSinkConfig.filePathFormat,\n                                                          tpfsSinkConfig.timeZone);\n    }\n    context.addOutput(tpfsSinkConfig.name, sinkArgs);\n  }","id":64845,"modified_method":"@Override\n  public void prepareRun(BatchSinkContext context) {\n    Map<String, String> sinkArgs = getAdditionalTPFSArguments();\n    TimePartitionedFileSetArguments.setOutputPartitionTime(sinkArgs, context.getLogicalStartTime());\n    if (!Strings.isNullOrEmpty(tpfsSinkConfig.filePathFormat)) {\n      TimePartitionedFileSetArguments.setOutputPathFormat(sinkArgs, tpfsSinkConfig.filePathFormat,\n                                                          tpfsSinkConfig.timeZone);\n    }\n    context.addOutput(tpfsSinkConfig.name, sinkArgs);\n  }","commit_id":"87b91f4cfb33fb5dd5f6a607204976ea56aeef68","url":"https://github.com/caskdata/cdap"},{"original_method":"private void buildFilter() {\n        filter = new FilterCard();\n        ArrayList<Predicate<MageObject>> predicates = new ArrayList<Predicate<MageObject>>();\n\n        if (this.rdoGreen.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.GREEN));\n        }\n        if (this.rdoRed.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.RED));\n        }\n        if (this.rdoBlack.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.BLACK));\n        }\n        if (this.rdoBlue.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.BLUE));\n        }\n        if (this.rdoWhite.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.WHITE));\n        }\n        if (this.rdoColorless.isSelected()) {\n            predicates.add(new ColorlessPredicate());\n        }\n        filter.add(Predicates.or(predicates));\n\n        predicates.clear();\n        if (this.rdoLand.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.LAND));\n        }\n        if (this.rdoArtifacts.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.ARTIFACT));\n        }\n        if (this.rdoCreatures.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.CREATURE));\n        }\n        if (this.rdoEnchantments.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.ENCHANTMENT));\n        }\n        if (this.rdoInstants.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.INSTANT));\n        }\n        if (this.rdoSorceries.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.SORCERY));\n        }\n        if (this.rdoPlaneswalkers.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.PLANESWALKER));\n        }\n        filter.add(Predicates.or(predicates));\n\n        String name = jTextFieldSearch.getText().trim();\n        filter.add(new CardTextPredicate(name));\n\n        if (this.cbExpansionSet.getSelectedItem() instanceof ExpansionSet) {\n            filter.add(new ExpansionSetPredicate(((ExpansionSet) this.cbExpansionSet.getSelectedItem()).getCode()));\n        } else if (this.cbExpansionSet.getSelectedItem().equals(\"-- Standard\")) {\n            ArrayList<Predicate<Card>> expansionPredicates = new ArrayList<Predicate<Card>>();\n            for (String setCode : ConstructedFormats.getSetsByFormat(\"Standard\")) {\n                expansionPredicates.add(new ExpansionSetPredicate(setCode));\n            }\n            filter.add(Predicates.or(expansionPredicates));\n        }\n    }","id":64846,"modified_method":"private void buildFilter() {\n        filter = new FilterCard();\n        ArrayList<Predicate<MageObject>> predicates = new ArrayList<Predicate<MageObject>>();\n\n        if (this.rdoGreen.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.GREEN));\n        }\n        if (this.rdoRed.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.RED));\n        }\n        if (this.rdoBlack.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.BLACK));\n        }\n        if (this.rdoBlue.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.BLUE));\n        }\n        if (this.rdoWhite.isSelected()) {\n            predicates.add(new ColorPredicate(ObjectColor.WHITE));\n        }\n        if (this.rdoColorless.isSelected()) {\n            predicates.add(new ColorlessPredicate());\n        }\n        filter.add(Predicates.or(predicates));\n\n        predicates.clear();\n        if (this.rdoLand.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.LAND));\n        }\n        if (this.rdoArtifacts.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.ARTIFACT));\n        }\n        if (this.rdoCreatures.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.CREATURE));\n        }\n        if (this.rdoEnchantments.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.ENCHANTMENT));\n        }\n        if (this.rdoInstants.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.INSTANT));\n        }\n        if (this.rdoSorceries.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.SORCERY));\n        }\n        if (this.rdoPlaneswalkers.isSelected()) {\n            predicates.add(new CardTypePredicate(CardType.PLANESWALKER));\n        }\n        filter.add(Predicates.or(predicates));\n\n        String name = jTextFieldSearch.getText().trim();\n        filter.add(new CardTextPredicate(name));\n\n        if (this.cbExpansionSet.isVisible()) {\n            String expansionSelection = this.cbExpansionSet.getSelectedItem().toString();\n            if (!expansionSelection.equals(\"- All Sets\")) {\n                ArrayList<Predicate<Card>> expansionPredicates = new ArrayList<Predicate<Card>>();\n                for (String setCode : ConstructedFormats.getSetsByFormat(expansionSelection)) {\n                    expansionPredicates.add(new ExpansionSetPredicate(setCode));\n                }\n                filter.add(Predicates.or(expansionPredicates));\n            }\n        }\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"public void loadCards(BigCard bigCard) {\n        this.bigCard = bigCard;\n        this.btnBooster.setVisible(true);\n        this.btnClear.setVisible(true);\n        this.cbExpansionSet.setVisible(true);\n        cbExpansionSet.setModel(new DefaultComboBoxModel(Sets.getInstance().getSortedByReleaseDate()));\n        cbExpansionSet.insertItemAt(\"-- All sets\", 0);\n        cbExpansionSet.insertItemAt(\"-- Standard\", 1);\n        cbExpansionSet.setSelectedIndex(0);\n\n        filterCards();\n    }","id":64847,"modified_method":"public void loadCards(BigCard bigCard) {\n        this.bigCard = bigCard;\n        this.btnBooster.setVisible(true);\n        this.btnClear.setVisible(true);\n        this.cbExpansionSet.setVisible(true);\n        cbExpansionSet.setModel(new DefaultComboBoxModel(ConstructedFormats.getTypes()));\n        cbExpansionSet.setSelectedIndex(0);\n\n        filterCards();\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        tbColor = new javax.swing.JToolBar();\n        rdoRed = new javax.swing.JRadioButton();\n        rdoGreen = new javax.swing.JRadioButton();\n        rdoBlue = new javax.swing.JRadioButton();\n        rdoBlack = new javax.swing.JRadioButton();\n        rdoWhite = new javax.swing.JRadioButton();\n        rdoColorless = new javax.swing.JRadioButton();\n        cbExpansionSet = new javax.swing.JComboBox();\n        btnBooster = new javax.swing.JButton();\n        btnClear = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        tbTypes = new javax.swing.JToolBar();\n        rdoLand = new javax.swing.JRadioButton();\n        rdoCreatures = new javax.swing.JRadioButton();\n        rdoArtifacts = new javax.swing.JRadioButton();\n        rdoEnchantments = new javax.swing.JRadioButton();\n        rdoInstants = new javax.swing.JRadioButton();\n        rdoSorceries = new javax.swing.JRadioButton();\n        rdoPlaneswalkers = new javax.swing.JRadioButton();\n        chkPiles = new javax.swing.JCheckBox();\n        cbSortBy = new javax.swing.JComboBox();\n        jToggleListView = new javax.swing.JToggleButton();\n        jToggleCardView = new javax.swing.JToggleButton();\n        jPanel1 = new javax.swing.JPanel();\n        jButtonAddToMain = new javax.swing.JButton();\n        jButtonAddToSideboard = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n        jTextFieldSearch = new javax.swing.JTextField();\n        jButtonSearch = new javax.swing.JButton();\n        jButtonClean = new javax.swing.JButton();\n        cardCountLabel = new javax.swing.JLabel();\n        cardCount = new javax.swing.JLabel();\n        jButtonRemoveFromMain = new javax.swing.JButton();\n        jButtonRemoveFromSideboard = new javax.swing.JButton();\n\n        tbColor.setFloatable(false);\n        tbColor.setRollover(true);\n\n        rdoRed.setSelected(true);\n        rdoRed.setText(\"Red \");\n        rdoRed.setFocusable(false);\n        rdoRed.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoRed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoRed.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoRedActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoRed);\n\n        rdoGreen.setSelected(true);\n        rdoGreen.setText(\"Green \");\n        rdoGreen.setFocusable(false);\n        rdoGreen.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoGreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoGreen.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoGreenActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoGreen);\n\n        rdoBlue.setSelected(true);\n        rdoBlue.setText(\"Blue \");\n        rdoBlue.setFocusable(false);\n        rdoBlue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoBlue.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoBlue.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoBlueActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoBlue);\n\n        rdoBlack.setSelected(true);\n        rdoBlack.setText(\"Black \");\n        rdoBlack.setFocusable(false);\n        rdoBlack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoBlack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoBlack.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoBlackActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoBlack);\n\n        rdoWhite.setSelected(true);\n        rdoWhite.setText(\"White \");\n        rdoWhite.setFocusable(false);\n        rdoWhite.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoWhite.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoWhite.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoWhiteActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoWhite);\n\n        rdoColorless.setSelected(true);\n        rdoColorless.setText(\"Colorless \");\n        rdoColorless.setFocusable(false);\n        rdoColorless.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoColorless.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoColorless.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoColorlessActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoColorless);\n\n        cbExpansionSet.setModel(new javax.swing.DefaultComboBoxModel(new String[]{\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"}));\n        cbExpansionSet.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbExpansionSetActionPerformed(evt);\n            }\n        });\n        tbColor.add(cbExpansionSet);\n\n        btnBooster.setText(\"Open Booster\");\n        btnBooster.setFocusable(false);\n        btnBooster.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        btnBooster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        btnBooster.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBoosterActionPerformed(evt);\n            }\n        });\n        tbColor.add(btnBooster);\n\n        btnClear.setText(\"Clear\");\n        btnClear.setFocusable(false);\n        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        btnClear.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnClearActionPerformed(evt);\n            }\n        });\n        tbColor.add(btnClear);\n\n        tbTypes.setFloatable(false);\n        tbTypes.setRollover(true);\n\n        rdoLand.setSelected(true);\n        rdoLand.setFocusable(false);\n        rdoLand.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoLand.setLabel(\"Land \");\n        rdoLand.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoLand.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoLandActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoLand);\n\n        rdoCreatures.setSelected(true);\n        rdoCreatures.setFocusable(false);\n        rdoCreatures.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoCreatures.setLabel(\"Creatures \");\n        rdoCreatures.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoCreatures.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoCreaturesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoCreatures);\n\n        rdoArtifacts.setSelected(true);\n        rdoArtifacts.setText(\"Artifacts \");\n        rdoArtifacts.setFocusable(false);\n        rdoArtifacts.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoArtifacts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoArtifacts.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoArtifactsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoArtifacts);\n\n        rdoEnchantments.setSelected(true);\n        rdoEnchantments.setText(\"Enchantments \");\n        rdoEnchantments.setFocusable(false);\n        rdoEnchantments.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoEnchantments.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoEnchantments.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoEnchantmentsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoEnchantments);\n\n        rdoInstants.setSelected(true);\n        rdoInstants.setText(\"Instants \");\n        rdoInstants.setFocusable(false);\n        rdoInstants.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoInstants.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoInstants.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoInstantsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoInstants);\n\n        rdoSorceries.setSelected(true);\n        rdoSorceries.setText(\"Sorceries \");\n        rdoSorceries.setFocusable(false);\n        rdoSorceries.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoSorceries.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoSorceries.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoSorceriesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoSorceries);\n\n        rdoPlaneswalkers.setSelected(true);\n        rdoPlaneswalkers.setText(\"Planeswalkers \");\n        rdoPlaneswalkers.setFocusable(false);\n        rdoPlaneswalkers.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoPlaneswalkers.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoPlaneswalkers.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoPlaneswalkersActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoPlaneswalkers);\n\n        chkPiles.setText(\"Piles\");\n        chkPiles.setFocusable(false);\n        chkPiles.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        chkPiles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        chkPiles.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                chkPilesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(chkPiles);\n\n        cbSortBy.setModel(new javax.swing.DefaultComboBoxModel(new String[]{\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"}));\n        cbSortBy.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbSortByActionPerformed(evt);\n            }\n        });\n        tbTypes.add(cbSortBy);\n\n        jToggleListView.setSelected(true);\n        jToggleListView.setText(\"ListView\");\n        jToggleListView.setFocusable(false);\n        jToggleListView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        jToggleListView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        jToggleListView.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jToggleListViewActionPerformed(evt);\n            }\n        });\n        tbTypes.add(jToggleListView);\n\n        jToggleCardView.setText(\"CardView\");\n        jToggleCardView.setFocusable(false);\n        jToggleCardView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        jToggleCardView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        jToggleCardView.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jToggleCardViewActionPerformed(evt);\n            }\n        });\n        tbTypes.add(jToggleCardView);\n\n        jPanel1.setOpaque(false);\n        jPanel1.setPreferredSize(new java.awt.Dimension(897, 35));\n\n        jButtonAddToMain.setText(\"+\");\n        jButtonAddToMain.setToolTipText(\"Add to Main\");\n        jButtonAddToMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonAddToMainActionPerformed(evt);\n            }\n        });\n\n        jButtonAddToSideboard.setText(\"+S\");\n        jButtonAddToSideboard.setToolTipText(\"Add to Sideboard\");\n        jButtonAddToSideboard.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonAddToSideboardActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setText(\"Search (by name,in rules):\");\n\n        jButtonSearch.setText(\"Search\");\n        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonSearchActionPerformed(evt);\n            }\n        });\n\n        jButtonClean.setText(\"Clear\");\n        jButtonClean.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonCleanActionPerformed(evt);\n            }\n        });\n\n        cardCountLabel.setText(\"Card count:\");\n\n        cardCount.setText(\"0\");\n\n        jButtonRemoveFromMain.setText(\"-\");\n        jButtonRemoveFromMain.setToolTipText(\"Remove from Main\");\n        jButtonRemoveFromMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonRemoveFromMainActionPerformed(evt);\n            }\n        });\n\n        jButtonRemoveFromSideboard.setText(\"-S\");\n        jButtonRemoveFromSideboard.setToolTipText(\"Remove from Sideboard\");\n        jButtonRemoveFromSideboard.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonRemoveFromSideboardActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addComponent(jButtonAddToMain)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonRemoveFromMain)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jButtonAddToSideboard)\n                .addGap(5, 5, 5)\n                .addComponent(jButtonRemoveFromSideboard)\n                .addGap(18, 18, 18)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonSearch)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonClean)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cardCountLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cardCount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(186, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jButtonAddToMain)\n                .addComponent(jLabel1)\n                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jButtonSearch)\n                .addComponent(jButtonClean)\n                .addComponent(cardCountLabel)\n                .addComponent(cardCount)\n                .addComponent(jButtonRemoveFromMain)\n                .addComponent(jButtonAddToSideboard)\n                .addComponent(jButtonRemoveFromSideboard))\n        );\n\n        cardCountLabel.getAccessibleContext().setAccessibleName(\"cardCountLabel\");\n        cardCount.getAccessibleContext().setAccessibleName(\"cardCount\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(tbColor, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n            .addComponent(tbTypes, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(tbColor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(tbTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","id":64848,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        tbColor = new javax.swing.JToolBar();\n        rdoRed = new javax.swing.JRadioButton();\n        rdoGreen = new javax.swing.JRadioButton();\n        rdoBlue = new javax.swing.JRadioButton();\n        rdoBlack = new javax.swing.JRadioButton();\n        rdoWhite = new javax.swing.JRadioButton();\n        rdoColorless = new javax.swing.JRadioButton();\n        cbExpansionSet = new javax.swing.JComboBox();\n        btnBooster = new javax.swing.JButton();\n        btnClear = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        tbTypes = new javax.swing.JToolBar();\n        rdoLand = new javax.swing.JRadioButton();\n        rdoCreatures = new javax.swing.JRadioButton();\n        rdoArtifacts = new javax.swing.JRadioButton();\n        rdoEnchantments = new javax.swing.JRadioButton();\n        rdoInstants = new javax.swing.JRadioButton();\n        rdoSorceries = new javax.swing.JRadioButton();\n        rdoPlaneswalkers = new javax.swing.JRadioButton();\n        chkPiles = new javax.swing.JCheckBox();\n        cbSortBy = new javax.swing.JComboBox();\n        jToggleListView = new javax.swing.JToggleButton();\n        jToggleCardView = new javax.swing.JToggleButton();\n        jPanel1 = new javax.swing.JPanel();\n        jButtonAddToMain = new javax.swing.JButton();\n        jButtonAddToSideboard = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n        jTextFieldSearch = new javax.swing.JTextField();\n        jButtonSearch = new javax.swing.JButton();\n        jButtonClean = new javax.swing.JButton();\n        cardCountLabel = new javax.swing.JLabel();\n        cardCount = new javax.swing.JLabel();\n        jButtonRemoveFromMain = new javax.swing.JButton();\n        jButtonRemoveFromSideboard = new javax.swing.JButton();\n\n        tbColor.setFloatable(false);\n        tbColor.setRollover(true);\n\n        rdoRed.setSelected(true);\n        rdoRed.setText(\"Red \");\n        rdoRed.setFocusable(false);\n        rdoRed.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoRed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoRed.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoRedActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoRed);\n\n        rdoGreen.setSelected(true);\n        rdoGreen.setText(\"Green \");\n        rdoGreen.setFocusable(false);\n        rdoGreen.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoGreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoGreen.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoGreenActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoGreen);\n\n        rdoBlue.setSelected(true);\n        rdoBlue.setText(\"Blue \");\n        rdoBlue.setFocusable(false);\n        rdoBlue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoBlue.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoBlue.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoBlueActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoBlue);\n\n        rdoBlack.setSelected(true);\n        rdoBlack.setText(\"Black \");\n        rdoBlack.setFocusable(false);\n        rdoBlack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoBlack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoBlack.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoBlackActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoBlack);\n\n        rdoWhite.setSelected(true);\n        rdoWhite.setText(\"White \");\n        rdoWhite.setFocusable(false);\n        rdoWhite.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoWhite.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoWhite.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoWhiteActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoWhite);\n\n        rdoColorless.setSelected(true);\n        rdoColorless.setText(\"Colorless \");\n        rdoColorless.setFocusable(false);\n        rdoColorless.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoColorless.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoColorless.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoColorlessActionPerformed(evt);\n            }\n        });\n        tbColor.add(rdoColorless);\n\n        cbExpansionSet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n        cbExpansionSet.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbExpansionSetActionPerformed(evt);\n            }\n        });\n        tbColor.add(cbExpansionSet);\n\n        btnBooster.setText(\"Open Booster\");\n        btnBooster.setFocusable(false);\n        btnBooster.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        btnBooster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        btnBooster.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBoosterActionPerformed(evt);\n            }\n        });\n        tbColor.add(btnBooster);\n\n        btnClear.setText(\"Clear\");\n        btnClear.setFocusable(false);\n        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        btnClear.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnClearActionPerformed(evt);\n            }\n        });\n        tbColor.add(btnClear);\n\n        tbTypes.setFloatable(false);\n        tbTypes.setRollover(true);\n\n        rdoLand.setSelected(true);\n        rdoLand.setFocusable(false);\n        rdoLand.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoLand.setLabel(\"Land \");\n        rdoLand.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoLand.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoLandActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoLand);\n\n        rdoCreatures.setSelected(true);\n        rdoCreatures.setFocusable(false);\n        rdoCreatures.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoCreatures.setLabel(\"Creatures \");\n        rdoCreatures.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoCreatures.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoCreaturesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoCreatures);\n\n        rdoArtifacts.setSelected(true);\n        rdoArtifacts.setText(\"Artifacts \");\n        rdoArtifacts.setFocusable(false);\n        rdoArtifacts.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoArtifacts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoArtifacts.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoArtifactsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoArtifacts);\n\n        rdoEnchantments.setSelected(true);\n        rdoEnchantments.setText(\"Enchantments \");\n        rdoEnchantments.setFocusable(false);\n        rdoEnchantments.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoEnchantments.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoEnchantments.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoEnchantmentsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoEnchantments);\n\n        rdoInstants.setSelected(true);\n        rdoInstants.setText(\"Instants \");\n        rdoInstants.setFocusable(false);\n        rdoInstants.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoInstants.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoInstants.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoInstantsActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoInstants);\n\n        rdoSorceries.setSelected(true);\n        rdoSorceries.setText(\"Sorceries \");\n        rdoSorceries.setFocusable(false);\n        rdoSorceries.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoSorceries.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoSorceries.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoSorceriesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoSorceries);\n\n        rdoPlaneswalkers.setSelected(true);\n        rdoPlaneswalkers.setText(\"Planeswalkers \");\n        rdoPlaneswalkers.setFocusable(false);\n        rdoPlaneswalkers.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        rdoPlaneswalkers.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        rdoPlaneswalkers.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rdoPlaneswalkersActionPerformed(evt);\n            }\n        });\n        tbTypes.add(rdoPlaneswalkers);\n\n        chkPiles.setText(\"Piles\");\n        chkPiles.setFocusable(false);\n        chkPiles.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);\n        chkPiles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        chkPiles.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                chkPilesActionPerformed(evt);\n            }\n        });\n        tbTypes.add(chkPiles);\n\n        cbSortBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n        cbSortBy.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbSortByActionPerformed(evt);\n            }\n        });\n        tbTypes.add(cbSortBy);\n\n        jToggleListView.setSelected(true);\n        jToggleListView.setText(\"ListView\");\n        jToggleListView.setFocusable(false);\n        jToggleListView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        jToggleListView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        jToggleListView.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jToggleListViewActionPerformed(evt);\n            }\n        });\n        tbTypes.add(jToggleListView);\n\n        jToggleCardView.setText(\"CardView\");\n        jToggleCardView.setFocusable(false);\n        jToggleCardView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        jToggleCardView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);\n        jToggleCardView.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jToggleCardViewActionPerformed(evt);\n            }\n        });\n        tbTypes.add(jToggleCardView);\n\n        jPanel1.setOpaque(false);\n        jPanel1.setPreferredSize(new java.awt.Dimension(897, 35));\n\n        jButtonAddToMain.setText(\"+\");\n        jButtonAddToMain.setToolTipText(\"Add to Main\");\n        jButtonAddToMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonAddToMainActionPerformed(evt);\n            }\n        });\n\n        jButtonAddToSideboard.setText(\"+S\");\n        jButtonAddToSideboard.setToolTipText(\"Add to Sideboard\");\n        jButtonAddToSideboard.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonAddToSideboardActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setText(\"Search (by name,in rules):\");\n\n        jButtonSearch.setText(\"Search\");\n        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonSearchActionPerformed(evt);\n            }\n        });\n\n        jButtonClean.setText(\"Clear\");\n        jButtonClean.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonCleanActionPerformed(evt);\n            }\n        });\n\n        cardCountLabel.setForeground(java.awt.SystemColor.textHighlightText);\n        cardCountLabel.setText(\"Card count:\");\n\n        cardCount.setForeground(java.awt.SystemColor.text);\n        cardCount.setText(\"0\");\n\n        jButtonRemoveFromMain.setText(\"-\");\n        jButtonRemoveFromMain.setToolTipText(\"Remove from Main\");\n        jButtonRemoveFromMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonRemoveFromMainActionPerformed(evt);\n            }\n        });\n\n        jButtonRemoveFromSideboard.setText(\"-S\");\n        jButtonRemoveFromSideboard.setToolTipText(\"Remove from Sideboard\");\n        jButtonRemoveFromSideboard.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButtonRemoveFromSideboardActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addComponent(jButtonAddToMain)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonRemoveFromMain)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jButtonAddToSideboard)\n                .addGap(5, 5, 5)\n                .addComponent(jButtonRemoveFromSideboard)\n                .addGap(18, 18, 18)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonSearch)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jButtonClean)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cardCountLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cardCount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(121, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jButtonAddToMain)\n                .addComponent(jLabel1)\n                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jButtonSearch)\n                .addComponent(jButtonClean)\n                .addComponent(cardCountLabel)\n                .addComponent(cardCount)\n                .addComponent(jButtonRemoveFromMain)\n                .addComponent(jButtonAddToSideboard)\n                .addComponent(jButtonRemoveFromSideboard))\n        );\n\n        cardCountLabel.getAccessibleContext().setAccessibleName(\"cardCountLabel\");\n        cardCount.getAccessibleContext().setAccessibleName(\"cardCount\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(tbColor, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n            .addComponent(tbTypes, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(tbColor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(tbTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"public void initComponents() {\r\n        jPanel1 = new javax.swing.JPanel();\r\n        jPanel1.setOpaque(false);\r\n        bigCard = new BigCard();\r\n        BoxLayout boxlayout = new BoxLayout(jPanel1, BoxLayout.PAGE_AXIS);\r\n        jPanel1.setLayout(boxlayout);\r\n        btnExit = new javax.swing.JButton();\r\n        btnExit.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(btnExit);\r\n\r\n        JLabel label1 = new JLabel(\"Choose format:\");\r\n        label1.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(label1);\r\n\r\n        formats = new JComboBox(ConstructedFormats.getTypes());\r\n        formats.setSelectedItem(ConstructedFormats.getDefault());\r\n        formats.setPreferredSize(new Dimension(100, 25));\r\n        formats.setMaximumSize(new Dimension(100, 25));\r\n        formats.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(formats);\r\n\r\n        JLabel label2 = new JLabel(\"Choose size:\");\r\n        label2.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(label2);\r\n\r\n        small3x3 = new JRadioButton(\"3x3\");\r\n        boolean selected3x3 = MageFrame.getPreferences().get(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_3x3).equals(MageBook.LAYOUT_3x3);\r\n        small3x3.setSelected(selected3x3);\r\n        small3x3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                big4x4.setSelected(false);\r\n                mageBook.updateSize(MageBook.LAYOUT_3x3);\r\n                MageFrame.getPreferences().put(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_3x3);\r\n            }\r\n        });\r\n        jPanel1.add(small3x3);\r\n\r\n        big4x4 = new JRadioButton(\"4x4\");\r\n        big4x4.setSelected(!selected3x3);\r\n        big4x4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                small3x3.setSelected(false);\r\n                mageBook.updateSize(MageBook.LAYOUT_4x4);\r\n                MageFrame.getPreferences().put(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_4x4);\r\n            }\r\n        });\r\n        jPanel1.add(big4x4);\r\n\r\n        JLabel label3 = new JLabel(\"Switch tabs:\");\r\n        label3.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(label3);\r\n\r\n        JPanel buttonPanel = new JPanel();\r\n        buttonPanel.setPreferredSize(new Dimension(200, 100));\r\n        buttonPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 100));\r\n        buttonPanel.setOpaque(false);\r\n        buttonPanel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(buttonPanel);\r\n\r\n        JButton prev = new JButton(\"Prev\");\r\n        prev.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                mageBook.prev();\r\n            }\r\n        });\r\n        buttonPanel.add(prev);\r\n\r\n        JButton next = new JButton(\"Next\");\r\n        next.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                mageBook.next();\r\n            }\r\n        });\r\n        buttonPanel.add(next);\r\n\r\n        formats.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (mageBook != null) {\r\n                    String format = (String)formats.getSelectedItem();\r\n                    MageFrame.getPreferences().put(CollectionViewerPanel.FORMAT_CONFIG_KEY, format);\r\n                    mageBook.updateDispayedSets(format);\r\n                }\r\n            }\r\n        });\r\n\r\n        jPanel1.add(Box.createVerticalGlue());\r\n\r\n        bigCard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n        bigCard.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        bigCard.setAlignmentY(Component.BOTTOM_ALIGNMENT);\r\n        jPanel1.add(bigCard);\r\n\r\n        jPanel2 = new MageBookContainer();\r\n        jPanel2.setOpaque(false);\r\n\r\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\r\n        this.setLayout(layout);\r\n        layout.setHorizontalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(layout.createSequentialGroup()\r\n                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addGap(0, 0, 0)\r\n                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 604, Short.MAX_VALUE))\r\n        );\r\n        layout.setVerticalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)\r\n        );\r\n\r\n        btnExit.setText(\"Exit\");\r\n        btnExit.addActionListener(new java.awt.event.ActionListener() {\r\n            @Override\r\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n                btnExitActionPerformed(evt);\r\n            }\r\n        });\r\n\r\n    }","id":64849,"modified_method":"public void initComponents() {\r\n        jPanel1 = new javax.swing.JPanel();\r\n        jPanel1.setOpaque(false);\r\n        bigCard = new BigCard();\r\n        BoxLayout boxlayout = new BoxLayout(jPanel1, BoxLayout.PAGE_AXIS);\r\n        jPanel1.setLayout(boxlayout);\r\n        btnExit = new javax.swing.JButton();\r\n        btnExit.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(btnExit);\r\n\r\n        JLabel label1 = new JLabel(\"Choose format:\");\r\n        label1.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        label1.setForeground(Color.white);\r\n        jPanel1.add(label1);\r\n\r\n        formats = new JComboBox(ConstructedFormats.getTypes());\r\n        formats.setSelectedItem(ConstructedFormats.getDefault());\r\n        formats.setPreferredSize(new Dimension(250, 25));\r\n        formats.setMaximumSize(new Dimension(250, 25));\r\n        formats.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(formats);\r\n\r\n        JLabel label2 = new JLabel(\"Choose size:\");\r\n        label2.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        label2.setForeground(Color.white);\r\n        jPanel1.add(label2);\r\n\r\n        small3x3 = new JRadioButton(\"3x3\");\r\n        small3x3.setForeground(Color.white);\r\n        boolean selected3x3 = MageFrame.getPreferences().get(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_3x3).equals(MageBook.LAYOUT_3x3);\r\n        small3x3.setSelected(selected3x3);\r\n        small3x3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                big4x4.setSelected(false);\r\n                mageBook.updateSize(MageBook.LAYOUT_3x3);\r\n                MageFrame.getPreferences().put(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_3x3);\r\n            }\r\n        });\r\n        jPanel1.add(small3x3);\r\n\r\n        big4x4 = new JRadioButton(\"4x4\");\r\n        big4x4.setForeground(Color.white);\r\n        big4x4.setSelected(!selected3x3);\r\n        big4x4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                small3x3.setSelected(false);\r\n                mageBook.updateSize(MageBook.LAYOUT_4x4);\r\n                MageFrame.getPreferences().put(LAYOYT_CONFIG_KEY, MageBook.LAYOUT_4x4);\r\n            }\r\n        });\r\n        jPanel1.add(big4x4);\r\n\r\n        JLabel label3 = new JLabel(\"Switch tabs:\");\r\n        label3.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        label3.setForeground(Color.white);\r\n        jPanel1.add(label3);\r\n\r\n        JPanel buttonPanel = new JPanel();\r\n        buttonPanel.setPreferredSize(new Dimension(200, 100));\r\n        buttonPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 100));\r\n        buttonPanel.setOpaque(false);\r\n        buttonPanel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel1.add(buttonPanel);\r\n\r\n        JButton prev = new JButton(\"Prev\");\r\n        prev.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                mageBook.prev();\r\n            }\r\n        });\r\n        buttonPanel.add(prev);\r\n\r\n        JButton next = new JButton(\"Next\");\r\n        next.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                mageBook.next();\r\n            }\r\n        });\r\n        buttonPanel.add(next);\r\n\r\n        formats.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (mageBook != null) {\r\n                    String format = (String)formats.getSelectedItem();\r\n                    MageFrame.getPreferences().put(CollectionViewerPanel.FORMAT_CONFIG_KEY, format);\r\n                    mageBook.updateDispayedSets(format);\r\n                }\r\n            }\r\n        });\r\n\r\n        jPanel1.add(Box.createVerticalGlue());\r\n\r\n        bigCard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n        bigCard.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        bigCard.setAlignmentY(Component.BOTTOM_ALIGNMENT);\r\n        jPanel1.add(bigCard);\r\n\r\n        jPanel2 = new MageBookContainer();\r\n        jPanel2.setOpaque(false);\r\n\r\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\r\n        this.setLayout(layout);\r\n        layout.setHorizontalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(layout.createSequentialGroup()\r\n                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addGap(0, 0, 0)\r\n                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 604, Short.MAX_VALUE))\r\n        );\r\n        layout.setVerticalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)\r\n        );\r\n\r\n        btnExit.setText(\"Exit\");\r\n        btnExit.addActionListener(new java.awt.event.ActionListener() {\r\n            @Override\r\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\r\n                btnExitActionPerformed(evt);\r\n            }\r\n        });\r\n\r\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"public static List<String> getSetsByFormat(String format) {\r\n        if (format.equals(\"M13\")) {\r\n            return m13;\r\n        }\r\n        if (format.equals(\"ISD\\\\DKA\\\\AVR\")) {\r\n            return innistradBlock;\r\n        }\r\n        if (format.equals(\"Standard\")) {\r\n            return standard;\r\n        }\r\n        if (format.equals(\"Extended\")) {\r\n            return extended;\r\n        }\r\n        if (format.equals(\"Modern\")) {\r\n            return modern;\r\n        }\r\n        return all;\r\n    }","id":64850,"modified_method":"public static List<String> getSetsByFormat(String format) {\r\n\r\n        if (format.equals(\"Arabian Nights\")) {\r\n            return Arrays.asList(\"ARN\");\r\n        }\r\n        if (format.equals(\"Antiquities\")) {\r\n            return Arrays.asList(\"ATQ\");\r\n        }\r\n        if (format.equals(\"Legends\")) {\r\n            return Arrays.asList(\"LEG\");\r\n        }\r\n        if (format.equals(\"The Dark\")) {\r\n            return Arrays.asList(\"DRK\");\r\n        }\r\n        if (format.equals(\"Fallen Empires\")) {\r\n            return Arrays.asList(\"FEM\");\r\n        }\r\n        if (format.equals(\"Homelands\")) {\r\n            return Arrays.asList(\"HML\");\r\n        }\r\n        if (format.equals(\"* Ice Age Block\")) {\r\n            return Arrays.asList(\"ICE\", \"ALL\", \"CSP\");\r\n        }        \r\n        if (format.equals(\"Ice Age\")) {\r\n            return Arrays.asList(\"ICE\");\r\n        }\r\n        if (format.equals(\"Alliances\")) {\r\n            return Arrays.asList(\"ALL\");\r\n        }\r\n        if (format.equals(\"Coldsnap\")) {\r\n            return Arrays.asList(\"CSP\");\r\n        }\r\n        if (format.equals(\"* Mirage Block\")) {\r\n            return Arrays.asList(\"MIR\", \"VIS\", \"WTH\");\r\n        }        \r\n        if (format.equals(\"Mirage\")) {\r\n            return Arrays.asList(\"MIR\");\r\n        }\r\n        if (format.equals(\"Visions\")) {\r\n            return Arrays.asList(\"VIS\");\r\n        }\r\n        if (format.equals(\"Weatherlight\")) {\r\n            return Arrays.asList(\"WTH\");\r\n        }\r\n        if (format.equals(\"* Tempest Block\")) {\r\n            return Arrays.asList(\"TMP\", \"STH\", \"EXO\");\r\n        }\r\n        if (format.equals(\"Tempest\")) {\r\n            return Arrays.asList(\"TMP\");\r\n        }\r\n        if (format.equals(\"Stronghold\")) {\r\n            return Arrays.asList(\"STH\");\r\n        }\r\n        if (format.equals(\"Exodus\")) {\r\n            return Arrays.asList(\"EXO\");\r\n        }\r\n        if (format.equals(\"* Urza Block\")) {\r\n            return Arrays.asList(\"USG\", \"ULG\", \"UDS\");\r\n        }        \r\n        if (format.equals(\"Urza's Saga\")) {\r\n            return Arrays.asList(\"USG\");\r\n        }\r\n        if (format.equals(\"Urza's Legacy\")) {\r\n            return Arrays.asList(\"ULG\");\r\n        }\r\n        if (format.equals(\"Urza's Destiny\")) {\r\n            return Arrays.asList(\"UDS\");\r\n        }\r\n        if (format.equals(\"* Masquerade Block\")) {\r\n            return Arrays.asList(\"MMQ\", \"NMS\", \"PCY\");\r\n        }        \r\n        if (format.equals(\"Mercadian Masques\")) {\r\n            return Arrays.asList(\"MMQ\");\r\n        }\r\n        if (format.equals(\"Nemesis\")) {\r\n            return Arrays.asList(\"NMS\");\r\n        }\r\n        if (format.equals(\"Prophecy\")) {\r\n            return Arrays.asList(\"PCY\");\r\n        }\r\n        if (format.equals(\"* Invasion Block\")) {\r\n            return Arrays.asList(\"INV\", \"PLS\", \"APC\");\r\n        }        \r\n        if (format.equals(\"Invasion\")) {\r\n            return Arrays.asList(\"INV\");\r\n        }\r\n        if (format.equals(\"Planeshift\")) {\r\n            return Arrays.asList(\"PLS\");\r\n        }\r\n        if (format.equals(\"Apocalypse\")) {\r\n            return Arrays.asList(\"APC\");\r\n        }\r\n        if (format.equals(\"* Odyssey Block\")) {\r\n            return Arrays.asList(\"ODY\", \"TOR\", \"JUD\");\r\n        }        \r\n        if (format.equals(\"Odyssey\")) {\r\n            return Arrays.asList(\"ODY\");\r\n        }\r\n        if (format.equals(\"Torment\")) {\r\n            return Arrays.asList(\"TOR\");\r\n        }\r\n        if (format.equals(\"Judgment\")) {\r\n            return Arrays.asList(\"JUD\");\r\n        }\r\n        if (format.equals(\"* Onslaught Block\")) {\r\n            return Arrays.asList(\"ONS\", \"LGN\", \"SCG\");\r\n        }        \r\n        if (format.equals(\"Onslaught\")) {\r\n            return Arrays.asList(\"ONS\");\r\n        }\r\n        if (format.equals(\"Legions\")) {\r\n            return Arrays.asList(\"LGN\");\r\n        }\r\n        if (format.equals(\"Scourge\")) {\r\n            return Arrays.asList(\"SCG\");\r\n        }\r\n        if (format.equals(\"* Mirrodin Block\")) {\r\n            return Arrays.asList(\"MRD\", \"DST\", \"5DN\");\r\n        }\r\n        if (format.equals(\"Mirrodin\")) {\r\n            return Arrays.asList(\"MRD\");\r\n        }\r\n        if (format.equals(\"Darksteel\")) {\r\n            return Arrays.asList(\"DST\");\r\n        }\r\n        if (format.equals(\"Fifth Dawn\")) {\r\n            return Arrays.asList(\"5DN\");\r\n        }\r\n        if (format.equals(\"* Kamigawa Block\")) {\r\n            return Arrays.asList(\"CHK\", \"BOK\", \"SOK\");\r\n        }\r\n        if (format.equals(\"Champions of Kamigawa\")) {\r\n            return Arrays.asList(\"CHK\");\r\n        }\r\n        if (format.equals(\"Betrayers of Kamigawa\")) {\r\n            return Arrays.asList(\"BOK\");\r\n        }\r\n        if (format.equals(\"Saviors of Kamigawa\")) {\r\n            return Arrays.asList(\"SOK\");\r\n        }        \r\n        if (format.equals(\"* Ravnica Block\")) {\r\n            return Arrays.asList(\"RAV\", \"GPT\", \"DIS\");\r\n        }\r\n        if (format.equals(\"Ravnica: City of Guilds\")) {\r\n            return Arrays.asList(\"RAV\");\r\n        }\r\n        if (format.equals(\"Guildpact\")) {\r\n            return Arrays.asList(\"GPT\");\r\n        }\r\n        if (format.equals(\"Dissension\")) {\r\n            return Arrays.asList(\"DIS\");\r\n        }        \r\n        if (format.equals(\"* Time Spiral Block\")) {\r\n            return Arrays.asList(\"TSP\", \"TSB\", \"PLC\", \"FUT\");\r\n        }\r\n        if (format.equals(\"Time Spiral\")) {\r\n            return Arrays.asList(\"TSP\", \"TSB\");\r\n        }\r\n        if (format.equals(\"Planar Chaos\")) {\r\n            return Arrays.asList(\"PLC\");\r\n        }\r\n        if (format.equals(\"Future Sight\")) {\r\n            return Arrays.asList(\"FUT\");\r\n        }\r\n        if (format.equals(\"* Lorwyn Block\")) {\r\n            return Arrays.asList(\"LRW\", \"MOR\");\r\n        }\r\n        if (format.equals(\"Lorwyn\")) {\r\n            return Arrays.asList(\"LRW\");\r\n        }\r\n        if (format.equals(\"Morningtide\")) {\r\n            return Arrays.asList(\"MOR\");\r\n        }\r\n        if (format.equals(\"* Shadowmoor Block\")) {\r\n            return Arrays.asList(\"SHM\", \"EVE\");\r\n        }\r\n        if (format.equals(\"Shadowmoor\")) {\r\n            return Arrays.asList(\"SHM\");\r\n        }\r\n        if (format.equals(\"Eventide\")) {\r\n            return Arrays.asList(\"EVE\");\r\n        }\r\n        if (format.equals(\"* Shards of Alara Block\")) {\r\n            return Arrays.asList(\"ALA\", \"CON\", \"ARB\");\r\n        }\r\n        if (format.equals(\"Alara Reborn\")) {\r\n            return Arrays.asList(\"ALA\");\r\n        }\r\n        if (format.equals(\"Conflux\")) {\r\n            return Arrays.asList(\"CON\");\r\n        }\r\n        if (format.equals(\"Shards of Alara\")) {\r\n            return Arrays.asList(\"ARB\");\r\n        }\r\n        if (format.equals(\"* Zendikar Block\")) {\r\n            return Arrays.asList(\"ZEN\", \"WWK\", \"ROE\");\r\n        }\r\n        if (format.equals(\"Zendikar\")) {\r\n            return Arrays.asList(\"ZEN\");\r\n        }\r\n        if (format.equals(\"Worldwake\")) {\r\n            return Arrays.asList(\"WWK\");\r\n        }\r\n        if (format.equals(\"Rise of the Eldrazi\")) {\r\n            return Arrays.asList(\"ROE\");\r\n        }\r\n        if (format.equals(\"* Scars of Mirrodin Block\")) {\r\n            return Arrays.asList(\"SOM\", \"MBS\", \"NPH\");\r\n        }\r\n        if (format.equals(\"Scars of Mirrodin\")) {\r\n            return Arrays.asList(\"SOM\");\r\n        }\r\n        if (format.equals(\"Mirrodin Besieged\")) {\r\n            return Arrays.asList(\"MBS\");\r\n        }\r\n        if (format.equals(\"New Phyrexia\")) {\r\n            return Arrays.asList(\"NPH\");\r\n        }\r\n        if (format.equals(\"* Innistrad Block\")) {\r\n            return Arrays.asList(\"ISD\", \"DKA\", \"AVR\");\r\n        }\r\n        if (format.equals(\"Innistrad\")) {\r\n            return Arrays.asList(\"ISD\");\r\n        }\r\n        if (format.equals(\"Dark Ascension\")) {\r\n            return Arrays.asList(\"DKA\");\r\n        }\r\n        if (format.equals(\"Avacyn Restored\")) {\r\n            return Arrays.asList(\"AVR\");\r\n        }        \r\n        if (format.equals(\"* Return to Ravnica Block\")) {\r\n            return Arrays.asList(\"RTR\");\r\n        }\r\n        if (format.equals(\"Return to Ravnica\")) {\r\n            return Arrays.asList(\"RTR\");\r\n        }                                                               \r\n\r\n        if (format.equals(\"Fourth Edition\")) {\r\n            return Arrays.asList(\"4ED\");\r\n        }\r\n        if (format.equals(\"Fifth Edition\")) {\r\n            return Arrays.asList(\"5ED\");\r\n        }\r\n        if (format.equals(\"Sixth Edition\")) {\r\n            return Arrays.asList(\"6ED\");\r\n        }\r\n        if (format.equals(\"Seventh Edition\")) {\r\n            return Arrays.asList(\"7ED\");\r\n        }\r\n        if (format.equals(\"Eighth Edition\")) {\r\n            return Arrays.asList(\"8ED\");\r\n        }\r\n        \r\n        if (format.equals(\"Ninth Edition\")) {\r\n            return Arrays.asList(\"9ED\");\r\n        }\r\n        if (format.equals(\"Tenth Edition\")) {\r\n            return Arrays.asList(\"10E\");\r\n        }                                                               \r\n      \r\n        if (format.equals(\"Magic 2010\")) {\r\n            return Arrays.asList(\"M10\");\r\n        }        \r\n        if (format.equals(\"Magic 2011\")) {\r\n            return Arrays.asList(\"M11\");\r\n        }\r\n        if (format.equals(\"Magic 2012\")) {\r\n            return Arrays.asList(\"M12\");\r\n        }\r\n        if (format.equals(\"Magic 2013\")) {\r\n            return Arrays.asList(\"M13\");\r\n        }\r\n        if (format.equals(\"Guru\")) {\r\n            return Arrays.asList(\"GUR\");\r\n        }\r\n        if (format.equals(\"Duel Decks: Elspeth vs. Tezzeret\")) {\r\n            return Arrays.asList(\"DDF\");\r\n        }\r\n        \r\n        if (format.equals(\"- Standard\")) {\r\n            return standard;\r\n        }\r\n        if (format.equals(\"- Extended\")) {\r\n            return extended;\r\n        }\r\n        if (format.equals(\"- Modern\")) {\r\n            return modern;\r\n        }\r\n        return all;\r\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"private static void buildLists() {\r\n        for (String setCode : CardsStorage.getSetCodes()) {\r\n            ExpansionSet set = Sets.findSet(setCode);\r\n            if (set.getReleaseDate().after(m13Date)) {\r\n                m13.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(innistradBlockDate) && set.getReleaseDate().before(m13Date)) {\r\n                innistradBlock.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(standardDate)) {\r\n                standard.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(extendedDate)) {\r\n                extended.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(modernDate)) {\r\n                modern.add(set.getCode());\r\n            }\r\n        }\r\n    }","id":64851,"modified_method":"private static void buildLists() {\r\n        \r\n        for (String setCode : CardsStorage.getSetCodes()) {\r\n            ExpansionSet set = Sets.findSet(setCode);\r\n        \r\n            if (set.getReleaseDate().after(standardDate)) {\r\n                standard.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(extendedDate)) {\r\n                extended.add(set.getCode());\r\n            }\r\n            if (set.getReleaseDate().after(modernDate)) {\r\n                modern.add(set.getCode());\r\n            }\r\n        }\r\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"/**\r\n     * Opens color chooser dialog. Generates deck.\r\n     * Saves generated deck and use it as selected deck to play.\r\n     *\r\n     * @return\r\n     */\r\n    public static String generateDeck() {\r\n        JPanel p0 = new JPanel();\r\n        p0.setLayout(new BoxLayout(p0, BoxLayout.Y_AXIS));\r\n\r\n        JLabel text = new JLabel(\"Choose color for your deck: \");\r\n        text.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        p0.add(text);\r\n\r\n        p0.add(Box.createVerticalStrut(5));\r\n        String chosen = MageFrame.getPreferences().get(\"genDeckColor\", \"u\");\r\n        final ColorsChooser colorsChooser = new ColorsChooser(chosen);\r\n        p0.add(colorsChooser);\r\n\r\n        p0.add(Box.createVerticalStrut(5));\r\n        JLabel text2 = new JLabel(\"(X - random color)\");\r\n        text2.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        p0.add(text2);\r\n\r\n        p0.add(Box.createVerticalStrut(5));\r\n        JPanel jPanel = new JPanel();\r\n        JLabel text3 = new JLabel(\"Choose format:\");\r\n        formats = new JComboBox(ConstructedFormats.getTypes());\r\n        formats.setSelectedIndex(0);\r\n        formats.setPreferredSize(new Dimension(100, 25));\r\n        formats.setMaximumSize(new Dimension(100, 25));\r\n        formats.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel.add(text3);\r\n        jPanel.add(formats);\r\n        p0.add(jPanel);\r\n\r\n        final JButton btnGenerate = new JButton(\"Ok\");\r\n        btnGenerate.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                btnGenerate.setEnabled(false);\r\n                colorsChooser.setEnabled(false);\r\n                selectedColors = (String) colorsChooser.getSelectedItem();\r\n                dlg.setVisible(false);\r\n                MageFrame.getPreferences().put(\"genDeckColor\", selectedColors);\r\n            }\r\n        });\r\n        final JButton btnCancel = new JButton(\"Cancel\");\r\n        btnCancel.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                dlg.setVisible(false);\r\n                selectedColors = null;\r\n            }\r\n        });\r\n        Object[] options = {btnGenerate, btnCancel};\r\n        JOptionPane optionPane = new JOptionPane(p0, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);\r\n        dlg = optionPane.createDialog(\"Generating deck\");\r\n        dlg.setVisible(true);\r\n        dlg.dispose();\r\n\r\n        if (selectedColors != null) {\r\n            buildDeck();\r\n            try {\r\n                File tmp = File.createTempFile(\"tempDeck\" + UUID.randomUUID().toString(), \".dck\");\r\n                tmp.createNewFile();\r\n                deck.setName(\"Generated-Deck-\" + UUID.randomUUID());\r\n                Sets.saveDeck(tmp.getAbsolutePath(), deck.getDeckCardLists());\r\n                //JOptionPane.showMessageDialog(null, \"Deck has been generated.\");\r\n                return tmp.getAbsolutePath();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                JOptionPane.showMessageDialog(null, \"Couldn't generate deck. Try once again.\");\r\n            }\r\n        }\r\n\r\n        return selectedColors;\r\n    }","id":64852,"modified_method":"/**\r\n     * Opens color chooser dialog. Generates deck.\r\n     * Saves generated deck and use it as selected deck to play.\r\n     *\r\n     * @return\r\n     */\r\n    public static String generateDeck() {\r\n        JPanel p0 = new JPanel();\r\n        p0.setLayout(new BoxLayout(p0, BoxLayout.Y_AXIS));\r\n \r\n        JLabel text = new JLabel(\"Choose color for your deck: \");\r\n        text.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        p0.add(text);\r\n \r\n        p0.add(Box.createVerticalStrut(5));\r\n        String chosen = MageFrame.getPreferences().get(\"genDeckColor\", \"u\");\r\n        final ColorsChooser colorsChooser = new ColorsChooser(chosen);\r\n        p0.add(colorsChooser);\r\n \r\n        p0.add(Box.createVerticalStrut(5));\r\n        JLabel text2 = new JLabel(\"(X - random color)\");\r\n        text2.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        p0.add(text2);\r\n \r\n        p0.add(Box.createVerticalStrut(5));\r\n        JPanel jPanel = new JPanel();\r\n        JLabel text3 = new JLabel(\"Choose format:\");\r\n        formats = new JComboBox(ConstructedFormats.getTypes());\r\n        formats.setSelectedIndex(0);\r\n        formats.setPreferredSize(new Dimension(300, 25));\r\n        formats.setMaximumSize(new Dimension(300, 25));\r\n        formats.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        jPanel.add(text3);\r\n        jPanel.add(formats);\r\n        p0.add(jPanel);\r\n \r\n        final JButton btnGenerate = new JButton(\"Ok\");\r\n        btnGenerate.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                btnGenerate.setEnabled(false);\r\n                colorsChooser.setEnabled(false);\r\n                selectedColors = (String) colorsChooser.getSelectedItem();\r\n                dlg.setVisible(false);\r\n                MageFrame.getPreferences().put(\"genDeckColor\", selectedColors);\r\n            }\r\n        });\r\n        final JButton btnCancel = new JButton(\"Cancel\");\r\n        btnCancel.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                dlg.setVisible(false);\r\n                selectedColors = null;\r\n            }\r\n        });\r\n        Object[] options = {btnGenerate, btnCancel};\r\n        JOptionPane optionPane = new JOptionPane(p0, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);\r\n        dlg = optionPane.createDialog(\"Generating deck\");\r\n        dlg.setVisible(true);\r\n        dlg.dispose();\r\n \r\n        if (selectedColors != null) {\r\n            buildDeck();\r\n            try {\r\n                File tmp = File.createTempFile(\"tempDeck\" + UUID.randomUUID().toString(), \".dck\");\r\n                tmp.createNewFile();\r\n                deck.setName(\"Generated-Deck-\" + UUID.randomUUID());\r\n                Sets.saveDeck(tmp.getAbsolutePath(), deck.getDeckCardLists());\r\n                //JOptionPane.showMessageDialog(null, \"Deck has been generated.\");\r\n                return tmp.getAbsolutePath();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                JOptionPane.showMessageDialog(null, \"Couldn't generate deck. Try once again.\");\r\n            }\r\n        }\r\n \r\n        return selectedColors;\r\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"public void updateDispayedSets(String format) {\r\n        this.setsToDisplay = ConstructedFormats.getSetsByFormat(format);\r\n        if (this.setsToDisplay.isEmpty()) {\r\n            // display all\r\n            this.setsToDisplay = CardsStorage.getSetCodes();\r\n        }\r\n        addSetTabs();\r\n    }","id":64853,"modified_method":"public void updateDispayedSets(String format) {\r\n        this.setsToDisplay = ConstructedFormats.getSetsByFormat(format);\r\n        if (this.setsToDisplay.isEmpty()) {\r\n            // display all\r\n            this.setsToDisplay = CardsStorage.getSetCodes();\r\n        }\r\n        addSetTabs();\r\n        tabs.get(0).execute();\r\n    }","commit_id":"cf88bb5ac3d9a09134cf22080c0d6e774ea91883","url":"https://github.com/magefree/mage"},{"original_method":"public ProcessInfo(int pid) {\n      this.pid = Integer.valueOf(pid);\n      // seeing this the first time.\n      this.age = 1;\n    }","id":64854,"modified_method":"public ProcessInfo(String pid) {\n      this.pid = pid;\n      // seeing this the first time.\n      this.age = 1;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Get the list of all processes in the system.\n   */\n  private List<Integer> getProcessList() {\n    String[] processDirs = (new File(procfsDir)).list();\n    List<Integer> processList = new ArrayList<Integer>();\n\n    for (String dir : processDirs) {\n      try {\n        int pd = Integer.parseInt(dir);\n        if ((new File(procfsDir, dir)).isDirectory()) {\n          processList.add(Integer.valueOf(pd));\n        }\n      } catch (NumberFormatException n) {\n        // skip this directory\n      } catch (SecurityException s) {\n        // skip this process\n      }\n    }\n    return processList;\n  }","id":64855,"modified_method":"/**\n   * Get the list of all processes in the system.\n   */\n  private List<String> getProcessList() {\n    String[] processDirs = (new File(procfsDir)).list();\n    List<String> processList = new ArrayList<String>();\n\n    for (String dir : processDirs) {\n      Matcher m = numberPattern.matcher(dir);\n      if (!m.matches()) continue;\n      try {\n        if ((new File(procfsDir, dir)).isDirectory()) {\n          processList.add(dir);\n        }\n      } catch (SecurityException s) {\n        // skip this process\n      }\n    }\n    return processList;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Construct the ProcessInfo using the process' PID and procfs rooted at the\n   * specified directory and return the same. It is provided mainly to assist\n   * testing purposes.\n   * \n   * Returns null on failing to read from procfs,\n   *\n   * @param pinfo ProcessInfo that needs to be updated\n   * @param procfsDir root of the proc file system\n   * @return updated ProcessInfo, null on errors.\n   */\n  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret = null;\n    // Read \"procfsDir/<pid>/stat\" file - typically /proc/<pid>/stat\n    BufferedReader in = null;\n    FileReader fReader = null;\n    try {\n      File pidDir = new File(procfsDir, String.valueOf(pinfo.getPid()));\n      fReader = new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in = new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret = pinfo;\n    try {\n      String str = in.readLine(); // only one line\n      Matcher m = PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat = m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret = null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret = null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }","id":64856,"modified_method":"/**\n   * Construct the ProcessInfo using the process' PID and procfs rooted at the\n   * specified directory and return the same. It is provided mainly to assist\n   * testing purposes.\n   * \n   * Returns null on failing to read from procfs,\n   *\n   * @param pinfo ProcessInfo that needs to be updated\n   * @param procfsDir root of the proc file system\n   * @return updated ProcessInfo, null on errors.\n   */\n  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret = null;\n    // Read \"procfsDir/<pid>/stat\" file - typically /proc/<pid>/stat\n    BufferedReader in = null;\n    FileReader fReader = null;\n    try {\n      File pidDir = new File(procfsDir, pinfo.getPid());\n      fReader = new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in = new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret = pinfo;\n    try {\n      String str = in.readLine(); // only one line\n      Matcher m = PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat = m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret = null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret = null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Returns a string printing PIDs of process present in the\n   * ProcfsBasedProcessTree. Output format : [pid pid ..]\n   */\n  public String toString() {\n    StringBuffer pTree = new StringBuffer(\"[ \");\n    for (Integer p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }","id":64857,"modified_method":"/**\n   * Returns a string printing PIDs of process present in the\n   * ProcfsBasedProcessTree. Output format : [pid pid ..]\n   */\n  public String toString() {\n    StringBuffer pTree = new StringBuffer(\"[ \");\n    for (String p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public List<Integer> getCurrentProcessIDs() {\n    List<Integer> currentPIDs = new ArrayList<Integer>();\n    currentPIDs.addAll(processTree.keySet());\n    return currentPIDs;\n  }","id":64858,"modified_method":"public List<String> getCurrentProcessIDs() {\n    List<String> currentPIDs = new ArrayList<String>();\n    currentPIDs.addAll(processTree.keySet());\n    return currentPIDs;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public static boolean checkPidPgrpidForMatch(int _pid, String procfs) {\n    // Get information for this process\n    ProcessInfo pInfo = new ProcessInfo(_pid);\n    pInfo = constructProcessInfo(pInfo, procfs);\n    // null if process group leader finished execution; issue no warning\n    // make sure that pid and its pgrpId match\n    return pInfo == null || pInfo.getPgrpId().equals(_pid);\n  }","id":64859,"modified_method":"public static boolean checkPidPgrpidForMatch(String _pid, String procfs) {\n    // Get information for this process\n    ProcessInfo pInfo = new ProcessInfo(_pid);\n    pInfo = constructProcessInfo(pInfo, procfs);\n    // null if process group leader finished execution; issue no warning\n    // make sure that pid and its pgrpId match\n    if (pInfo == null) return true;\n    String pgrpId = pInfo.getPgrpId().toString();\n    return pgrpId.equals(_pid);\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"private static Integer getValidPID(String pid) {\n    Integer retPid = -1;\n    try {\n      retPid = Integer.parseInt(pid);\n      if (retPid <= 0) {\n        retPid = -1;\n      }\n    } catch (NumberFormatException nfe) {\n      retPid = -1;\n    }\n    return retPid;\n  }","id":64860,"modified_method":"private static String getValidPID(String pid) {\n    if (pid == null) return deadPid;\n    Matcher m = numberPattern.matcher(pid);\n    if (m.matches()) return pid;\n    return deadPid;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public void updateJiffy(ProcessInfo oldInfo) {\n      this.dtime = (oldInfo == null ? this.utime + this.stime\n              : (this.utime + this.stime) - (oldInfo.utime + oldInfo.stime));\n    }","id":64861,"modified_method":"public void updateJiffy(ProcessInfo oldInfo) {\n      if (oldInfo == null) {\n        BigInteger sum = this.stime.add(BigInteger.valueOf(this.utime));\n        if (sum.compareTo(MAX_LONG) > 0) {\n          this.dtime = 0L;\n          LOG.warn(\"Sum of stime (\" + this.stime + \") and utime (\" + this.utime\n              + \") is greater than \" + Long.MAX_VALUE);\n        } else {\n          this.dtime = sum.longValue();\n        }\n        return;\n      }\n      this.dtime = (this.utime - oldInfo.utime +\n          this.stime.subtract(oldInfo.stime).longValue());\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Long getStime() {\n      return stime;\n    }","id":64862,"modified_method":"public BigInteger getStime() {\n      return stime;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Integer getPid() {\n      return pid;\n    }","id":64863,"modified_method":"public String getPid() {\n      return pid;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public void updateProcessInfo(String name, Integer ppid, Integer pgrpId,\n        Integer sessionId, Long utime, Long stime, Long vmem, Long rssmem) {\n      this.name = name;\n      this.ppid = ppid;\n      this.pgrpId = pgrpId;\n      this.sessionId = sessionId;\n      this.utime = utime;\n      this.stime = stime;\n      this.vmem = vmem;\n      this.rssmemPage = rssmem;\n    }","id":64864,"modified_method":"public void updateProcessInfo(String name, String ppid, Integer pgrpId,\n        Integer sessionId, Long utime, BigInteger stime, Long vmem, Long rssmem) {\n      this.name = name;\n      this.ppid = ppid;\n      this.pgrpId = pgrpId;\n      this.sessionId = sessionId;\n      this.utime = utime;\n      this.stime = stime;\n      this.vmem = vmem;\n      this.rssmemPage = rssmem;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Get the process-tree with latest state. If the root-process is not alive,\n   * an empty tree will be returned.\n   * \n   * @return the process-tree with latest state.\n   */\n  public ProcfsBasedProcessTree getProcessTree() {\n    if (pid != -1) {\n      // Get the list of processes\n      List<Integer> processList = getProcessList();\n\n      Map<Integer, ProcessInfo> allProcessInfo = new HashMap<Integer, ProcessInfo>();\n      \n      // cache the processTree to get the age for processes\n      Map<Integer, ProcessInfo> oldProcs = \n              new HashMap<Integer, ProcessInfo>(processTree);\n      processTree.clear();\n\n      ProcessInfo me = null;\n      for (Integer proc : processList) {\n        // Get information for each process\n        ProcessInfo pInfo = new ProcessInfo(proc);\n        if (constructProcessInfo(pInfo, procfsDir) != null) {\n          allProcessInfo.put(proc, pInfo);\n          if (proc.equals(this.pid)) {\n            me = pInfo; // cache 'me'\n            processTree.put(proc, pInfo);\n          }\n        }\n      }\n\n      if (me == null) {\n        return this; \n      }\n\n      // Add each process to its parent.\n      for (Map.Entry<Integer, ProcessInfo> entry : allProcessInfo.entrySet()) {\n        Integer pID = entry.getKey();\n        if (pID != 1) {\n          ProcessInfo pInfo = entry.getValue();\n          ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid());\n          if (parentPInfo != null) {\n            parentPInfo.addChild(pInfo);\n          }\n        }\n      }\n\n      // now start constructing the process-tree\n      LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>();\n      pInfoQueue.addAll(me.getChildren());\n      while (!pInfoQueue.isEmpty()) {\n        ProcessInfo pInfo = pInfoQueue.remove();\n        if (!processTree.containsKey(pInfo.getPid())) {\n          processTree.put(pInfo.getPid(), pInfo);\n        }\n        pInfoQueue.addAll(pInfo.getChildren());\n      }\n\n      // update age values and compute the number of jiffies since last update\n      for (Map.Entry<Integer, ProcessInfo> procs : processTree.entrySet()) {\n        ProcessInfo oldInfo = oldProcs.get(procs.getKey());\n        if (procs.getValue() != null) {\n          procs.getValue().updateJiffy(oldInfo);\n          if (oldInfo != null) {\n            procs.getValue().updateAge(oldInfo);  \n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        // Log.debug the ProcfsBasedProcessTree\n        LOG.debug(this.toString());\n      }\n    }\n    return this;\n  }","id":64865,"modified_method":"/**\n   * Get the process-tree with latest state. If the root-process is not alive,\n   * an empty tree will be returned.\n   * \n   * @return the process-tree with latest state.\n   */\n  public ProcfsBasedProcessTree getProcessTree() {\n    if (!pid.equals(deadPid)) {\n      // Get the list of processes\n      List<String> processList = getProcessList();\n\n      Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>();\n      \n      // cache the processTree to get the age for processes\n      Map<String, ProcessInfo> oldProcs = \n              new HashMap<String, ProcessInfo>(processTree);\n      processTree.clear();\n\n      ProcessInfo me = null;\n      for (String proc : processList) {\n        // Get information for each process\n        ProcessInfo pInfo = new ProcessInfo(proc);\n        if (constructProcessInfo(pInfo, procfsDir) != null) {\n          allProcessInfo.put(proc, pInfo);\n          if (proc.equals(this.pid)) {\n            me = pInfo; // cache 'me'\n            processTree.put(proc, pInfo);\n          }\n        }\n      }\n\n      if (me == null) {\n        return this; \n      }\n\n      // Add each process to its parent.\n      for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) {\n        String pID = entry.getKey();\n        if (!pID.equals(\"1\")) {\n          ProcessInfo pInfo = entry.getValue();\n          ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid());\n          if (parentPInfo != null) {\n            parentPInfo.addChild(pInfo);\n          }\n        }\n      }\n\n      // now start constructing the process-tree\n      LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>();\n      pInfoQueue.addAll(me.getChildren());\n      while (!pInfoQueue.isEmpty()) {\n        ProcessInfo pInfo = pInfoQueue.remove();\n        if (!processTree.containsKey(pInfo.getPid())) {\n          processTree.put(pInfo.getPid(), pInfo);\n        }\n        pInfoQueue.addAll(pInfo.getChildren());\n      }\n\n      // update age values and compute the number of jiffies since last update\n      for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) {\n        ProcessInfo oldInfo = oldProcs.get(procs.getKey());\n        if (procs.getValue() != null) {\n          procs.getValue().updateJiffy(oldInfo);\n          if (oldInfo != null) {\n            procs.getValue().updateAge(oldInfo);  \n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        // Log.debug the ProcfsBasedProcessTree\n        LOG.debug(this.toString());\n      }\n    }\n    return this;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Integer getPpid() {\n      return ppid;\n    }","id":64866,"modified_method":"public String getPpid() {\n      return ppid;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/** Verify that the given process id is same as its process group id.\n   * @param pidStr Process id of the to-be-verified-process\n   * @param procfsDir  Procfs root dir\n   */\n  static boolean checkPidPgrpidForMatch(String pidStr, String procfsDir) {\n    Integer pId = Integer.parseInt(pidStr);\n    // Get information for this process\n    ProcessInfo pInfo = new ProcessInfo(pId);\n    pInfo = constructProcessInfo(pInfo, procfsDir);\n    if (pInfo == null) {\n      // process group leader may have finished execution, but we still need to\n      // kill the subProcesses in the process group.\n      return true;\n    }\n\n    //make sure that pId and its pgrpId match\n    if (!pInfo.getPgrpId().equals(pId)) {\n      LOG.warn(\"Unexpected: Process with PID \" + pId +\n               \" is not a process group leader.\");\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(pId + \" is a process group leader, as expected.\");\n    }\n    return true;\n  }","id":64867,"modified_method":"/** Verify that the given process id is same as its process group id.\n   * @param pidStr Process id of the to-be-verified-process\n   * @param procfsDir  Procfs root dir\n   */\n  static boolean checkPidPgrpidForMatch(String pidStr, String procfsDir) {\n    // Get information for this process\n    ProcessInfo pInfo = new ProcessInfo(pidStr);\n    pInfo = constructProcessInfo(pInfo, procfsDir);\n    if (pInfo == null) {\n      // process group leader may have finished execution, but we still need to\n      // kill the subProcesses in the process group.\n      return true;\n    }\n\n    String pgrpId = pInfo.getPgrpId().toString();\n    //make sure that pId and its pgrpId match\n    if (!pgrpId.equals(pidStr)) {\n      LOG.warn(\"Unexpected: Process with PID \" + pidStr +\n               \" is not a process group leader. pgrpId is: \" + pInfo.getPgrpId());\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(pidStr + \" is a process group leader, as expected.\");\n    }\n    return true;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Construct the ProcessInfo using the process' PID and procfs rooted at the\n   * specified directory and return the same. It is provided mainly to assist\n   * testing purposes.\n   * \n   * Returns null on failing to read from procfs,\n   *\n   * @param pinfo ProcessInfo that needs to be updated\n   * @param procfsDir root of the proc file system\n   * @return updated ProcessInfo, null on errors.\n   */\n  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret = null;\n    // Read \"procfsDir/<pid>/stat\" file - typically /proc/<pid>/stat\n    BufferedReader in = null;\n    FileReader fReader = null;\n    try {\n      File pidDir = new File(procfsDir, String.valueOf(pinfo.getPid()));\n      fReader = new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in = new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret = pinfo;\n    try {\n      String str = in.readLine(); // only one line\n      Matcher m = PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat = m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret = null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret = null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }","id":64868,"modified_method":"/**\n   * Construct the ProcessInfo using the process' PID and procfs rooted at the\n   * specified directory and return the same. It is provided mainly to assist\n   * testing purposes.\n   * \n   * Returns null on failing to read from procfs,\n   *\n   * @param pinfo ProcessInfo that needs to be updated\n   * @param procfsDir root of the proc file system\n   * @return updated ProcessInfo, null on errors.\n   */\n  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret = null;\n    // Read \"procfsDir/<pid>/stat\" file - typically /proc/<pid>/stat\n    BufferedReader in = null;\n    FileReader fReader = null;\n    try {\n      File pidDir = new File(procfsDir, pinfo.getPid());\n      fReader = new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in = new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret = pinfo;\n    try {\n      String str = in.readLine(); // only one line\n      Matcher m = PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat = m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret = null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret = null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Integer getPpid() {\n      return ppid;\n    }","id":64869,"modified_method":"public String getPpid() {\n      return ppid;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Is the root-process alive?\n   * \n   * @return true if the root-process is alive, false otherwise.\n   */\n  public boolean isAlive() {\n    if (pid == -1) {\n      return false;\n    } else {\n      return isAlive(pid.toString());\n    }\n  }","id":64870,"modified_method":"/**\n   * Is the root-process alive?\n   * \n   * @return true if the root-process is alive, false otherwise.\n   */\n  public boolean isAlive() {\n    if (pid.equals(deadPid)) {\n      return false;\n    } else {\n      return isAlive(pid);\n    }\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Long getStime() {\n      return stime;\n    }","id":64871,"modified_method":"public BigInteger getStime() {\n      return stime;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Get the process-tree with latest state. If the root-process is not alive,\n   * an empty tree will be returned.\n   * \n   * @return the process-tree with latest state.\n   */\n  public ProcfsBasedProcessTree getProcessTree() {\n    if (pid != -1) {\n      // Get the list of processes\n      List<Integer> processList = getProcessList();\n\n      Map<Integer, ProcessInfo> allProcessInfo = new HashMap<Integer, ProcessInfo>();\n      \n      // cache the processTree to get the age for processes\n      Map<Integer, ProcessInfo> oldProcs = \n              new HashMap<Integer, ProcessInfo>(processTree);\n      processTree.clear();\n\n      ProcessInfo me = null;\n      for (Integer proc : processList) {\n        // Get information for each process\n        ProcessInfo pInfo = new ProcessInfo(proc);\n        if (constructProcessInfo(pInfo, procfsDir) != null) {\n          allProcessInfo.put(proc, pInfo);\n          if (proc.equals(this.pid)) {\n            me = pInfo; // cache 'me'\n            processTree.put(proc, pInfo);\n          }\n        }\n      }\n\n      if (me == null) {\n        return this; \n      }\n\n      // Add each process to its parent.\n      for (Map.Entry<Integer, ProcessInfo> entry : allProcessInfo.entrySet()) {\n        Integer pID = entry.getKey();\n        if (pID != 1) {\n          ProcessInfo pInfo = entry.getValue();\n          ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid());\n          if (parentPInfo != null) {\n            parentPInfo.addChild(pInfo);\n          }\n        }\n      }\n\n      // now start constructing the process-tree\n      LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>();\n      pInfoQueue.addAll(me.getChildren());\n      while (!pInfoQueue.isEmpty()) {\n        ProcessInfo pInfo = pInfoQueue.remove();\n        if (!processTree.containsKey(pInfo.getPid())) {\n          processTree.put(pInfo.getPid(), pInfo);\n        }\n        pInfoQueue.addAll(pInfo.getChildren());\n      }\n\n      // update age values and compute the number of jiffies since last update\n      for (Map.Entry<Integer, ProcessInfo> procs : processTree.entrySet()) {\n        ProcessInfo oldInfo = oldProcs.get(procs.getKey());\n        if (procs.getValue() != null) {\n          procs.getValue().updateJiffy(oldInfo);\n          if (oldInfo != null) {\n            procs.getValue().updateAge(oldInfo);  \n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        // Log.debug the ProcfsBasedProcessTree\n        LOG.debug(this.toString());\n      }\n    }\n    return this;\n  }","id":64872,"modified_method":"/**\n   * Get the process-tree with latest state. If the root-process is not alive,\n   * an empty tree will be returned.\n   * \n   * @return the process-tree with latest state.\n   */\n  public ProcfsBasedProcessTree getProcessTree() {\n    if (!pid.equals(deadPid)) {\n      // Get the list of processes\n      List<String> processList = getProcessList();\n\n      Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>();\n      \n      // cache the processTree to get the age for processes\n      Map<String, ProcessInfo> oldProcs = \n              new HashMap<String, ProcessInfo>(processTree);\n      processTree.clear();\n\n      ProcessInfo me = null;\n      for (String proc : processList) {\n        // Get information for each process\n        ProcessInfo pInfo = new ProcessInfo(proc);\n        if (constructProcessInfo(pInfo, procfsDir) != null) {\n          allProcessInfo.put(proc, pInfo);\n          if (proc.equals(this.pid)) {\n            me = pInfo; // cache 'me'\n            processTree.put(proc, pInfo);\n          }\n        }\n      }\n\n      if (me == null) {\n        return this; \n      }\n\n      // Add each process to its parent.\n      for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) {\n        String pID = entry.getKey();\n        if (!pID.equals(\"1\")) {\n          ProcessInfo pInfo = entry.getValue();\n          ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid());\n          if (parentPInfo != null) {\n            parentPInfo.addChild(pInfo);\n          }\n        }\n      }\n\n      // now start constructing the process-tree\n      LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>();\n      pInfoQueue.addAll(me.getChildren());\n      while (!pInfoQueue.isEmpty()) {\n        ProcessInfo pInfo = pInfoQueue.remove();\n        if (!processTree.containsKey(pInfo.getPid())) {\n          processTree.put(pInfo.getPid(), pInfo);\n        }\n        pInfoQueue.addAll(pInfo.getChildren());\n      }\n\n      // update age values and compute the number of jiffies since last update\n      for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) {\n        ProcessInfo oldInfo = oldProcs.get(procs.getKey());\n        if (procs.getValue() != null) {\n          procs.getValue().updateJiffy(oldInfo);\n          if (oldInfo != null) {\n            procs.getValue().updateAge(oldInfo);  \n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        // Log.debug the ProcfsBasedProcessTree\n        LOG.debug(this.toString());\n      }\n    }\n    return this;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Destroy the process-tree.\n   * @param inBackground Process is to be killed in the back ground with\n   *                     a separate thread\n   */\n  public void destroy(boolean inBackground) {\n    LOG.debug(\"Killing ProcfsBasedProcessTree of \" + pid);\n    if (pid == -1) {\n      return;\n    }\n    if (isAlive(pid.toString())) {\n      if (isSetsidAvailable && setsidUsed) {\n        // In this case, we know that pid got created using setsid. So kill the\n        // whole processGroup.\n        try {\n          assertAndDestroyProcessGroup(pid.toString(), sleeptimeBeforeSigkill,\n                              inBackground);\n        } catch (IOException e) {\n          LOG.warn(StringUtils.stringifyException(e));\n        }\n      }\n      else {\n        //TODO: Destroy all the processes in the subtree in this case also.\n        // For the time being, killing only the root process.\n        destroyProcess(pid.toString(), sleeptimeBeforeSigkill, inBackground);\n      }\n    }\n  }","id":64873,"modified_method":"/**\n   * Destroy the process-tree.\n   * @param inBackground Process is to be killed in the back ground with\n   *                     a separate thread\n   */\n  public void destroy(boolean inBackground) {\n    LOG.debug(\"Killing ProcfsBasedProcessTree of \" + pid);\n    if (pid.equals(deadPid)) {\n      return;\n    }\n    if (isAlive(pid.toString())) {\n      if (isSetsidAvailable && setsidUsed) {\n        // In this case, we know that pid got created using setsid. So kill the\n        // whole processGroup.\n        try {\n          assertAndDestroyProcessGroup(pid.toString(), sleeptimeBeforeSigkill,\n                              inBackground);\n        } catch (IOException e) {\n          LOG.warn(StringUtils.stringifyException(e));\n        }\n      }\n      else {\n        //TODO: Destroy all the processes in the subtree in this case also.\n        // For the time being, killing only the root process.\n        destroyProcess(pid.toString(), sleeptimeBeforeSigkill, inBackground);\n      }\n    }\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Get the list of all processes in the system.\n   */\n  private List<Integer> getProcessList() {\n    String[] processDirs = (new File(procfsDir)).list();\n    List<Integer> processList = new ArrayList<Integer>();\n\n    for (String dir : processDirs) {\n      try {\n        int pd = Integer.parseInt(dir);\n        if ((new File(procfsDir, dir)).isDirectory()) {\n          processList.add(Integer.valueOf(pd));\n        }\n      } catch (NumberFormatException n) {\n        // skip this directory\n      } catch (SecurityException s) {\n        // skip this process\n      }\n    }\n    return processList;\n  }","id":64874,"modified_method":"/**\n   * Get the list of all processes in the system.\n   */\n  private List<String> getProcessList() {\n    String[] processDirs = (new File(procfsDir)).list();\n    List<String> processList = new ArrayList<String>();\n\n    for (String dir : processDirs) {\n      Matcher m = numberPattern.matcher(dir);\n      if (!m.matches()) continue;\n      try {\n        if ((new File(procfsDir, dir)).isDirectory()) {\n          processList.add(dir);\n        }\n      } catch (SecurityException s) {\n        // skip this process\n      }\n    }\n    return processList;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Returns a string printing PIDs of process present in the\n   * ProcfsBasedProcessTree. Output format : [pid pid ..]\n   */\n  public String toString() {\n    StringBuffer pTree = new StringBuffer(\"[ \");\n    for (Integer p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }","id":64875,"modified_method":"/**\n   * Returns a string printing PIDs of process present in the\n   * ProcfsBasedProcessTree. Output format : [pid pid ..]\n   */\n  public String toString() {\n    StringBuffer pTree = new StringBuffer(\"[ \");\n    for (String p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public Integer getPid() {\n      return pid;\n    }","id":64876,"modified_method":"public String getPid() {\n      return pid;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public void updateProcessInfo(String name, Integer ppid, Integer pgrpId,\n        Integer sessionId, Long utime, Long stime, Long vmem, Long rssmem) {\n      this.name = name;\n      this.ppid = ppid;\n      this.pgrpId = pgrpId;\n      this.sessionId = sessionId;\n      this.utime = utime;\n      this.stime = stime;\n      this.vmem = vmem;\n      this.rssmemPage = rssmem;\n    }","id":64877,"modified_method":"public void updateProcessInfo(String name, String ppid, Integer pgrpId,\n        Integer sessionId, Long utime, BigInteger stime, Long vmem, Long rssmem) {\n      this.name = name;\n      this.ppid = ppid;\n      this.pgrpId = pgrpId;\n      this.sessionId = sessionId;\n      this.utime = utime;\n      this.stime = stime;\n      this.vmem = vmem;\n      this.rssmemPage = rssmem;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"private static Integer getValidPID(String pid) {\n    Integer retPid = -1;\n    try {\n      retPid = Integer.parseInt(pid);\n      if (retPid <= 0) {\n        retPid = -1;\n      }\n    } catch (NumberFormatException nfe) {\n      retPid = -1;\n    }\n    return retPid;\n  }","id":64878,"modified_method":"private static String getValidPID(String pid) {\n    if (pid == null) return deadPid;\n    Matcher m = numberPattern.matcher(pid);\n    if (m.matches()) return pid;\n    return deadPid;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Is any of the subprocesses in the process-tree alive?\n   * \n   * @return true if any of the processes in the process-tree is\n   *           alive, false otherwise.\n   */\n  public boolean isAnyProcessInTreeAlive() {\n    for (Integer pId : processTree.keySet()) {\n      if (isAlive(pId.toString())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":64879,"modified_method":"/**\n   * Is any of the subprocesses in the process-tree alive?\n   * \n   * @return true if any of the processes in the process-tree is\n   *           alive, false otherwise.\n   */\n  public boolean isAnyProcessInTreeAlive() {\n    for (String pId : processTree.keySet()) {\n      if (isAlive(pId)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public String getCmdLine(String procfsDir) {\n      String ret = \"N/A\";\n      if (pid == null) {\n        return ret;\n      }\n      BufferedReader in = null;\n      FileReader fReader = null;\n      try {\n        fReader =\n            new FileReader(new File(new File(procfsDir, pid.toString()),\n                PROCFS_CMDLINE_FILE));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in = new BufferedReader(fReader);\n\n      try {\n        ret = in.readLine(); // only one line\n        if (ret == null) {\n          ret = \"N/A\";\n        } else {\n          ret = ret.replace('\\0', ' '); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret = \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret = \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }","id":64880,"modified_method":"public String getCmdLine(String procfsDir) {\n      String ret = \"N/A\";\n      if (pid == null) {\n        return ret;\n      }\n      BufferedReader in = null;\n      FileReader fReader = null;\n      try {\n        fReader =\n            new FileReader(new File(new File(procfsDir, pid),\n                PROCFS_CMDLINE_FILE));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in = new BufferedReader(fReader);\n\n      try {\n        ret = in.readLine(); // only one line\n        if (ret == null) {\n          ret = \"N/A\";\n        } else {\n          ret = ret.replace('\\0', ' '); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret = \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret = \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public void updateJiffy(ProcessInfo oldInfo) {\n      this.dtime = (oldInfo == null ? this.utime + this.stime\n              : (this.utime + this.stime) - (oldInfo.utime + oldInfo.stime));\n    }","id":64881,"modified_method":"public void updateJiffy(ProcessInfo oldInfo) {\n      if (oldInfo == null) {\n        BigInteger sum = this.stime.add(BigInteger.valueOf(this.utime));\n        if (sum.compareTo(MAX_LONG) > 0) {\n          this.dtime = 0L;\n          LOG.warn(\"Sum of stime (\" + this.stime + \") and utime (\" + this.utime\n              + \") is greater than \" + Long.MAX_VALUE);\n        } else {\n          this.dtime = sum.longValue();\n        }\n        return;\n      }\n      this.dtime = (this.utime - oldInfo.utime +\n          this.stime.subtract(oldInfo.stime).longValue());\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public ProcessInfo(int pid) {\n      this.pid = Integer.valueOf(pid);\n      // seeing this the first time.\n      this.age = 1;\n    }","id":64882,"modified_method":"public ProcessInfo(String pid) {\n      this.pid = pid;\n      // seeing this the first time.\n      this.age = 1;\n    }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Verifies ProcfsBasedProcessTree.checkPidPgrpidForMatch() in case of\n   * 'constructProcessInfo() returning null' by not writing stat file for the\n   * mock process\n   * @throws IOException if there was a problem setting up the\n   *                      fake procfs directories or files.\n   */\n  @Test\n  public void testDestroyProcessTree() throws IOException {\n    // test process\n    String pid = \"100\";\n    // create the fake procfs root directory. \n    File procfsRootDir = new File(TEST_ROOT_DIR, \"proc\");\n\n    try {\n      setupProcfsRootDir(procfsRootDir);\n      \n      // crank up the process tree class.\n      ProcfsBasedProcessTree processTree =\n          createProcessTree(pid, true, procfsRootDir.getAbsolutePath());\n\n      // Let us not create stat file for pid 100.\n      Assert.assertTrue(ProcfsBasedProcessTree.checkPidPgrpidForMatch(\n            Integer.valueOf(pid), procfsRootDir.getAbsolutePath()));\n    } finally {\n      FileUtil.fullyDelete(procfsRootDir);\n    }\n  }","id":64883,"modified_method":"/**\n   * Verifies ProcfsBasedProcessTree.checkPidPgrpidForMatch() in case of\n   * 'constructProcessInfo() returning null' by not writing stat file for the\n   * mock process\n   * @throws IOException if there was a problem setting up the\n   *                      fake procfs directories or files.\n   */\n  @Test\n  public void testDestroyProcessTree() throws IOException {\n    // test process\n    String pid = \"100\";\n    // create the fake procfs root directory. \n    File procfsRootDir = new File(TEST_ROOT_DIR, \"proc\");\n\n    try {\n      setupProcfsRootDir(procfsRootDir);\n      \n      // crank up the process tree class.\n      ProcfsBasedProcessTree processTree =\n          createProcessTree(pid, true, procfsRootDir.getAbsolutePath());\n\n      // Let us not create stat file for pid 100.\n      Assert.assertTrue(ProcfsBasedProcessTree.checkPidPgrpidForMatch(\n            pid, procfsRootDir.getAbsolutePath()));\n    } finally {\n      FileUtil.fullyDelete(procfsRootDir);\n    }\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Is any of the subprocesses in the process-tree alive?\n   * Used only in tests.\n   * @return true if any of the processes in the process-tree is\n   *           alive, false otherwise.\n   */\n  private static boolean isAnyProcessInTreeAlive(\n      ProcfsBasedProcessTree processTree) {\n    for (Integer pId : processTree.getCurrentProcessIDs()) {\n      if (isAlive(pId.toString())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":64884,"modified_method":"/**\n   * Is any of the subprocesses in the process-tree alive?\n   * Used only in tests.\n   * @return true if any of the processes in the process-tree is\n   *           alive, false otherwise.\n   */\n  private static boolean isAnyProcessInTreeAlive(\n      ProcfsBasedProcessTree processTree) {\n    for (String pId : processTree.getCurrentProcessIDs()) {\n      if (isAlive(pId)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69","url":"https://github.com/apache/hadoop"},{"original_method":"public SelectStatement preprocess() throws InvalidRequestException\n        {\n            CFMetaData cfm = ThriftValidation.validateColumnFamily(keyspace(), columnFamily());\n            ThriftValidation.validateConsistencyLevel(keyspace(), parameters.consistencyLevel, RequestType.READ);\n\n            if (parameters.limit <= 0)\n                throw new InvalidRequestException(\"LIMIT must be strictly positive\");\n\n            CFDefinition cfDef = cfm.getCfDef();\n            SelectStatement stmt = new SelectStatement(cfDef, parameters);\n            stmt.setBoundTerms(getBoundsTerms());\n\n            // Select clause\n            if (parameters.isCount)\n            {\n                if (selectClause.size() != 1 || (!selectClause.get(0).equals(\"*\") && !selectClause.get(0).equals(\"1\")))\n                    throw new InvalidRequestException(\"Only COUNT(*) and COUNT(1) operations are currently supported.\");\n            }\n            else\n            {\n                for (ColumnIdentifier t : selectClause)\n                {\n                    CFDefinition.Name name = cfDef.get(t);\n                    if (name == null)\n                        throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", t));\n                    // Keeping the case (as in 'case sensitive') of the input name for the resultSet\n                    stmt.selectedNames.add(Pair.create(name, t));\n                }\n            }\n\n            /*\n             * WHERE clause. For a given entity, rules are:\n             *   - EQ relation conflicts with anything else (including a 2nd EQ)\n             *   - Can't have more than one LT(E) relation (resp. GT(E) relation)\n             *   - IN relation are restricted to row keys (for now) and conflics with anything else\n             *     (we could allow two IN for the same entity but that doesn't seem very useful)\n             *   - The value_alias cannot be restricted in any way (we don't support wide rows with indexed value in CQL so far)\n             */\n            for (Relation rel : whereClause)\n            {\n                CFDefinition.Name name = cfDef.get(rel.getEntity());\n                if (name == null)\n                    throw new InvalidRequestException(String.format(\"Undefined name %s in where clause ('%s')\", rel.getEntity(), rel));\n\n                if (name.kind == CFDefinition.Name.Kind.VALUE_ALIAS)\n                    throw new InvalidRequestException(String.format(\"Restricting the value of a compact CF (%s) is not supported\", name.name));\n\n                Restriction restriction = stmt.restrictions.get(name.name);\n                switch (rel.operator())\n                {\n                    case EQ:\n                        if (restriction != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one relation if it includes an Equal\", name));\n                        stmt.restrictions.put(name.name, new Restriction(Collections.singletonList(rel.getValue())));\n                        break;\n                    case GT:\n                    case GTE:\n                        if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS && !StorageService.getPartitioner().preservesOrder())\n                            throw new InvalidRequestException(\"Only EQ and IN relation are supported on first component of the PRIMARY KEY for RandomPartitioner\");\n                        if (restriction == null)\n                        {\n                            restriction = new Restriction();\n                            stmt.restrictions.put(name.name, restriction);\n                        }\n                        if (restriction.start != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one Greater-Than relation\", name));\n                        restriction.start = rel.getValue();\n                        if (rel.operator() == Relation.Type.GTE)\n                            restriction.startInclusive = true;\n                        break;\n                    case LT:\n                    case LTE:\n                        if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS && !StorageService.getPartitioner().preservesOrder())\n                            throw new InvalidRequestException(\"Only EQ and IN relation are supported on first component of the PRIMARY KEY for RandomPartitioner\");\n                        if (restriction == null)\n                        {\n                            restriction = new Restriction();\n                            stmt.restrictions.put(name.name, restriction);\n                        }\n                        if (restriction.end != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one Lesser-Than relation\", name));\n                        restriction.end = rel.getValue();\n                        if (rel.operator() == Relation.Type.LTE)\n                            restriction.endInclusive = true;\n                        break;\n                    case IN:\n                        if (restriction != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one reation if it includes a IN\", name));\n                        if (name.kind != CFDefinition.Name.Kind.KEY_ALIAS)\n                            throw new InvalidRequestException(\"IN relation can only be applied to the first component of the PRIMARY KEY\");\n                        stmt.restrictions.put(name.name, new Restriction(rel.getInValues()));\n                        break;\n                }\n            }\n\n            /*\n             * At this point, the select statement if fully constructed, but we still have a few things to validate\n             */\n\n            // If a component of the PRIMARY KEY is restricted by a non-EQ relation, all preceding\n            // components must have a EQ, and all following must have no restriction\n            boolean shouldBeDone = false;\n            CFDefinition.Name previous = null;\n            for (CFDefinition.Name cname : cfDef.columns.values())\n            {\n                Restriction restriction = stmt.restrictions.get(cname.name);\n                if (restriction == null)\n                    shouldBeDone = true;\n                else if (shouldBeDone)\n                    throw new InvalidRequestException(String.format(\"PRIMARY KEY part %s cannot be restricted (preceding part %s is either not restricted or by a non-EQ relation)\", cname, previous));\n                else if (!restriction.isEquality())\n                    shouldBeDone = true;\n                // We could support IN for the last name, we don't yet\n                else if (restriction.eqValues.size() > 1)\n                    throw new InvalidRequestException(String.format(\"PRIMARY KEY part %s cannot be restricted by IN relation\", cname));\n\n                previous = cname;\n            }\n\n            // Deal with indexed columns\n            if (!cfDef.metadata.values().isEmpty())\n            {\n                boolean hasEq = false;\n                Set<ByteBuffer> indexed = Table.open(keyspace()).getColumnFamilyStore(columnFamily()).indexManager.getIndexedColumns();\n\n                for (CFDefinition.Name name : cfDef.metadata.values())\n                {\n                    Restriction restriction = stmt.restrictions.get(name.name);\n                    if (restriction == null)\n                        continue;\n\n                    stmt.hasIndexedExpression = true;\n                    if (restriction.isEquality() && indexed.contains(name.name.key))\n                    {\n                        hasEq = true;\n                        break;\n                    }\n                }\n\n                if (stmt.hasIndexedExpression && !hasEq)\n                    throw new InvalidRequestException(\"No indexed columns present in by-columns clause with Equal operator\");\n\n                // If we have indexed columns and the key = X clause, we transform it into a key >= X AND key <= X clause.\n                // If it's a IN relation however, we reject it.\n                Restriction r = stmt.restrictions.get(cfDef.key.name);\n                if (r != null && r.isEquality())\n                {\n                    if (r.eqValues.size() > 1)\n                        throw new InvalidRequestException(\"Select on indexed columns and with IN clause for the PRIMARY KEY are not supported\");\n\n                    r.start = r.eqValues.get(0);\n                    r.startInclusive = true;\n                    r.end = r.eqValues.get(0);\n                    r.endInclusive = true;\n                    r.eqValues = null;\n                }\n            }\n\n            // Only allow reversed if the row key restriction is an equality,\n            // since we don't know how to reverse otherwise\n            if (stmt.parameters.isColumnsReversed)\n            {\n                Restriction r = stmt.restrictions.get(cfDef.key.name);\n                if (r == null || !r.isEquality())\n                    throw new InvalidRequestException(\"Descending order is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN\");\n            }\n            return stmt;\n        }","id":64885,"modified_method":"public SelectStatement preprocess() throws InvalidRequestException\n        {\n            CFMetaData cfm = ThriftValidation.validateColumnFamily(keyspace(), columnFamily());\n            ThriftValidation.validateConsistencyLevel(keyspace(), parameters.consistencyLevel, RequestType.READ);\n\n            if (parameters.limit <= 0)\n                throw new InvalidRequestException(\"LIMIT must be strictly positive\");\n\n            CFDefinition cfDef = cfm.getCfDef();\n            SelectStatement stmt = new SelectStatement(cfDef, parameters);\n            stmt.setBoundTerms(getBoundsTerms());\n\n            // Select clause\n            if (parameters.isCount)\n            {\n                if (selectClause.size() != 1)\n                    throw new InvalidRequestException(\"Only COUNT(*) and COUNT(1) operations are currently supported.\");\n                String columnName = selectClause.get(0).toString();\n                if (!columnName.equals(\"*\") && !columnName.equals(\"1\"))\n                    throw new InvalidRequestException(\"Only COUNT(*) and COUNT(1) operations are currently supported.\");\n            }\n            else\n            {\n                for (ColumnIdentifier t : selectClause)\n                {\n                    CFDefinition.Name name = cfDef.get(t);\n                    if (name == null)\n                        throw new InvalidRequestException(String.format(\"Undefined name %s in selection clause\", t));\n                    // Keeping the case (as in 'case sensitive') of the input name for the resultSet\n                    stmt.selectedNames.add(Pair.create(name, t));\n                }\n            }\n\n            /*\n             * WHERE clause. For a given entity, rules are:\n             *   - EQ relation conflicts with anything else (including a 2nd EQ)\n             *   - Can't have more than one LT(E) relation (resp. GT(E) relation)\n             *   - IN relation are restricted to row keys (for now) and conflics with anything else\n             *     (we could allow two IN for the same entity but that doesn't seem very useful)\n             *   - The value_alias cannot be restricted in any way (we don't support wide rows with indexed value in CQL so far)\n             */\n            for (Relation rel : whereClause)\n            {\n                CFDefinition.Name name = cfDef.get(rel.getEntity());\n                if (name == null)\n                    throw new InvalidRequestException(String.format(\"Undefined name %s in where clause ('%s')\", rel.getEntity(), rel));\n\n                if (name.kind == CFDefinition.Name.Kind.VALUE_ALIAS)\n                    throw new InvalidRequestException(String.format(\"Restricting the value of a compact CF (%s) is not supported\", name.name));\n\n                Restriction restriction = stmt.restrictions.get(name.name);\n                switch (rel.operator())\n                {\n                    case EQ:\n                        if (restriction != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one relation if it includes an Equal\", name));\n                        stmt.restrictions.put(name.name, new Restriction(Collections.singletonList(rel.getValue())));\n                        break;\n                    case GT:\n                    case GTE:\n                        if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS && !StorageService.getPartitioner().preservesOrder())\n                            throw new InvalidRequestException(\"Only EQ and IN relation are supported on first component of the PRIMARY KEY for RandomPartitioner\");\n                        if (restriction == null)\n                        {\n                            restriction = new Restriction();\n                            stmt.restrictions.put(name.name, restriction);\n                        }\n                        if (restriction.start != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one Greater-Than relation\", name));\n                        restriction.start = rel.getValue();\n                        if (rel.operator() == Relation.Type.GTE)\n                            restriction.startInclusive = true;\n                        break;\n                    case LT:\n                    case LTE:\n                        if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS && !StorageService.getPartitioner().preservesOrder())\n                            throw new InvalidRequestException(\"Only EQ and IN relation are supported on first component of the PRIMARY KEY for RandomPartitioner\");\n                        if (restriction == null)\n                        {\n                            restriction = new Restriction();\n                            stmt.restrictions.put(name.name, restriction);\n                        }\n                        if (restriction.end != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one Lesser-Than relation\", name));\n                        restriction.end = rel.getValue();\n                        if (rel.operator() == Relation.Type.LTE)\n                            restriction.endInclusive = true;\n                        break;\n                    case IN:\n                        if (restriction != null)\n                            throw new InvalidRequestException(String.format(\"%s cannot be restricted by more than one reation if it includes a IN\", name));\n                        if (name.kind != CFDefinition.Name.Kind.KEY_ALIAS)\n                            throw new InvalidRequestException(\"IN relation can only be applied to the first component of the PRIMARY KEY\");\n                        stmt.restrictions.put(name.name, new Restriction(rel.getInValues()));\n                        break;\n                }\n            }\n\n            /*\n             * At this point, the select statement if fully constructed, but we still have a few things to validate\n             */\n\n            // If a component of the PRIMARY KEY is restricted by a non-EQ relation, all preceding\n            // components must have a EQ, and all following must have no restriction\n            boolean shouldBeDone = false;\n            CFDefinition.Name previous = null;\n            for (CFDefinition.Name cname : cfDef.columns.values())\n            {\n                Restriction restriction = stmt.restrictions.get(cname.name);\n                if (restriction == null)\n                    shouldBeDone = true;\n                else if (shouldBeDone)\n                    throw new InvalidRequestException(String.format(\"PRIMARY KEY part %s cannot be restricted (preceding part %s is either not restricted or by a non-EQ relation)\", cname, previous));\n                else if (!restriction.isEquality())\n                    shouldBeDone = true;\n                // We could support IN for the last name, we don't yet\n                else if (restriction.eqValues.size() > 1)\n                    throw new InvalidRequestException(String.format(\"PRIMARY KEY part %s cannot be restricted by IN relation\", cname));\n\n                previous = cname;\n            }\n\n            // Deal with indexed columns\n            if (!cfDef.metadata.values().isEmpty())\n            {\n                boolean hasEq = false;\n                Set<ByteBuffer> indexed = Table.open(keyspace()).getColumnFamilyStore(columnFamily()).indexManager.getIndexedColumns();\n\n                for (CFDefinition.Name name : cfDef.metadata.values())\n                {\n                    Restriction restriction = stmt.restrictions.get(name.name);\n                    if (restriction == null)\n                        continue;\n\n                    stmt.hasIndexedExpression = true;\n                    if (restriction.isEquality() && indexed.contains(name.name.key))\n                    {\n                        hasEq = true;\n                        break;\n                    }\n                }\n\n                if (stmt.hasIndexedExpression && !hasEq)\n                    throw new InvalidRequestException(\"No indexed columns present in by-columns clause with Equal operator\");\n\n                // If we have indexed columns and the key = X clause, we transform it into a key >= X AND key <= X clause.\n                // If it's a IN relation however, we reject it.\n                Restriction r = stmt.restrictions.get(cfDef.key.name);\n                if (r != null && r.isEquality())\n                {\n                    if (r.eqValues.size() > 1)\n                        throw new InvalidRequestException(\"Select on indexed columns and with IN clause for the PRIMARY KEY are not supported\");\n\n                    r.start = r.eqValues.get(0);\n                    r.startInclusive = true;\n                    r.end = r.eqValues.get(0);\n                    r.endInclusive = true;\n                    r.eqValues = null;\n                }\n            }\n\n            // Only allow reversed if the row key restriction is an equality,\n            // since we don't know how to reverse otherwise\n            if (stmt.parameters.isColumnsReversed)\n            {\n                Restriction r = stmt.restrictions.get(cfDef.key.name);\n                if (r == null || !r.isEquality())\n                    throw new InvalidRequestException(\"Descending order is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a IN\");\n            }\n            return stmt;\n        }","commit_id":"f5f3065843da6d5d1ba173f433873c10f9a27f80","url":"https://github.com/apache/cassandra"},{"original_method":"public List selectPeers(RouterContext ctx, TunnelPoolSettings settings) {\n        Log l = ctx.logManager().getLog(getClass());\n        int length = getLength(ctx, settings);\n        if (length < 0) { \n            if (l.shouldLog(Log.DEBUG))\n                l.debug(\"Length requested is zero: \" + settings);\n            return null;\n        }\n        \n        if (false && shouldSelectExplicit(settings)) {\n            List rv = selectExplicit(ctx, settings, length);\n            if (l.shouldLog(Log.DEBUG))\n                l.debug(\"Explicit peers selected: \" + rv);\n            return rv;\n        }\n        \n        Set exclude = getExclude(ctx, settings.isInbound(), settings.isExploratory());\n        exclude.add(ctx.routerHash());\n        // Don't use ff peers for exploratory tunnels to lessen exposure to netDb searches and stores\n        // Hmm if they don't get explored they don't get a speed/capacity rating\n        // so they don't get used for client tunnels either.\n        // FloodfillNetworkDatabaseFacade fac = (FloodfillNetworkDatabaseFacade)ctx.netDb();\n        // exclude.addAll(fac.getFloodfillPeers());\n        HashSet matches = new HashSet(length);\n        boolean exploreHighCap = shouldPickHighCap(ctx);\n        if (exploreHighCap) \n            ctx.profileOrganizer().selectHighCapacityPeers(length, exclude, matches);\n        else\n            ctx.profileOrganizer().selectNotFailingPeers(length, exclude, matches, false);\n        \n        if (l.shouldLog(Log.DEBUG))\n            l.debug(\"profileOrganizer.selectNotFailing(\" + length + \") found \" + matches);\n        \n        matches.remove(ctx.routerHash());\n        ArrayList rv = new ArrayList(matches);\n        if (rv.size() > 1)\n            orderPeers(rv, settings.getRandomKey());\n        if (settings.isInbound())\n            rv.add(0, ctx.routerHash());\n        else\n            rv.add(ctx.routerHash());\n        return rv;\n    }","id":64886,"modified_method":"public List selectPeers(RouterContext ctx, TunnelPoolSettings settings) {\n        Log l = ctx.logManager().getLog(getClass());\n        int length = getLength(ctx, settings);\n        if (length < 0) { \n            if (l.shouldLog(Log.DEBUG))\n                l.debug(\"Length requested is zero: \" + settings);\n            return null;\n        }\n        \n        if (false && shouldSelectExplicit(settings)) {\n            List rv = selectExplicit(ctx, settings, length);\n            if (l.shouldLog(Log.DEBUG))\n                l.debug(\"Explicit peers selected: \" + rv);\n            return rv;\n        }\n        \n        Set exclude = getExclude(ctx, settings.isInbound(), settings.isExploratory());\n        exclude.add(ctx.routerHash());\n        // Don't use ff peers for exploratory tunnels to lessen exposure to netDb searches and stores\n        // Hmm if they don't get explored they don't get a speed/capacity rating\n        // so they don't get used for client tunnels either.\n        // FloodfillNetworkDatabaseFacade fac = (FloodfillNetworkDatabaseFacade)ctx.netDb();\n        // exclude.addAll(fac.getFloodfillPeers());\n        HashSet matches = new HashSet(length);\n        boolean exploreHighCap = shouldPickHighCap(ctx);\n        //\n        // We don't honor IP Restriction here, to be fixed\n        //\n        if (exploreHighCap) \n            ctx.profileOrganizer().selectHighCapacityPeers(length, exclude, matches);\n        else if (ctx.commSystem().haveOutboundCapacity())\n            ctx.profileOrganizer().selectNotFailingPeers(length, exclude, matches, false);\n        else // use only connected peers so we don't make more connections\n            ctx.profileOrganizer().selectActiveNotFailingPeers(length, exclude, matches);\n        \n        if (l.shouldLog(Log.DEBUG))\n            l.debug(\"profileOrganizer.selectNotFailing(\" + length + \") found \" + matches);\n        \n        matches.remove(ctx.routerHash());\n        ArrayList rv = new ArrayList(matches);\n        if (rv.size() > 1)\n            orderPeers(rv, settings.getRandomKey());\n        if (settings.isInbound())\n            rv.add(0, ctx.routerHash());\n        else\n            rv.add(ctx.routerHash());\n        return rv;\n    }","commit_id":"4975d30714abbe40d791ab0c17089c8c4cf71269","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private void selectAllNotFailingPeers(int howMany, Set exclude, Set matches, boolean onlyNotFailing, int mask) {\n        if (matches.size() < howMany) {\n            int orig = matches.size();\n            int needed = howMany - orig;\n            int start = 0;\n            List selected = new ArrayList(needed);\n            getReadLock();\n            try {\n                // we randomize the whole list when rebuilding it, but randomizing \n                // the entire list on each peer selection is a bit crazy\n                start = _context.random().nextInt(_notFailingPeersList.size());\n                for (int i = 0; i < _notFailingPeersList.size() && selected.size() < needed; i++) {\n                    int curIndex = (i+start) % _notFailingPeersList.size();\n                    Hash cur = (Hash)_notFailingPeersList.get(curIndex);\n                    if (matches.contains(cur) ||\n                        (exclude != null && exclude.contains(cur))) {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"matched? \" + matches.contains(cur) + \" exclude: \" + exclude + \" cur=\" + cur.toBase64());\n                        continue;\n                    } else if (onlyNotFailing && _highCapacityPeers.containsKey(cur)) {\n                        // we dont want the good peers, just random ones\n                        continue;\n                    } else {\n                        if (isSelectable(cur))\n                            selected.add(cur);\n                        else if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"Not selectable: \" + cur.toBase64());\n                    }\n                }\n            } finally { releaseReadLock(); }\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Selecting all not failing (strict? \" + onlyNotFailing + \" start=\" + start \n                          + \") found \" + selected.size() + \" new peers: \" + selected + \" all=\" + _notFailingPeersList.size() + \" strict=\" + _strictCapacityOrder.size());\n            matches.addAll(selected);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"selectAllNotFailing(\"+howMany+\"), not enough (\" + matches.size() + \") going on to failing\");\n            selectFailingPeers(howMany, exclude, matches);\n        } else {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"selectAllNotFailing(\"+howMany+\"), enough (\" + matches.size() + \")\");\n        }\n        return;\n    }","id":64887,"modified_method":"/**\n     * @param mask ignored, should call locked_selectPeers, to be fixed\n     *\n     */\n    private void selectAllNotFailingPeers(int howMany, Set exclude, Set matches, boolean onlyNotFailing, int mask) {\n        if (matches.size() < howMany) {\n            int orig = matches.size();\n            int needed = howMany - orig;\n            int start = 0;\n            List selected = new ArrayList(needed);\n            getReadLock();\n            try {\n                // we randomize the whole list when rebuilding it, but randomizing \n                // the entire list on each peer selection is a bit crazy\n                start = _context.random().nextInt(_notFailingPeersList.size());\n                for (int i = 0; i < _notFailingPeersList.size() && selected.size() < needed; i++) {\n                    int curIndex = (i+start) % _notFailingPeersList.size();\n                    Hash cur = (Hash)_notFailingPeersList.get(curIndex);\n                    if (matches.contains(cur) ||\n                        (exclude != null && exclude.contains(cur))) {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"matched? \" + matches.contains(cur) + \" exclude: \" + exclude + \" cur=\" + cur.toBase64());\n                        continue;\n                    } else if (onlyNotFailing && _highCapacityPeers.containsKey(cur)) {\n                        // we dont want the good peers, just random ones\n                        continue;\n                    } else {\n                        if (isSelectable(cur))\n                            selected.add(cur);\n                        else if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"Not selectable: \" + cur.toBase64());\n                    }\n                }\n            } finally { releaseReadLock(); }\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Selecting all not failing (strict? \" + onlyNotFailing + \" start=\" + start \n                          + \") found \" + selected.size() + \" new peers: \" + selected + \" all=\" + _notFailingPeersList.size() + \" strict=\" + _strictCapacityOrder.size());\n            matches.addAll(selected);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"selectAllNotFailing(\"+howMany+\"), not enough (\" + matches.size() + \") going on to failing\");\n            selectFailingPeers(howMany, exclude, matches);\n        } else {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"selectAllNotFailing(\"+howMany+\"), enough (\" + matches.size() + \")\");\n        }\n        return;\n    }","commit_id":"4975d30714abbe40d791ab0c17089c8c4cf71269","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Find some peers that meet the criteria and we have the netDb info for locally\n     *\n     */\n    List selectPeers(PeerSelectionCriteria criteria) {\n        int numPasses = 0;\n        List rv = new ArrayList(criteria.getMinimumRequired());\n        Set exclude = new HashSet(1);\n        exclude.add(_context.routerHash());\n        while (rv.size() < criteria.getMinimumRequired()) {\n            Set curVals = new HashSet(criteria.getMinimumRequired());\n            switch (criteria.getPurpose()) {\n                case PeerSelectionCriteria.PURPOSE_TEST:\n                    // for now, the peers we test will be the reliable ones\n                    //_organizer.selectWellIntegratedPeers(criteria.getMinimumRequired(), exclude, curVals);\n                    _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, curVals);\n                    break;\n                case PeerSelectionCriteria.PURPOSE_TUNNEL:\n                    // pull all of the fast ones, regardless of how many we \n                    // want - we'll whittle them down later (40 lines from now)\n                    // int num = _organizer.countFastPeers();\n                    // if (num <= 0) \n                    //    num = criteria.getMaximumRequired();\n                    // _organizer.selectFastPeers(num, exclude, curVals);\n                    _organizer.selectFastPeers(criteria.getMaximumRequired(), exclude, curVals);\n                    break;\n                case PeerSelectionCriteria.PURPOSE_SOURCE_ROUTE:\n                    _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, curVals);\n                    break;\n                case PeerSelectionCriteria.PURPOSE_GARLIC:\n                    _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, curVals);\n                    break;\n                default:\n                    break;\n            }\n            if (curVals.size() <= 0) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"We ran out of peers when looking for reachable ones after finding \" \n                              + rv.size() + \" with \"\n                              + _organizer.countWellIntegratedPeers() + \"/\" \n                              + _organizer.countHighCapacityPeers() + \"/\" \n                              + _organizer.countFastPeers() + \" integrated/high capacity/fast peers\");\n                break;\n            } else {\n                for (Iterator iter = curVals.iterator(); iter.hasNext(); ) {\n                    Hash peer = (Hash)iter.next();\n                    if (null != _context.netDb().lookupRouterInfoLocally(peer)) {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"Peer \" + peer.toBase64() + \" is locally known, so we'll allow its selection\");\n                        if (!rv.contains(peer))\n                            rv.add(peer);\n                    } else {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"Peer \" + peer.toBase64() + \" is NOT locally known, disallowing its selection\");\n                    }\n                }\n                exclude.addAll(curVals);\n            }\n            numPasses++;\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Peers selected after \" + numPasses + \": \" + rv);\n        \n        /*\n        if (criteria.getPurpose() == PeerSelectionCriteria.PURPOSE_TUNNEL) {\n            // we selected extra peers above.  now lets strip that down to the \n            // minimum requested, ordering it by the least recently agreed to\n            // first\n            TreeMap ordered = new TreeMap();\n            for (Iterator iter = rv.iterator(); iter.hasNext(); ) {\n                Hash peer = (Hash)iter.next();\n                PeerProfile prof = _organizer.getProfile(peer);\n                long when = prof.getTunnelHistory().getLastAgreedTo();\n                while (ordered.containsKey(new Long(when)))\n                    when++;\n                ordered.put(new Long(when), peer);\n            }\n            rv.clear();\n            for (Iterator iter = ordered.values().iterator(); iter.hasNext(); ) {\n                if (rv.size() >= criteria.getMaximumRequired()) break;\n                Hash peer = (Hash)iter.next();\n                rv.add(peer);\n            }\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Peers selected after \" + numPasses + \", sorted for a tunnel: \" + rv);\n        }\n         */\n        return rv;\n    }","id":64888,"modified_method":"/**\n     * Find some peers that meet the criteria and we have the netDb info for locally\n     *\n     */\n    List selectPeers(PeerSelectionCriteria criteria) {\n        Set peers = new HashSet(criteria.getMinimumRequired());\n        Set exclude = new HashSet(1);\n        exclude.add(_context.routerHash());\n        switch (criteria.getPurpose()) {\n            case PeerSelectionCriteria.PURPOSE_TEST:\n                // for now, the peers we test will be the reliable ones\n                //_organizer.selectWellIntegratedPeers(criteria.getMinimumRequired(), exclude, curVals);\n                _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, peers);\n                break;\n            case PeerSelectionCriteria.PURPOSE_TUNNEL:\n                // pull all of the fast ones, regardless of how many we \n                // want - we'll whittle them down later (40 lines from now)\n                // int num = _organizer.countFastPeers();\n                // if (num <= 0) \n                //    num = criteria.getMaximumRequired();\n                // _organizer.selectFastPeers(num, exclude, curVals);\n                _organizer.selectFastPeers(criteria.getMaximumRequired(), exclude, peers);\n                break;\n            case PeerSelectionCriteria.PURPOSE_SOURCE_ROUTE:\n                _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, peers);\n                break;\n            case PeerSelectionCriteria.PURPOSE_GARLIC:\n                _organizer.selectHighCapacityPeers(criteria.getMinimumRequired(), exclude, peers);\n                break;\n            default:\n                break;\n        }\n        if (peers.size() <= 0) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"We ran out of peers when looking for reachable ones after finding \" \n                          + peers.size() + \" with \"\n                          + _organizer.countWellIntegratedPeers() + \"/\" \n                          + _organizer.countHighCapacityPeers() + \"/\" \n                          + _organizer.countFastPeers() + \" integrated/high capacity/fast peers\");\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Peers selected: \" + peers);\n        return new ArrayList(peers);\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Return a set of Hashes for peers that are both fast and reliable.  If an insufficient\n     * number of peers are both fast and reliable, fall back onto high capacity peers, and if that\n     * doesn't contain sufficient peers, fall back onto not failing peers, and even THAT doesn't\n     * have sufficient peers, fall back onto failing peers.\n     *\n     * @param howMany how many peers are desired\n     * @param exclude set of Hashes for routers that we don't want selected\n     * @param matches set to store the return value in\n     *\n     */\n    public void selectFastPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            locked_selectPeers(_fastPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany)\n            selectHighCapacityPeers(howMany, exclude, matches);\n        return;\n    }","id":64889,"modified_method":"/**\n     * Return a set of Hashes for peers that are both fast and reliable.  If an insufficient\n     * number of peers are both fast and reliable, fall back onto high capacity peers, and if that\n     * doesn't contain sufficient peers, fall back onto not failing peers, and even THAT doesn't\n     * have sufficient peers, fall back onto failing peers.\n     *\n     * @param howMany how many peers are desired\n     * @param exclude set of Hashes for routers that we don't want selected\n     * @param matches set to store the return value in\n     *\n     */\n    public void selectFastPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            locked_selectPeers(_fastPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectFastPeers(\"+howMany+\"), not enough fast (\" + matches.size() + \") going on to highCap\");\n            selectHighCapacityPeers(howMany, exclude, matches);\n        } else {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectFastPeers(\"+howMany+\"), found enough fast (\" + matches.size() + \")\");\n        }\n        return;\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Select peers from the peer mapping, excluding appropriately and increasing the\n     * matches set until it has howMany elements in it.\n     *\n     */\n    private void locked_selectPeers(Map peers, int howMany, Set toExclude, Set matches) {\n        List all = new ArrayList(peers.keySet());\n        if (toExclude != null)\n            all.removeAll(toExclude);\n        all.removeAll(matches);\n        all.remove(_us);\n        howMany -= matches.size();\n        Collections.shuffle(all, _random);\n        for (int i = 0; i < howMany && i < all.size(); i++) {\n            matches.add(all.get(i));\n        }\n    }","id":64890,"modified_method":"/**\n     * Select peers from the peer mapping, excluding appropriately and increasing the\n     * matches set until it has howMany elements in it.\n     *\n     */\n    private void locked_selectPeers(Map peers, int howMany, Set toExclude, Set matches) {\n        List all = new ArrayList(peers.keySet());\n        if (toExclude != null)\n            all.removeAll(toExclude);\n        \n        all.removeAll(matches);\n        all.remove(_us);\n        Collections.shuffle(all, _random);\n        for (int i = 0; (matches.size() < howMany) && (i < all.size()); i++) {\n            Hash peer = (Hash)all.get(i);\n            boolean ok = isOk(peer);\n            if (ok)\n                matches.add(peer);\n            else\n                matches.remove(peer);\n        }\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Update the _thresholdCapacityValue by using a few simple formulas run \n     * against the specified peers.  Ideally, we set the threshold capacity to\n     * the mean, as long as that gives us enough peers and the mean is a \"growth\"\n     * value.  We fall back on the capacity of the top K-th capacity, or the \n     * mean, or the base growth value, depending on various circumstances.\n     *\n     * @param reordered ordered set of PeerProfile objects, ordered by capacity\n     *                  (highest first) for active nonfailing peers\n     */\n    private void locked_calculateCapacityThreshold(double totalCapacity, Set reordered) {\n        int numNotFailing = reordered.size();\n        \n        double meanCapacity = avg(totalCapacity, numNotFailing);\n        \n        long baseline = CapacityCalculator.GROWTH_FACTOR;\n        int minHighCapacityPeers = getMinimumHighCapacityPeers();\n        \n        int numExceedingMean = 0;\n        int numExceedingBaseline = 0;\n        double thresholdAtMedian = 0;\n        double thresholdAtMinHighCap = 0;\n        int cur = 0;\n        for (Iterator iter = reordered.iterator(); iter.hasNext(); ) {\n            PeerProfile profile = (PeerProfile)iter.next();\n            double val = profile.getCapacityValue();\n            if (val > meanCapacity)\n                numExceedingMean++;\n            if (val > baseline)\n                numExceedingBaseline++;\n            if (cur == reordered.size()/2)\n                thresholdAtMedian = val;\n            if (cur == minHighCapacityPeers)\n                thresholdAtMinHighCap = val;\n            cur++;\n        }\n        \n        if (meanCapacity > baseline) {\n            // our average is doing well (growing, not recovering from failures)\n            if (numExceedingMean > minHighCapacityPeers) {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Our average capacity is doing well [\" + meanCapacity \n                              + \"], and includes \" + numExceedingMean);\n                _thresholdCapacityValue = meanCapacity;\n            } else {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Our average capacity is doing well [\" + meanCapacity \n                              + \"], but it is skewed to only have \" + numExceedingMean\n                              + \" so falling back on the top few to \" + thresholdAtMinHighCap);\n                _thresholdCapacityValue = thresholdAtMinHighCap;\n            }\n        } else {\n            // our average isn't doing well (its recovering from failures)\n            _thresholdCapacityValue = baseline + 0.0000001;\n            /*if (numExceedingBaseline > minHighCapacityPeers) {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Our average capacity isn't doing well [\" + meanCapacity \n                              + \"], but the baseline has \" + numExceedingBaseline);\n                _thresholdCapacityValue = baseline+.0001;\n            } else {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Our average capacity isn't doing well [\" + meanCapacity \n                              + \"], and the baseline has \" + numExceedingBaseline \n                              + \" so falling back on the median of \" + thresholdAtMedian);\n                _thresholdCapacityValue = thresholdAtMedian;\n            }\n             */\n        }\n    }","id":64891,"modified_method":"/**\n     * Update the _thresholdCapacityValue by using a few simple formulas run \n     * against the specified peers.  Ideally, we set the threshold capacity to\n     * the mean, as long as that gives us enough peers and is greater than the\n     * median.\n     *\n     * @param reordered ordered set of PeerProfile objects, ordered by capacity\n     *                  (highest first) for active nonfailing peers whose \n     *                  capacity is greater than the growth factor\n     */\n    private void locked_calculateCapacityThreshold(double totalCapacity, Set reordered) {\n        int numNotFailing = reordered.size();\n        \n        double meanCapacity = avg(totalCapacity, numNotFailing);\n        \n        int minHighCapacityPeers = getMinimumHighCapacityPeers();\n        \n        int numExceedingMean = 0;\n        double thresholdAtMedian = 0;\n        double thresholdAtMinHighCap = 0;\n        double thresholdAtLowest = CapacityCalculator.GROWTH_FACTOR;\n        int cur = 0;\n        for (Iterator iter = reordered.iterator(); iter.hasNext(); ) {\n            PeerProfile profile = (PeerProfile)iter.next();\n            double val = profile.getCapacityValue();\n            if (val > meanCapacity)\n                numExceedingMean++;\n            if (cur == reordered.size()/2)\n                thresholdAtMedian = val;\n            if (cur == minHighCapacityPeers)\n                thresholdAtMinHighCap = val;\n            if (cur == reordered.size() -1)\n                thresholdAtLowest = val;\n            cur++;\n        }\n        \n        if (numExceedingMean >= minHighCapacityPeers) {\n            // our average is doing well (growing, not recovering from failures)\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Our average capacity is doing well [\" + meanCapacity \n                          + \"], and includes \" + numExceedingMean);\n            _thresholdCapacityValue = meanCapacity;\n        } else if (reordered.size()/2 >= minHighCapacityPeers) {\n            // ok mean is skewed low, but we still have enough to use the median\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Our average capacity is skewed under the median [\" + meanCapacity \n                          + \"], so use the median threshold \" + thresholdAtMedian);\n            _thresholdCapacityValue = thresholdAtMedian;\n        } else {\n            // our average is doing well, but not enough peers\n            if (_log.shouldLog(Log.INFO))\n                _log.info(\"Our average capacity is doing well [\" + meanCapacity \n                          + \"], but there aren't enough of them \" + numExceedingMean);\n            _thresholdCapacityValue = Math.max(thresholdAtMinHighCap, thresholdAtLowest);\n        }\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Return a set of Hashes for peers that are not failing.\n     *\n     */\n    private void selectAllNotFailingPeers(int howMany, Set exclude, Set matches) {\n        if (matches.size() < howMany) {\n            int orig = matches.size();\n            int needed = howMany - orig;\n            List selected = new ArrayList(needed);\n            synchronized (_reorganizeLock) {\n                for (Iterator iter = _strictCapacityOrder.iterator(); selected.size() < needed && iter.hasNext(); ) {\n                    PeerProfile prof = (PeerProfile)iter.next();\n                    if (matches.contains(prof.getPeer()) ||\n                    (exclude != null && exclude.contains(prof.getPeer())) ||\n                    _failingPeers.containsKey(prof.getPeer()))\n                        continue;\n                    else\n                        selected.add(prof.getPeer());\n                }\n            }\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Selecting all not failing found \" + (matches.size()-orig) + \" new peers: \" + selected);\n            matches.addAll(selected);\n        }\n        if (matches.size() < howMany)\n            selectFailingPeers(howMany, exclude, matches);\n        return;\n    }","id":64892,"modified_method":"/**\n     * Return a set of Hashes for peers that are not failing.\n     *\n     */\n    private void selectAllNotFailingPeers(int howMany, Set exclude, Set matches) {\n        if (matches.size() < howMany) {\n            int orig = matches.size();\n            int needed = howMany - orig;\n            List selected = new ArrayList(needed);\n            synchronized (_reorganizeLock) {\n                for (Iterator iter = _strictCapacityOrder.iterator(); selected.size() < needed && iter.hasNext(); ) {\n                    PeerProfile prof = (PeerProfile)iter.next();\n                    if (matches.contains(prof.getPeer()) ||\n                        (exclude != null && exclude.contains(prof.getPeer())) ||\n                        _failingPeers.containsKey(prof.getPeer()) ) {\n                        continue;\n                    } else {\n                        if (isOk(prof.getPeer()))\n                            selected.add(prof.getPeer());\n                    }\n                }\n            }\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Selecting all not failing found \" + (matches.size()-orig) + \" new peers: \" + selected);\n            matches.addAll(selected);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectAllNotFailing(\"+howMany+\"), not enough (\" + matches.size() + \") going on to failing\");\n            selectFailingPeers(howMany, exclude, matches);\n        } else {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectAllNotFailing(\"+howMany+\"), enough (\" + matches.size() + \")\");\n        }\n        return;\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Return a set of Hashes for peers that have a high capacity\n     *\n     */\n    public void selectHighCapacityPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            // we only use selectHighCapacityPeers when we are selecting for PURPOSE_TEST\n            // or we are falling back due to _fastPeers being too small, so we can always \n            // exclude the fast peers\n            if (exclude == null)\n                exclude = new HashSet(_fastPeers.keySet());\n            else\n                exclude.addAll(_fastPeers.keySet());\n            locked_selectPeers(_highCapacityPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany)\n            selectNotFailingPeers(howMany, exclude, matches);\n        return;\n    }","id":64893,"modified_method":"/**\n     * Return a set of Hashes for peers that have a high capacity\n     *\n     */\n    public void selectHighCapacityPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            // we only use selectHighCapacityPeers when we are selecting for PURPOSE_TEST\n            // or we are falling back due to _fastPeers being too small, so we can always \n            // exclude the fast peers\n            if (exclude == null)\n                exclude = new HashSet(_fastPeers.keySet());\n            else\n                exclude.addAll(_fastPeers.keySet());\n            locked_selectPeers(_highCapacityPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectHighCap(\"+howMany+\"), not enough fast (\" + matches.size() + \") going on to notFailing\");\n            selectNotFailingPeers(howMany, exclude, matches);\n        } else {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectHighCap(\"+howMany+\"), found enough highCap (\" + matches.size() + \")\");\n        }\n        return;\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Return a set of Hashes for peers that are well integrated into the network.\n     *\n     */\n    public void selectWellIntegratedPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            locked_selectPeers(_wellIntegratedPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany)\n            selectNotFailingPeers(howMany, exclude, matches);\n        return;\n    }","id":64894,"modified_method":"/**\n     * Return a set of Hashes for peers that are well integrated into the network.\n     *\n     */\n    public void selectWellIntegratedPeers(int howMany, Set exclude, Set matches) {\n        synchronized (_reorganizeLock) {\n            locked_selectPeers(_wellIntegratedPeers, howMany, exclude, matches);\n        }\n        if (matches.size() < howMany) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectWellIntegrated(\"+howMany+\"), not enough integrated (\" + matches.size() + \") going on to notFailing\");\n            selectNotFailingPeers(howMany, exclude, matches);\n        } else {            \n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"selectWellIntegrated(\"+howMany+\"), found enough well integrated (\" + matches.size() + \")\");\n        }\n        \n        return;\n    }","commit_id":"3e0b7bfeff2ae0a05ec53478c9580b677073c12c","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private void tldScanStream(InputStream resourceStream) throws IOException {\n        \n        InputSource source = new InputSource(resourceStream);\n        \n        synchronized (tldDigester) {\n            try {\n                tldDigester.push(this);\n                tldDigester.parse(source);\n            } catch (SAXException s) {\n                // Hack - makes exception handling simpler\n                throw new IOException(s);\n            } finally {\n                tldDigester.reset();\n                if (resourceStream != null) {\n                    try {\n                        resourceStream.close();\n                    } catch (Throwable t) {\n                        // do nothing\n                    }\n                }\n            }\n        }\n    }","id":64895,"modified_method":"private TldErrorHandler tldScanStream(InputStream resourceStream)\n            throws IOException {\n        \n        InputSource source = new InputSource(resourceStream);\n        \n        TldErrorHandler result = new TldErrorHandler();\n        \n        synchronized (tldDigester) {\n            try {\n                tldDigester.setErrorHandler(result);\n                tldDigester.push(this);\n                tldDigester.parse(source);\n            } catch (SAXException s) {\n                // Hack - makes exception handling simpler\n                throw new IOException(s);\n            } finally {\n                tldDigester.reset();\n                if (resourceStream != null) {\n                    try {\n                        resourceStream.close();\n                    } catch (Throwable t) {\n                        // do nothing\n                    }\n                }\n            }\n            return result;\n        }\n    }","commit_id":"c051983f829ada77c51611ddca2f4dd70b6ec463","url":"https://github.com/apache/tomcat"},{"original_method":"private void tldScanDir(File start) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.dirScan\", start.getAbsolutePath()));\n        }\n\n        File[] fileList = start.listFiles();\n        if (fileList != null) {\n            for (int i = 0; i < fileList.length; i++) {\n                // Scan recursively\n                if (fileList[i].isDirectory()) {\n                    tldScanDir(fileList[i]);\n                } else if (fileList[i].getAbsolutePath().endsWith(TLD_EXT)) {\n                    InputStream stream = null;\n                    try {\n                        stream = new FileInputStream(fileList[i]);\n                        tldScanStream(stream);\n                    } catch (IOException ioe) {\n                        log.warn(sm.getString(\"tldConfig.dirFail\",\n                                fileList[i].getAbsolutePath()),\n                                ioe);\n                    } finally {\n                        if (stream != null) {\n                            try {\n                                stream.close();\n                            } catch (Throwable t) {\n                                // do nothing\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","id":64896,"modified_method":"private void tldScanDir(File start) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.dirScan\", start.getAbsolutePath()));\n        }\n\n        File[] fileList = start.listFiles();\n        if (fileList != null) {\n            for (int i = 0; i < fileList.length; i++) {\n                // Scan recursively\n                if (fileList[i].isDirectory()) {\n                    tldScanDir(fileList[i]);\n                } else if (fileList[i].getAbsolutePath().endsWith(TLD_EXT)) {\n                    InputStream stream = null;\n                    try {\n                        stream = new FileInputStream(fileList[i]);\n                        TldErrorHandler handler = tldScanStream(stream);\n                        processErrorHandler(handler,\n                                fileList[i].getAbsolutePath());\n                    } catch (IOException ioe) {\n                        log.warn(sm.getString(\"tldConfig.dirFail\",\n                                fileList[i].getAbsolutePath()),\n                                ioe);\n                    } finally {\n                        if (stream != null) {\n                            try {\n                                stream.close();\n                            } catch (Throwable t) {\n                                // do nothing\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"c051983f829ada77c51611ddca2f4dd70b6ec463","url":"https://github.com/apache/tomcat"},{"original_method":"private void tldScanJar(JarURLConnection conn) throws IOException {\n\n        JarFile jarFile = null;\n        try {\n            conn.setUseCaches(false);\n            jarFile = conn.getJarFile();\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                String name = entry.getName();\n                if (!name.startsWith(\"META-INF/\")) continue;\n                if (!name.endsWith(\".tld\")) continue;\n                InputStream stream = jarFile.getInputStream(entry);\n                tldScanStream(stream);\n            }\n        } finally {\n            if (jarFile != null) {\n                try {\n                    jarFile.close();\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                }\n            }\n        }\n    }","id":64897,"modified_method":"private void tldScanJar(JarURLConnection conn) {\n\n        JarFile jarFile = null;\n        String name = null;\n        try {\n            conn.setUseCaches(false);\n            jarFile = conn.getJarFile();\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                name = entry.getName();\n                if (!name.startsWith(\"META-INF/\")) continue;\n                if (!name.endsWith(\".tld\")) continue;\n                InputStream stream = jarFile.getInputStream(entry);\n                TldErrorHandler handler = tldScanStream(stream);\n                processErrorHandler(handler, conn.getURL() + name);\n            }\n        } catch (IOException ioe) {\n            log.warn(sm.getString(\"tldConfig.jarFail\", conn.getURL() + name),\n                    ioe);\n        } finally {\n            if (jarFile != null) {\n                try {\n                    jarFile.close();\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                }\n            }\n        }\n    }","commit_id":"c051983f829ada77c51611ddca2f4dd70b6ec463","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Get the taglib entries from web.xml and add them to the map.\n     * \n     * This is not kept in sync with o.a.j.compiler.TldLocationsCache as this\n     * code needs to scan the TLDs listed in web.xml whereas Jasper only needs\n     * the URI to TLD mappings.\n     */\n    private void tldScanWebXml() {\n        \n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.webxmlStart\"));\n        }\n\n        Collection<TaglibDescriptor> descriptors =\n            context.getJspConfigDescriptor().getTaglibs();\n\n        for (TaglibDescriptor descriptor : descriptors) {\n            String resourcePath = descriptor.getTaglibLocation();\n            // Note: Whilst the Servlet 2.4 DTD implies that the location must\n            // be a context-relative path starting with '/', JSP.7.3.6.1 states\n            // explicitly how paths that do not start with '/' should be\n            // handled.\n            if (!resourcePath.startsWith(\"/\")) {\n                resourcePath = WEB_INF + resourcePath;\n            }\n            if (taglibUris.contains(descriptor.getTaglibURI())) {\n                log.warn(sm.getString(\"tldConfig.webxmlSkip\", resourcePath,\n                        descriptor.getTaglibURI()));\n            } else {\n                if (log.isTraceEnabled()) {\n                    log.trace(sm.getString(\"tldConfig.webxmlAdd\", resourcePath,\n                            descriptor.getTaglibURI()));\n                }\n                try {\n                    InputStream stream = context.getServletContext(\n                            ).getResourceAsStream(resourcePath);\n                    tldScanStream(stream);\n                    taglibUris.add(descriptor.getTaglibURI());\n                    webxmlTaglibUris.add(descriptor.getTaglibURI());\n                } catch (IOException ioe) {\n                    log.warn(sm.getString(\"tldConfig.webxmlFail\", resourcePath,\n                            descriptor.getTaglibURI()), ioe);\n                }\n            }\n        }\n    }","id":64898,"modified_method":"/**\n     * Get the taglib entries from web.xml and add them to the map.\n     * \n     * This is not kept in sync with o.a.j.compiler.TldLocationsCache as this\n     * code needs to scan the TLDs listed in web.xml whereas Jasper only needs\n     * the URI to TLD mappings.\n     */\n    private void tldScanWebXml() {\n        \n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.webxmlStart\"));\n        }\n\n        Collection<TaglibDescriptor> descriptors =\n            context.getJspConfigDescriptor().getTaglibs();\n\n        for (TaglibDescriptor descriptor : descriptors) {\n            String resourcePath = descriptor.getTaglibLocation();\n            // Note: Whilst the Servlet 2.4 DTD implies that the location must\n            // be a context-relative path starting with '/', JSP.7.3.6.1 states\n            // explicitly how paths that do not start with '/' should be\n            // handled.\n            if (!resourcePath.startsWith(\"/\")) {\n                resourcePath = WEB_INF + resourcePath;\n            }\n            if (taglibUris.contains(descriptor.getTaglibURI())) {\n                log.warn(sm.getString(\"tldConfig.webxmlSkip\", resourcePath,\n                        descriptor.getTaglibURI()));\n            } else {\n                if (log.isTraceEnabled()) {\n                    log.trace(sm.getString(\"tldConfig.webxmlAdd\", resourcePath,\n                            descriptor.getTaglibURI()));\n                }\n                try {\n                    InputStream stream = context.getServletContext(\n                            ).getResourceAsStream(resourcePath);\n                    TldErrorHandler handler = tldScanStream(stream);\n                    processErrorHandler(handler, resourcePath);\n                    taglibUris.add(descriptor.getTaglibURI());\n                    webxmlTaglibUris.add(descriptor.getTaglibURI());\n                } catch (IOException ioe) {\n                    log.warn(sm.getString(\"tldConfig.webxmlFail\", resourcePath,\n                            descriptor.getTaglibURI()), ioe);\n                }\n            }\n        }\n    }","commit_id":"c051983f829ada77c51611ddca2f4dd70b6ec463","url":"https://github.com/apache/tomcat"},{"original_method":"private void tldScanResourcePaths(String startPath) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.webinfScan\", startPath));\n        }\n\n        ServletContext ctxt = context.getServletContext();\n\n        Set<String> dirList = ctxt.getResourcePaths(startPath);\n        if (dirList != null) {\n            Iterator<String> it = dirList.iterator();\n            while (it.hasNext()) {\n                String path = it.next();\n                if (!path.endsWith(TLD_EXT)\n                        && (path.startsWith(WEB_INF_LIB)\n                                || path.startsWith(\"/WEB-INF/classes/\"))) {\n                    continue;\n                }\n                if (path.endsWith(TLD_EXT)) {\n                    if (path.startsWith(\"/WEB-INF/tags/\") &&\n                            !path.endsWith(\"implicit.tld\")) {\n                        continue;\n                    }\n                    InputStream stream = ctxt.getResourceAsStream(path);\n                    try {\n                        tldScanStream(stream);\n                    } catch (IOException ioe) {\n                        log.warn(sm.getString(\"tldConfig.webinfFail\", path),\n                                ioe);\n                    } finally {\n                        if (stream != null) {\n                            try {\n                                stream.close();\n                            } catch (Throwable t) {\n                                // do nothing\n                            }\n                        }\n                    }\n                } else {\n                    tldScanResourcePaths(path);\n                }\n            }\n        }\n    }","id":64899,"modified_method":"private void tldScanResourcePaths(String startPath) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"tldConfig.webinfScan\", startPath));\n        }\n\n        ServletContext ctxt = context.getServletContext();\n\n        Set<String> dirList = ctxt.getResourcePaths(startPath);\n        if (dirList != null) {\n            Iterator<String> it = dirList.iterator();\n            while (it.hasNext()) {\n                String path = it.next();\n                if (!path.endsWith(TLD_EXT)\n                        && (path.startsWith(WEB_INF_LIB)\n                                || path.startsWith(\"/WEB-INF/classes/\"))) {\n                    continue;\n                }\n                if (path.endsWith(TLD_EXT)) {\n                    if (path.startsWith(\"/WEB-INF/tags/\") &&\n                            !path.endsWith(\"implicit.tld\")) {\n                        continue;\n                    }\n                    InputStream stream = ctxt.getResourceAsStream(path);\n                    try {\n                        TldErrorHandler handler = tldScanStream(stream);\n                        processErrorHandler(handler, path);\n                    } catch (IOException ioe) {\n                        log.warn(sm.getString(\"tldConfig.webinfFail\", path),\n                                ioe);\n                    } finally {\n                        if (stream != null) {\n                            try {\n                                stream.close();\n                            } catch (Throwable t) {\n                                // do nothing\n                            }\n                        }\n                    }\n                } else {\n                    tldScanResourcePaths(path);\n                }\n            }\n        }\n    }","commit_id":"c051983f829ada77c51611ddca2f4dd70b6ec463","url":"https://github.com/apache/tomcat"},{"original_method":"protected StyledString getLabel(JvmExecutable executable) {\n\t\tif (executable instanceof JvmOperation) {\n\t\t\treturn new StyledString(uiStrings.signature(executable)).append(new StyledString(\" - Override method from \"\n\t\t\t\t\t+ notNull(((JvmOperation) executable).getDeclaringType().getSimpleName()),\n\t\t\t\t\tStyledString.QUALIFIER_STYLER));\n\t\t} else {\n\t\t\treturn new StyledString(\"Add constructor '\" + uiStrings.signature(executable) + \"'\");\n\t\t}\n\t}","id":64900,"modified_method":"protected StyledString getLabel(JvmExecutable executable) {\n\t\tif (executable instanceof JvmOperation) {\n\t\t\treturn new StyledString(uiStrings.signature(executable)).append(new StyledString(\" - Override method from \"\n\t\t\t\t\t+ notNull(((JvmOperation) executable).getDeclaringType().getSimpleName()),\n\t\t\t\t\tStyledString.QUALIFIER_STYLER));\n\t\t} else {\n\t\t\treturn new StyledString(\"Add constructor 'new\" + uiStrings.parameters(executable) + \"'\");\n\t\t}\n\t}","commit_id":"508ecfefb14b5452bed3e6d9b53f297a25af70e9","url":"https://github.com/eclipse/xtext"},{"original_method":"protected ICompletionProposal createOverrideMethodProposal(XtendClass model, JvmExecutable overridden,\n\t\t\tContentAssistContext context, IProposalConflictHelper conflictHelper) {\n\t\tReplacingAppendable appendable = appendableFactory.get(context.getDocument(), model, context.getReplaceRegion()\n\t\t\t\t.getOffset(), context.getReplaceRegion().getLength(), true);\n\t\tif (overridden instanceof JvmOperation)\n\t\t\timplementor.appendOverrideFunction(model, (JvmOperation) overridden, appendable);\n\t\telse\n\t\t\timplementor.appendConstructorFromSuper(model, (JvmConstructor) overridden, appendable);\n\t\tString code = appendable.toString();\n\t\tif (!isValidProposal(code.trim(), context, conflictHelper) && !isValidProposal(overridden.getSimpleName(), context, conflictHelper))\n\t\t\treturn null;\n\t\tImportOrganizingProposal completionProposal = createCompletionProposal(appendable, context.getReplaceRegion(),\n\t\t\t\tgetLabel(overridden), images.forFunction(overridden.getVisibility(), false));\n\t\tint bodyOffset = code.lastIndexOf(MemberFromSuperImplementor.DEFAULT_BODY);\n\t\tcompletionProposal.setSelectionStart(bodyOffset + completionProposal.getReplacementOffset());\n\t\tcompletionProposal.setSelectionLength(MemberFromSuperImplementor.DEFAULT_BODY.length());\n\t\tcompletionProposal.setPriority(getPriority(model, overridden, context));\n\t\treturn completionProposal;\n\t}","id":64901,"modified_method":"protected ICompletionProposal createOverrideMethodProposal(XtendClass model, JvmExecutable overridden,\n\t\t\tContentAssistContext context, IProposalConflictHelper conflictHelper) {\n\t\tReplacingAppendable appendable = appendableFactory.get(context.getDocument(), model, context.getReplaceRegion()\n\t\t\t\t.getOffset(), context.getReplaceRegion().getLength(), 1, true);\n\t\tif (overridden instanceof JvmOperation)\n\t\t\timplementor.appendOverrideFunction(model, (JvmOperation) overridden, appendable);\n\t\telse\n\t\t\timplementor.appendConstructorFromSuper(model, (JvmConstructor) overridden, appendable);\n\t\tString code = appendable.toString();\n\t\tif (!isValidProposal(code.trim(), context, conflictHelper)\n\t\t\t\t&& !isValidProposal(overridden.getSimpleName(), context, conflictHelper))\n\t\t\treturn null;\n\t\tImportOrganizingProposal completionProposal = createCompletionProposal(appendable, context.getReplaceRegion(),\n\t\t\t\tgetLabel(overridden), images.forFunction(overridden.getVisibility(), false));\n\t\tMatcher matcher = bodyExpressionPattern.matcher(code);\n\t\tif (matcher.find()) {\n\t\t\tint bodyExpressionLength = matcher.end(1) - matcher.start(1);\n\t\t\tif (bodyExpressionLength == 0) {\n\t\t\t\tcompletionProposal.setCursorPosition(matcher.start(1));\n\t\t\t} else {\n\t\t\t\tcompletionProposal.setSelectionStart(completionProposal.getReplacementOffset() + matcher.start(1));\n\t\t\t\tcompletionProposal.setSelectionLength(bodyExpressionLength);\n\t\t\t}\n\t\t}\n\t\tcompletionProposal.setPriority(getPriority(model, overridden, context));\n\t\treturn completionProposal;\n\t}","commit_id":"508ecfefb14b5452bed3e6d9b53f297a25af70e9","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setPossibleItems(Collection<String> elems) {\n\t\tDefaultComboBoxModel model = (DefaultComboBoxModel)this.getModel();\n\t\tObject oldValue = this.getEditor().getItem();\n\t\tmodel.removeAllElements();\n\t\tfor (String elem : elems) model.addElement(elem);\n\t\tthis.getEditor().setItem(oldValue);\n\t\tthis.getEditor().selectAll();\n\t}","id":64902,"modified_method":"public void setPossibleItems(Collection<String> elems) {\n\t\tDefaultComboBoxModel model = (DefaultComboBoxModel)this.getModel();\n\t\tObject oldValue = this.getEditor().getItem();\n\t\tmodel.removeAllElements();\n\t\tfor (String elem : elems) model.addElement(elem);\n\t\tthis.getEditor().setItem(oldValue);\n\t}","commit_id":"b112859799a7a549330684c51f77323ad625badf","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {\n\t\t\tif(selecting || (offs == 0 && str.equals(getText(0, getLength()))))\n\t\t\t\treturn;\n\t\t\tsuper.insertString(offs, str, a);\n\n\t\t\t// return immediately when selecting an item\n\t\t\t// Note: this is done after calling super method because we need\n\t\t\t// ActionListener informed\n\t\t\tif (selecting)\n\t\t\t\treturn;\n\n\t\t\tint size = getLength();\n\t\t\tString curText = getText(0, size);\n\t\t\t// lookup and select a matching item\n\t\t\tObject item = lookupItem(curText);\n\t\t\tif (item != null) {\n\t\t\t\tString newText = item.toString();\n\t\t\t\tif(!newText.equals(curText))\n\t\t\t\t{\n\t\t\t\t\tselecting = true;\n\t\t\t\t\tsuper.remove(0, size);\n\t\t\t\t\tsuper.insertString(0, newText, a);\n\t\t\t\t\tselecting = false;\n\t\t\t\t\tJTextComponent editor = (JTextComponent)comboBox.getEditor().getEditorComponent();\n\t\t\t\t\teditor.setSelectionStart(size);\n\t\t\t\t\teditor.setSelectionEnd(getLength());\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetSelectedItem(item);\n\t\t}","id":64903,"modified_method":"@Override public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {\n\t\t\tif(selecting || (offs == 0 && str.equals(getText(0, getLength()))))\n\t\t\t\treturn;\n\t\t\tboolean initial = (offs == 0 && getLength() == 0);\n\t\t\tsuper.insertString(offs, str, a);\n\n\t\t\t// return immediately when selecting an item\n\t\t\t// Note: this is done after calling super method because we need\n\t\t\t// ActionListener informed\n\t\t\tif (selecting)\n\t\t\t\treturn;\n\n\t\t\tint size = getLength();\n\t\t\tint start = offs+str.length();\n\t\t\tint end = start;\n\t\t\tString curText = getText(0, size);\n\t\t\t// lookup and select a matching item\n\t\t\tObject item = lookupItem(curText);\n\t\t\tsetSelectedItem(item);\n\t\t\tif(initial)\n\t\t\t\tstart = 0;\n\t\t\tif (item != null) {\n\t\t\t\tString newText = item.toString();\n\t\t\t\tif(!newText.equals(curText))\n\t\t\t\t{\n\t\t\t\t\tselecting = true;\n\t\t\t\t\tsuper.remove(0, size);\n\t\t\t\t\tsuper.insertString(0, newText, a);\n\t\t\t\t\tselecting = false;\n\t\t\t\t\tstart = size;\n\t\t\t\t\tend = getLength();\n\t\t\t\t}\n\t\t\t}\n\t\t\tJTextComponent editor = (JTextComponent)comboBox.getEditor().getEditorComponent();\n\t\t\teditor.setSelectionStart(start);\n\t\t\teditor.setSelectionEnd(end);\n\t\t}","commit_id":"b112859799a7a549330684c51f77323ad625badf","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected ICompletionProposal createOverrideMethodProposal(XtendClass model, JvmExecutable overridden,\n\t\t\tContentAssistContext context, IProposalConflictHelper conflictHelper) {\n\t\tReplacingAppendable appendable = appendableFactory.get(context.getDocument(), model, context.getReplaceRegion()\n\t\t\t\t.getOffset(), context.getReplaceRegion().getLength(), true);\n\t\tif (overridden instanceof JvmOperation)\n\t\t\timplementor.appendOverrideFunction(model, (JvmOperation) overridden, appendable);\n\t\telse\n\t\t\timplementor.appendConstructorFromSuper(model, (JvmConstructor) overridden, appendable);\n\t\tString code = appendable.toString();\n\t\tif (!isValidProposal(code.trim(), context, conflictHelper) && !isValidProposal(overridden.getSimpleName(), context, conflictHelper))\n\t\t\treturn null;\n\t\tImportOrganizingProposal completionProposal = createCompletionProposal(appendable, context.getReplaceRegion(),\n\t\t\t\tgetLabel(overridden), images.forFunction(overridden.getVisibility(), false));\n\t\tint bodyOffset = code.lastIndexOf(MemberFromSuperImplementor.DEFAULT_BODY);\n\t\tcompletionProposal.setSelectionStart(bodyOffset + completionProposal.getReplacementOffset());\n\t\tcompletionProposal.setSelectionLength(MemberFromSuperImplementor.DEFAULT_BODY.length());\n\t\tcompletionProposal.setPriority(getPriority(model, overridden, context));\n\t\treturn completionProposal;\n\t}","id":64904,"modified_method":"protected ICompletionProposal createOverrideMethodProposal(XtendClass model, JvmExecutable overridden,\n\t\t\tContentAssistContext context, IProposalConflictHelper conflictHelper) {\n\t\tReplacingAppendable appendable = appendableFactory.get(context.getDocument(), model, context.getReplaceRegion()\n\t\t\t\t.getOffset(), context.getReplaceRegion().getLength(), 1, true);\n\t\tif (overridden instanceof JvmOperation)\n\t\t\timplementor.appendOverrideFunction(model, (JvmOperation) overridden, appendable);\n\t\telse\n\t\t\timplementor.appendConstructorFromSuper(model, (JvmConstructor) overridden, appendable);\n\t\tString code = appendable.toString();\n\t\tif (!isValidProposal(code.trim(), context, conflictHelper)\n\t\t\t\t&& !isValidProposal(overridden.getSimpleName(), context, conflictHelper))\n\t\t\treturn null;\n\t\tImportOrganizingProposal completionProposal = createCompletionProposal(appendable, context.getReplaceRegion(),\n\t\t\t\tgetLabel(overridden), images.forFunction(overridden.getVisibility(), false));\n\t\tMatcher matcher = bodyExpressionPattern.matcher(code);\n\t\tif (matcher.find()) {\n\t\t\tint bodyExpressionLength = matcher.end(1) - matcher.start(1);\n\t\t\tif (bodyExpressionLength == 0) {\n\t\t\t\tcompletionProposal.setCursorPosition(matcher.start(1));\n\t\t\t} else {\n\t\t\t\tcompletionProposal.setSelectionStart(completionProposal.getReplacementOffset() + matcher.start(1));\n\t\t\t\tcompletionProposal.setSelectionLength(bodyExpressionLength);\n\t\t\t}\n\t\t}\n\t\tcompletionProposal.setPriority(getPriority(model, overridden, context));\n\t\treturn completionProposal;\n\t}","commit_id":"8f9c16d06e8a970e5f5383581ac1accb2cf13bd5","url":"https://github.com/eclipse/xtext"},{"original_method":"protected StyledString getLabel(JvmExecutable executable) {\n\t\tif (executable instanceof JvmOperation) {\n\t\t\treturn new StyledString(uiStrings.signature(executable)).append(new StyledString(\" - Override method from \"\n\t\t\t\t\t+ notNull(((JvmOperation) executable).getDeclaringType().getSimpleName()),\n\t\t\t\t\tStyledString.QUALIFIER_STYLER));\n\t\t} else {\n\t\t\treturn new StyledString(\"Add constructor '\" + uiStrings.signature(executable) + \"'\");\n\t\t}\n\t}","id":64905,"modified_method":"protected StyledString getLabel(JvmExecutable executable) {\n\t\tif (executable instanceof JvmOperation) {\n\t\t\treturn new StyledString(uiStrings.signature(executable)).append(new StyledString(\" - Override method from \"\n\t\t\t\t\t+ notNull(((JvmOperation) executable).getDeclaringType().getSimpleName()),\n\t\t\t\t\tStyledString.QUALIFIER_STYLER));\n\t\t} else {\n\t\t\treturn new StyledString(\"Add constructor 'new\" + uiStrings.parameters(executable) + \"'\");\n\t\t}\n\t}","commit_id":"8f9c16d06e8a970e5f5383581ac1accb2cf13bd5","url":"https://github.com/eclipse/xtext"},{"original_method":"@Restrict(\"#{projectIterationFilesAction.documentUploadAllowed}\")\n   public String uploadDocumentFile()\n   {\n      try\n      {\n         Resource doc = this.translationFileServiceImpl.parseDocumentFile(this.documentFileUpload.getFileContents(),\n              this.documentFileUpload.getDocumentPath(), this.documentFileUpload.getFileName());\n\n         doc.setLang( new LocaleId(this.documentFileUpload.getSourceLang()) );\n\n         // TODO Copy Trans values\n         // Extensions are hard-coded to GetText, since it is the only supported format at the time\n         this.documentServiceImpl.saveDocument(this.projectSlug, this.iterationSlug,\n               doc, new StringSet(ExtensionType.GetText.toString()),\n               false);\n\n         FacesMessages.instance().add(Severity.INFO, \"Document file {0} uploaded.\", this.documentFileUpload.getFileName());\n      }\n      catch (ZanataServiceException zex)\n      {\n         FacesMessages.instance().add(Severity.ERROR, zex.getMessage(), this.documentFileUpload.getFileName());\n      }\n      catch (InvalidStateException isex)\n      {\n         FacesMessages.instance().add(Severity.ERROR, \"Invalid arguments\");\n      }\n\n      // NB This needs to be done as for some reason seam is losing the parameters when redirecting\n      // This is efectively the same as returning void\n      return FacesContext.getCurrentInstance().getViewRoot().getViewId();\n   }","id":64906,"modified_method":"@Restrict(\"#{projectIterationFilesAction.documentUploadAllowed}\")\n   public String uploadDocumentFile()\n   {\n      InputStream fileContents = this.documentFileUpload.getFileContents();\n\n      if (translationFileServiceImpl.hasAdapterFor(documentFileUpload.getFileName()))\n      {\n         translationFileServiceImpl.persistDocument(fileContents, projectSlug, iterationSlug, documentFileUpload.getDocumentPath(), documentFileUpload.getFileName());\n         fileContents = translationFileServiceImpl.streamDocument(projectSlug, iterationSlug, documentFileUpload.getDocumentPath(), documentFileUpload.getFileName());\n      }\n\n      try\n      {\n         Resource doc = this.translationFileServiceImpl.parseDocumentFile(fileContents,\n              this.documentFileUpload.getDocumentPath(), this.documentFileUpload.getFileName());\n\n         doc.setLang( new LocaleId(this.documentFileUpload.getSourceLang()) );\n\n         // Temporary solution to hard-coded GetText extensions.\n         Set<String> extensions;\n         if (this.documentFileUpload.getFileName().endsWith(\".pot\"))\n         {\n            extensions = new StringSet(ExtensionType.GetText.toString());\n         }\n         else\n         {\n            extensions = Collections.<String>emptySet();\n         }\n\n         // TODO Copy Trans values\n         this.documentServiceImpl.saveDocument(this.projectSlug, this.iterationSlug,\n               doc, extensions,\n               false);\n\n         FacesMessages.instance().add(Severity.INFO, \"Document file {0} uploaded.\", this.documentFileUpload.getFileName());\n      }\n      catch (ZanataServiceException zex)\n      {\n         FacesMessages.instance().add(Severity.ERROR, zex.getMessage(), this.documentFileUpload.getFileName());\n      }\n      catch (InvalidStateException isex)\n      {\n         FacesMessages.instance().add(Severity.ERROR, \"Invalid arguments\");\n      }\n\n      // TODO if Resource (document) can't be saved properly, remove the persisted file.\n\n      // NB This needs to be done as for some reason seam is losing the parameters when redirecting\n      // This is efectively the same as returning void\n      return FacesContext.getCurrentInstance().getViewRoot().getViewId();\n   }","commit_id":"805c1b9fd3846fb7458066b3443d3872865a5c7f","url":"https://github.com/zanata/zanata-server"},{"original_method":"private Resource parsePotFile( InputStream fileContents, String docPath, String fileName )\n   {\n      PoReader2 poReader = new PoReader2();\n      // assume english as source locale\n      Resource res = poReader.extractTemplate(new InputSource(fileContents), new LocaleId(\"en\"), fileName);\n      // trim extra spaces\n      docPath = docPath.trim();\n      // get rid of leading slashes (\"/\")\n      while( docPath.startsWith(\"/\") )\n      {\n         docPath = docPath.substring(1);\n      }\n      // Add a trailing slash (\"/\") if there isn't one, and there is a need for one\n      if( docPath.length() > 0 && !docPath.endsWith(\"/\") )\n      {\n         docPath = docPath.concat(\"/\");\n      }\n\n      res.setName( docPath + fileName );\n      return res;\n   }","id":64907,"modified_method":"private Resource parsePotFile( InputStream fileContents, String docPath, String fileName )\n   {\n      PoReader2 poReader = new PoReader2();\n      // assume english as source locale\n      Resource res = poReader.extractTemplate(new InputSource(fileContents), new LocaleId(\"en\"), fileName);\n      docPath = convertToValidPath(docPath);\n\n      res.setName( docPath + fileName );\n      return res;\n   }","commit_id":"805c1b9fd3846fb7458066b3443d3872865a5c7f","url":"https://github.com/zanata/zanata-server"},{"original_method":"public Resource parseDocumentFile(InputStream fileContents, String path, String fileName)\n   {\n      if( fileName.endsWith(\".pot\") )\n      {\n         // remove the .pot extension\n         fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n\n         try\n         {\n            return this.parsePotFile(fileContents, path, fileName);\n         }\n         catch (Exception e)\n         {\n            throw new ZanataServiceException(\"Invalid POT file contents on file: \" + fileName);\n         }\n      }\n      else\n      {\n         throw new ZanataServiceException(\"Unsupported Document file: \" + fileName);\n      }\n   }","id":64908,"modified_method":"public Resource parseDocumentFile(InputStream fileContents, String path, String fileName)\n   {\n      if( fileName.endsWith(\".pot\") )\n      {\n         // remove the .pot extension\n         fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n\n         try\n         {\n            return this.parsePotFile(fileContents, path, fileName);\n         }\n         catch (Exception e)\n         {\n            throw new ZanataServiceException(\"Invalid POT file contents on file: \" + fileName);\n         }\n      }\n      else if (hasAdapterFor(fileName))\n      {\n         FileFormatAdapter adapter = getAdapterFor(fileName);\n         Resource doc = adapter.parseDocumentFile(fileContents, new LocaleId(\"en\"));\n\n         path = convertToValidPath(path);\n         doc.setName(path + fileName);\n         return doc;\n      }\n      else\n      {\n         throw new ZanataServiceException(\"Unsupported Document file: \" + fileName);\n      }\n   }","commit_id":"805c1b9fd3846fb7458066b3443d3872865a5c7f","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n    public DocumentReference importExtension(String extensionId, ExtensionRepository repository, Type type)\n        throws QueryException, XWikiException, ResolveException\n    {\n        Map<Version, String> versions = new TreeMap<Version, String>();\n\n        Version lastVersion = getVersions(extensionId, repository, type, versions);\n\n        if (lastVersion == null) {\n            throw new ResolveException(\"Can't find any version for the extension [\" + extensionId + \"] on repository [\"\n                + repository + \"]\");\n        } else if (versions.isEmpty()) {\n            versions.put(lastVersion, extensionId);\n        }\n\n        Extension extension = repository.resolve(new ExtensionId(extensionId, lastVersion));\n\n        // Get former ids versions\n        Collection<String> features = extension.getFeatures();\n\n        for (String feature : features) {\n            try {\n                getVersions(feature, repository, type, versions);\n            } catch (ResolveException e) {\n                // Ignore\n            }\n        }\n\n        XWikiContext xcontext = getXWikiContext();\n\n        boolean needSave = false;\n\n        XWikiDocument document = getExistingExtensionDocumentById(extensionId);\n\n        if (document == null) {\n            // Create document\n            document =\n                xcontext.getWiki().getDocument(\n                    new DocumentReference(xcontext.getDatabase(), \"Extension\", extension.getName()), xcontext);\n\n            for (int i = 1; !document.isNew(); ++i) {\n                document =\n                    xcontext.getWiki().getDocument(\n                        new DocumentReference(xcontext.getDatabase(), \"Extension\", extension.getName() + ' ' + i),\n                        xcontext);\n            }\n\n            XWikiDocument template =\n                xcontext.getWiki().getDocument(\n                    this.currentResolver.resolve(XWikiRepositoryModel.EXTENSION_TEMPLATEREFERENCE), xcontext);\n\n            if (!template.isNew()) {\n                document.apply(template);\n            }\n\n            needSave = true;\n        }\n\n        // Update document\n\n        BaseObject extensionObject = document.getXObject(XWikiRepositoryModel.EXTENSION_CLASSREFERENCE);\n        if (extensionObject == null) {\n            extensionObject = document.newXObject(XWikiRepositoryModel.EXTENSION_CLASSREFERENCE, xcontext);\n            needSave = true;\n        }\n\n        if (!StringUtils.equals(extensionId,\n            getValue(extensionObject, XWikiRepositoryModel.PROP_EXTENSION_ID, (String) null))) {\n            extensionObject.set(XWikiRepositoryModel.PROP_EXTENSION_ID, extensionId, xcontext);\n            needSave = true;\n        }\n\n        // Update extension informations\n\n        needSave |= updateExtension(extension, extensionObject, xcontext);\n\n        // Remove unexisting version\n\n        List<BaseObject> versionObjects = document.getXObjects(XWikiRepositoryModel.EXTENSIONVERSION_CLASSREFERENCE);\n        if (versionObjects != null) {\n            for (BaseObject versionObject : versionObjects) {\n                if (versionObject != null) {\n                    String version = getValue(versionObject, XWikiRepositoryModel.PROP_VERSION_VERSION);\n\n                    if (version == null || !versions.containsKey(new DefaultVersion(version))) {\n                        document.removeXObject(versionObject);\n                        needSave = true;\n                    }\n                }\n            }\n        }\n        List<BaseObject> dependencyObjects =\n            document.getXObjects(XWikiRepositoryModel.EXTENSIONDEPENDENCY_CLASSREFERENCE);\n        if (dependencyObjects != null) {\n            for (BaseObject dependencyObject : dependencyObjects) {\n                if (dependencyObject != null) {\n                    String version = getValue(dependencyObject, XWikiRepositoryModel.PROP_DEPENDENCY_EXTENSIONVERSION);\n\n                    if (version == null || !versions.containsKey(new DefaultVersion(version))) {\n                        document.removeXObject(dependencyObject);\n                        needSave = true;\n                    }\n                }\n            }\n        }\n\n        // Update versions\n\n        for (Map.Entry<Version, String> entry : versions.entrySet()) {\n            Version version = entry.getKey();\n            String id = entry.getValue();\n\n            try {\n                Extension versionExtension;\n                if (version.equals(extension.getId().getVersion())) {\n                    versionExtension = extension;\n                } else {\n                    versionExtension = repository.resolve(new ExtensionId(id, version));\n                }\n\n                // Update version related informations\n                needSave |= updateExtensionVersion(document, versionExtension);\n            } catch (Exception e) {\n                this.logger.error(\"Failed to resolve extension with id [\" + id + \"] and version [\" + version\n                    + \"] on repository [\" + repository + \"]\", e);\n            }\n        }\n\n        // Proxy marker\n\n        BaseObject extensionProxyObject = document.getXObject(XWikiRepositoryModel.EXTENSIONPROXY_CLASSREFERENCE);\n        if (extensionProxyObject == null) {\n            extensionProxyObject = document.newXObject(XWikiRepositoryModel.EXTENSIONPROXY_CLASSREFERENCE, xcontext);\n            needSave = true;\n        }\n\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYID, repository.getId().getId());\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYTYPE, repository.getId().getType());\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYURI, repository.getId().getURI()\n                .toString());\n\n        if (needSave) {\n            xcontext.getWiki()\n                .saveDocument(document,\n                    \"Imported extension [\" + extensionId + \"] from repository [\" + repository.getId() + \"]\", true,\n                    xcontext);\n        }\n\n        return document.getDocumentReference();\n    }","id":64909,"modified_method":"@Override\n    public DocumentReference importExtension(String extensionId, ExtensionRepository repository, Type type)\n        throws QueryException, XWikiException, ResolveException\n    {\n        Map<Version, String> versions = new TreeMap<Version, String>();\n\n        Version lastVersion = getVersions(extensionId, repository, type, versions);\n\n        if (lastVersion == null) {\n            throw new ResolveException(\"Can't find any version for the extension [\" + extensionId + \"] on repository [\"\n                + repository + \"]\");\n        } else if (versions.isEmpty()) {\n            versions.put(lastVersion, extensionId);\n        }\n\n        Extension extension = repository.resolve(new ExtensionId(extensionId, lastVersion));\n\n        // Get former ids versions\n        Collection<String> features = extension.getFeatures();\n\n        for (String feature : features) {\n            try {\n                getVersions(feature, repository, type, versions);\n            } catch (ResolveException e) {\n                // Ignore\n            }\n        }\n\n        XWikiContext xcontext = getXWikiContext();\n\n        boolean needSave = false;\n\n        XWikiDocument document = getExistingExtensionDocumentById(extensionId);\n\n        if (document == null) {\n            // Create document\n            document =\n                xcontext.getWiki().getDocument(\n                    new DocumentReference(xcontext.getDatabase(), \"Extension\", extension.getName()), xcontext);\n\n            for (int i = 1; !document.isNew(); ++i) {\n                document =\n                    xcontext.getWiki().getDocument(\n                        new DocumentReference(xcontext.getDatabase(), \"Extension\", extension.getName() + ' ' + i),\n                        xcontext);\n            }\n\n            XWikiDocument template =\n                xcontext.getWiki().getDocument(\n                    this.currentResolver.resolve(XWikiRepositoryModel.EXTENSION_TEMPLATEREFERENCE), xcontext);\n\n            if (!template.isNew()) {\n                document.apply(template);\n            }\n\n            needSave = true;\n        }\n\n        // Update document\n\n        BaseObject extensionObject = document.getXObject(XWikiRepositoryModel.EXTENSION_CLASSREFERENCE);\n        if (extensionObject == null) {\n            extensionObject = document.newXObject(XWikiRepositoryModel.EXTENSION_CLASSREFERENCE, xcontext);\n            needSave = true;\n        }\n\n        if (!StringUtils.equals(extensionId,\n            getValue(extensionObject, XWikiRepositoryModel.PROP_EXTENSION_ID, (String) null))) {\n            extensionObject.set(XWikiRepositoryModel.PROP_EXTENSION_ID, extensionId, xcontext);\n            needSave = true;\n        }\n\n        // Update extension informations\n\n        needSave |= updateExtension(extension, extensionObject, xcontext);\n\n        // Remove unexisting version\n\n        List<BaseObject> versionObjects = document.getXObjects(XWikiRepositoryModel.EXTENSIONVERSION_CLASSREFERENCE);\n        if (versionObjects != null) {\n            for (BaseObject versionObject : versionObjects) {\n                if (versionObject != null) {\n                    String version = getValue(versionObject, XWikiRepositoryModel.PROP_VERSION_VERSION);\n\n                    if (version == null || !versions.containsKey(new DefaultVersion(version))) {\n                        document.removeXObject(versionObject);\n                        needSave = true;\n                    }\n                }\n            }\n        }\n        List<BaseObject> dependencyObjects =\n            document.getXObjects(XWikiRepositoryModel.EXTENSIONDEPENDENCY_CLASSREFERENCE);\n        if (dependencyObjects != null) {\n            for (BaseObject dependencyObject : dependencyObjects) {\n                if (dependencyObject != null) {\n                    String version = getValue(dependencyObject, XWikiRepositoryModel.PROP_DEPENDENCY_EXTENSIONVERSION);\n\n                    if (version == null || !versions.containsKey(new DefaultVersion(version))) {\n                        document.removeXObject(dependencyObject);\n                        needSave = true;\n                    }\n                }\n            }\n        }\n\n        // Update versions\n\n        for (Map.Entry<Version, String> entry : versions.entrySet()) {\n            Version version = entry.getKey();\n            String id = entry.getValue();\n\n            try {\n                Extension versionExtension;\n                if (version.equals(extension.getId().getVersion())) {\n                    versionExtension = extension;\n                } else {\n                    versionExtension = repository.resolve(new ExtensionId(id, version));\n                }\n\n                // Update version related informations\n                needSave |= updateExtensionVersion(document, versionExtension);\n            } catch (Exception e) {\n                this.logger.error(\"Failed to resolve extension with id [\" + id + \"] and version [\" + version\n                    + \"] on repository [\" + repository + \"]\", e);\n            }\n        }\n\n        // Proxy marker\n\n        BaseObject extensionProxyObject = document.getXObject(XWikiRepositoryModel.EXTENSIONPROXY_CLASSREFERENCE);\n        if (extensionProxyObject == null) {\n            extensionProxyObject = document.newXObject(XWikiRepositoryModel.EXTENSIONPROXY_CLASSREFERENCE, xcontext);\n            needSave = true;\n        }\n\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYID, repository.getId().getId());\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYTYPE, repository.getId().getType());\n        needSave |=\n            update(extensionProxyObject, XWikiRepositoryModel.PROP_PROXY_REPOSITORYURI, repository.getId().getURI()\n                .toString());\n\n        if (needSave) {\n            document.setAuthorReference(xcontext.getUserReference());\n            if (document.isNew()) {\n                document.setContentAuthorReference(xcontext.getUserReference());\n                document.setCreatorReference(xcontext.getUserReference());\n            }\n\n            xcontext.getWiki()\n                .saveDocument(document,\n                    \"Imported extension [\" + extensionId + \"] from repository [\" + repository.getId() + \"]\", true,\n                    xcontext);\n        }\n\n        return document.getDocumentReference();\n    }","commit_id":"2abdbb59cf775d372d7c0e01737bc92f6e830bd1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected ExecutionContext getExecutionContext() throws ComponentLookupException\n    {\n        return this.componentManager.lookup(Execution.class).getContext();\n    }","id":64910,"modified_method":"protected ExecutionContext getExecutionContext() throws ComponentLookupException\n    {\n        return getComponentManager().lookup(Execution.class).getContext();\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.extension.xar.internal.handler.packager.Packager#getEntries(java.io.File)\n     */\n    public List<XarEntry> getEntries(File xarFile) throws IOException\n    {\n        List<XarEntry> documents = null;\n\n        FileInputStream fis = new FileInputStream(xarFile);\n        ZipInputStream zis = new ZipInputStream(fis);\n\n        try {\n            for (ZipEntry zipEntry = zis.getNextEntry(); zipEntry != null; zipEntry = zis.getNextEntry()) {\n                if (!zipEntry.isDirectory()) {\n                    try {\n                        XarPageLimitedHandler documentHandler = new XarPageLimitedHandler(this.componentManager);\n\n                        parseDocument(zis, documentHandler);\n\n                        if (documents == null) {\n                            documents = new ArrayList<XarEntry>();\n                        }\n\n                        XarEntry xarEntry = documentHandler.getXarEntry();\n                        xarEntry.setZipEntry(zipEntry);\n\n                        documents.add(xarEntry);\n                    } catch (NotADocumentException e) {\n                        // Impossible to know that before parsing\n                    } catch (Exception e) {\n                        this.logger.error(\"Failed to parse document [\" + zipEntry.getName() + \"]\", e);\n                    }\n                }\n            }\n        } finally {\n            zis.close();\n        }\n\n        return documents != null ? documents : Collections.<XarEntry> emptyList();\n    }","id":64911,"modified_method":"@Override\n    public List<XarEntry> getEntries(File xarFile) throws IOException\n    {\n        List<XarEntry> documents = null;\n\n        FileInputStream fis = new FileInputStream(xarFile);\n        ZipInputStream zis = new ZipInputStream(fis);\n\n        try {\n            for (ZipEntry zipEntry = zis.getNextEntry(); zipEntry != null; zipEntry = zis.getNextEntry()) {\n                if (!zipEntry.isDirectory()) {\n                    try {\n                        XarPageLimitedHandler documentHandler = new XarPageLimitedHandler(this.componentManager);\n\n                        parseDocument(zis, documentHandler);\n\n                        if (documents == null) {\n                            documents = new ArrayList<XarEntry>();\n                        }\n\n                        XarEntry xarEntry = documentHandler.getXarEntry();\n                        xarEntry.setZipEntry(zipEntry);\n\n                        documents.add(xarEntry);\n                    } catch (NotADocumentException e) {\n                        // Impossible to know that before parsing\n                    } catch (Exception e) {\n                        this.logger.error(\"Failed to parse document [\" + zipEntry.getName() + \"]\", e);\n                    }\n                }\n            }\n        } finally {\n            zis.close();\n        }\n\n        return documents != null ? documents : Collections.<XarEntry> emptyList();\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.extension.xar.internal.handler.packager.Packager#unimportXAR(java.io.File, java.lang.String)\n     */\n    public void unimportXAR(File xarFile, String wiki) throws IOException, XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    unimportXARFromWiki(xarFile, context.getMainXWiki());\n                }\n\n                for (String subwiki : wikis) {\n                    unimportXARFromWiki(xarFile, subwiki);\n                }\n            } else {\n                unimportXARFromWiki(xarFile, context.getMainXWiki());\n            }\n        } else {\n            unimportXARFromWiki(xarFile, wiki);\n        }\n    }","id":64912,"modified_method":"@Override\n    public void unimportXAR(File xarFile, String wiki) throws IOException, XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    unimportXARFromWiki(xarFile, context.getMainXWiki());\n                }\n\n                for (String subwiki : wikis) {\n                    unimportXARFromWiki(xarFile, subwiki);\n                }\n            } else {\n                unimportXARFromWiki(xarFile, context.getMainXWiki());\n            }\n        } else {\n            unimportXARFromWiki(xarFile, wiki);\n        }\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.extension.xar.internal.handler.packager.Packager#importXAR(org.xwiki.extension.xar.internal.handler.packager.XarFile,\n     *      java.io.File, java.lang.String, com.xpn.xwiki.doc.merge.MergeConfiguration)\n     */\n    public void importXAR(XarFile previousXarFile, File xarFile, String wiki, MergeConfiguration mergeConfiguration)\n        throws IOException, XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    importXARToWiki(previousXarFile, xarFile, context.getMainXWiki(), mergeConfiguration);\n                }\n\n                for (String subwiki : wikis) {\n                    importXARToWiki(previousXarFile, xarFile, subwiki, mergeConfiguration);\n                }\n            } else {\n                importXARToWiki(previousXarFile, xarFile, context.getMainXWiki(), mergeConfiguration);\n            }\n        } else {\n            importXARToWiki(previousXarFile, xarFile, wiki, mergeConfiguration);\n        }\n    }","id":64913,"modified_method":"@Override\n    public void importXAR(XarFile previousXarFile, File xarFile, String wiki, MergeConfiguration mergeConfiguration)\n        throws IOException, XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    importXARToWiki(previousXarFile, xarFile, context.getMainXWiki(), mergeConfiguration);\n                }\n\n                for (String subwiki : wikis) {\n                    importXARToWiki(previousXarFile, xarFile, subwiki, mergeConfiguration);\n                }\n            } else {\n                importXARToWiki(previousXarFile, xarFile, context.getMainXWiki(), mergeConfiguration);\n            }\n        } else {\n            importXARToWiki(previousXarFile, xarFile, wiki, mergeConfiguration);\n        }\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.extension.xar.internal.handler.packager.Packager#unimportPages(java.util.Collection,\n     *      java.lang.String)\n     */\n    public void unimportPages(Collection<XarEntry> pages, String wiki) throws XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    unimportPagesFromWiki(pages, context.getMainXWiki());\n                }\n\n                for (String subwiki : wikis) {\n                    unimportPagesFromWiki(pages, subwiki);\n                }\n            } else {\n                unimportPagesFromWiki(pages, context.getMainXWiki());\n            }\n        } else {\n            unimportPagesFromWiki(pages, wiki);\n        }\n    }","id":64914,"modified_method":"@Override\n    public void unimportPages(Collection<XarEntry> pages, String wiki) throws XWikiException\n    {\n        if (wiki == null) {\n            XWikiContext context = getXWikiContext();\n            if (context.getWiki().isVirtualMode()) {\n                List<String> wikis = getXWikiContext().getWiki().getVirtualWikisDatabaseNames(context);\n\n                if (!wikis.contains(context.getMainXWiki())) {\n                    unimportPagesFromWiki(pages, context.getMainXWiki());\n                }\n\n                for (String subwiki : wikis) {\n                    unimportPagesFromWiki(pages, subwiki);\n                }\n            } else {\n                unimportPagesFromWiki(pages, context.getMainXWiki());\n            }\n        } else {\n            unimportPagesFromWiki(pages, wiki);\n        }\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.phase.Initializable#initialize()\n     */\n    public void initialize() throws InitializationException\n    {\n        this.parserFactory = SAXParserFactory.newInstance();\n    }","id":64915,"modified_method":"public void initialize() throws InitializationException\n    {\n        this.parserFactory = SAXParserFactory.newInstance();\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public DocumentHandler(ComponentManager componentManager, String wiki)\n    {\n        super(componentManager);\n\n        setCurrentBean(new XWikiDocument(new DocumentReference(wiki, \"XWiki\", \"Page\")));\n\n        // Default syntax in a XAR is xwiki/1.0\n        getDocument().setSyntax(Syntax.XWIKI_1_0);\n\n        // skip useless known elements\n        this.skippedElements.add(\"version\");\n        this.skippedElements.add(\"minorEdit\");\n        this.skippedElements.add(\"comment\");\n    }","id":64916,"modified_method":"public DocumentHandler(ComponentManager componentManager, String wiki)\n    {\n        super(componentManager);\n\n        setCurrentBean(new XWikiDocument(new DocumentReference(wiki, \"XWiki\", \"Page\")));\n\n        // Default syntax in a XAR is xwiki/1.0\n        getDocument().setSyntax(Syntax.XWIKI_1_0);\n\n        // skip useless known elements\n        this.skippedElements.add(\"version\");\n        this.skippedElements.add(\"minorEdit\");\n        this.skippedElements.add(\"comment\");\n        this.skippedElements.add(\"creator\");\n        this.skippedElements.add(\"author\");\n        this.skippedElements.add(\"contentAuthor\");\n        this.skippedElements.add(\"creationDate\");\n        this.skippedElements.add(\"date\");\n        this.skippedElements.add(\"contentUpdateDate\");\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void saveDocument(String comment) throws SAXException\n    {\n        try {\n            XWikiContext context = getXWikiContext();\n\n            XWikiDocument document = getDocument();\n            XWikiDocument dbDocument = getDatabaseDocument().clone();\n            XWikiDocument previousDocument = getPreviousDocument();\n\n            if (previousDocument != null && !dbDocument.isNew()) {\n                MergeResult documentMergeResult = dbDocument.merge(previousDocument, document, this.mergeConfiguration, context);\n                if (documentMergeResult.isModified()) {\n                    context.getWiki().saveDocument(dbDocument, comment, context);\n                }\n                this.mergeResult =\n                    new XarEntryMergeResult(new XarEntry(dbDocument.getDocumentReference(), dbDocument.getLanguage()),\n                        documentMergeResult);\n            } else {\n                if (!dbDocument.isNew()) {\n                    document.setVersion(dbDocument.getVersion());\n                }\n\n                context.getWiki().saveDocument(document, comment, context);\n            }\n        } catch (Exception e) {\n            throw new SAXException(\"Failed to save document\", e);\n        }\n    }","id":64917,"modified_method":"private void saveDocument(String comment) throws SAXException\n    {\n        try {\n            XWikiContext context = getXWikiContext();\n\n            XWikiDocument document = getDocument();\n            XWikiDocument dbDocument = getDatabaseDocument().clone();\n            XWikiDocument previousDocument = getPreviousDocument();\n\n            // Merge and save\n            if (previousDocument != null && !dbDocument.isNew()) {\n                MergeResult documentMergeResult =\n                    dbDocument.merge(previousDocument, document, this.mergeConfiguration, context);\n                if (documentMergeResult.isModified()) {\n                    context.getWiki().saveDocument(dbDocument, comment, context);\n                }\n                this.mergeResult =\n                    new XarEntryMergeResult(new XarEntry(dbDocument.getDocumentReference(), dbDocument.getLanguage()),\n                        documentMergeResult);\n            } else {\n                // Set proper version\n                document.setAuthorReference(context.getUserReference());\n                document.setContentAuthorReference(context.getUserReference());\n                if (!dbDocument.isNew()) {\n                    document.setCreatorReference(dbDocument.getCreatorReference());\n                    document.setVersion(dbDocument.getVersion());\n                } else {\n                    document.setCreatorReference(context.getUserReference());\n                }\n\n                context.getWiki().saveDocument(document, comment, context);\n            }\n        } catch (Exception e) {\n            throw new SAXException(\"Failed to save document\", e);\n        }\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public XarEntryMergeResult getMergeResult()\n    {\n        return mergeResult;\n    }","id":64918,"modified_method":"public XarEntryMergeResult getMergeResult()\n    {\n        return this.mergeResult;\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void saveAttachment(XWikiAttachment attachment, String comment) throws SAXException\n    {\n        try {\n            XWikiContext context = getXWikiContext();\n            XWikiDocument dbDocument = getDatabaseDocument();\n\n            XWikiAttachment dbAttachment = dbDocument.getAttachment(attachment.getFilename());\n\n            if (dbAttachment == null) {\n                dbDocument.getAttachmentList().add(attachment);\n            } else {\n                dbAttachment.setContent(attachment.getContentInputStream(context));\n                dbAttachment.setFilename(attachment.getFilename());\n                dbAttachment.setAuthor(attachment.getAuthor());\n            }\n\n            context.getWiki().saveDocument(dbDocument, comment, context);\n\n            // reset content to since it could consume lots of memory and it's not used in diff for now\n            attachment.setAttachment_content(null);\n            getDocument().getAttachmentList().add(attachment);\n        } catch (Exception e) {\n            throw new SAXException(\"Failed to save attachment [\" + attachment + \"]\", e);\n        }\n    }","id":64919,"modified_method":"private void saveAttachment(XWikiAttachment attachment, String comment) throws SAXException\n    {\n        try {\n            XWikiContext context = getXWikiContext();\n\n            // Set proper author\n            // TODO: add a setAuthorReference in XWikiAttachment\n            XWikiDocument document = getDocument();\n            document.setAuthorReference(context.getUserReference());\n            attachment.setAuthor(document.getAuthor());\n\n            XWikiDocument dbDocument = getDatabaseDocument();\n\n            XWikiAttachment dbAttachment = dbDocument.getAttachment(attachment.getFilename());\n\n            if (dbAttachment == null) {\n                dbDocument.getAttachmentList().add(attachment);\n            } else {\n                dbAttachment.setContent(attachment.getContentInputStream(context));\n                dbAttachment.setFilename(attachment.getFilename());\n                dbAttachment.setAuthor(attachment.getAuthor());\n            }\n\n            context.getWiki().saveDocument(dbDocument, comment, context);\n\n            // reset content to since it could consume lots of memory and it's not used in diff for now\n            attachment.setAttachment_content(null);\n            getDocument().getAttachmentList().add(attachment);\n        } catch (Exception e) {\n            throw new SAXException(\"Failed to save attachment [\" + attachment + \"]\", e);\n        }\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private XWikiDocument getPreviousDocument() throws NotADocumentException, ParserConfigurationException,\n        SAXException, IOException\n    {\n        XWikiDocument previousDocument = null;\n\n        if (previousXarFile != null) {\n            XWikiDocument document = getDocument();\n\n            DocumentHandler documentHandler = new DocumentHandler(getComponentManager(), document.getWikiName());\n\n            XarEntry realEntry =\n                this.previousXarFile.getEntry(new EntityReference(document.getName(), EntityType.DOCUMENT,\n                    new EntityReference(document.getSpace(), EntityType.SPACE)), document.getRealLanguage());\n            if (realEntry != null) {\n                this.packager.parseDocument(this.previousXarFile.getInputStream(realEntry), documentHandler);\n\n                previousDocument = documentHandler.getDocument();\n            }\n        }\n\n        return previousDocument;\n    }","id":64920,"modified_method":"private XWikiDocument getPreviousDocument() throws NotADocumentException, ParserConfigurationException,\n        SAXException, IOException\n    {\n        XWikiDocument previousDocument = null;\n\n        if (this.previousXarFile != null) {\n            XWikiDocument document = getDocument();\n\n            DocumentHandler documentHandler = new DocumentHandler(getComponentManager(), document.getWikiName());\n\n            XarEntry realEntry =\n                this.previousXarFile.getEntry(new EntityReference(document.getName(), EntityType.DOCUMENT,\n                    new EntityReference(document.getSpace(), EntityType.SPACE)), document.getRealLanguage());\n            if (realEntry != null) {\n                this.packager.parseDocument(this.previousXarFile.getInputStream(realEntry), documentHandler);\n\n                previousDocument = documentHandler.getDocument();\n            }\n        }\n\n        return previousDocument;\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.repositoryUtil =\n            new RepositoryUtil(getClass().getSimpleName(), getConfigurationSource(), getComponentManager());\n        this.repositoryUtil.setup();\n\n        // mock\n\n        this.mockXWiki = getMockery().mock(XWiki.class);\n        getContext().setWiki(this.mockXWiki);\n        getContext().setDatabase(\"xwiki\");\n\n        this.localXarExtensiontId1 = new ExtensionId(\"test\", \"1.0\");\n        this.localXarExtensiontId2 = new ExtensionId(\"test\", \"2.0\");\n\n        // classes\n\n        BaseClass styleSheetClass = new BaseClass();\n        this.classes.put(\"StyleSheetExtension\", styleSheetClass);\n\n        // checking\n\n        getMockery().checking(new Expectations()\n        {\n            {\n                allowing(mockXWiki).getDocument(with(any(DocumentReference.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"getDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        Map<String, XWikiDocument> documentLanguages = documents.get(invocation.getParameter(0));\n\n                        if (documentLanguages == null) {\n                            documentLanguages = new HashMap<String, XWikiDocument>();\n                            documents.put((DocumentReference) invocation.getParameter(0), documentLanguages);\n                        }\n\n                        XWikiDocument document = documentLanguages.get(\"en\");\n\n                        if (document == null) {\n                            document = new XWikiDocument((DocumentReference) invocation.getParameter(0));\n                        }\n\n                        return document;\n                    }\n                });\n\n                allowing(mockXWiki).saveDocument(with(any(XWikiDocument.class)), with(any(String.class)),\n                    with(any(XWikiContext.class)));\n                will(new CustomAction(\"saveDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        XWikiDocument document = (XWikiDocument) invocation.getParameter(0);\n\n                        document.incrementVersion();\n                        document.setNew(false);\n\n                        Map<String, XWikiDocument> documentLanguages = documents.get(document.getDocumentReference());\n\n                        if (documentLanguages == null) {\n                            documentLanguages = new HashMap<String, XWikiDocument>();\n                            documents.put(document.getDocumentReference(), documentLanguages);\n                        }\n\n                        documentLanguages.put(document.getRealLanguage(), document);\n\n                        return null;\n                    }\n                });\n\n                allowing(mockXWiki).deleteDocument(with(any(XWikiDocument.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"deleteDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        XWikiDocument document = (XWikiDocument) invocation.getParameter(0);\n\n                        Map<String, XWikiDocument> documentLanguages = documents.get(document.getDocumentReference());\n\n                        if (documentLanguages != null) {\n                            documentLanguages.remove(document.getRealLanguage());\n                        }\n\n                        return null;\n                    }\n                });\n\n                allowing(mockXWiki).getXClass(with(any(DocumentReference.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"getXClass\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        DocumentReference documentReference = (DocumentReference) invocation.getParameter(0);\n\n                        return classes.get(documentReference.getName());\n                    }\n                });\n            }\n        });\n\n        // lookup\n\n        this.taskManager = getComponentManager().lookup(JobManager.class);\n        this.localExtensionRepository = getComponentManager().lookup(LocalExtensionRepository.class, \"xar\");\n    }","id":64921,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.repositoryUtil =\n            new RepositoryUtil(getClass().getSimpleName(), getConfigurationSource(), getComponentManager());\n        this.repositoryUtil.setup();\n\n        // mock\n\n        this.mockXWiki = getMockery().mock(XWiki.class);\n        getContext().setWiki(this.mockXWiki);\n        getContext().setDatabase(\"xwiki\");\n        this.contextUser = new DocumentReference(getContext().getDatabase(), \"XWiki\", \"ExtensionUser\");\n\n        this.localXarExtensiontId1 = new ExtensionId(\"test\", \"1.0\");\n        this.localXarExtensiontId2 = new ExtensionId(\"test\", \"2.0\");\n\n        // classes\n\n        BaseClass styleSheetClass = new BaseClass();\n        this.classes.put(\"StyleSheetExtension\", styleSheetClass);\n\n        // checking\n\n        getMockery().checking(new Expectations()\n        {\n            {\n                allowing(mockXWiki).getDocument(with(any(DocumentReference.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"getDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        Map<String, XWikiDocument> documentLanguages = documents.get(invocation.getParameter(0));\n\n                        if (documentLanguages == null) {\n                            documentLanguages = new HashMap<String, XWikiDocument>();\n                            documents.put((DocumentReference) invocation.getParameter(0), documentLanguages);\n                        }\n\n                        XWikiDocument document = documentLanguages.get(\"en\");\n\n                        if (document == null) {\n                            document = new XWikiDocument((DocumentReference) invocation.getParameter(0));\n                        }\n\n                        return document;\n                    }\n                });\n\n                allowing(mockXWiki).saveDocument(with(any(XWikiDocument.class)), with(any(String.class)),\n                    with(any(XWikiContext.class)));\n                will(new CustomAction(\"saveDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        XWikiDocument document = (XWikiDocument) invocation.getParameter(0);\n\n                        document.incrementVersion();\n                        document.setNew(false);\n\n                        Map<String, XWikiDocument> documentLanguages = documents.get(document.getDocumentReference());\n\n                        if (documentLanguages == null) {\n                            documentLanguages = new HashMap<String, XWikiDocument>();\n                            documents.put(document.getDocumentReference(), documentLanguages);\n                        }\n\n                        documentLanguages.put(document.getRealLanguage(), document);\n\n                        return null;\n                    }\n                });\n\n                allowing(mockXWiki).deleteDocument(with(any(XWikiDocument.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"deleteDocument\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        XWikiDocument document = (XWikiDocument) invocation.getParameter(0);\n\n                        Map<String, XWikiDocument> documentLanguages = documents.get(document.getDocumentReference());\n\n                        if (documentLanguages != null) {\n                            documentLanguages.remove(document.getRealLanguage());\n                        }\n\n                        return null;\n                    }\n                });\n\n                allowing(mockXWiki).getXClass(with(any(DocumentReference.class)), with(any(XWikiContext.class)));\n                will(new CustomAction(\"getXClass\")\n                {\n                    public Object invoke(org.jmock.api.Invocation invocation) throws Throwable\n                    {\n                        DocumentReference documentReference = (DocumentReference) invocation.getParameter(0);\n\n                        return classes.get(documentReference.getName());\n                    }\n                });\n                \n                allowing(mockXWiki).isVirtualMode();\n                will(returnValue(true));\n            }\n        });\n        \n        getContext().setUserReference(this.contextUser);\n\n        // lookup\n\n        this.taskManager = getComponentManager().lookup(JobManager.class);\n        this.localExtensionRepository = getComponentManager().lookup(LocalExtensionRepository.class, \"xar\");\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testInstall() throws Throwable\n    {\n        // install\n\n        install(this.localXarExtensiontId1, \"wiki\");\n\n        // validate\n\n        XWikiDocument page = this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space.page has not been saved in the database\", page.isNew());\n\n        Assert.assertEquals(\"Wrong content\", \"content\", page.getContent());\n        Assert.assertEquals(\"Wrong author\", \"XWiki.author\", page.getAuthor());\n        Assert.assertEquals(\"Wrong versions\", \"1.1\", page.getVersion());\n\n        BaseClass baseClass = page.getXClass();\n        Assert.assertNotNull(baseClass.getField(\"property\"));\n        Assert.assertEquals(\"property\", baseClass.getField(\"property\").getName());\n        Assert.assertSame(NumberClass.class, baseClass.getField(\"property\").getClass());\n\n        XWikiDocument page1 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space1\", \"page1\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space2.page2 has not been saved in the database\", page1.isNew());\n    }","id":64922,"modified_method":"@Test\n    public void testInstall() throws Throwable\n    {\n        // install\n\n        install(this.localXarExtensiontId1, \"wiki\");\n\n        // validate\n\n        XWikiDocument page = this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space.page has not been saved in the database\", page.isNew());\n\n        Assert.assertEquals(\"Wrong content\", \"content\", page.getContent());\n        Assert.assertEquals(\"Wrong author\", this.contextUser, page.getAuthorReference());\n        Assert.assertEquals(\"Wrong versions\", \"1.1\", page.getVersion());\n\n        BaseClass baseClass = page.getXClass();\n        Assert.assertNotNull(baseClass.getField(\"property\"));\n        Assert.assertEquals(\"property\", baseClass.getField(\"property\").getName());\n        Assert.assertSame(NumberClass.class, baseClass.getField(\"property\").getClass());\n\n        XWikiDocument page1 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space1\", \"page1\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space2.page2 has not been saved in the database\", page1.isNew());\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testUpgrade() throws Throwable\n    {\n        install(this.localXarExtensiontId1, \"wiki\");\n\n        // upgrade\n\n        install(this.localXarExtensiontId2, \"wiki\");\n\n        // validate\n\n        XWikiDocument page = this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space.page has not been saved in the database\", page.isNew());\n\n        Assert.assertEquals(\"Wrong content\", \"content 2\", page.getContent());\n        Assert.assertEquals(\"Wrong author\", \"XWiki.author\", page.getAuthor());\n        Assert.assertEquals(\"Wrong versions\", \"2.1\", page.getVersion());\n\n        BaseClass baseClass = page.getXClass();\n        Assert.assertNotNull(baseClass.getField(\"property\"));\n        Assert.assertEquals(\"property\", baseClass.getField(\"property\").getName());\n        Assert.assertSame(NumberClass.class, baseClass.getField(\"property\").getClass());\n\n        XWikiDocument page2 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space2\", \"page2\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space2.page2 has not been saved in the database\", page2.isNew());\n\n        XWikiDocument page1 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space1\", \"page1\"), getContext());\n\n        Assert.assertTrue(\"Document wiki.space1.page1 has not been removed from the database\", page1.isNew());\n    }","id":64923,"modified_method":"@Test\n    public void testUpgrade() throws Throwable\n    {\n        install(this.localXarExtensiontId1, \"wiki\");\n\n        // upgrade\n\n        install(this.localXarExtensiontId2, \"wiki\");\n\n        // validate\n\n        XWikiDocument page = this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space.page has not been saved in the database\", page.isNew());\n\n        Assert.assertEquals(\"Wrong content\", \"content 2\", page.getContent());\n        Assert.assertEquals(\"Wrong author\", this.contextUser, page.getAuthorReference());\n        Assert.assertEquals(\"Wrong versions\", \"2.1\", page.getVersion());\n\n        BaseClass baseClass = page.getXClass();\n        Assert.assertNotNull(baseClass.getField(\"property\"));\n        Assert.assertEquals(\"property\", baseClass.getField(\"property\").getName());\n        Assert.assertSame(NumberClass.class, baseClass.getField(\"property\").getClass());\n\n        XWikiDocument page2 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space2\", \"page2\"), getContext());\n\n        Assert.assertFalse(\"Document wiki.space2.page2 has not been saved in the database\", page2.isNew());\n\n        XWikiDocument page1 =\n            this.mockXWiki.getDocument(new DocumentReference(\"wiki\", \"space1\", \"page1\"), getContext());\n\n        Assert.assertTrue(\"Document wiki.space1.page1 has not been removed from the database\", page1.isNew());\n    }","commit_id":"562a42e6d1a6eeca277f84cb53c8c35e1adf2e1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String _getActionURL(String mvcActionCommandName, String cmd) {\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createActionURL();\n\n\t\tportletURL.setParameter(\"javax.portlet.action\", mvcActionCommandName);\n\t\tportletURL.setParameter(Constants.CMD, cmd);\n\t\tportletURL.setParameter(\"redirect\", _getCurrentURL());\n\t\tportletURL.setParameter(\n\t\t\t\"fileEntryId\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL.toString();\n\t}","id":64924,"modified_method":"private PortletURL _getActionURL(String mvcActionCommandName, String cmd) {\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createActionURL();\n\n\t\tportletURL.setParameter(\"javax.portlet.action\", mvcActionCommandName);\n\t\tportletURL.setParameter(Constants.CMD, cmd);\n\t\tportletURL.setParameter(\"redirect\", _getCurrentURL());\n\t\tportletURL.setParameter(\n\t\t\t\"fileEntryId\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL;\n\t}","commit_id":"a349db3ece98df2ed2ee2cdeb145289687a3e505","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addCancelCheckoutMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.\n\t\t\t\tisCancelCheckoutDocumentActionAvailable()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-remove\",\n\t\t\tDLUIItemKeys.CANCEL_CHECKOUT, \"cancel-checkout[document]\",\n\t\t\t_getActionURL(\n\t\t\t\t\"/document_library/edit_file_entry\",\n\t\t\t\tConstants.CANCEL_CHECKOUT));\n\t}","id":64925,"modified_method":"public void addCancelCheckoutMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.\n\t\t\t\tisCancelCheckoutDocumentActionAvailable()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tPortletURL portletURL = _getActionURL(\n\t\t\t\"/document_library/edit_file_entry\", Constants.CANCEL_CHECKOUT);\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-remove\",\n\t\t\tDLUIItemKeys.CANCEL_CHECKOUT, \"cancel-checkout[document]\",\n\t\t\tportletURL.toString());\n\t}","commit_id":"a349db3ece98df2ed2ee2cdeb145289687a3e505","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDeleteMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (isDeleteActionAvailable()) {\n\t\t\tDeleteMenuItem deleteMenuItem = new DeleteMenuItem();\n\n\t\t\tdeleteMenuItem.setKey(DLUIItemKeys.DELETE);\n\t\t\tdeleteMenuItem.setURL(\n\t\t\t\t_getActionURL(\n\t\t\t\t\t\"/document_library/edit_file_entry\", Constants.DELETE));\n\n\t\t\tmenuItems.add(deleteMenuItem);\n\t\t}\n\t\telse if (isMoveToTheRecycleBinActionAvailable()) {\n\t\t\tDeleteMenuItem deleteMenuItem = new DeleteMenuItem();\n\n\t\t\tdeleteMenuItem.setKey(DLUIItemKeys.DELETE);\n\t\t\tdeleteMenuItem.setTrash(true);\n\t\t\tdeleteMenuItem.setURL(\n\t\t\t\t_getActionURL(\n\t\t\t\t\t\"/document_library/edit_file_entry\",\n\t\t\t\t\tConstants.MOVE_TO_TRASH));\n\n\t\t\tmenuItems.add(deleteMenuItem);\n\t\t}\n\t}","id":64926,"modified_method":"public void addDeleteMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (isDeleteActionAvailable()) {\n\t\t\tDeleteMenuItem deleteMenuItem = new DeleteMenuItem();\n\n\t\t\tdeleteMenuItem.setKey(DLUIItemKeys.DELETE);\n\n\t\t\tPortletURL portletURL = _getActionURL(\n\t\t\t\t\"/document_library/edit_file_entry\", Constants.DELETE);\n\n\t\t\tdeleteMenuItem.setURL(portletURL.toString());\n\n\t\t\tmenuItems.add(deleteMenuItem);\n\t\t}\n\t\telse if (isMoveToTheRecycleBinActionAvailable()) {\n\t\t\tDeleteMenuItem deleteMenuItem = new DeleteMenuItem();\n\n\t\t\tdeleteMenuItem.setKey(DLUIItemKeys.DELETE);\n\t\t\tdeleteMenuItem.setTrash(true);\n\n\t\t\tPortletURL portletURL = _getActionURL(\n\t\t\t\t\"/document_library/edit_file_entry\", Constants.MOVE_TO_TRASH);\n\n\t\t\tdeleteMenuItem.setURL(portletURL.toString());\n\n\t\t\tmenuItems.add(deleteMenuItem);\n\t\t}\n\t}","commit_id":"a349db3ece98df2ed2ee2cdeb145289687a3e505","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addCheckinMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.isCheckinActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-lock\", DLUIItemKeys.CHECKIN,\n\t\t\t\"checkin\",\n\t\t\t_getActionURL(\n\t\t\t\t\"/document_library/edit_file_entry\", Constants.CHECKIN));\n\t}","id":64927,"modified_method":"public void addCheckinMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.isCheckinActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletURL portletURL = _getActionURL(\n\t\t\t\"/document_library/edit_file_entry\", Constants.CHECKIN);\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-lock\", DLUIItemKeys.CHECKIN,\n\t\t\t\"checkin\", portletURL.toString());\n\t}","commit_id":"a349db3ece98df2ed2ee2cdeb145289687a3e505","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addCheckoutMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.\n\t\t\t\tisCheckoutDocumentActionAvailable()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-unlock\", DLUIItemKeys.CHECKOUT,\n\t\t\t\"checkout[document]\",\n\t\t\t_getActionURL(\n\t\t\t\t\"/document_library/edit_file_entry\", Constants.CHECKOUT));\n\t}","id":64928,"modified_method":"public void addCheckoutMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.\n\t\t\t\tisCheckoutDocumentActionAvailable()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tPortletURL portletURL = _getActionURL(\n\t\t\t\"/document_library/edit_file_entry\", Constants.CHECKOUT);\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, \"icon-unlock\", DLUIItemKeys.CHECKOUT,\n\t\t\t\"checkout[document]\", portletURL.toString());\n\t}","commit_id":"a349db3ece98df2ed2ee2cdeb145289687a3e505","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public GlobalVariableResolverFactory(MVELExpressionLanguage el,\n                                         MVELExpressionLanguageContext parent,\n                                         ParserConfiguration parserConfiguration,\n                                         MuleContext muleContext,\n                                         Collection<ExpressionLanguageExtension> expressionLanguageExtensions)\n    {\n        super(parserConfiguration, muleContext);\n        this.parent = parent;\n        for (ExpressionLanguageExtension extension : expressionLanguageExtensions)\n        {\n            extension.configureContext(parent);\n        }\n        for (Entry<String, Class<?>> function : el.imports.entrySet())\n        {\n            importClass(function.getKey(), function.getValue());\n        }\n        for (Entry<String, String> alias : el.aliases.entrySet())\n        {\n            addAlias(alias.getKey(), alias.getValue());\n        }\n        for (Entry<String, Function> function : el.globalFunctions.entrySet())\n        {\n            addFinalVariable(function.getKey(), new FunctionInstance(function.getValue()));\n        }\n    }","id":64929,"modified_method":"public GlobalVariableResolverFactory(MVELExpressionLanguage el,\n                                         MVELExpressionLanguageContext parent,\n                                         ParserConfiguration parserConfiguration,\n                                         MuleContext muleContext,\n                                         Collection<ExpressionLanguageExtension> expressionLanguageExtensions)\n    {\n        super(parserConfiguration, muleContext);\n        this.parent = parent;\n        for (ExpressionLanguageExtension extension : expressionLanguageExtensions)\n        {\n            extension.configureContext(parent);\n        }\n        for (Entry<String, String> alias : el.aliases.entrySet())\n        {\n            addAlias(alias.getKey(), alias.getValue());\n        }\n        for (Entry<String, Function> function : el.globalFunctions.entrySet())\n        {\n            addFinalVariable(function.getKey(), new FunctionInstance(function.getValue()));\n        }\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        return (T) evaluateInternal(expression, factory);\n    }","id":64930,"modified_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void configureParserConfiguration(ParserConfiguration parserConfiguration)\n    {\n        // defaults imports\n\n        // JRE\n        parserConfiguration.addPackageImport(\"java.io\");\n        parserConfiguration.addPackageImport(\"java.lang\");\n        parserConfiguration.addPackageImport(\"java.net\");\n        parserConfiguration.addPackageImport(\"java.util\");\n\n        parserConfiguration.addImport(BigDecimal.class);\n        parserConfiguration.addImport(BigInteger.class);\n        parserConfiguration.addImport(DataHandler.class);\n        parserConfiguration.addImport(MimeType.class);\n        parserConfiguration.addImport(Pattern.class);\n\n        // Mule\n        parserConfiguration.addImport(DataType.class);\n        parserConfiguration.addImport(DataTypeFactory.class);\n        parserConfiguration.addImport(NullPayload.class);\n    }","id":64931,"modified_method":"protected void configureParserConfiguration(ParserConfiguration parserConfiguration)\n    {\n        // defaults imports\n\n        // JRE\n        parserConfiguration.addPackageImport(\"java.io\");\n        parserConfiguration.addPackageImport(\"java.lang\");\n        parserConfiguration.addPackageImport(\"java.net\");\n        parserConfiguration.addPackageImport(\"java.util\");\n\n        parserConfiguration.addImport(BigDecimal.class);\n        parserConfiguration.addImport(BigInteger.class);\n        parserConfiguration.addImport(DataHandler.class);\n        parserConfiguration.addImport(MimeType.class);\n        parserConfiguration.addImport(Pattern.class);\n\n        // Mule\n        parserConfiguration.addImport(DataType.class);\n        parserConfiguration.addImport(DataTypeFactory.class);\n        parserConfiguration.addImport(NullPayload.class);\n\n        // Global imports\n        for (Entry<String, Class<?>> importEntry : imports.entrySet())\n        {\n            parserConfiguration.addImport(importEntry.getKey(), importEntry.getValue());\n        }\n\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public void initialise() throws InitialisationException\n    {\n        parserConfiguration = createParserConfiguration();\n        expressionExecutor = new MVELExpressionExecutor(parserConfiguration);\n        expressionLanguageExtensions = muleContext.getRegistry().lookupObjectsForLifecycle(\n            ExpressionLanguageExtension.class);\n\n        loadGlobalFunctions();\n        createStaticContext();\n    }","id":64932,"modified_method":"@Override\n    public void initialise() throws InitialisationException\n    {\n        parserConfiguration = createParserConfiguration();\n        expressionExecutor = new MVELExpressionExecutor(parserConfiguration);\n        expressionLanguageExtensions = muleContext.getRegistry().lookupObjectsForLifecycle(\n            ExpressionLanguageExtension.class);\n        if (expressionLanguageExtensions.size() > 0)\n        {\n            useGlobalConfiguration = true;\n        }\n\n        loadGlobalFunctions();\n        createStaticContext();\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE,\n            event.getMessage());\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createEventVariableResolverFactory(event));\n\n        factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(event));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":64933,"modified_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE,\n            event.getMessage());\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createEventVariableResolverFactory(event));\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(event));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setGlobalFunctionsFile(String globalFunctionsFile)\n    {\n        this.globalFunctionsFile = globalFunctionsFile;\n    }","id":64934,"modified_method":"public void setGlobalFunctionsFile(String globalFunctionsFile)\n    {\n        useGlobalConfiguration = true;\n        this.globalFunctionsFile = globalFunctionsFile;\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public void addAlias(String name, String expression)\n    {\n        this.aliases.put(name, expression);\n    }","id":64935,"modified_method":"public void addAlias(String name, String expression)\n    {\n        useGlobalConfiguration = true;\n        this.aliases.put(name, expression);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public void addGlobalFunction(String name, Function function)\n    {\n        this.globalFunctions.put(name, function);\n    }","id":64936,"modified_method":"public void addGlobalFunction(String name, Function function)\n    {\n        useGlobalConfiguration = true;\n        this.globalFunctions.put(name, function);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setAliases(Map<String, String> aliases)\n    {\n        this.aliases = aliases;\n    }","id":64937,"modified_method":"public void setAliases(Map<String, String> aliases)\n    {\n        if (!useGlobalConfiguration && MapUtils.isNotEmpty(aliases))\n        {\n            useGlobalConfiguration = true;\n        }\n        this.aliases = aliases;\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE, message);\n        factory.appendFactory(createMessageVariableResolverFactory(message));\n        factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(message));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":64938,"modified_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message)\n    {\n        return evaluate(expression, message, null);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE, message);\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createMessageVariableResolverFactory(message));\n\n        factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(message));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":64939,"modified_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE, message);\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createMessageVariableResolverFactory(message));\n\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(message));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setGlobalFunctionsString(String globalFunctionsString)\n    {\n        this.globalFunctionsString = globalFunctionsString;\n    }","id":64940,"modified_method":"public void setGlobalFunctionsString(String globalFunctionsString)\n    {\n        useGlobalConfiguration = true;\n        this.globalFunctionsString = globalFunctionsString;\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"public VariableResolver getVariableResolver(String name)\n    {\n        if (variableResolvers.containsKey(name))\n        {\n            return variableResolvers.get(name);\n        }\n        else\n        {\n            return nextFactory.getVariableResolver(name);\n        }\n    }","id":64941,"modified_method":"public VariableResolver getVariableResolver(String name)\n    {\n        VariableResolver variableResolver = variableResolvers.get(name);\n        if (variableResolver == null)\n        {\n            variableResolver = nextFactory.getVariableResolver(name);\n        }\n        return variableResolver;\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public VariableResolver createVariable(String name, Object value, Class<?> type)\n    {\n        VariableResolver vr;\n\n        vr = getVariableResolver(name);\n\n        if (vr != null)\n        {\n            vr.setValue(value);\n        }\n        else\n        {\n            addResolver(name, vr = new MuleVariableResolver(name, value, type, null));\n        }\n        return vr;\n    }","id":64942,"modified_method":"@Override\n    public VariableResolver createVariable(String name, Object value, Class<?> type)\n    {\n        VariableResolver vr = getVariableResolver(name);\n\n        if (vr != null)\n        {\n            vr.setValue(value);\n        }\n        else\n        {\n            addResolver(name, vr = new MuleVariableResolver(name, value, type, null));\n        }\n        return vr;\n    }","commit_id":"723c3820cc6cfba47fb38c21499de3cfe47e9684","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new EventVariableResolverFactory(parserContext, muleContext, event));\n        factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, event));\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":64943,"modified_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new EventVariableResolverFactory(parserContext, muleContext, event));\n        if (autoResolveVariables)\n        {\n            factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, event));\n        }\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"b4796200054d9a077dd2f5d3a4503e49ce44cbc9","url":"https://github.com/mulesoft/mule"},{"original_method":"@SuppressWarnings({\"unchecked\", \"deprecation\"})\n    @Override\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new MessageVariableResolverFactory(parserContext, muleContext, message));\n        factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, message));\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":64944,"modified_method":"@SuppressWarnings({\"unchecked\", \"deprecation\"})\n    @Override\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new MessageVariableResolverFactory(parserContext, muleContext, message));\n        if (autoResolveVariables)\n        {\n            factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, message));\n        }\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"b4796200054d9a077dd2f5d3a4503e49ce44cbc9","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings({\"unchecked\", \"deprecation\"})\n    public <T> T evaluate(String expression, MuleMessage message)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new MessageVariableResolverFactory(parserContext, muleContext, message));\n        factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, message));\n        return (T) evaluateInternal(expression, factory);\n    }","id":64945,"modified_method":"@Override\n    @SuppressWarnings({\"unchecked\", \"deprecation\"})\n    public <T> T evaluate(String expression, MuleMessage message)\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserContext, muleContext);\n        factory.appendFactory(new MessageVariableResolverFactory(parserContext, muleContext, message));\n        if (autoResolveVariables)\n        {\n            factory.appendFactory(new VariableVariableResolverFactory(parserContext, muleContext, message));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","commit_id":"b4796200054d9a077dd2f5d3a4503e49ce44cbc9","url":"https://github.com/mulesoft/mule"},{"original_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    if (builder.environment != null) {\n      components.add(builder.environment);\n    }\n    if (builder.bootstrapProperties != null) {\n      bootstrapProperties.putAll(builder.bootstrapProperties);\n    } else {\n      // For backward compatibility, previously all properties were set in root project\n      bootstrapProperties.putAll(Maps.fromProperties(builder.projectReactor.getRoot().getProperties()));\n    }\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create().setProperties(bootstrapProperties);\n    }\n  }","id":64946,"modified_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    if (builder.environment != null) {\n      components.add(builder.environment);\n    }\n    if (builder.bootstrapProperties != null) {\n      bootstrapProperties.putAll(builder.bootstrapProperties);\n    } else {\n      // For backward compatibility, previously all properties were set in root project\n      bootstrapProperties.putAll(Maps.fromProperties(builder.projectReactor.getRoot().getProperties()));\n    }\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);\n    }\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public LoggingConfiguration setFormat(String format) {\n    return addSubstitutionVariable(PROPERTY_FORMAT, StringUtils.defaultIfBlank(format, FORMAT_DEFAULT));\n  }","id":64947,"modified_method":"@VisibleForTesting\n  LoggingConfiguration setFormat(String format) {\n    return addSubstitutionVariable(PROPERTY_FORMAT, StringUtils.defaultIfBlank(format, FORMAT_DEFAULT));\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"static LoggingConfiguration create() {\n    return new LoggingConfiguration();\n  }","id":64948,"modified_method":"private LoggingConfiguration(@Nullable EnvironmentInformation environment) {\n    setVerbose(false);\n    setShowSql(false);\n    if (environment != null && \"maven\".equalsIgnoreCase(environment.getKey())) {\n      setFormat(FORMAT_MAVEN);\n    }\n    else {\n      setFormat(FORMAT_DEFAULT);\n    }\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetVerboseProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n\n    properties.put(\"sonar.verbose\", \"true\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_VERBOSE));\n\n    properties.put(\"sonar.verbose\", \"false\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n  }","id":64949,"modified_method":"@Test\n  public void testSetVerboseProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n\n    properties.put(\"sonar.verbose\", \"true\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);\n\n    properties.put(\"sonar.verbose\", \"false\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetFormat() {\n    assertThat(LoggingConfiguration.create().setFormat(\"%d %level\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(\"%d %level\"));\n  }","id":64950,"modified_method":"@Test\n  public void testSetFormat() {\n    assertThat(LoggingConfiguration.create(null).setFormat(\"%d %level\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(\"%d %level\");\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetShowSqlProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n\n    properties.put(\"sonar.showSql\", \"true\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_VERBOSE));\n\n    properties.put(\"sonar.showSql\", \"false\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n  }","id":64951,"modified_method":"@Test\n  public void testSetShowSqlProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n\n    properties.put(\"sonar.showSql\", \"true\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_VERBOSE);\n\n    properties.put(\"sonar.showSql\", \"false\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSqlLevel() {\n    assertThat(LoggingConfiguration.create().setShowSql(true)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_VERBOSE));\n\n    assertThat(LoggingConfiguration.create().setShowSql(false)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setSqlLevel(\"ERROR\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(\"ERROR\"));\n  }","id":64952,"modified_method":"@Test\n  public void testSqlLevel() {\n    assertThat(LoggingConfiguration.create(null).setShowSql(true)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_VERBOSE);\n\n    assertThat(LoggingConfiguration.create(null).setShowSql(false)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setSqlLevel(\"ERROR\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"ERROR\");\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDefaultFormat() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n  }","id":64953,"modified_method":"@Test\n  public void testDefaultFormat() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotSetBlankFormat() {\n    assertThat(LoggingConfiguration.create().setFormat(null)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setFormat(\"\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setFormat(\"   \")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n  }","id":64954,"modified_method":"@Test\n  public void shouldNotSetBlankFormat() {\n    assertThat(LoggingConfiguration.create(null).setFormat(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setFormat(\"\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setFormat(\"   \")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetVerbose() {\n    assertThat(LoggingConfiguration.create().setVerbose(true)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_VERBOSE));\n\n    assertThat(LoggingConfiguration.create().setVerbose(false)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setRootLevel(\"ERROR\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(\"ERROR\"));\n  }","id":64955,"modified_method":"@Test\n  public void testSetVerbose() {\n    assertThat(LoggingConfiguration.create(null).setVerbose(true)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);\n\n    assertThat(LoggingConfiguration.create(null).setVerbose(false)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setRootLevel(\"ERROR\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(\"ERROR\");\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotBeVerboseByDefault() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n  }","id":64956,"modified_method":"@Test\n  public void shouldNotBeVerboseByDefault() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotShowSqlByDefault() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n  }","id":64957,"modified_method":"@Test\n  public void shouldNotShowSqlByDefault() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static void synchronizeFileSystem(MavenProject pom, ProjectDefinition into) {\n    into.setBaseDir(pom.getBasedir());\n    File buildDir = resolvePath(pom.getBuild().getDirectory(), pom.getBasedir());\n    if (buildDir != null) {\n      into.setBuildDir(buildDir);\n      into.setWorkDir(new File(buildDir, \"sonar\"));\n    }\n    into.setSourceDirs((String[]) pom.getCompileSourceRoots().toArray(new String[pom.getCompileSourceRoots().size()]));\n    into.setTestDirs((String[]) pom.getTestCompileSourceRoots().toArray(new String[pom.getTestCompileSourceRoots().size()]));\n    File binaryDir = resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir());\n    if (binaryDir != null) {\n      into.addBinaryDir(binaryDir);\n    }\n  }","id":64958,"modified_method":"public static void synchronizeFileSystem(MavenProject pom, ProjectDefinition into) {\n    into.setBaseDir(pom.getBasedir());\n    File buildDir = getBuildDir(pom);\n    if (buildDir != null) {\n      into.setBuildDir(buildDir);\n      into.setWorkDir(getSonarWorkDir(pom));\n    }\n    List<String> filteredCompileSourceRoots = filterExisting(pom.getCompileSourceRoots(), pom.getBasedir());\n    List<String> filteredTestCompileSourceRoots = filterExisting(pom.getTestCompileSourceRoots(), pom.getBasedir());\n    into.setSourceDirs((String[]) filteredCompileSourceRoots.toArray(new String[filteredCompileSourceRoots.size()]));\n    into.setTestDirs((String[]) filteredTestCompileSourceRoots.toArray(new String[filteredTestCompileSourceRoots.size()]));\n    File binaryDir = resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir());\n    if (binaryDir != null) {\n      into.addBinaryDir(binaryDir);\n    }\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  static ProjectDefinition convert(MavenProject pom) {\n    String key = new StringBuilder().append(pom.getGroupId()).append(\":\").append(pom.getArtifactId()).toString();\n    ProjectDefinition definition = ProjectDefinition.create();\n    // IMPORTANT NOTE : reference on properties from POM model must not be saved,\n    // instead they should be copied explicitly - see SONAR-2896\n    definition\n      .setProperties(pom.getModel().getProperties())\n      .setKey(key)\n      .setVersion(pom.getVersion())\n      .setName(pom.getName())\n      .setDescription(pom.getDescription())\n      .addContainerExtension(pom);\n    guessJavaVersion(pom, definition);\n    guessEncoding(pom, definition);\n    convertMavenLinksToProperties(definition, pom);\n    synchronizeFileSystem(pom, definition);\n    return definition;\n  }","id":64959,"modified_method":"public static String getSonarKey(MavenProject pom) {\n    return new StringBuilder().append(pom.getGroupId()).append(\":\").append(pom.getArtifactId()).toString();\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static void synchronizeFileSystem(MavenProject pom, DefaultModuleFileSystem into) {\n    into.resetDirs(\n      pom.getBasedir(),\n      resolvePath(pom.getBuild().getDirectory(), pom.getBasedir()),\n      resolvePaths((List<String>) pom.getCompileSourceRoots(), pom.getBasedir()),\n      resolvePaths((List<String>) pom.getTestCompileSourceRoots(), pom.getBasedir()),\n      Arrays.asList(resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir()))\n    );\n  }","id":64960,"modified_method":"public static void synchronizeFileSystem(MavenProject pom, DefaultModuleFileSystem into) {\n    into.resetDirs(\n        pom.getBasedir(),\n        getBuildDir(pom),\n        resolvePaths((List<String>) pom.getCompileSourceRoots(), pom.getBasedir()),\n        resolvePaths((List<String>) pom.getTestCompileSourceRoots(), pom.getBasedir()),\n        Arrays.asList(resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir()))\n        );\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static ProjectDefinition convert(List<MavenProject> poms, MavenProject root) {\n    // projects by canonical path to pom.xml\n    Map<String, MavenProject> paths = Maps.newHashMap();\n    Map<MavenProject, ProjectDefinition> defs = Maps.newHashMap();\n\n    try {\n      for (MavenProject pom : poms) {\n        paths.put(pom.getFile().getCanonicalPath(), pom);\n        defs.put(pom, convert(pom));\n      }\n\n      for (Map.Entry<String, MavenProject> entry : paths.entrySet()) {\n        MavenProject pom = entry.getValue();\n        for (Object m : pom.getModules()) {\n          String moduleId = (String) m;\n          File modulePath = new File(pom.getBasedir(), moduleId);\n          MavenProject module = findMavenProject(modulePath, paths);\n\n          ProjectDefinition parentProject = defs.get(pom);\n          if (parentProject == null) {\n            throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n          }\n          ProjectDefinition subProject = defs.get(module);\n          if (subProject == null) {\n            throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n          }\n          parentProject.addSubProject(subProject);\n        }\n      }\n    } catch (IOException e) {\n      throw new SonarException(e);\n    }\n\n    ProjectDefinition rootProject = defs.get(root);\n    if (rootProject == null) {\n      throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n    }\n    return rootProject;\n  }","id":64961,"modified_method":"public static ProjectDefinition convert(List<MavenProject> poms, MavenProject root) {\n    ProjectDefinition def = ProjectDefinition.create();\n    configure(def, poms, root);\n    return def;\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertProperties() {\n    MavenProject pom = new MavenProject();\n    pom.setGroupId(\"foo\");\n    pom.setArtifactId(\"bar\");\n    pom.setVersion(\"1.0.1\");\n    pom.setName(\"Test\");\n    pom.setDescription(\"just test\");\n    pom.setFile(new File(\"/foo/pom.xml\"));\n    pom.getBuild().setDirectory(\"target\");\n    ProjectDefinition project = MavenProjectConverter.convert(pom);\n\n    Properties properties = project.getProperties();\n    assertThat(properties.getProperty(CoreProperties.PROJECT_KEY_PROPERTY), is(\"foo:bar\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_VERSION_PROPERTY), is(\"1.0.1\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_NAME_PROPERTY), is(\"Test\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_DESCRIPTION_PROPERTY), is(\"just test\"));\n  }","id":64962,"modified_method":"@Test\n  public void shouldConvertProperties() {\n    MavenProject pom = new MavenProject();\n    pom.setGroupId(\"foo\");\n    pom.setArtifactId(\"bar\");\n    pom.setVersion(\"1.0.1\");\n    pom.setName(\"Test\");\n    pom.setDescription(\"just test\");\n    pom.setFile(new File(\"/foo/pom.xml\"));\n    pom.getBuild().setDirectory(\"target\");\n    ProjectDefinition project = ProjectDefinition.create();\n    MavenProjectConverter.merge(pom, project);\n\n    Properties properties = project.getProperties();\n    assertThat(properties.getProperty(CoreProperties.PROJECT_KEY_PROPERTY), is(\"foo:bar\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_VERSION_PROPERTY), is(\"1.0.1\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_NAME_PROPERTY), is(\"Test\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_DESCRIPTION_PROPERTY), is(\"just test\"));\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n    ProjectDefinition def = MavenProjectConverter.convert(session.getProjects(), project);\n    ProjectReactor reactor = new ProjectReactor(def);\n\n    Batch batch = Batch.builder()\n      .setEnvironment(getEnvironmentInformation())\n      .setProjectReactor(reactor)\n      .addComponents(\n        session, getLog(), lifecycleExecutor, artifactFactory, localRepository, artifactMetadataSource, artifactCollector,\n        dependencyTreeBuilder, projectBuilder, Maven3PluginExecutor.class)\n      .build();\n\n    configureLogging(batch.getLoggingConfiguration());\n    batch.execute();\n  }","id":64963,"modified_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n\n    EmbeddedRunner runner = EmbeddedRunner.create()\n        .setApp(\"Maven\", getMavenVersion());\n    // Workaround for SONARPLUGINS-2947\n    // TODO remove when it will be fixed\n    runner.setProperty(\"sonarRunner.userAgent\", \"Maven\");\n    runner.setProperty(\"sonarRunner.userAgentVersion\", getMavenVersion());\n    Set<Entry<Object, Object>> properties = project.getModel().getProperties().entrySet();\n    for (Entry<Object, Object> entry : properties) {\n      runner.setProperty(ObjectUtils.toString(entry.getKey()), ObjectUtils.toString(entry.getValue()));\n    }\n    String encoding = MavenUtils.getSourceEncoding(project);\n    if (encoding != null) {\n      runner.setProperty(ScanProperties.PROJECT_SOURCE_ENCODING, encoding);\n    }\n    runner.setProperty(ScanProperties.PROJECT_KEY, MavenProjectConverter.getSonarKey(project))\n        .setProperty(RunnerProperties.WORK_DIR, MavenProjectConverter.getSonarWorkDir(project).getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_BASEDIR, project.getBasedir().getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_VERSION, StringUtils.defaultString(project.getVersion()))\n        .setProperty(ScanProperties.PROJECT_NAME, StringUtils.defaultString(project.getName()))\n        .setProperty(ScanProperties.PROJECT_DESCRIPTION, StringUtils.defaultString(project.getDescription()))\n        .setProperty(ScanProperties.PROJECT_SOURCE_DIRS, \".\")\n        // Required to share ProjectBuilder extension between SonarMavenProjectBuilder and Sonar classloader\n        .setUnmaskedPackages(\"org.sonar.api.batch.bootstrap\")\n        .addExtensions(session, getLog(), lifecycleExecutor, artifactFactory, localRepository, artifactMetadataSource, artifactCollector,\n            dependencyTreeBuilder, projectBuilder, Maven3PluginExecutor.class, new SonarMaven3ProjectBuilder(session));\n    if (getLog().isDebugEnabled()) {\n      runner.setProperty(\"sonar.verbose\", \"true\");\n    }\n    runner.execute();\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);\n    ProjectReactor reactor = new ProjectReactor(def);\n\n    Batch batch = Batch.builder()\n      .setEnvironment(getEnvironmentInformation())\n      .setProjectReactor(reactor)\n      .addComponents(\n        session, getLog(), lifecycleExecutor, pluginManager, artifactFactory,\n        localRepository, artifactMetadataSource, artifactCollector, dependencyTreeBuilder,\n        projectBuilder, Maven2PluginExecutor.class)\n      .build();\n\n    configureLogging(batch.getLoggingConfiguration());\n    batch.execute();\n  }","id":64964,"modified_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n\n    EmbeddedRunner runner = EmbeddedRunner.create()\n        .setApp(\"Maven\", getMavenVersion());\n    // Workaround for SONARPLUGINS-2947\n    // TODO remove when it will be fixed\n    runner.setProperty(\"sonarRunner.userAgent\", \"Maven\");\n    runner.setProperty(\"sonarRunner.userAgentVersion\", getMavenVersion());\n    Set<Entry<Object, Object>> properties = project.getModel().getProperties().entrySet();\n    for (Entry<Object, Object> entry : properties) {\n      runner.setProperty(ObjectUtils.toString(entry.getKey()), ObjectUtils.toString(entry.getValue()));\n    }\n    String encoding = MavenUtils.getSourceEncoding(project);\n    if (encoding != null) {\n      runner.setProperty(ScanProperties.PROJECT_SOURCE_ENCODING, encoding);\n    }\n    runner.setProperty(ScanProperties.PROJECT_KEY, MavenProjectConverter.getSonarKey(project))\n        .setProperty(RunnerProperties.WORK_DIR, MavenProjectConverter.getSonarWorkDir(project).getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_BASEDIR, project.getBasedir().getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_VERSION, StringUtils.defaultString(project.getVersion()))\n        .setProperty(ScanProperties.PROJECT_NAME, StringUtils.defaultString(project.getName()))\n        .setProperty(ScanProperties.PROJECT_DESCRIPTION, StringUtils.defaultString(project.getDescription()))\n        .setProperty(ScanProperties.PROJECT_SOURCE_DIRS, \".\")\n        // Required to share ProjectBuilder extension between SonarMavenProjectBuilder and Sonar classloader\n        .setUnmaskedPackages(\"org.sonar.api.batch.bootstrap\")\n        .addExtensions(session, getLog(), lifecycleExecutor, artifactFactory, localRepository, artifactMetadataSource, artifactCollector,\n            dependencyTreeBuilder, projectBuilder, Maven2PluginExecutor.class, new SonarMaven2ProjectBuilder(session));\n    if (getLog().isDebugEnabled()) {\n      runner.setProperty(\"sonar.verbose\", \"true\");\n    }\n    runner.execute();\n  }","commit_id":"ceaddeb0db54d29fd67d11f23488f61f85041446","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    if (builder.environment != null) {\n      components.add(builder.environment);\n    }\n    if (builder.bootstrapProperties != null) {\n      bootstrapProperties.putAll(builder.bootstrapProperties);\n    } else {\n      // For backward compatibility, previously all properties were set in root project\n      bootstrapProperties.putAll(Maps.fromProperties(builder.projectReactor.getRoot().getProperties()));\n    }\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create().setProperties(bootstrapProperties);\n    }\n  }","id":64965,"modified_method":"private Batch(Builder builder) {\n    components = Lists.newArrayList();\n    components.addAll(builder.components);\n    if (builder.environment != null) {\n      components.add(builder.environment);\n    }\n    if (builder.bootstrapProperties != null) {\n      bootstrapProperties.putAll(builder.bootstrapProperties);\n    } else {\n      // For backward compatibility, previously all properties were set in root project\n      bootstrapProperties.putAll(Maps.fromProperties(builder.projectReactor.getRoot().getProperties()));\n    }\n    projectReactor = builder.projectReactor;\n    if (builder.isEnableLoggingConfiguration()) {\n      logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);\n    }\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"static LoggingConfiguration create() {\n    return new LoggingConfiguration();\n  }","id":64966,"modified_method":"private LoggingConfiguration(@Nullable EnvironmentInformation environment) {\n    setVerbose(false);\n    setShowSql(false);\n    if (environment != null && \"maven\".equalsIgnoreCase(environment.getKey())) {\n      setFormat(FORMAT_MAVEN);\n    }\n    else {\n      setFormat(FORMAT_DEFAULT);\n    }\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public LoggingConfiguration setFormat(String format) {\n    return addSubstitutionVariable(PROPERTY_FORMAT, StringUtils.defaultIfBlank(format, FORMAT_DEFAULT));\n  }","id":64967,"modified_method":"@VisibleForTesting\n  LoggingConfiguration setFormat(String format) {\n    return addSubstitutionVariable(PROPERTY_FORMAT, StringUtils.defaultIfBlank(format, FORMAT_DEFAULT));\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testDefaultFormat() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n  }","id":64968,"modified_method":"@Test\n  public void testDefaultFormat() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetVerbose() {\n    assertThat(LoggingConfiguration.create().setVerbose(true)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_VERBOSE));\n\n    assertThat(LoggingConfiguration.create().setVerbose(false)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setRootLevel(\"ERROR\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(\"ERROR\"));\n  }","id":64969,"modified_method":"@Test\n  public void testSetVerbose() {\n    assertThat(LoggingConfiguration.create(null).setVerbose(true)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);\n\n    assertThat(LoggingConfiguration.create(null).setVerbose(false)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setRootLevel(\"ERROR\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(\"ERROR\");\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetVerboseProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n\n    properties.put(\"sonar.verbose\", \"true\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_VERBOSE));\n\n    properties.put(\"sonar.verbose\", \"false\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n  }","id":64970,"modified_method":"@Test\n  public void testSetVerboseProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n\n    properties.put(\"sonar.verbose\", \"true\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);\n\n    properties.put(\"sonar.verbose\", \"false\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetShowSqlProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n\n    properties.put(\"sonar.showSql\", \"true\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_VERBOSE));\n\n    properties.put(\"sonar.showSql\", \"false\");\n    assertThat(LoggingConfiguration.create().setProperties(properties)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n  }","id":64971,"modified_method":"@Test\n  public void testSetShowSqlProperty() {\n    Map<String, String> properties = Maps.newHashMap();\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n\n    properties.put(\"sonar.showSql\", \"true\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_VERBOSE);\n\n    properties.put(\"sonar.showSql\", \"false\");\n    assertThat(LoggingConfiguration.create(null).setProperties(properties)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotSetBlankFormat() {\n    assertThat(LoggingConfiguration.create().setFormat(null)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setFormat(\"\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setFormat(\"   \")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(LoggingConfiguration.FORMAT_DEFAULT));\n  }","id":64972,"modified_method":"@Test\n  public void shouldNotSetBlankFormat() {\n    assertThat(LoggingConfiguration.create(null).setFormat(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setFormat(\"\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setFormat(\"   \")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(LoggingConfiguration.FORMAT_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSqlLevel() {\n    assertThat(LoggingConfiguration.create().setShowSql(true)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_VERBOSE));\n\n    assertThat(LoggingConfiguration.create().setShowSql(false)\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n\n    assertThat(LoggingConfiguration.create().setSqlLevel(\"ERROR\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(\"ERROR\"));\n  }","id":64973,"modified_method":"@Test\n  public void testSqlLevel() {\n    assertThat(LoggingConfiguration.create(null).setShowSql(true)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_VERBOSE);\n\n    assertThat(LoggingConfiguration.create(null).setShowSql(false)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n\n    assertThat(LoggingConfiguration.create(null).setSqlLevel(\"ERROR\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"ERROR\");\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotBeVerboseByDefault() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_ROOT_DEFAULT));\n  }","id":64974,"modified_method":"@Test\n  public void shouldNotBeVerboseByDefault() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldNotShowSqlByDefault() {\n    assertThat(LoggingConfiguration.create()\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL), Is.is(LoggingConfiguration.LEVEL_SQL_DEFAULT));\n  }","id":64975,"modified_method":"@Test\n  public void shouldNotShowSqlByDefault() {\n    assertThat(LoggingConfiguration.create(null)\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_SQL_DEFAULT);\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testSetFormat() {\n    assertThat(LoggingConfiguration.create().setFormat(\"%d %level\")\n      .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT), Is.is(\"%d %level\"));\n  }","id":64976,"modified_method":"@Test\n  public void testSetFormat() {\n    assertThat(LoggingConfiguration.create(null).setFormat(\"%d %level\")\n        .getSubstitutionVariable(LoggingConfiguration.PROPERTY_FORMAT)).isEqualTo(\"%d %level\");\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static void synchronizeFileSystem(MavenProject pom, DefaultModuleFileSystem into) {\n    into.resetDirs(\n      pom.getBasedir(),\n      resolvePath(pom.getBuild().getDirectory(), pom.getBasedir()),\n      resolvePaths((List<String>) pom.getCompileSourceRoots(), pom.getBasedir()),\n      resolvePaths((List<String>) pom.getTestCompileSourceRoots(), pom.getBasedir()),\n      Arrays.asList(resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir()))\n    );\n  }","id":64977,"modified_method":"public static void synchronizeFileSystem(MavenProject pom, DefaultModuleFileSystem into) {\n    into.resetDirs(\n        pom.getBasedir(),\n        getBuildDir(pom),\n        resolvePaths((List<String>) pom.getCompileSourceRoots(), pom.getBasedir()),\n        resolvePaths((List<String>) pom.getTestCompileSourceRoots(), pom.getBasedir()),\n        Arrays.asList(resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir()))\n        );\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static ProjectDefinition convert(List<MavenProject> poms, MavenProject root) {\n    // projects by canonical path to pom.xml\n    Map<String, MavenProject> paths = Maps.newHashMap();\n    Map<MavenProject, ProjectDefinition> defs = Maps.newHashMap();\n\n    try {\n      for (MavenProject pom : poms) {\n        paths.put(pom.getFile().getCanonicalPath(), pom);\n        defs.put(pom, convert(pom));\n      }\n\n      for (Map.Entry<String, MavenProject> entry : paths.entrySet()) {\n        MavenProject pom = entry.getValue();\n        for (Object m : pom.getModules()) {\n          String moduleId = (String) m;\n          File modulePath = new File(pom.getBasedir(), moduleId);\n          MavenProject module = findMavenProject(modulePath, paths);\n\n          ProjectDefinition parentProject = defs.get(pom);\n          if (parentProject == null) {\n            throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n          }\n          ProjectDefinition subProject = defs.get(module);\n          if (subProject == null) {\n            throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n          }\n          parentProject.addSubProject(subProject);\n        }\n      }\n    } catch (IOException e) {\n      throw new SonarException(e);\n    }\n\n    ProjectDefinition rootProject = defs.get(root);\n    if (rootProject == null) {\n      throw new IllegalStateException(UNABLE_TO_DETERMINE_PROJECT_STRUCTURE_EXCEPTION_MESSAGE);\n    }\n    return rootProject;\n  }","id":64978,"modified_method":"public static ProjectDefinition convert(List<MavenProject> poms, MavenProject root) {\n    ProjectDefinition def = ProjectDefinition.create();\n    configure(def, poms, root);\n    return def;\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  static ProjectDefinition convert(MavenProject pom) {\n    String key = new StringBuilder().append(pom.getGroupId()).append(\":\").append(pom.getArtifactId()).toString();\n    ProjectDefinition definition = ProjectDefinition.create();\n    // IMPORTANT NOTE : reference on properties from POM model must not be saved,\n    // instead they should be copied explicitly - see SONAR-2896\n    definition\n      .setProperties(pom.getModel().getProperties())\n      .setKey(key)\n      .setVersion(pom.getVersion())\n      .setName(pom.getName())\n      .setDescription(pom.getDescription())\n      .addContainerExtension(pom);\n    guessJavaVersion(pom, definition);\n    guessEncoding(pom, definition);\n    convertMavenLinksToProperties(definition, pom);\n    synchronizeFileSystem(pom, definition);\n    return definition;\n  }","id":64979,"modified_method":"public static String getSonarKey(MavenProject pom) {\n    return new StringBuilder().append(pom.getGroupId()).append(\":\").append(pom.getArtifactId()).toString();\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static void synchronizeFileSystem(MavenProject pom, ProjectDefinition into) {\n    into.setBaseDir(pom.getBasedir());\n    File buildDir = resolvePath(pom.getBuild().getDirectory(), pom.getBasedir());\n    if (buildDir != null) {\n      into.setBuildDir(buildDir);\n      into.setWorkDir(new File(buildDir, \"sonar\"));\n    }\n    into.setSourceDirs((String[]) pom.getCompileSourceRoots().toArray(new String[pom.getCompileSourceRoots().size()]));\n    into.setTestDirs((String[]) pom.getTestCompileSourceRoots().toArray(new String[pom.getTestCompileSourceRoots().size()]));\n    File binaryDir = resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir());\n    if (binaryDir != null) {\n      into.addBinaryDir(binaryDir);\n    }\n  }","id":64980,"modified_method":"public static void synchronizeFileSystem(MavenProject pom, ProjectDefinition into) {\n    into.setBaseDir(pom.getBasedir());\n    File buildDir = getBuildDir(pom);\n    if (buildDir != null) {\n      into.setBuildDir(buildDir);\n      into.setWorkDir(getSonarWorkDir(pom));\n    }\n    List<String> filteredCompileSourceRoots = filterExisting(pom.getCompileSourceRoots(), pom.getBasedir());\n    List<String> filteredTestCompileSourceRoots = filterExisting(pom.getTestCompileSourceRoots(), pom.getBasedir());\n    into.setSourceDirs((String[]) filteredCompileSourceRoots.toArray(new String[filteredCompileSourceRoots.size()]));\n    into.setTestDirs((String[]) filteredTestCompileSourceRoots.toArray(new String[filteredTestCompileSourceRoots.size()]));\n    File binaryDir = resolvePath(pom.getBuild().getOutputDirectory(), pom.getBasedir());\n    if (binaryDir != null) {\n      into.addBinaryDir(binaryDir);\n    }\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void shouldConvertProperties() {\n    MavenProject pom = new MavenProject();\n    pom.setGroupId(\"foo\");\n    pom.setArtifactId(\"bar\");\n    pom.setVersion(\"1.0.1\");\n    pom.setName(\"Test\");\n    pom.setDescription(\"just test\");\n    pom.setFile(new File(\"/foo/pom.xml\"));\n    pom.getBuild().setDirectory(\"target\");\n    ProjectDefinition project = MavenProjectConverter.convert(pom);\n\n    Properties properties = project.getProperties();\n    assertThat(properties.getProperty(CoreProperties.PROJECT_KEY_PROPERTY), is(\"foo:bar\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_VERSION_PROPERTY), is(\"1.0.1\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_NAME_PROPERTY), is(\"Test\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_DESCRIPTION_PROPERTY), is(\"just test\"));\n  }","id":64981,"modified_method":"@Test\n  public void shouldConvertProperties() {\n    MavenProject pom = new MavenProject();\n    pom.setGroupId(\"foo\");\n    pom.setArtifactId(\"bar\");\n    pom.setVersion(\"1.0.1\");\n    pom.setName(\"Test\");\n    pom.setDescription(\"just test\");\n    pom.setFile(new File(\"/foo/pom.xml\"));\n    pom.getBuild().setDirectory(\"target\");\n    ProjectDefinition project = ProjectDefinition.create();\n    MavenProjectConverter.merge(pom, project);\n\n    Properties properties = project.getProperties();\n    assertThat(properties.getProperty(CoreProperties.PROJECT_KEY_PROPERTY), is(\"foo:bar\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_VERSION_PROPERTY), is(\"1.0.1\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_NAME_PROPERTY), is(\"Test\"));\n    assertThat(properties.getProperty(CoreProperties.PROJECT_DESCRIPTION_PROPERTY), is(\"just test\"));\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);\n    ProjectReactor reactor = new ProjectReactor(def);\n\n    Batch batch = Batch.builder()\n      .setEnvironment(getEnvironmentInformation())\n      .setProjectReactor(reactor)\n      .addComponents(\n        session, getLog(), lifecycleExecutor, pluginManager, artifactFactory,\n        localRepository, artifactMetadataSource, artifactCollector, dependencyTreeBuilder,\n        projectBuilder, Maven2PluginExecutor.class)\n      .build();\n\n    configureLogging(batch.getLoggingConfiguration());\n    batch.execute();\n  }","id":64982,"modified_method":"public void execute() throws MojoExecutionException, MojoFailureException {\n\n    EmbeddedRunner runner = EmbeddedRunner.create()\n        .setApp(\"Maven\", getMavenVersion());\n    Set<Entry<Object, Object>> properties = project.getModel().getProperties().entrySet();\n    for (Entry<Object, Object> entry : properties) {\n      runner.setProperty(toString(entry.getKey()), toString(entry.getValue()));\n    }\n    String encoding = getSourceEncoding(project);\n    if (encoding != null) {\n      runner.setProperty(ScanProperties.PROJECT_SOURCE_ENCODING, encoding);\n    }\n    runner\n        .setProperty(ScanProperties.PROJECT_KEY, getSonarKey(project))\n        .setProperty(RunnerProperties.WORK_DIR, getSonarWorkDir(project).getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_BASEDIR, project.getBasedir().getAbsolutePath())\n        .setProperty(ScanProperties.PROJECT_VERSION, toString(project.getVersion()))\n        .setProperty(ScanProperties.PROJECT_NAME, toString(project.getName()))\n        .setProperty(ScanProperties.PROJECT_DESCRIPTION, toString(project.getDescription()))\n        .setProperty(ScanProperties.PROJECT_SOURCE_DIRS, \".\");\n    // Exclude log implementation to not conflict with Maven 3.1 logging impl\n    runner.mask(\"org.slf4j.LoggerFactory\")\n        // Include slf4j Logger that is exposed by some Sonar components\n        .unmask(\"org.slf4j.Logger\")\n        .unmask(\"org.slf4j.ILoggerFactory\")\n        // Exclude other slf4j classes\n        // .unmask(\"org.slf4j.impl.\")\n        .mask(\"org.slf4j.\")\n        // Exclude logback\n        .mask(\"ch.qos.logback.\");\n    runner.mask(\"org.sonar.\");\n    // Include everything else\n    runner.unmask(\"\")\n        .addExtensions(session, getLog(), lifecycleExecutor, artifactFactory, localRepository, artifactMetadataSource, artifactCollector,\n            dependencyTreeBuilder, projectBuilder);\n    if (getLog().isDebugEnabled()) {\n      runner.setProperty(\"sonar.verbose\", \"true\");\n    }\n    runner.execute();\n  }","commit_id":"a52fbd8cd565f58464635906c54db7db87b3be77","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static boolean isSuitableForClass(PsiElement position) {\n    if (psiElement().afterLeaf(\"@\").accepts(position) ||\n        PsiTreeUtil.getNonStrictParentOfType(position, PsiLiteralExpression.class, PsiComment.class) != null) {\n      return false;\n    }\n\n    if (psiElement().afterLeaf(\n      or(\n        psiElement().withoutText(\".\").inside(psiElement(PsiModifierList.class).withParent(not(psiElement(PsiParameter.class)))).andNot(\n          psiElement().inside(PsiAnnotationParameterList.class)),\n        psiElement().isNull())).accepts(position)) {\n      return true;\n    }\n\n    return END_OF_BLOCK.isAcceptable(position, position);\n  }","id":64983,"modified_method":"public static boolean isSuitableForClass(PsiElement position) {\n    if (psiElement().afterLeaf(\"@\").accepts(position) ||\n        PsiTreeUtil.getNonStrictParentOfType(position, PsiLiteralExpression.class, PsiComment.class) != null) {\n      return false;\n    }\n\n    PsiElement prev = PsiTreeUtil.prevVisibleLeaf(position);\n    if (prev == null) {\n      return true;\n    }\n    if (psiElement().withoutText(\".\").inside(\n      psiElement(PsiModifierList.class).withParent(\n        not(psiElement(PsiParameter.class)).andNot(psiElement(PsiParameterList.class)))).accepts(prev) &&\n        !psiElement().inside(PsiAnnotationParameterList.class).accepts(prev)) {\n      return true;\n    }\n\n    return END_OF_BLOCK.isAcceptable(position, position);\n  }","commit_id":"a9b4cd8d4f72963714a5a1db32680cd526607c17","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Integer weigh(@NotNull final LookupElement element, final CompletionLocation location) {\n    if (location.getCompletionType() != CompletionType.BASIC && location.getCompletionType() != CompletionType.SMART) return 0;\n    if (!(element instanceof MutableLookupElement)) return 0;\n\n    final Object object = ((MutableLookupElement)element).getObject();\n    if (!(object instanceof PsiModifierListOwner) && !(object instanceof PsiExpression)) return 0;\n\n    final PsiMethod positionMethod = JavaCompletionUtil.POSITION_METHOD.getValue(location);\n    if (positionMethod == null) return 0;\n\n    final PsiElement position = location.getCompletionParameters().getPosition();\n    final PsiMethodCallExpression expression = PsiTreeUtil.getParentOfType(position, PsiMethodCallExpression.class, true, PsiClass.class);\n    final PsiReferenceExpression reference = expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position, PsiReferenceExpression.class);\n    if (reference == null) return 0;\n\n    final PsiExpression qualifier = reference.getQualifierExpression();\n    boolean isDelegate = qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression);\n    if (expression != null) {\n      final ExpectedTypeInfo[] expectedInfos = JavaCompletionUtil.EXPECTED_TYPES.getValue(location);\n      if (expectedInfos != null) {\n        final PsiType itemType = JavaCompletionUtil.getPsiType(object);\n        if (itemType != null) {\n          for (final ExpectedTypeInfo expectedInfo : expectedInfos) {\n            if (positionMethod.equals(expectedInfo.getCalledMethod()) && expectedInfo.getType().isAssignableFrom(itemType)) {\n              return isDelegate ? 2 : -1;\n            }\n          }\n        }\n      }\n      return 0;\n    }\n\n    if (positionMethod.equals(object) && PsiTreeUtil.isAncestor(positionMethod, position, false) && PsiTreeUtil.isAncestor(reference, position, false)) {\n      return isDelegate ? 2 : -1;\n    }\n\n    return 1;\n  }","id":64984,"modified_method":"public Integer weigh(@NotNull final LookupElement element, final CompletionLocation location) {\n    if (location.getCompletionType() != CompletionType.BASIC && location.getCompletionType() != CompletionType.SMART) return 0;\n    if (!(element instanceof MutableLookupElement)) return 0;\n\n    final Object object = ((MutableLookupElement)element).getObject();\n    if (!(object instanceof PsiModifierListOwner) && !(object instanceof PsiExpression)) return 0;\n\n    final PsiMethod positionMethod = JavaCompletionUtil.POSITION_METHOD.getValue(location);\n    if (positionMethod == null) return 0;\n\n    final PsiElement position = location.getCompletionParameters().getPosition();\n    final PsiMethodCallExpression expression = PsiTreeUtil.getParentOfType(position, PsiMethodCallExpression.class, true, PsiClass.class);\n    final PsiReferenceExpression reference = expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position, PsiReferenceExpression.class);\n    if (reference == null) return 0;\n\n    final PsiExpression qualifier = reference.getQualifierExpression();\n    boolean isDelegate = qualifier != null && !(qualifier instanceof PsiThisExpression);\n    if (expression != null) {\n      final ExpectedTypeInfo[] expectedInfos = JavaCompletionUtil.EXPECTED_TYPES.getValue(location);\n      if (expectedInfos != null) {\n        final PsiType itemType = JavaCompletionUtil.getPsiType(object);\n        if (itemType != null) {\n          for (final ExpectedTypeInfo expectedInfo : expectedInfos) {\n            if (positionMethod.equals(expectedInfo.getCalledMethod()) && expectedInfo.getType().isAssignableFrom(itemType)) {\n              return isDelegate ? 2 : -1;\n            }\n          }\n        }\n      }\n      return 0;\n    }\n\n    if (object instanceof PsiMethod) {\n      final PsiMethod method = (PsiMethod)object;\n      if (PsiTreeUtil.isAncestor(reference, position, false) &&\n          Comparing.equal(method.getName(), positionMethod.getName()) &&\n          method.getParameterList().getParametersCount() == positionMethod.getParameterList().getParametersCount()) {\n        if (findDeepestSuper(method).equals(findDeepestSuper(positionMethod))) {\n          return isDelegate ? 2 : -1;\n        }\n      }\n    }\n\n    return 1;\n  }","commit_id":"56797ff051e52419099b1402b7605a6ad9dfbf10","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static Pair<ElementFilter, TailType> getReferenceFilter(PsiElement element, boolean second) {\n    //throw foo\n    if (psiElement().withParent(psiElement(PsiReferenceExpression.class).withParent(PsiThrowStatement.class)).accepts(element)) {\n      return new Pair<ElementFilter, TailType>(TrueFilter.INSTANCE, TailType.SEMICOLON);\n    }\n\n    if (psiElement().afterLeaf(PsiKeyword.RETURN).inside(PsiReturnStatement.class).accepts(element) && !second) {\n      return new Pair<ElementFilter, TailType>(new ElementExtractorFilter(new ExcludeDeclaredFilter(new ClassFilter(PsiMethod.class))\n      ), TailType.SEMICOLON);\n    }\n\n    if (psiElement().inside(\n        PsiJavaPatterns.or(\n            psiElement(PsiAnnotationParameterList.class),\n            psiElement(PsiSwitchLabelStatement.class))\n    ).accepts(element)) {\n      return new Pair<ElementFilter, TailType>(new ElementExtractorFilter(new AndFilter(\n          new ClassFilter(PsiField.class),\n          new ModifierFilter(PsiKeyword.STATIC, PsiKeyword.FINAL)\n      )), TailType.NONE);\n    }\n\n    if (psiElement().inside(PsiJavaPatterns.psiElement(PsiVariable.class)).accepts(element)) {\n      return new Pair<ElementFilter, TailType>(\n          new AndFilter(new ElementExtractorFilter(new ExcludeDeclaredFilter(new ClassFilter(PsiVariable.class))),\n                        new ElementExtractorFilter(new ExcludeSillyAssignment())), TailType.NONE);\n    }\n\n    return new Pair<ElementFilter, TailType>(new ElementExtractorFilter(new ExcludeSillyAssignment()), TailType.NONE);\n  }","id":64985,"modified_method":"@NotNull \n  private static Pair<ElementFilter, TailType> getReferenceFilter(PsiElement element, boolean secondBase, boolean secondChain) {\n    //throw foo\n    if (psiElement().withParent(psiElement(PsiReferenceExpression.class).withParent(PsiThrowStatement.class)).accepts(element)) {\n      return new Pair<ElementFilter, TailType>(TrueFilter.INSTANCE, TailType.SEMICOLON);\n    }\n\n    if (psiElement().afterLeaf(PsiKeyword.RETURN).inside(PsiReturnStatement.class).accepts(element) && !secondBase && !secondChain) {\n      return new Pair<ElementFilter, TailType>(new ElementExtractorFilter(new ExcludeDeclaredFilter(new ClassFilter(PsiMethod.class))\n      ), TailType.SEMICOLON);\n    }\n\n    if (psiElement().inside(\n        PsiJavaPatterns.or(\n            psiElement(PsiAnnotationParameterList.class),\n            psiElement(PsiSwitchLabelStatement.class))\n    ).accepts(element)) {\n      return new Pair<ElementFilter, TailType>(new ElementExtractorFilter(new AndFilter(\n          new ClassFilter(PsiField.class),\n          new ModifierFilter(PsiKeyword.STATIC, PsiKeyword.FINAL)\n      )), TailType.NONE);\n    }\n\n    if (psiElement().inside(\n        PsiJavaPatterns.or(\n            PsiJavaPatterns.psiElement(PsiAssignmentExpression.class),\n            PsiJavaPatterns.psiElement(PsiVariable.class))).\n        andNot(psiElement().afterLeaf(\".\")).accepts(element) &&\n        (secondBase || !secondChain)) {\n      return new Pair<ElementFilter, TailType>(\n          new ElementExtractorFilter(new AndFilter(new ExcludeSillyAssignment(),\n                                                   new ExcludeDeclaredFilter(new ClassFilter(PsiVariable.class)))),\n          TailType.NONE);\n    }\n\n    return new Pair<ElementFilter, TailType>(TrueFilter.INSTANCE, TailType.NONE);\n  }","commit_id":"56797ff051e52419099b1402b7605a6ad9dfbf10","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean fillCompletionVariants(final JavaSmartCompletionParameters parameters, final CompletionResultSet result) {\n    ApplicationManager.getApplication().runReadAction(new Runnable() {\n      public void run() {\n        final PsiElement element = parameters.getPosition();\n        if (psiElement().afterLeaf(psiElement().withText(\")\").withParent(PsiTypeCastExpression.class)).accepts(element)) return;\n\n        final int offset = parameters.getOffset();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(offset);\n        if (reference != null) {\n          final Pair<ElementFilter, TailType> pair = getReferenceFilter(element, false);\n          if (pair != null) {\n            final PsiFile originalFile = parameters.getOriginalFile();\n            final TailType tailType = pair.second;\n            final ElementFilter filter = pair.first;\n            final THashSet<LookupItem> set = JavaSmartCompletionContributor.completeReference(element, reference, originalFile, tailType, filter, result);\n            for (final LookupItem item : set) {\n              result.addElement(item);\n            }\n\n            if (parameters.getInvocationCount() >= 2) {\n              ElementFilter baseFilter = getReferenceFilter(element, true).first;\n              final PsiClassType stringType = PsiType.getJavaLangString(element.getManager(), element.getResolveScope());\n              for (final LookupItem<?> baseItem : JavaSmartCompletionContributor.completeReference(element, reference, originalFile, tailType, baseFilter, result)) {\n                final Object object = baseItem.getObject();\n                final String prefix = getItemText(object);\n                if (prefix == null) continue;\n\n                final PsiSubstitutor substitutor = (PsiSubstitutor)baseItem.getAttribute(LookupItem.SUBSTITUTOR);\n                try {\n                  PsiType itemType = object instanceof PsiVariable ? ((PsiVariable) object).getType() :\n                                     object instanceof PsiMethod ? ((PsiMethod) object).getReturnType() : null;\n                  if (substitutor != null) {\n                    itemType = substitutor.substitute(itemType);\n                  }\n                  if (itemType == null) continue;\n\n                  final PsiElement qualifier = getQualifier(reference.getElement());\n                  if (!OBJECT_METHOD_PATTERN.accepts(object) || allowGetClass(object, parameters)) {\n                    if (!stringType.equals(itemType)) {\n                      addChainedCallVariants(element, originalFile, tailType, baseFilter, prefix, substitutor, qualifier, result);\n                    }\n                  }\n\n                  addArraysAsListConversions(element, prefix, itemType, parameters, result, qualifier);\n\n                  addToArrayConversions(element, object, prefix, itemType, parameters, result, qualifier);\n                }\n                catch (IncorrectOperationException e) {\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    return true;\n  }","id":64986,"modified_method":"public boolean fillCompletionVariants(final JavaSmartCompletionParameters parameters, final CompletionResultSet result) {\n    ApplicationManager.getApplication().runReadAction(new Runnable() {\n      public void run() {\n        final PsiElement element = parameters.getPosition();\n        if (psiElement().afterLeaf(psiElement().withText(\")\").withParent(PsiTypeCastExpression.class)).accepts(element)) return;\n\n        final int offset = parameters.getOffset();\n        final PsiReference reference = element.getContainingFile().findReferenceAt(offset);\n        if (reference != null) {\n          final Pair<ElementFilter, TailType> pair = getReferenceFilter(element, false, false);\n          if (pair != null) {\n            final PsiFile originalFile = parameters.getOriginalFile();\n            final TailType tailType = pair.second;\n            final ElementFilter filter = pair.first;\n            final THashSet<LookupItem> set = JavaSmartCompletionContributor.completeReference(element, reference, originalFile, tailType, filter, result);\n            for (final LookupItem item : set) {\n              result.addElement(item);\n            }\n\n            if (parameters.getInvocationCount() >= 2) {\n              ElementFilter baseFilter = getReferenceFilter(element, true, false).first;\n              final PsiClassType stringType = PsiType.getJavaLangString(element.getManager(), element.getResolveScope());\n              for (final LookupItem<?> baseItem : JavaSmartCompletionContributor.completeReference(element, reference, originalFile, tailType, baseFilter, result)) {\n                final Object object = baseItem.getObject();\n                final String prefix = getItemText(object);\n                if (prefix == null) continue;\n\n                final PsiSubstitutor substitutor = (PsiSubstitutor)baseItem.getAttribute(LookupItem.SUBSTITUTOR);\n                try {\n                  PsiType itemType = object instanceof PsiVariable ? ((PsiVariable) object).getType() :\n                                     object instanceof PsiMethod ? ((PsiMethod) object).getReturnType() : null;\n                  if (substitutor != null) {\n                    itemType = substitutor.substitute(itemType);\n                  }\n                  if (itemType == null) continue;\n\n                  final PsiElement qualifier = getQualifier(reference.getElement());\n                  if (!OBJECT_METHOD_PATTERN.accepts(object) || allowGetClass(object, parameters)) {\n                    if (!stringType.equals(itemType)) {\n                      addChainedCallVariants(element, originalFile, tailType, getReferenceFilter(element, true, true).first, prefix, substitutor, qualifier, result);\n                    }\n                  }\n\n                  addArraysAsListConversions(element, prefix, itemType, parameters, result, qualifier);\n\n                  addToArrayConversions(element, object, prefix, itemType, parameters, result, qualifier);\n                }\n                catch (IncorrectOperationException e) {\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    return true;\n  }","commit_id":"56797ff051e52419099b1402b7605a6ad9dfbf10","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public ThreeState shouldSkipAutopopup(@NotNull PsiElement contextElement, @NotNull PsiFile psiFile, int offset) {\n    if (psiElement().inside(PsiDocTag.class).inside(\n      or(psiElement(PsiJavaCodeReferenceElement.class), psiElement(PsiDocMethodOrFieldRef.class)))\n      .accepts(contextElement)) {\n      return ThreeState.NO;\n    }\n    if (PlatformPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME).accepts(contextElement)) {\n      return ThreeState.NO;\n    }\n    return super.shouldSkipAutopopup(contextElement, psiFile, offset);\n  }","id":64987,"modified_method":"@NotNull\n  @Override\n  public ThreeState shouldSkipAutopopup(@NotNull PsiElement contextElement, @NotNull PsiFile psiFile, int offset) {\n    if (psiElement().inside(PsiDocTag.class).accepts(contextElement) && findJavaReference(psiFile, offset - 1) != null) {\n      return ThreeState.NO;\n    }\n    if (PlatformPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME).accepts(contextElement)) {\n      return ThreeState.NO;\n    }\n    return super.shouldSkipAutopopup(contextElement, psiFile, offset);\n  }","commit_id":"5a5f2b75417f71da7742fa920f24d030e8bf4d27","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"synchronized OpennetPeerNode peerToDrop(boolean noDisconnect, boolean force, boolean addingNode, ConnectionType connectionType) {\n\t\tif(getSize() < getNumberOfConnectedPeersToAim()) {\n\t\t\t// Don't drop any peers\n\t\t\tif(logMINOR) Logger.minor(this, \"peerToDrop(): Not dropping any peer (force=\"+force+\" addingNode=\"+addingNode+\") because don't need to\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tEnumMap<NOT_DROP_REASON, Integer> map = null;\n\t\t\tif(addingNode) map = new EnumMap<NOT_DROP_REASON, Integer>(NOT_DROP_REASON.class);\n\t\t\t// Do we want it?\n\t\t\tOpennetPeerNode[] peers = peersLRU.toArrayOrdered(new OpennetPeerNode[peersLRU.size()]);\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tif(pn.isConnected() && pn.isUnroutableOlderVersion()) {\n\t\t\t\t\t// Doesn't count towards the opennet peers limit, so no point dropping it.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && !force) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// LOCKING: Always take the OpennetManager lock first\n\t\t\t\tif(!pn.isConnected()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" as is disconnected\");\n\t\t\t\t\tpn.setWasDropped();\n\t\t\t\t\treturn pn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(noDisconnect) {\n\t\t\t\tif(addingNode && logMINOR) {\n\t\t\t\t\tLogger.minor(this, \"Not disconnecting\");\n\t\t\t\t\tif(map != null)\n\t\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(map != null) map.clear();\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tif(pn.isConnected() && pn.isUnroutableOlderVersion()) {\n\t\t\t\t\t// Doesn't count anyway.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && !force) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" \"+\n\t\t\t\t\t\t\t((connectionType == null) ? \"\" : ((System.currentTimeMillis() - timeLastDropped.get(connectionType))+\" ms since last dropped peer of type \"+connectionType)));\n\t\t\t\tpn.setWasDropped();\n\t\t\t\treturn pn;\n\t\t\t}\n\t\t\tif(addingNode && logMINOR) {\n\t\t\t\tLogger.minor(this, \"Nothing to drop\");\n\t\t\t\tif(map != null)\n\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":64988,"modified_method":"synchronized OpennetPeerNode peerToDrop(boolean noDisconnect, boolean force, boolean addingNode, ConnectionType connectionType) {\n\t\tif(getSize() < getNumberOfConnectedPeersToAim()) {\n\t\t\t// Don't drop any peers\n\t\t\tif(logMINOR) Logger.minor(this, \"peerToDrop(): Not dropping any peer (force=\"+force+\" addingNode=\"+addingNode+\") because don't need to\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tEnumMap<NOT_DROP_REASON, Integer> map = null;\n\t\t\tif(addingNode) map = new EnumMap<NOT_DROP_REASON, Integer>(NOT_DROP_REASON.class);\n\t\t\t// Do we want it?\n\t\t\tOpennetPeerNode[] peers = peersLRU.toArrayOrdered(new OpennetPeerNode[peersLRU.size()]);\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tboolean tooOld = pn.isUnroutableOlderVersion();\n\t\t\t\tif(pn.isConnected() && tooOld) {\n\t\t\t\t\t// Doesn't count towards the opennet peers limit, so no point dropping it.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\t// Over the limit does not force us to drop TOO OLD peers since they don't count towards the limit.\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && ((!force) || tooOld)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// LOCKING: Always take the OpennetManager lock first\n\t\t\t\tif(!pn.isConnected()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" as is disconnected\");\n\t\t\t\t\tpn.setWasDropped();\n\t\t\t\t\treturn pn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(noDisconnect) {\n\t\t\t\tif(addingNode && logMINOR) {\n\t\t\t\t\tLogger.minor(this, \"Not disconnecting\");\n\t\t\t\t\tif(map != null)\n\t\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(map != null) map.clear();\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tboolean tooOld = pn.isUnroutableOlderVersion();\n\t\t\t\tif(pn.isConnected() && tooOld) {\n\t\t\t\t\t// Doesn't count anyway.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\t// Over the limit does not force us to drop TOO OLD peers since they don't count towards the limit.\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && ((!force) || tooOld)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" \"+\n\t\t\t\t\t\t\t((connectionType == null) ? \"\" : ((System.currentTimeMillis() - timeLastDropped.get(connectionType))+\" ms since last dropped peer of type \"+connectionType)));\n\t\t\t\tpn.setWasDropped();\n\t\t\t\treturn pn;\n\t\t\t}\n\t\t\tif(addingNode && logMINOR) {\n\t\t\t\tLogger.minor(this, \"Nothing to drop\");\n\t\t\t\tif(map != null)\n\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"487b2b21541c2ab7cd102165ee70651fac76aeb0","url":"https://github.com/freenet/fred"},{"original_method":"synchronized OpennetPeerNode peerToDrop(boolean noDisconnect, boolean force, boolean addingNode, ConnectionType connectionType) {\n\t\tif(getSize() < getNumberOfConnectedPeersToAim()) {\n\t\t\t// Don't drop any peers\n\t\t\tif(logMINOR) Logger.minor(this, \"peerToDrop(): Not dropping any peer (force=\"+force+\" addingNode=\"+addingNode+\") because don't need to\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tEnumMap<NOT_DROP_REASON, Integer> map = null;\n\t\t\tif(addingNode) map = new EnumMap<NOT_DROP_REASON, Integer>(NOT_DROP_REASON.class);\n\t\t\t// Do we want it?\n\t\t\tOpennetPeerNode[] peers = peersLRU.toArrayOrdered(new OpennetPeerNode[peersLRU.size()]);\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tif(pn.isConnected() && pn.isUnroutableOlderVersion()) {\n\t\t\t\t\t// Doesn't count towards the opennet peers limit, so no point dropping it.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && !force) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// LOCKING: Always take the OpennetManager lock first\n\t\t\t\tif(!pn.isConnected()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" as is disconnected\");\n\t\t\t\t\tpn.setWasDropped();\n\t\t\t\t\treturn pn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(noDisconnect) {\n\t\t\t\tif(addingNode && logMINOR) {\n\t\t\t\t\tLogger.minor(this, \"Not disconnecting\");\n\t\t\t\t\tif(map != null)\n\t\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(map != null) map.clear();\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tif(pn.isConnected() && pn.isUnroutableOlderVersion()) {\n\t\t\t\t\t// Doesn't count anyway.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && !force) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" \"+\n\t\t\t\t\t\t\t((connectionType == null) ? \"\" : ((System.currentTimeMillis() - timeLastDropped.get(connectionType))+\" ms since last dropped peer of type \"+connectionType)));\n\t\t\t\tpn.setWasDropped();\n\t\t\t\treturn pn;\n\t\t\t}\n\t\t\tif(addingNode && logMINOR) {\n\t\t\t\tLogger.minor(this, \"Nothing to drop\");\n\t\t\t\tif(map != null)\n\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":64989,"modified_method":"synchronized OpennetPeerNode peerToDrop(boolean noDisconnect, boolean force, boolean addingNode, ConnectionType connectionType) {\n\t\tif(getSize() < getNumberOfConnectedPeersToAim()) {\n\t\t\t// Don't drop any peers\n\t\t\tif(logMINOR) Logger.minor(this, \"peerToDrop(): Not dropping any peer (force=\"+force+\" addingNode=\"+addingNode+\") because don't need to\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tEnumMap<NOT_DROP_REASON, Integer> map = null;\n\t\t\tif(addingNode) map = new EnumMap<NOT_DROP_REASON, Integer>(NOT_DROP_REASON.class);\n\t\t\t// Do we want it?\n\t\t\tOpennetPeerNode[] peers = peersLRU.toArrayOrdered(new OpennetPeerNode[peersLRU.size()]);\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tboolean tooOld = pn.isUnroutableOlderVersion();\n\t\t\t\tif(pn.isConnected() && tooOld) {\n\t\t\t\t\t// Doesn't count towards the opennet peers limit, so no point dropping it.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\t// Over the limit does not force us to drop TOO OLD peers since they don't count towards the limit.\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && ((!force) || tooOld)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// LOCKING: Always take the OpennetManager lock first\n\t\t\t\tif(!pn.isConnected()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" as is disconnected\");\n\t\t\t\t\tpn.setWasDropped();\n\t\t\t\t\treturn pn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(noDisconnect) {\n\t\t\t\tif(addingNode && logMINOR) {\n\t\t\t\t\tLogger.minor(this, \"Not disconnecting\");\n\t\t\t\t\tif(map != null)\n\t\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(map != null) map.clear();\n\t\t\tfor(int i=0;i<peers.length;i++) {\n\t\t\t\tOpennetPeerNode pn = peers[i];\n\t\t\t\tif(pn == null) continue;\n\t\t\t\tboolean tooOld = pn.isUnroutableOlderVersion();\n\t\t\t\tif(pn.isConnected() && tooOld) {\n\t\t\t\t\t// Doesn't count anyway.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tNOT_DROP_REASON reason = pn.isDroppableWithReason(false);\n\t\t\t\tif(map != null) {\n\t\t\t\t\tInteger x = map.get(reason);\n\t\t\t\t\tif(x == null)\n\t\t\t\t\t\tmap.put(reason, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tmap.put(reason, x+1);\n\t\t\t\t}\n\t\t\t\t// Over the limit does not force us to drop TOO OLD peers since they don't count towards the limit.\n\t\t\t\tif((reason != NOT_DROP_REASON.DROPPABLE) && ((!force) || tooOld)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Possibly dropping opennet peer \"+pn+\" \"+\n\t\t\t\t\t\t\t((connectionType == null) ? \"\" : ((System.currentTimeMillis() - timeLastDropped.get(connectionType))+\" ms since last dropped peer of type \"+connectionType)));\n\t\t\t\tpn.setWasDropped();\n\t\t\t\treturn pn;\n\t\t\t}\n\t\t\tif(addingNode && logMINOR) {\n\t\t\t\tLogger.minor(this, \"Nothing to drop\");\n\t\t\t\tif(map != null)\n\t\t\t\t\tfor(Map.Entry<NOT_DROP_REASON, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\tLogger.minor(this, \"\"+entry.getKey()+\" : \"+entry.getValue());\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"41f942231070eb54d692f2eb390d89edc3b79d07","url":"https://github.com/freenet/fred"},{"original_method":"public GradleAdjustImportSettingsStep(WizardContext context) {\n    super(context);\n\n    // Init.\n    myTree.setShowsRootHandles(true);\n\n    myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {\n      @Override\n      public void valueChanged(TreeSelectionEvent e) {\n        Object node = myTree.getLastSelectedPathComponent();\n        String cardName = myCards.get(node);\n        if (cardName == null) {\n          cardName = EMPTY_CARD_NAME;\n        }\n        mySettingsCardLayout.show(mySettingsPanel, cardName);\n      }\n    });\n    \n    // Setup GUI.\n    JPanel leftPanel = new JPanel(new GridBagLayout());\n    JPanel rightPanel = new JPanel(new GridBagLayout());\n    \n    GridBagConstraints constraints = new GridBagConstraints();\n    constraints.weightx = 1;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.insets = new Insets(5, 5, 5, 5);\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    leftPanel.add(new JLabel(GradleBundle.message(\"gradle.import.label.project.structure\")), constraints);\n    \n    constraints = new GridBagConstraints();\n    constraints.weightx = constraints.weighty = 1;\n    constraints.fill = GridBagConstraints.BOTH;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    leftPanel.add(new JBScrollPane(myTree), constraints);\n    \n    myComponent.add(leftPanel);\n\n    constraints = new GridBagConstraints();\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.insets = new Insets(5, 10, 5, 5);\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    rightPanel.add(new JLabel(GradleBundle.message(\"gradle.import.label.details\")), constraints);\n\n    constraints = new GridBagConstraints();\n    constraints.weightx = constraints.weighty = 1;\n    constraints.fill = GridBagConstraints.BOTH;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    constraints.insets.left = 10;\n    rightPanel.add(mySettingsPanel, constraints);\n    \n    myComponent.add(rightPanel);\n  }","id":64990,"modified_method":"public GradleAdjustImportSettingsStep(WizardContext context) {\n    super(context);\n\n    // Init.\n    myTree.setShowsRootHandles(true);\n\n    myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {\n      private boolean myIgnore;\n      @SuppressWarnings(\"SuspiciousMethodCalls\")\n      @Override\n      public void valueChanged(TreeSelectionEvent e) {\n        if (myIgnore) {\n          return;\n        }\n\n        TreePath oldPath = e.getOldLeadSelectionPath();\n        if (oldPath == null) {\n          onNodeChange();\n          return;\n        }\n        Object oldNode = oldPath.getLastPathComponent();\n        if (oldNode == null) {\n          onNodeChange();\n          return;\n        } \n        \n        Pair<String, GradleProjectStructureNodeSettings> pair = myCards.get(oldNode);\n        if (pair == null || pair.second.validate()) {\n          onNodeChange();\n          return;\n        }\n        \n        myIgnore = true;\n        try {\n          myTree.getSelectionModel().setSelectionPath(oldPath);\n        }\n        finally {\n          myIgnore = false;\n        }\n      }\n\n      @SuppressWarnings(\"SuspiciousMethodCalls\")\n      private void onNodeChange() {\n        Object node = myTree.getLastSelectedPathComponent();\n        Pair<String, GradleProjectStructureNodeSettings> pair = myCards.get(node);\n        String cardName = pair == null ? EMPTY_CARD_NAME : pair.first;\n        mySettingsCardLayout.show(mySettingsPanel, cardName);\n      }\n    });\n    \n    // Setup GUI.\n    JPanel leftPanel = new JPanel(new GridBagLayout());\n    JPanel rightPanel = new JPanel(new GridBagLayout());\n    \n    GridBagConstraints constraints = new GridBagConstraints();\n    constraints.weightx = 1;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.insets = new Insets(5, 5, 5, 5);\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    leftPanel.add(new JLabel(GradleBundle.message(\"gradle.import.label.project.structure\")), constraints);\n    \n    constraints = new GridBagConstraints();\n    constraints.weightx = constraints.weighty = 1;\n    constraints.fill = GridBagConstraints.BOTH;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    leftPanel.add(new JBScrollPane(myTree), constraints);\n    \n    myComponent.add(leftPanel);\n\n    constraints = new GridBagConstraints();\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.insets = new Insets(5, 10, 5, 5);\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    rightPanel.add(new JLabel(GradleBundle.message(\"gradle.import.label.details\")), constraints);\n\n    constraints = new GridBagConstraints();\n    constraints.weightx = constraints.weighty = 1;\n    constraints.fill = GridBagConstraints.BOTH;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n    constraints.gridwidth = GridBagConstraints.REMAINDER;\n    constraints.insets.left = 10;\n    rightPanel.add(mySettingsPanel, constraints);\n    \n    myComponent.add(rightPanel);\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void updateStep() {\n    myCards.clear();\n    mySettingsPanel.removeAll();\n    mySettingsPanel.add(new JPanel(), EMPTY_CARD_NAME);\n    \n    GradleProject project = getBuilder().getGradleProject();\n    if (project == null) {\n      throw new IllegalStateException(String.format(\n        \"Can't init 'adjust importing settings' step. Reason: no project is defined. Context: '%s', builder: '%s'\",\n        getContext(), getBuilder()\n      ));\n    }\n\n    Map<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>> entity2nodes\n      = new HashMap<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>>();\n    int counter = 0;\n    DefaultMutableTreeNode root = buildNode(project, entity2nodes, counter++);\n    \n    for (GradleModule module : project.getModules()) {\n      DefaultMutableTreeNode moduleNode = buildNode(module, entity2nodes, counter++);\n      root.add(moduleNode);\n      Collection<GradleDependency> dependencies = module.getDependencies();\n      if (!dependencies.isEmpty()) {\n        DefaultMutableTreeNode dependenciesNode\n          = new DefaultMutableTreeNode(GradleBundle.message(\"gradle.import.structure.tree.node.dependencies\"));\n        for (GradleDependency dependency : dependencies) {\n          dependenciesNode.add(buildNode(dependency, entity2nodes, counter++));\n        }\n        moduleNode.add(dependenciesNode);\n      } \n    }\n    myTreeModel.setRoot(root);\n    myTree.setSelectionPath(new TreePath(root));\n  }","id":64991,"modified_method":"@Override\n  public void updateStep() {\n    if (myOnValidateAttempt) {\n      // We assume that this method is called when project validation triggered by end-user fails (he or she pressed 'Next'/'Finish' \n      // button at the wizard and current state is invalid). So, there is no need to rebuild the model then.\n      myOnValidateAttempt = false;\n      return;\n    }\n\n    myCards.clear();\n    mySettingsPanel.removeAll();\n    mySettingsPanel.add(new JPanel(), EMPTY_CARD_NAME);\n\n    GradleProject project = getBuilder().getGradleProject();\n    if (project == null) {\n      throw new IllegalStateException(String.format(\n        \"Can't init 'adjust importing settings' step. Reason: no project is defined. Context: '%s', builder: '%s'\",\n        getContext(), getBuilder()\n      ));\n    }\n\n    Map<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>> entity2nodes\n      = new HashMap<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>>();\n    int counter = 0;\n    DefaultMutableTreeNode root = buildNode(project, entity2nodes, counter++);\n\n    List<GradleModule> modules = new ArrayList<GradleModule>(project.getModules());\n    Collections.sort(modules, Named.COMPARATOR);\n\n    for (GradleModule module : modules) {\n      DefaultMutableTreeNode moduleNode = buildNode(module, entity2nodes, counter++);\n      root.add(moduleNode);\n      Collection<GradleDependency> dependencies = module.getDependencies();\n      if (!dependencies.isEmpty()) {\n        DefaultMutableTreeNode dependenciesNode\n          = new DefaultMutableTreeNode(GradleBundle.message(\"gradle.import.structure.tree.node.dependencies\"));\n        final List<GradleModuleDependency> moduleDependencies = new ArrayList<GradleModuleDependency>();\n        final List<GradleLibraryDependency> libraryDependencies = new ArrayList<GradleLibraryDependency>();\n        GradleEntityVisitor visitor = new GradleEntityVisitorAdapter() {\n          @Override\n          public void visit(@NotNull GradleModuleDependency dependency) {\n            moduleDependencies.add(dependency);\n          }\n\n          @Override\n          public void visit(@NotNull GradleLibraryDependency dependency) {\n            libraryDependencies.add(dependency);\n          }\n        };\n        for (GradleDependency dependency : dependencies) {\n          dependency.invite(visitor);\n        }\n        Collections.sort(moduleDependencies, GradleModuleDependency.COMPARATOR);\n        Collections.sort(libraryDependencies, Named.COMPARATOR);\n        for (GradleModuleDependency dependency : moduleDependencies) {\n          dependenciesNode.add(buildNode(dependency, entity2nodes, counter++));\n        }\n        for (GradleLibraryDependency dependency : libraryDependencies) {\n          dependenciesNode.add(buildNode(dependency, entity2nodes, counter++));\n        }\n        moduleNode.add(dependenciesNode);\n      }\n    }\n    myTreeModel.setRoot(root);\n    myTree.setSelectionPath(new TreePath(root));\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private <T extends GradleEntity> DefaultMutableTreeNode buildNode(\n    @NotNull T entity, @NotNull Map<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>> processed, int counter)\n  {\n    // TODO den add doc\n    GradleProjectStructureNode result = new GradleProjectStructureNode(myFactory.buildDescriptor(entity));\n    Pair<String, Collection<GradleProjectStructureNode>> pair = processed.get(entity);\n    if (pair == null) {\n      String cardName = String.valueOf(counter);\n      List<GradleProjectStructureNode> nodes = new ArrayList<GradleProjectStructureNode>();\n      nodes.add(result);\n      processed.put(entity, new Pair<String, Collection<GradleProjectStructureNode>>(cardName, nodes));\n      GradleProjectStructureNodeSettings settings = myFactory.buildSettings(entity, myTreeModel, nodes);\n      myCards.put(result, cardName);\n      mySettingsPanel.add(settings.getComponent(), cardName);\n    } \n    else {\n      pair.second.add(result);\n      myCards.put(result, pair.first);\n    }\n    return result;\n  }","id":64992,"modified_method":"private <T extends GradleEntity> DefaultMutableTreeNode buildNode(\n    @NotNull T entity, @NotNull Map<GradleEntity, Pair<String, Collection<GradleProjectStructureNode>>> processed, int counter)\n  {\n    // We build tree node, its settings control and map them altogether. The only trick here is that nodes can reuse the same\n    // settings control (e.g. more than one node may have the same library as a dependency, so, library dependency node for\n    // every control will use the same settings control).\n    GradleProjectStructureNode result = new GradleProjectStructureNode(myFactory.buildDescriptor(entity));\n    Pair<String, Collection<GradleProjectStructureNode>> pair = processed.get(entity);\n    if (pair == null) {\n      String cardName = String.valueOf(counter);\n      List<GradleProjectStructureNode> nodes = new ArrayList<GradleProjectStructureNode>();\n      nodes.add(result);\n      processed.put(entity, new Pair<String, Collection<GradleProjectStructureNode>>(cardName, nodes));\n      GradleProjectStructureNodeSettings settings = myFactory.buildSettings(entity, myTreeModel, nodes);\n      myCards.put(result, new Pair<String, GradleProjectStructureNodeSettings>(cardName, settings));\n      mySettingsPanel.add(settings.getComponent(), cardName);\n    } \n    else {\n      pair.second.add(result);\n      for (GradleProjectStructureNode node : pair.second) {\n        Pair<String, GradleProjectStructureNodeSettings> settingsPair = myCards.get(node);\n        if (settingsPair != null) {\n          myCards.put(result, settingsPair);\n          break;\n        } \n      }\n    }\n    return result;\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GradleLibrarySettings(@NotNull GradleLibraryDependency libraryDependency) {\n    myLibraryDependency = libraryDependency;\n    \n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    GradleUiUtil.configureNameControl(builder, libraryDependency);\n    myComponent = builder.build();\n  }","id":64993,"modified_method":"public GradleLibrarySettings(@NotNull GradleLibraryDependency libraryDependency) {\n    myLibraryDependency = libraryDependency;\n    \n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    myNameErrorLabel = GradleAdjustImportSettingsUtil.configureNameControl(builder, libraryDependency);\n    myComponent = builder.build();\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GradleModuleSettings(@NotNull GradleModule module) {\n    myModule = module;\n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    GradleUiUtil.configureNameControl(builder, myModule);\n    myComponent = builder.build();\n  }","id":64994,"modified_method":"public GradleModuleSettings(@NotNull GradleModule module) {\n    myModule = module;\n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    myNameErrorLabel = GradleAdjustImportSettingsUtil.configureNameControl(builder, myModule);\n    myComponent = builder.build();\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GradleProjectSettings(@NotNull GradleProject project) {\n    myProject = project;\n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    GradleUiUtil.configureNameControl(builder, project);\n    builder.add(\"gradle.import.structure.settings.label.language.level\", myLanguageLevelComboBox);\n    myLanguageLevelComboBox.setSelectedItem(project.getLanguageLevel());\n    \n    myComponent = builder.build();\n  }","id":64995,"modified_method":"public GradleProjectSettings(@NotNull GradleProject project) {\n    myProject = project;\n    GradleProjectSettingsBuilder builder = new GradleProjectSettingsBuilder();\n    \n    myNameErrorLabel = GradleAdjustImportSettingsUtil.configureNameControl(builder, project);\n\n    JComboBox languageLevelComboBox = new JComboBox();\n    builder.add(\"gradle.import.structure.settings.label.language.level\", languageLevelComboBox);\n    final Map<Object, LanguageLevel> levels = new HashMap<Object, LanguageLevel>();\n    for (LanguageLevel level : LanguageLevel.values()) {\n      levels.put(level.getPresentableText(), level);\n      languageLevelComboBox.addItem(level.getPresentableText());\n    }\n    languageLevelComboBox.setSelectedItem(project.getLanguageLevel().getPresentableText());\n    languageLevelComboBox.addItemListener(new ItemListener() {\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        myProject.setLanguageLevel(levels.get(e.getItem()));\n      }\n    });\n    \n    myComponent = builder.build();\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GradleProjectSettingsBuilder() {\n    myLabelConstraint.anchor = myControlConstraint.anchor = GridBagConstraints.WEST;\n    \n    myControlConstraint.gridwidth = GridBagConstraints.REMAINDER;\n    myControlConstraint.weightx = 1;\n    myControlConstraint.fill = GridBagConstraints.HORIZONTAL;\n  }","id":64996,"modified_method":"public GradleProjectSettingsBuilder() {\n    myLabelConstraint.anchor = myControlConstraint.anchor = GridBagConstraints.WEST;\n    \n    myControlConstraint.gridwidth = GridBagConstraints.REMAINDER;\n    myControlConstraint.weightx = 1;\n    myControlConstraint.fill = GridBagConstraints.HORIZONTAL;\n    \n    myErrorLabelConstraint.gridwidth = GridBagConstraints.REMAINDER;\n    myErrorLabelConstraint.insets.top = 3;\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings(\"MethodMayBeStatic\")\n  @NotNull\n  public GradleProjectStructureNodeSettings buildSettings(@NotNull GradleEntity entity,\n                                                          @NotNull final DefaultTreeModel treeModel,\n                                                          @NotNull final Collection<GradleProjectStructureNode> treeNodes)\n  {\n    // TODO den remove\n    final GradleProjectStructureNodeSettings toRemove = new GradleProjectStructureNodeSettings() {\n      @Override\n      public boolean commit() {\n        return true;\n      }\n\n      @NotNull\n      @Override\n      public JComponent getComponent() {\n        return new JLabel(\"xxxxxxxxx\" + this);\n      }\n    };\n    final Ref<GradleProjectStructureNodeSettings> result = new Ref<GradleProjectStructureNodeSettings>();\n    entity.invite(new GradleEntityVisitor() {\n      @Override\n      public void visit(@NotNull GradleProject project) {\n        result.set(new GradleProjectSettings(project));\n      }\n\n      @Override\n      public void visit(@NotNull GradleModule module) {\n        result.set(new GradleModuleSettings(wrap(GradleModule.class, module, treeModel, treeNodes))); \n      }\n\n      @Override\n      public void visit(@NotNull GradleContentRoot contentRoot) {\n        // TODO den implement\n        result.set(toRemove);\n      }\n\n      @Override\n      public void visit(@NotNull GradleModuleDependency dependency) {\n        result.set(new GradleModuleSettings(wrap(GradleModule.class, dependency.getModule(), treeModel, treeNodes)));\n      }\n\n      @Override\n      public void visit(@NotNull GradleLibraryDependency dependency) {\n        result.set(new GradleLibrarySettings(wrap(GradleLibraryDependency.class, dependency, treeModel, treeNodes)));\n      }\n    });\n    return result.get();\n  }","id":64997,"modified_method":"@SuppressWarnings(\"MethodMayBeStatic\")\n  @NotNull\n  public GradleProjectStructureNodeSettings buildSettings(@NotNull GradleEntity entity,\n                                                          @NotNull final DefaultTreeModel treeModel,\n                                                          @NotNull final Collection<GradleProjectStructureNode> treeNodes)\n  {\n    // TODO den remove\n    final GradleProjectStructureNodeSettings toRemove = new GradleProjectStructureNodeSettings() {\n      @Override\n      public boolean validate() {\n        return true;\n      }\n\n      @NotNull\n      @Override\n      public JComponent getComponent() {\n        return new JLabel(\"xxxxxxxxx\" + this);\n      }\n    };\n    final Ref<GradleProjectStructureNodeSettings> result = new Ref<GradleProjectStructureNodeSettings>();\n    entity.invite(new GradleEntityVisitor() {\n      @Override\n      public void visit(@NotNull GradleProject project) {\n        result.set(new GradleProjectSettings(project));\n      }\n\n      @Override\n      public void visit(@NotNull GradleModule module) {\n        result.set(new GradleModuleSettings(wrap(GradleModule.class, module, treeModel, treeNodes))); \n      }\n\n      @Override\n      public void visit(@NotNull GradleContentRoot contentRoot) {\n        // TODO den implement\n        result.set(toRemove);\n      }\n\n      @Override\n      public void visit(@NotNull GradleModuleDependency dependency) {\n        result.set(new GradleModuleSettings(wrap(GradleModule.class, dependency.getModule(), treeModel, treeNodes)));\n      }\n\n      @Override\n      public void visit(@NotNull GradleLibraryDependency dependency) {\n        result.set(new GradleLibrarySettings(wrap(GradleLibraryDependency.class, dependency, treeModel, treeNodes)));\n      }\n    });\n    return result.get();\n  }","commit_id":"f0e106bfed939e7941cdde6df69c26401e2a959e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    protected Module createMainModule() throws IOException {\n        Module module = super.createMainModule();\n\n        String configFileText = getConfigFileText();\n        if (configFileText != null && InTextDirectivesUtils.isDirectiveDefined(configFileText, \"// WITH_RUNTIME\")) {\n            ConfigLibraryUtil.configureKotlinRuntime(module);\n        }\n\n        return module;\n    }","id":64998,"modified_method":"@Override\n    protected Module createMainModule() throws IOException {\n        Module module = super.createMainModule();\n\n        String configFileText = getConfigFileText();\n        if (configFileText == null) {\n            return module;\n        }\n\n        if (InTextDirectivesUtils.isDirectiveDefined(configFileText, \"// WITH_RUNTIME\")) {\n            ConfigLibraryUtil.configureKotlinRuntime(module);\n        }\n\n        List<String> languageLevelLines = InTextDirectivesUtils.findLinesWithPrefixesRemoved(configFileText, \"// LANGUAGE_LEVEL\");\n        if (languageLevelLines.size() > 1) {\n            throw new AssertionError(\"Language level specified multiple times: \" + languageLevelLines);\n        }\n        if (languageLevelLines.size() == 1) {\n            LanguageLevel level = LanguageLevel.parse(languageLevelLines.iterator().next());\n            if (level != null) {\n                IdeaTestUtil.setModuleLanguageLevel(module, level);\n            }\n        }\n\n        return module;\n    }","commit_id":"3a3e145de2b2df1da5c93698e680c44d9c7fede5","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected void doSymbolTest(String path) {\n        myFixture.configureByFile(path);\n        assertGotoSymbol(new GotoSymbolModel2(getProject()), getProject(), myFixture.getEditor());\n    }","id":64999,"modified_method":"protected void doSymbolTest(String path) {\n        myFixture.configureByFile(path);\n        assertGotoSymbol(new GotoSymbolModel2(getProject()), myFixture.getEditor());\n    }","commit_id":"1168cf62bfa4798b6c20d13b251922c8ab1f9147","url":"https://github.com/JetBrains/kotlin"}]