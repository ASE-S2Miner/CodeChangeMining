[{"original_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(CA_LoginTest.class);\n\t\ttestSuite.addTestSuite(CA_AddPageTest.class);\n\t\ttestSuite.addTestSuite(CA_AddPortletTest.class);\n\t\ttestSuite.addTestSuite(CA_AddCategoryTest.class);\n\t\ttestSuite.addTestSuite(CA_AddMessageTest.class);\n\t\ttestSuite.addTestSuite(CA_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(CA_DeleteMessageTest.class);\n\t\ttestSuite.addTestSuite(CA_DeleteCategoryTest.class);\n\t\ttestSuite.addTestSuite(CA_AddCategoryTest.class);\n\t\ttestSuite.addTestSuite(CA_AddMessageTest.class);\n\t\ttestSuite.addTestSuite(CA_LogoutTest.class);\n\t\ttestSuite.addTestSuite(Member_LoginTest.class);\n\t\ttestSuite.addTestSuite(Member_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(Member_ViewMessageTest.class);\n\t\ttestSuite.addTestSuite(Member_ReplyMessageTest.class);\n\t\ttestSuite.addTestSuite(Member_PostNewThreadTest.class);\n\t\ttestSuite.addTestSuite(Member_EditThreadTest.class);\n\t\ttestSuite.addTestSuite(Member_DeleteMessageTest.class);\n\t\ttestSuite.addTestSuite(Member_LogoutTest.class);\n\t\ttestSuite.addTestSuite(Guest_ViewTest.class);\n\t\ttestSuite.addTestSuite(Guest_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(SA_LoginTest.class);\n\t\ttestSuite.addTestSuite(TearDownMBCategoryTest.class);\n\t\ttestSuite.addTestSuite(TearDownPageTest.class);\n\t\ttestSuite.addTestSuite(SA_LogoutTest.class);\n\n\t\treturn testSuite;\n\t}","id":21000,"modified_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTestSuite(SA_AddMATest.class);\n\t\ttestSuite.addTestSuite(SA_AddMARoleTest.class);\n\t\ttestSuite.addTestSuite(SA_DefineMARoleTest.class);\n\t\ttestSuite.addTestSuite(SA_AddMemberTest.class);\n\t\ttestSuite.addTestSuite(SA_AddMemberRoleTest.class);\n\t\ttestSuite.addTestSuite(SA_DefineMemberRoleTest.class);\n\t\ttestSuite.addTestSuite(SA_AssignUserRolesTest.class);\n\t\ttestSuite.addTestSuite(SA_AddSiteTest.class);\n\t\ttestSuite.addTestSuite(SA_AddSiteMembersTest.class);\n\t\ttestSuite.addTestSuite(SA_AddPageTest.class);\n\t\ttestSuite.addTestSuite(SA_AddPortletTest.class);\n\t\ttestSuite.addTestSuite(LogoutTest.class);\n\t\ttestSuite.addTestSuite(LoginUsersTest.class);\n\t\ttestSuite.addTestSuite(MA_LoginTest.class);\n\t\ttestSuite.addTestSuite(MA_AddCategoryTest.class);\n\t\ttestSuite.addTestSuite(MA_AddThreadTest.class);\n\t\ttestSuite.addTestSuite(MA_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(MA_DeleteMessageTest.class);\n\t\ttestSuite.addTestSuite(MA_DeleteCategoryTest.class);\n\t\ttestSuite.addTestSuite(MA_AddCategoryTest.class);\n\t\ttestSuite.addTestSuite(MA_AddMessageTest.class);\n\t\ttestSuite.addTestSuite(LogoutTest.class);\n\t\ttestSuite.addTestSuite(Member_LoginTest.class);\n\t\ttestSuite.addTestSuite(Member_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(Member_ViewMessageTest.class);\n\t\ttestSuite.addTestSuite(Member_ReplyMessageTest.class);\n\t\ttestSuite.addTestSuite(Member_AddThreadTest.class);\n\t\ttestSuite.addTestSuite(Member_EditThreadTest.class);\n\t\ttestSuite.addTestSuite(Member_DeleteMessageTest.class);\n\t\ttestSuite.addTestSuite(LogoutTest.class);\n\t\ttestSuite.addTestSuite(Guest_ViewTest.class);\n\t\ttestSuite.addTestSuite(Guest_AssertActionsTest.class);\n\t\ttestSuite.addTestSuite(SA_LoginTest.class);\n\t\ttestSuite.addTestSuite(TearDownMBCategoryTest.class);\n\t\ttestSuite.addTestSuite(TearDownPageTest.class);\n\t\ttestSuite.addTestSuite(TearDownUserTest.class);\n\n\t\treturn testSuite;\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_AddGeneralAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_84_distributionScope\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"_84_distributionScope\",\n\t\t\tRuntimeVariables.replace(\"label=General\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_title\",\n\t\t\tRuntimeVariables.replace(\"Test General Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_url\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_content\",\n\t\t\tRuntimeVariables.replace(\"This is a test General Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isElementPresent(\"link=Test General Announcement\"));\n\t}","id":21001,"modified_method":"public void testSA_AddGeneralAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Manage Entries\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\",\n\t\t\tRuntimeVariables.replace(\"Manage Entries\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_84_distributionScope']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"//select[@id='_84_distributionScope']\",\n\t\t\tRuntimeVariables.replace(\"label=General\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"Add Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_title']\",\n\t\t\tRuntimeVariables.replace(\"Test General Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_url']\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//textarea[@id='_84_content']\",\n\t\t\tRuntimeVariables.replace(\"This is a test General Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertEquals(RuntimeVariables.replace(\"Test General Announcement\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]/a\"));\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_AddGuestAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_84_distributionScope\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"_84_distributionScope\",\n\t\t\tRuntimeVariables.replace(\"label=Guest\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_title\",\n\t\t\tRuntimeVariables.replace(\"Test Guest Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_url\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_content\",\n\t\t\tRuntimeVariables.replace(\"This is a test Guest Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Guest Announcement\"));\n\t}","id":21002,"modified_method":"public void testSA_AddGuestAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Manage Entries\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\",\n\t\t\tRuntimeVariables.replace(\"Manage Entries\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_84_distributionScope']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"//select[@id='_84_distributionScope']\",\n\t\t\tRuntimeVariables.replace(\"label=Guest\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"Add Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_title']\",\n\t\t\tRuntimeVariables.replace(\"Test Guest Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_url']\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//textarea[@id='_84_content']\",\n\t\t\tRuntimeVariables.replace(\"This is a test Guest Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertEquals(RuntimeVariables.replace(\"Test Guest Announcement\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]/a\"));\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_AddMemberAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"_84_distributionScope\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"_84_distributionScope\",\n\t\t\tRuntimeVariables.replace(\"label=Member\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_title\",\n\t\t\tRuntimeVariables.replace(\"Test Member Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_url\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_84_content\",\n\t\t\tRuntimeVariables.replace(\"This is a test Member Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isElementPresent(\"link=Test Member Announcement\"));\n\t}","id":21003,"modified_method":"public void testSA_AddMemberAnnouncement() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Manage Entries\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Manage Entries\",\n\t\t\tRuntimeVariables.replace(\"Manage Entries\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_84_distributionScope']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.select(\"//select[@id='_84_distributionScope']\",\n\t\t\tRuntimeVariables.replace(\"label=Site Member\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Add Entry']\",\n\t\t\tRuntimeVariables.replace(\"Add Entry\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_title']\",\n\t\t\tRuntimeVariables.replace(\"Test Member Announcement\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_84_url']\",\n\t\t\tRuntimeVariables.replace(\"http://www.liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//textarea[@id='_84_content']\",\n\t\t\tRuntimeVariables.replace(\"This is a test Member Announcement.\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertEquals(RuntimeVariables.replace(\"Test Member Announcement\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]/a\"));\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_AddPage() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"main-content\", RuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"dockbar\", RuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"navigation\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"addPage\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"addPage\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"save\", RuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","id":21004,"modified_method":"public void testSA_AddPage() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//nav[@id='navigation']\",\n\t\t\tRuntimeVariables.replace(\"Navigation\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//a[@id='addPage']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//a[@id='addPage']\",\n\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@type='text']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@type='text']\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//button[@id='save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_AddPortlet() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"_145_addApplication\", RuntimeVariables.replace(\"\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"layout_configuration_content\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"layout_configuration_content\",\n\t\t\tRuntimeVariables.replace(\"a\"));\n\t\tselenium.saveScreenShotAndSource();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@title='Announcements']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//div[@title='Announcements']/p/a\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//section\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isElementPresent(\"//section\"));\n\t}","id":21005,"modified_method":"public void testSA_AddPortlet() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Announcements Permissions Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Announcements Permissions Page\",\n\t\t\tRuntimeVariables.replace(\"Announcements Permissions Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_145_addApplication']\",\n\t\t\t\t\"More\"));\n\t\tselenium.clickAt(\"//a[@id='_145_addApplication']\",\n\t\t\tRuntimeVariables.replace(\"More\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//div[@title='Announcements']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//div[@title='Announcements']/p/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//section\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tassertTrue(selenium.isElementPresent(\"//section\"));\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_Login() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Welcome\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Welcome\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.typeKeys(\"_58_login\",\n\t\t\tRuntimeVariables.replace(\"test@lifera.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","id":21006,"modified_method":"public void testSA_Login() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Welcome\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Welcome\", RuntimeVariables.replace(\"Welcome\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_58_login']\",\n\t\t\tRuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_58_password']\",\n\t\t\tRuntimeVariables.replace(\"test\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\tRuntimeVariables.replace(\"Sign In\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSA_Login() throws Exception {\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Welcome\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Welcome\", RuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_58_login\", RuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"_58_password\", RuntimeVariables.replace(\"test\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"_58_rememberMeCheckbox\", RuntimeVariables.replace(\"\"));\n\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","id":21007,"modified_method":"public void testSA_Login() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 60) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Welcome\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"link=Welcome\", RuntimeVariables.replace(\"Welcome\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_58_login']\",\n\t\t\tRuntimeVariables.replace(\"test@liferay.com\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.type(\"//input[@id='_58_password']\",\n\t\t\tRuntimeVariables.replace(\"test\"));\n\t\tselenium.saveScreenShotAndSource();\n\t\tselenium.clickAt(\"//input[@value='Sign In']\",\n\t\t\tRuntimeVariables.replace(\"Sign In\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.saveScreenShotAndSource();\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownMBCategory() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Message Boards Permissions Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"link=Message Boards Permissions Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean mbCategory1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/span/ul/li/strong/a\");\n\n\t\t\t\tif (!mbCategory1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean mbCategory2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/span/ul/li/strong/a\");\n\n\t\t\t\tif (!mbCategory2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean mbCategory3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/span/ul/li/strong/a\");\n\n\t\t\t\tif (!mbCategory3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean mbCategory4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/span/ul/li/strong/a\");\n\n\t\t\t\tif (!mbCategory4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean mbCategory5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[5]/span/ul/li/strong/a\");\n\n\t\t\t\tif (!mbCategory5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":21008,"modified_method":"public void testTearDownMBCategory() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Message Boards Permissions Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"link=Message Boards Permissions Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Message Boards Permissions Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean mbCategory1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//a/strong\");\n\n\t\t\t\tif (!mbCategory1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean mbCategory2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//a/strong\");\n\n\t\t\t\tif (!mbCategory2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"eval(selenium.isElementPresent('//a/strong'))\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean mbCategory3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//a/strong\");\n\n\t\t\t\tif (!mbCategory3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean mbCategory4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//a/strong\");\n\n\t\t\t\tif (!mbCategory4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean mbCategory5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//a/strong\");\n\n\t\t\t\tif (!mbCategory5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[5]/span/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownPage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tString guestCommunity = selenium.getText(\n\t\t\t\t\t\t\"//nav[@id='breadcrumbs']/ul/li[1]/span/a\");\n\t\t\t\tRuntimeVariables.setValue(\"guestCommunity\", guestCommunity);\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"link=Pages\", RuntimeVariables.replace(\"Pages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isPartialText(\"//div/div[3]/a\",\n\t\t\t\t\t\t\t\t\tRuntimeVariables.getValue(\"guestCommunity\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean welcomePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\");\n\n\t\t\t\tif (welcomePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//div[3]/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page1Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean page2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page2Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean page3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page3Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean page4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page4Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 6:\n\n\t\t\t\tboolean page5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page5Present) {\n\t\t\t\t\tlabel = 7;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 7:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":21009,"modified_method":"public void testTearDownPage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"//div[4]/div/ul/li[1]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"//div[4]/div/ul/li[1]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Manage Pages\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Public Pages\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean welcomePresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\");\n\n\t\t\t\tif (welcomePresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//div[@id='_88_layoutsTreeOutput']/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page1Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!RuntimeVariables.replace(\"/home\")\n\t\t\t\t\t\t\t\t\t\t\t\t .equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\t\t\"//input[@id='_88_friendlyURL']\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//button[3]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"//div[@id='_88_layoutsTreeOutput']/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page2Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!RuntimeVariables.replace(\"/home\")\n\t\t\t\t\t\t\t\t\t\t\t\t .equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\t\t\"//input[@id='_88_friendlyURL']\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//button[3]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"//div[@id='_88_layoutsTreeOutput']/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page3Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!RuntimeVariables.replace(\"/home\")\n\t\t\t\t\t\t\t\t\t\t\t\t .equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\t\t\"//input[@id='_88_friendlyURL']\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//button[3]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"//div[@id='_88_layoutsTreeOutput']/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page4Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!RuntimeVariables.replace(\"/home\")\n\t\t\t\t\t\t\t\t\t\t\t\t .equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\t\t\"//input[@id='_88_friendlyURL']\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//button[3]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tselenium.clickAt(\"//div[@id='_88_layoutsTreeOutput']/ul/li/div/div[1]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Drop Down Arrow\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (RuntimeVariables.replace(\"Welcome\")\n\t\t\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\t\t\"//li/ul/li[1]/div/div[3]/a\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tboolean page5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//li[2]/div/div[3]/a\");\n\n\t\t\t\tif (!page5Present) {\n\t\t\t\t\tlabel = 7;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//li[2]/div/div[3]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Page Name\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!RuntimeVariables.replace(\"/home\")\n\t\t\t\t\t\t\t\t\t\t\t\t .equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\t\t\"//input[@id='_88_friendlyURL']\"))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 60) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//button[3]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.saveScreenShotAndSource();\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\"//button[3]\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\"//button[3]\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected page[\\\\s\\\\S]$\"));\n\t\t\t\tselenium.saveScreenShotAndSource();\n\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"59056ce21ca1e543a59e5b1afa68a00aa262fb65","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n\t * Thread method: this thread will handle reading datagrams and \n\t * starts threads to dispatch data to handlers registered for it.\n\t */\n\tpublic void run() {\n\t\tif (! _run) {\n\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"CCNNetworkManager run() called after shutdown\"));\n\t\t\treturn;\n\t\t}\n\t\t//WirePacket packet = new WirePacket();\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.INFO) )\n\t\t\tLog.info(Log.FAC_NETMANAGER, formatMessage(\"CCNNetworkManager processing thread started for port: \" + _port));\n\t\twhile (_run) {\n\t\t\ttry {\n\t\t\t\tboolean wasConnected = _channel.isConnected();\n\t\t\t\tXMLEncodable packet = _channel.getPacket();\n\t\t\t\tif (null == packet) {\n\t\t\t\t\tif (!wasConnected && _channel.isConnected())\n\t\t\t\t\t\treregisterPrefixes();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (packet instanceof ContentObject) {\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveObject);\n\t\t\t\t\tContentObject co = (ContentObject)packet;\n\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n\t\t\t\t\t\tLog.finer(Log.FAC_NETMANAGER, formatMessage(\"Data from net for port: \" + _port + \" {0}\"), co.name());\n\n\t\t\t\t\t//\tSystemConfiguration.logObject(\"Data from net:\", co);\n\n\t\t\t\t\tdeliverData(co);\n\t\t\t\t\t// External data never goes back to network, never held onto here\n\t\t\t\t\t// External data never has a thread waiting, so no need to release sema\n\t\t\t\t} else if (packet instanceof Interest) {\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveInterest);\n\t\t\t\t\tInterest interest = (Interest)\tpacket;\n\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINEST) )\n\t\t\t\t\t\tLog.finest(Log.FAC_NETMANAGER, formatMessage(\"Interest from net for port: \" + _port + \" {0}\"), interest);\n\t\t\t\t\tInterestRegistration oInterest = new InterestRegistration(interest, null, null);\n\t\t\t\t\tdeliverInterest(oInterest, interest);\n\t\t\t\t\t// External interests never go back to network\n\t\t\t\t}  else { // for interests\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveUnknown);\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\t_stats.increment(StatsEnum.ReceiveErrors);\n\t\t\t\tLog.severe(Log.FAC_NETMANAGER, formatMessage(\"Processing thread failure (UNKNOWN): \" + ex.getMessage() + \" for port: \" + _port));\n                Log.warningStackTrace(ex);\n\t\t\t}\n\t\t}\n\n\t\tLog.info(Log.FAC_NETMANAGER, formatMessage(\"Shutdown complete for port: \" + _port));\n\t}","id":21010,"modified_method":"/**\n\t * Thread method: this thread will handle reading datagrams and \n\t * starts threads to dispatch data to handlers registered for it.\n\t */\n\tpublic void run() {\n\t\tif (! _run) {\n\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"CCNNetworkManager run() called after shutdown\"));\n\t\t\treturn;\n\t\t}\n\t\t//WirePacket packet = new WirePacket();\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.INFO) )\n\t\t\tLog.info(Log.FAC_NETMANAGER, formatMessage(\"CCNNetworkManager processing thread started for port: \" + _port));\n\t\twhile (_run) {\n\t\t\ttry {\n\t\t\t\tboolean wasConnected = _channel.isConnected();\n\t\t\t\tXMLEncodable packet = _channel.getPacket();\n\t\t\t\tif (null == packet) {\n\t\t\t\t\tif (!wasConnected && _channel.isConnected())\n\t\t\t\t\t\treregisterPrefixes();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (packet instanceof ContentObject) {\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveObject);\n\t\t\t\t\tContentObject co = (ContentObject)packet;\n\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n\t\t\t\t\t\tLog.finer(Log.FAC_NETMANAGER, formatMessage(\"Data from net for port: \" + _port + \" {0}\"), co.name());\n\n\t\t\t\t\t//\tSystemConfiguration.logObject(\"Data from net:\", co);\n\t\t\t\t\t_handlerCallTime = System.currentTimeMillis();\n\t\t\t\t\tdeliverData(co);\n\t\t\t\t\t_handlerCallTime = NOT_IN_HANDLER;\n\t\t\t\t\t// External data never goes back to network, never held onto here\n\t\t\t\t\t// External data never has a thread waiting, so no need to release sema\n\t\t\t\t} else if (packet instanceof Interest) {\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveInterest);\n\t\t\t\t\tInterest interest = (Interest)\tpacket;\n\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINEST) )\n\t\t\t\t\t\tLog.finest(Log.FAC_NETMANAGER, formatMessage(\"Interest from net for port: \" + _port + \" {0}\"), interest);\n\t\t\t\t\tInterestRegistration oInterest = new InterestRegistration(interest, null, null);\n\t\t\t\t\t_handlerCallTime = System.currentTimeMillis();\n\t\t\t\t\tdeliverInterest(oInterest, interest);\n\t\t\t\t\t_handlerCallTime = NOT_IN_HANDLER;\n\t\t\t\t\t// External interests never go back to network\n\t\t\t\t}  else { // for interests\n\t\t\t\t\t_stats.increment(StatsEnum.ReceiveUnknown);\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\t_stats.increment(StatsEnum.ReceiveErrors);\n\t\t\t\tLog.severe(Log.FAC_NETMANAGER, formatMessage(\"Processing thread failure (UNKNOWN): \" + ex.getMessage() + \" for port: \" + _port));\n                Log.warningStackTrace(ex);\n\t\t\t}\n\t\t}\n\n\t\tLog.info(Log.FAC_NETMANAGER, formatMessage(\"Shutdown complete for port: \" + _port));\n\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void run() {\t\n\t\t\tboolean refreshError = false;\t\t\t\n\t\t\tif (_protocol == NetworkProtocol.UDP) {\n\t\t\t\tif (!_channel.isConnected()) {\n                    //we are not connected.  reconnect attempt is in the heartbeat function...\n\t\t\t\t\t_channel.heartbeat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!_channel.isConnected()) {\n                //we tried to reconnect and failed, try again next loop\n                Log.fine(Log.FAC_NETMANAGER, \"Not Connected to ccnd, try again in {0}ms\", CCNNetworkChannel.SOCKET_TIMEOUT);\n                _lastHeartbeat = 0;\n                if (_run)\n                        _periodicTimer.schedule(new PeriodicWriter(), CCNNetworkChannel.SOCKET_TIMEOUT);\n                return;\n            }\n\n            long ourTime = System.currentTimeMillis();\n            long minInterestRefreshTime = PERIOD + ourTime;\n\t\t\t\t\n\t\t\t// Re-express interests that need to be re-expressed\n            // TODO Interest refresh time is supposed to \"decay\" over time but there are currently\n    \t\t// unresolved problems with this.\n\t\t\ttry {\n\t\t\t\tfor (Entry<InterestRegistration> entry : _myInterests.values()) {\n\t\t\t\t\tInterestRegistration reg = entry.value();\n\t\t\t\t\t // allow some slop for scheduling\n                    if (ourTime + 20 > reg.nextRefresh) {\n                            if( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n                                    Log.finer(Log.FAC_NETMANAGER, \"Refresh interest: {0}\", reg.interest);\n                            _lastHeartbeat = ourTime;\n                            reg.nextRefresh = ourTime + reg.nextRefreshPeriod;\n                            try {\n                                write(reg.interest);\n                        } catch (NotYetConnectedException nyce) {\n                                refreshError = true;\n                        }\n                    }\n\t\t\t\t\tif (minInterestRefreshTime > reg.nextRefresh)\n\t\t\t\t\t\tminInterestRefreshTime = reg.nextRefresh;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (ContentEncodingException xmlex) {\n                Log.severe(Log.FAC_NETMANAGER, \"PeriodicWriter interest refresh thread failure (Malformed datagram): {0}\", xmlex.getMessage());\n                Log.warningStackTrace(xmlex);\n                refreshError = true;\n\t\t\t}\n\n\t\t\t// Re-express prefix registrations that need to be re-expressed\n            // FIXME: The lifetime of a prefix is returned in seconds, not milliseconds.  The refresh code needs\n            // to understand this.  This isn't a problem for now because the lifetime we request when we register a\n            // prefix we use Integer.MAX_VALUE as the requested lifetime.\n            // FIXME: so lets not go around the loop doing nothing... for now.\n            long minFilterRefreshTime = PERIOD + ourTime;\n            /* if (_usePrefixReg) {\n            \tsynchronized (_registeredPrefixes) {\n                    for (ContentName prefix : _registeredPrefixes.keySet()) {\n                    \tRegisteredPrefix rp = _registeredPrefixes.get(prefix);\n\t\t\t\t\t\tif (null != rp._forwarding && rp._lifetime != -1 && rp._nextRefresh != -1) {\n\t\t\t\t\t\t\tif (ourTime > rp._nextRefresh) {\n\t\t\t\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n\t\t\t\t\t\t\t\t\tLog.finer(Log.FAC_NETMANAGER, \"Refresh registration: {0}\", prefix);\n\t\t\t\t\t\t\t\trp._nextRefresh = -1;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tForwardingEntry forwarding = _prefixMgr.selfRegisterPrefix(prefix);\n\t\t\t\t\t\t\t\t\tif (null != forwarding) {\n\t\t\t\t\t\t\t\t\t\trp._lifetime = forwarding.getLifetime();\n//\t\t\t\t\t\t\t\t\t\tfilter.nextRefresh = new Date().getTime() + (filter.lifetime / 2);\n\t\t\t\t\t\t\t\t\t\t_lastHeartbeat = System.currentTimeMillis();\n\t\t\t\t\t\t\t\t\t\trp._nextRefresh = _lastHeartbeat + (rp._lifetime / 2);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trp._forwarding = forwarding;\n\n\t\t\t\t\t\t\t\t} catch (CCNDaemonException e) {\n\t\t\t\t\t\t\t\t\tLog.warning(e.getMessage());\n\t\t\t\t\t\t\t\t\t// XXX - don't think this is right\n\t\t\t\t\t\t\t\t\trp._forwarding = null;\n\t\t\t\t\t\t\t\t\trp._lifetime = -1;\n\t\t\t\t\t\t\t\t\trp._nextRefresh = -1;\n\t\t\t\t\t\t\t\t\trefreshError = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (minFilterRefreshTime > rp._nextRefresh)\n\t\t\t\t\t\t\t\tminFilterRefreshTime = rp._nextRefresh;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t// for (Entry<Filter> entry: _myFilters.values())\n\t\t\t\t}\t// synchronized (_myFilters)\n\t\t\t} // _usePrefixReg */\n        \t\n        \tif (refreshError) {\n                Log.warning(Log.FAC_NETMANAGER, \"we have had an error when refreshing an interest or prefix registration...  do we need to reconnect to ccnd?\");\n        \t}\n\n        \t// Calculate when we should next be run\n\t\t\tlong currentTime = System.currentTimeMillis();\n\t\t\tlong checkInterestDelay = minInterestRefreshTime - currentTime;\n\t\t\tif (checkInterestDelay < 0)\n\t\t\t\tcheckInterestDelay = 0;\n\t\t\tif (checkInterestDelay > PERIOD)\n\t\t\t\tcheckInterestDelay = PERIOD;\n\n\t\t\tlong checkPrefixDelay = minFilterRefreshTime - currentTime;\n\t\t\tif (checkPrefixDelay < 0)\n\t\t\t\tcheckPrefixDelay = 0;\n\t\t\tif (checkPrefixDelay > PERIOD)\n\t\t\t\tcheckPrefixDelay = PERIOD;\n\t\t\t\n\t\t\tlong useMe;\n\t\t\tif (checkInterestDelay < checkPrefixDelay) {\n\t\t\t\tuseMe = checkInterestDelay;\n\t\t\t} else {\n\t\t\t\tuseMe = checkPrefixDelay;\n\t\t\t}\n\n\t\t\tif (_protocol == NetworkProtocol.UDP) {\n\n\t\t\t\t\t//we haven't sent anything...  maybe need to send a heartbeat\n\t\t\t\tif ((currentTime - _lastHeartbeat) >= CCNNetworkChannel.HEARTBEAT_PERIOD) {\n\t\t\t\t\t_lastHeartbeat = currentTime;\n\t\t\t\t\t_channel.heartbeat();\n\t\t\t\t}\t\t\t\t\n\t\n\t\t\t\t//now factor in heartbeat time\n\t\t\t\tlong timeToHeartbeat = CCNNetworkChannel.HEARTBEAT_PERIOD - (currentTime - _lastHeartbeat);\n\t\t\t\tif (useMe > timeToHeartbeat)\n\t\t\t\t\tuseMe = timeToHeartbeat;\n\t\t\t}\n\n\t\t\tif (useMe < 20) {\n\t\t\t\tuseMe = 20;\n\t\t\t}\n\t\t\tif (_run)\n\t\t\t\t_periodicTimer.schedule(new PeriodicWriter(), useMe);\n\t\t}","id":21011,"modified_method":"public void run() {\t\n\t\t\tboolean refreshError = false;\t\t\t\n\t\t\tif (_protocol == NetworkProtocol.UDP) {\n\t\t\t\tif (!_channel.isConnected()) {\n                    //we are not connected.  reconnect attempt is in the heartbeat function...\n\t\t\t\t\t_channel.heartbeat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!_channel.isConnected()) {\n                //we tried to reconnect and failed, try again next loop\n                Log.fine(Log.FAC_NETMANAGER, \"Not Connected to ccnd, try again in {0}ms\", CCNNetworkChannel.SOCKET_TIMEOUT);\n                _lastHeartbeat = 0;\n                if (_run)\n                        _periodicTimer.schedule(new PeriodicWriter(), CCNNetworkChannel.SOCKET_TIMEOUT);\n                return;\n            }\n\n            long ourTime = System.currentTimeMillis();\n            long minInterestRefreshTime = PERIOD + ourTime;\n\t\t\t\t\n\t\t\t// Re-express interests that need to be re-expressed\n            // TODO Interest refresh time is supposed to \"decay\" over time but there are currently\n    \t\t// unresolved problems with this.\n\t\t\ttry {\n\t\t\t\tfor (Entry<InterestRegistration> entry : _myInterests.values()) {\n\t\t\t\t\tInterestRegistration reg = entry.value();\n\t\t\t\t\t // allow some slop for scheduling\n                    if (ourTime + 20 > reg.nextRefresh) {\n                            if( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n                                    Log.finer(Log.FAC_NETMANAGER, \"Refresh interest: {0}\", reg.interest);\n                            _lastHeartbeat = ourTime;\n                            reg.nextRefresh = ourTime + reg.nextRefreshPeriod;\n                            try {\n                                write(reg.interest);\n                        } catch (NotYetConnectedException nyce) {\n                                refreshError = true;\n                        }\n                    }\n\t\t\t\t\tif (minInterestRefreshTime > reg.nextRefresh)\n\t\t\t\t\t\tminInterestRefreshTime = reg.nextRefresh;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (ContentEncodingException xmlex) {\n                Log.severe(Log.FAC_NETMANAGER, \"PeriodicWriter interest refresh thread failure (Malformed datagram): {0}\", xmlex.getMessage());\n                Log.warningStackTrace(xmlex);\n                refreshError = true;\n\t\t\t}\n\n\t\t\t// Re-express prefix registrations that need to be re-expressed\n            // FIXME: The lifetime of a prefix is returned in seconds, not milliseconds.  The refresh code needs\n            // to understand this.  This isn't a problem for now because the lifetime we request when we register a\n            // prefix we use Integer.MAX_VALUE as the requested lifetime.\n            // FIXME: so lets not go around the loop doing nothing... for now.\n            long minFilterRefreshTime = PERIOD + ourTime;\n            /* if (_usePrefixReg) {\n            \tsynchronized (_registeredPrefixes) {\n                    for (ContentName prefix : _registeredPrefixes.keySet()) {\n                    \tRegisteredPrefix rp = _registeredPrefixes.get(prefix);\n\t\t\t\t\t\tif (null != rp._forwarding && rp._lifetime != -1 && rp._nextRefresh != -1) {\n\t\t\t\t\t\t\tif (ourTime > rp._nextRefresh) {\n\t\t\t\t\t\t\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINER) )\n\t\t\t\t\t\t\t\t\tLog.finer(Log.FAC_NETMANAGER, \"Refresh registration: {0}\", prefix);\n\t\t\t\t\t\t\t\trp._nextRefresh = -1;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tForwardingEntry forwarding = _prefixMgr.selfRegisterPrefix(prefix);\n\t\t\t\t\t\t\t\t\tif (null != forwarding) {\n\t\t\t\t\t\t\t\t\t\trp._lifetime = forwarding.getLifetime();\n//\t\t\t\t\t\t\t\t\t\tfilter.nextRefresh = new Date().getTime() + (filter.lifetime / 2);\n\t\t\t\t\t\t\t\t\t\t_lastHeartbeat = System.currentTimeMillis();\n\t\t\t\t\t\t\t\t\t\trp._nextRefresh = _lastHeartbeat + (rp._lifetime / 2);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trp._forwarding = forwarding;\n\n\t\t\t\t\t\t\t\t} catch (CCNDaemonException e) {\n\t\t\t\t\t\t\t\t\tLog.warning(e.getMessage());\n\t\t\t\t\t\t\t\t\t// XXX - don't think this is right\n\t\t\t\t\t\t\t\t\trp._forwarding = null;\n\t\t\t\t\t\t\t\t\trp._lifetime = -1;\n\t\t\t\t\t\t\t\t\trp._nextRefresh = -1;\n\t\t\t\t\t\t\t\t\trefreshError = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (minFilterRefreshTime > rp._nextRefresh)\n\t\t\t\t\t\t\t\tminFilterRefreshTime = rp._nextRefresh;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t// for (Entry<Filter> entry: _myFilters.values())\n\t\t\t\t}\t// synchronized (_myFilters)\n\t\t\t} // _usePrefixReg */\n        \t\n        \tif (refreshError) {\n                Log.warning(Log.FAC_NETMANAGER, \"we have had an error when refreshing an interest or prefix registration...  do we need to reconnect to ccnd?\");\n        \t}\n        \t\n        \t// Try to bring back the run thread if its hung\n        \t// TODO - do we want to keep this in permanently?\n        \tif (_handlerCallTime != NOT_IN_HANDLER) {\n        \t\tlong delta = System.currentTimeMillis() - _handlerCallTime;\n        \t\tif (delta > SystemConfiguration.MAX_TIMEOUT) {\n        \t\t\t\n        \t\t\t// Print out what the thread was doing first\n        \t\t\tThrowable t = new Throwable(\"Handler took too long to return - stack trace follows\");\n        \t\t\tt.setStackTrace(_thread.getStackTrace());\n        \t\t\tLog.logStackTrace(Log.FAC_NETMANAGER, Level.SEVERE, t);\n        \t\t\t\n        \t\t\t_thread.interrupt();\n        \t\t\t_handlerCallTime = NOT_IN_HANDLER;\n        \t\t}\n        \t}\n\n        \t// Calculate when we should next be run\n\t\t\tlong currentTime = System.currentTimeMillis();\n\t\t\tlong checkInterestDelay = minInterestRefreshTime - currentTime;\n\t\t\tif (checkInterestDelay < 0)\n\t\t\t\tcheckInterestDelay = 0;\n\t\t\tif (checkInterestDelay > PERIOD)\n\t\t\t\tcheckInterestDelay = PERIOD;\n\n\t\t\tlong checkPrefixDelay = minFilterRefreshTime - currentTime;\n\t\t\tif (checkPrefixDelay < 0)\n\t\t\t\tcheckPrefixDelay = 0;\n\t\t\tif (checkPrefixDelay > PERIOD)\n\t\t\t\tcheckPrefixDelay = PERIOD;\n\t\t\t\n\t\t\tlong useMe;\n\t\t\tif (checkInterestDelay < checkPrefixDelay) {\n\t\t\t\tuseMe = checkInterestDelay;\n\t\t\t} else {\n\t\t\t\tuseMe = checkPrefixDelay;\n\t\t\t}\n\n\t\t\tif (_protocol == NetworkProtocol.UDP) {\n\n\t\t\t\t\t//we haven't sent anything...  maybe need to send a heartbeat\n\t\t\t\tif ((currentTime - _lastHeartbeat) >= CCNNetworkChannel.HEARTBEAT_PERIOD) {\n\t\t\t\t\t_lastHeartbeat = currentTime;\n\t\t\t\t\t_channel.heartbeat();\n\t\t\t\t}\t\t\t\t\n\t\n\t\t\t\t//now factor in heartbeat time\n\t\t\t\tlong timeToHeartbeat = CCNNetworkChannel.HEARTBEAT_PERIOD - (currentTime - _lastHeartbeat);\n\t\t\t\tif (useMe > timeToHeartbeat)\n\t\t\t\t\tuseMe = timeToHeartbeat;\n\t\t\t}\n\n\t\t\tif (useMe < 20) {\n\t\t\t\tuseMe = 20;\n\t\t\t}\n\t\t\tif (_run)\n\t\t\t\t_periodicTimer.schedule(new PeriodicWriter(), useMe);\n\t\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Test\n\tpublic void testObjectIOLoop() throws Exception {\n\t   CCNHandle handle = CCNHandle.getHandle();\n\t   ContentName basename = testHelper.getTestNamespace(\"content_\"  + _rnd.nextLong());\n\n\t   // Send a stream of string objects\n\t   ArrayList<CCNStringObject> sent = new ArrayList<CCNStringObject>();\n\t         int tosend = 100;\n\t   for(int i = 0; i < tosend; i++) {\n\t       // Save content\n\t       try {\n\t    \t   System.out.println(\"Trying for object \" + i);\n\t           CCNStringObject so = new CCNStringObject(basename,\n\t                   String.format(\"string object %d\", i),\n\t                   SaveType.LOCALREPOSITORY, handle);\n\t           so.save();\n\t           so.close();\n\t           sent.add(so);\n\t       } catch(Exception e) {\n\t           e.printStackTrace();\n\t           throw e;\n\t       }\n\t       System.out.println(i);\n\t   }\n\t}","id":21012,"modified_method":"/**\n\t * This test once uncovered an error in the network manager due to prefix registration timing\n\t */\n\t@Test\n\tpublic void testObjectIOLoop() throws Exception {\n\t   CCNHandle handle = CCNHandle.getHandle();\n\t   ContentName basename = testHelper.getTestNamespace(\"content_\"  + _rnd.nextLong());\n\n\t   // Send a stream of string objects\n\t   ArrayList<CCNStringObject> sent = new ArrayList<CCNStringObject>();\n\t         int tosend = 100;\n\t   for(int i = 0; i < tosend; i++) {\n\t       // Save content\n\t       try {\n\t    \t   System.out.println(\"Trying for object \" + i);\n\t           CCNStringObject so = new CCNStringObject(basename,\n\t                   String.format(\"string object %d\", i),\n\t                   SaveType.LOCALREPOSITORY, handle);\n\t           so.save();\n\t           so.close();\n\t           sent.add(so);\n\t       } catch(Exception e) {\n\t           e.printStackTrace();\n\t           throw e;\n\t       }\n\t       System.out.println(i);\n\t   }\n\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Partially test prefix registration/deregistration\n\t * @throws Exception\n\t */\n\t@Test\n\tpublic void testRegisteredPrefix() throws Exception {\n\t\tTestFilterListener tfl = new TestFilterListener();\n\t\tTestListener tl = new TestListener();\n\t\tContentName testName1 = ContentName.fromNative(testPrefix, \"foo\");\n\t\tInterest interest1 = new Interest(testName1);\n\t\tContentName testName2 = ContentName.fromNative(testName1, \"bar\"); // /foo/bar\n\t\tInterest interest2 = new Interest(testName2);\n\t\tContentName testName3 = ContentName.fromNative(testName2, \"blaz\"); // /foo/bar/blaz\n\t\tContentName testName4 = ContentName.fromNative(testName2, \"xxx\");  // /foo/bar/xxx\n\t\tInterest interest4 = new Interest(testName4);\n\t\tContentName testName5 = ContentName.fromNative(testPrefix, \"zoo\"); // /zoo\n\t\tContentName testName6 = ContentName.fromNative(testName1, \"zoo\");  // /foo/zoo\n\t\tContentName testName7 = ContentName.fromNative(testName2, \"spaz\"); // /foo/bar/spaz\n\t\tInterest interest6 = new Interest(testName6);\n\t\t\n\t\t// Test that we don't receive interests above what we registered\n\t\tgotInterest = false;\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName2, tfl);\n\t\tgetHandle.expressInterest(interest1, tl);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertFalse(gotInterest);\n\t\tgetHandle.cancelInterest(interest1, tl);\n\t\tgetHandle.expressInterest(interest2, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest2, tl);\n\t\t\n\t\t// Test that an \"in-between\" prefix gets registered properly\n\t\tgotInterest = false;\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName2, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName3, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName4, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName5, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName2, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName1, tfl);\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tgetHandle.expressInterest(interest6, tl);\t\t\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest6, tl);\n\t\t\n\t\t// Make sure that a filter that is a prefix of a registered filter\n\t\t// doesn't get registered separately.\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName7, tfl);\n\t\tArrayList<ContentName> prefixes = putHandle.getNetworkManager().getRegisteredPrefixes();\n\t\tAssert.assertFalse(prefixes.contains(testName7));\n\t\tgetHandle.expressInterest(interest4, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest4, tl);\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tgetHandle.expressInterest(interest6, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest6, tl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName1, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName2, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName3, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName5, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName7, tfl);\n\t\t\n\t\t// Make sure nothing is registered after a /\n\t\tContentName slashName = ContentName.fromNative(\"/\");\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName1, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, slashName, tfl);\n\t\tputHandle.getNetworkManager().setInterestFilter(this, testName5, tfl);\n\t\tprefixes = putHandle.getNetworkManager().getRegisteredPrefixes();\n\t\tAssert.assertFalse(prefixes.contains(testName5));\n\t\t\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName1, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, slashName, tfl);\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName5, tfl);\n\t\t\n\t}","id":21013,"modified_method":"/**\n\t * Partially test prefix registration/deregistration\n\t * @throws Exception\n\t */\n\t@Test\n\tpublic void testRegisteredPrefix() throws Exception {\n\t\tTestFilterListener tfl = new TestFilterListener();\n\t\tTestListener tl = new TestListener();\n\t\tContentName testName1 = ContentName.fromNative(testPrefix, \"foo\");\n\t\tInterest interest1 = new Interest(testName1);\n\t\tContentName testName2 = ContentName.fromNative(testName1, \"bar\"); // /foo/bar\n\t\tInterest interest2 = new Interest(testName2);\n\t\tContentName testName3 = ContentName.fromNative(testName2, \"blaz\"); // /foo/bar/blaz\n\t\tContentName testName4 = ContentName.fromNative(testName2, \"xxx\");  // /foo/bar/xxx\n\t\tInterest interest4 = new Interest(testName4);\n\t\tContentName testName5 = ContentName.fromNative(testPrefix, \"zoo\"); // /zoo\n\t\tContentName testName6 = ContentName.fromNative(testName1, \"zoo\");  // /foo/zoo\n\t\tContentName testName7 = ContentName.fromNative(testName2, \"spaz\"); // /foo/bar/spaz\n\t\tInterest interest6 = new Interest(testName6);\n\t\t\n\t\t// Test that we don't receive interests above what we registered\n\t\tgotInterest = false;\n\t\tputHandle.registerFilter(testName2, tfl);\n\t\tgetHandle.expressInterest(interest1, tl);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertFalse(gotInterest);\n\t\tgetHandle.cancelInterest(interest1, tl);\n\t\tgetHandle.expressInterest(interest2, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest2, tl);\n\t\t\n\t\t// Test that an \"in-between\" prefix gets registered properly\n\t\tgotInterest = false;\n\t\tputHandle.getNetworkManager().cancelInterestFilter(this, testName2, tfl);\n\t\tputHandle.registerFilter(testName3, tfl);\n\t\tputHandle.registerFilter(testName4, tfl);\n\t\tputHandle.registerFilter(testName5, tfl);\n\t\tputHandle.registerFilter(testName2, tfl);\n\t\tputHandle.registerFilter(testName1, tfl);\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tgetHandle.expressInterest(interest6, tl);\t\t\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest6, tl);\n\t\t\n\t\t// Make sure that a filter that is a prefix of a registered filter\n\t\t// doesn't get registered separately.\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tputHandle.registerFilter(testName7, tfl);\n\t\tArrayList<ContentName> prefixes = putHandle.getNetworkManager().getRegisteredPrefixes();\n\t\tAssert.assertFalse(prefixes.contains(testName7));\n\t\tgetHandle.expressInterest(interest4, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest4, tl);\n\t\tgotInterest = false;\n\t\tfilterSema.drainPermits();\n\t\tgetHandle.expressInterest(interest6, tl);\n\t\tfilterSema.tryAcquire(WAIT_MILLIS, TimeUnit.MILLISECONDS);\n\t\tgetHandle.checkError(TEST_TIMEOUT);\n\t\tAssert.assertTrue(gotInterest);\n\t\tgetHandle.cancelInterest(interest6, tl);\n\t\tputHandle.unregisterFilter(testName1, tfl);\n\t\tputHandle.unregisterFilter(testName2, tfl);\n\t\tputHandle.unregisterFilter(testName3, tfl);\n\t\tputHandle.unregisterFilter(testName5, tfl);\n\t\tputHandle.unregisterFilter(testName7, tfl);\n\t\t\n\t\t// Make sure nothing is registered after a /\n\t\tContentName slashName = ContentName.fromNative(\"/\");\n\t\tputHandle.registerFilter(testName1, tfl);\n\t\tputHandle.registerFilter(slashName, tfl);\n\t\tputHandle.registerFilter(testName5, tfl);\n\t\tprefixes = putHandle.getNetworkManager().getRegisteredPrefixes();\n\t\tAssert.assertFalse(prefixes.contains(testName5));\n\t\t\n\t\tputHandle.unregisterFilter(testName1, tfl);\n\t\tputHandle.unregisterFilter(slashName, tfl);\n\t\tputHandle.unregisterFilter(testName5, tfl);\n\t\t\n\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public Interest handleContent(ContentObject co,\n\t\t\t\tInterest interest) {\n\t\t\tAssert.assertFalse(co == null);\n\t\t\tContentName nameBase = SegmentationProfile.segmentRoot(co.name());\n\t\t\tAssert.assertEquals(nameBase.stringComponent(nameBase.count()-1), new String(co.content()));\n\t\t\tgotData = true;\n\t\t\tsema.release();\n\t\t\t\n\t\t\t/*\n\t\t\t * Test call of cancel in handler doesn't hang\n\t\t\t */\n\t\t\tgetHandle.cancelInterest(testInterest, this);\n\t\t\treturn null;\n\t\t}","id":21014,"modified_method":"public Interest handleContent(ContentObject co,\n\t\t\t\tInterest interest) {\n\t\t\tAssert.assertFalse(co == null);\n\t\t\tgotData = true;\n\t\t\tsema.release();\n\t\t\t\n\t\t\t/*\n\t\t\t * Test call of cancel in handler doesn't hang\n\t\t\t */\n\t\t\tgetHandle.cancelInterest(interest, this);\n\t\t\treturn null;\n\t\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\t/**\n\t * Send out a start write request to any listening repositories and wait for a response.\n\t * \n\t * @param name\tthe basename of the stream to start\n\t * @param shape currently ignored - can only be Shape.STREAM\n\t * @throws IOException if there is no response from a repository\n\t */\n\tpublic void startWrite(ContentName name, Shape shape) throws IOException {\n\t\t\n\t\tif (Log.isLoggable(Log.FAC_REPO, Level.INFO))\n\t\t\tLog.info(Log.FAC_REPO, \"RepositoryFlowControl.startWrite called for name {0}, shape {1}\", name, shape);\n\t\tClient client = new Client(name, shape);\n\t\t_clients.add(client);\n\t\t\n\t\t// A nonce is used because if we tried to write data with the same name more than once, we could retrieve the\n\t\t// the previous answer from the cache, and the repo would never be informed of our start write.\n\t\tContentName repoWriteName = \n\t\t\tnew ContentName(name, CommandMarker.COMMAND_MARKER_REPO_START_WRITE.getBytes(), Interest.generateNonce());\n\t\tInterest writeInterest = new Interest(repoWriteName);\n\t\tif (localRepo || SystemConfiguration.FC_LOCALREPOSITORY) {\n\t\t\t//this is meant to be written to a local repository, not any/multiple connected repos\n\t\t\twriteInterest.scope(1);\n\t\t}\n\t\t\n\t\t_handle.expressInterest(writeInterest, this);\n\n\t\tsynchronized (this) {\n\t\t\t_writeInterests.add(writeInterest);\n\t\t}\n\t\t\n\t\t//Wait for information to be returned from a repo\n\t\ttry {\n\t\t\tnew Waiter(getTimeout()) {\n\t\t\t\t@Override\n\t\t\t\tprotected boolean check(Object o, Object check) throws Exception {\n\t\t\t\t\treturn ((Client)check)._initialized;\n\t\t\t\t}\n\t\t\t}.wait(this, client);\n\t\t} catch (Exception e) {} // Can't happen\n\t\t\n\t\tsynchronized (this) {\n\t\t\tif (!client._initialized) {\n\t\t\t\t_clients.remove();\n\t\t\t\tLog.warning(Log.FAC_REPO, \"No response from a repository, cannot add name space : \" + name);\n\t\t\t\tthrow new IOException(\"No response from a repository for \" + name);\n\t\t\t}\n\t\t}\n\t}","id":21015,"modified_method":"@Override\n\t/**\n\t * Send out a start write request to any listening repositories and wait for a response.\n\t * \n\t * @param name\tthe basename of the stream to start\n\t * @param shape currently ignored - can only be Shape.STREAM\n\t * @throws IOException if there is no response from a repository\n\t */\n\tpublic void startWrite(ContentName name, Shape shape) throws IOException {\n\t\t\n\t\tif (Log.isLoggable(Log.FAC_REPO, Level.INFO))\n\t\t\tLog.info(Log.FAC_REPO, \"RepositoryFlowControl.startWrite called for name {0}, shape {1}\", name, shape);\n\t\tClient client = new Client(name, shape);\n\t\t_clients.add(client);\n\t\t\n\t\t// A nonce is used because if we tried to write data with the same name more than once, we could retrieve the\n\t\t// the previous answer from the cache, and the repo would never be informed of our start write.\n\t\tContentName repoWriteName = \n\t\t\tnew ContentName(name, CommandMarker.COMMAND_MARKER_REPO_START_WRITE.getBytes(), Interest.generateNonce());\n\t\tInterest writeInterest = new Interest(repoWriteName);\n\t\tif (localRepo || SystemConfiguration.FC_LOCALREPOSITORY) {\n\t\t\t//this is meant to be written to a local repository, not any/multiple connected repos\n\t\t\twriteInterest.scope(1);\n\t\t}\n\t\t\n\t\t_handle.expressInterest(writeInterest, this);\n\n\t\tsynchronized (this) {\n\t\t\t_writeInterests.add(writeInterest);\n\t\t}\n\t\t\n\t\t//Wait for information to be returned from a repo\n\t\ttry {\n\t\t\tnew Waiter(getTimeout()) {\n\t\t\t\t@Override\n\t\t\t\tprotected boolean check(Object o, Object check) throws Exception {\n\t\t\t\t\treturn ((Client)check)._initialized;\n\t\t\t\t}\n\t\t\t}.wait(this, client);\n\t\t} catch (Exception e) {\n\t\t\tLog.warning(Log.FAC_REPO, e.getClass() + \" : \" + e.getMessage());\n\t\t}\n\t\t\n\t\tsynchronized (this) {\n\t\t\tif (!client._initialized) {\n\t\t\t\t_clients.remove();\n\t\t\t\tLog.warning(Log.FAC_REPO, \"No response from a repository, cannot add name space : \" + name);\n\t\t\t\tthrow new IOException(\"No response from a repository for \" + name);\n\t\t\t}\n\t\t}\n\t}","commit_id":"f55dcd9e4434c55c8ba3a89fa7f2418d160dbd7b","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (PreparedStatement ps = connection.prepareStatement(\n\t\t\t\t\"select * from DLFileEntry\");\n\t\t\tResultSet rs = ps.executeQuery()) {\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\n\t\t\t\tlong repositoryId = folderId;\n\n\t\t\t\tif (repositoryId ==\n\t\t\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\t\trepositoryId = groupId;\n\t\t\t\t}\n\n\t\t\t\tString newName = DLFileEntryNameUpgradeColumnImpl.getNewName(\n\t\t\t\t\tname);\n\n\t\t\t\tif (!newName.equals(name)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDLStoreUtil.updateFile(\n\t\t\t\t\t\t\tcompanyId, repositoryId, name, newName);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t\t_log.warn(\"Unable to update file for \" + name, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsynchronizeFileVersions();\n\n\t\t// DLFileEntry\n\n\t\tUpgradeColumn nameColumn = new DLFileEntryNameUpgradeColumnImpl(\"name\");\n\t\tUpgradeColumn titleColumn = new DLFileEntryTitleUpgradeColumnImpl(\n\t\t\tnameColumn, \"title\");\n\t\tUpgradeColumn versionColumn = new DLFileEntryVersionUpgradeColumnImpl(\n\t\t\t\"version\");\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\tnameColumn, titleColumn, versionColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileEntryTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileRank\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS,\n\t\t\tnameColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileRankTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileRankTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileShortcut\n\n\t\tUpgradeColumn toNameColumn = new DLFileEntryNameUpgradeColumnImpl(\n\t\t\t\"toName\");\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileShortcutTable.TABLE_NAME, DLFileShortcutTable.TABLE_COLUMNS,\n\t\t\ttoNameColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileShortcutTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileShortcutTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileVersion\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileVersionTable.TABLE_NAME, DLFileVersionTable.TABLE_COLUMNS,\n\t\t\tnameColumn, versionColumn);\n\n\t\tupgradeTable.setCreateSQL(\n\t\t\tStringUtil.replace(\n\t\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\t\tnew String[] {\n\t\t\t\t\t\",extraSettings VARCHAR(75) null\",\n\t\t\t\t\t\",title VARCHAR(75) null\"\n\t\t\t\t},\n\t\t\t\tnew String[] {\n\t\t\t\t\t\",extraSettings STRING null\",\n\t\t\t\t\t\",title VARCHAR(255) null\"\n\t\t\t\t}));\n\n\t\tupgradeTable.setIndexesSQL(DLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\t}","id":21016,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (PreparedStatement ps = connection.prepareStatement(\n\t\t\t\t\"select * from DLFileEntry\");\n\t\t\tResultSet rs = ps.executeQuery()) {\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\n\t\t\t\tlong repositoryId = folderId;\n\n\t\t\t\tif (repositoryId ==\n\t\t\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\t\trepositoryId = groupId;\n\t\t\t\t}\n\n\t\t\t\tString newName = DLFileEntryNameUpgradeColumnImpl.getNewName(\n\t\t\t\t\tname);\n\n\t\t\t\tif (!newName.equals(name)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDLStoreUtil.updateFile(\n\t\t\t\t\t\t\tcompanyId, repositoryId, name, newName);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t\t_log.warn(\"Unable to update file for \" + name, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsynchronizeFileVersions();\n\n\t\t// DLFileEntry\n\n\t\tUpgradeColumn nameColumn = new DLFileEntryNameUpgradeColumnImpl(\"name\");\n\t\tUpgradeColumn titleColumn = new DLFileEntryTitleUpgradeColumnImpl(\n\t\t\tnameColumn, \"title\");\n\t\tUpgradeColumn versionColumn = new DLFileEntryVersionUpgradeColumnImpl(\n\t\t\t\"version\");\n\n\t\tupgradeTable(\n\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\tDLFileEntryTable.TABLE_SQL_CREATE,\n\t\t\tDLFileEntryTable.TABLE_SQL_ADD_INDEXES, nameColumn, titleColumn,\n\t\t\tversionColumn);\n\n\t\t// DLFileRank\n\n\t\tupgradeTable(\n\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS,\n\t\t\tDLFileRankTable.TABLE_SQL_CREATE,\n\t\t\tDLFileRankTable.TABLE_SQL_ADD_INDEXES, nameColumn);\n\n\t\t// DLFileShortcut\n\n\t\tUpgradeColumn toNameColumn = new DLFileEntryNameUpgradeColumnImpl(\n\t\t\t\"toName\");\n\n\t\tupgradeTable(\n\t\t\tDLFileShortcutTable.TABLE_NAME, DLFileShortcutTable.TABLE_COLUMNS,\n\t\t\tDLFileShortcutTable.TABLE_SQL_CREATE,\n\t\t\tDLFileShortcutTable.TABLE_SQL_ADD_INDEXES, toNameColumn);\n\n\t\t// DLFileVersion\n\n\t\tString tableSqlCreate = StringUtil.replace(\n\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\tnew String[] {\n\t\t\t\t\",extraSettings VARCHAR(75) null\",\n\t\t\t\t\",title VARCHAR(75) null\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\",extraSettings STRING null\",\n\t\t\t\t\",title VARCHAR(255) null\"\n\t\t\t});\n\n\t\tupgradeTable(\n\t\t\tDLFileVersionTable.TABLE_NAME, DLFileVersionTable.TABLE_COLUMNS,\n\t\t\ttableSqlCreate, DLFileVersionTable.TABLE_SQL_ADD_INDEXES,\n\t\t\tnameColumn, versionColumn);\n\t}","commit_id":"815a1b67b859fffd315e63a2c326c61b8e2ddd59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (PreparedStatement ps = connection.prepareStatement(\n\t\t\t\t\"select * from DLFileEntry\");\n\t\t\tResultSet rs = ps.executeQuery()) {\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\n\t\t\t\tlong repositoryId = folderId;\n\n\t\t\t\tif (repositoryId ==\n\t\t\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\t\trepositoryId = groupId;\n\t\t\t\t}\n\n\t\t\t\tString newName = DLFileEntryNameUpgradeColumnImpl.getNewName(\n\t\t\t\t\tname);\n\n\t\t\t\tif (!newName.equals(name)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDLStoreUtil.updateFile(\n\t\t\t\t\t\t\tcompanyId, repositoryId, name, newName);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t\t_log.warn(\"Unable to update file for \" + name, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsynchronizeFileVersions();\n\n\t\t// DLFileEntry\n\n\t\tUpgradeColumn nameColumn = new DLFileEntryNameUpgradeColumnImpl(\"name\");\n\t\tUpgradeColumn titleColumn = new DLFileEntryTitleUpgradeColumnImpl(\n\t\t\tnameColumn, \"title\");\n\t\tUpgradeColumn versionColumn = new DLFileEntryVersionUpgradeColumnImpl(\n\t\t\t\"version\");\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\tnameColumn, titleColumn, versionColumn);\n\n\t\tupgradeTable.setAllowUniqueIndexes(true);\n\t\tupgradeTable.setCreateSQL(DLFileEntryTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileRank\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS,\n\t\t\tnameColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileRankTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileRankTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileShortcut\n\n\t\tUpgradeColumn toNameColumn = new DLFileEntryNameUpgradeColumnImpl(\n\t\t\t\"toName\");\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileShortcutTable.TABLE_NAME, DLFileShortcutTable.TABLE_COLUMNS,\n\t\t\ttoNameColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileShortcutTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileShortcutTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileVersion\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileVersionTable.TABLE_NAME, DLFileVersionTable.TABLE_COLUMNS,\n\t\t\tnameColumn, versionColumn);\n\n\t\tupgradeTable.setCreateSQL(DLFileVersionTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\t}","id":21017,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (PreparedStatement ps = connection.prepareStatement(\n\t\t\t\t\"select * from DLFileEntry\");\n\t\t\tResultSet rs = ps.executeQuery()) {\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\n\t\t\t\tlong repositoryId = folderId;\n\n\t\t\t\tif (repositoryId ==\n\t\t\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\t\trepositoryId = groupId;\n\t\t\t\t}\n\n\t\t\t\tString newName = DLFileEntryNameUpgradeColumnImpl.getNewName(\n\t\t\t\t\tname);\n\n\t\t\t\tif (!newName.equals(name)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDLStoreUtil.updateFile(\n\t\t\t\t\t\t\tcompanyId, repositoryId, name, newName);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t\t_log.warn(\"Unable to update file for \" + name, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsynchronizeFileVersions();\n\n\t\t// DLFileEntry\n\n\t\tUpgradeColumn nameColumn = new DLFileEntryNameUpgradeColumnImpl(\"name\");\n\t\tUpgradeColumn titleColumn = new DLFileEntryTitleUpgradeColumnImpl(\n\t\t\tnameColumn, \"title\");\n\t\tUpgradeColumn versionColumn = new DLFileEntryVersionUpgradeColumnImpl(\n\t\t\t\"version\");\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\tnameColumn, titleColumn, versionColumn);\n\n\t\tupgradeTable.setAllowUniqueIndexes(true);\n\t\tupgradeTable.setCreateSQL(DLFileEntryTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(DLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// DLFileRank\n\n\t\tupgradeTable(\n\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS,\n\t\t\tDLFileRankTable.TABLE_SQL_CREATE,\n\t\t\tDLFileRankTable.TABLE_SQL_ADD_INDEXES, nameColumn);\n\n\t\t// DLFileShortcut\n\n\t\tUpgradeColumn toNameColumn = new DLFileEntryNameUpgradeColumnImpl(\n\t\t\t\"toName\");\n\n\t\tupgradeTable(\n\t\t\tDLFileShortcutTable.TABLE_NAME, DLFileShortcutTable.TABLE_COLUMNS,\n\t\t\tDLFileShortcutTable.TABLE_SQL_CREATE,\n\t\t\tDLFileShortcutTable.TABLE_SQL_ADD_INDEXES, toNameColumn);\n\n\t\t// DLFileVersion\n\n\t\tupgradeTable(\n\t\t\tDLFileVersionTable.TABLE_NAME, DLFileVersionTable.TABLE_COLUMNS,\n\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES, nameColumn,\n\t\t\tversionColumn);\n\t}","commit_id":"815a1b67b859fffd315e63a2c326c61b8e2ddd59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tupdateGroupId();\n\n\t\t// SocialActivity\n\n\t\tUpgradeColumn createDateColumn = new DateUpgradeColumnImpl(\n\t\t\t\"createDate\");\n\t\tUpgradeColumn modifiedDateColumn = new DateUpgradeColumnImpl(\n\t\t\t\"modifiedDate\");\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tSocialActivityTable.TABLE_NAME, SocialActivityTable.TABLE_COLUMNS,\n\t\t\tcreateDateColumn);\n\n\t\tupgradeTable.setCreateSQL(SocialActivityTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(SocialActivityTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// SocialRelation\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tSocialRelationTable.TABLE_NAME, SocialRelationTable.TABLE_COLUMNS,\n\t\t\tcreateDateColumn);\n\n\t\tupgradeTable.setCreateSQL(SocialRelationTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(SocialRelationTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\n\t\t// SocialRequest\n\n\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tSocialRequestTable.TABLE_NAME, SocialRequestTable.TABLE_COLUMNS,\n\t\t\tcreateDateColumn, modifiedDateColumn);\n\n\t\tupgradeTable.setCreateSQL(SocialRequestTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(SocialRequestTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\t}","id":21018,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tupdateGroupId();\n\n\t\t// SocialActivity\n\n\t\tUpgradeColumn createDateColumn = new DateUpgradeColumnImpl(\n\t\t\t\"createDate\");\n\t\tUpgradeColumn modifiedDateColumn = new DateUpgradeColumnImpl(\n\t\t\t\"modifiedDate\");\n\n\t\tupgradeTable(\n\t\t\tSocialActivityTable.TABLE_NAME, SocialActivityTable.TABLE_COLUMNS,\n\t\t\tSocialActivityTable.TABLE_SQL_CREATE,\n\t\t\tSocialActivityTable.TABLE_SQL_ADD_INDEXES, createDateColumn);\n\n\t\t// SocialRelation\n\n\t\tupgradeTable(\n\t\t\tSocialRelationTable.TABLE_NAME, SocialRelationTable.TABLE_COLUMNS,\n\t\t\tSocialRelationTable.TABLE_SQL_CREATE,\n\t\t\tSocialRelationTable.TABLE_SQL_ADD_INDEXES, createDateColumn);\n\n\t\t// SocialRequest\n\n\t\tupgradeTable(\n\t\t\tSocialRequestTable.TABLE_NAME, SocialRequestTable.TABLE_COLUMNS,\n\t\t\tSocialRequestTable.TABLE_SQL_CREATE,\n\t\t\tSocialRequestTable.TABLE_SQL_ADD_INDEXES, createDateColumn,\n\t\t\tmodifiedDateColumn);\n\t}","commit_id":"815a1b67b859fffd315e63a2c326c61b8e2ddd59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type AssetEntry title STRING null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tAssetEntryTable.TABLE_NAME, AssetEntryTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(AssetEntryTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(AssetEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\tupdateAssetClassTypeId();\n\t\tupdateIGImageClassName();\n\t}","id":21019,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type AssetEntry title STRING null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tAssetEntryTable.TABLE_NAME, AssetEntryTable.TABLE_COLUMNS,\n\t\t\t\tAssetEntryTable.TABLE_SQL_CREATE,\n\t\t\t\tAssetEntryTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\tupdateAssetClassTypeId();\n\t\tupdateIGImageClassName();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type BookmarksEntry name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// BookmarksEntry\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tBookmarksEntryTable.TABLE_NAME,\n\t\t\t\tBookmarksEntryTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(BookmarksEntryTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tBookmarksEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\t}","id":21020,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type BookmarksEntry name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// BookmarksEntry\n\n\t\t\tupgradeTable(\n\t\t\t\tBookmarksEntryTable.TABLE_NAME,\n\t\t\t\tBookmarksEntryTable.TABLE_COLUMNS,\n\t\t\t\tBookmarksEntryTable.TABLE_SQL_CREATE,\n\t\t\t\tBookmarksEntryTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type CalEvent remindBy INTEGER\");\n\t\t}\n\t\telse {\n\n\t\t\t// CalEvent\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tCalEventTable.TABLE_NAME, CalEventTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(CalEventTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(CalEventTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21021,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type CalEvent remindBy INTEGER\");\n\t\t}\n\t\telse {\n\n\t\t\t// CalEvent\n\n\t\t\tupgradeTable(\n\t\t\t\tCalEventTable.TABLE_NAME, CalEventTable.TABLE_COLUMNS,\n\t\t\t\tCalEventTable.TABLE_SQL_CREATE,\n\t\t\t\tCalEventTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileEntry name VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileRank name VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileShortcut toName VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileVersion name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// DLFileEntry\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileEntryTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(DLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// DLFileRank\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileRankTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(DLFileRankTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// DLFileShortcut\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileShortcutTable.TABLE_NAME,\n\t\t\t\tDLFileShortcutTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileShortcutTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tDLFileShortcutTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// DLFileVersion\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME,\n\t\t\t\tDLFileVersionTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileVersionTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\n\t\t// PortletPreferences\n\n\t\tupdatePortletPreferences();\n\t}","id":21022,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileEntry name VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileRank name VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileShortcut toName VARCHAR(255) null\");\n\n\t\t\trunSQL(\"alter_column_type DLFileVersion name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// DLFileEntry\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\t\tDLFileEntryTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DLFileRank\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileRankTable.TABLE_NAME, DLFileRankTable.TABLE_COLUMNS,\n\t\t\t\tDLFileRankTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileRankTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DLFileShortcut\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileShortcutTable.TABLE_NAME,\n\t\t\t\tDLFileShortcutTable.TABLE_COLUMNS,\n\t\t\t\tDLFileShortcutTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileShortcutTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DLFileVersion\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME, DLFileVersionTable.TABLE_COLUMNS,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\n\t\t// PortletPreferences\n\n\t\tupdatePortletPreferences();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateFileVersions() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select groupId, fileVersionId, folderId, name, extension \" +\n\t\t\t\t\t\"from DLFileVersion\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong fileVersionId = rs.getLong(\"fileVersionId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString extension = rs.getString(\"extension\");\n\n\t\t\t\tString mimeType = MimeTypesUtil.getContentType(\n\t\t\t\t\t\"A.\" + extension);\n\n\t\t\t\tlong fileEntryId = getFileEntryId(groupId, folderId, name);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update DLFileVersion set fileEntryId = \" + fileEntryId +\n\t\t\t\t\t\t\", mimeType = '\" + mimeType +\n\t\t\t\t\t\t\t\"' where fileVersionId = \" + fileVersionId);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileVersion extraSettings TEXT null\");\n\t\t\trunSQL(\"alter_column_type DLFileVersion title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME,\n\t\t\t\tDLFileVersionTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileVersionTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\trunSQL(\"alter table DLFileVersion drop column name\");\n\t}","id":21023,"modified_method":"protected void updateFileVersions() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select groupId, fileVersionId, folderId, name, extension \" +\n\t\t\t\t\t\"from DLFileVersion\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong groupId = rs.getLong(\"groupId\");\n\t\t\t\tlong fileVersionId = rs.getLong(\"fileVersionId\");\n\t\t\t\tlong folderId = rs.getLong(\"folderId\");\n\t\t\t\tString name = rs.getString(\"name\");\n\t\t\t\tString extension = rs.getString(\"extension\");\n\n\t\t\t\tString mimeType = MimeTypesUtil.getContentType(\n\t\t\t\t\t\"A.\" + extension);\n\n\t\t\t\tlong fileEntryId = getFileEntryId(groupId, folderId, name);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update DLFileVersion set fileEntryId = \" + fileEntryId +\n\t\t\t\t\t\t\", mimeType = '\" + mimeType +\n\t\t\t\t\t\t\t\"' where fileVersionId = \" + fileVersionId);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileVersion extraSettings TEXT null\");\n\t\t\trunSQL(\"alter_column_type DLFileVersion title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME,\n\t\t\t\tDLFileVersionTable.TABLE_COLUMNS,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\trunSQL(\"alter table DLFileVersion drop column name\");\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileEntry size_ LONG\");\n\n\t\t\trunSQL(\"alter_column_type DLFileVersion size_ LONG\");\n\t\t}\n\t\telse {\n\n\t\t\t// DLFileEntry\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileEntryTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(DLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// DLFileVersion\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME,\n\t\t\t\tDLFileVersionTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(DLFileVersionTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21024,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type DLFileEntry size_ LONG\");\n\n\t\t\trunSQL(\"alter_column_type DLFileVersion size_ LONG\");\n\t\t}\n\t\telse {\n\n\t\t\t// DLFileEntry\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileEntryTable.TABLE_NAME, DLFileEntryTable.TABLE_COLUMNS,\n\t\t\t\tDLFileEntryTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DLFileVersion\n\n\t\t\tupgradeTable(\n\t\t\t\tDLFileVersionTable.TABLE_NAME,\n\t\t\t\tDLFileVersionTable.TABLE_COLUMNS,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_CREATE,\n\t\t\t\tDLFileVersionTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Group_ name VARCHAR(150) null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tGroupTable.TABLE_NAME, GroupTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(GroupTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(GroupTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\tupdateName();\n\t\tupdateSite();\n\t}","id":21025,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Group_ name VARCHAR(150) null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tGroupTable.TABLE_NAME, GroupTable.TABLE_COLUMNS,\n\t\t\t\tGroupTable.TABLE_SQL_CREATE,\n\t\t\t\tGroupTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\tupdateName();\n\t\tupdateSite();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalArticle smallImageURL STRING null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalFeed targetLayoutFriendlyUrl \" +\n\t\t\t\t\t\"VARCHAR(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalTemplate smallImageURL STRING null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalArticleTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalFeedTable.TABLE_NAME, JournalFeedTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalFeedTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(JournalFeedTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalTemplateTable.TABLE_NAME,\n\t\t\t\tJournalTemplateTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalTemplateTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalTemplateTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21026,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalArticle smallImageURL STRING null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalFeed targetLayoutFriendlyUrl \" +\n\t\t\t\t\t\"VARCHAR(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalTemplate smallImageURL STRING null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS,\n\t\t\t\tJournalArticleTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable(\n\t\t\t\tJournalFeedTable.TABLE_NAME, JournalFeedTable.TABLE_COLUMNS,\n\t\t\t\tJournalFeedTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalFeedTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable(\n\t\t\t\tJournalTemplateTable.TABLE_NAME,\n\t\t\t\tJournalTemplateTable.TABLE_COLUMNS,\n\t\t\t\tJournalTemplateTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalTemplateTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type JournalArticle title STRING null\");\n\n\t\t\trunSQL(\"alter_column_type JournalStructure name STRING null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalStructure description STRING null\");\n\n\t\t\trunSQL(\"alter_column_type JournalTemplate name STRING null\");\n\t\t\trunSQL(\"alter_column_type JournalTemplate description STRING null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalArticleTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalStructureTable.TABLE_NAME,\n\t\t\t\tJournalStructureTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalStructureTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalStructureTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalTemplateTable.TABLE_NAME,\n\t\t\t\tJournalTemplateTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalTemplateTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalTemplateTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\tupdateStructureXsd();\n\t}","id":21027,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type JournalArticle title STRING null\");\n\n\t\t\trunSQL(\"alter_column_type JournalStructure name STRING null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type JournalStructure description STRING null\");\n\n\t\t\trunSQL(\"alter_column_type JournalTemplate name STRING null\");\n\t\t\trunSQL(\"alter_column_type JournalTemplate description STRING null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS,\n\t\t\t\tJournalArticleTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable(\n\t\t\t\tJournalStructureTable.TABLE_NAME,\n\t\t\t\tJournalStructureTable.TABLE_COLUMNS,\n\t\t\t\tJournalStructureTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalStructureTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable(\n\t\t\t\tJournalTemplateTable.TABLE_NAME,\n\t\t\t\tJournalTemplateTable.TABLE_COLUMNS,\n\t\t\t\tJournalTemplateTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalTemplateTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\tupdateStructureXsd();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type JournalArticle title VARCHAR(300) null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(JournalArticleTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21028,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type JournalArticle title VARCHAR(300) null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tJournalArticleTable.TABLE_NAME,\n\t\t\t\tJournalArticleTable.TABLE_COLUMNS,\n\t\t\t\tJournalArticleTable.TABLE_SQL_CREATE,\n\t\t\t\tJournalArticleTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Layout friendlyURL VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Layout\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tLayoutTable.TABLE_NAME, LayoutTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(LayoutTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(LayoutTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21029,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Layout friendlyURL VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Layout\n\n\t\t\tupgradeTable(\n\t\t\t\tLayoutTable.TABLE_NAME, LayoutTable.TABLE_COLUMNS,\n\t\t\t\tLayoutTable.TABLE_SQL_CREATE,\n\t\t\t\tLayoutTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Lock_ owner VARCHAR(300) null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tLockTable.TABLE_NAME, LockTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(LockTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(LockTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21030,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Lock_ owner VARCHAR(300) null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tLockTable.TABLE_NAME, LockTable.TABLE_COLUMNS,\n\t\t\t\tLockTable.TABLE_SQL_CREATE,\n\t\t\t\tLockTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type PollsChoice description STRING null\");\n\n\t\t\trunSQL(\"alter_column_type PollsQuestion title STRING null\");\n\t\t}\n\t\telse {\n\n\t\t\t// PollsChoice\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tPollsChoiceTable.TABLE_NAME, PollsChoiceTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(PollsChoiceTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(PollsChoiceTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// PollsQuestion\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tPollsQuestionTable.TABLE_NAME,\n\t\t\t\tPollsQuestionTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(PollsQuestionTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tPollsQuestionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21031,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type PollsChoice description STRING null\");\n\n\t\t\trunSQL(\"alter_column_type PollsQuestion title STRING null\");\n\t\t}\n\t\telse {\n\n\t\t\t// PollsChoice\n\n\t\t\tupgradeTable(\n\t\t\t\tPollsChoiceTable.TABLE_NAME, PollsChoiceTable.TABLE_COLUMNS,\n\t\t\t\tPollsChoiceTable.TABLE_SQL_CREATE,\n\t\t\t\tPollsChoiceTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// PollsQuestion\n\n\t\t\tupgradeTable(\n\t\t\t\tPollsQuestionTable.TABLE_NAME,\n\t\t\t\tPollsQuestionTable.TABLE_COLUMNS,\n\t\t\t\tPollsQuestionTable.TABLE_SQL_CREATE,\n\t\t\t\tPollsQuestionTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Resource_ primKey VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Resource\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tResourceTable.TABLE_NAME, ResourceTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(ResourceTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(ResourceTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21032,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type Resource_ primKey VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Resource\n\n\t\t\tupgradeTable(\n\t\t\t\tResourceTable.TABLE_NAME, ResourceTable.TABLE_COLUMNS,\n\t\t\t\tResourceTable.TABLE_SQL_CREATE,\n\t\t\t\tResourceTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ResourceAction name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Resource\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tResourceActionTable.TABLE_NAME,\n\t\t\t\tResourceActionTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(ResourceActionTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tResourceActionTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21033,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ResourceAction name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// Resource\n\n\t\t\tupgradeTable(\n\t\t\t\tResourceActionTable.TABLE_NAME,\n\t\t\t\tResourceActionTable.TABLE_COLUMNS,\n\t\t\t\tResourceActionTable.TABLE_SQL_CREATE,\n\t\t\t\tResourceActionTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ResourceCode name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// ResourceCode\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tResourceCodeTable.TABLE_NAME, ResourceCodeTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(ResourceCodeTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(ResourceCodeTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21034,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ResourceCode name VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// ResourceCode\n\n\t\t\tupgradeTable(\n\t\t\t\tResourceCodeTable.TABLE_NAME, ResourceCodeTable.TABLE_COLUMNS,\n\t\t\t\tResourceCodeTable.TABLE_SQL_CREATE,\n\t\t\t\tResourceCodeTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tStringBundler sb = new StringBundler(3);\n\n\t\tsb.append(\"update ShoppingItem set groupId = (select groupId from \");\n\t\tsb.append(\"ShoppingCategory where ShoppingCategory.categoryId = \");\n\t\tsb.append(\"ShoppingItem.categoryId)\");\n\n\t\trunSQL(sb.toString());\n\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ShoppingItem smallImageURL STRING null\");\n\t\t\trunSQL(\"alter_column_type ShoppingItem mediumImageURL STRING null\");\n\t\t\trunSQL(\"alter_column_type ShoppingItem largeImageURL STRING null\");\n\t\t}\n\t\telse {\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tShoppingItemTable.TABLE_NAME, ShoppingItemTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(ShoppingItemTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(ShoppingItemTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21035,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tStringBundler sb = new StringBundler(3);\n\n\t\tsb.append(\"update ShoppingItem set groupId = (select groupId from \");\n\t\tsb.append(\"ShoppingCategory where ShoppingCategory.categoryId = \");\n\t\tsb.append(\"ShoppingItem.categoryId)\");\n\n\t\trunSQL(sb.toString());\n\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type ShoppingItem smallImageURL STRING null\");\n\t\t\trunSQL(\"alter_column_type ShoppingItem mediumImageURL STRING null\");\n\t\t\trunSQL(\"alter_column_type ShoppingItem largeImageURL STRING null\");\n\t\t}\n\t\telse {\n\t\t\tupgradeTable(\n\t\t\t\tShoppingItemTable.TABLE_NAME, ShoppingItemTable.TABLE_COLUMNS,\n\t\t\t\tShoppingItemTable.TABLE_SQL_CREATE,\n\t\t\t\tShoppingItemTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type SCProductEntry tags VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// SCProductEntry\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tSCProductEntryTable.TABLE_NAME,\n\t\t\t\tSCProductEntryTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(SCProductEntryTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tSCProductEntryTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21036,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type SCProductEntry tags VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// SCProductEntry\n\n\t\t\tupgradeTable(\n\t\t\t\tSCProductEntryTable.TABLE_NAME,\n\t\t\t\tSCProductEntryTable.TABLE_COLUMNS,\n\t\t\t\tSCProductEntryTable.TABLE_SQL_CREATE,\n\t\t\t\tSCProductEntryTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type TagsAsset title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// TagsAsset\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tTagsAssetTable.TABLE_NAME, TagsAssetTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(TagsAssetTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(TagsAssetTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\tupdateAssetViewCount();\n\n\t\t// TagsProperty\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tTagsPropertyTable.TABLE_NAME, TagsPropertyTable.TABLE_COLUMNS,\n\t\t\tnew TagsPropertyValueUpgradeColumnImpl(\"value\"));\n\n\t\tupgradeTable.setCreateSQL(TagsPropertyTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(TagsPropertyTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\t}","id":21037,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type TagsAsset title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// TagsAsset\n\n\t\t\tupgradeTable(\n\t\t\t\tTagsAssetTable.TABLE_NAME, TagsAssetTable.TABLE_COLUMNS,\n\t\t\t\tTagsAssetTable.TABLE_SQL_CREATE,\n\t\t\t\tTagsAssetTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\tupdateAssetViewCount();\n\n\t\t// TagsProperty\n\n\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\tTagsPropertyTable.TABLE_NAME, TagsPropertyTable.TABLE_COLUMNS,\n\t\t\tnew TagsPropertyValueUpgradeColumnImpl(\"value\"));\n\n\t\tupgradeTable.setCreateSQL(TagsPropertyTable.TABLE_SQL_CREATE);\n\t\tupgradeTable.setIndexesSQL(TagsPropertyTable.TABLE_SQL_ADD_INDEXES);\n\n\t\tupgradeTable.updateTable();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type User_ greeting VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// User_\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tUserTable.TABLE_NAME, UserTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(UserTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(UserTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\tStringBundler sb = new StringBundler(9);\n\n\t\tsb.append(\"update User_ set firstName = (select Contact_.firstName \");\n\t\tsb.append(\"from Contact_ where Contact_.contactId = \");\n\t\tsb.append(\"User_.contactId), middleName = (select \");\n\t\tsb.append(\"Contact_.middleName from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId), lastName = \");\n\t\tsb.append(\"(select Contact_.lastName from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId), jobTitle = (select \");\n\t\tsb.append(\"Contact_.jobTitle from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId)\");\n\n\t\trunSQL(sb.toString());\n\t}","id":21038,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type User_ greeting VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// User_\n\n\t\t\tupgradeTable(\n\t\t\t\tUserTable.TABLE_NAME, UserTable.TABLE_COLUMNS,\n\t\t\t\tUserTable.TABLE_SQL_CREATE,\n\t\t\t\tUserTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\tStringBundler sb = new StringBundler(9);\n\n\t\tsb.append(\"update User_ set firstName = (select Contact_.firstName \");\n\t\tsb.append(\"from Contact_ where Contact_.contactId = \");\n\t\tsb.append(\"User_.contactId), middleName = (select \");\n\t\tsb.append(\"Contact_.middleName from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId), lastName = \");\n\t\tsb.append(\"(select Contact_.lastName from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId), jobTitle = (select \");\n\t\tsb.append(\"Contact_.jobTitle from Contact_ where \");\n\t\tsb.append(\"Contact_.contactId = User_.contactId)\");\n\n\t\trunSQL(sb.toString());\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage parentTitle varchar(255) null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPage redirectTitle varchar(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPageResource title varchar(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(WikiPageTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(WikiPageTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// WikiPageResource\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tWikiPageResourceTable.TABLE_NAME,\n\t\t\t\tWikiPageResourceTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(WikiPageResourceTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21039,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage parentTitle varchar(255) null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPage redirectTitle varchar(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPageResource title varchar(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tupgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS,\n\t\t\t\tWikiPageTable.TABLE_SQL_CREATE,\n\t\t\t\tWikiPageTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// WikiPageResource\n\n\t\t\tupgradeTable(\n\t\t\t\tWikiPageResourceTable.TABLE_NAME,\n\t\t\t\tWikiPageResourceTable.TABLE_COLUMNS,\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_CREATE,\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(WikiPageTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(WikiPageTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\t}","id":21040,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage title VARCHAR(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tupgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS,\n\t\t\t\tWikiPageTable.TABLE_SQL_CREATE,\n\t\t\t\tWikiPageTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\t// groupId\n\n\t\tupdateGroupId();\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage parentTitle varchar(255) null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPage redirectTitle varchar(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPageResource title varchar(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tUpgradeTable upgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(WikiPageTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(WikiPageTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\n\t\t\t// WikiPageResource\n\n\t\t\tupgradeTable = UpgradeTableFactoryUtil.getUpgradeTable(\n\t\t\t\tWikiPageResourceTable.TABLE_NAME,\n\t\t\t\tWikiPageResourceTable.TABLE_COLUMNS);\n\n\t\t\tupgradeTable.setCreateSQL(WikiPageResourceTable.TABLE_SQL_CREATE);\n\t\t\tupgradeTable.setIndexesSQL(\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\tupgradeTable.updateTable();\n\t\t}\n\t}","id":21041,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tif (isSupportsAlterColumnType()) {\n\t\t\trunSQL(\"alter_column_type WikiPage parentTitle varchar(255) null\");\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPage redirectTitle varchar(255) null\");\n\n\t\t\trunSQL(\n\t\t\t\t\"alter_column_type WikiPageResource title varchar(255) null\");\n\t\t}\n\t\telse {\n\n\t\t\t// WikiPage\n\n\t\t\tupgradeTable(\n\t\t\t\tWikiPageTable.TABLE_NAME, WikiPageTable.TABLE_COLUMNS,\n\t\t\t\tWikiPageTable.TABLE_SQL_CREATE,\n\t\t\t\tWikiPageTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// WikiPageResource\n\n\t\t\tupgradeTable(\n\t\t\t\tWikiPageResourceTable.TABLE_NAME,\n\t\t\t\tWikiPageResourceTable.TABLE_COLUMNS,\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_CREATE,\n\t\t\t\tWikiPageResourceTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\t}","commit_id":"4c55005a38cbfbe3c0a6b406729dd8c7376fd69c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n\n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail());\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            boolean done = m_inventoryService.runNodeBaseInventoryReport(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail());\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","id":21042,"modified_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n        \n        String user = request.getRemoteUser();\n        Date reportRequestDate = new Date();\n\n        \n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            ConfigurationReportCriteria criteria = new ConfigurationReportCriteria(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n//            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_configurationReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            InventoryReportCriteria criteria = new InventoryReportCriteria(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_inventoryReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","commit_id":"8c3efd813298d2be802b757c0be4f3773587d35b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InventoryService getInventoryService() {\n        return m_inventoryService;\n    }","id":21043,"modified_method":"public InventoryReportService getInventoryReportService() {\n        return m_inventoryReportService;\n    }","commit_id":"8c3efd813298d2be802b757c0be4f3773587d35b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setInventoryService(InventoryService inventoryService) {\n        m_inventoryService = inventoryService;\n    }","id":21044,"modified_method":"public void setInventoryReportService(\n            InventoryReportService inventoryReportService) {\n        m_inventoryReportService = inventoryReportService;\n    }","commit_id":"8c3efd813298d2be802b757c0be4f3773587d35b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n\n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail());\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            boolean done = m_inventoryService.runNodeBaseInventoryReport(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail());\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","id":21045,"modified_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n        \n        String user = request.getRemoteUser();\n        Date reportRequestDate = new Date();\n\n        \n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            ConfigurationReportCriteria criteria = new ConfigurationReportCriteria(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n//            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_configurationReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            InventoryReportCriteria criteria = new InventoryReportCriteria(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_inventoryReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","commit_id":"575328bbd743ee606dbeb629a6ff3a09511538a1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InventoryService getInventoryService() {\n        return m_inventoryService;\n    }","id":21046,"modified_method":"public InventoryReportService getInventoryReportService() {\n        return m_inventoryReportService;\n    }","commit_id":"575328bbd743ee606dbeb629a6ff3a09511538a1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setInventoryService(InventoryService inventoryService) {\n        m_inventoryService = inventoryService;\n    }","id":21047,"modified_method":"public void setInventoryReportService(\n            InventoryReportService inventoryReportService) {\n        m_inventoryReportService = inventoryReportService;\n    }","commit_id":"575328bbd743ee606dbeb629a6ff3a09511538a1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n\n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail());\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            boolean done = m_inventoryService.runNodeBaseInventoryReport(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail());\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","id":21048,"modified_method":"protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response,\n            Object command, BindException errors) throws ServletException, IOException, Exception {\n\n        log().debug(\"RancidReportExecController ModelAndView onSubmit\");\n        \n        RancidReportExecCommClass bean = (RancidReportExecCommClass) command;\n        \n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getReporttype());\n        log().debug(\"RancidReportExecController ModelAndView type\" + bean.getFieldhas());\n        \n        String user = request.getRemoteUser();\n        Date reportRequestDate = new Date();\n\n        \n        ModelAndView mav = new ModelAndView(getSuccessView());\n\n        if (bean.getReporttype().compareTo(\"rancidlist\") == 0){\n            log().debug(\"RancidReportExecController rancidlist report \");\n            ConfigurationReportCriteria criteria = new ConfigurationReportCriteria(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n//            boolean done = m_inventoryService.runRancidListReport(bean.getDate(), bean.getReportfiletype(), bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_configurationReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Rancid List\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        } else if (bean.getReporttype().compareTo(\"inventory\") == 0){\n            log().debug(\"RancidReportExecController inventory report \");\n            InventoryReportCriteria criteria = new InventoryReportCriteria(bean.getDate(), bean.getFieldhas(), bean.getReportfiletype(),bean.getReportemail(), user, reportRequestDate);\n            boolean done = m_inventoryReportService.runReport(criteria);\n            mav.addObject(\"type\", \"Inventory Report\");\n            if (!done){\n                log().debug(\"RancidReportExecController error \");\n            }\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy/M/d\");\n        try {\n            mav.addObject(\"date\", format.parse(bean.getDate()));\n        }\n        catch (ParseException pe){\n            mav.addObject(\"date\", format.format(Calendar.getInstance().getTime()));\n        }\n        mav.addObject(\"searchfield\", bean.getFieldhas());\n        if( bean.getReportfiletype().compareTo(\"pdftype\") == 0){\n            mav.addObject(\"reportformat\", \"PDF\");\n        } else {\n            mav.addObject(\"reportformat\", \"HTML\");\n        }\n        \n        return mav;\n\n        \n//        String redirectURL = request.getHeader(\"Referer\");\n//        response.sendRedirect(redirectURL);\n//        return super.onSubmit(request, response, command, errors);\n    }","commit_id":"3cd9b2fd1916934834e5d2e4442e7169161b5186","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setInventoryService(InventoryService inventoryService) {\n        m_inventoryService = inventoryService;\n    }","id":21049,"modified_method":"public void setInventoryReportService(\n            InventoryReportService inventoryReportService) {\n        m_inventoryReportService = inventoryReportService;\n    }","commit_id":"3cd9b2fd1916934834e5d2e4442e7169161b5186","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InventoryService getInventoryService() {\n        return m_inventoryService;\n    }","id":21050,"modified_method":"public InventoryReportService getInventoryReportService() {\n        return m_inventoryReportService;\n    }","commit_id":"3cd9b2fd1916934834e5d2e4442e7169161b5186","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void done() {\n        handleCompleteRows();\n    }","id":21051,"modified_method":"@Override\n    public void done() {\n        handleCompleteRows(true);\n    }","commit_id":"9422ce2ce67d036a68e5ae0de61423b91c778998","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void handleCompleteRows() {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished();\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                List<SnmpRowResult> callbackRows = new ArrayList<SnmpRowResult>();\n                for (int i = (keys.size() - 1); i >= 0; i--) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (complete || (row != null && row.isComplete())) {\n                        complete = true;\n                        m_pendingData.remove(key);\n                        callbackRows.add(0, row);\n                    }\n                }\n                for (SnmpRowResult row : callbackRows) {\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","id":21052,"modified_method":"private void handleCompleteRows(boolean force) {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished() || force;\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                for (int i = 0; i < keys.size(); i++) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (row != null) {\n                        if (complete || row.isComplete()) {\n                            complete = true;\n                            m_pendingData.remove(key);\n                            m_callback.rowCompleted(row);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"9422ce2ce67d036a68e5ae0de61423b91c778998","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows();\n            return retval;\n        }","id":21053,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows(false);\n            return retval;\n        }","commit_id":"9422ce2ce67d036a68e5ae0de61423b91c778998","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows();\n        }","id":21054,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows(false);\n        }","commit_id":"9422ce2ce67d036a68e5ae0de61423b91c778998","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows();\n        }","id":21055,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows(false);\n        }","commit_id":"bb95ed997b012de37dbe5bd8e9834f7ed5d64a93","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows();\n            return retval;\n        }","id":21056,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows(false);\n            return retval;\n        }","commit_id":"bb95ed997b012de37dbe5bd8e9834f7ed5d64a93","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void done() {\n        handleCompleteRows();\n    }","id":21057,"modified_method":"@Override\n    public void done() {\n        handleCompleteRows(true);\n    }","commit_id":"bb95ed997b012de37dbe5bd8e9834f7ed5d64a93","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void handleCompleteRows() {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished();\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                List<SnmpRowResult> callbackRows = new ArrayList<SnmpRowResult>();\n                for (int i = (keys.size() - 1); i >= 0; i--) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (complete || (row != null && row.isComplete())) {\n                        complete = true;\n                        m_pendingData.remove(key);\n                        callbackRows.add(0, row);\n                    }\n                }\n                for (SnmpRowResult row : callbackRows) {\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","id":21058,"modified_method":"private void handleCompleteRows(boolean force) {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished() || force;\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                for (int i = 0; i < keys.size(); i++) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (row != null) {\n                        if (complete || row.isComplete()) {\n                            complete = true;\n                            m_pendingData.remove(key);\n                            m_callback.rowCompleted(row);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"bb95ed997b012de37dbe5bd8e9834f7ed5d64a93","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows();\n            return retval;\n        }","id":21059,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n\n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            boolean retval = rp.processErrors(errorStatus, errorIndex);\n            handleCompleteRows(false);\n            return retval;\n        }","commit_id":"f214820d864f68c745344db96b114f224cd4242c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows();\n        }","id":21060,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex);\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            rp.processResponse(responseObjId, val);\n            handleCompleteRows(false);\n        }","commit_id":"f214820d864f68c745344db96b114f224cd4242c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void handleCompleteRows() {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished();\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                List<SnmpRowResult> callbackRows = new ArrayList<SnmpRowResult>();\n                for (int i = (keys.size() - 1); i >= 0; i--) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (complete || (row != null && row.isComplete())) {\n                        complete = true;\n                        m_pendingData.remove(key);\n                        callbackRows.add(0, row);\n                    }\n                }\n                for (SnmpRowResult row : callbackRows) {\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","id":21061,"modified_method":"private void handleCompleteRows(boolean force) {\n        if (m_callback != null) {\n            if (hasRow()) {\n                boolean complete = isFinished() || force;\n                List<SnmpInstId> keys = new ArrayList<SnmpInstId>(m_pendingData.keySet());\n                for (int i = 0; i < keys.size(); i++) {\n                    SnmpInstId key = keys.get(i);\n                    SnmpRowResult row = m_pendingData.get(key);\n                    if (row != null) {\n                        if (complete || row.isComplete()) {\n                            complete = true;\n                            m_pendingData.remove(key);\n                            m_callback.rowCompleted(row);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"f214820d864f68c745344db96b114f224cd4242c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void done() {\n        handleCompleteRows();\n    }","id":21062,"modified_method":"@Override\n    public void done() {\n        handleCompleteRows(true);\n    }","commit_id":"f214820d864f68c745344db96b114f224cd4242c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Validates path to selected data source. Calls WizardPathValidator service provider\n     * if one is available. Otherwise performs path validation locally.\n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){\n        \n        errorLabel.setVisible(false);\n        String errorString = \"\";\n\n        if (path.isEmpty()) {\n            return false;   // no need for error message as the module sets path to \"\" at startup\n        }\n                \n        // check if the is a WizardPathValidator service provider\n        if (!pathValidatorList.isEmpty()) {\n            // call WizardPathValidator service provider\n            errorString = pathValidatorList.get(0).validateDataSourcePath(path, Case.getCurrentCase().getCaseType());\n        } else {\n            // validate locally            \n            if (Case.getCurrentCase().getCaseType() == CaseType.MULTI_USER_CASE) {\n                // check that path is not on \"C:\" drive\n                if (pathOnCDrive(path)) {\n                    errorString = NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\");  //NON-NLS\n                } \n            } else {\n                // single user case - no validation needed\n            }\n        }\n        \n        // set error string\n        if (!errorString.isEmpty()){\n            errorLabel.setVisible(true);\n            errorLabel.setText(errorString);\n            return false;\n        }\n        \n        return true;\n    }","id":21063,"modified_method":"/**\n     * Validates path to selected data source. \n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){        \n        errorLabel.setVisible(false);                \n        if (!MultiUserPathValidator.isValid(path, Case.getCurrentCase().getCaseType())) {\n            errorLabel.setVisible(true);\n            errorLabel.setText(NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\"));\n            return false;\n        }\n        return true;\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Creates new form ImageFilePanel\n     * @param context a string context name used to read/store last used settings\n     * @param fileChooserFilters a list of filters to be used with the FileChooser\n     */\n    private ImageFilePanel(String context, List<FileFilter> fileChooserFilters) {\n        initComponents();\n        fc.setDragEnabled(false);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fc.setMultiSelectionEnabled(false);\n        \n        errorLabel.setVisible(false);\n        discoverWizardPathValidators(); \n        \n        boolean firstFilter = true;\n        for (FileFilter filter: fileChooserFilters ) {\n            if (firstFilter) {  // set the first on the list as the default selection\n                fc.setFileFilter(filter);\n                firstFilter = false;\n            } \n            else {\n                fc.addChoosableFileFilter(filter);\n            }\n        }\n        \n        this.contextName = context;\n        pcs = new PropertyChangeSupport(this);\n        \n        createTimeZoneList();       \n    }","id":21064,"modified_method":"/**\n     * Creates new form ImageFilePanel\n     * @param context a string context name used to read/store last used settings\n     * @param fileChooserFilters a list of filters to be used with the FileChooser\n     */\n    private ImageFilePanel(String context, List<FileFilter> fileChooserFilters) {\n        initComponents();\n        fc.setDragEnabled(false);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fc.setMultiSelectionEnabled(false);\n        \n        errorLabel.setVisible(false);\n        \n        boolean firstFilter = true;\n        for (FileFilter filter: fileChooserFilters ) {\n            if (firstFilter) {  // set the first on the list as the default selection\n                fc.setFileFilter(filter);\n                firstFilter = false;\n            } \n            else {\n                fc.addChoosableFileFilter(filter);\n            }\n        }\n        \n        this.contextName = context;\n        pcs = new PropertyChangeSupport(this);\n        \n        createTimeZoneList();       \n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private void customInit() {\n        model = new LocalDiskModel();\n        diskComboBox.setModel(model);\n        diskComboBox.setRenderer(model);\n        \n        errorLabel.setVisible(false);\n        errorLabel.setText(\"\");\n        diskComboBox.setEnabled(false);\n        discoverWizardPathValidators(); \n    }","id":21065,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private void customInit() {\n        model = new LocalDiskModel();\n        diskComboBox.setModel(model);\n        diskComboBox.setRenderer(model);\n        \n        errorLabel.setVisible(false);\n        errorLabel.setText(\"\");\n        diskComboBox.setEnabled(false);\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates path to selected data source. Calls WizardPathValidator service provider\n     * if one is available. Otherwise performs path validation locally.\n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){\n        \n        errorLabel.setVisible(false);\n        String errorString = \"\";\n        \n        if (path.isEmpty()) {\n            return false;   // no need for error message as the module sets path to \"\" at startup\n        }\n        \n        String newPath = path;\n        if (path.length() > prePendedStringLength) {\n            // \"Local Disk\" panel pre-pends \"\\\\.\\\" in front of all drive letter and drive names.\n            // Path validators expect a \"standard\" path as input, i.e. one that starts with a drive letter.\n            newPath = path.substring(prePendedStringLength, path.length());\n        } \n\n        // check if the is a WizardPathValidator service provider\n        if (!pathValidatorList.isEmpty()) {\n            // call WizardPathValidator service provider\n            errorString = pathValidatorList.get(0).validateDataSourcePath(newPath, Case.getCurrentCase().getCaseType());\n        } else {\n            // validate locally            \n            if (Case.getCurrentCase().getCaseType() == Case.CaseType.MULTI_USER_CASE) {\n                // check that path is not on \"C:\" drive\n                if (pathOnCDrive(newPath)) {\n                    errorString = NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\");  //NON-NLS\n                } \n            } else {\n                // single user case - no validation needed\n            }\n        }\n        \n        // set error string\n        if (!errorString.isEmpty()){\n            errorLabel.setVisible(true);\n            errorLabel.setText(errorString);\n            return false;\n        }\n        \n        return true;\n    }","id":21066,"modified_method":"/**\n     * Validates path to selected data source. \n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){                \n        String newPath = path;\n        if (path.length() > prePendedStringLength) {\n            // \"Local Disk\" panel pre-pends \"\\\\.\\\" in front of all drive letter and drive names.\n            // Path validators expect a \"standard\" path as input, i.e. one that starts with a drive letter.\n            newPath = path.substring(prePendedStringLength, path.length());\n        } \n\n        errorLabel.setVisible(false);                \n        if (!MultiUserPathValidator.isValid(newPath, Case.getCurrentCase().getCaseType())) {\n            errorLabel.setVisible(true);\n            errorLabel.setText(NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\"));\n            return false;\n        }        \n        return true;\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates path to selected data source. Calls WizardPathValidator service provider\n     * if one is available. Otherwise performs path validation locally.\n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){\n        \n        errorLabel.setVisible(false);\n        String errorString = \"\";\n        \n        if (path.isEmpty()) {\n            return false;   // no need for error message as the module sets path to \"\" at startup\n        }           \n        \n        // Path variable for \"Local files\" module is a coma separated string containg multiple paths\n        List<String> pathsList = Arrays.asList(path.split(\",\"));\n        CaseType currentCaseType = Case.getCurrentCase().getCaseType();\n\n        for (String currentPath : pathsList) {\n            // check if the is a WizardPathValidator service provider\n            if (!pathValidatorList.isEmpty()) {\n                // call WizardPathValidator service provider\n                errorString = pathValidatorList.get(0).validateDataSourcePath(currentPath, currentCaseType);\n                if (!errorString.isEmpty()) {\n                    break;\n                }\n            } else {\n                // validate locally            \n                if (currentCaseType == Case.CaseType.MULTI_USER_CASE) {\n                    // check that path is not on \"C:\" drive\n                    if (pathOnCDrive(currentPath)) {\n                        errorString = NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\");  //NON-NLS\n                        if (!errorString.isEmpty()) {\n                            break;\n                        }\n                    }\n                } else {\n                    // single user case - no validation needed\n                }\n            }\n        }\n        \n        // set error string\n        if (!errorString.isEmpty()){\n            errorLabel.setVisible(true);\n            errorLabel.setText(errorString);\n            return false;\n        }\n        \n        return true;\n    }","id":21067,"modified_method":"/**\n     * Validates path to selected data source. \n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n     private boolean isImagePathValid(String path) {\n         errorLabel.setVisible(false);\n\n         // Path variable for \"Local files\" module is a coma separated string containg multiple paths\n         List<String> pathsList = Arrays.asList(path.split(\",\"));\n         CaseType currentCaseType = Case.getCurrentCase().getCaseType();\n\n         for (String currentPath : pathsList) {\n             if (!MultiUserPathValidator.isValid(currentPath, currentCaseType)) {\n                 errorLabel.setVisible(true);\n                 errorLabel.setText(NbBundle.getMessage(this.getClass(), \"DataSourceOnCDriveError.text\"));\n                 return false;\n             }\n         }\n         return true;\n     }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void customInit() {\n        localFileChooser.setMultiSelectionEnabled(true);\n        discoverWizardPathValidators(); \n        errorLabel.setVisible(false);\n        selectedPaths.setText(\"\");\n    }","id":21068,"modified_method":"private void customInit() {\n        localFileChooser.setMultiSelectionEnabled(true);\n        errorLabel.setVisible(false);\n        selectedPaths.setText(\"\");\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"NewCaseVisualPanel1(NewCaseWizardPanel1 wizPanel) {\n        initComponents();\n        discoverWizardPathValidators();\n        errorLabel.setVisible(false);\n        lbBadMultiUserSettings.setText(\"\");\n        this.wizPanel = wizPanel;\n        caseNameTextField.getDocument().addDocumentListener(this);\n        caseParentDirTextField.getDocument().addDocumentListener(this);\n        CaseDbConnectionInfo info = UserPreferences.getDatabaseConnectionInfo();\n        if (info.getDbType() == DbType.UNKNOWN) {\n            rbSingleUserCase.setSelected(true);\n            rbSingleUserCase.setEnabled(false);\n            rbMultiUserCase.setEnabled(false);\n            lbBadMultiUserSettings.setForeground(new java.awt.Color(153, 153, 153)); // Gray\n            lbBadMultiUserSettings.setText(NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.MultiUserDisabled.text\"));\n        } else {\n            rbSingleUserCase.setEnabled(true);\n            rbMultiUserCase.setEnabled(true);\n            if (true == info.settingsValid()) {\n                    rbMultiUserCase.setSelected(true); // default to multi-user if available\n            } else {\n                // if we cannot connect to the shared database, don't present the option\n                lbBadMultiUserSettings.setForeground(new java.awt.Color(255, 0, 0)); // Red\n                lbBadMultiUserSettings.setText(NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.badCredentials.text\"));\n                rbSingleUserCase.setSelected(true);\n                rbSingleUserCase.setEnabled(false);\n                rbMultiUserCase.setEnabled(false);\n            }\n        }\n    }","id":21069,"modified_method":"NewCaseVisualPanel1(NewCaseWizardPanel1 wizPanel) {\n        initComponents();\n        errorLabel.setVisible(false);\n        lbBadMultiUserSettings.setText(\"\");\n        this.wizPanel = wizPanel;\n        caseNameTextField.getDocument().addDocumentListener(this);\n        caseParentDirTextField.getDocument().addDocumentListener(this);\n        CaseDbConnectionInfo info = UserPreferences.getDatabaseConnectionInfo();\n        if (info.getDbType() == DbType.UNKNOWN) {\n            rbSingleUserCase.setSelected(true);\n            rbSingleUserCase.setEnabled(false);\n            rbMultiUserCase.setEnabled(false);\n            lbBadMultiUserSettings.setForeground(new java.awt.Color(153, 153, 153)); // Gray\n            lbBadMultiUserSettings.setText(NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.MultiUserDisabled.text\"));\n        } else {\n            rbSingleUserCase.setEnabled(true);\n            rbMultiUserCase.setEnabled(true);\n            if (true == info.settingsValid()) {\n                    rbMultiUserCase.setSelected(true); // default to multi-user if available\n            } else {\n                // if we cannot connect to the shared database, don't present the option\n                lbBadMultiUserSettings.setForeground(new java.awt.Color(255, 0, 0)); // Red\n                lbBadMultiUserSettings.setText(NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.badCredentials.text\"));\n                rbSingleUserCase.setSelected(true);\n                rbSingleUserCase.setEnabled(false);\n                rbMultiUserCase.setEnabled(false);\n            }\n        }\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates path to selected data source. Calls WizardPathValidator service provider\n     * if one is available. Otherwise performs path validation locally.\n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path){\n        \n        errorLabel.setVisible(false);\n        String errorString = \"\";\n        \n        if (path.isEmpty()) {\n            return false;   // no need for error message as the module sets path to \"\" at startup\n        }\n\n        // check if the is a WizardPathValidator service provider\n        if (!pathValidatorList.isEmpty()) {\n            // call WizardPathValidator service provider\n            errorString = pathValidatorList.get(0).validateDataSourcePath(path, getCaseType());\n        } else {\n            // validate locally            \n            if (getCaseType() == Case.CaseType.MULTI_USER_CASE) {\n                // check that path is not on \"C:\" drive\n                if (pathOnCDrive(path)) {\n                    errorString = NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.CaseFolderOnCDriveError.text\");  //NON-NLS\n                } \n            } else {\n                // single user case - no validation needed\n            }\n        }\n        \n        // set error string\n        if (!errorString.isEmpty()){\n            errorLabel.setVisible(true);\n            errorLabel.setText(errorString);\n            return false;\n        }\n        \n        return true;\n    }","id":21070,"modified_method":"/**\n     * Validates path to selected data source.\n     *\n     * @param path Absolute path to the selected data source\n     * @return true if path is valid, false otherwise.\n     */\n    private boolean isImagePathValid(String path) {\n        errorLabel.setVisible(false);\n\n        if (path.isEmpty()) {\n            return false;   // no need for error message as the module sets path to \"\" at startup\n        }\n\n        if (!MultiUserPathValidator.isValid(path, getCaseType())) {\n            errorLabel.setVisible(true);\n            errorLabel.setText(NbBundle.getMessage(this.getClass(), \"NewCaseVisualPanel1.CaseFolderOnCDriveError.text\"));\n            return false;\n        }\n        return true;\n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * The \"listener\" that listens when the fields in this form are updated.\n     * This method is used to determine when to enable / disable the \"Finish\"\n     * button.\n     *\n     * @param e the document event\n     */\n    public void updateUI(DocumentEvent e) {\n        \n        // Note: DocumentEvent e can be null when called from rbSingleUserCaseActionPerformed()\n        // and rbMultiUserCaseActionPerformed().\n\n        String caseName = getCaseName();\n        String parentDir = getCaseParentDir();\n        \n        if (!isImagePathValid(parentDir)) {\n            wizPanel.setIsFinish(false);\n            return;\n        }        \n\n        if (!caseName.equals(\"\") && !parentDir.equals(\"\")) {\n            caseDirTextField.setText(parentDir + caseName);\n            wizPanel.setIsFinish(true);\n        } else {\n            caseDirTextField.setText(\"\");\n            wizPanel.setIsFinish(false);\n        }\n    }","id":21071,"modified_method":"/**\n     * The \"listener\" that listens when the fields in this form are updated.\n     * This method is used to determine when to enable / disable the \"Finish\"\n     * button.\n     *\n     * @param e the document event\n     */\n    public void updateUI(DocumentEvent e) {\n        \n        // Note: DocumentEvent e can be null when called from rbSingleUserCaseActionPerformed()\n        // and rbMultiUserCaseActionPerformed().\n\n        String caseName = getCaseName();\n        String parentDir = getCaseParentDir();\n        \n        if (!caseName.equals(\"\") && !parentDir.equals(\"\")) {\n            caseDirTextField.setText(parentDir + caseName);\n            wizPanel.setIsFinish(true);\n        } else {\n            caseDirTextField.setText(\"\");\n            wizPanel.setIsFinish(false);\n        }\n        \n        if (!isImagePathValid(parentDir)) {\n            wizPanel.setIsFinish(false);\n        }                \n    }","commit_id":"e895be0fd708e9cc7a3caf344d087dfa8d592949","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"protected CharSequence _generateMember(final JvmConstructor it, final ImportManager importManager) {\n    CharSequence _xifexpression = null;\n    boolean _operator_or = false;\n    EList<JvmFormalParameter> _parameters = it.getParameters();\n    boolean _isEmpty = _parameters.isEmpty();\n    boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);\n    if (_operator_not) {\n      _operator_or = true;\n    } else {\n      XExpression _associatedExpression = this._iLogicalContainerProvider.getAssociatedExpression(it);\n      boolean _operator_notEquals = ObjectExtensions.operator_notEquals(_associatedExpression, null);\n      _operator_or = BooleanExtensions.operator_or(_operator_not, _operator_notEquals);\n    }\n    if (_operator_or) {\n      StringConcatenation _builder = new StringConcatenation();\n      StringConcatenation _generateModifier = this.generateModifier(it);\n      _builder.append(_generateModifier, \"\");\n      _builder.append(\" \");\n      String _simpleName = it.getSimpleName();\n      _builder.append(_simpleName, \"\");\n      _builder.append(\"(\");\n      EList<JvmFormalParameter> _parameters_1 = it.getParameters();\n      final Function1<JvmFormalParameter,String> _function = new Function1<JvmFormalParameter,String>() {\n          public String apply(final JvmFormalParameter p) {\n            String _generateParameter = JvmModelGenerator.this.generateParameter(p, importManager);\n            return _generateParameter;\n          }\n        };\n      List<String> _map = ListExtensions.<JvmFormalParameter, String>map(_parameters_1, _function);\n      String _join = IterableExtensions.join(_map, \", \");\n      _builder.append(_join, \"\");\n      _builder.append(\")\");\n      StringConcatenation _generateThrowsClause = this.generateThrowsClause(it, importManager);\n      _builder.append(_generateThrowsClause, \"\");\n      _builder.append(\" {\");\n      _builder.newLineIfNotEmpty();\n      CharSequence _generateBody = this.generateBody(it, importManager);\n      String _string = _generateBody.toString();\n      String _trim = _string.trim();\n      _builder.append(_trim, \"\");\n      _builder.newLineIfNotEmpty();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _xifexpression = _builder;\n    } else {\n      _xifexpression = \"\";\n    }\n    return _xifexpression;\n  }","id":21072,"modified_method":"protected CharSequence _generateMember(final JvmConstructor it, final ImportManager importManager) {\n    StringConcatenation _xifexpression = null;\n    boolean _operator_or = false;\n    EList<JvmFormalParameter> _parameters = it.getParameters();\n    boolean _isEmpty = _parameters.isEmpty();\n    boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);\n    if (_operator_not) {\n      _operator_or = true;\n    } else {\n      XExpression _associatedExpression = this._iLogicalContainerProvider.getAssociatedExpression(it);\n      boolean _operator_notEquals = ObjectExtensions.operator_notEquals(_associatedExpression, null);\n      _operator_or = BooleanExtensions.operator_or(_operator_not, _operator_notEquals);\n    }\n    if (_operator_or) {\n      StringConcatenation _builder = new StringConcatenation();\n      StringConcatenation _generateModifier = this.generateModifier(it);\n      _builder.append(_generateModifier, \"\");\n      _builder.append(\" \");\n      String _simpleName = it.getSimpleName();\n      _builder.append(_simpleName, \"\");\n      _builder.append(\"(\");\n      EList<JvmFormalParameter> _parameters_1 = it.getParameters();\n      final Function1<JvmFormalParameter,String> _function = new Function1<JvmFormalParameter,String>() {\n          public String apply(final JvmFormalParameter p) {\n            String _generateParameter = JvmModelGenerator.this.generateParameter(p, importManager);\n            return _generateParameter;\n          }\n        };\n      List<String> _map = ListExtensions.<JvmFormalParameter, String>map(_parameters_1, _function);\n      String _join = IterableExtensions.join(_map, \", \");\n      _builder.append(_join, \"\");\n      _builder.append(\")\");\n      StringConcatenation _generateThrowsClause = this.generateThrowsClause(it, importManager);\n      _builder.append(_generateThrowsClause, \"\");\n      _builder.append(\" {\");\n      _builder.newLineIfNotEmpty();\n      _builder.append(\"  \");\n      CharSequence _generateBody = this.generateBody(it, importManager);\n      String _string = _generateBody.toString();\n      String _trim = _string.trim();\n      _builder.append(_trim, \"  \");\n      _builder.newLineIfNotEmpty();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _xifexpression = _builder;\n    } else {\n      _xifexpression = null;\n    }\n    return _xifexpression;\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"protected CharSequence _generateMember(final JvmOperation it, final ImportManager importManager) {\n    StringConcatenation _builder = new StringConcatenation();\n    {\n      EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n      boolean _isEmpty = _annotations.isEmpty();\n      boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);\n      if (_operator_not) {\n        EList<JvmAnnotationReference> _annotations_1 = it.getAnnotations();\n        StringConcatenation _generateAnnotations = this.generateAnnotations(_annotations_1, importManager);\n        _builder.append(_generateAnnotations, \"\");\n        _builder.newLineIfNotEmpty();\n      }\n    }\n    StringConcatenation _generateModifier = this.generateModifier(it);\n    _builder.append(_generateModifier, \"\");\n    EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n    StringConcatenation _generateTypeParameterDeclaration = this.generateTypeParameterDeclaration(_typeParameters, importManager);\n    _builder.append(_generateTypeParameterDeclaration, \"\");\n    String _xifexpression = null;\n    JvmTypeReference _returnType = it.getReturnType();\n    boolean _operator_equals = ObjectExtensions.operator_equals(_returnType, null);\n    if (_operator_equals) {\n      _xifexpression = \"void\";\n    } else {\n      JvmTypeReference _returnType_1 = it.getReturnType();\n      String _serialize = this.serialize(_returnType_1, importManager);\n      _xifexpression = _serialize;\n    }\n    _builder.append(_xifexpression, \"\");\n    _builder.append(\" \");\n    String _simpleName = it.getSimpleName();\n    _builder.append(_simpleName, \"\");\n    _builder.append(\"(\");\n    EList<JvmFormalParameter> _parameters = it.getParameters();\n    final Function1<JvmFormalParameter,String> _function = new Function1<JvmFormalParameter,String>() {\n        public String apply(final JvmFormalParameter p) {\n          String _generateParameter = JvmModelGenerator.this.generateParameter(p, importManager);\n          return _generateParameter;\n        }\n      };\n    List<String> _map = ListExtensions.<JvmFormalParameter, String>map(_parameters, _function);\n    String _join = IterableExtensions.join(_map, \", \");\n    _builder.append(_join, \"\");\n    _builder.append(\")\");\n    StringConcatenation _generateThrowsClause = this.generateThrowsClause(it, importManager);\n    _builder.append(_generateThrowsClause, \"\");\n    {\n      boolean _isAbstract = it.isAbstract();\n      if (_isAbstract) {\n        _builder.append(\";\");} else {\n        _builder.append(\" {\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"\\t\");\n        CharSequence _generateBody = this.generateBody(it, importManager);\n        String _string = _generateBody.toString();\n        String _trim = _string.trim();\n        _builder.append(_trim, \"\t\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"}\");\n        _builder.newLine();\n      }\n    }\n    return _builder;\n  }","id":21073,"modified_method":"protected CharSequence _generateMember(final JvmOperation it, final ImportManager importManager) {\n    StringConcatenation _builder = new StringConcatenation();\n    {\n      EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n      boolean _isEmpty = _annotations.isEmpty();\n      boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);\n      if (_operator_not) {\n        EList<JvmAnnotationReference> _annotations_1 = it.getAnnotations();\n        StringConcatenation _generateAnnotations = this.generateAnnotations(_annotations_1, importManager);\n        _builder.append(_generateAnnotations, \"\");\n        _builder.newLineIfNotEmpty();\n      }\n    }\n    StringConcatenation _generateModifier = this.generateModifier(it);\n    _builder.append(_generateModifier, \"\");\n    EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n    StringConcatenation _generateTypeParameterDeclaration = this.generateTypeParameterDeclaration(_typeParameters, importManager);\n    _builder.append(_generateTypeParameterDeclaration, \"\");\n    String _xifexpression = null;\n    JvmTypeReference _returnType = it.getReturnType();\n    boolean _operator_equals = ObjectExtensions.operator_equals(_returnType, null);\n    if (_operator_equals) {\n      _xifexpression = \"void\";\n    } else {\n      JvmTypeReference _returnType_1 = it.getReturnType();\n      String _serialize = this.serialize(_returnType_1, importManager);\n      _xifexpression = _serialize;\n    }\n    _builder.append(_xifexpression, \"\");\n    _builder.append(\" \");\n    String _simpleName = it.getSimpleName();\n    _builder.append(_simpleName, \"\");\n    _builder.append(\"(\");\n    EList<JvmFormalParameter> _parameters = it.getParameters();\n    final Function1<JvmFormalParameter,String> _function = new Function1<JvmFormalParameter,String>() {\n        public String apply(final JvmFormalParameter p) {\n          String _generateParameter = JvmModelGenerator.this.generateParameter(p, importManager);\n          return _generateParameter;\n        }\n      };\n    List<String> _map = ListExtensions.<JvmFormalParameter, String>map(_parameters, _function);\n    String _join = IterableExtensions.join(_map, \", \");\n    _builder.append(_join, \"\");\n    _builder.append(\")\");\n    StringConcatenation _generateThrowsClause = this.generateThrowsClause(it, importManager);\n    _builder.append(_generateThrowsClause, \"\");\n    {\n      boolean _isAbstract = it.isAbstract();\n      if (_isAbstract) {\n        _builder.append(\";\");} else {\n        _builder.append(\" {\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"  \");\n        CharSequence _generateBody = this.generateBody(it, importManager);\n        String _string = _generateBody.toString();\n        String _trim = _string.trim();\n        _builder.append(_trim, \"  \");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"}\");\n        _builder.newLine();\n      }\n    }\n    return _builder;\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public StringConcatenation generateType(final JvmGenericType type) throws UnsupportedOperationException {\n    StringConcatenation _xblockexpression = null;\n    {\n      String _qualifiedName = type.getQualifiedName();\n      ImportManager _importManager = new ImportManager(true, _qualifiedName);\n      final ImportManager importManager = _importManager;\n      StringConcatenation _generateBody = this.generateBody(type, importManager);\n      final StringConcatenation typeBody = _generateBody;\n      StringConcatenation _builder = new StringConcatenation();\n      {\n        String _packageName = type.getPackageName();\n        boolean _operator_notEquals = ObjectExtensions.operator_notEquals(_packageName, null);\n        if (_operator_notEquals) {\n          _builder.append(\"package \");\n          String _packageName_1 = type.getPackageName();\n          _builder.append(_packageName_1, \"\");\n          _builder.append(\";\");\n          _builder.newLineIfNotEmpty();\n          _builder.newLine();\n        }\n      }\n      List<String> _imports = importManager.getImports();\n      final Function1<String,String> _function = new Function1<String,String>() {\n          public String apply(final String i) {\n            String _operator_plus = StringExtensions.operator_plus(\"import \", i);\n            String _operator_plus_1 = StringExtensions.operator_plus(_operator_plus, \";\");\n            return _operator_plus_1;\n          }\n        };\n      List<String> _map = ListExtensions.<String, String>map(_imports, _function);\n      String _join = IterableExtensions.join(_map, \"\\n\");\n      _builder.append(_join, \"\");\n      _builder.newLineIfNotEmpty();\n      _builder.newLine();\n      _builder.append(typeBody, \"\");\n      _builder.newLineIfNotEmpty();\n      _xblockexpression = (_builder);\n    }\n    return _xblockexpression;\n  }","id":21074,"modified_method":"public StringConcatenation generateType(final JvmGenericType type) {\n    StringConcatenation _xblockexpression = null;\n    {\n      String _qualifiedName = type.getQualifiedName();\n      ImportManager _importManager = new ImportManager(true, _qualifiedName);\n      final ImportManager importManager = _importManager;\n      StringConcatenation _generateBody = this.generateBody(type, importManager);\n      final StringConcatenation typeBody = _generateBody;\n      StringConcatenation _builder = new StringConcatenation();\n      {\n        String _packageName = type.getPackageName();\n        boolean _operator_notEquals = ObjectExtensions.operator_notEquals(_packageName, null);\n        if (_operator_notEquals) {\n          _builder.append(\"package \");\n          String _packageName_1 = type.getPackageName();\n          _builder.append(_packageName_1, \"\");\n          _builder.append(\";\");\n          _builder.newLineIfNotEmpty();\n          _builder.newLine();\n        }\n      }\n      {\n        List<String> _imports = importManager.getImports();\n        boolean hasAnyElements = false;\n        for(final String i : _imports) {\n          if (!hasAnyElements) {\n            hasAnyElements = true;\n          }\n          _builder.append(\"import \");\n          _builder.append(i, \"\");\n          _builder.append(\";\");\n          _builder.newLineIfNotEmpty();\n        }\n        if (hasAnyElements) {\n          _builder.append(\"\\n\", \"\");\n        }\n      }\n      _builder.append(typeBody, \"\");\n      _builder.newLineIfNotEmpty();\n      _xblockexpression = (_builder);\n    }\n    return _xblockexpression;\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public StringConcatenation generateBody(final JvmGenericType it, final ImportManager importManager) throws UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n    StringConcatenation _generateAnnotations = this.generateAnnotations(_annotations, importManager);\n    _builder.append(_generateAnnotations, \"\");\n    _builder.newLineIfNotEmpty();\n    StringConcatenation _generateModifier = this.generateModifier(it);\n    _builder.append(_generateModifier, \"\");\n    {\n      boolean _isInterface = it.isInterface();\n      if (_isInterface) {\n        _builder.append(\"interface\");} else {\n        _builder.append(\"class\");\n      }\n    }\n    _builder.append(\" \");\n    String _simpleName = it.getSimpleName();\n    _builder.append(_simpleName, \"\");\n    EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n    StringConcatenation _generateTypeParameterDeclaration = this.generateTypeParameterDeclaration(_typeParameters, importManager);\n    _builder.append(_generateTypeParameterDeclaration, \"\");\n    _builder.append(\" \");\n    String _generateExtendsClause = this.generateExtendsClause(it, importManager);\n    _builder.append(_generateExtendsClause, \"\");\n    _builder.append(\"{\");\n    _builder.newLineIfNotEmpty();\n    {\n      EList<JvmMember> _members = it.getMembers();\n      for(final JvmMember m : _members) {\n        _builder.append(\"\\t\");\n        CharSequence _generateMember = this.generateMember(m, importManager);\n        _builder.append(_generateMember, \"\t\");\n        _builder.newLineIfNotEmpty();\n      }\n    }\n    _builder.append(\"}\");\n    _builder.newLine();\n    return _builder;\n  }","id":21075,"modified_method":"public StringConcatenation generateBody(final JvmGenericType it, final ImportManager importManager) {\n    StringConcatenation _builder = new StringConcatenation();\n    EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n    StringConcatenation _generateAnnotations = this.generateAnnotations(_annotations, importManager);\n    _builder.append(_generateAnnotations, \"\");\n    _builder.newLineIfNotEmpty();\n    StringConcatenation _generateModifier = this.generateModifier(it);\n    _builder.append(_generateModifier, \"\");\n    {\n      boolean _isInterface = it.isInterface();\n      if (_isInterface) {\n        _builder.append(\"interface\");} else {\n        _builder.append(\"class\");\n      }\n    }\n    _builder.append(\" \");\n    String _simpleName = it.getSimpleName();\n    _builder.append(_simpleName, \"\");\n    EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n    StringConcatenation _generateTypeParameterDeclaration = this.generateTypeParameterDeclaration(_typeParameters, importManager);\n    _builder.append(_generateTypeParameterDeclaration, \"\");\n    _builder.append(\" \");\n    String _generateExtendsClause = this.generateExtendsClause(it, importManager);\n    _builder.append(_generateExtendsClause, \"\");\n    _builder.append(\"{\");\n    _builder.newLineIfNotEmpty();\n    {\n      EList<JvmMember> _members = it.getMembers();\n      final Function1<JvmMember,CharSequence> _function = new Function1<JvmMember,CharSequence>() {\n          public CharSequence apply(final JvmMember m) {\n            CharSequence _generateMember = JvmModelGenerator.this.generateMember(m, importManager);\n            return _generateMember;\n          }\n        };\n      List<CharSequence> _map = ListExtensions.<JvmMember, CharSequence>map(_members, _function);\n      final Function1<CharSequence,Boolean> _function_1 = new Function1<CharSequence,Boolean>() {\n          public Boolean apply(final CharSequence c) {\n            boolean _operator_notEquals = ObjectExtensions.operator_notEquals(c, null);\n            return ((Boolean)_operator_notEquals);\n          }\n        };\n      Iterable<CharSequence> _filter = IterableExtensions.<CharSequence>filter(_map, _function_1);\n      boolean hasAnyElements = false;\n      for(final CharSequence memberCode : _filter) {\n        if (!hasAnyElements) {\n          hasAnyElements = true;\n        } else {\n          _builder.appendImmediate(\"\\n\", \"  \");\n        }\n        _builder.append(\"  \");\n        _builder.append(memberCode, \"  \");\n        _builder.newLineIfNotEmpty();\n      }\n    }\n    _builder.append(\"}\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testJavaLangReflectImport() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def void doStuff(java.lang.reflect.Method m) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.lang.reflect.Method;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public void doStuff(final Method m) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21076,"modified_method":"public void testJavaLangReflectImport() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def void doStuff(java.lang.reflect.Method m) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.lang.reflect.Method;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public void doStuff(final Method m) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testConstructor_2() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new java.util.HashMap<String,java.io.Serializable>()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.io.Serializable;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public HashMap<String,Serializable> foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"HashMap<String,Serializable> _hashMap = new HashMap<String,Serializable>();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _hashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21077,"modified_method":"public void testConstructor_2() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new java.util.HashMap<String,java.io.Serializable>()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.io.Serializable;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public HashMap<String,Serializable> foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"HashMap<String,Serializable> _hashMap = new HashMap<String,Serializable>();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _hashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testSimple() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def Integer doStuff(String x) {x.length}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public Integer doStuff(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"int _length = x.length();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return ((Integer)_length);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21078,"modified_method":"public void testSimple() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def Integer doStuff(String x) {x.length}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public Integer doStuff(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"int _length = x.length();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return ((Integer)_length);\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testAnnotation() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"@com.google.inject.Inject String string\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import com.google.inject.Inject;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"@Inject\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private String string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21079,"modified_method":"public void testAnnotation() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"@com.google.inject.Inject String string\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import com.google.inject.Inject;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"@Inject\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private String string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testExtends() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar extends Thread {\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar extends Thread {\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21080,"modified_method":"public void testExtends() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar extends Thread {\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar extends Thread {\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testConstructor() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new String()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public String foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"String _string = new String();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21081,"modified_method":"public void testConstructor() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new String()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public String foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"String _string = new String();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testCreateExtension() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def create result: new StringBuilder() aBuilder(String x) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"result.append(x)\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.ArrayList;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public StringBuilder aBuilder(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"final ArrayList<?>_cacheKey = CollectionLiterals.newArrayList(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"final StringBuilder _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"synchronized (_createCache_aBuilder) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"if (_createCache_aBuilder.containsKey(_cacheKey)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t    \");\n    _builder_1.append(\"return _createCache_aBuilder.get(_cacheKey);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"StringBuilder _stringBuilder = new StringBuilder();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_result = _stringBuilder;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_createCache_aBuilder.put(_cacheKey, _result);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"_init_aBuilder(_result, x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private final HashMap<ArrayList<?>,StringBuilder> _createCache_aBuilder = CollectionLiterals.newHashMap();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private void _init_aBuilder(final StringBuilder result, final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"result.append(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21082,"modified_method":"public void testCreateExtension() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def create result: new StringBuilder() aBuilder(String x) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"result.append(x)\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.ArrayList;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public StringBuilder aBuilder(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"final ArrayList<?>_cacheKey = CollectionLiterals.newArrayList(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"final StringBuilder _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"synchronized (_createCache_aBuilder) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"if (_createCache_aBuilder.containsKey(_cacheKey)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"        \");\n    _builder_1.append(\"return _createCache_aBuilder.get(_cacheKey);\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"StringBuilder _stringBuilder = new StringBuilder();\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_result = _stringBuilder;\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_createCache_aBuilder.put(_cacheKey, _result);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"_init_aBuilder(_result, x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private final HashMap<ArrayList<?>,StringBuilder> _createCache_aBuilder = CollectionLiterals.newHashMap();\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private void _init_aBuilder(final StringBuilder result, final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"result.append(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testVisibilityOfDispatchMethods() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class NoSuchElementException {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(String s) {}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(Object s) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class NoSuchElementException {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"protected void _foo(final String s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"protected void _foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public void foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"if ((s instanceof String)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_foo((String)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_foo((Object)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21083,"modified_method":"public void testVisibilityOfDispatchMethods() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class NoSuchElementException {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(String s) {}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(Object s) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class NoSuchElementException {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"protected void _foo(final String s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"protected void _foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public void foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"if ((s instanceof String)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_foo((String)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_foo((Object)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testSuperCall() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package x class Y extends Object {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"override boolean equals(Object p){\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"if (\\'foo\\' == p)\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"return true\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"else\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"super.equals(p) \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"} \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package x;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ObjectExtensions;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Y {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public boolean equals(final Object p) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"boolean _xifexpression = false;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"boolean _operator_equals = ObjectExtensions.operator_equals(\\\"foo\\\", p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"if (_operator_equals) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"return true;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"boolean _equals = super.equals(p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_xifexpression = _equals;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _xifexpression;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21084,"modified_method":"public void testSuperCall() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package x class Y extends Object {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"override boolean equals(Object p){\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"if (\\'foo\\' == p)\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"return true\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"else\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"super.equals(p) \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"} \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package x;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ObjectExtensions;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Y {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public boolean equals(final Object p) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"boolean _xifexpression = false;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"boolean _operator_equals = ObjectExtensions.operator_equals(\\\"foo\\\", p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"if (_operator_equals) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"return true;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"boolean _equals = super.equals(p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_xifexpression = _equals;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _xifexpression;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"df05a122978bbccb791630cb89ea519030f17e70","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    CharSequence _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>Check the <a href=\\\"releasenotes.html\\\">release notes<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link = this.getLink(Download.OSX_64);\n    _builder.append(_link, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_1 = this.getLink(Download.OSX_32);\n    _builder.append(_link_1, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_2 = this.getLink(Download.LINUX_64);\n    _builder.append(_link_2, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_3 = this.getLink(Download.LINUX_32);\n    _builder.append(_link_3, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_4 = this.getLink(Download.WIN_64);\n    _builder.append(_link_4, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_5 = this.getLink(Download.WIN_32);\n    _builder.append(_link_5, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"The Xtend IDE integration requires Eclipse 3.6 or higher and a Java SDK 5 or higher. Use one of the update sites from above to install the full SDK\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"into your running Eclipse. If you do not yet have an Eclipse on your machine, you can download one of the pre-packaged distributions on the right.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"There are various options to compile Xtend sources. The most used way is using <a href=\\\"#MavenSupport\\\">the Maven plug-in<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"Update Site\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Install From Update Site<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have an Eclipse running you should install the <i>\\\"Xtend SDK\\\"<\/i>-Feature from one of the update sites listed above. To do so\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"within Eclipse choose <i>Help -&gt; Install New Software...<\/i>. In the upcoming dialog you should paste one of the update site URLS into the\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"field named <i>Work with<\/i>. Now search for the feature <e>Xtend SDK<\/e>, select it and click <i>Next<\/i> and on the next page <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/screenshot-installation.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now the features are being downloaded and installed. Eclipse will ask you for a restart when downloading and installation is done.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"downloadLib\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Download Runtime Libraries<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you do not use Maven, or some Maven compatible build system you can download the lruntime library from the maven central manually:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtext.xbase.lib\\\">org.eclipse.xtext.xbase.lib (the extensions to JDK and Guava)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtend.lib\\\">org.eclipse.xtend.lib (active annotations, such as @Accessors, @Data and @Delegate)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtend.lib.macro\\\">org.eclipse.xtend.lib.macro (the active annotations API)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Ccom.google.guava%20a%3A%22guava%22\\\">com.google.guava (Google Guava)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Additionally there is a slim version of the library, that includes a proguarded version of Google Guava. This is mainly intended for Android users.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtext.xbase.lib.slim\\\">org.eclipse.xtext.xbase.lib.slim (ProGuarded version includes everything needed)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"MavenSupport\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Maven Plug-In<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"#library\\\">runtime library<\/a> as well as a plug-in to run the compiler in a Maven build can be be obtained from\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the Maven Central Repository: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"You can create a readily configured project using\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend -DarchetypeArtifactId=xtend-archetype\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have a project with a pom.xml, you need to add the plugin configuration:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;plugin&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;xtend-maven-plugin&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;\");\n    _builder.append(this.currentVersion, \"  \");\n    _builder.append(\"&lt;/version&gt;\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;goal&gt;compile&lt;/goal&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;!-- &lt;goal&gt;testCompile&lt;/goal&gt; --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!-- By default the plugin will look for eclipse settings, and if non were found will generate to --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!-- ${basedir}/src/main/generated-sources/xtend --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!-- You can optionally configure a different target folder like so : --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!--\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;outputDirectory&gt;${basedir}/src/main/xtend-gen&lt;/outputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;testOutputDirectory&gt;${basedir}/src/test/xtend-gen&lt;/testOutputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"--&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;/execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/plugin&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"As you see the <strong>outputDirectory<\/strong> can be specified to match the default of the Eclipse plug-in (<strong>xtend-gen<\/strong>). Of course you can also change the configuration\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"in Eclipse to match the Maven default (<strong>generated-sources<\/strong>). To do so right-click on the project and select <strong>Properties<\/strong> or if you prefer a global setting choose <strong>Eclipse-&gt;Preferences<\/strong>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the category <strong>Xtend/Compiler<\/strong> enter the directory name (see screenshot). It is interpreted as a relative path to the parent of the source folder, which includes the to-be-compiled Xtend file.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"thumbnail\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/configure-compiler-in-eclipse.png\\\" alt=\\\"Configuring the compiler in Eclipse\\\" width=\\\"680\\\" height=\\\"330\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting the runtime library via Maven<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"api/2.7.0/index.html\\\">runtime library<\/a> is available from Maven Central, too: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"The XML for the dependency is :\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;dependency&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;org.eclipse.xtend.lib&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;\");\n    _builder.append(this.currentVersion, \"  \");\n    _builder.append(\"&lt;/version&gt;\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"&lt;/dependency&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"Hello World\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting Started<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/java-perspective.png\\\" style=\\\"float : right; margin-left:10px;\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"When you\\'ve started Eclipse for the first time, you should see an empty workspace. Switch to the \\'Java perspective\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"if you are not already in it. Xtend integrates with Java, so you need to create a Java project to get started. In the menu choose\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>File -> New -> Java Project<\/i>. In the upcoming dialog choose any project name you want (e.g. <i>my.project<\/i>).\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"After clicking <i>Finish<\/i> Eclipse will create a fresh project with an empty source folder named <i>\\'/src\\'<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>A first class<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/menu new xtend class.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"To create your first Xtend class select the source folder and press the right mouse button. You should find the entry\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>Xtend class<\/i> in the category <i>New &gt;<\/i>. If you don\\'t see it you might not be in the Java perspective or you need to reset the perspective. To do so right click\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"on the perspective icon on the top right and choose <i>reset<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/new class wizard.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the dialog you should give the class a name, for instance <i>HelloWorld<\/i>, and put it into some package (we chose <i>my.namespace<\/i>). Click <i>Finish<\/i> and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"an empty class will be created for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>The missing lib<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/xtend lib missing error.png\\\"  class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The newly created class will have an error marker, saying that you need to put the library on the classpath. There is a \\\"quickfix\\\" which does that for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Put the cursor on the marked location and press <i>CTRL+1<\/i> (or CMD+1 on a Mac) and select the option \\\"Add Xtend libs to the classpath\\\".\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The library is also available from maven (see below) or as an OSGi bundle from the p2 update site above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>Have fun!<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now you are ready to code. Within the class body (between the curly braces) type <i>main<i> and press <i>CTRL+space<\/i>. An empty main method will be generated for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now type in <code class=\\\"prettyprint lang-xtend\\\">println(\\'Hello World\\')<\/code>, save and run the application. To do so use the green arrow and choose <i>Run As -&gt; Java Application<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/run as java application.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html#GettingStarted\\\">Click here for the next steps and more examples.<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21085,"modified_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    String _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>Check the <a href=\\\"releasenotes.html\\\">release notes<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link = this.getLink(Download.OSX_64);\n    _builder.append(_link, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_1 = this.getLink(Download.OSX_32);\n    _builder.append(_link_1, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_2 = this.getLink(Download.LINUX_64);\n    _builder.append(_link_2, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_3 = this.getLink(Download.LINUX_32);\n    _builder.append(_link_3, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_4 = this.getLink(Download.WIN_64);\n    _builder.append(_link_4, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_5 = this.getLink(Download.WIN_32);\n    _builder.append(_link_5, \"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"The Xtend IDE integration requires Eclipse 3.6 or higher and a Java SDK 5 or higher. Use one of the update sites from above to install the full SDK\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"into your running Eclipse. If you do not yet have an Eclipse on your machine, you can download one of the pre-packaged distributions on the right.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"There are various options to compile Xtend sources. The most used way is using <a href=\\\"#MavenSupport\\\">the Maven plug-in<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"Update Site\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Install From Update Site<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have an Eclipse running you should install the <i>\\\"Xtend SDK\\\"<\/i>-Feature from one of the update sites listed above. To do so\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"within Eclipse choose <i>Help -&gt; Install New Software...<\/i>. In the upcoming dialog you should paste one of the update site URLS into the\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"field named <i>Work with<\/i>. Now search for the feature <e>Xtend SDK<\/e>, select it and click <i>Next<\/i> and on the next page <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/screenshot-installation.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now the features are being downloaded and installed. Eclipse will ask you for a restart when downloading and installation is done.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"downloadLib\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Download Runtime Libraries<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you do not use Maven, or some Maven compatible build system you can download the lruntime library from the maven central manually:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtext.xbase.lib\\\">org.eclipse.xtext.xbase.lib (the extensions to JDK and Guava)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtend.lib\\\">org.eclipse.xtend.lib (active annotations, such as @Accessors, @Data and @Delegate)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtend.lib.macro\\\">org.eclipse.xtend.lib.macro (the active annotations API)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Ccom.google.guava%20a%3A%22guava%22\\\">com.google.guava (Google Guava)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Additionally there is a slim version of the library, that includes a proguarded version of Google Guava. This is mainly intended for Android users.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtext.xbase.lib.slim\\\">org.eclipse.xtext.xbase.lib.slim (ProGuarded version includes everything needed)<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"MavenSupport\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Maven Plug-In<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"#library\\\">runtime library<\/a> as well as a plug-in to run the compiler in a Maven build can be be obtained from\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the Maven Central Repository: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"You can create a readily configured project using\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend -DarchetypeArtifactId=xtend-archetype\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have a project with a pom.xml, you need to add the plugin configuration:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;plugin&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;xtend-maven-plugin&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;\");\n    _builder.append(this.currentVersion, \"  \");\n    _builder.append(\"&lt;/version&gt;\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;goal&gt;compile&lt;/goal&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;goal&gt;testCompile&lt;/goal&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;outputDirectory&gt;${project.build.directory}/xtend-gen/main&lt;/outputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;testOutputDirectory&gt;${project.build.directory}/xtend-gen/test&lt;/testOutputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;/execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/plugin&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The xtend-maven-plugin is <a href=\\\"http://maven.apache.org/guides/mini/guide-using-toolchains.html\\\">toolchain aware<\/a>, so you can build against different JDKs than the currently running one.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Xtend\\'s m2e integration will automatically configure the Eclipse settings from the POM if you have the Maven project nature enabled.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Some users might not want Maven to be the leading system. For that case you can just leave out the outputDirectory configuration in the POM. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The Xtend plugin will then look for Eclipse settings instead. The folder specified in the settings dialog is interpreted as a path relative to\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the current source folder.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"thumbnail\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/configure-compiler-in-eclipse.png\\\" alt=\\\"Configuring the compiler in Eclipse\\\" width=\\\"680\\\" height=\\\"330\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting the runtime library via Maven<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"api/2.7.0/index.html\\\">runtime library<\/a> is available from Maven Central, too: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"The XML for the dependency is :\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;dependency&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;org.eclipse.xtend.lib&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;\");\n    _builder.append(this.currentVersion, \"  \");\n    _builder.append(\"&lt;/version&gt;\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"&lt;/dependency&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"Hello World\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting Started<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/java-perspective.png\\\" style=\\\"float : right; margin-left:10px;\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"When you\\'ve started Eclipse for the first time, you should see an empty workspace. Switch to the \\'Java perspective\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"if you are not already in it. Xtend integrates with Java, so you need to create a Java project to get started. In the menu choose\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>File -> New -> Java Project<\/i>. In the upcoming dialog choose any project name you want (e.g. <i>my.project<\/i>).\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"After clicking <i>Finish<\/i> Eclipse will create a fresh project with an empty source folder named <i>\\'/src\\'<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>A first class<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/menu new xtend class.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"To create your first Xtend class select the source folder and press the right mouse button. You should find the entry\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>Xtend class<\/i> in the category <i>New &gt;<\/i>. If you don\\'t see it you might not be in the Java perspective or you need to reset the perspective. To do so right click\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"on the perspective icon on the top right and choose <i>reset<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/new class wizard.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the dialog you should give the class a name, for instance <i>HelloWorld<\/i>, and put it into some package (we chose <i>my.namespace<\/i>). Click <i>Finish<\/i> and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"an empty class will be created for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>The missing lib<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/xtend lib missing error.png\\\"  class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The newly created class will have an error marker, saying that you need to put the library on the classpath. There is a \\\"quickfix\\\" which does that for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Put the cursor on the marked location and press <i>CTRL+1<\/i> (or CMD+1 on a Mac) and select the option \\\"Add Xtend libs to the classpath\\\".\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The library is also available from maven (see below) or as an OSGi bundle from the p2 update site above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>Have fun!<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now you are ready to code. Within the class body (between the curly braces) type <i>main<i> and press <i>CTRL+space<\/i>. An empty main method will be generated for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now type in <code class=\\\"prettyprint lang-xtend\\\">println(\\'Hello World\\')<\/code>, save and run the application. To do so use the green arrow and choose <i>Run As -&gt; Java Application<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/run as java application.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html#GettingStarted\\\">Click here for the next steps and more examples.<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"b76e5e24d3a193d215614dfbdece996413476010","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testExtends() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar extends Thread {\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar extends Thread {\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21086,"modified_method":"public void testExtends() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar extends Thread {\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar extends Thread {\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testVisibilityOfDispatchMethods() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class NoSuchElementException {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(String s) {}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(Object s) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class NoSuchElementException {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"protected void _foo(final String s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"protected void _foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public void foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"if ((s instanceof String)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_foo((String)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_foo((Object)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21087,"modified_method":"public void testVisibilityOfDispatchMethods() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class NoSuchElementException {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(String s) {}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def dispatch void foo(Object s) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class NoSuchElementException {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"protected void _foo(final String s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"protected void _foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public void foo(final Object s) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"if ((s instanceof String)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_foo((String)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_foo((Object)s);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testConstructor_2() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new java.util.HashMap<String,java.io.Serializable>()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.io.Serializable;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public HashMap<String,Serializable> foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"HashMap<String,Serializable> _hashMap = new HashMap<String,Serializable>();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _hashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21088,"modified_method":"public void testConstructor_2() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new java.util.HashMap<String,java.io.Serializable>()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.io.Serializable;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public HashMap<String,Serializable> foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"HashMap<String,Serializable> _hashMap = new HashMap<String,Serializable>();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _hashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testJavaLangReflectImport() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def void doStuff(java.lang.reflect.Method m) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.lang.reflect.Method;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public void doStuff(final Method m) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21089,"modified_method":"public void testJavaLangReflectImport() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def void doStuff(java.lang.reflect.Method m) {}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.lang.reflect.Method;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public void doStuff(final Method m) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testCreateExtension() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def create result: new StringBuilder() aBuilder(String x) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"result.append(x)\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.ArrayList;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public StringBuilder aBuilder(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"final ArrayList<?>_cacheKey = CollectionLiterals.newArrayList(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"final StringBuilder _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"synchronized (_createCache_aBuilder) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"if (_createCache_aBuilder.containsKey(_cacheKey)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t    \");\n    _builder_1.append(\"return _createCache_aBuilder.get(_cacheKey);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"StringBuilder _stringBuilder = new StringBuilder();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_result = _stringBuilder;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_createCache_aBuilder.put(_cacheKey, _result);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"_init_aBuilder(_result, x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private final HashMap<ArrayList<?>,StringBuilder> _createCache_aBuilder = CollectionLiterals.newHashMap();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private void _init_aBuilder(final StringBuilder result, final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"result.append(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21090,"modified_method":"public void testCreateExtension() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def create result: new StringBuilder() aBuilder(String x) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"result.append(x)\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.ArrayList;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import java.util.HashMap;\");\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public StringBuilder aBuilder(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"final ArrayList<?>_cacheKey = CollectionLiterals.newArrayList(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"final StringBuilder _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"synchronized (_createCache_aBuilder) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"if (_createCache_aBuilder.containsKey(_cacheKey)) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"        \");\n    _builder_1.append(\"return _createCache_aBuilder.get(_cacheKey);\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"StringBuilder _stringBuilder = new StringBuilder();\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_result = _stringBuilder;\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_createCache_aBuilder.put(_cacheKey, _result);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"_init_aBuilder(_result, x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _result;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private final HashMap<ArrayList<?>,StringBuilder> _createCache_aBuilder = CollectionLiterals.newHashMap();\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private void _init_aBuilder(final StringBuilder result, final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"result.append(x);\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testSuperCall() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package x class Y extends Object {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"override boolean equals(Object p){\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"if (\\'foo\\' == p)\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"return true\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"else\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"super.equals(p) \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"} \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package x;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ObjectExtensions;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Y {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public boolean equals(final Object p) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"boolean _xifexpression = false;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"boolean _operator_equals = ObjectExtensions.operator_equals(\\\"foo\\\", p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"if (_operator_equals) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"return true;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"boolean _equals = super.equals(p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t  \");\n    _builder_1.append(\"_xifexpression = _equals;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _xifexpression;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21091,"modified_method":"public void testSuperCall() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package x class Y extends Object {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"override boolean equals(Object p){\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"if (\\'foo\\' == p)\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"return true\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"else\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"super.equals(p) \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"} \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package x;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ObjectExtensions;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Y {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public boolean equals(final Object p) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"boolean _xifexpression = false;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"boolean _operator_equals = ObjectExtensions.operator_equals(\\\"foo\\\", p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"if (_operator_equals) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"return true;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"} else {\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"boolean _equals = super.equals(p);\");\n    _builder_1.newLine();\n    _builder_1.append(\"      \");\n    _builder_1.append(\"_xifexpression = _equals;\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _xifexpression;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testSimple() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def Integer doStuff(String x) {x.length}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public Integer doStuff(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"int _length = x.length();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return ((Integer)_length);\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21092,"modified_method":"public void testSimple() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def Integer doStuff(String x) {x.length}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public Integer doStuff(final String x) {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"int _length = x.length();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return ((Integer)_length);\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testAnnotation() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"@com.google.inject.Inject String string\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import com.google.inject.Inject;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"@Inject\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"private String string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21093,"modified_method":"public void testAnnotation() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"@com.google.inject.Inject String string\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"import com.google.inject.Inject;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"@Inject\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"private String string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testConstructor() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new String()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"public String foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"String _string = new String();\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\\t\");\n    _builder_1.append(\"return _string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","id":21094,"modified_method":"public void testConstructor() throws Exception, UnsupportedOperationException {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package foo\");\n    _builder.newLine();\n    _builder.append(\"class Bar {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {new String()}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"package foo;\");\n    _builder_1.newLine();\n    _builder_1.newLine();\n    _builder_1.append(\"@SuppressWarnings(\\\"all\\\")\");\n    _builder_1.newLine();\n    _builder_1.append(\"public class Bar {\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"public String foo() {\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"String _string = new String();\");\n    _builder_1.newLine();\n    _builder_1.append(\"    \");\n    _builder_1.append(\"return _string;\");\n    _builder_1.newLine();\n    _builder_1.append(\"  \");\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    _builder_1.append(\"}\");\n    _builder_1.newLine();\n    this.assertCompilesTo(_builder, _builder_1);\n  }","commit_id":"8ce457bb8f32a4eceb94d82f08cd65cea0c65e55","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence jsOnLoad() {\n    StringConcatenation _builder = new StringConcatenation();\n    {\n      boolean _isPrettyPrint = this.isPrettyPrint();\n      if (_isPrettyPrint) {\n        _builder.append(\"prettyPrint();\");\n        _builder.newLine();\n      }\n    }\n    _builder.append(\"$(\\'a[data-rel]\\').each(function() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"$(this).attr(\\'rel\\', $(this).data(\\'rel\\'));\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"$(\\\"a[rel^=\\'prettyPhoto\\']\\\").prettyPhoto({\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"animation_speed: \\'fast\\',\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"slideshow: 5000,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"autoplay_slideshow: false,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"opacity: 0.80,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"show_title: true,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"theme: \\'ligh_square\\',\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"overlay_gallery: false,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"social_tools: false\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    {\n      boolean _isOutline = this.isOutline();\n      if (_isOutline) {\n        _builder.append(\"$(\\'#nav-outline > li > a\\').live(\\'click\\', function() {        \");\n        _builder.newLine();\n        _builder.append(\"\\t\");\n        _builder.append(\"$(this).parent().find(\\'ul\\').slideToggle();      \");\n        _builder.newLine();\n        _builder.append(\"});\");\n        _builder.newLine();\n      }\n    }\n    {\n      boolean _isPopover = this.isPopover();\n      if (_isPopover) {\n        _builder.append(\"$(\\'.has-popover\\').popover();\");\n        _builder.newLine();\n      }\n    }\n    _builder.append(\"getTwitters(\\'tweet\\', { \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"id: \\'\");\n    String _twitterID = this.twitterID();\n    _builder.append(_twitterID, \"\t\");\n    _builder.append(\"\\', \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"count: 5,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"includeRT: true,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"enableLinks: true, \");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"clearContents: true,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"template : \\'\\\"%text%\\\" - %time% by <a href=\\\"http://twitter.com/%user_screen_name%/statuses/%id_str%/\\\">@%user_screen_name%<\/a><br/><br/>\\'\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    _builder.append(\"var po = document.createElement(\\'script\\'); po.type = \\'text/javascript\\'; po.async = true;\");\n    _builder.newLine();\n    _builder.append(\"po.src = \\'https://apis.google.com/js/plusone.js\\';\");\n    _builder.newLine();\n    _builder.append(\"var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(po, s);\");\n    _builder.newLine();\n    return _builder;\n  }","id":21095,"modified_method":"public CharSequence jsOnLoad() {\n    StringConcatenation _builder = new StringConcatenation();\n    {\n      boolean _isPrettyPrint = this.isPrettyPrint();\n      if (_isPrettyPrint) {\n        _builder.append(\"prettyPrint();\");\n        _builder.newLine();\n      }\n    }\n    _builder.append(\"$(\\'a[data-rel]\\').each(function() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"$(this).attr(\\'rel\\', $(this).data(\\'rel\\'));\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"$(\\\"a[rel^=\\'prettyPhoto\\']\\\").prettyPhoto({\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"animation_speed: \\'fast\\',\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"slideshow: 5000,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"autoplay_slideshow: false,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"opacity: 0.80,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"show_title: true,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"theme: \\'ligh_square\\',\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"overlay_gallery: false,\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"social_tools: false\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    {\n      boolean _isOutline = this.isOutline();\n      if (_isOutline) {\n        _builder.append(\"$(\\'#nav-outline > li > a\\').live(\\'click\\', function() {        \");\n        _builder.newLine();\n        _builder.append(\"\\t\");\n        _builder.append(\"$(this).parent().find(\\'ul\\').slideToggle();      \");\n        _builder.newLine();\n        _builder.append(\"});\");\n        _builder.newLine();\n      }\n    }\n    {\n      boolean _isPopover = this.isPopover();\n      if (_isPopover) {\n        _builder.append(\"$(\\'.has-popover\\').popover();\");\n        _builder.newLine();\n      }\n    }\n    _builder.append(\"var po = document.createElement(\\'script\\'); po.type = \\'text/javascript\\'; po.async = true;\");\n    _builder.newLine();\n    _builder.append(\"po.src = \\'https://apis.google.com/js/plusone.js\\';\");\n    _builder.newLine();\n    _builder.append(\"var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(po, s);\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence quickLinksAndTweets() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"<div id=\\\"extra\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3 style=\\\"padding-top: 0px; margin-top: 0px;\\\">Quick Links<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul class=\\\"footer-links clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/privacy.php\\\">Privacy Policy<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/termsofuse.php\\\">Terms of Use<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/copyright.php\\\">Copyright Agent<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/\\\">Legal<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul class=\\\"footer-links clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"      \\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org\\\">Eclipse Home<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://marketplace.eclipse.org/\\\">Market Place<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://live.eclipse.org/\\\">Eclipse Live<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.planeteclipse.org/\\\">Eclipse Planet<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3 style=\\\"padding-top: 0px; margin-top: 0px;\\\"><a href=\\\"https://twitter.com/#!/\");\n    String _twitterID = this.twitterID();\n    _builder.append(_twitterID, \"\t\t\t\t\t\");\n    _builder.append(\"\\\" style=\\\"color: white;\\\">\");\n    String _twitterID_1 = this.twitterID();\n    String _firstUpper = StringExtensions.toFirstUpper(_twitterID_1);\n    _builder.append(_firstUpper, \"\t\t\t\t\t\");\n    _builder.append(\"<\/a> on Twitter<\/h3>\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<br />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div id=\\\"tweet\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>Please wait while my tweets load<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"http://twitter.com/rem\\\">If you can\\'t wait - check\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"out what I\\'ve been twittering<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21096,"modified_method":"public CharSequence quickLinksAndTweets() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"<div id=\\\"extra\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3 style=\\\"padding-top: 0px; margin-top: 0px;\\\">Quick Links<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul class=\\\"footer-links clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/privacy.php\\\">Privacy Policy<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/termsofuse.php\\\">Terms of Use<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/copyright.php\\\">Copyright Agent<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org/legal/\\\">Legal<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<ul class=\\\"footer-links clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"      \\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.eclipse.org\\\">Eclipse Home<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://marketplace.eclipse.org/\\\">Market Place<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://live.eclipse.org/\\\">Eclipse Live<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<li><a href=\\\"http://www.planeteclipse.org/\\\">Eclipse Planet<\/a><\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3 style=\\\"padding-top: 0px; margin-top: 0px;\\\"><a href=\\\"https://twitter.com/xtext\\\" style=\\\"color : white;\\\">@Xtext<\/a> on Twitter<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a class=\\\"twitter-timeline\\\" href=\\\"https://twitter.com/xtext\\\" data-widget-id=\\\"346625441290928128\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"data-chrome=\\\"noheader nofooter transparent\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"data-theme=\\\"dark\\\">Tweets by @xtext<\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<script>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"!function(d,s,id) { \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\\'http\\':\\'https\\';\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"if(!d.getElementById(id)) { \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"js=d.createElement(s);\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"js.id=id;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"js.src=p+\\\"://platform.twitter.com/widgets.js\\\";\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"fjs.parentNode.insertBefore(js,fjs);\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"}(document,\\\"script\\\",\\\"twitter-wjs\\\");<\/script>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence zoo() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"<div id=\\\"zoo\\\" class=\\\"container\\\"> \");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<h2>What others have built with Xtext<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"<table class=\\\"table table-striped table-condensed\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<thead>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Name<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Description<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>License<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Category<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Xtext&nbsp;v.<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Author(s)<\/th>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr><\/thead>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://applause.github.com/\\\">APPlause<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Open source tool chain to produce native apps for different\");\n    _builder.newLine();\n    _builder.append(\"devices such as Android, iPhone and iPad.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Heiko Behrens, Peter Friese, et al<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/alloy4eclipse/\\\">alloy4eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Specification and analysis of models in the Alloy4 language on\");\n    _builder.newLine();\n    _builder.append(\"the Eclipse platform.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>LGPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Mohamed Bouragba, Mohamed Said, Maxime Kapusta and Yoann Vasseur<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.artop.org/\\\">ARText (part&nbsp;of&nbsp;Artop)<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>ARText, a textual language for the specification of AUTOSAR\");\n    _builder.newLine();\n    _builder.append(\"systems. See the <a href=\\\"http://vimeo.com/16768196\\\">very<\/a> <a href=\\\"http://vimeo.com/13154188\\\">cool<\/a> <a href=\\\"http://vimeo.com/12080038\\\">screencasts<\/a>.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>closed&nbsp;source<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Sebastian Benz, Dana Wong<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://new.axdt.org\\\">Axdt<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>ActionScript3 development tools. It uses Mirror resources to\");\n    _builder.newLine();\n    _builder.append(\"integrate declarations parsed from html and xml ActionScript Docs similar to\");\n    _builder.newLine();\n    _builder.append(\"the Xtext Java integration.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Martin Schnabel<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://businessAppTester.com\\\">BusinessAppTester<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"Allows you to reuse JUnit test classes by seperating the data from the\");\n    _builder.newLine();\n    _builder.append(\"unit implementation class. Uses Xtext to define test class specific domain\");\n    _builder.newLine();\n    _builder.append(\"models.\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Testing, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Florian Pirchner, Ekkehard Gentz<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://www.canappi.com\\\">Canappi<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"Canappi is a Development Hub, focusing on Mobile Application Development, that\");\n    _builder.newLine();\n    _builder.append(\"integrates tools, mobile platforms, libraries and back-end services. It is\");\n    _builder.newLine();\n    _builder.append(\"based on mdsl, a very compact mobile domain specific language. Platform\");\n    _builder.newLine();\n    _builder.append(\"specific code generation happens in on the ClougGen.org platform.\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Jean-Jacques Dubray<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/dom3editor/\\\">dom3editor<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"This is a tool to help edit Dominions 3 mod files. It includes\");\n    _builder.newLine();\n    _builder.append(\"context coloring, code completion, error checking and integrated help. You can\");\n    _builder.newLine();\n    _builder.append(\"edit using the text editor or the form based entry view.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Larry Moore<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://marketplace.eclipse.org/content/graphviz-dot-zest-dot4zest\\\">DOT for Zest<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>A Graphviz-compatible DSL for the Eclipse Visualization Toolkit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Fabian Steeg, Michael Clay<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"https://github.com/dslmeinte/Xtext2-DSLs\\\">dslmeinte\\'s example DSLs<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Various DSLs for technical domains (data modeling, dynamic screens, XSDs,\");\n    _builder.newLine();\n    _builder.append(\"WSDLs)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>MIT license<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>examples<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>2.0.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.dslconsultancy.com/\\\">Meinte Boersma<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/td><\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/emf-customizer/\\\">EMF&nbsp;Customizer<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EMF Customizer is a model (Ecore based)\");\n    _builder.newLine();\n    _builder.append(\"customization/styling/refining CSS like textual DSL (Domain Specific Language)\");\n    _builder.newLine();\n    _builder.append(\"targeting MDSD tool chains end users. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/emf-scaffolding/\\\">EMF&nbsp;Scaffolding<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Implementation of the principle of dynamic inplace scaffolding\");\n    _builder.newLine();\n    _builder.append(\"with EMF presented in July 2009 <a href=\\\"http://www.slideshare.net/cedric.vidal/rmll-eclipse-acceleo-day-mdsd-scaffolding-and-acceleo-cdric-vidal-11\\\">at Eclipse Acceleo Day<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal and Jerome Benois<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.eclipse.org/modeling/emft/b3/\\\">Eclipse b3<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>new generation of Eclipse technology to simplify software build\");\n    _builder.newLine();\n    _builder.append(\"and assembly.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Henrik Lindberg<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://elysium.thsoft.hu\\\">Elysium<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>LilyPond IDE for Eclipse<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Denes Harmath<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.eclipse.org/etrice/\\\">eTrice<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>eTrice is a Modeling Tool for distributed eventdriven realtime systems based on\");\n    _builder.newLine();\n    _builder.append(\"Realtime Object Oriented Modeling (ROOM), not UML. Textual and graphical ROOM\");\n    _builder.newLine();\n    _builder.append(\"editors editors and codegenerators and runtime libraries for Java, C++ and C\");\n    _builder.newLine();\n    _builder.append(\"will be provided.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Henrik Rentz-Reichert, Thomas Schuetz<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sculptor.fornax-platform.org\\\">Fornax Sculptor<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>You express your design intent in a textual DSL, from which\");\n    _builder.newLine();\n    _builder.append(\"Sculptor generates high quality Java code and configuration.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Apache 2 License<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x, 1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Patrik Nordwall and others<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://fj-eclipse.sourceforge.net/\\\">fj-eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>an Eclipse-based IDE for Featherweight Java, implemented using Xtext.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"https://github.com/cloudsmith/geppetto\\\">Geppetto<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>Integrated development environment for the Puppet System Admin tools. (The\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"PP manifest\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"language is Ruby like).<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>EPL, Apache<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>Henrik Lindberg, Cloudsmith Inc.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://www.jolie-lang.org/joliepse.php\\\">Joliepse\");\n    _builder.newLine();\n    _builder.append(\"IDE<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Joliepse is an Integrated Development Environment (IDE) for the JOLIE\");\n    _builder.newLine();\n    _builder.append(\"programming language, the first full-fledged programming language based upon\");\n    _builder.newLine();\n    _builder.append(\"the service-oriented programming paradigm\");\n    _builder.newLine();\n    _builder.append(\"and support classes.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Diego Castronuovo (castronu at gmail dot com)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://rtsys.informatik.uni-kiel.de/~kieler\\\">KIELER<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>an evaluation platform for new methods in model-based software\");\n    _builder.newLine();\n    _builder.append(\"design (automatic layout, graphic/ textual dynamic views, focus and context,\");\n    _builder.newLine();\n    _builder.append(\"simulation, codegen,...)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Rtsys group, Dep. of Computer Science, Uni Kiel<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/llvm4e/\\\">LLVM4e<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Xtext based Eclipse editor for LLVM (Low Level Virtual Machine)\");\n    _builder.newLine();\n    _builder.append(\"Assembly Language *.ll files<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://mads.sourceforge.net\\\">MADS<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"MADS (Multipurpose Agricultural Data System) is a free open-source tool\");\n    _builder.newLine();\n    _builder.append(\"for modelling and analysis of agricultural activities - crops, livestock,\");\n    _builder.newLine();\n    _builder.append(\"forestry and others - in developing countries, at sector, regional or project\");\n    _builder.newLine();\n    _builder.append(\"level. .\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL, GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>RCP application<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.1<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Michel Simeon<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.mod4j.org/\\\">mod4j<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>open source DSL-based environment for developing administrative\");\n    _builder.newLine();\n    _builder.append(\"enterprise applications<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Jos Warmer<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"http://metrikforge.informatik.hu-berlin.de/projects/nanoworkbench/\\\">NanoWorkbench<\/a>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>A Domain-specific Workbench (DSM) for the development of optical\");\n    _builder.newLine();\n    _builder.append(\"nanostructures. Especially used for the description of simulations and\");\n    _builder.newLine();\n    _builder.append(\"experiments.\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>language, documentation<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Siamak Haschemi (haschemi@informatik.hu-berlin.de), Martin Schmidt\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"(schmidma@informatik.hu-berlin.de), Arif Wider\");\n    _builder.newLine();\n    _builder.append(\"(wider@informatik.hu-berlin.de)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/nusmv-tools/\\\">nusmv-tools<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>The nusmv-tools project provides a set of tools for the model checker\");\n    _builder.newLine();\n    _builder.append(\"<a href=\\\"http://nusmv.fbk.eu/\\\">NuSMV<\/a>. Xtext is used to create an Eclipse\");\n    _builder.newLine();\n    _builder.append(\"editor for the NuSMV input language. The editor is further enhanced by static\");\n    _builder.newLine();\n    _builder.append(\"analysis checks (shown as Eclipse error markers) performed by an OSGi-fied\");\n    _builder.newLine();\n    _builder.append(\"version of NuSMV itself. Watch the <a href=\\\"http://vimeo.com/21637768\\\">screencast<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"mailto://siamak@haschemi.org\\\">Siamak Haschemi<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://wiki.eclipse.org/MDT/OCL\\\">OCL<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Editors for OCL expressions, documents, libraries. Standalone or\");\n    _builder.newLine();\n    _builder.append(\"embedded in Ecore.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Ed Willink<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://www.gentleware.com/poseidon-for-dsls.html\\\">Poseidon for DSLs<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Framework for creating graphical tools for DSLs, based on internal\");\n    _builder.newLine();\n    _builder.append(\"Xtext models. Poseidon for UML 8.0 as a sample DSL platform\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Gentleware AG<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/protobuf4e/\\\">protobuf4e<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Editor for Google\\'s Protocol Buffers data interchange file\");\n    _builder.newLine();\n    _builder.append(\"format. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sourceforge.net/projects/rng-eclipse/\\\">RELAX NG for Eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Provides support for editing RELAX NG documents in the Eclipse\");\n    _builder.newLine();\n    _builder.append(\"IDE. Integrates with standard WST XML editor to provide content completion and\");\n    _builder.newLine();\n    _builder.append(\"validation of edited XML file based on it\\'s RELAX NG schema.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Dave Carver<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://swrtj.sourceforge.net/\\\">SWRTJ: Sugared Welterweight Record-Trait Java<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>a Java-like language where units of objects\\' functionality are modeled by\");\n    _builder.newLine();\n    _builder.append(\"traits and by records (a construct that complements traits to model the state\");\n    _builder.newLine();\n    _builder.append(\"part of objects).<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Fabio Strocco, Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sadl.sourceforge.net/\\\">Semantic Application Design Language (SADL) Version 2<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>The Semantic Application Design Language (SADL) is a language for building\");\n    _builder.newLine();\n    _builder.append(\"semantic models and expressing rules that capture additional domain\");\n    _builder.newLine();\n    _builder.append(\"knowledge. The SADL-IDE (integrated development environment) is a set of\");\n    _builder.newLine();\n    _builder.append(\"Eclipse plug-ins that support the editing and testing of semantic models\");\n    _builder.newLine();\n    _builder.append(\"using the SADL language. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Andrew Crapo, John Interrante, David Bracewell, Saurabh Gupta<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/spray/\\\">Spray<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>This project aims to provide Domain Specific Languages to describe\");\n    _builder.newLine();\n    _builder.append(\"Visual DSL Editors against the Graphiti runtime, and provide code generation\");\n    _builder.newLine();\n    _builder.append(\"(with Xtend2) to create the boilerplate code for realizing the implementation\");\n    _builder.newLine();\n    _builder.append(\"against the Graphiti framework.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL 1.0<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.1<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Jos Warmer, Karsten Thoms et. al.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td id=\\\"name\\\"><a href=\\\"http://www.vclipse.org\\\">VClipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>VClipse is an Eclipse-based integrated development environment (IDE)\");\n    _builder.newLine();\n    _builder.append(\"for product modeling for the SAP Variant Configurator (VC). VClipse supports the\");\n    _builder.newLine();\n    _builder.append(\"specification of objects and dependencies in a textual domain specific language\");\n    _builder.newLine();\n    _builder.append(\"calld VCML. This enables the use of standard text comparison tools and version\");\n    _builder.newLine();\n    _builder.append(\"control systems in the model development process.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Tim Geisler, Aleksey&nbsp;Shumilin<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"https://github.com/team-worthwhile/worthwhile\\\">Worthwhile<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Worthwhile is an IDE built around a simple WHILE language that\");\n    _builder.newLine();\n    _builder.append(\"integrates editing, running, debugging and verifying programs using\");\n    _builder.newLine();\n    _builder.append(\"Microsoft\\'s Z3 prover.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>3-Clause BSD<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Leon Handreke, Chris Hiatt, Stefan Orf, Joachim Priesner, Fabian\");\n    _builder.newLine();\n    _builder.append(\"Ruch, Matthias Wagner<\/td>\");\n    _builder.newLine();\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"http://www.gipsys.ca/xdgl.htm\\\">xDGL Data Generation Language<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>xDGL is a free plugin on eclipse Helios 3.6 fully compatible with\");\n    _builder.newLine();\n    _builder.append(\"eclipse data tools platform DTP. Works with dozens of RDBMS\");\n    _builder.newLine();\n    _builder.append(\"databases. xDGL was invented by Abubaker Mahmoud, a Canadian Computer expert.\");\n    _builder.newLine();\n    _builder.append(\"xDGL is simple to learn and fast to execute and is designed to solve the problem \");\n    _builder.newLine();\n    _builder.append(\"of most data generators systems works in english. xDGl works in any language that \");\n    _builder.newLine();\n    _builder.append(\"could be written in the UTF-8 encoding. xDGL is the first Java Data Generation Language, \");\n    _builder.newLine();\n    _builder.append(\"the first Eclipse language for Data Genration. xDGL is built in Java, Eclipse and the great Xtext\");\n    _builder.newLine();\n    _builder.append(\"Framework.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>Commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td><a href=\\\"mailto://shangab@gmail.com\\\">Abubaker Mahmoud<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/tr> \");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://xsemantics.sourceforge.net/\\\">Xsemantics<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>XSemantics is a DSL (implemented in Xtext) for writing type systems,\");\n    _builder.newLine();\n    _builder.append(\"reduction rules, interpreters (and in general relation rules) for languages\");\n    _builder.newLine();\n    _builder.append(\"implemented in Xtext. It then generates Java code that can be used in your\");\n    _builder.newLine();\n    _builder.append(\"language implemented in Xtext for scoping and validation (it can also generate\");\n    _builder.newLine();\n    _builder.append(\"a validator in Java). It is the successor of XTypeS.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"https://github.com/msbarry/Xtest\\\">Xtest<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Xtest is a unit-testing domain-specific scripting language for Java.\");\n    _builder.newLine();\n    _builder.append(\"Tests are run while you type and any time a related file is saved, marking\");\n    _builder.newLine();\n    _builder.append(\"exceptions thrown and failed assertions as errors to immediately notify you of\");\n    _builder.newLine();\n    _builder.append(\"test failures.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Testing, Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Michael Barry<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/xtext-forms-integration/\\\">Xtext Forms Integration<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Sample RCP application to demonstrate how Xtext editors can be\");\n    _builder.newLine();\n    _builder.append(\"integrated within Eclipse UI forms<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Mikael Barbero<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/xtext-typesystem/\\\">Xtext Typesystem Framework<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>A framework that supports the efficient implementation of typesystem\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"rules for Xtext languages. Especially useful if your languages has\");\n    _builder.newLine();\n    _builder.append(\"expressions, statements, different (combinable) data types.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"mailto:voelter@acm.org\\\">Markus Voelter<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://xtypes.sourceforge.net/\\\">XTypeS<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>a DSL for writing type systems for languages implemented in Xtext. It\");\n    _builder.newLine();\n    _builder.append(\"then generates Java code that can be used in your language implemented in Xtext\");\n    _builder.newLine();\n    _builder.append(\"for scoping and validation (XTypeS also generates a validator in Java).\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://www.yakindu.org\\\">Yakindu Statechart Tools<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"YAKINDU Statechart Tools (SCT) provides an integrated modeling\");\n    _builder.newLine();\n    _builder.append(\"environment for the specification and development of reactive, event-driven\");\n    _builder.newLine();\n    _builder.append(\"systems based on the concept of statecharts. It is an easy to use tool that\");\n    _builder.newLine();\n    _builder.append(\"features sophisticated graphical state chart editing, validation and simulation\");\n    _builder.newLine();\n    _builder.append(\"of statecharts as well as code generation.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Tool<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.X<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Axel Terfloth, Andreas M&uuml;lder, et al<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<!-- \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>AMP Agent Modeling Platform<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>extensible frameworks and exemplary tools for representing,\");\n    _builder.newLine();\n    _builder.append(\"editing, generating, executing and visualizing agent-based models (ABMs) and\");\n    _builder.newLine();\n    _builder.append(\"any other domain requiring spatial, behavioral and functional features<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://www.eclipse.org/amp/<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.0.0<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Metascape, LLC<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EMF Query 2<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>search and retrieval of emf model elements in a structured\");\n    _builder.newLine();\n    _builder.append(\"format with an additional advantage that resource loading is minimized during\");\n    _builder.newLine();\n    _builder.append(\"execution <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://www.eclipse.org/modeling/emf/?project=query2<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>CamelSplit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Text-based DSL Editor for Camel and Eclipse<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://code.google.com/p/camel-extra/wiki/CamelSpit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Oisin Hurley<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"-->\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"<\/tbody><tfoot><\/tfoot><\/table>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21097,"modified_method":"public CharSequence zoo() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"<div id=\\\"zoo\\\" class=\\\"container\\\"> \");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<h2>What others have built with Xtext<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"<table class=\\\"table table-striped table-condensed\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<thead>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Name<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Description<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>License<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Category<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Xtext&nbsp;v.<\/th>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<th>Author(s)<\/th>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr><\/thead>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://applause.github.com/\\\">APPlause<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Open source tool chain to produce native apps for different\");\n    _builder.newLine();\n    _builder.append(\"devices such as Android, iPhone and iPad.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Heiko Behrens, Peter Friese, et al<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/alloy4eclipse/\\\">alloy4eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Specification and analysis of models in the Alloy4 language on\");\n    _builder.newLine();\n    _builder.append(\"the Eclipse platform.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>LGPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Mohamed Bouragba, Mohamed Said, Maxime Kapusta and Yoann Vasseur<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.artop.org/\\\">ARText (part&nbsp;of&nbsp;Artop)<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>ARText, a textual language for the specification of AUTOSAR\");\n    _builder.newLine();\n    _builder.append(\"systems. See the <a href=\\\"http://vimeo.com/16768196\\\">very<\/a> <a href=\\\"http://vimeo.com/13154188\\\">cool<\/a> <a href=\\\"http://vimeo.com/12080038\\\">screencasts<\/a>.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>closed&nbsp;source<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Sebastian Benz, Dana Wong<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://new.axdt.org\\\">Axdt<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>ActionScript3 development tools. It uses Mirror resources to\");\n    _builder.newLine();\n    _builder.append(\"integrate declarations parsed from html and xml ActionScript Docs similar to\");\n    _builder.newLine();\n    _builder.append(\"the Xtext Java integration.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Martin Schnabel<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://businessAppTester.com\\\">BusinessAppTester<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"Allows you to reuse JUnit test classes by seperating the data from the\");\n    _builder.newLine();\n    _builder.append(\"unit implementation class. Uses Xtext to define test class specific domain\");\n    _builder.newLine();\n    _builder.append(\"models.\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Testing, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Florian Pirchner, Ekkehard Gentz<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://www.canappi.com\\\">Canappi<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"Canappi is a Development Hub, focusing on Mobile Application Development, that\");\n    _builder.newLine();\n    _builder.append(\"integrates tools, mobile platforms, libraries and back-end services. It is\");\n    _builder.newLine();\n    _builder.append(\"based on mdsl, a very compact mobile domain specific language. Platform\");\n    _builder.newLine();\n    _builder.append(\"specific code generation happens in on the ClougGen.org platform.\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Jean-Jacques Dubray<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/dom3editor/\\\">dom3editor<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"This is a tool to help edit Dominions 3 mod files. It includes\");\n    _builder.newLine();\n    _builder.append(\"context coloring, code completion, error checking and integrated help. You can\");\n    _builder.newLine();\n    _builder.append(\"edit using the text editor or the form based entry view.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Larry Moore<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://marketplace.eclipse.org/content/graphviz-dot-zest-dot4zest\\\">DOT for Zest<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>A Graphviz-compatible DSL for the Eclipse Visualization Toolkit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Fabian Steeg, Michael Clay<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"https://github.com/dslmeinte/Xtext2-DSLs\\\">dslmeinte\\'s example DSLs<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Various DSLs for technical domains (data modeling, dynamic screens, XSDs,\");\n    _builder.newLine();\n    _builder.append(\"WSDLs)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>MIT license<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>examples<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>2.0.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.dslconsultancy.com/\\\">Meinte Boersma<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/td><\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/emf-customizer/\\\">EMF&nbsp;Customizer<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EMF Customizer is a model (Ecore based)\");\n    _builder.newLine();\n    _builder.append(\"customization/styling/refining CSS like textual DSL (Domain Specific Language)\");\n    _builder.newLine();\n    _builder.append(\"targeting MDSD tool chains end users. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/emf-scaffolding/\\\">EMF&nbsp;Scaffolding<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Implementation of the principle of dynamic inplace scaffolding\");\n    _builder.newLine();\n    _builder.append(\"with EMF presented in July 2009 <a href=\\\"http://www.slideshare.net/cedric.vidal/rmll-eclipse-acceleo-day-mdsd-scaffolding-and-acceleo-cdric-vidal-11\\\">at Eclipse Acceleo Day<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal and Jerome Benois<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.eclipse.org/modeling/emft/b3/\\\">Eclipse b3<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>new generation of Eclipse technology to simplify software build\");\n    _builder.newLine();\n    _builder.append(\"and assembly.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Henrik Lindberg<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://elysium.thsoft.hu\\\">Elysium<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>LilyPond IDE for Eclipse<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Denes Harmath<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.eclipse.org/etrice/\\\">eTrice<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>eTrice is a Modeling Tool for distributed eventdriven realtime systems based on\");\n    _builder.newLine();\n    _builder.append(\"Realtime Object Oriented Modeling (ROOM), not UML. Textual and graphical ROOM\");\n    _builder.newLine();\n    _builder.append(\"editors editors and codegenerators and runtime libraries for Java, C++ and C\");\n    _builder.newLine();\n    _builder.append(\"will be provided.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Henrik Rentz-Reichert, Thomas Schuetz<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sculptor.fornax-platform.org\\\">Fornax Sculptor<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>You express your design intent in a textual DSL, from which\");\n    _builder.newLine();\n    _builder.append(\"Sculptor generates high quality Java code and configuration.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Apache 2 License<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x, 1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Patrik Nordwall and others<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://fj-eclipse.sourceforge.net/\\\">fj-eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>an Eclipse-based IDE for Featherweight Java, implemented using Xtext.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"https://github.com/cloudsmith/geppetto\\\">Geppetto<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>Integrated development environment for the Puppet System Admin tools. (The\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"PP manifest\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"language is Ruby like).<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>EPL, Apache<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>Henrik Lindberg, Cloudsmith Inc.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://www.jolie-lang.org/joliepse.php\\\">Joliepse\");\n    _builder.newLine();\n    _builder.append(\"IDE<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Joliepse is an Integrated Development Environment (IDE) for the JOLIE\");\n    _builder.newLine();\n    _builder.append(\"programming language, the first full-fledged programming language based upon\");\n    _builder.newLine();\n    _builder.append(\"the service-oriented programming paradigm\");\n    _builder.newLine();\n    _builder.append(\"and support classes.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Diego Castronuovo (castronu at gmail dot com)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"link: http://www.informatik.uni-kiel.de/rtsys/kieler/\\\">KIELER<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>an evaluation platform for new methods in model-based software\");\n    _builder.newLine();\n    _builder.append(\"design (automatic layout, graphic/ textual dynamic views, focus and context,\");\n    _builder.newLine();\n    _builder.append(\"simulation, codegen,...)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Rtsys group, Dep. of Computer Science, Uni Kiel<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://amishne.github.com/llvm-ir-editor/\\\">LLVM IR SDK<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Editors for QVT Core and Relational languages.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>BSD<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.3.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Alon Mishne<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/llvm4e/\\\">LLVM4e<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Xtext based Eclipse editor for LLVM (Low Level Virtual Machine)\");\n    _builder.newLine();\n    _builder.append(\"Assembly Language *.ll files<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://mads.sourceforge.net\\\">MADS<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"       \");\n    _builder.append(\"MADS (Multipurpose Agricultural Data System) is a free open-source tool\");\n    _builder.newLine();\n    _builder.append(\"for modelling and analysis of agricultural activities - crops, livestock,\");\n    _builder.newLine();\n    _builder.append(\"forestry and others - in developing countries, at sector, regional or project\");\n    _builder.newLine();\n    _builder.append(\"level. .\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL, GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>RCP application<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.1<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Michel Simeon<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://www.mod4j.org/\\\">mod4j<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>open source DSL-based environment for developing administrative\");\n    _builder.newLine();\n    _builder.append(\"enterprise applications<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language, Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Jos Warmer<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"http://metrikforge.informatik.hu-berlin.de/projects/nanoworkbench/\\\">NanoWorkbench<\/a>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>A Domain-specific Workbench (DSM) for the development of optical\");\n    _builder.newLine();\n    _builder.append(\"nanostructures. Especially used for the description of simulations and\");\n    _builder.newLine();\n    _builder.append(\"experiments.\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td>language, documentation<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Siamak Haschemi (haschemi@informatik.hu-berlin.de), Martin Schmidt\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"(schmidma@informatik.hu-berlin.de), Arif Wider\");\n    _builder.newLine();\n    _builder.append(\"(wider@informatik.hu-berlin.de)<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/nusmv-tools/\\\">nusmv-tools<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>The nusmv-tools project provides a set of tools for the model checker\");\n    _builder.newLine();\n    _builder.append(\"<a href=\\\"http://nusmv.fbk.eu/\\\">NuSMV<\/a>. Xtext is used to create an Eclipse\");\n    _builder.newLine();\n    _builder.append(\"editor for the NuSMV input language. The editor is further enhanced by static\");\n    _builder.newLine();\n    _builder.append(\"analysis checks (shown as Eclipse error markers) performed by an OSGi-fied\");\n    _builder.newLine();\n    _builder.append(\"version of NuSMV itself. Watch the <a href=\\\"http://vimeo.com/21637768\\\">screencast<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"mailto://siamak@haschemi.org\\\">Siamak Haschemi<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://wiki.eclipse.org/MDT/OCL\\\">OCL<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Editors for OCL expressions, documents, libraries. Standalone or\");\n    _builder.newLine();\n    _builder.append(\"embedded in Ecore.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Ed Willink<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td><a href=\\\"http://www.gentleware.com/poseidon-for-dsls.html\\\">Poseidon for DSLs<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Framework for creating graphical tools for DSLs, based on internal\");\n    _builder.newLine();\n    _builder.append(\"Xtext models. Poseidon for UML 8.0 as a sample DSL platform\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"     \");\n    _builder.append(\"<td>Gentleware AG<\/td>\");\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/p/protobuf4e/\\\">protobuf4e<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Editor for Google\\'s Protocol Buffers data interchange file\");\n    _builder.newLine();\n    _builder.append(\"format. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Cedric Vidal<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://wiki.eclipse.org/QVTd\\\">QVTc and QVTr<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Editors for QVT Core and Relational languages.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.4.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Ed Willink<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sourceforge.net/projects/rng-eclipse/\\\">RELAX NG for Eclipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Provides support for editing RELAX NG documents in the Eclipse\");\n    _builder.newLine();\n    _builder.append(\"IDE. Integrates with standard WST XML editor to provide content completion and\");\n    _builder.newLine();\n    _builder.append(\"validation of edited XML file based on it\\'s RELAX NG schema.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Dave Carver<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://swrtj.sourceforge.net/\\\">SWRTJ: Sugared Welterweight Record-Trait Java<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>a Java-like language where units of objects\\' functionality are modeled by\");\n    _builder.newLine();\n    _builder.append(\"traits and by records (a construct that complements traits to model the state\");\n    _builder.newLine();\n    _builder.append(\"part of objects).<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Fabio Strocco, Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://sadl.sourceforge.net/\\\">Semantic Application Design Language (SADL) Version 2<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>The Semantic Application Design Language (SADL) is a language for building\");\n    _builder.newLine();\n    _builder.append(\"semantic models and expressing rules that capture additional domain\");\n    _builder.newLine();\n    _builder.append(\"knowledge. The SADL-IDE (integrated development environment) is a set of\");\n    _builder.newLine();\n    _builder.append(\"Eclipse plug-ins that support the editing and testing of semantic models\");\n    _builder.newLine();\n    _builder.append(\"using the SADL language. <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Andrew Crapo, John Interrante, David Bracewell, Saurabh Gupta<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/spray/\\\">Spray<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>This project aims to provide Domain Specific Languages to describe\");\n    _builder.newLine();\n    _builder.append(\"Visual DSL Editors against the Graphiti runtime, and provide code generation\");\n    _builder.newLine();\n    _builder.append(\"(with Xtend2) to create the boilerplate code for realizing the implementation\");\n    _builder.newLine();\n    _builder.append(\"against the Graphiti framework.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL 1.0<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.1<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Jos Warmer, Karsten Thoms et. al.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td id=\\\"name\\\"><a href=\\\"http://www.vclipse.org\\\">VClipse<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>VClipse is an Eclipse-based integrated development environment (IDE)\");\n    _builder.newLine();\n    _builder.append(\"for product modeling for the SAP Variant Configurator (VC). VClipse supports the\");\n    _builder.newLine();\n    _builder.append(\"specification of objects and dependencies in a textual domain specific language\");\n    _builder.newLine();\n    _builder.append(\"calld VCML. This enables the use of standard text comparison tools and version\");\n    _builder.newLine();\n    _builder.append(\"control systems in the model development process.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Tim Geisler, Aleksey&nbsp;Shumilin<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"https://github.com/team-worthwhile/worthwhile\\\">Worthwhile<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Worthwhile is an IDE built around a simple WHILE language that\");\n    _builder.newLine();\n    _builder.append(\"integrates editing, running, debugging and verifying programs using\");\n    _builder.newLine();\n    _builder.append(\"Microsoft\\'s Z3 prover.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>3-Clause BSD<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Leon Handreke, Chris Hiatt, Stefan Orf, Joachim Priesner, Fabian\");\n    _builder.newLine();\n    _builder.append(\"Ruch, Matthias Wagner<\/td>\");\n    _builder.newLine();\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<td><a href=\\\"http://www.gipsys.ca/xdgl.htm\\\">xDGL Data Generation Language<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>xDGL is a free plugin on eclipse Helios 3.6 fully compatible with\");\n    _builder.newLine();\n    _builder.append(\"eclipse data tools platform DTP. Works with dozens of RDBMS\");\n    _builder.newLine();\n    _builder.append(\"databases. xDGL was invented by Abubaker Mahmoud, a Canadian Computer expert.\");\n    _builder.newLine();\n    _builder.append(\"xDGL is simple to learn and fast to execute and is designed to solve the problem \");\n    _builder.newLine();\n    _builder.append(\"of most data generators systems works in english. xDGl works in any language that \");\n    _builder.newLine();\n    _builder.append(\"could be written in the UTF-8 encoding. xDGL is the first Java Data Generation Language, \");\n    _builder.newLine();\n    _builder.append(\"the first Eclipse language for Data Genration. xDGL is built in Java, Eclipse and the great Xtext\");\n    _builder.newLine();\n    _builder.append(\"Framework.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>Commercial<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<td><a href=\\\"mailto://shangab@gmail.com\\\">Abubaker Mahmoud<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<\/tr> \");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://xsemantics.sourceforge.net/\\\">Xsemantics<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>XSemantics is a DSL (implemented in Xtext) for writing type systems,\");\n    _builder.newLine();\n    _builder.append(\"reduction rules, interpreters (and in general relation rules) for languages\");\n    _builder.newLine();\n    _builder.append(\"implemented in Xtext. It then generates Java code that can be used in your\");\n    _builder.newLine();\n    _builder.append(\"language implemented in Xtext for scoping and validation (it can also generate\");\n    _builder.newLine();\n    _builder.append(\"a validator in Java). It is the successor of XTypeS.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"https://github.com/msbarry/Xtest\\\">Xtest<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Xtest is a unit-testing domain-specific scripting language for Java.\");\n    _builder.newLine();\n    _builder.append(\"Tests are run while you type and any time a related file is saved, marking\");\n    _builder.newLine();\n    _builder.append(\"exceptions thrown and failed assertions as errors to immediately notify you of\");\n    _builder.newLine();\n    _builder.append(\"test failures.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Testing, Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Michael Barry<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/xtext-forms-integration/\\\">Xtext Forms Integration<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Sample RCP application to demonstrate how Xtext editors can be\");\n    _builder.newLine();\n    _builder.append(\"integrated within Eclipse UI forms<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Mikael Barbero<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"   \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"http://code.google.com/a/eclipselabs.org/p/xtext-typesystem/\\\">Xtext Typesystem Framework<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>A framework that supports the efficient implementation of typesystem\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"rules for Xtext languages. Especially useful if your languages has\");\n    _builder.newLine();\n    _builder.append(\"expressions, statements, different (combinable) data types.<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>2.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td><a href=\\\"mailto:voelter@acm.org\\\">Markus Voelter<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://xtypes.sourceforge.net/\\\">XTypeS<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>a DSL for writing type systems for languages implemented in Xtext. It\");\n    _builder.newLine();\n    _builder.append(\"then generates Java code that can be used in your language implemented in Xtext\");\n    _builder.newLine();\n    _builder.append(\"for scoping and validation (XTypeS also generates a validator in Java).\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>GPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>1.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Lorenzo Bettini<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td><a href=\\\"http://www.yakindu.org\\\">Yakindu Statechart Tools<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"YAKINDU Statechart Tools (SCT) provides an integrated modeling\");\n    _builder.newLine();\n    _builder.append(\"environment for the specification and development of reactive, event-driven\");\n    _builder.newLine();\n    _builder.append(\"systems based on the concept of statecharts. It is an easy to use tool that\");\n    _builder.newLine();\n    _builder.append(\"features sophisticated graphical state chart editing, validation and simulation\");\n    _builder.newLine();\n    _builder.append(\"of statecharts as well as code generation.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Tool<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>2.0.X<\/td>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<td>Axel Terfloth, Andreas M&uuml;lder, et al<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\" \");\n    _builder.append(\"<!-- \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>AMP Agent Modeling Platform<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>extensible frameworks and exemplary tools for representing,\");\n    _builder.newLine();\n    _builder.append(\"editing, generating, executing and visualizing agent-based models (ABMs) and\");\n    _builder.newLine();\n    _builder.append(\"any other domain requiring spatial, behavioral and functional features<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://www.eclipse.org/amp/<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Framework<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>1.0.0<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Metascape, LLC<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EMF Query 2<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>search and retrieval of emf model elements in a structured\");\n    _builder.newLine();\n    _builder.append(\"format with an additional advantage that resource loading is minimized during\");\n    _builder.newLine();\n    _builder.append(\"execution <\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://www.eclipse.org/modeling/emf/?project=query2<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>EPL<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>0.7.x<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>CamelSplit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Text-based DSL Editor for Camel and Eclipse<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>http://code.google.com/p/camel-extra/wiki/CamelSpit<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Language<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>?<\/td>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<td>Oisin Hurley<\/td>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"-->\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.newLine();\n    _builder.append(\"<\/tbody><tfoot><\/tfoot><\/table>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"\\t\\t\");\n    CharSequence _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options (Current Version is <a href=\\\"releasenotes_2_4.html\\\">2.4<\/a>)<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-macosx-cocoa-x86_64.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-macosx-cocoa.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-linux-gtk-x86_64.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-linux-gtk.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-win32-x86_64.zip&r=1\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-win32.zip&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t      \");\n    _builder.append(\"Xtend requires Eclipse 3.5 or higher and a Java SDK 5 or higher. Use one of the udpate sites from above to install the full SDK\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t      \");\n    _builder.append(\"into your running Eclipse. If you do not yet have an Eclipse on your machine, you can download one of the pre-packaged distributions on the right.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t      \");\n    _builder.append(\"Standalone compilation is supported as well, the simplest way to do that is using the Maven plug-in.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<section id=\\\"Update Site\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Install From Update Site<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have an Eclipse running you should install the <i>\\\"Xtend SDK\\\"<\/i>-Feature from one of the update sites listed above. To do so\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"within Eclipse choose <i>Help -&gt; Install New Software...<\/i>. In the upcoming dialog you should paste one of the update site URLS into the \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"field named <i>Work with<\/i>. Now search for the feature <e>Xtend SDK<\/e>, select it and click <i>Next<\/i> and on the next page <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/screenshot-installation.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now the features are being downloaded and installed. Eclipse will ask you for a restart when downloading and installation is done.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"Hello World\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting Started<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/java-perspective.png\\\" style=\\\"float : right; margin-left:10px;\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"When you\\'ve started Eclipse for the first time, you should see an empty workspace. Switch to the \\'Java perspective\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"if you are not already in it. Xtend integrates with Java, so you need to create a Java project to get started. In the menu choose \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>File -> New -> Java Project<\/i>. In the upcoming dialog choose any project name you want (e.g. <i>my.project<\/i>).\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"After clicking <i>Finish<\/i> Eclipse will create a fresh project with an empty source folder named <i>\\'/src\\'<\/i>. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>A first class<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/menu new xtend class.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"To create your first Xtend class select the source folder and press the right mouse button. You should find the entry \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>Xtend class<\/i> in the category <i>New &gt;<\/i>. If you don\\'t see it you might not be in the Java perspective or you need to reset the perspective. To do so right click\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"on the perspective icon on the top right and choose <i>reset<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/new class wizard.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the dialog you should give the class a name, for instance <i>HelloWorld<\/i>, and put it into some package (we chose <i>my.namespace<\/i>). Click <i>Finish<\/i> and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"an empty class will be created for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>The missing lib<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/xtend lib missing error.png\\\"  class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The newly created class will have an error marker, saying that you need to put the library on the classpath. There is a \\\"quickfix\\\" which does that for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Put the cursor on the marked location and press <i>CTRL+1<\/i> (or CMD+1 on a Mac) and select the option \\\"Add Xtend libs to the classpath\\\".\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The library is also available from maven (see below) or as an OSGi bundle from the p2 update site above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>Have fun!<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now you are ready to code. Within the class body (between the curly braces) type <i>main<i> and press <i>CTRL+space<\/i>. An empty main method will be generated for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now type in <code class=\\\"prettyprint lang-xtend\\\">println(\\'Hello World\\')<\/code>, save and run the application. To do so use the green arrow and choose <i>Run As -&gt; Java Application<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/run as java application.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html#GettingStarted\\\">Click here for the next steps and more examples.<\/a> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<section id=\\\"MavenSupport\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Maven Plug-In<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"#library\\\">runtime library<\/a> as well as a plug-in to run the compiler in a Maven build can be be obtained from\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the Maven Central Repository: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Here is the XML for the repository:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;repositories&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;repository&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;id&gt;xtend&lt;/id&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/repository&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/repositories&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;pluginRepositories&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;pluginRepository&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;id&gt;xtend&lt;/id&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/pluginRepository&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/pluginRepositories&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"And this is the XML for the plug-in:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;plugin&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;xtend-maven-plugin&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;2.4.2&lt;/version&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;goal&gt;compile&lt;/goal&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;!-- &lt;goal&gt;testCompile&lt;/goal&gt; --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!-- optionally you can configure a different target folder --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!--\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;outputDirectory&gt;xtend-gen&lt;/outputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"--&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;/execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/plugin&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"As you see the <strong>outputDirectory<\/strong> can be specified to match the default of the Eclipse plug-in (<strong>xtend-gen<\/strong>). Of course you can also change the configuration\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"in Eclipse to match the Maven default (<strong>generated-sources<\/strong>). To do so right-click on the project and select <strong>Properties<\/strong> or if you prefer a global setting choose <strong>Eclipse-&gt;Preferences<\/strong>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the category <strong>Xtend/Compiler<\/strong> enter the directory name (see screenshot). It is interpreted as a relative path to the parent of the source folder, which includes the to-be-compiled Xtend file.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"thumbnail\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/configure-compiler-in-eclipse.png\\\" alt=\\\"Configuring the compiler in Eclipse\\\" width=\\\"680\\\" height=\\\"330\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting the runtime library via Maven<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"api/2.4.0/index.html\\\">runtime library<\/a> is available from Maven Central, too: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The XML for the dependency is :\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;dependency&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;org.eclipse.xtend.lib&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;2.4.2&lt;/version&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/dependency&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21098,"modified_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    CharSequence _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options (Current Version is <a href=\\\"releasenotes_2_4.html\\\">2.4.2<\/a>)<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link = this.getLink(Download.OSX_64);\n    _builder.append(_link, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_1 = this.getLink(Download.OSX_32);\n    _builder.append(_link_1, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_2 = this.getLink(Download.LINUX_64);\n    _builder.append(_link_2, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_3 = this.getLink(Download.LINUX_32);\n    _builder.append(_link_3, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_4 = this.getLink(Download.WIN_64);\n    _builder.append(_link_4, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_5 = this.getLink(Download.WIN_32);\n    _builder.append(_link_5, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"The Xtend IDE integration requires Eclipse 3.5 or higher and a Java SDK 5 or higher. Use one of the udpate sites from above to install the full SDK\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"into your running Eclipse. If you do not yet have an Eclipse on your machine, you can download one of the pre-packaged distributions on the right.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"There are various options to compile Xtend sources. The most used way is using <a href=\\\"#MavenSupport\\\">the Maven plug-in<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"Update Site\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Install From Update Site<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have an Eclipse running you should install the <i>\\\"Xtend SDK\\\"<\/i>-Feature from one of the update sites listed above. To do so\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"within Eclipse choose <i>Help -&gt; Install New Software...<\/i>. In the upcoming dialog you should paste one of the update site URLS into the \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"field named <i>Work with<\/i>. Now search for the feature <e>Xtend SDK<\/e>, select it and click <i>Next<\/i> and on the next page <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/screenshot-installation.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now the features are being downloaded and installed. Eclipse will ask you for a restart when downloading and installation is done.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"MavenSupport\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Maven Plug-In<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"#library\\\">runtime library<\/a> as well as a plug-in to run the compiler in a Maven build can be be obtained from\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the Maven Central Repository: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"You can create a readily configured project using \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend -DarchetypeArtifactId=xtend-archetype\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you already have a project with a pom.xml, you need to add the plugin configuration:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;plugin&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;xtend-maven-plugin&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;2.4.2&lt;/version&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;goal&gt;compile&lt;/goal&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;!-- &lt;goal&gt;testCompile&lt;/goal&gt; --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/goals&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!-- optionally you can configure a different target folder --&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;!--\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"&lt;outputDirectory&gt;xtend-gen&lt;/outputDirectory&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"&lt;/configuration&gt;\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"--&gt;\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"&lt;/execution&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;/executions&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/plugin&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"As you see the <strong>outputDirectory<\/strong> can be specified to match the default of the Eclipse plug-in (<strong>xtend-gen<\/strong>). Of course you can also change the configuration\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"in Eclipse to match the Maven default (<strong>generated-sources<\/strong>). To do so right-click on the project and select <strong>Properties<\/strong> or if you prefer a global setting choose <strong>Eclipse-&gt;Preferences<\/strong>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the category <strong>Xtend/Compiler<\/strong> enter the directory name (see screenshot). It is interpreted as a relative path to the parent of the source folder, which includes the to-be-compiled Xtend file.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"thumbnail\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/configure-compiler-in-eclipse.png\\\" alt=\\\"Configuring the compiler in Eclipse\\\" width=\\\"680\\\" height=\\\"330\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting the runtime library via Maven<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The <a href=\\\"api/2.4.0/index.html\\\">runtime library<\/a> is available from Maven Central, too: <a href=\\\"http://repo.maven.apache.org/maven2\\\">http://repo.maven.apache.org/maven2<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"The XML for the dependency is :\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<pre class=\\\"prettyprint lang-xml linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"&lt;dependency&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;groupId&gt;org.eclipse.xtend&lt;/groupId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;artifactId&gt;org.eclipse.xtend.lib&lt;/artifactId&gt;\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"&lt;version&gt;2.4.2&lt;/version&gt;\");\n    _builder.newLine();\n    _builder.append(\"&lt;/dependency&gt;<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<section id=\\\"Hello World\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h2 style=\\\"padding-top: 15px;\\\">Getting Started<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/java-perspective.png\\\" style=\\\"float : right; margin-left:10px;\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"When you\\'ve started Eclipse for the first time, you should see an empty workspace. Switch to the \\'Java perspective\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"if you are not already in it. Xtend integrates with Java, so you need to create a Java project to get started. In the menu choose \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>File -> New -> Java Project<\/i>. In the upcoming dialog choose any project name you want (e.g. <i>my.project<\/i>).\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"After clicking <i>Finish<\/i> Eclipse will create a fresh project with an empty source folder named <i>\\'/src\\'<\/i>. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>A first class<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/menu new xtend class.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"To create your first Xtend class select the source folder and press the right mouse button. You should find the entry \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<i>Xtend class<\/i> in the category <i>New &gt;<\/i>. If you don\\'t see it you might not be in the Java perspective or you need to reset the perspective. To do so right click\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"on the perspective icon on the top right and choose <i>reset<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/new class wizard.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"In the dialog you should give the class a name, for instance <i>HelloWorld<\/i>, and put it into some package (we chose <i>my.namespace<\/i>). Click <i>Finish<\/i> and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"an empty class will be created for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>The missing lib<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/xtend lib missing error.png\\\"  class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The newly created class will have an error marker, saying that you need to put the library on the classpath. There is a \\\"quickfix\\\" which does that for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Put the cursor on the marked location and press <i>CTRL+1<\/i> (or CMD+1 on a Mac) and select the option \\\"Add Xtend libs to the classpath\\\".\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The library is also available from maven (see below) or as an OSGi bundle from the p2 update site above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h3>Have fun!<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now you are ready to code. Within the class body (between the curly braces) type <i>main<i> and press <i>CTRL+space<\/i>. An empty main method will be generated for you.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Now type in <code class=\\\"prettyprint lang-xtend\\\">println(\\'Hello World\\')<\/code>, save and run the application. To do so use the green arrow and choose <i>Run As -&gt; Java Application<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/run as java application.png\\\" class=\\\"image_between_p\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html#GettingStarted\\\">Click here for the next steps and more examples.<\/a> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    CharSequence _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-macosx-cocoa-x86_64.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-macosx-cocoa.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-linux-gtk-x86_64.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-linux-gtk.tar.gz&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-win32-x86_64.zip&r=1\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"http://www.eclipse.org/modeling/download.php?file=/modeling/tmf/xtext/downloads/distros/eclipse-SDK-4.2.2-Xtext-2.4.1-win32.zip&r=1\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>  Eclipse Xtext is implemented in Java, so you must have a \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<a href=\\\"http://www.oracle.com/technetwork/java/index.html\\\">Java\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"Runtime Environment<\/a> installed in order to proceed.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"There are two easy ways to get Xtext up and running. A pre-configured Eclipse distribution is available\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"which has already all the necessary plug-ins installed. Alternatively, you can install Xtext into your\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"existing Eclipse by means of the Eclipse update mechanism.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"InstallDistro\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<h2>  Install Pre-Configured Eclipse With Xtext\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<ol>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Download the distribution from above that matches your OS.<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Unzip the archive into the directory of your choice. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Windows Users should choose a directory close to the root since the zip contains a \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"deeply nested folder structure. The maximum path length on windows may not exceed 256 characters.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Launch Eclipse and select the workspace location. A workspace location is the directory for your user data\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"and project files.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/ol>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<h2>  Install Xtext From Update Site\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"If you have an Eclipse running : \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"Choose \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Help -&gt; Install New Software...\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong> from the menu bar and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Add...\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong> Insert one of the update site URLs from above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"This site aggregates all the necessary and optional components and dependencies of Xtext.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Select the <i>Xtext SDK<\/i> from the category <i>Xtext {version}<\/i> and \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"complete the wizard by clicking the <i>Next<\/i> button until you can click <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"After a quick download and a restart of Eclipse, Xtext is ready to use.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"Note: Xtext relies on the Antlr generator library. Unfortunately, we cannot provide this library on \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"the official Eclipse release update sites. Instead, Xtext will try to download it on demand. To avoid \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"this, you can manually install the feature \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>  Xtext Antlr-2.0.0\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong> from the itemis update site\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"(\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<a href=\\\"http://download.itemis.de/updates/\\\">http://download.itemis.de/updates/<\/a>). \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"The general installation procedures are not affected by this issue.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>FAQs<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span9\\\" id=\\\"faq\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"accordion\\\" id=\\\"accordion2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"Eclipse comes with a built-in update manager, that understands so called update sites.\");\n    _builder_1.newLine();\n    _builder_1.append(\"When in Eclipse open the <i>\\\"Help\\\"<\/i> menu and click on <i>\\\"Install new Software...\\\"<\/i>.\");\n    _builder_1.newLine();\n    CharSequence _faqEntry = this.faqEntry(\"What is an update site?\", _builder_1);\n    _builder.append(_faqEntry, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_2 = new StringConcatenation();\n    _builder_2.append(\"<p>Xtext is freely available under the <a href=\\\"http://www.eclipse.org/legal/epl-v10.html\\\">Eclipse Public License<\/a>.<\/p>\");\n    _builder_2.newLine();\n    _builder_2.append(\"<p>\");\n    _builder_2.newLine();\n    _builder_2.append(\"\\t\");\n    _builder_2.append(\"The license allows to use Xtext for development and even for developing and selling commercial products based on Xtext.\");\n    _builder_2.newLine();\n    _builder_2.append(\"<\/p>\");\n    _builder_2.newLine();\n    CharSequence _faqEntry_1 = this.faqEntry(\"What is the license of Xtext?\", _builder_2);\n    _builder.append(_faqEntry_1, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_3 = new StringConcatenation();\n    _builder_3.append(\"<p>Software systems built from open source components requires manpower that understands the internal dependencies of \");\n    _builder_3.newLine();\n    _builder_3.append(\"these components and can quickly and efficiently eliminate problems, should an error occur. <\/p>\");\n    _builder_3.newLine();\n    _builder_3.append(\"<p><b>itemis<\/b> is the leading consulting company for Eclipse-based development tools and is the main\");\n    _builder_3.newLine();\n    _builder_3.append(\"supporter for the Xtext project. Xtext experts are available for consulting.<\/p>\");\n    _builder_3.newLine();\n    _builder_3.append(\"See <a target=\\\"_blank\\\" href=\\\"http://xtext.itemis.com\\\">xtext.itemis.com<\/a> for more details.\");\n    _builder_3.newLine();\n    CharSequence _faqEntry_2 = this.faqEntry(\"If Xtext is open-source, how can I get professional support?\", _builder_3);\n    _builder.append(_faqEntry_2, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_4 = new StringConcatenation();\n    _builder_4.append(\"<p>If you instead prefer a downloadable updatesite or an SDK zip, \");\n    _builder_4.newLine();\n    _builder_4.append(\"please have a look at the following site : <a href=\\\"http://www.eclipse.org/modeling/tmf/downloads/\\\">http://www.eclipse.org/modeling/tmf/downloads/<\/a><\/p>\");\n    _builder_4.newLine();\n    CharSequence _faqEntry_3 = this.faqEntry(\"Can I download the update site as a zip?\", _builder_4);\n    _builder.append(_faqEntry_3, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t  \\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21099,"modified_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    CharSequence _headline = this.headline(\"Download\");\n    _builder.append(_headline, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>Download Options<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<!--table one starts-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Update Sites <span>Use Update Manager in Eclipse<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Release<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t  \");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/milestones/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Latest Milestone<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td style=\\\"text-align: center;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"rel=\\\"popover\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-content=\\\"This is an Eclipse update site URL, which you need to paste into the update manager within Eclipse!\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"data-original-title=\\\"Right-click and \\'Copy Link\\'\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"href=\\\"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/\\\" \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"has-popover btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 70%;\\\">Bleeding Edge!<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"pricing\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tfoot>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<td class=\\\"focus\\\">Full Eclipse <span>Just Download and Unzip<\/span><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link = this.getLink(Download.OSX_64);\n    _builder.append(_link, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\" style=\\\"width: 45%;\\\">OS X 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_1 = this.getLink(Download.OSX_32);\n    _builder.append(_link_1, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_2 = this.getLink(Download.LINUX_64);\n    _builder.append(_link_2, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Linux 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_3 = this.getLink(Download.LINUX_32);\n    _builder.append(_link_3, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<td style=\\\"text-align: center; white-space: nowrap;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_4 = this.getLink(Download.WIN_64);\n    _builder.append(_link_4, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width: 45%;\\\">Windows 64 Bit<\/a>&nbsp;\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"<a href=\\\"\");\n    String _link_5 = this.getLink(Download.WIN_32);\n    _builder.append(_link_5, \"\t\t\t\t\t\t    \t\");\n    _builder.append(\"\\\" \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"class=\\\"btn btn-primary btn-large\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \\t\");\n    _builder.append(\"style=\\\"width:20%;\\\">32 Bit<\/a><\/td>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"<\/tr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/tbody>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    _builder.append(\"<\/table>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h2>Installation Instructions<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>  Eclipse Xtext is implemented in Java, so you must have a \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<a href=\\\"http://www.oracle.com/technetwork/java/index.html\\\">Java\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"Runtime Environment<\/a> installed in order to proceed.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"There are two easy ways to get Xtext up and running. A pre-configured Eclipse distribution is available\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"which has already all the necessary plug-ins installed. Alternatively, you can install Xtext into your\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"existing Eclipse by means of the Eclipse update mechanism.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section id=\\\"InstallDistro\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<h2>  Install Pre-Configured Eclipse With Xtext\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<ol>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Download the distribution from above that matches your OS.<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Unzip the archive into the directory of your choice. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Windows Users should choose a directory close to the root since the zip contains a \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"deeply nested folder structure. The maximum path length on windows may not exceed 256 characters.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Launch Eclipse and select the workspace location. A workspace location is the directory for your user data\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"and project files.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/ol>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<!--  section -->\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<section style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<h2>  Install Xtext From Update Site\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"If you have an Eclipse running : \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"Choose \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Help -&gt; Install New Software...\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong> from the menu bar and\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<strong>  Add...\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/strong> Insert one of the update site URLs from above.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"This site aggregates all the necessary and optional components and dependencies of Xtext.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>Select the <i>Xtext SDK<\/i> from the category <i>Xtext {version}<\/i> and \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"complete the wizard by clicking the <i>Next<\/i> button until you can click <i>Finish<\/i>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<li>  \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t    \");\n    _builder.append(\"After a quick download and a restart of Eclipse, Xtext is ready to use.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t        \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"Note: Xtext relies on the Antlr generator library. Unfortunately, we cannot provide this library on \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"the official Eclipse release update sites. Instead, Xtext will try to download it on demand. To avoid \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"this, you can manually install the feature \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<strong>  Xtext Antlr-2.0.0\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<\/strong> from the itemis update site\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"(\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"<a href=\\\"http://download.itemis.de/updates/\\\">http://download.itemis.de/updates/<\/a>). \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t      \");\n    _builder.append(\"The general installation procedures are not affected by this issue.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t    \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>FAQs<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<hr />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span9\\\" id=\\\"faq\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"accordion\\\" id=\\\"accordion2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"Eclipse comes with a built-in update manager, that understands so called update sites.\");\n    _builder_1.newLine();\n    _builder_1.append(\"When in Eclipse open the <i>\\\"Help\\\"<\/i> menu and click on <i>\\\"Install new Software...\\\"<\/i>.\");\n    _builder_1.newLine();\n    CharSequence _faqEntry = this.faqEntry(\"What is an update site?\", _builder_1);\n    _builder.append(_faqEntry, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_2 = new StringConcatenation();\n    _builder_2.append(\"<p>Xtext is freely available under the <a href=\\\"http://www.eclipse.org/legal/epl-v10.html\\\">Eclipse Public License<\/a>.<\/p>\");\n    _builder_2.newLine();\n    _builder_2.append(\"<p>\");\n    _builder_2.newLine();\n    _builder_2.append(\"\\t\");\n    _builder_2.append(\"The license allows to use Xtext for development and even for developing and selling commercial products based on Xtext.\");\n    _builder_2.newLine();\n    _builder_2.append(\"<\/p>\");\n    _builder_2.newLine();\n    CharSequence _faqEntry_1 = this.faqEntry(\"What is the license of Xtext?\", _builder_2);\n    _builder.append(_faqEntry_1, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_3 = new StringConcatenation();\n    _builder_3.append(\"<p>Software systems built from open source components requires manpower that understands the internal dependencies of \");\n    _builder_3.newLine();\n    _builder_3.append(\"these components and can quickly and efficiently eliminate problems, should an error occur. <\/p>\");\n    _builder_3.newLine();\n    _builder_3.append(\"<p><b>itemis<\/b> is the leading consulting company for Eclipse-based development tools and is the main\");\n    _builder_3.newLine();\n    _builder_3.append(\"supporter for the Xtext project. Xtext experts are available for consulting.<\/p>\");\n    _builder_3.newLine();\n    _builder_3.append(\"See <a target=\\\"_blank\\\" href=\\\"http://xtext.itemis.com\\\">xtext.itemis.com<\/a> for more details.\");\n    _builder_3.newLine();\n    CharSequence _faqEntry_2 = this.faqEntry(\"If Xtext is open-source, how can I get professional support?\", _builder_3);\n    _builder.append(_faqEntry_2, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t    \");\n    StringConcatenation _builder_4 = new StringConcatenation();\n    _builder_4.append(\"<p>If you instead prefer a downloadable updatesite or an SDK zip, \");\n    _builder_4.newLine();\n    _builder_4.append(\"please have a look at the following site : <a href=\\\"http://www.eclipse.org/modeling/tmf/downloads/\\\">http://www.eclipse.org/modeling/tmf/downloads/<\/a><\/p>\");\n    _builder_4.newLine();\n    CharSequence _faqEntry_3 = this.faqEntry(\"Can I download the update site as a zip?\", _builder_4);\n    _builder.append(_faqEntry_3, \"\t\t\t\t    \");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t  \\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"<!--Container-->\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"<div id=\\\"header_wrapper\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\"> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"flexslider image-slider\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span5 slide\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"The Better Java\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<p>Xtend is a little language that compiles \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"into idiomatic Java source code. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"You can use any existing Java library seamlessly \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"from Xtend (and vice-versa). The compiled output is readable \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"and pretty-printed, and tends to run as fast or faster than the equivalent\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"handwritten Java code. It\\'s the <a href=\\\"http://coffeescript.org/\\\">CoffeeScript<\/a> for Java.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"download.html\\\" class=\\\"btn_download\\\"><\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html\\\" class=\\\"btn_documentation\\\"><\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"introduction\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"#\\\"><img src=\\\"images/title-screenshot.png\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"alt=\\\"Xtend Screencast\\\" style=\\\"margin:40pt;\\\"/><\/a> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"http://vimeo.com/31248257\\\"\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"data-rel=\\\"prettyPhoto\\\" title=\\\"Introduction\\\" class=\\\"zoom zoom_icon\\\"><\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"<div id=\\\"intro\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h1>Get the New Release!<\/h1>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<p style=\\\"font-family: \\'Lato\\', sans-serif; font-size: 16px; font-weight: 300; color: #fff;word-spacing: 3px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Get the new release and learn how to write efficient <a href=\\\"releasenotes_2_4.html#android_development\\\">Android applications<\/a> without the tedious boiler-plate code.<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Leverage the full power of Xtend by enhancing the compiler with <a href=\\\"documentation.html#activeAnnotations\\\">Active Annotations<\/a> a unique macro system for Java.<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Enjoy the many new IDE and language features and the much improved type inference algorithm. Read the <a href=\\\"releasenotes_2_4.html\\\">full release notes<\/a>.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"<div id=\\\"features\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_1 = new StringConcatenation();\n    _builder_1.append(\"<p>\");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"Xtend removes all the unnecessary syntactical noise: No semicolons, \");\n    _builder_1.newLine();\n    _builder_1.append(\"\\t\");\n    _builder_1.append(\"no empty parentheses, good default visibility, unmatched type inference.\");\n    _builder_1.newLine();\n    _builder_1.append(\"<\/p>\");\n    _builder_1.newLine();\n    CharSequence _entry = this.entry(\"Less Noise\", _builder_1.toString(), \n      \"images/icon-noise.png\", \n      \"\");\n    _builder.append(_entry, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_2 = new StringConcatenation();\n    _builder_2.append(\"<p>\");\n    _builder_2.newLine();\n    _builder_2.append(\"\\t\");\n    _builder_2.append(\"Learn how to enhance existing Java APIs through <a href=\\\"documentation.html#extensionMethods\\\">extension methods<\/a> and <a href=\\\"documentation.html#lambdas\\\">lambda expressions<\/a>.\");\n    _builder_2.newLine();\n    _builder_2.append(\"\\t\");\n    _builder_2.append(\"Make use of <a href=\\\"documentation.html#operators\\\">operators<\/a> where you always wanted and eleminate redundant patterns with <a href=\\\"documentation.html#active_annotations\\\">active annotations<\/a>.\");\n    _builder_2.newLine();\n    _builder_2.append(\"<\/p>\");\n    _builder_2.newLine();\n    CharSequence _entry_1 = this.entry(\"More Power\", _builder_2.toString(), \n      \"images/icon-expressive.png\", \n      \"\");\n    _builder.append(_entry_1, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_3 = new StringConcatenation();\n    _builder_3.append(\"<p>\");\n    _builder_3.newLine();\n    _builder_3.append(\"\\t\");\n    _builder_3.append(\"Unlike <strong>all<\/strong> other JVM-languages, Xtend resembles Java\\'s type system without any compromises\");\n    _builder_3.newLine();\n    _builder_3.append(\"\\t\");\n    _builder_3.append(\"or cheap short-cuts. This guarantees that <strong>you won\\'t run into any interoperability pitfalls<\/strong>. Integration with Java\");\n    _builder_3.newLine();\n    _builder_3.append(\"\\t\");\n    _builder_3.append(\"works as expected in both directions and the generated code runs as fast as or faster than hand-written Java.\");\n    _builder_3.newLine();\n    _builder_3.append(\"<\/p>\");\n    _builder_3.newLine();\n    CharSequence _entry_2 = this.entry(\"100% Java Compatible\", _builder_3.toString(), \n      \"images/icon_interop.png\", \n      \"\");\n    _builder.append(_entry_2, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_4 = new StringConcatenation();\n    _builder_4.append(\"<p>\");\n    _builder_4.newLine();\n    _builder_4.append(\"\\t\");\n    _builder_4.append(\"Static typing is not only important for early error detection but even more so for top-notch IDE support.\");\n    _builder_4.newLine();\n    _builder_4.append(\"\\t\");\n    _builder_4.append(\"To ensure a great and holistic user experience, the IDE and the language have been designed side by side. And of course\");\n    _builder_4.newLine();\n    _builder_4.append(\"\\t\");\n    _builder_4.append(\"the tools integrate tightly with the Eclipse Java IDE.\");\n    _builder_4.newLine();\n    _builder_4.append(\"<\/p>\");\n    _builder_4.newLine();\n    CharSequence _entry_3 = this.entry(\"Better Tooling\", _builder_4.toString(), \n      \"images/icon-tools.png\", \n      \"\");\n    _builder.append(_entry_3, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_5 = new StringConcatenation();\n    _builder_5.append(\"<p>\");\n    _builder_5.newLine();\n    _builder_5.append(\"\\t\");\n    _builder_5.append(\"Xtend leverages existing Java concepts and adds modern language features on top.\");\n    _builder_5.newLine();\n    _builder_5.append(\"\\t\");\n    _builder_5.append(\"Unlike other JVM-Languages like Scala, Xtend doesn\\'t add a whole new type system because this\");\n    _builder_5.newLine();\n    _builder_5.append(\"\\t\");\n    _builder_5.append(\"would cause interoperability issues and make the language harder to learn for Java developers.\");\n    _builder_5.newLine();\n    _builder_5.append(\"\\t\");\n    _builder_5.append(\"If you know Java you already know most of Xtend. \");\n    _builder_5.newLine();\n    _builder_5.append(\"<\/p>\");\n    _builder_5.newLine();\n    CharSequence _entry_4 = this.entry(\"Easy to Learn\", _builder_5.toString(), \n      \"images/icon_simple.png\", \n      \"\");\n    _builder.append(_entry_4, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\\t\");\n    StringConcatenation _builder_6 = new StringConcatenation();\n    _builder_6.append(\"<p>\");\n    _builder_6.newLine();\n    _builder_6.append(\"\\t\");\n    _builder_6.append(\"Xtend not only resembles the type system to ensure 100% interoperability, it also generates comprehensible Java source code.\");\n    _builder_6.newLine();\n    _builder_6.append(\"\\t\");\n    _builder_6.append(\"This allows to run the code on other platforms that are based on Java source code, such as GWT, and you can see how certain language\");\n    _builder_6.newLine();\n    _builder_6.append(\"\\t\");\n    _builder_6.append(\"constructs are translated to idiomatic Java.\");\n    _builder_6.newLine();\n    _builder_6.append(\"<\/p>\");\n    _builder_6.newLine();\n    CharSequence _entry_5 = this.entry(\"It\\'s Still Java\", _builder_6.toString(), \n      \"images/icon-java.png\", \n      \"\");\n    _builder.append(_entry_5, \"\t\t\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21100,"modified_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"\\t\");\n    _builder.append(\"<!--Container-->\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div id=\\\"header_wrapper\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\"> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"flexslider image-slider\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6\\\" style=\\\"margin-left:7px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h2 class=\\\"front-title\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"Java 10, today!\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>Xtend is a flexible and expressive dialect of Java, which compiles into readable Java&nbsp;5 compatible source code. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t   \");\n    _builder.append(\"You can use any existing Java library seamlessly. The compiled output is readable \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"and pretty-printed, and tends to run as fast as the equivalent\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"handwritten Java code.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>Get productive and write beautiful code with <a href=\\\"documentation.html#activeAnnotations\\\">powerful macros<\/a>, <a href=\\\"documentation.html#lambdas\\\">lambdas<\/a>, <a href=\\\"documentation.html#operators\\\">operator overloading<\/a> and many more modern language features.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"download.html\\\" class=\\\"btn_download\\\"><\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"documentation.html\\\" class=\\\"btn_documentation\\\"><\/a>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span4\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<iframe class=\\\"embedded-video\\\" src=\\\"http://player.vimeo.com/video/31248257?title=0&amp;byline=0&amp;portrait=0\\\" frameborder=\\\"0\\\" webkitAllowFullScreen mozallowfullscreen allowFullScreen><\/iframe>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"<div id=\\\"intro\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<h1>Get the New Release!<\/h1>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<p style=\\\"font-family: \\'Lato\\', sans-serif; font-size: 16px; font-weight: 300; color: #fff;word-spacing: 3px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Get the new release and learn how to write efficient <a href=\\\"releasenotes_2_4.html#android_development\\\">Android applications<\/a> without the tedious boiler-plate code.<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Leverage the full power of Xtend by enhancing the compiler with <a href=\\\"documentation.html#activeAnnotations\\\">Active Annotations<\/a> a unique macro system for Java.<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Enjoy the many new IDE and language features and the much improved type inference algorithm. Read the <a href=\\\"releasenotes_2_4.html\\\">full release notes<\/a>.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"<div id=\\\"features\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div class=\\\"container\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<div class=\\\"row\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<br />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/android_logo.png\\\" alt=\\\"Android\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>Android Development<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Xtend works great on Android, as it doesn\\'t produce additional runtime overhead.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The very thin lib and the advanced support for code generation are increasing productivity\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"while helping to keep your Android apps small.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/gwt-logo.png\\\" alt=\\\"Google Web Toolkit\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>Web Development<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"The Google Web Toolkit translates Java source code to fast Javascript code. Xtend makes typical\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"GWT programming a joy. There are many nice examples and cool enhancements <a href=\\\"https://github.com/DJCordhose/todomvc-xtend-gwt\\\">out there<\/a>.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/Java_Duke_learning.png\\\" alt=\\\"Java FX\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>Fast Learning Curve!<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"If you know Java, you will be productive with Xtend in a few hours.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Xtend is an extension to Java, so you can reuse all your knowledge about tools and libraries.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Also complicated language features like Generics remain unchanged.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/eclipse_logo.png\\\" alt=\\\"Eclipse\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>Advanced IDE Support<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Static typing is not only important for early error detection but even more so for good IDE support.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"To ensure a great and holistic user experience, Xtend\\'s IDE and language have been designed side by side. And of course\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"the tools integrate seamlessly with the Eclipse Java IDE. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/java8_logo.png\\\" alt=\\\"Java FX\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>Java 8 Ready<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Xtend works well with Java 8 APIs as it does the same kind of target typing coercion for lambdas.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"With its additional syntactical flexibility of course Xtend code looks much better than the equivalent Java 8 code.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"<a href=\\\"http://blog.efftinge.de/2012/12/java-8-vs-xtend.html\\\">Here\\'s are some examples<\/a>. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span6 float\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span2\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<img src=\\\"images/javafx_logo.jpg\\\" alt=\\\"Java FX\\\" />\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<div class=\\\"span3\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<h4>XtendFX<\/h4>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"UI programming in Java can be very tedious. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Checkout the <a href=\\\"https://github.com/svenefftinge/xtendfx\\\">XtendFX project<\/a> to see how you can get rid of\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"Java boiler plate easily. It contains some very useful <a href=\\\"http://www.eclipse.org/xtend/documentation.html#activeAnnotations\\\">active annotations<\/a> for \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"automatically generating JavaFX properties. \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence jsOnLoad() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"var feed = new google.feeds.Feed(\\\"http://xtendnews.blogspot.com/feeds/posts/default?orderby=published&foo=\\\"+new Date().getTime());\");\n    _builder.newLine();\n    _builder.append(\"feed.load(function(result) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"if (!result.error) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"var container = document.getElementById(\\\"feed\\\");\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"var html = \\'<h1>Latest News<\/h1><hr>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"for (var i = 0; i < result.feed.entries.length; i++) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var entry = result.feed.entries[i];\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var div = document.createElement(\\\"div\\\");\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"div.appendChild(document.createTextNode(entry.title));\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"container.appendChild(div);\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var stringEntry = \\'<div class=\\\"row\\\"><div class=\\\"span1\\\">&nbsp;<\/div><div class=\\\"span10\\\">\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<h2>\\'+entry.title+\\' <small>published \\'+new Date(entry.publishedDate).toDateString()+\\' by \\'+ entry.author+\\'<\/small><\/h2>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t        \\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<p>\\' + entry.content+\\'<\/p>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t        \\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<\/div><div class=\\\"span1\\\">&nbsp;<\/div><\/div>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var html = html + stringEntry\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"container.innerHTML = html\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    CharSequence _jsOnLoad = super.jsOnLoad();\n    String _string = _jsOnLoad.toString();\n    String _plus = (_builder.toString() + _string);\n    return _plus;\n  }","id":21101,"modified_method":"public CharSequence jsOnLoad() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"var feed = new google.feeds.Feed(\\\"http://xtendnews.blogspot.com/feeds/posts/default?orderby=published&foo=\\\"+new Date().getTime());\");\n    _builder.newLine();\n    _builder.append(\"feed.load(function(result) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"if (!result.error) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"var container = document.getElementById(\\\"feed\\\");\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"var html = \\'<h1>Latest News<\/h1><hr>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"for (var i = 0; i < result.feed.entries.length; i++) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var entry = result.feed.entries[i];\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var div = document.createElement(\\\"div\\\");\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"div.appendChild(document.createTextNode(entry.title));\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"container.appendChild(div);\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var stringEntry = \\'<div class=\\\"container\\\">\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<h2>\\'+entry.title+\\' <small>published \\'+new Date(entry.publishedDate).toDateString()+\\' by \\'+ entry.author+\\'<\/small><\/h2>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<hr/>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<div class=\\\"span1\\\">&nbsp;<\/div><div class=\\\"span10\\\">\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t        \\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<p>\\' + entry.content+\\'<\/p>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t        \\t\\t\\t\\t\");\n    _builder.append(\"+ \\'<\/div><div class=\\\"span1\\\">&nbsp;<\/div><\/div>\\'\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"var html = html + stringEntry\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"container.innerHTML = html\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"});\");\n    _builder.newLine();\n    CharSequence _jsOnLoad = super.jsOnLoad();\n    String _string = _jsOnLoad.toString();\n    String _plus = (_builder.toString() + _string);\n    return _plus;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"\\t\");\n    CharSequence _headline = this.headline(\"Release Notes - Version 2.4\");\n    _builder.append(_headline, \"\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<h2>Xtend 2.4 Release Notes<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"The team is proud to present a release with \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"more than <a href=\\\"https://bugs.eclipse.org/bugs/buglist.cgi?o5=anywordssubstr&f1=OP&f0=OP&resolution=FIXED&classification=Modeling&classification=Tools&f4=CP&v5=kepler&query_format=advanced&j1=OR&f3=CP&bug_status=RESOLVED&bug_status=VERIFIED&f5=flagtypes.name&component=Backlog&component=Common&component=Core&component=Releng&component=Website&component=Xtext&component=Xtext%20Backlog&product=TMF&product=Xtend&list_id=4768360\\\">300 bug fixes<\/a> and some ground breaking features.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>Table of contents<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#android_development\\\">Android Support<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\\t\");\n    _builder.append(\"<li><a href=\\\"#android_debugging\\\">Debugging<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\\t\");\n    _builder.append(\"<li><a href=\\\"#android_maven\\\">Maven Archetype<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#new_language_features\\\">New Language Features<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#active_annotations\\\">Active Annotations<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#collection_literals\\\">Collection Literals and Array Access<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#extension_values\\\">Extension Values<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#interfaces_enums_annotations\\\">Interfaces, Enumerations and Annotations<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#sam_types\\\">SAM Type Conversion<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#new_operators\\\">New Operators<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#new_ide_features\\\">New Editor Features<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#organize_imports\\\">Organize Imports<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#extract_method\\\">Extract Method and Extract Local Variable<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#suppression_followup\\\">Supression of Follow-Up Errors<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#optional_errors\\\">Optional Errors and Warnings<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#quickfixes\\\">New Quickfixes<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#content_assist\\\">Improved Content Assist<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#formatter\\\">Code Formatter<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#javadoc\\\">JavaDoc<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#copy_qualifiedname\\\">Copy Qualified Name<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"android_development\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h2>Android Support<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<p>Xtend is a great choice for Android application development because it compiles to Java source code \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"and doesn\\'t require a fat runtime library. With version 2.4 the Android support has been \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"further improved.\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h3 id=\\\"android_debugging\\\">Debugging<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"Debugging Android applications works now. Previously Xtend supported debugging through JSR-45 only, which is not supported by the \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"Dalvik VM. Now you can configure the compiler to install the debug information in a Dalvik-compatible manner.\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h3 id=\\\"android_maven\\\">Maven Archetype<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"There is also a Maven archetype to set up a working Android project easily. If you \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"have installed Maven and the Android SDK you only need the following command to \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"get started:\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend \\\\\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"-DarchetypeArtifactId=xtend-android-archetype \\\\\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"-DarchetypeCatalog=http://repo.maven.apache.org/maven2\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"new_language_features\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>New Language Features<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"The following new features have been added to the Xtend language.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h3 id=\\\"active_annotations\\\" >Active Annotations (Provisional API)<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<em>Active Annotations<\/em> let developers particpate in the translation process\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"from Xtend code to Java source code. The developer declares an annotation and a call back for the compiler where \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"the generated Java code can be customized arbitrarily. This doesn\\'t break static typing \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"or the IDE! Any changes made in an active annotation are completely reflected by the environment.\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t  \");\n    _builder.append(\"A simple example would be a JavaBeans \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"property supporting the Observer pattern. Here you need a getter and a \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"setter method for each field and also an observer list and the proper code to notify \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"them about changes. In many software systems you have hundreds of these properties. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Active Annotation allow you to define and automate the implementation of such patterns \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"and idioms at a single point and \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"let the compiler expand it on the fly. And all this based on lightweight, custom libraries. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"You do no longer have to write nor \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"read the boiler plate code anymore. <a href=\\\"documentation.html#activeAnnotations\\\">Read more...<\/a>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h3 id=\\\"collection_literals\\\">Collection Literals and Arrays<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Xtend now has literals for unmodifiable collections.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val listOfWords = #[\\\"Hello\\\", \\\"Xtend\\\"]\");\n    _builder.newLine();\n    _builder.append(\"val setOfWords  = #{\\\"Hello\\\", \\\"Xtend\\\"}\");\n    _builder.newLine();\n    _builder.append(\"val mapOfWords  = #{1->\\\"Hello\\\", 2->\\\"Xtend\\\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Collections created with a literal are immutable. The list literal can be used to natively create arrays, too. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"If the target type is an array, it will compile to an array initializer.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val String[] arrayOfWords = #[\\\"Hello\\\", \\\"Xtend\\\"]\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"In addition to literals for arrays you can now also easily access and modify arrays \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"as well as create empty arrays of any size.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val String[] arrayOfWords = newArrayOfSize(2)\");\n    _builder.newLine();\n    _builder.append(\"arrayOfWords.set(0, \\'Hello\\')\");\n    _builder.newLine();\n    _builder.append(\"arrayOfWords.set(1, \\'Xtend\\')\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"interfaces_enums_annotations\\\">Interfaces, Enums and Annotations<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Interfaces, enumerations and annotation types can now be declared directly in Xtend. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"interface Container<T> {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"def T findChild((T)=>boolean matcher)\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"enum Color {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"RED, GREEN, BLUE\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"@Retention(RetentionPolicy::RUNTIME)\");\n    _builder.newLine();\n    _builder.append(\"@Target(ElementType::TYPE)\");\n    _builder.newLine();\n    _builder.append(\"annotation DependsOn {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"Class&lt;? extends Target&gt; value\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"val version = \\\"2.4.0\\\" // type \\'String\\' inferred \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"extension_provider\\\">Extension Provider<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Extension methods allow to add new methods to existing types without modifying them. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Consider the omnipresent class <code class=\\\"prettyprint lang-java\\\">java.lang.String<\/code>.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"If you have to parse a string to a number, you could always write\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-java linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"Integer::parseInt(\\'42\\')\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>but what you actually think of is<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\'42\\'.parseInt\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>To make that possible, you simply import the class <code class=\\\"prettyprint lang-java\\\">Integer<\/code> as a static extension:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"import static extension java.lang.Integer.*\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>This enables to pass the base of the number as an argument, too:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\'2A\\'.parseInt(16)\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Extension methods are available in other language such as C# as well, but Xtend can do better.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"The new <em>Extensions Providers<\/em> render a former limitiation obsolete: In Xtend 2.4, fields, \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"parameters and local variables can provide extensions, too. <a href=\\\"documentation.html#Extension_Provider\\\">Read more...<\/a>\");\n    _builder.newLine();\n    _builder.append(\"<br><br>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"sam_types\\\">SAM Type Conversion<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Lambda expressions now work with interfaces and classes with a single abstract method \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"(SAM types). For example, the <code class=\\\"prettyprint lang-java\\\">AbstractIterator<\/code> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"from the Guava library has a single abstract method \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<code class=\\\"prettyprint lang-java\\\">computeNext()<\/code>. A lambda can be used to implement that:\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val AbstractIterator&lt;Double&gt; infiniteRandomNumbers = [| Math::random]\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"new_operators\\\">New Operators<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Some new operators have been added. In addition to the usual <code>==<\/code> and <code>!=<\/code>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"operators which map to <code>Object.equals(Object)<\/code>, the operators <code>===<\/code> and\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<code>!==<\/code> respectively can be used to test for identity equality.\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"if (myObject === otherObject) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"same objects\\\")\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Also new exclusive range operators have been introduced. In order to iterate over a list and\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"work with the index you can write:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"for (idx : 0 ..&lt; list.size) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"(\\\"+idx+\\\") \\\"+list.get(idx))\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Or if you want to iterate backwards :<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"for (idx : list.size &gt;.. 0) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"(\\\"+idx+\\\") \\\"+list.get(idx))\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"new_ide_features\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>New IDE Features<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<p>Being an Eclipse project Xtend has always been designed with IDE integration in \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"mind. The team is proud to announce that the editing support is now almost on par with \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Java\\'s and in some aspects already even better. A user recently wrote in the newsgroup:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<blockquote>\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"Tooling for Xtend is unlike any other language for the JVM after Java. The IDE support \");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"is first class. It will take years for some languages to catch up. Some never will.\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"<\/blockquote>\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"The following new IDE features improve the editing experience significantly:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<dl>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"organize_imports\\\">Organize Imports<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"With the new release we have overhauled the <em>Organize imports<\/em> action. It \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"processes all kinds of imports, asks to resolve conflicts, and shortens qualified names\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"automatically.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/organize_imports.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"extract_method\\\">Extract Method and Extract Local Variable<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"New refactorings have been added. You can now extract code into a new local variable\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/extract_local_variable.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"or into a new method.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/extract_method_refactoring.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"suppression_followup\\\">Supression of Follow-Up Errors<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"Follow-up error markers are now suppressed and errors in general are much more local, \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"so it is very easy to spot the problem immediately.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/follow_up_errors.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"optional_errors\\\">Optional Errors and Warnings<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>The severity of optional compiler errors can be configured globally as well as \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"individually for a single project. They can either be set explicitly or delegate to the equivalent\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"setting of the Java compiler.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/issue_severities.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"quickfixes\\\">More Quickfixes<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"Xtend now offers to create missing fields, methods, and types through quick fix proposals.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/quickfixes.png\\\"/> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"content_assist\\\">Improved Content Assist<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"The content assist has become much smarter. It now proposes lambda brackets if the method \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"accepts a single function and it offers hints on the parameter types when you \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"are working with overloaded methods.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/content_assist.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"formatter\\\">Formatter<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"A configurable formatter which pretty prints and indents code idiomatically is now available.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/formatter.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/formatter_preferences.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"javadoc\\\">JavaDoc<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"An Xtend editor now has validation and content assist within JavaDoc comments.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/javadoc_content_assist.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"copy_qualifiedname\\\">Copy Qualified Name<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"You can use <em>Copy Qualified Name<\/em> in the editor and the outline view to copy the name\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"of types, fields and methods into the clipboard.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/copy_qualified_name.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/dl>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/div>  \");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","id":21102,"modified_method":"public CharSequence contents() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"\\t\");\n    CharSequence _headline = this.headline(\"Release Notes - Version 2.4.2 (June 2013)\");\n    _builder.append(_headline, \"\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"<div id=\\\"page\\\">\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<div class=\\\"inner\\\">\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"container clearfix\\\">\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<h2>Xtend 2.4.2 Release Notes (June 26th, 2013)<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<hr>\");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<div class=\\\"span9\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"The team is proud to present a release with \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"more than <a href=\\\"https://bugs.eclipse.org/bugs/buglist.cgi?o5=anywordssubstr&f1=OP&f0=OP&resolution=FIXED&classification=Modeling&classification=Tools&f4=CP&v5=kepler&query_format=advanced&j1=OR&f3=CP&bug_status=RESOLVED&bug_status=VERIFIED&f5=flagtypes.name&component=Backlog&component=Common&component=Core&component=Releng&component=Website&component=Xtext&component=Xtext%20Backlog&product=TMF&product=Xtend&list_id=4768360\\\">450 bug fixes<\/a> and features.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>Table of contents<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#android_development\\\">Android Support<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\\t\");\n    _builder.append(\"<li><a href=\\\"#android_debugging\\\">Debugging<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\\t\");\n    _builder.append(\"<li><a href=\\\"#android_maven\\\">Maven Archetype<\/a>\");\n    _builder.newLine();\n    _builder.append(\"          \\t\");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#new_language_features\\\">New Language Features<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#streamlined\\\">Streamlined Syntax Changes<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#active_annotations\\\">Active Annotations<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#collection_literals\\\">Collection Literals and Array Access<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#extension_values\\\">Extension Values<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#interfaces_enums_annotations\\\">Interfaces, Enumerations and Annotations<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#sam_types\\\">SAM Type Conversion<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#new_operators\\\">New Operators<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<li><a href=\\\"#new_ide_features\\\">New Editor Features<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<ul>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#organize_imports\\\">Organize Imports<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#extract_method\\\">Extract Method and Extract Local Variable<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#suppression_followup\\\">Supression of Follow-Up Errors<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#optional_errors\\\">Optional Errors and Warnings<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#quickfixes\\\">New Quickfixes<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#content_assist\\\">Improved Content Assist<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#formatter\\\">Code Formatter<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#javadoc\\\">JavaDoc<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<li><a href=\\\"#copy_qualifiedname\\\">Copy Qualified Name<\/a>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/li>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/ul>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"android_development\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h2>Android Support<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<p>Xtend is a great choice for Android application development because it compiles to Java source code \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"and doesn\\'t require a fat runtime library. With version 2.4 the Android support has been \");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"further improved.\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h3 id=\\\"android_debugging\\\">Debugging<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"Debugging Android applications works now. Previously Xtend supported debugging through JSR-45 only, which is not supported by the \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"Dalvik VM. Now you can configure the compiler to install the debug information in a Dalvik-compatible manner.\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"          \");\n    _builder.append(\"<h3 id=\\\"android_maven\\\">Maven Archetype<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"There is also a Maven archetype to set up a working Android project easily. If you \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"have installed Maven and the Android SDK you only need the following command to \");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"get started:\");\n    _builder.newLine();\n    _builder.append(\"            \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend \\\\\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"-DarchetypeArtifactId=xtend-android-archetype \\\\\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"-DarchetypeCatalog=http://repo.maven.apache.org/maven2\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"new_language_features\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>New Language Features<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"The following new features have been added to the Xtend language.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h3 id=\\\"streamlined\\\" >Streamlined Java syntax<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \\t\");\n    _builder.append(\"In 2.4.2 we have introduced new (more Java-like) ways to access nested classes and static members. Also \");\n    _builder.newLine();\n    _builder.append(\"        \\t\");\n    _builder.append(\"type literals can be written by just using the class name.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \\t\");\n    _builder.append(\"Here is an example for a static access of the generated methods in Android\\'s ubiquitous R class:\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"R.id.edit_message \");\n    _builder.newLine();\n    _builder.append(\"// previously it was (still supported) :\");\n    _builder.newLine();\n    _builder.append(\"R$id::edit_message\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \\t\");\n    _builder.append(\"Type literals can now be written even shorter. Let\\'s say you want to filter a list by type:\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"myList.filter(MyType) \");\n    _builder.newLine();\n    _builder.append(\"// where previously you had to write (still supported) :\");\n    _builder.newLine();\n    _builder.append(\"myList.filter(typeof(MyType)\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \\t\");\n    _builder.append(\"If you use the Java syntax (e.g. <i>MyType.class<\/i>), you\\'ll get an error marker pointing you to the right syntax.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h3 id=\\\"active_annotations\\\" >Active Annotations (Provisional API)<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<em>Active Annotations<\/em> let developers particpate in the translation process\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"from Xtend code to Java source code. The developer declares an annotation and a call back for the compiler where \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"the generated Java code can be customized arbitrarily. This doesn\\'t break static typing \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"or the IDE! Any changes made in an active annotation are completely reflected by the environment.\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t  \");\n    _builder.append(\"A simple example would be a JavaBeans \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"property supporting the Observer pattern. Here you need a getter and a \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"setter method for each field and also an observer list and the proper code to notify \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"them about changes. In many software systems you have hundreds of these properties. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Active Annotation allow you to define and automate the implementation of such patterns \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"and idioms at a single point and \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"let the compiler expand it on the fly. And all this based on lightweight, custom libraries. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"You do no longer have to write nor \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"read the boiler plate code anymore. <a href=\\\"documentation.html#activeAnnotations\\\">Read more...<\/a>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h3 id=\\\"collection_literals\\\">Collection Literals and Arrays<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Xtend now has literals for unmodifiable collections.\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val listOfWords = #[\\\"Hello\\\", \\\"Xtend\\\"]\");\n    _builder.newLine();\n    _builder.append(\"val setOfWords  = #{\\\"Hello\\\", \\\"Xtend\\\"}\");\n    _builder.newLine();\n    _builder.append(\"val mapOfWords  = #{1->\\\"Hello\\\", 2->\\\"Xtend\\\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Collections created with a literal are immutable. The list literal can be used to natively create arrays, too. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"If the target type is an array, it will compile to an array initializer.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val String[] arrayOfWords = #[\\\"Hello\\\", \\\"Xtend\\\"]\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"In addition to literals for arrays you can now also easily access and modify arrays \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"as well as create empty arrays of any size.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val String[] arrayOfWords = newArrayOfSize(2)\");\n    _builder.newLine();\n    _builder.append(\"arrayOfWords.set(0, \\'Hello\\')\");\n    _builder.newLine();\n    _builder.append(\"arrayOfWords.set(1, \\'Xtend\\')\");\n    _builder.newLine();\n    _builder.append(\"<\/pre> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"interfaces_enums_annotations\\\">Interfaces, Enums and Annotations<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Interfaces, enumerations and annotation types can now be declared directly in Xtend. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"interface Container<T> {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"def T findChild((T)=>boolean matcher)\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"enum Color {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"RED, GREEN, BLUE\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"@Retention(RetentionPolicy::RUNTIME)\");\n    _builder.newLine();\n    _builder.append(\"@Target(ElementType::TYPE)\");\n    _builder.newLine();\n    _builder.append(\"annotation DependsOn {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"Class&lt;? extends Target&gt; value\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"val version = \\\"2.4.0\\\" // type \\'String\\' inferred \");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"extension_provider\\\">Extension Provider<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Extension methods allow to add new methods to existing types without modifying them. \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Consider the omnipresent class <code class=\\\"prettyprint lang-java\\\">java.lang.String<\/code>.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"If you have to parse a string to a number, you could always write\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-java linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"Integer::parseInt(\\'42\\')\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>but what you actually think of is<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\'42\\'.parseInt\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>To make that possible, you simply import the class <code class=\\\"prettyprint lang-java\\\">Integer<\/code> as a static extension:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"import static extension java.lang.Integer.*\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>This enables to pass the base of the number as an argument, too:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"\\'2A\\'.parseInt(16)\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Extension methods are available in other language such as C# as well, but Xtend can do better.\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"The new <em>Extensions Providers<\/em> render a former limitiation obsolete: In Xtend 2.4, fields, \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"parameters and local variables can provide extensions, too. <a href=\\\"documentation.html#Extension_Provider\\\">Read more...<\/a>\");\n    _builder.newLine();\n    _builder.append(\"<br><br>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"sam_types\\\">SAM Type Conversion<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Lambda expressions now work with interfaces and classes with a single abstract method \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"(SAM types). For example, the <code class=\\\"prettyprint lang-java\\\">AbstractIterator<\/code> \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"from the Guava library has a single abstract method \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<code class=\\\"prettyprint lang-java\\\">computeNext()<\/code>. A lambda can be used to implement that:\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"val AbstractIterator&lt;Double&gt; infiniteRandomNumbers = [| Math::random]\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<h3 id=\\\"new_operators\\\">New Operators<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"Some new operators have been added. In addition to the usual <code>==<\/code> and <code>!=<\/code>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"operators which map to <code>Object.equals(Object)<\/code>, the operators <code>===<\/code> and\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<code>!==<\/code> respectively can be used to test for identity equality.\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"if (myObject === otherObject) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"same objects\\\")\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Also new exclusive range operators have been introduced. In order to iterate over a list and\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"work with the index you can write:<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"for (idx : 0 ..&lt; list.size) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"(\\\"+idx+\\\") \\\"+list.get(idx))\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"Or if you want to iterate backwards :<\/p>\");\n    _builder.newLine();\n    _builder.append(\"<pre class=\\\"prettyprint lang-xtend linenums\\\">\");\n    _builder.newLine();\n    _builder.append(\"for (idx : list.size &gt;.. 0) {\");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"println(\\\"(\\\"+idx+\\\") \\\"+list.get(idx))\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"<\/pre>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<section id=\\\"new_ide_features\\\" style=\\\"padding-top: 68px; margin-top: -68px;\\\">\");\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.append(\"<h2>New IDE Features<\/h2>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<p>Being an Eclipse project Xtend has always been designed with IDE integration in \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"mind. The team is proud to announce that the editing support is now almost on par with \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"Java\\'s and in some aspects already even better. A user recently wrote in the newsgroup:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<blockquote>\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"Tooling for Xtend is unlike any other language for the JVM after Java. The IDE support \");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"is first class. It will take years for some languages to catch up. Some never will.\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"<\/blockquote>\");\n    _builder.newLine();\n    _builder.append(\"   \\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"The following new IDE features improve the editing experience significantly:\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<dl>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"organize_imports\\\">Organize Imports<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"With the new release we have overhauled the <em>Organize imports<\/em> action. It \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"processes all kinds of imports, asks to resolve conflicts, and shortens qualified names\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"automatically.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/organize_imports.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"extract_method\\\">Extract Method and Extract Local Variable<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"New refactorings have been added. You can now extract code into a new local variable\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/extract_local_variable.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"or into a new method.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/extract_method_refactoring.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"suppression_followup\\\">Supression of Follow-Up Errors<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"Follow-up error markers are now suppressed and errors in general are much more local, \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"so it is very easy to spot the problem immediately.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/follow_up_errors.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"optional_errors\\\">Optional Errors and Warnings<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>The severity of optional compiler errors can be configured globally as well as \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"individually for a single project. They can either be set explicitly or delegate to the equivalent\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"setting of the Java compiler.<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/issue_severities.png\\\"/>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"quickfixes\\\">More Quickfixes<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"Xtend now offers to create missing fields, methods, and types through quick fix proposals.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/quickfixes.png\\\"/> \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"content_assist\\\">Improved Content Assist<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"The content assist has become much smarter. It now proposes lambda brackets if the method \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"accepts a single function and it offers hints on the parameter types when you \");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"are working with overloaded methods.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/content_assist.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"formatter\\\">Formatter<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"A configurable formatter which pretty prints and indents code idiomatically is now available.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/formatter.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/formatter_preferences.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"javadoc\\\">JavaDoc<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"An Xtend editor now has validation and content assist within JavaDoc comments.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/javadoc_content_assist.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<h3 id=\\\"copy_qualifiedname\\\">Copy Qualified Name<\/h3>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"You can use <em>Copy Qualified Name<\/em> in the editor and the outline view to copy the name\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"of types, fields and methods into the clipboard.\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<\/p>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\\t\");\n    _builder.append(\"<img class=\\\"image_between_p\\\" src=\\\"images/releasenotes/copy_qualified_name.png\\\"/>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/dl>\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"<\/section>\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"        \");\n    _builder.newLine();\n    _builder.append(\"      \");\n    _builder.append(\"<\/div>  \");\n    _builder.newLine();\n    _builder.append(\"    \");\n    _builder.append(\"<div class=\\\"span1\\\">&nbsp;<\/div>  \");\n    _builder.newLine();\n    _builder.append(\"  \");\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    _builder.append(\"<\/div>\");\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"5462ea4f720db58883692933684e07167371138d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\t\t public void sawOpcode(int seen) {\n\t\tString opcodeName = OPCODE_NAMES[seen];\n\n\t\tif ((seen == INVOKESTATIC || seen == INVOKEVIRTUAL || seen == INVOKESPECIAL || seen == INVOKEINTERFACE)\n\t\t\t\t&& getSigConstantOperand().indexOf(\"Ljava/lang/Runnable;\") >= 0) {\n\t\t\tSignatureParser parser = new SignatureParser(getSigConstantOperand());\n\t\t\tint count = 0;\n\t\t\tfor(Iterator<String> i = parser.parameterSignatureIterator(); i.hasNext(); count++) {\n\t\t\t\tString parameter = i.next();\n\t\t\t\tif (parameter.equals(\"Ljava/lang/Runnable;\")) {\n\t\t\t\t\tOpcodeStack.Item item = stack.getStackItem(parser.getNumParameters() - 1 - count);\n\t\t\t\t\tif (\"Ljava/lang/Thread;\".equals(item.getSignature()))\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this,\n\t\t\t\t\t\t\t\"DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED\", NORMAL_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t.addCalledMethod(this)\n\t\t\t\t\t\t\t.addSourceLine(this));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (prevOpcode == I2L && seen == INVOKESTATIC\n\t\t\t&& getClassConstantOperand().equals(\"java/lang/Double\") && getNameConstantOperand()\n\t\t\t.equals(\"longBitsToDouble\"))\n\t\t\tbugReporter.reportBug(new BugInstance(this,\n\t\t\t\t\t\"DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addCalledMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\n\t\tif (freshRandomOnTos && seen == INVOKEVIRTUAL || freshRandomOneBelowTos  && seen == INVOKEVIRTUAL \n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\") ) {\n\t\t\tbugReporter.reportBug(new BugInstance(this,\n\t\t\t\t\t\"DMI_RANDOM_USED_ONLY_ONCE\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addCalledMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t}\n\n\t\tfreshRandomOneBelowTos = freshRandomOnTos && isRegisterLoad();\n\t\tfreshRandomOnTos = seen == INVOKESPECIAL \n\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\") \n\t\t\t\t\t&& getNameConstantOperand().equals(\"<init>\");\n\n\n\t\tif ((seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/HashMap\") && getNameConstantOperand()\n\t\t\t\t.equals(\"get\"))\n\t\t\t\t|| (seen == INVOKEINTERFACE\n\t\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Map\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"get\"))\n\t\t\t\t|| (seen == INVOKEVIRTUAL\n\t\t\t\t\t\t&& getClassConstantOperand()\n\t\t\t\t\t\t\t\t.equals(\"java/util/HashSet\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"contains\"))\n\t\t\t\t|| (seen == INVOKEINTERFACE\n\t\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Set\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"contains\"))) {\n\t\t\tOpcodeStack.Item top = stack.getStackItem(0);\n\t\t\tif (top.getSignature().equals(\"Ljava/net/URL;\"))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this,\n\t\t\t\t\t\t\"DMI_COLLECTION_OF_URLS\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\t}\n\n\n\t\tif (isEqualsObject && !reportedBadCastInEquals) {\n\t\t\tif (seen == INSTANCEOF || seen == INVOKEVIRTUAL && getNameConstantOperand().equals(\"getClass\")\n\t\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Class;\")\n\t\t\t\t\t) {\n\t\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\t\tif (item.getRegisterNumber() == 1) sawInstanceofCheck = true;\n\t\t\t} else if  (seen ==  INVOKESPECIAL && getNameConstantOperand().equals(\"equals\")\n\t\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/Object;)Z\")) {\n\t\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\t\tif (item1.getRegisterNumber() + item0.getRegisterNumber()  == 1)\n\t\t\t\t\t sawInstanceofCheck = true;\n\t\t\t} else if (seen == CHECKCAST && !sawInstanceofCheck) {\n\t\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\t\tif (item.getRegisterNumber() == 1) {\n\t\t\t\t\tif (getSizeOfSurroundingTryBlock(getPC()) == Integer.MAX_VALUE)\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS\", \n\t\t\t\t\t\t\t NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\n\t\t\t\t\treportedBadCastInEquals = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\tboolean foundVacuousComparison = false;\n\t\tif (seen ==  IF_ICMPGT || seen ==  IF_ICMPLE) {\n\t\t\tOpcodeStack.Item rhs = stack.getStackItem(0);\n\t\t\tObject rhsConstant = rhs.getConstant();\n\t\t\tif (rhsConstant instanceof Integer && ((Integer)rhsConstant).intValue() == Integer.MAX_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\t\t\tOpcodeStack.Item lhs = stack.getStackItem(1);\n\t\t\tObject lhsConstant = lhs.getConstant();\n\t\t\tif (lhsConstant instanceof Integer && ((Integer)lhsConstant).intValue() == Integer.MIN_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\n\t\t}\n\t\tif (seen ==  IF_ICMPLT || seen ==  IF_ICMPGE) {\n\t\t\tOpcodeStack.Item rhs = stack.getStackItem(0);\n\t\t\tObject rhsConstant = rhs.getConstant();\n\t\t\tif (rhsConstant instanceof Integer && ((Integer)rhsConstant).intValue() == Integer.MIN_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\t\t\tOpcodeStack.Item lhs = stack.getStackItem(1);\n\t\t\tObject lhsConstant = lhs.getConstant();\n\t\t\tif (lhsConstant instanceof Integer && ((Integer)lhsConstant).intValue() == Integer.MAX_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\n\t\t\t}\n\t\tif (foundVacuousComparison) \n\t\t\tbugReporter.reportBug(new BugInstance(this, \"INT_VACUOUS_COMPARISON\", \n\t\t\t\t\tgetBranchOffset() < 0 ? HIGH_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t.addSourceLine(this));\n\t\t}\n\n\t\tif (seen == INVOKESTATIC && \n\t\t\t\t( getClassConstantOperand().equals(\"java/lang/Math\") || getClassConstantOperand().equals(\"java/lang/StrictMath\"))\n\t\t\t\t&& getNameConstantOperand().equals(\"abs\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(I)I\")) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tint special = item0.getSpecialKind();\n\t\t\tif (special == OpcodeStack.Item.RANDOM_INT) \n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"RV_ABSOLUTE_VALUE_OF_RANDOM_INT\", \n\t\t\t\t\t\t HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\telse if (special == OpcodeStack.Item.HASHCODE_INT)\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"RV_ABSOLUTE_VALUE_OF_HASHCODE\", \n\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t}\n\n\t\ttry {\n\t\t\tint stackLoc = stackEntryThatMustBeNonnegative(seen);\n\t\t\tif (stackLoc >= 0) {\n\t\t\t\tOpcodeStack.Item tos = stack.getStackItem(stackLoc);\n\t\t\t\tswitch (tos.getSpecialKind()) {\n\t\t\t\tcase OpcodeStack.Item.HASHCODE_INT_REMAINDER:\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"RV_REM_OF_HASHCODE\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpcodeStack.Item.RANDOM_INT:\n\t\t\t\tcase OpcodeStack.Item.RANDOM_INT_REMAINDER:\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"RV_REM_OF_RANDOM_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (seen == IREM) {\n\t\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\t\tObject constant0 = item0.getConstant();\n\t\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\t\tint special = item1.getSpecialKind();\n\t\t\t\tif (constant0 instanceof Integer && ((Integer)constant0).intValue() == 1)\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"INT_BAD_REM_BY_1\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\t}\n\n\t\tif (stack.getStackDepth() >= 1 && (seen == LOOKUPSWITCH || seen == TABLESWITCH)) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tif (item0.getSpecialKind() == OpcodeStack.Item.SIGNED_BYTE) {\n\t\t\t\tint[] switchLabels = getSwitchLabels();\n\t\t\t\tint [] switchOffsets = getSwitchOffsets();\n\t\t\t\tfor(int i = 0; i < switchLabels.length; i++) {\n\t\t\t\t\tint v = switchLabels[i];\n\t\t\t\t\tif (v <= -129 || v >= 128)\n\t\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_SIGNED_BYTE\", \n\t\t\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t\t.addInt(v).describe(IntAnnotation.INT_VALUE)\n\t\t\t\t\t\t\t\t\t.addSourceLine(this, getPC() + switchOffsets[i]));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check for use of signed byte where is it assumed it can be out of the -128...127 range\n\t\tif (stack.getStackDepth() >= 2) switch (seen) {\n\t\tcase IF_ICMPEQ:\n\t\tcase IF_ICMPNE:\n\t\tcase IF_ICMPLT:\n\t\tcase IF_ICMPLE:\n\t\tcase IF_ICMPGE:\n\t\tcase IF_ICMPGT:\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\tint seen2 = seen;\n\t\t\tif (item0.getConstant() != null) {\n\t\t\t\tOpcodeStack.Item tmp = item0;\n\t\t\t\titem0 = item1;\n\t\t\t\titem1 = tmp;\n\t\t\t\tswitch(seen) {\n\t\t\t\tcase IF_ICMPLT: \n\t\t\t\t\tseen2 = IF_ICMPGT; break;\n\t\t\t\tcase IF_ICMPGE:\n\t\t\t\t\tseen2 = IF_ICMPLE; break;\n\t\t\t\tcase IF_ICMPGT: \n\t\t\t\t\tseen2 = IF_ICMPLT; break;\n\t\t\t\tcase IF_ICMPLE: \n\t\t\t\t\tseen2 = IF_ICMPGE; break;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject constant1 = item1.getConstant();\n\t\t\tif (item0.getSpecialKind() == OpcodeStack.Item.SIGNED_BYTE\n\t\t\t\t\t&& constant1 instanceof Number) {\n\t\t\t\tint v1 = ((Number)constant1).intValue();\n\t\t\t\tif (v1 <= -129 || v1 >= 128 || v1 == 127 && !(seen2 == IF_ICMPEQ || seen2 == IF_ICMPNE \n\n\t\t\t\t\t\t)) {\n\t\t\t\t\tint priority = HIGH_PRIORITY;\n\t\t\t\t\tif (v1 == 127) {\n\t\t\t\t\t\tswitch(seen2) {\n\t\t\t\t\t\tcase IF_ICMPGT: // 127 > x\n\t\t\t\t\t\t\tpriority = LOW_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPGE: // 127 >= x : always true\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLT: // 127 < x : never true\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLE: // 127 <= x \n\t\t\t\t\t\t\tpriority = LOW_PRIORITY; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (v1 == 128) {\n\t\t\t\t\t\tswitch(seen2) {\n\t\t\t\t\t\tcase IF_ICMPGT: // 128 > x\n\t\t\t\t\t\t\tpriority = NORMAL_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPGE: // 128 >= x \n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLT: // 128 < x\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLE: // 128 <= x \n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (v1 <= -129) priority = NORMAL_PRIORITY;\n\n\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_SIGNED_BYTE\", priority)\n\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t.addInt(v1).describe(IntAnnotation.INT_VALUE)\n\t\t\t\t\t\t\t\t.addSourceLine(this));\n\t\t\t\t}\n\t\t\t}\telse       if (item0.getSpecialKind() == OpcodeStack.Item.NON_NEGATIVE\n\t\t\t\t\t&& constant1 instanceof Number) {\n\t\t\t\tint v1 = ((Number)constant1).intValue();\n\t\t\t\tif (v1 < 0)  bugReporter.reportBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE\", HIGH_PRIORITY)\n\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t.addInt(v1).describe(IntAnnotation.INT_VALUE)\n\t\t\t\t\t\t\t\t.addSourceLine(this));\n\n\t\t\t}   \n\n\t\t}\n\t\tif (checkForBitIorofSignedByte && seen != I2B) {\n\t\t\t  bugReporter.reportBug(new BugInstance(this, \"BIT_IOR_OF_SIGNED_BYTE\", \n\t\t\t\t\tprevOpcode == LOR ? HIGH_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\t\t  checkForBitIorofSignedByte = false;\n\t\t} else if ((seen == IOR || seen == LOR) && stack.getStackDepth() >= 2) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\n\t\t\tint special0 = item0.getSpecialKind();\n\t\t\tint special1 = item1.getSpecialKind();\n\t\t\tif  (special0 == OpcodeStack.Item.SIGNED_BYTE  \n\t\t\t\t\t&& special1 == OpcodeStack.Item.LOW_8_BITS_CLEAR\n\t\t\t\t\t|| special0 == OpcodeStack.Item.LOW_8_BITS_CLEAR && special1 == OpcodeStack.Item.SIGNED_BYTE )\n\t\t\t\tcheckForBitIorofSignedByte = true;\n\t\t\telse checkForBitIorofSignedByte = false;\n\t\t} else checkForBitIorofSignedByte = false;\n\n\tif (prevOpcodeWasReadLine && sinceBufferedInputStreamReady >= 100 && seen == INVOKEVIRTUAL\n\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t&& getSigConstantOperand().startsWith(\"()\")) {\n\t\tString method = getNameConstantOperand();\n\t\tString sig = getSigConstantOperand();\n\t  bugReporter.reportBug(new BugInstance(this, \"NP_IMMEDIATE_DEREFERENCE_OF_READLINE\", NORMAL_PRIORITY)\n\t\t.addClassAndMethod(this)\n\t\t.addSourceLine(this));\n\t\t}\n\n\n\tif \n\t\t(seen == INVOKEVIRTUAL\n\t\t&& getClassConstantOperand().equals(\"java/io/BufferedReader\")\n\t\t&& getNameConstantOperand().equals(\"ready\")\n\t\t&& getSigConstantOperand().equals(\"()Z\"))\n\t\tsinceBufferedInputStreamReady = 0;\n\telse sinceBufferedInputStreamReady++;\n\n\tprevOpcodeWasReadLine =\n\t\t(seen == INVOKEVIRTUAL||seen == INVOKEINTERFACE)\n\t\t&& getNameConstantOperand().equals(\"readLine\")\n\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\");\n\n\t\t// System.out.println(randomNextIntState + \" \" + OPCODE_NAMES[seen] + \" \" + getMethodName());\n\tswitch(randomNextIntState) {\n\t\tcase 0:\n\t\t\tif (seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\")\n\t\t\t\t&& getNameConstantOperand().equals(\"nextDouble\")\n\t\t\t   || seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Math\")\n\t\t\t\t&& getNameConstantOperand().equals(\"random\"))\n\t\t\t  randomNextIntState = 1;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif (seen == D2I) {\n\t\t\t  bugReporter.reportBug(new BugInstance(this, \"RV_01_TO_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\t  randomNextIntState = 0;\n\t\t\t  }\n\t\t\telse if (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 2;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif (seen == I2D) randomNextIntState = 3;\n\t\t\telse if (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 0;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 0;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tif (seen == D2I) \n\t\t\t  bugReporter.reportBug(new BugInstance(this, \"DM_NEXTINT_VIA_NEXTDOUBLE\", NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\t\t\trandomNextIntState = 0;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\tif (isPublicStaticVoidMain && seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().startsWith(\"javax/swing/\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"show\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t|| getNameConstantOperand().equals(\"pack\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t|| getNameConstantOperand().equals(\"setVisible\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Z)V\")))\n\t\t\tbugReporter.reportBug(new BugInstance(this, \"SW_SWING_METHODS_INVOKED_IN_SWING_THREAD\", LOW_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addSourceLine(this));\n\n//\t\tif ((seen == INVOKEVIRTUAL)\n//\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n//\t\t\t\t&& getNameConstantOperand().equals(\"substring\")\n//\t\t\t\t&& getSigConstantOperand().equals(\"(I)Ljava/lang/String;\")\n//\t\t\t\t&& stack.getStackDepth() > 1) {\n//\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n//\t\t\tObject o = item.getConstant();\n//\t\t\tif (o != null && o instanceof Integer) {\n//\t\t\t\tint v = ((Integer) o).intValue();\n//\t\t\t\tif (v == 0)\n//\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DMI_USELESS_SUBSTRING\", NORMAL_PRIORITY)\n//\t\t\t\t\t        .addClassAndMethod(this)\n//\t\t\t\t\t        .addSourceLine(this));\n//\t\t\t}\n//\t\t}\n\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getNameConstantOperand().equals(\"isAnnotationPresent\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/Class;)Z\")\n\t\t\t\t&& stack.getStackDepth() > 0) {\n\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\tObject value = item.getConstant();\n\t\t\tif (value instanceof String) {\n\t\t\t\tString annotationClassName = (String) value;\n\t\t\t\tboolean lacksClassfileRetention \n\t\t\t\t= AnalysisContext.currentAnalysisContext().getAnnotationRetentionDatabase().lacksClassfileRetention(\n\t\t\t\t\t\tannotationClassName.replace('/','.'));\n\t\t\t\tif (lacksClassfileRetention) \n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION\",\n\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this)\n\t\t\t\t\t\t.addCalledMethod(this));\n\t\t\t}\n\n\t\t}\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getNameConstantOperand().equals(\"next\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Object;\")\n\t\t\t\t&& getMethodName().equals(\"hasNext\")\n\t\t\t\t&& getMethodSig().equals(\"()Z\")\n\t\t\t\t&& stack.getStackDepth() > 0) {\n\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DMI_CALLING_NEXT_FROM_HASNEXT\",\n\t\t\t\t\t\titem.isInitialParameter() && item.getRegisterNumber() == 0 ? NORMAL_PRIORITY : LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this)\n\t\t\t\t\t\t.addCalledMethod(this));\n\n\t\t}\n\n\n\t\tif ((seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/String;)V\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_STRING_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\tif (seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& getNameConstantOperand().equals(\"runFinalizersOnExit\")\n\t\t\t|| seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Runtime\")\n\t\t\t\t&& getNameConstantOperand().equals(\"runFinalizersOnExit\"))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_RUN_FINALIZERS_ON_EXIT\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\tif ((seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_STRING_VOID_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\tif (!isPublicStaticVoidMain && seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& getNameConstantOperand().equals(\"exit\")\n\t\t\t\t&& !getMethodName().equals(\"processWindowEvent\")\n\t\t\t\t&& !getMethodName().startsWith(\"windowClos\")\n\t\t\t\t&& getMethodName().indexOf(\"exit\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Exit\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"crash\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Crash\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"die\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Die\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"main\") == -1)\n\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_EXIT\", \n\t\t\t\tgetMethod().isStatic() ? LOW_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), \n\t\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(this));\n\t\tif (((seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\"))\n\t\t\t\t|| (seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Runtime\")))\n\t\t\t\t&& getNameConstantOperand().equals(\"gc\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t&& !getDottedClassName().startsWith(\"java.lang\")\n\t\t\t\t&& !getMethodName().startsWith(\"gc\")\n\t\t\t\t&& !getMethodName().endsWith(\"gc\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand())) {\n\t\t\t\t// System.out.println(\"Saw call to GC\");\n\t\t\t\tif (isPublicStaticVoidMain) {\n\t\t\t\t\t// System.out.println(\"Skipping GC complaint in main method\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isTestMethod(getMethod())) return;\n\t\t\t\t// Just save this report in a field; it will be flushed\n\t\t\t\t// IFF there were no calls to System.currentTimeMillis();\n\t\t\t\t// in the method.\n\t\t\t\tgcInvocationBugReport = new BugInstance(this, \"DM_GC\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this);\n\t\t\t\tgcInvocationPC = getPC();\n\t\t\t\t//System.out.println(\"GC invocation at pc \" + PC);\n\t\t\t}\n\t\tif (!isSynthetic && (seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Boolean\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& !getClassName().equals(\"java/lang/Boolean\")\n\t\t\t\t&& alreadyReported.add(getRefConstantOperand())) {\n\t\t\tint majorVersion = getThisClass().getMajor();\n\t\t\tif (majorVersion >= MAJOR_1_4)\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_BOOLEAN_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t.addSourceLine(this));\n\t\t}\n\t\tif ((seen == INVOKESTATIC)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"currentTimeMillis\")\n\t\t\t\t   || getNameConstantOperand().equals(\"nanoTime\")))\n\t\t\tsawCurrentTimeMillis = true;\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"toString\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_STRING_TOSTRING\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"toUpperCase\")\n\t\t\t\t||  getNameConstantOperand().equals(\"toLowerCase\"))\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_CONVERT_CASE\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\n\t\tif ((seen == INVOKESPECIAL) && getNameConstantOperand().equals(\"<init>\")) {\n\t\t\tString cls = getClassConstantOperand();\n\t\t\tString sig = getSigConstantOperand();\n\t\t\tif ((cls.equals(\"java/lang/Integer\") && sig.equals(\"(I)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Float\") && sig.equals(\"(F)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Double\") && sig.equals(\"(D)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Long\") && sig.equals(\"(J)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Byte\") && sig.equals(\"(B)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Character\") && sig.equals(\"(C)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Short\") && sig.equals(\"(S)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Boolean\") && sig.equals(\"(Z)V\"))) {\n\t\t\t\tprimitiveObjCtorSeen = cls;\n\t\t\t} else {\n\t\t\t\tprimitiveObjCtorSeen = null;\n\t\t\t}\n\t\t} else if ((primitiveObjCtorSeen != null)\n\t\t\t   &&  (seen == INVOKEVIRTUAL) \n\t\t\t   &&   getNameConstantOperand().equals(\"toString\")\n\t\t\t   &&   getClassConstantOperand().equals(primitiveObjCtorSeen)\n\t\t\t   &&   getSigConstantOperand().equals(\"()Ljava/lang/String;\")) {\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_BOXED_PRIMITIVE_TOSTRING\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\t\tprimitiveObjCtorSeen = null;\n\t\t}\n\t\telse\n\t\t\tprimitiveObjCtorSeen = null;\n\n\t\tif ((seen == INVOKESPECIAL) && getNameConstantOperand().equals(\"<init>\")) {\n\t\t\tctorSeen = true;\n\t\t} else if (ctorSeen \n\t\t\t\t&& (seen == INVOKEVIRTUAL) \n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Object\")\n\t\t\t\t&& getNameConstantOperand().equals(\"getClass\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Class;\")) {\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_NEW_FOR_GETCLASS\", LOW_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\tctorSeen = false;\n\t\t} else {\n\t\t\tctorSeen = false;\n\t\t}\n\n\t\tif (jdk15ChecksEnabled\n\t\t\t\t&& (seen == INVOKEVIRTUAL)\n\t\t\t\t&& isMonitorWait(getNameConstantOperand(), getSigConstantOperand())) {\n\t\t\tcheckMonitorWait();\n\t\t}\n\n\n\t\tif ((seen == INVOKESPECIAL) \n\t\t&&  getNameConstantOperand().equals(\"<init>\")\n\t\t&&  getClassConstantOperand().equals(\"java/lang/Thread\")) {\n\t\t\tString sig = getSigConstantOperand();\n\t\t\tif (sig.equals(\"()V\")\n\t\t\t||  sig.equals(\"(Ljava/lang/String;)V\")\n\t\t\t||  sig.equals(\"(Ljava/lang/ThreadGroup;Ljava/lang/String;)V\"))\n\t\t\t\tif (!getMethodName().equals(\"<init>\") || (getPC() > 20)) {\n\t\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_USELESS_THREAD\", LOW_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t.addSourceLine(this));\n\t\t\t\t}\n\t\t}\n\n\n\t} finally {\n\t\tprevOpcode = seen;\n\t}\n\t}","id":21103,"modified_method":"@Override\n\t\t public void sawOpcode(int seen) {\n\t\tString opcodeName = OPCODE_NAMES[seen];\n\n\t\tif ((seen == INVOKESTATIC || seen == INVOKEVIRTUAL || seen == INVOKESPECIAL || seen == INVOKEINTERFACE)\n\t\t\t\t&& getSigConstantOperand().indexOf(\"Ljava/lang/Runnable;\") >= 0) {\n\t\t\tSignatureParser parser = new SignatureParser(getSigConstantOperand());\n\t\t\tint count = 0;\n\t\t\tfor(Iterator<String> i = parser.parameterSignatureIterator(); i.hasNext(); count++) {\n\t\t\t\tString parameter = i.next();\n\t\t\t\tif (parameter.equals(\"Ljava/lang/Runnable;\")) {\n\t\t\t\t\tOpcodeStack.Item item = stack.getStackItem(parser.getNumParameters() - 1 - count);\n\t\t\t\t\tif (\"Ljava/lang/Thread;\".equals(item.getSignature()))\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this,\n\t\t\t\t\t\t\t\"DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED\", NORMAL_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t.addCalledMethod(this),this);\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (prevOpcode == I2L && seen == INVOKESTATIC\n\t\t\t&& getClassConstantOperand().equals(\"java/lang/Double\") && getNameConstantOperand()\n\t\t\t.equals(\"longBitsToDouble\"))\n\t\t\taccumulator.accumulateBug(new BugInstance(this,\n\t\t\t\t\t\"DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addCalledMethod(this), this);\n\t\t\t\t\t\n\n\t\tif (freshRandomOnTos && seen == INVOKEVIRTUAL || freshRandomOneBelowTos  && seen == INVOKEVIRTUAL \n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\") ) {\n\t\t\taccumulator.accumulateBug(new BugInstance(this,\n\t\t\t\t\t\"DMI_RANDOM_USED_ONLY_ONCE\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t.addCalledMethod(this), this);\n\t\t\t\t\t\n\t\t}\n\n\t\tfreshRandomOneBelowTos = freshRandomOnTos && isRegisterLoad();\n\t\tfreshRandomOnTos = seen == INVOKESPECIAL \n\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\") \n\t\t\t\t\t&& getNameConstantOperand().equals(\"<init>\");\n\n\n\t\tif ((seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/HashMap\") && getNameConstantOperand()\n\t\t\t\t.equals(\"get\"))\n\t\t\t\t|| (seen == INVOKEINTERFACE\n\t\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Map\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"get\"))\n\t\t\t\t|| (seen == INVOKEVIRTUAL\n\t\t\t\t\t\t&& getClassConstantOperand()\n\t\t\t\t\t\t\t\t.equals(\"java/util/HashSet\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"contains\"))\n\t\t\t\t|| (seen == INVOKEINTERFACE\n\t\t\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Set\") && getNameConstantOperand()\n\t\t\t\t\t\t.equals(\"contains\"))) {\n\t\t\tOpcodeStack.Item top = stack.getStackItem(0);\n\t\t\tif (top.getSignature().equals(\"Ljava/net/URL;\"))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this,\n\t\t\t\t\t\t\"DMI_COLLECTION_OF_URLS\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\t}\n\n\n\t\tif (isEqualsObject && !reportedBadCastInEquals) {\n\t\t\tif (seen == INSTANCEOF || seen == INVOKEVIRTUAL && getNameConstantOperand().equals(\"getClass\")\n\t\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Class;\")\n\t\t\t\t\t) {\n\t\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\t\tif (item.getRegisterNumber() == 1) sawInstanceofCheck = true;\n\t\t\t} else if  (seen ==  INVOKESPECIAL && getNameConstantOperand().equals(\"equals\")\n\t\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/Object;)Z\")) {\n\t\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\t\tif (item1.getRegisterNumber() + item0.getRegisterNumber()  == 1)\n\t\t\t\t\t sawInstanceofCheck = true;\n\t\t\t} else if (seen == CHECKCAST && !sawInstanceofCheck) {\n\t\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\t\tif (item.getRegisterNumber() == 1) {\n\t\t\t\t\tif (getSizeOfSurroundingTryBlock(getPC()) == Integer.MAX_VALUE)\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS\", \n\t\t\t\t\t\t\t NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\n\t\t\t\t\treportedBadCastInEquals = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\tboolean foundVacuousComparison = false;\n\t\tif (seen ==  IF_ICMPGT || seen ==  IF_ICMPLE) {\n\t\t\tOpcodeStack.Item rhs = stack.getStackItem(0);\n\t\t\tObject rhsConstant = rhs.getConstant();\n\t\t\tif (rhsConstant instanceof Integer && ((Integer)rhsConstant).intValue() == Integer.MAX_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\t\t\tOpcodeStack.Item lhs = stack.getStackItem(1);\n\t\t\tObject lhsConstant = lhs.getConstant();\n\t\t\tif (lhsConstant instanceof Integer && ((Integer)lhsConstant).intValue() == Integer.MIN_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\n\t\t}\n\t\tif (seen ==  IF_ICMPLT || seen ==  IF_ICMPGE) {\n\t\t\tOpcodeStack.Item rhs = stack.getStackItem(0);\n\t\t\tObject rhsConstant = rhs.getConstant();\n\t\t\tif (rhsConstant instanceof Integer && ((Integer)rhsConstant).intValue() == Integer.MIN_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\t\t\tOpcodeStack.Item lhs = stack.getStackItem(1);\n\t\t\tObject lhsConstant = lhs.getConstant();\n\t\t\tif (lhsConstant instanceof Integer && ((Integer)lhsConstant).intValue() == Integer.MAX_VALUE)\n\t\t\t\tfoundVacuousComparison = true;\n\n\t\t\t}\n\t\tif (foundVacuousComparison) \n\t\t\taccumulator.accumulateBug(new BugInstance(this, \"INT_VACUOUS_COMPARISON\", \n\t\t\t\t\tgetBranchOffset() < 0 ? HIGH_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\n\t\t}\n\n\t\tif (seen == INVOKESTATIC && \n\t\t\t\t( getClassConstantOperand().equals(\"java/lang/Math\") || getClassConstantOperand().equals(\"java/lang/StrictMath\"))\n\t\t\t\t&& getNameConstantOperand().equals(\"abs\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(I)I\")) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tint special = item0.getSpecialKind();\n\t\t\tif (special == OpcodeStack.Item.RANDOM_INT) \n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"RV_ABSOLUTE_VALUE_OF_RANDOM_INT\", \n\t\t\t\t\t\t HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\t\telse if (special == OpcodeStack.Item.HASHCODE_INT)\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"RV_ABSOLUTE_VALUE_OF_HASHCODE\", \n\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\t}\n\n\t\ttry {\n\t\t\tint stackLoc = stackEntryThatMustBeNonnegative(seen);\n\t\t\tif (stackLoc >= 0) {\n\t\t\t\tOpcodeStack.Item tos = stack.getStackItem(stackLoc);\n\t\t\t\tswitch (tos.getSpecialKind()) {\n\t\t\t\tcase OpcodeStack.Item.HASHCODE_INT_REMAINDER:\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"RV_REM_OF_HASHCODE\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpcodeStack.Item.RANDOM_INT:\n\t\t\t\tcase OpcodeStack.Item.RANDOM_INT_REMAINDER:\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"RV_REM_OF_RANDOM_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (seen == IREM) {\n\t\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\t\tObject constant0 = item0.getConstant();\n\t\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\t\tint special = item1.getSpecialKind();\n\t\t\t\tif (constant0 instanceof Integer && ((Integer)constant0).intValue() == 1)\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"INT_BAD_REM_BY_1\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\t\t}\n\n\t\tif (stack.getStackDepth() >= 1 && (seen == LOOKUPSWITCH || seen == TABLESWITCH)) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tif (item0.getSpecialKind() == OpcodeStack.Item.SIGNED_BYTE) {\n\t\t\t\tint[] switchLabels = getSwitchLabels();\n\t\t\t\tint [] switchOffsets = getSwitchOffsets();\n\t\t\t\tfor(int i = 0; i < switchLabels.length; i++) {\n\t\t\t\t\tint v = switchLabels[i];\n\t\t\t\t\tif (v <= -129 || v >= 128)\n\t\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_SIGNED_BYTE\", \n\t\t\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t\t.addInt(v).describe(IntAnnotation.INT_VALUE), \n\t\t\t\t\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(this,  getPC() + switchOffsets[i]));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check for use of signed byte where is it assumed it can be out of the -128...127 range\n\t\tif (stack.getStackDepth() >= 2) switch (seen) {\n\t\tcase IF_ICMPEQ:\n\t\tcase IF_ICMPNE:\n\t\tcase IF_ICMPLT:\n\t\tcase IF_ICMPLE:\n\t\tcase IF_ICMPGE:\n\t\tcase IF_ICMPGT:\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\t\t\tint seen2 = seen;\n\t\t\tif (item0.getConstant() != null) {\n\t\t\t\tOpcodeStack.Item tmp = item0;\n\t\t\t\titem0 = item1;\n\t\t\t\titem1 = tmp;\n\t\t\t\tswitch(seen) {\n\t\t\t\tcase IF_ICMPLT: \n\t\t\t\t\tseen2 = IF_ICMPGT; break;\n\t\t\t\tcase IF_ICMPGE:\n\t\t\t\t\tseen2 = IF_ICMPLE; break;\n\t\t\t\tcase IF_ICMPGT: \n\t\t\t\t\tseen2 = IF_ICMPLT; break;\n\t\t\t\tcase IF_ICMPLE: \n\t\t\t\t\tseen2 = IF_ICMPGE; break;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject constant1 = item1.getConstant();\n\t\t\tif (item0.getSpecialKind() == OpcodeStack.Item.SIGNED_BYTE\n\t\t\t\t\t&& constant1 instanceof Number) {\n\t\t\t\tint v1 = ((Number)constant1).intValue();\n\t\t\t\tif (v1 <= -129 || v1 >= 128 || v1 == 127 && !(seen2 == IF_ICMPEQ || seen2 == IF_ICMPNE \n\n\t\t\t\t\t\t)) {\n\t\t\t\t\tint priority = HIGH_PRIORITY;\n\t\t\t\t\tif (v1 == 127) {\n\t\t\t\t\t\tswitch(seen2) {\n\t\t\t\t\t\tcase IF_ICMPGT: // 127 > x\n\t\t\t\t\t\t\tpriority = LOW_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPGE: // 127 >= x : always true\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLT: // 127 < x : never true\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLE: // 127 <= x \n\t\t\t\t\t\t\tpriority = LOW_PRIORITY; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (v1 == 128) {\n\t\t\t\t\t\tswitch(seen2) {\n\t\t\t\t\t\tcase IF_ICMPGT: // 128 > x\n\t\t\t\t\t\t\tpriority = NORMAL_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPGE: // 128 >= x \n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLT: // 128 < x\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\tcase IF_ICMPLE: // 128 <= x \n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (v1 <= -129) priority = NORMAL_PRIORITY;\n\n\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_SIGNED_BYTE\", priority)\n\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t.addInt(v1).describe(IntAnnotation.INT_VALUE), this);\n\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\telse       if (item0.getSpecialKind() == OpcodeStack.Item.NON_NEGATIVE\n\t\t\t\t\t&& constant1 instanceof Number) {\n\t\t\t\tint v1 = ((Number)constant1).intValue();\n\t\t\t\tif (v1 < 0)  accumulator.accumulateBug(new BugInstance(this, \"INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE\", HIGH_PRIORITY)\n\t\t\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t\t\t.addInt(v1).describe(IntAnnotation.INT_VALUE), this);\n\t\t\t\t\t\t\t\t\n\n\t\t\t}   \n\n\t\t}\n\t\tif (checkForBitIorofSignedByte && seen != I2B) {\n\t\t\t  accumulator.accumulateBug(new BugInstance(this, \"BIT_IOR_OF_SIGNED_BYTE\", \n\t\t\t\t\tprevOpcode == LOR ? HIGH_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\t\t  checkForBitIorofSignedByte = false;\n\t\t} else if ((seen == IOR || seen == LOR) && stack.getStackDepth() >= 2) {\n\t\t\tOpcodeStack.Item item0 = stack.getStackItem(0);\n\t\t\tOpcodeStack.Item item1 = stack.getStackItem(1);\n\n\t\t\tint special0 = item0.getSpecialKind();\n\t\t\tint special1 = item1.getSpecialKind();\n\t\t\tif  (special0 == OpcodeStack.Item.SIGNED_BYTE  \n\t\t\t\t\t&& special1 == OpcodeStack.Item.LOW_8_BITS_CLEAR\n\t\t\t\t\t|| special0 == OpcodeStack.Item.LOW_8_BITS_CLEAR && special1 == OpcodeStack.Item.SIGNED_BYTE )\n\t\t\t\tcheckForBitIorofSignedByte = true;\n\t\t\telse checkForBitIorofSignedByte = false;\n\t\t} else checkForBitIorofSignedByte = false;\n\n\tif (prevOpcodeWasReadLine && sinceBufferedInputStreamReady >= 100 && seen == INVOKEVIRTUAL\n\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t&& getSigConstantOperand().startsWith(\"()\")) {\n\t\tString method = getNameConstantOperand();\n\t\tString sig = getSigConstantOperand();\n\t  accumulator.accumulateBug(new BugInstance(this, \"NP_IMMEDIATE_DEREFERENCE_OF_READLINE\", NORMAL_PRIORITY)\n\t\t.addClassAndMethod(this), this);\n\t\t}\n\n\n\tif \n\t\t(seen == INVOKEVIRTUAL\n\t\t&& getClassConstantOperand().equals(\"java/io/BufferedReader\")\n\t\t&& getNameConstantOperand().equals(\"ready\")\n\t\t&& getSigConstantOperand().equals(\"()Z\"))\n\t\tsinceBufferedInputStreamReady = 0;\n\telse sinceBufferedInputStreamReady++;\n\n\tprevOpcodeWasReadLine =\n\t\t(seen == INVOKEVIRTUAL||seen == INVOKEINTERFACE)\n\t\t&& getNameConstantOperand().equals(\"readLine\")\n\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\");\n\n\t\t// System.out.println(randomNextIntState + \" \" + OPCODE_NAMES[seen] + \" \" + getMethodName());\n\tswitch(randomNextIntState) {\n\t\tcase 0:\n\t\t\tif (seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/util/Random\")\n\t\t\t\t&& getNameConstantOperand().equals(\"nextDouble\")\n\t\t\t   || seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Math\")\n\t\t\t\t&& getNameConstantOperand().equals(\"random\"))\n\t\t\t  randomNextIntState = 1;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif (seen == D2I) {\n\t\t\t  accumulator.accumulateBug(new BugInstance(this, \"RV_01_TO_INT\", HIGH_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t  randomNextIntState = 0;\n\t\t\t  }\n\t\t\telse if (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 2;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif (seen == I2D) randomNextIntState = 3;\n\t\t\telse if (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 0;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif (seen == DMUL) randomNextIntState = 4;\n\t\t\telse randomNextIntState = 0;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tif (seen == D2I) \n\t\t\t  accumulator.accumulateBug(new BugInstance(this, \"DM_NEXTINT_VIA_NEXTDOUBLE\", NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\trandomNextIntState = 0;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\tif (isPublicStaticVoidMain && seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().startsWith(\"javax/swing/\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"show\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t|| getNameConstantOperand().equals(\"pack\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t|| getNameConstantOperand().equals(\"setVisible\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Z)V\")))\n\t\t\taccumulator.accumulateBug(new BugInstance(this, \"SW_SWING_METHODS_INVOKED_IN_SWING_THREAD\", LOW_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\n//\t\tif ((seen == INVOKEVIRTUAL)\n//\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n//\t\t\t\t&& getNameConstantOperand().equals(\"substring\")\n//\t\t\t\t&& getSigConstantOperand().equals(\"(I)Ljava/lang/String;\")\n//\t\t\t\t&& stack.getStackDepth() > 1) {\n//\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n//\t\t\tObject o = item.getConstant();\n//\t\t\tif (o != null && o instanceof Integer) {\n//\t\t\t\tint v = ((Integer) o).intValue();\n//\t\t\t\tif (v == 0)\n//\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DMI_USELESS_SUBSTRING\", NORMAL_PRIORITY)\n//\t\t\t\t\t        .addClassAndMethod(this)\n//\t\t\t\t\t        .addSourceLine(this));\n//\t\t\t}\n//\t\t}\n\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getNameConstantOperand().equals(\"isAnnotationPresent\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/Class;)Z\")\n\t\t\t\t&& stack.getStackDepth() > 0) {\n\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\t\t\tObject value = item.getConstant();\n\t\t\tif (value instanceof String) {\n\t\t\t\tString annotationClassName = (String) value;\n\t\t\t\tboolean lacksClassfileRetention \n\t\t\t\t= AnalysisContext.currentAnalysisContext().getAnnotationRetentionDatabase().lacksClassfileRetention(\n\t\t\t\t\t\tannotationClassName.replace('/','.'));\n\t\t\t\tif (lacksClassfileRetention) \n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION\",\n\t\t\t\t\t\tHIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this).addCalledMethod(this), this);\n\t\t\t\t\t\t\n\t\t\t}\n\n\t\t}\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getNameConstantOperand().equals(\"next\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Object;\")\n\t\t\t\t&& getMethodName().equals(\"hasNext\")\n\t\t\t\t&& getMethodSig().equals(\"()Z\")\n\t\t\t\t&& stack.getStackDepth() > 0) {\n\t\t\tOpcodeStack.Item item = stack.getStackItem(0);\n\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DMI_CALLING_NEXT_FROM_HASNEXT\",\n\t\t\t\t\t\titem.isInitialParameter() && item.getRegisterNumber() == 0 ? NORMAL_PRIORITY : LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addCalledMethod(this), this);\n\n\t\t}\n\n\n\t\tif ((seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& getSigConstantOperand().equals(\"(Ljava/lang/String;)V\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_STRING_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\tif (seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& getNameConstantOperand().equals(\"runFinalizersOnExit\")\n\t\t\t|| seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Runtime\")\n\t\t\t\t&& getNameConstantOperand().equals(\"runFinalizersOnExit\"))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_RUN_FINALIZERS_ON_EXIT\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\n\t\tif ((seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_STRING_VOID_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\tif (!isPublicStaticVoidMain && seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& getNameConstantOperand().equals(\"exit\")\n\t\t\t\t&& !getMethodName().equals(\"processWindowEvent\")\n\t\t\t\t&& !getMethodName().startsWith(\"windowClos\")\n\t\t\t\t&& getMethodName().indexOf(\"exit\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Exit\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"crash\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Crash\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"die\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"Die\") == -1\n\t\t\t\t&& getMethodName().indexOf(\"main\") == -1)\n\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_EXIT\", \n\t\t\t\tgetMethod().isStatic() ? LOW_PRIORITY : NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(this), \n\t\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(this));\n\t\tif (((seen == INVOKESTATIC\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\"))\n\t\t\t\t|| (seen == INVOKEVIRTUAL\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Runtime\")))\n\t\t\t\t&& getNameConstantOperand().equals(\"gc\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()V\")\n\t\t\t\t&& !getDottedClassName().startsWith(\"java.lang\")\n\t\t\t\t&& !getMethodName().startsWith(\"gc\")\n\t\t\t\t&& !getMethodName().endsWith(\"gc\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand())) {\n\t\t\t\t// System.out.println(\"Saw call to GC\");\n\t\t\t\tif (isPublicStaticVoidMain) {\n\t\t\t\t\t// System.out.println(\"Skipping GC complaint in main method\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isTestMethod(getMethod())) return;\n\t\t\t\t// Just save this report in a field; it will be flushed\n\t\t\t\t// IFF there were no calls to System.currentTimeMillis();\n\t\t\t\t// in the method.\n\t\t\t\tgcInvocationBugReport = new BugInstance(this, \"DM_GC\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this);\n\t\t\t\tgcInvocationPC = getPC();\n\t\t\t\t//System.out.println(\"GC invocation at pc \" + PC);\n\t\t\t}\n\t\tif (!isSynthetic && (seen == INVOKESPECIAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Boolean\")\n\t\t\t\t&& getNameConstantOperand().equals(\"<init>\")\n\t\t\t\t&& !getClassName().equals(\"java/lang/Boolean\")\n\t\t\t\t&& alreadyReported.add(getRefConstantOperand())) {\n\t\t\tint majorVersion = getThisClass().getMajor();\n\t\t\tif (majorVersion >= MAJOR_1_4)\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_BOOLEAN_CTOR\", NORMAL_PRIORITY)\n\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\n\t\t}\n\t\tif ((seen == INVOKESTATIC)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/System\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"currentTimeMillis\")\n\t\t\t\t   || getNameConstantOperand().equals(\"nanoTime\")))\n\t\t\tsawCurrentTimeMillis = true;\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& getNameConstantOperand().equals(\"toString\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_STRING_TOSTRING\", NORMAL_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\tif ((seen == INVOKEVIRTUAL)\n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/String\")\n\t\t\t\t&& (getNameConstantOperand().equals(\"toUpperCase\")\n\t\t\t\t||  getNameConstantOperand().equals(\"toLowerCase\"))\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/String;\"))\n\t\t\tif (alreadyReported.add(getRefConstantOperand()))\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_CONVERT_CASE\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\n\t\tif ((seen == INVOKESPECIAL) && getNameConstantOperand().equals(\"<init>\")) {\n\t\t\tString cls = getClassConstantOperand();\n\t\t\tString sig = getSigConstantOperand();\n\t\t\tif ((cls.equals(\"java/lang/Integer\") && sig.equals(\"(I)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Float\") && sig.equals(\"(F)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Double\") && sig.equals(\"(D)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Long\") && sig.equals(\"(J)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Byte\") && sig.equals(\"(B)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Character\") && sig.equals(\"(C)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Short\") && sig.equals(\"(S)V\"))\n\t\t\t||  (cls.equals(\"java/lang/Boolean\") && sig.equals(\"(Z)V\"))) {\n\t\t\t\tprimitiveObjCtorSeen = cls;\n\t\t\t} else {\n\t\t\t\tprimitiveObjCtorSeen = null;\n\t\t\t}\n\t\t} else if ((primitiveObjCtorSeen != null)\n\t\t\t   &&  (seen == INVOKEVIRTUAL) \n\t\t\t   &&   getNameConstantOperand().equals(\"toString\")\n\t\t\t   &&   getClassConstantOperand().equals(primitiveObjCtorSeen)\n\t\t\t   &&   getSigConstantOperand().equals(\"()Ljava/lang/String;\")) {\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_BOXED_PRIMITIVE_TOSTRING\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\t\tprimitiveObjCtorSeen = null;\n\t\t}\n\t\telse\n\t\t\tprimitiveObjCtorSeen = null;\n\n\t\tif ((seen == INVOKESPECIAL) && getNameConstantOperand().equals(\"<init>\")) {\n\t\t\tctorSeen = true;\n\t\t} else if (ctorSeen \n\t\t\t\t&& (seen == INVOKEVIRTUAL) \n\t\t\t\t&& getClassConstantOperand().equals(\"java/lang/Object\")\n\t\t\t\t&& getNameConstantOperand().equals(\"getClass\")\n\t\t\t\t&& getSigConstantOperand().equals(\"()Ljava/lang/Class;\")) {\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_NEW_FOR_GETCLASS\", LOW_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\tctorSeen = false;\n\t\t} else {\n\t\t\tctorSeen = false;\n\t\t}\n\n\t\tif (jdk15ChecksEnabled\n\t\t\t\t&& (seen == INVOKEVIRTUAL)\n\t\t\t\t&& isMonitorWait(getNameConstantOperand(), getSigConstantOperand())) {\n\t\t\tcheckMonitorWait();\n\t\t}\n\n\n\t\tif ((seen == INVOKESPECIAL) \n\t\t&&  getNameConstantOperand().equals(\"<init>\")\n\t\t&&  getClassConstantOperand().equals(\"java/lang/Thread\")) {\n\t\t\tString sig = getSigConstantOperand();\n\t\t\tif (sig.equals(\"()V\")\n\t\t\t||  sig.equals(\"(Ljava/lang/String;)V\")\n\t\t\t||  sig.equals(\"(Ljava/lang/ThreadGroup;Ljava/lang/String;)V\"))\n\t\t\t\tif (!getMethodName().equals(\"<init>\") || (getPC() > 20)) {\n\t\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_USELESS_THREAD\", LOW_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t}\n\n\n\t} finally {\n\t\tprevOpcode = seen;\n\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void checkMonitorWait() {\n\t\ttry {\n\t\t\tTypeDataflow typeDataflow = getClassContext().getTypeDataflow(getMethod());\n\t\t\tTypeDataflow.LocationAndFactPair pair = typeDataflow.getLocationAndFactForInstruction(getPC());\n\n\t\t\tif (pair == null)\n\t\t\t\treturn;\n\n\t\t\tType receiver = pair.frame.getInstance(\n\t\t\t\t\tpair.location.getHandle().getInstruction(),\n\t\t\t\t\tgetClassContext().getConstantPoolGen()\n\t\t\t);\n\n\t\t\tif (!(receiver instanceof ReferenceType))\n\t\t\t\treturn;\n\n\t\t\tif (Hierarchy.isSubtype((ReferenceType) receiver, CONDITION_TYPE)) {\n\t\t\t\tbugReporter.reportBug(new BugInstance(this, \"DM_MONITOR_WAIT_ON_CONDITION\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this)\n\t\t\t\t\t\t.addSourceLine(this));\n\t\t\t}\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tbugReporter.reportMissingClass(e);\n\t\t} catch (DataflowAnalysisException e) {\n\t\t\tbugReporter.logError(\"Exception caught by DumbMethods\", e);\n\t\t} catch (CFGBuilderException e) {\n\t\t\tbugReporter.logError(\"Exception caught by DumbMethods\", e);\n\t\t}\n\t}","id":21104,"modified_method":"private void checkMonitorWait() {\n\t\ttry {\n\t\t\tTypeDataflow typeDataflow = getClassContext().getTypeDataflow(getMethod());\n\t\t\tTypeDataflow.LocationAndFactPair pair = typeDataflow.getLocationAndFactForInstruction(getPC());\n\n\t\t\tif (pair == null)\n\t\t\t\treturn;\n\n\t\t\tType receiver = pair.frame.getInstance(\n\t\t\t\t\tpair.location.getHandle().getInstruction(),\n\t\t\t\t\tgetClassContext().getConstantPoolGen()\n\t\t\t);\n\n\t\t\tif (!(receiver instanceof ReferenceType))\n\t\t\t\treturn;\n\n\t\t\tif (Hierarchy.isSubtype((ReferenceType) receiver, CONDITION_TYPE)) {\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this, \"DM_MONITOR_WAIT_ON_CONDITION\", HIGH_PRIORITY)\n\t\t\t\t\t\t.addClassAndMethod(this), this);\n\t\t\t\t\t\t\n\t\t\t}\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tbugReporter.reportMissingClass(e);\n\t\t} catch (DataflowAnalysisException e) {\n\t\t\tbugReporter.logError(\"Exception caught by DumbMethods\", e);\n\t\t} catch (CFGBuilderException e) {\n\t\t\tbugReporter.logError(\"Exception caught by DumbMethods\", e);\n\t\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"@Override\n\t\t public void visitMethod(Method method) {\n\t\ttry {\n\t\t\tif (method.getCode() == null)\n\t\t\t\treturn;\n\n\t\t\tCFG cfg = classContext.getCFG(method);\n\n\t\t\tIterator<BasicBlock> bbi = cfg.blockIterator();\n\t\t\twhile (bbi.hasNext()) {\n\t\t\t\tBasicBlock bb = bbi.next();\n\n\t\t\t\tint numOutgoing = cfg.getNumOutgoingEdges(bb);\n\t\t\t\tif (numOutgoing == 2)\n\t\t\t\t\tfindIfElseDuplicates(cfg, method, bb);\n\t\t\t\telse if (numOutgoing > 2)\n\t\t\t\t\tfindSwitchDuplicates(cfg, method, bb);\n\t\t\t}\n\t\t} catch (MethodUnprofitableException mue) {\n\t\t\tif (SystemProperties.getBoolean(\"unprofitable.debug\")) // otherwise don't report\n\t\t\t\tbugReporter.logError(\"skipping unprofitable method in \" + getClass().getName());\n\t\t} catch (Exception e) {\n\t\t\tbugReporter.logError(\"Failure examining basic blocks in Duplicate Branches detector\", e);\n\t\t}\n\t}","id":21105,"modified_method":"@Override\n\t\t public void visitMethod(Method method) {\n\t\ttry {\n\t\t\tif (method.getCode() == null)\n\t\t\t\treturn;\n\n\t\t\tCFG cfg = classContext.getCFG(method);\n\n\t\t\tIterator<BasicBlock> bbi = cfg.blockIterator();\n\t\t\twhile (bbi.hasNext()) {\n\t\t\t\tBasicBlock bb = bbi.next();\n\n\t\t\t\tint numOutgoing = cfg.getNumOutgoingEdges(bb);\n\t\t\t\tif (numOutgoing == 2)\n\t\t\t\t\tfindIfElseDuplicates(cfg, method, bb);\n\t\t\t\telse if (numOutgoing > 2)\n\t\t\t\t\tfindSwitchDuplicates(cfg, method, bb);\n\t\t\t}\n\t\t} catch (MethodUnprofitableException mue) {\n\t\t\tif (SystemProperties.getBoolean(\"unprofitable.debug\")) // otherwise don't report\n\t\t\t\tbugReporter.logError(\"skipping unprofitable method in \" + getClass().getName());\n\t\t} catch (Exception e) {\n\t\t\tbugReporter.logError(\"Failure examining basic blocks in Duplicate Branches detector\", e);\n\t\t}\n\t\tif (pendingBugs.size() <= 2)\n\t\tfor(BugInstance b : pendingBugs) \n\t\t\tbugReporter.reportBug(b);\n\t\tpendingBugs.clear();\n\t\t\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void findIfElseDuplicates(CFG cfg, Method method, BasicBlock bb) {\n\t\tBasicBlock thenBB = null, elseBB = null;\n\n\t\tIterator<Edge> iei = cfg.outgoingEdgeIterator(bb);\n\t\twhile (iei.hasNext()) {\n\t\t\tEdge e = iei.next();\n\t\t\tif (e.getType() == EdgeTypes.IFCMP_EDGE) {\n\t\t\t\telseBB = e.getTarget();\n\t\t\t}\n\t\t\telse if (e.getType() == EdgeTypes.FALL_THROUGH_EDGE) {\n\t\t\t\tthenBB = e.getTarget();\n\t\t\t}\n\t\t}\n\n\t\tif ((thenBB == null) || (elseBB == null))\n\t\t\treturn;\n\t\tInstructionHandle thenStartHandle = getDeepFirstInstruction(cfg, thenBB);\n\t\tInstructionHandle elseStartHandle = getDeepFirstInstruction(cfg, elseBB);\n\t\tif ((thenStartHandle == null) || (elseStartHandle == null))\n\t\t\treturn;\n\n\t\tint thenStartPos = thenStartHandle.getPosition();\n\t\tint elseStartPos = elseStartHandle.getPosition();\n\n\t\tInstructionHandle thenFinishIns = findThenFinish(cfg, thenBB, elseStartPos);\n\t\tint thenFinishPos = thenFinishIns.getPosition();\n\n\t\tif (!(thenFinishIns.getInstruction() instanceof GotoInstruction))\n\t\t\treturn;\n\n\t\tInstructionHandle elseFinishHandle =\n\t\t\t\t((GotoInstruction) thenFinishIns.getInstruction()).getTarget();\n\t\tint elseFinishPos = elseFinishHandle.getPosition();\n\n\t\tif (thenFinishPos >= elseStartPos)\n\t\t\treturn;\n\n\t\tif ((thenFinishPos - thenStartPos) != (elseFinishPos - elseStartPos))\n\t\t\treturn;\n\n\t\tbyte[] thenBytes = getCodeBytes(method, thenStartPos, thenFinishPos);\n\t\tbyte[] elseBytes = getCodeBytes(method, elseStartPos, elseFinishPos);\n\n\t\tif (!Arrays.equals(thenBytes, elseBytes))\n\t\t\treturn;\n\n\t\t// adjust elseFinishPos to be inclusive (for source line attribution)\n\t\tInstructionHandle elseLastIns = elseFinishHandle.getPrev();\n\t\tif (elseLastIns != null) elseFinishPos = elseLastIns.getPosition();\n\n\t\tbugReporter.reportBug(new BugInstance(this, \"DB_DUPLICATE_BRANCHES\", NORMAL_PRIORITY)\n\t\t\t\t.addClass(classContext.getJavaClass())\n\t\t\t\t.addMethod(classContext.getJavaClass(), method)\n\t\t\t\t.addSourceLineRange(classContext, this, thenStartPos, thenFinishPos)\n\t\t\t\t.addSourceLineRange(classContext, this, elseStartPos, elseFinishPos));\n\t}","id":21106,"modified_method":"private void findIfElseDuplicates(CFG cfg, Method method, BasicBlock bb) {\n\t\tBasicBlock thenBB = null, elseBB = null;\n\n\t\tIterator<Edge> iei = cfg.outgoingEdgeIterator(bb);\n\t\twhile (iei.hasNext()) {\n\t\t\tEdge e = iei.next();\n\t\t\tif (e.getType() == EdgeTypes.IFCMP_EDGE) {\n\t\t\t\telseBB = e.getTarget();\n\t\t\t}\n\t\t\telse if (e.getType() == EdgeTypes.FALL_THROUGH_EDGE) {\n\t\t\t\tthenBB = e.getTarget();\n\t\t\t}\n\t\t}\n\n\t\tif ((thenBB == null) || (elseBB == null))\n\t\t\treturn;\n\t\tInstructionHandle thenStartHandle = getDeepFirstInstruction(cfg, thenBB);\n\t\tInstructionHandle elseStartHandle = getDeepFirstInstruction(cfg, elseBB);\n\t\tif ((thenStartHandle == null) || (elseStartHandle == null))\n\t\t\treturn;\n\n\t\tint thenStartPos = thenStartHandle.getPosition();\n\t\tint elseStartPos = elseStartHandle.getPosition();\n\n\t\tInstructionHandle thenFinishIns = findThenFinish(cfg, thenBB, elseStartPos);\n\t\tint thenFinishPos = thenFinishIns.getPosition();\n\n\t\tif (!(thenFinishIns.getInstruction() instanceof GotoInstruction))\n\t\t\treturn;\n\n\t\tInstructionHandle elseFinishHandle =\n\t\t\t\t((GotoInstruction) thenFinishIns.getInstruction()).getTarget();\n\t\tint elseFinishPos = elseFinishHandle.getPosition();\n\n\t\tif (thenFinishPos >= elseStartPos)\n\t\t\treturn;\n\n\t\tif ((thenFinishPos - thenStartPos) != (elseFinishPos - elseStartPos))\n\t\t\treturn;\n\n\t\tbyte[] thenBytes = getCodeBytes(method, thenStartPos, thenFinishPos);\n\t\tbyte[] elseBytes = getCodeBytes(method, elseStartPos, elseFinishPos);\n\n\t\tif (!Arrays.equals(thenBytes, elseBytes))\n\t\t\treturn;\n\n\t\t// adjust elseFinishPos to be inclusive (for source line attribution)\n\t\tInstructionHandle elseLastIns = elseFinishHandle.getPrev();\n\t\tif (elseLastIns != null) elseFinishPos = elseLastIns.getPosition();\n\n\t\tpendingBugs.add(new BugInstance(this, \"DB_DUPLICATE_BRANCHES\", NORMAL_PRIORITY)\n\t\t\t\t.addClass(classContext.getJavaClass())\n\t\t\t\t.addMethod(classContext.getJavaClass(), method)\n\t\t\t\t.addSourceLineRange(classContext, this, thenStartPos, thenFinishPos)\n\t\t\t\t.addSourceLineRange(classContext, this, elseStartPos, elseFinishPos));\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void findSwitchDuplicates(CFG cfg, Method method, BasicBlock bb) {\t\t\n\n\t\tint[] switchPos = new int[cfg.getNumOutgoingEdges(bb)+1];\n\t\tHashMap<Integer, InstructionHandle> prevHandle = new HashMap<Integer, InstructionHandle>();\n\n\t\tIterator<Edge> iei = cfg.outgoingEdgeIterator(bb);\n\t\tint idx = 0;\n\n\t\twhile (iei.hasNext()) {\n\t\t\tEdge e = iei.next();\n\t\t\tint eType = e.getType();\n\t\t\tif (eType == EdgeTypes.SWITCH_EDGE || eType == EdgeTypes.SWITCH_DEFAULT_EDGE) {\n\t\t\t\tBasicBlock target = e.getTarget();\n\t\t\t\tInstructionHandle firstIns = getDeepFirstInstruction(cfg, target);\n\t\t\t\tif (firstIns == null)\n\t\t\t\t\tcontinue; // give up on this edge\n\t\t\t\tint firstInsPosition = firstIns.getPosition();\n\t\t\t\tswitchPos[idx++] = firstInsPosition;\n\t\t\t\tInstructionHandle prevIns = firstIns.getPrev(); // prev in bytecode, not flow\n\t\t\t\tif (prevIns != null) prevHandle.put((Integer)firstInsPosition, prevIns);\n\t\t\t} else {\n\t\t\t\t// hmm, this must not be a switch statement, so give up\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (idx < 2) // need at least two edges to tango\n\t\t\treturn;\n\n\t\tArrays.sort(switchPos, 0, idx); // sort the 'idx' switch positions\n\n\t\t// compute end position of final case (ok if set to 0 or <= switchPos[idx-1])\n\t\tswitchPos[idx] = getFinalTarget(cfg, switchPos[idx-1], prevHandle.values());\n\n\t\tHashMap<BigInteger, Collection<Integer>> map = new HashMap<BigInteger,Collection<Integer>>();\n\t\tfor (int i = 0; i < idx; i++) {\n\t\t\tif (switchPos[i]+1 >= switchPos[i+1]) continue; // why the +1 on lhs?\n\n\t\t\tint endPos = switchPos[i+1];\n\t\t   InstructionHandle last = prevHandle.get((Integer)switchPos[i+1]);\n\t\t\tif (last == null) {\n\t\t\t\t// should be default case -- leave endPos as is\n\t\t\t} else if (last.getInstruction() instanceof GotoInstruction) {\n\t\t\t\tendPos = last.getPosition(); // don't store the goto\n\t\t\t} else if (last.getInstruction() instanceof ReturnInstruction) {\n\t\t\t\t// leave endPos as is (store the return instruction)\n\t\t//\t} else if (last.getInstruction() instanceof ATHROW) {\n\t\t//\t\t// leave endPos as is (store the throw instruction)\n\t\t// Don't do this since many cases may throw \"not implemented\".\n\t\t\t} else {\n\t\t\t\tif (i+2 < idx) continue; // falls through to next case, so don't store it at all\n\t\t\t\tif (i+1 < idx && switchPos[idx]!=switchPos[idx-1]) continue; // also falls through unless switch has no default case\n\t\t\t}\n\n\t\t\tBigInteger clauseAsInt = getCodeBytesAsBigInt(method, switchPos, i, endPos);\n\t\t\tupdateMap(map, i, clauseAsInt);\n\n\n\t\t}\n\t\tfor(Collection<Integer> clauses : map.values()) {\n\t\t\tif (clauses.size() > 1) {\n\t\t\t\tBugInstance bug = new BugInstance(this, \"DB_DUPLICATE_SWITCH_CLAUSES\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClass(classContext.getJavaClass())\n\t\t\t\t\t\t.addMethod(classContext.getJavaClass(), method);\n\t\t\t\tfor(int i : clauses) \n\t\t\t\t\tbug.addSourceLineRange(this.classContext, this, \n\t\t\t\t\t\t\tswitchPos[i],\n\t\t\t\t\t\t\tswitchPos[i+1]-1); // not endPos, but that's ok\n\t\t\t\tbugReporter.reportBug(bug);\n\t\t\t}\n\t\t}\n\t}","id":21107,"modified_method":"private void findSwitchDuplicates(CFG cfg, Method method, BasicBlock bb) {\t\t\n\n\t\tint[] switchPos = new int[cfg.getNumOutgoingEdges(bb)+1];\n\t\tHashMap<Integer, InstructionHandle> prevHandle = new HashMap<Integer, InstructionHandle>();\n\n\t\tIterator<Edge> iei = cfg.outgoingEdgeIterator(bb);\n\t\tint idx = 0;\n\n\t\twhile (iei.hasNext()) {\n\t\t\tEdge e = iei.next();\n\t\t\tint eType = e.getType();\n\t\t\tif (eType == EdgeTypes.SWITCH_EDGE || eType == EdgeTypes.SWITCH_DEFAULT_EDGE) {\n\t\t\t\tBasicBlock target = e.getTarget();\n\t\t\t\tInstructionHandle firstIns = getDeepFirstInstruction(cfg, target);\n\t\t\t\tif (firstIns == null)\n\t\t\t\t\tcontinue; // give up on this edge\n\t\t\t\tint firstInsPosition = firstIns.getPosition();\n\t\t\t\tswitchPos[idx++] = firstInsPosition;\n\t\t\t\tInstructionHandle prevIns = firstIns.getPrev(); // prev in bytecode, not flow\n\t\t\t\tif (prevIns != null) prevHandle.put((Integer)firstInsPosition, prevIns);\n\t\t\t} else {\n\t\t\t\t// hmm, this must not be a switch statement, so give up\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (idx < 2) // need at least two edges to tango\n\t\t\treturn;\n\n\t\tArrays.sort(switchPos, 0, idx); // sort the 'idx' switch positions\n\n\t\t// compute end position of final case (ok if set to 0 or <= switchPos[idx-1])\n\t\tswitchPos[idx] = getFinalTarget(cfg, switchPos[idx-1], prevHandle.values());\n\n\t\tHashMap<BigInteger, Collection<Integer>> map = new HashMap<BigInteger,Collection<Integer>>();\n\t\tfor (int i = 0; i < idx; i++) {\n\t\t\tif (switchPos[i]+1 >= switchPos[i+1]) continue; // why the +1 on lhs?\n\n\t\t\tint endPos = switchPos[i+1];\n\t\t   InstructionHandle last = prevHandle.get((Integer)switchPos[i+1]);\n\t\t\tif (last == null) {\n\t\t\t\t// should be default case -- leave endPos as is\n\t\t\t} else if (last.getInstruction() instanceof GotoInstruction) {\n\t\t\t\tendPos = last.getPosition(); // don't store the goto\n\t\t\t} else if (last.getInstruction() instanceof ReturnInstruction) {\n\t\t\t\t// leave endPos as is (store the return instruction)\n\t\t//\t} else if (last.getInstruction() instanceof ATHROW) {\n\t\t//\t\t// leave endPos as is (store the throw instruction)\n\t\t// Don't do this since many cases may throw \"not implemented\".\n\t\t\t} else {\n\t\t\t\tif (i+2 < idx) continue; // falls through to next case, so don't store it at all\n\t\t\t\tif (i+1 < idx && switchPos[idx]!=switchPos[idx-1]) continue; // also falls through unless switch has no default case\n\t\t\t}\n\n\t\t\tBigInteger clauseAsInt = getCodeBytesAsBigInt(method, switchPos, i, endPos);\n\t\t\tupdateMap(map, i, clauseAsInt);\n\n\n\t\t}\n\t\tfor(Collection<Integer> clauses : map.values()) {\n\t\t\tif (clauses.size() > 1) {\n\t\t\t\tBugInstance bug = new BugInstance(this, \"DB_DUPLICATE_SWITCH_CLAUSES\", LOW_PRIORITY)\n\t\t\t\t\t\t.addClass(classContext.getJavaClass())\n\t\t\t\t\t\t.addMethod(classContext.getJavaClass(), method);\n\t\t\t\tfor(int i : clauses) \n\t\t\t\t\tbug.addSourceLineRange(this.classContext, this, \n\t\t\t\t\t\t\tswitchPos[i],\n\t\t\t\t\t\t\tswitchPos[i+1]-1); // not endPos, but that's ok\n\t\t\t\tpendingBugs.add(bug);\n\t\t\t}\n\t\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"@Override\n\t\t public void visit(Code obj) {\n\t\tfound.clear();\n\t\tpriority = LOW_PRIORITY;\n\n\n\t\tstate = SAW_NOTHING;\n\n\t\tsuper.visit(obj);\n\t\tif (!found.isEmpty()) {\n\t\t\t\tBugInstance bug = new BugInstance(this, \"FE_FLOATING_POINT_EQUALITY\", priority)\n\t\t\t\t\t\t.addClassAndMethod(this);\n\n\t\t\t\tboolean first = true;\n\t\t\t\tfor(SourceLineAnnotation s : found) {\n\t\t\t\t\tbug.add(s);\n\t\t\t\t\tif (first) first = false;\n\t\t\t\t\telse bug.describe(SourceLineAnnotation.ROLE_ANOTHER_INSTANCE);\n\t\t\t\t}\n\n\t\t\t\tbugReporter.reportBug(bug);\n\n\t\t\t\tfound.clear();\n\t\t}\n\t}","id":21108,"modified_method":"@Override\n\t\t public void visit(Code obj) {\n\t\tfound.clear();\n\t\tpriority = LOW_PRIORITY;\n\n\n\t\tstate = SAW_NOTHING;\n\n\t\tsuper.visit(obj);\n\t\tbugAccumulator.reportAccumulatedBugs();\n\t\tif (!found.isEmpty()) {\n\t\t\t\tBugInstance bug = new BugInstance(this, \"FE_FLOATING_POINT_EQUALITY\", priority)\n\t\t\t\t\t\t.addClassAndMethod(this);\n\n\t\t\t\tboolean first = true;\n\t\t\t\tfor(SourceLineAnnotation s : found) {\n\t\t\t\t\tbug.add(s);\n\t\t\t\t\tif (first) first = false;\n\t\t\t\t\telse bug.describe(SourceLineAnnotation.ROLE_ANOTHER_INSTANCE);\n\t\t\t\t}\n\n\t\t\t\tbugReporter.reportBug(bug);\n\n\t\t\t\tfound.clear();\n\t\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public FindFloatEquality(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t}","id":21109,"modified_method":"public FindFloatEquality(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t\tthis.bugAccumulator = new BugAccumulator(bugReporter);\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"@Override\n\t\t public void sawOpcode(int seen) {\n\t\t\tswitch ( seen ) {\n\t\t\t\tcase FCMPG:\n\t\t\t\tcase FCMPL:\n\t\t\t\tcase DCMPG:\n\t\t\t\tcase DCMPL:\n\t\t\t\t\tif (stack.getStackDepth() >= 2) {\n\t\t\t\t\t\tOpcodeStack.Item first = stack.getStackItem(0);\n\t\t\t\t\t\tOpcodeStack.Item second = stack.getStackItem(1);\n\n\t\t\t\t\t\tNumber n1 = (Number)first.getConstant();\n\t\t\t\t\t\tNumber n2 = (Number)second.getConstant();\n\t\t\t\t\t\tif (n1 != null && Double.isNaN(n1.doubleValue())\n\t\t\t\t\t\t\t\t|| n2 != null && Double.isNaN(n2.doubleValue()) ) {\n\t\t\t\t\t\t\tBugInstance bug = new BugInstance(this, \"FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER\", HIGH_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this).addSourceLine(this);\n\t\t\t\t\t\t\tbugReporter.reportBug(bug);\n\t\t\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (first.getSpecialKind() == OpcodeStack.Item.NASTY_FLOAT_MATH && !isZero(n2)|| \n\t\t\t\t\t\t\t\tsecond.getSpecialKind() == OpcodeStack.Item.NASTY_FLOAT_MATH  && !isZero(n1) || \n\t\t\t\t\t\t\t\tfirst.getSpecialKind() == OpcodeStack.Item.FLOAT_MATH && !okValueToCompareAgainst(n2)\n\t\t\t\t\t\t\t\t|| second.getSpecialKind() == OpcodeStack.Item.FLOAT_MATH && !okValueToCompareAgainst(n1)) {\n\t\t\t\t\t\t\tif (priority != HIGH_PRIORITY) found.clear();\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t\t\t\t\tstate = SAW_COMP;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (priority == HIGH_PRIORITY) break;\n\t\t\t\t\t\t// if (first.isInitialParameter() && n2 != null) break;\n\t\t\t\t\t\t// if (second.isInitialParameter() && n1 != null) break;\n\t\t\t\t\t\tif (first.getRegisterNumber() == second.getRegisterNumber()) break;\n\t\t\t\t\t\tif (first.isInitialParameter() && second.isInitialParameter()) break;\n\t\t\t\t\t\tif (n1 != null && n2 != null) break;\n\n\t\t\t\t\t\tif (okValueToCompareAgainst(n1) || okValueToCompareAgainst(n2)) break;\n\t\t\t\t\t\tif (n1 != null && !second.isInitialParameter()  \n\t\t\t\t\t\t\t\t|| n2 != null && !first.isInitialParameter()) {\n\t\t\t\t\t\t\tif (priority == LOW_PRIORITY) found.clear();\n\t\t\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (priority == NORMAL_PRIORITY) break;\n\t\t\t\t\t\tstate = SAW_COMP;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase IFEQ:\n\t\t\t\tcase IFNE:\n\t\t\t\t\tif (state == SAW_COMP) {\n\t\t\t\t\t\tSourceLineAnnotation sourceLineAnnotation =\n\t\t\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(getClassContext(), this, getPC());\n\t\t\t\t\t\tif (sourceLineAnnotation != null) {\n\t\t\t\t\t\t\tfound.add(sourceLineAnnotation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}","id":21110,"modified_method":"@Override\n\t\t public void sawOpcode(int seen) {\n\t\t\tswitch ( seen ) {\n\t\t\t\tcase FCMPG:\n\t\t\t\tcase FCMPL:\n\t\t\t\tcase DCMPG:\n\t\t\t\tcase DCMPL:\n\t\t\t\t\tif (stack.getStackDepth() >= 2) {\n\t\t\t\t\t\tOpcodeStack.Item first = stack.getStackItem(0);\n\t\t\t\t\t\tOpcodeStack.Item second = stack.getStackItem(1);\n\n\t\t\t\t\t\tNumber n1 = (Number)first.getConstant();\n\t\t\t\t\t\tNumber n2 = (Number)second.getConstant();\n\t\t\t\t\t\tif (n1 != null && Double.isNaN(n1.doubleValue())\n\t\t\t\t\t\t\t\t|| n2 != null && Double.isNaN(n2.doubleValue()) ) {\n\t\t\t\t\t\t\tBugInstance bug = new BugInstance(this, \"FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER\", HIGH_PRIORITY)\n\t\t\t\t\t\t\t.addClassAndMethod(this);\n\t\t\t\t\t\t\tbugAccumulator.accumulateBug(bug, this);\n\t\t\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (first.getSpecialKind() == OpcodeStack.Item.NASTY_FLOAT_MATH && !isZero(n2)|| \n\t\t\t\t\t\t\t\tsecond.getSpecialKind() == OpcodeStack.Item.NASTY_FLOAT_MATH  && !isZero(n1) || \n\t\t\t\t\t\t\t\tfirst.getSpecialKind() == OpcodeStack.Item.FLOAT_MATH && !okValueToCompareAgainst(n2)\n\t\t\t\t\t\t\t\t|| second.getSpecialKind() == OpcodeStack.Item.FLOAT_MATH && !okValueToCompareAgainst(n1)) {\n\t\t\t\t\t\t\tif (priority != HIGH_PRIORITY) found.clear();\n\t\t\t\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t\t\t\t\tstate = SAW_COMP;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (priority == HIGH_PRIORITY) break;\n\t\t\t\t\t\t// if (first.isInitialParameter() && n2 != null) break;\n\t\t\t\t\t\t// if (second.isInitialParameter() && n1 != null) break;\n\t\t\t\t\t\tif (first.getRegisterNumber() == second.getRegisterNumber()) break;\n\t\t\t\t\t\tif (first.isInitialParameter() && second.isInitialParameter()) break;\n\t\t\t\t\t\tif (n1 != null && n2 != null) break;\n\n\t\t\t\t\t\tif (okValueToCompareAgainst(n1) || okValueToCompareAgainst(n2)) break;\n\t\t\t\t\t\tif (n1 != null && !second.isInitialParameter()  \n\t\t\t\t\t\t\t\t|| n2 != null && !first.isInitialParameter()) {\n\t\t\t\t\t\t\tif (priority == LOW_PRIORITY) found.clear();\n\t\t\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (priority == NORMAL_PRIORITY) break;\n\t\t\t\t\t\tstate = SAW_COMP;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase IFEQ:\n\t\t\t\tcase IFNE:\n\t\t\t\t\tif (state == SAW_COMP) {\n\t\t\t\t\t\tSourceLineAnnotation sourceLineAnnotation =\n\t\t\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(getClassContext(), this, getPC());\n\t\t\t\t\t\tif (sourceLineAnnotation != null) {\n\t\t\t\t\t\t\tfound.add(sourceLineAnnotation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void reportBug() {\n\t\tint priority = LOW_PRIORITY;\n\t\tString pattern = \"NS_NON_SHORT_CIRCUIT\";\n\n\t\tif (sawDangerOld) {\n\t\t\tif (sawNullTestVeryOld) priority = HIGH_PRIORITY;\n\t\t\tif (sawMethodCallOld || sawNumericTestVeryOld && sawArrayDangerOld)  {\n\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t\tpattern = \"NS_DANGEROUS_NON_SHORT_CIRCUIT\";\n\t\t\t}\n\t\t\telse priority = NORMAL_PRIORITY;\n\t\t}\n\n\t\tbugReporter.reportBug(new BugInstance(this, pattern,\n\t\t\t\tpriority)\n\t\t.addClassAndMethod(this).addSourceLine(this, getPC()));\n\t}","id":21111,"modified_method":"private void reportBug() {\n\t\tint priority = LOW_PRIORITY;\n\t\tString pattern = \"NS_NON_SHORT_CIRCUIT\";\n\n\t\tif (sawDangerOld) {\n\t\t\tif (sawNullTestVeryOld) priority = HIGH_PRIORITY;\n\t\t\tif (sawMethodCallOld || sawNumericTestVeryOld && sawArrayDangerOld)  {\n\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t\tpattern = \"NS_DANGEROUS_NON_SHORT_CIRCUIT\";\n\t\t\t}\n\t\t\telse priority = NORMAL_PRIORITY;\n\t\t}\n\n\t\tbugAccumulator.accumulateBug(new  BugInstance(this, pattern,priority).addClassAndMethod(this), this);\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public FindNonShortCircuit(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t}","id":21112,"modified_method":"public FindNonShortCircuit(BugReporter bugReporter) {\n\t\tthis.bugAccumulator = new BugAccumulator(bugReporter);\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"@Override\n\tpublic void inspectResult(ClassContext classContext, MethodGen methodGen, CFG cfg,\n\t\t\tDataflow<ResourceValueFrame, ResourceValueAnalysis<Lock>> dataflow, Lock resource) {\n\n\t\tJavaClass javaClass = classContext.getJavaClass();\n\n\t\tResourceValueFrame exitFrame = dataflow.getResultFact(cfg.getExit());\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"Resource value at exit: \" + exitFrame);\n\t\t}\n\t\tint exitStatus = exitFrame.getStatus();\n\n\t\tif (exitStatus == ResourceValueFrame.OPEN || exitStatus == ResourceValueFrame.OPEN_ON_EXCEPTION_PATH) {\n\t\t\tString bugType;\n\t\t\tint priority;\n\t\t\tif (exitStatus == ResourceValueFrame.OPEN) {\n\t\t\t\tbugType = \"UL_UNRELEASED_LOCK\";\n\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t} else {\n\t\t\t\tbugType = \"UL_UNRELEASED_LOCK_EXCEPTION_PATH\";\n\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t}\n\n\t\t\tString sourceFile = javaClass.getSourceFileName();\n\t\t\tbugReporter.reportBug(new BugInstance(this, bugType, priority)\n\t\t\t\t\t.addClassAndMethod(methodGen, sourceFile)\n\t\t\t\t\t.addSourceLine(classContext, methodGen, sourceFile, resource.getLocation().getHandle()));\n\t\t}\n\t}","id":21113,"modified_method":"@Override\n\tpublic void inspectResult(ClassContext classContext, MethodGen methodGen, CFG cfg,\n\t\t\tDataflow<ResourceValueFrame, ResourceValueAnalysis<Lock>> dataflow, Lock resource) {\n\n\t\tJavaClass javaClass = classContext.getJavaClass();\n\n\t\tResourceValueFrame exitFrame = dataflow.getResultFact(cfg.getExit());\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"Resource value at exit: \" + exitFrame);\n\t\t}\n\t\tint exitStatus = exitFrame.getStatus();\n\n\t\tif (exitStatus == ResourceValueFrame.OPEN || exitStatus == ResourceValueFrame.OPEN_ON_EXCEPTION_PATH) {\n\t\t\tString bugType;\n\t\t\tint priority;\n\t\t\tif (exitStatus == ResourceValueFrame.OPEN) {\n\t\t\t\tbugType = \"UL_UNRELEASED_LOCK\";\n\t\t\t\tpriority = HIGH_PRIORITY;\n\t\t\t} else {\n\t\t\t\tbugType = \"UL_UNRELEASED_LOCK_EXCEPTION_PATH\";\n\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t}\n\n\t\t\tString sourceFile = javaClass.getSourceFileName();\n\t\t\tbugAccumulator.accumulateBug(new BugInstance(this, bugType, priority)\n\t\t\t\t\t.addClassAndMethod(methodGen, sourceFile),\n\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(classContext, methodGen, sourceFile, resource.getLocation().getHandle()));\n\t\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public void visitClassContext(ClassContext classContext) {\n\n\t\tfinal JavaClass jclass = classContext.getJavaClass();\n\t\tMethod[] methodList = jclass.getMethods();\n\t\tfor (Method method : methodList) {\n\t\t\tif (method.isAbstract() || method.isNative())\n\t\t\t\tcontinue;\n\n\t\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\t\t\tif (methodGen == null)\n\t\t\t\tcontinue;\n\n\t\t\tif (DEBUG_METHOD_NAME != null && !DEBUG_METHOD_NAME.equals(method.getName()))\n\t\t\t\tcontinue;\n\n\t\t\tif (!prescreen(classContext, method))\n\t\t\t\tcontinue;\n\n\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\"----------------------------------------------------------------------\");\n\t\t\t\tSystem.out.println(\"Analyzing \" + SignatureConverter.convertMethodSignature(methodGen));\n\t\t\t\tSystem.out.println(\"----------------------------------------------------------------------\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tResourceTrackerType resourceTracker = getResourceTracker(classContext, method);\n\n\t\t\t\tResourceCollection<Resource> resourceCollection =\n\t\t\t\t\t\tbuildResourceCollection(classContext, method, resourceTracker);\n\t\t\t\tif (resourceCollection.isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tanalyzeMethod(classContext, method, resourceTracker, resourceCollection);\n\t\t\t} catch (CFGBuilderException e) {\n\t\t\t\tbugReporter.logError(\"Error analyzing method \" + method.toString(), e);\n\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t\tbugReporter.logError(\"Error analyzing method \" + method.toString(), e);\n\t\t\t}\n\t\t}\n\n\t}","id":21114,"modified_method":"public void visitClassContext(ClassContext classContext) {\n\n\t\tfinal JavaClass jclass = classContext.getJavaClass();\n\t\tMethod[] methodList = jclass.getMethods();\n\t\tfor (Method method : methodList) {\n\t\t\tif (method.isAbstract() || method.isNative())\n\t\t\t\tcontinue;\n\n\t\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\t\t\tif (methodGen == null)\n\t\t\t\tcontinue;\n\n\t\t\tif (DEBUG_METHOD_NAME != null && !DEBUG_METHOD_NAME.equals(method.getName()))\n\t\t\t\tcontinue;\n\n\t\t\tif (!prescreen(classContext, method))\n\t\t\t\tcontinue;\n\n\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\"----------------------------------------------------------------------\");\n\t\t\t\tSystem.out.println(\"Analyzing \" + SignatureConverter.convertMethodSignature(methodGen));\n\t\t\t\tSystem.out.println(\"----------------------------------------------------------------------\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tResourceTrackerType resourceTracker = getResourceTracker(classContext, method);\n\n\t\t\t\tResourceCollection<Resource> resourceCollection =\n\t\t\t\t\t\tbuildResourceCollection(classContext, method, resourceTracker);\n\t\t\t\tif (resourceCollection.isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tanalyzeMethod(classContext, method, resourceTracker, resourceCollection);\n\t\t\t} catch (CFGBuilderException e) {\n\t\t\t\tbugReporter.logError(\"Error analyzing method \" + method.toString(), e);\n\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t\tbugReporter.logError(\"Error analyzing method \" + method.toString(), e);\n\t\t\t}\n\t\t\tbugAccumulator.reportAccumulatedBugs();\n\t\t}\n\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public ResourceTrackingDetector(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t}","id":21115,"modified_method":"public ResourceTrackingDetector(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t\tthis.bugAccumulator = new BugAccumulator(bugReporter);\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public WrongMapIterator(BugReporter bugReporter) {\n\t\tthis.bugReporter = bugReporter;\n\t}","id":21116,"modified_method":"public WrongMapIterator(BugReporter bugReporter) {\n\t\tthis.bugAccumulator = new BugAccumulator(bugReporter);\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"@Override\n\tpublic void sawOpcode(int seen) {\n\t\tswitch (state)\n\t\t{\n\t\t\tcase SAW_NOTHING:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister >= 0)\n\t\t\t\t\tstate = SAW_MAP_LOAD1;\n\t\t\tbreak;\n\n\t\t\tcase SAW_MAP_LOAD1:\n\t\t\t    // Doesn't check to see if the target object is a Map\n\t\t\t\tif (((seen == INVOKEINTERFACE) || (seen == INVOKEVIRTUAL))\n\t\t\t\t&&  (\"keySet\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Set;\".equals(getSigConstantOperand()))\n\t\t\t\t// Following check solves sourceforge bug 1830576\n\t\t\t\t&&  implementsMap(getClassDescriptorOperand())) {\n\t\t\t\t\tmapRegister = loadedRegister;\n\t\t\t\t\tstate = SAW_KEYSET;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEYSET:\n\t\t\t\tkeySetRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (keySetRegister >= 0)\n\t\t\t\t\tstate = SAW_KEYSET_STORE;\n\t\t\t\telse if ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"iterator\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Iterator;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEYSET_STORE:\t\n\t\t\t\tif ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"iterator\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Iterator;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\t\telse\n\t\t\t\t\tstate = NEED_KEYSET_LOAD;\n\t\t\tbreak;\n\n\t\t\tcase NEED_KEYSET_LOAD:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == iteratorRegister)\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR:\n\t\t\t\titeratorRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (iteratorRegister >= 0)\n\t\t\t\t\tstate = SAW_ITERATOR_STORE;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR_STORE:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == iteratorRegister)\n\t\t\t\t\tstate = SAW_ITERATOR_LOAD;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR_LOAD:\n\t\t\t\tif ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"next\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/lang/Object;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_NEXT;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_ITERATOR_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_NEXT:\n\t\t\t\tif (seen == CHECKCAST)\n\t\t\t\t\tstate = SAW_CHECKCAST_ON_NEXT;\n\t\t\t\t   else {\n\t\t\t\t\t   keyRegister = getLoadStoreRegister( seen, false );\n\t\t\t\t\t   if (keyRegister >= 0)\n\t\t\t\t\t\t   state = SAW_KEY_STORE;\n\t\t\t\t\t   else\n\t\t\t\t\t\t   state = SAW_NOTHING;\n\t\t\t\t   }\n\t\t\t break;\n\n\t\t\tcase SAW_CHECKCAST_ON_NEXT:\n\t\t\t\tkeyRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (keyRegister >= 0)\n\t\t\t\t\tstate = SAW_KEY_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEY_STORE:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == mapRegister)\n\t\t\t\t\tstate = SAW_MAP_LOAD2;\n\t\t\tbreak;\n\n\t\t\tcase SAW_MAP_LOAD2:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == keyRegister)\n\t\t\t\t\tstate = SAW_KEY_LOAD;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_KEY_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEY_LOAD:\n\t\t\t\tif (((seen == INVOKEINTERFACE) || (seen == INVOKEVIRTUAL))\n\t\t\t\t&&  (\"get\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"(Ljava/lang/Object;)Ljava/lang/Object;\".equals(getSigConstantOperand()))) {\n\t\t\t\t\tMethodAnnotation ma = MethodAnnotation.fromVisitedMethod(this);\n\t\t\t\t\tbugReporter.reportBug(\n\t\t\t\t\t\tnew BugInstance(\"WMI_WRONG_MAP_ITERATOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addClass(this)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addMethod(ma)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addSourceLine(this, getPC()));\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}","id":21117,"modified_method":"@Override\n\tpublic void sawOpcode(int seen) {\n\t\tswitch (state)\n\t\t{\n\t\t\tcase SAW_NOTHING:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister >= 0)\n\t\t\t\t\tstate = SAW_MAP_LOAD1;\n\t\t\tbreak;\n\n\t\t\tcase SAW_MAP_LOAD1:\n\t\t\t    // Doesn't check to see if the target object is a Map\n\t\t\t\tif (((seen == INVOKEINTERFACE) || (seen == INVOKEVIRTUAL))\n\t\t\t\t&&  (\"keySet\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Set;\".equals(getSigConstantOperand()))\n\t\t\t\t// Following check solves sourceforge bug 1830576\n\t\t\t\t&&  implementsMap(getClassDescriptorOperand())) {\n\t\t\t\t\tmapRegister = loadedRegister;\n\t\t\t\t\tstate = SAW_KEYSET;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEYSET:\n\t\t\t\tkeySetRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (keySetRegister >= 0)\n\t\t\t\t\tstate = SAW_KEYSET_STORE;\n\t\t\t\telse if ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"iterator\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Iterator;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEYSET_STORE:\t\n\t\t\t\tif ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"iterator\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/util/Iterator;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\t\telse\n\t\t\t\t\tstate = NEED_KEYSET_LOAD;\n\t\t\tbreak;\n\n\t\t\tcase NEED_KEYSET_LOAD:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == iteratorRegister)\n\t\t\t\t\tstate = SAW_ITERATOR;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR:\n\t\t\t\titeratorRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (iteratorRegister >= 0)\n\t\t\t\t\tstate = SAW_ITERATOR_STORE;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR_STORE:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == iteratorRegister)\n\t\t\t\t\tstate = SAW_ITERATOR_LOAD;\n\t\t\tbreak;\n\n\t\t\tcase SAW_ITERATOR_LOAD:\n\t\t\t\tif ((seen == INVOKEINTERFACE)\n\t\t\t\t&&  (\"next\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"()Ljava/lang/Object;\".equals(getSigConstantOperand())))\n\t\t\t\t\tstate = SAW_NEXT;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_ITERATOR_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_NEXT:\n\t\t\t\tif (seen == CHECKCAST)\n\t\t\t\t\tstate = SAW_CHECKCAST_ON_NEXT;\n\t\t\t\t   else {\n\t\t\t\t\t   keyRegister = getLoadStoreRegister( seen, false );\n\t\t\t\t\t   if (keyRegister >= 0)\n\t\t\t\t\t\t   state = SAW_KEY_STORE;\n\t\t\t\t\t   else\n\t\t\t\t\t\t   state = SAW_NOTHING;\n\t\t\t\t   }\n\t\t\t break;\n\n\t\t\tcase SAW_CHECKCAST_ON_NEXT:\n\t\t\t\tkeyRegister = getLoadStoreRegister( seen, false );\n\t\t\t\tif (keyRegister >= 0)\n\t\t\t\t\tstate = SAW_KEY_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEY_STORE:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == mapRegister)\n\t\t\t\t\tstate = SAW_MAP_LOAD2;\n\t\t\tbreak;\n\n\t\t\tcase SAW_MAP_LOAD2:\n\t\t\t\tloadedRegister = getLoadStoreRegister( seen, true );\n\t\t\t\tif (loadedRegister == keyRegister)\n\t\t\t\t\tstate = SAW_KEY_LOAD;\n\t\t\t\telse\n\t\t\t\t\tstate = SAW_KEY_STORE;\n\t\t\tbreak;\n\n\t\t\tcase SAW_KEY_LOAD:\n\t\t\t\tif (((seen == INVOKEINTERFACE) || (seen == INVOKEVIRTUAL))\n\t\t\t\t&&  (\"get\".equals(getNameConstantOperand()))\n\t\t\t\t&&  (\"(Ljava/lang/Object;)Ljava/lang/Object;\".equals(getSigConstantOperand()))) {\n\t\t\t\t\tMethodAnnotation ma = MethodAnnotation.fromVisitedMethod(this);\n\t\t\t\t\tbugAccumulator.accumulateBug(\n\t\t\t\t\t\tnew BugInstance(\"WMI_WRONG_MAP_ITERATOR\", NORMAL_PRIORITY)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addClass(this)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addMethod(ma),this);\n\t\t\t\t\tstate = SAW_NOTHING;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}","commit_id":"596f4c667ca9e8d902687e7c6823c7c82b9d70e5","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getPrincipal(),\n                    providerParameters.getRequestedClaims(),\n                    providerParameters.getWebServiceContext(),\n                    providerParameters.getRealm()\n                );\n        }\n        if (retrievedClaims == null) {\n            return null;\n        }\n        \n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            return null;\n        }\n                \n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n        String tokenType = providerParameters.getTokenRequirements().getTokenType();\n        \n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = new AttributeBean();\n            URI name = claim.getNamespace().relativize(claim.getClaimType());\n            if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)\n                || WSConstants.SAML2_NS.equals(tokenType)) {\n                attributeBean.setQualifiedName(name.toString());\n                attributeBean.setNameFormat(claim.getNamespace().toString());\n            } else {\n                attributeBean.setSimpleName(name.toString());\n                attributeBean.setQualifiedName(claim.getNamespace().toString());\n            }\n            attributeBean.setAttributeValues(Collections.singletonList(claim.getValue()));\n            attributeList.add(attributeBean);\n        }\n        attrBean.setSamlAttributes(attributeList);\n\n        return attrBean;\n    }","id":21118,"modified_method":"public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            ClaimsParameters params = new ClaimsParameters();\n            params.setAdditionalProperties(providerParameters.getAdditionalProperties());\n            params.setAppliesToAddress(providerParameters.getAppliesToAddress());\n            params.setEncryptionProperties(providerParameters.getEncryptionProperties());\n            params.setKeyRequirements(providerParameters.getKeyRequirements());\n            params.setPrincipal(providerParameters.getPrincipal());\n            params.setRealm(providerParameters.getRealm());\n            params.setStsProperties(providerParameters.getStsProperties());\n            params.setTokenRequirements(providerParameters.getTokenRequirements());\n            params.setTokenStore(providerParameters.getTokenStore());\n            params.setWebServiceContext(providerParameters.getWebServiceContext());\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getRequestedClaims(),\n                    params\n                );\n        }\n        if (retrievedClaims == null) {\n            return null;\n        }\n        \n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            return null;\n        }\n                \n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n        String tokenType = providerParameters.getTokenRequirements().getTokenType();\n        \n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = new AttributeBean();\n            URI name = claim.getNamespace().relativize(claim.getClaimType());\n            if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)\n                || WSConstants.SAML2_NS.equals(tokenType)) {\n                attributeBean.setQualifiedName(name.toString());\n                attributeBean.setNameFormat(claim.getNamespace().toString());\n            } else {\n                attributeBean.setSimpleName(name.toString());\n                attributeBean.setQualifiedName(claim.getNamespace().toString());\n            }\n            attributeBean.setAttributeValues(Collections.singletonList(claim.getValue()));\n            attributeList.add(attributeBean);\n        }\n        attrBean.setSamlAttributes(attributeList);\n\n        return attrBean;\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        if (claimHandlers != null && claimHandlers.size() > 0 && claims != null && claims.size() > 0) {\n            ClaimCollection returnCollection = new ClaimCollection();\n            for (ClaimsHandler handler : claimHandlers) {\n                ClaimCollection claimCollection = handler.retrieveClaimValues(\n                        principal, claims, context, realm);\n                if (claimCollection != null && claimCollection.size() != 0) {\n                    returnCollection.addAll(claimCollection);\n                }\n            }\n            return returnCollection;\n        }\n        return null;\n    }","id":21119,"modified_method":"@Deprecated\n    public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        if (claimHandlers != null && claimHandlers.size() > 0 && claims != null && claims.size() > 0) {\n            ClaimCollection returnCollection = new ClaimCollection();\n            for (ClaimsHandler handler : claimHandlers) {\n                ClaimCollection claimCollection = handler.retrieveClaimValues(\n                        principal, claims, context, realm);\n                if (claimCollection != null && claimCollection.size() != 0) {\n                    returnCollection.addAll(claimCollection);\n                }\n            }\n            validateClaimValues(claims, returnCollection);\n            return returnCollection;\n        }\n        return null;\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Get an AttributeStatementBean using the given parameters.\n     */\n    public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        String tokenType = tokenRequirements.getTokenType();\n        \n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getPrincipal(),\n                    providerParameters.getRequestedClaims(),\n                    providerParameters.getWebServiceContext(),\n                    providerParameters.getRealm()\n                );\n        }\n        \n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            // If no Claims have been processed then create a default attribute\n            AttributeBean attributeBean = createDefaultAttribute(tokenType);\n            attributeList.add(attributeBean);\n        }\n        \n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = createAttributeFromClaim(claim, tokenType);\n            attributeList.add(attributeBean);\n        }\n        \n        ReceivedToken onBehalfOf = tokenRequirements.getOnBehalfOf();\n        ReceivedToken actAs = tokenRequirements.getActAs();\n        try {\n            if (onBehalfOf != null) {\n                AttributeBean parameterBean = \n                    handleAdditionalParameters(false, onBehalfOf.getToken(), tokenType);\n                if (!parameterBean.getAttributeValues().isEmpty()) {\n                    attributeList.add(parameterBean);\n                }\n            }\n            if (actAs != null) {\n                AttributeBean parameterBean = \n                    handleAdditionalParameters(true, actAs.getToken(), tokenType);\n                if (!parameterBean.getAttributeValues().isEmpty()) {\n                    attributeList.add(parameterBean);\n                }\n            }\n        } catch (WSSecurityException ex) {\n            throw new STSException(ex.getMessage(), ex);\n        }\n        \n        attrBean.setSamlAttributes(attributeList);\n        \n        return attrBean;\n    }","id":21120,"modified_method":"/**\n     * Get an AttributeStatementBean using the given parameters.\n     */\n    public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        String tokenType = tokenRequirements.getTokenType();\n        \n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            ClaimsParameters params = new ClaimsParameters();\n            params.setAdditionalProperties(providerParameters.getAdditionalProperties());\n            params.setAppliesToAddress(providerParameters.getAppliesToAddress());\n            params.setEncryptionProperties(providerParameters.getEncryptionProperties());\n            params.setKeyRequirements(providerParameters.getKeyRequirements());\n            params.setPrincipal(providerParameters.getPrincipal());\n            params.setRealm(providerParameters.getRealm());\n            params.setStsProperties(providerParameters.getStsProperties());\n            params.setTokenRequirements(providerParameters.getTokenRequirements());\n            params.setTokenStore(providerParameters.getTokenStore());\n            params.setWebServiceContext(providerParameters.getWebServiceContext());\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getRequestedClaims(),\n                    params\n                );\n        }\n        \n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            // If no Claims have been processed then create a default attribute\n            AttributeBean attributeBean = createDefaultAttribute(tokenType);\n            attributeList.add(attributeBean);\n        }\n        \n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = createAttributeFromClaim(claim, tokenType);\n            attributeList.add(attributeBean);\n        }\n        \n        ReceivedToken onBehalfOf = tokenRequirements.getOnBehalfOf();\n        ReceivedToken actAs = tokenRequirements.getActAs();\n        try {\n            if (onBehalfOf != null) {\n                AttributeBean parameterBean = \n                    handleAdditionalParameters(false, onBehalfOf.getToken(), tokenType);\n                if (!parameterBean.getAttributeValues().isEmpty()) {\n                    attributeList.add(parameterBean);\n                }\n            }\n            if (actAs != null) {\n                AttributeBean parameterBean = \n                    handleAdditionalParameters(true, actAs.getToken(), tokenType);\n                if (!parameterBean.getAttributeValues().isEmpty()) {\n                    attributeList.add(parameterBean);\n                }\n            }\n        } catch (WSSecurityException ex) {\n            throw new STSException(ex.getMessage(), ex);\n        }\n        \n        attrBean.setSamlAttributes(attributeList);\n        \n        return attrBean;\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n\n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getPrincipal(),\n                    providerParameters.getRequestedClaims(),\n                    providerParameters.getWebServiceContext(),\n                    providerParameters.getRealm()\n                );\n        }\n        if (retrievedClaims == null) {\n            return null;\n        }\n        \n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            return null;\n        }\n\n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n        String tokenType = providerParameters.getTokenRequirements().getTokenType();\n\n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = new AttributeBean();\n            URI name = claim.getNamespace().relativize(claim.getClaimType());\n            if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)\n                    || WSConstants.SAML2_NS.equals(tokenType)) {\n                attributeBean.setQualifiedName(name.toString());\n                attributeBean.setNameFormat(claim.getNamespace().toString());\n            } else {\n                attributeBean.setSimpleName(name.toString());\n                attributeBean.setQualifiedName(claim.getNamespace().toString());\n            }\n            attributeBean.setAttributeValues(Collections.singletonList(claim.getValue()));\n            attributeList.add(attributeBean);\n        }\n        attrBean.setSamlAttributes(attributeList);\n\n        return attrBean;\n    }","id":21121,"modified_method":"public AttributeStatementBean getStatement(TokenProviderParameters providerParameters) {\n\n        // Handle Claims\n        ClaimsManager claimsManager = providerParameters.getClaimsManager();\n        ClaimCollection retrievedClaims = new ClaimCollection();\n        if (claimsManager != null) {\n            ClaimsParameters params = new ClaimsParameters();\n            params.setAdditionalProperties(providerParameters.getAdditionalProperties());\n            params.setAppliesToAddress(providerParameters.getAppliesToAddress());\n            params.setEncryptionProperties(providerParameters.getEncryptionProperties());\n            params.setKeyRequirements(providerParameters.getKeyRequirements());\n            params.setPrincipal(providerParameters.getPrincipal());\n            params.setRealm(providerParameters.getRealm());\n            params.setStsProperties(providerParameters.getStsProperties());\n            params.setTokenRequirements(providerParameters.getTokenRequirements());\n            params.setTokenStore(providerParameters.getTokenStore());\n            params.setWebServiceContext(providerParameters.getWebServiceContext());\n            retrievedClaims = \n                claimsManager.retrieveClaimValues(\n                    providerParameters.getRequestedClaims(),\n                    params\n                );\n        }\n        if (retrievedClaims == null) {\n            return null;\n        }\n        \n        Iterator<Claim> claimIterator = retrievedClaims.iterator();\n        if (!claimIterator.hasNext()) {\n            return null;\n        }\n\n        List<AttributeBean> attributeList = new ArrayList<AttributeBean>();\n        String tokenType = providerParameters.getTokenRequirements().getTokenType();\n\n        AttributeStatementBean attrBean = new AttributeStatementBean();\n        while (claimIterator.hasNext()) {\n            Claim claim = claimIterator.next();\n            AttributeBean attributeBean = new AttributeBean();\n            URI name = claim.getNamespace().relativize(claim.getClaimType());\n            if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)\n                    || WSConstants.SAML2_NS.equals(tokenType)) {\n                attributeBean.setQualifiedName(name.toString());\n                attributeBean.setNameFormat(claim.getNamespace().toString());\n            } else {\n                attributeBean.setSimpleName(name.toString());\n                attributeBean.setQualifiedName(claim.getNamespace().toString());\n            }\n            attributeBean.setAttributeValues(Collections.singletonList(claim.getValue()));\n            attributeList.add(attributeBean);\n        }\n        attrBean.setSamlAttributes(attributeList);\n\n        return attrBean;\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        if (claims != null && claims.size() > 0) {\n            ClaimCollection claimCollection = new ClaimCollection();\n            for (RequestClaim requestClaim : claims) {\n                Claim claim = new Claim();\n                claim.setClaimType(requestClaim.getClaimType());\n                if (ClaimTypes.FIRSTNAME.equals(requestClaim.getClaimType())) {\n                    claim.setValue(\"alice\");\n                } else if (ClaimTypes.LASTNAME.equals(requestClaim.getClaimType())) {\n                    claim.setValue(\"doe\");\n                } else if (ClaimTypes.EMAILADDRESS.equals(requestClaim.getClaimType())) {\n                    claim.setValue(\"alice@cxf.apache.org\");\n                }\n                claimCollection.add(claim);\n            }\n            return claimCollection;\n        }\n        \n        return null;\n    }","id":21122,"modified_method":"@Deprecated\n    public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        \n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(principal);\n        params.setWebServiceContext(context);\n        params.setRealm(realm);\n        \n        return retrieveClaimValues(claims, params);\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        if (claims != null && claims.size() > 0) {\n            ClaimCollection claimCollection = new ClaimCollection();\n            for (RequestClaim requestClaim : claims) {\n                Claim claim = new Claim();\n                claim.setClaimType(requestClaim.getClaimType());\n                claim.setIssuer(\"Test Issuer\");\n                claim.setOriginalIssuer(\"Original Issuer\");\n                claim.setValue(\"admin-user\");\n                claimCollection.add(claim);\n            }\n            return claimCollection;\n        }\n        return null;\n    }","id":21123,"modified_method":"@Deprecated\n    public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        \n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(principal);\n        params.setWebServiceContext(context);\n        params.setRealm(realm);\n        \n        return retrieveClaimValues(claims, params);\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test(expected = STSException.class)\n    @org.junit.Ignore\n    public void testRetrieveClaimsWithUnsupportedMandatoryClaimType() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n        // add unsupported but mandatory claim\n        RequestClaim claim = new RequestClaim();\n        claim.setClaimType(ClaimTypes.GENDER);\n        claim.setOptional(false);\n        requestedClaims.add(claim);\n\n        claimsHandler.retrieveClaimValues(new CustomTokenPrincipal(user), requestedClaims, null, null);\n\n    }","id":21124,"modified_method":"@org.junit.Test(expected = STSException.class)\n    @org.junit.Ignore\n    public void testRetrieveClaimsWithUnsupportedMandatoryClaimType() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n        // add unsupported but mandatory claim\n        RequestClaim claim = new RequestClaim();\n        claim.setClaimType(ClaimTypes.GENDER);\n        claim.setOptional(false);\n        requestedClaims.add(claim);\n\n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(new CustomTokenPrincipal(user));\n        claimsHandler.retrieveClaimValues(requestedClaims, params);\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    @org.junit.Ignore\n    public void testRetrieveClaimsWithUnsupportedOptionalClaimType() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n        // add unsupported but optional unsupported claim\n        RequestClaim claim = new RequestClaim();\n        claim.setClaimType(ClaimTypes.GENDER);\n        claim.setOptional(true);\n        requestedClaims.add(claim);\n\n        // Gender is not expected to be returned because not supported\n        List<URI> expectedClaims = new ArrayList<URI>();\n        expectedClaims.add(ClaimTypes.FIRSTNAME);\n        expectedClaims.add(ClaimTypes.LASTNAME);\n        expectedClaims.add(ClaimTypes.EMAILADDRESS);\n\n        ClaimCollection retrievedClaims = \n            claimsHandler.retrieveClaimValues(new CustomTokenPrincipal(user), requestedClaims, null, null);\n\n        Assert.isTrue(\n                      retrievedClaims.size() == expectedClaims.size(), \n                      \"Retrieved number of claims [\" + retrievedClaims.size() \n                      + \"] doesn't match with expected [\" + expectedClaims.size() + \"]\"\n        );\n\n        for (Claim c : retrievedClaims) {\n            if (expectedClaims.contains(c.getClaimType())) {\n                expectedClaims.remove(c.getClaimType());\n            } else {\n                Assert.isTrue(false, \"Claim '\" + c.getClaimType() + \"' not requested\");\n            }\n        }\n    }","id":21125,"modified_method":"@org.junit.Test\n    @org.junit.Ignore\n    public void testRetrieveClaimsWithUnsupportedOptionalClaimType() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n        // add unsupported but optional unsupported claim\n        RequestClaim claim = new RequestClaim();\n        claim.setClaimType(ClaimTypes.GENDER);\n        claim.setOptional(true);\n        requestedClaims.add(claim);\n\n        // Gender is not expected to be returned because not supported\n        List<URI> expectedClaims = new ArrayList<URI>();\n        expectedClaims.add(ClaimTypes.FIRSTNAME);\n        expectedClaims.add(ClaimTypes.LASTNAME);\n        expectedClaims.add(ClaimTypes.EMAILADDRESS);\n        \n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(new CustomTokenPrincipal(user));\n        ClaimCollection retrievedClaims = \n            claimsHandler.retrieveClaimValues(requestedClaims, params);\n\n        Assert.isTrue(\n                      retrievedClaims.size() == expectedClaims.size(), \n                      \"Retrieved number of claims [\" + retrievedClaims.size() \n                      + \"] doesn't match with expected [\" + expectedClaims.size() + \"]\"\n        );\n\n        for (Claim c : retrievedClaims) {\n            if (expectedClaims.contains(c.getClaimType())) {\n                expectedClaims.remove(c.getClaimType());\n            } else {\n                Assert.isTrue(false, \"Claim '\" + c.getClaimType() + \"' not requested\");\n            }\n        }\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    @org.junit.Ignore\n    public void testRetrieveClaims() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n\n        List<URI> expectedClaims = new ArrayList<URI>();\n        expectedClaims.add(ClaimTypes.FIRSTNAME);\n        expectedClaims.add(ClaimTypes.LASTNAME);\n        expectedClaims.add(ClaimTypes.EMAILADDRESS);\n\n        ClaimCollection retrievedClaims = \n            claimsHandler.retrieveClaimValues(new CustomTokenPrincipal(user), requestedClaims, null, null);\n\n        Assert.isTrue(\n                      retrievedClaims.size() == expectedClaims.size(), \n                      \"Retrieved number of claims [\" + retrievedClaims.size() \n                      + \"] doesn't match with expected [\" + expectedClaims.size() + \"]\"\n        );\n\n        for (Claim c : retrievedClaims) {\n            if (expectedClaims.contains(c.getClaimType())) {\n                expectedClaims.remove(c.getClaimType());\n            } else {\n                Assert.isTrue(false, \"Claim '\" + c.getClaimType() + \"' not requested\");\n            }\n        }\n\n    }","id":21126,"modified_method":"@org.junit.Test\n    @org.junit.Ignore\n    public void testRetrieveClaims() throws Exception {\n        LdapClaimsHandler claimsHandler = (LdapClaimsHandler)appContext.getBean(\"testClaimsHandler\");\n\n        String user = props.getProperty(\"claimUser\");\n        Assert.notNull(user, \"Property 'claimUser' not configured\");\n\n        RequestClaimCollection requestedClaims = createRequestClaimCollection();\n\n        List<URI> expectedClaims = new ArrayList<URI>();\n        expectedClaims.add(ClaimTypes.FIRSTNAME);\n        expectedClaims.add(ClaimTypes.LASTNAME);\n        expectedClaims.add(ClaimTypes.EMAILADDRESS);\n       \n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(new CustomTokenPrincipal(user));\n        ClaimCollection retrievedClaims = \n            claimsHandler.retrieveClaimValues(requestedClaims, params);\n\n        Assert.isTrue(\n                      retrievedClaims.size() == expectedClaims.size(), \n                      \"Retrieved number of claims [\" + retrievedClaims.size() \n                      + \"] doesn't match with expected [\" + expectedClaims.size() + \"]\"\n        );\n\n        for (Claim c : retrievedClaims) {\n            if (expectedClaims.contains(c.getClaimType())) {\n                expectedClaims.remove(c.getClaimType());\n            } else {\n                Assert.isTrue(false, \"Claim '\" + c.getClaimType() + \"' not requested\");\n            }\n        }\n\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n\n        String user = null;\n        if (principal instanceof KerberosPrincipal) {\n            KerberosPrincipal kp = (KerberosPrincipal)principal;\n            StringTokenizer st = new StringTokenizer(kp.getName(), \"@\");\n            user = st.nextToken();\n        } else if (principal instanceof X500Principal) {\n            X500Principal x500p = (X500Principal)principal;\n            LOG.warning(\"Unsupported principal type X500: \" + x500p.getName());\n            return new ClaimCollection();\n        } else if (principal != null) {\n            user = principal.getName();\n        } else {\n            //[TODO] if onbehalfof -> principal == null\n            LOG.info(\"Principal is null\");\n            return new ClaimCollection();\n        }\n        \n        if (user == null) {\n            LOG.warning(\"User must not be null\");\n            return new ClaimCollection();\n        } else {\n            if (LOG.isLoggable(Level.FINE)) {\n                LOG.fine(\"Retrieve claims for user \" + user);\n            }\n        }\n        \n        AndFilter filter = new AndFilter();\n        filter.and(\n                new EqualsFilter(\"objectclass\", this.getObjectClass())).and(\n                        new EqualsFilter(this.getUserNameAttribute(), user));\n\n        List<String> searchAttributeList = new ArrayList<String>();\n        for (RequestClaim claim : claims) {\n            if (getClaimsLdapAttributeMapping().keySet().contains(claim.getClaimType().toString())) {\n                searchAttributeList.add(\n                    getClaimsLdapAttributeMapping().get(claim.getClaimType().toString())\n                );\n            } else {\n                LOG.warning(\"Unsupported claim: \" + claim.getClaimType());\n            }\n        }\n\n        String[] searchAttributes = null;\n        searchAttributes = searchAttributeList.toArray(new String[] {});\n\n        AttributesMapper mapper = \n            new AttributesMapper() {\n                public Object mapFromAttributes(Attributes attrs) throws NamingException {\n                    Map<String, Attribute> map = new HashMap<String, Attribute>();\n                    NamingEnumeration<? extends Attribute> attrEnum = attrs.getAll();\n                    while (attrEnum.hasMore()) {\n                        Attribute att = attrEnum.next();\n                        map.put(att.getID(), att);\n                    }\n                    return map;\n                }\n            };\n        \n        \n        List<?> result = ldap.search((this.userBaseDn == null) ? \"\" : this.userBaseDn, filter.toString(),\n                SearchControls.SUBTREE_SCOPE, searchAttributes, mapper);\n      \n        Map<String, Attribute> ldapAttributes = null;\n        if (result != null && result.size() > 0) {\n            ldapAttributes = CastUtils.cast((Map<?, ?>)result.get(0));\n        }\n        \n        ClaimCollection claimsColl = new ClaimCollection();\n\n        for (RequestClaim claim : claims) {\n            URI claimType = claim.getClaimType();\n            String ldapAttribute = getClaimsLdapAttributeMapping().get(claimType.toString());\n            Attribute attr = ldapAttributes.get(ldapAttribute);\n            if (attr == null) {\n                if (!claim.isOptional()) {\n                    LOG.warning(\"Mandatory claim not found in LDAP: \" + claim.getClaimType());\n                    throw new STSException(\"Mandatory claim '\" + claim.getClaimType() + \"' not found\");\n                } else {\n                    LOG.fine(\"Claim '\" + claim.getClaimType() + \"' is null\");\n                }\n            } else {\n                Claim c = new Claim();\n                c.setClaimType(claimType);\n                c.setPrincipal(principal);\n\n                StringBuilder claimValue = new StringBuilder();\n                try {\n                    NamingEnumeration<?> list = (NamingEnumeration<?>)attr.getAll();\n                    while (list.hasMore()) {\n                        Object obj = list.next();\n                        if (!(obj instanceof String)) {\n                            LOG.warning(\"LDAP attribute '\" + ldapAttribute \n                                    + \"' has got an unsupported value type\");\n                            break;\n                        }\n                        String itemValue = (String)obj;\n                        if (this.isX500FilterEnabled()) {\n                            try {\n                                X500Principal x500p = new X500Principal(itemValue);\n                                itemValue = x500p.getName();\n                                int index = itemValue.indexOf('=');\n                                itemValue = itemValue.substring(index + 1, itemValue.indexOf(',', index));\n                            } catch (Exception ex) {\n                                //Ignore, not X500 compliant thus use the whole string as the value\n                            }\n                        }\n                        claimValue.append(itemValue);\n                        if (list.hasMore()) {\n                            claimValue.append(this.getDelimiter());\n                        }\n                    }\n                } catch (NamingException ex) {\n                    LOG.warning(\"Failed to read value of LDAP attribute '\" + ldapAttribute + \"'\");\n                }\n                \n                c.setValue(claimValue.toString());\n                // c.setIssuer(issuer);\n                // c.setOriginalIssuer(originalIssuer);\n                // c.setNamespace(namespace);\n                claimsColl.add(c);\n            }\n        }\n        \n        return claimsColl;\n    }","id":21127,"modified_method":"@Deprecated\n    public ClaimCollection retrieveClaimValues(\n            Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n        \n        ClaimsParameters params = new ClaimsParameters();\n        params.setPrincipal(principal);\n        params.setWebServiceContext(context);\n        params.setRealm(realm);\n        \n        return retrieveClaimValues(claims, params);\n    }","commit_id":"354d623c681c73a5ac4b29edb3336d8a32d29f9e","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            attribute.resolveModelAttribute(context, model);\n        }\n\n        final BoundedOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseBoundedThreadPoolOperationParameters(operation);\n\n        ServiceTarget target = context.getServiceTarget();\n        final int coreThreads =  params.getCoreThreads() == null ? params.getMaxThreads().getScaledCount() : params.getCoreThreads().getScaledCount();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n                coreThreads,\n                params.getMaxThreads().getScaledCount(),\n                params.getQueueLength().getScaledCount(),\n                params.isBlocking(),\n                params.getKeepAliveTime(),\n                params.isAllowCoreTimeout());\n\n        //TODO add the handoffExceutor injection\n\n        final ServiceBuilder<ManagedQueueExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        serviceBuilder.addListener(verificationHandler);\n        serviceBuilder.install();\n    }","id":21128,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final ModelNode resolved = new ModelNode();\n        resolved.get(OP).set(operation.get(OP));\n        resolved.get(OP_ADDR).set(operation.get(OP_ADDR));\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            resolved.get(attribute.getName()).set(attribute.resolveModelAttribute(context, model));\n        }\n\n        final BoundedOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseBoundedThreadPoolOperationParameters(resolved);\n\n        ServiceTarget target = context.getServiceTarget();\n        final int coreThreads =  params.getCoreThreads() == null ? params.getMaxThreads().getScaledCount() : params.getCoreThreads().getScaledCount();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n                coreThreads,\n                params.getMaxThreads().getScaledCount(),\n                params.getQueueLength().getScaledCount(),\n                params.isBlocking(),\n                params.getKeepAliveTime(),\n                params.isAllowCoreTimeout());\n\n        //TODO add the handoffExceutor injection\n\n        final ServiceBuilder<ManagedQueueExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n\n        if (verificationHandler != null) {\n            serviceBuilder.addListener(verificationHandler);\n        }\n        ServiceController<?> sc = serviceBuilder.install();\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.threadFactoryName(name));\n    }","id":21129,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.executorName(name));\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) {\n        // TODO:  RE-ADD SERVICES\n    }","id":21130,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        BoundedQueueThreadPoolAdd.INSTANCE.performRuntime(context, operation, model, null, null);\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            // TODO: Make this read-write attribute\n            resourceRegistration.registerReadOnlyAttribute(attr, null);\n        }\n    }","id":21131,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            // TODO: Make this RESTART_NONE by updating AsynchronousMergingProcessor\n            resourceRegistration.registerReadWriteAttribute(attr, null, new ReloadRequiredWriteAttributeHandler(attr));\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            // TODO: Make this read-write attribute\n            resourceRegistration.registerReadOnlyAttribute(attr, null);\n        }\n    }","id":21132,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            // TODO: Make this read-write attribute\n            resourceRegistration.registerReadWriteAttribute(attr, null, new ReloadRequiredWriteAttributeHandler(attr));\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            // TODO: Make this read-write attribute\n            resourceRegistration.registerReadOnlyAttribute(attr, null);\n        }\n    }","id":21133,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        for (AttributeDefinition attr : ATTRIBUTES.values()) {\n            resourceRegistration.registerReadWriteAttribute(attr, null, new ReloadRequiredWriteAttributeHandler(attr));\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            attribute.resolveModelAttribute(context, model);\n        }\n\n        final QueuelessOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseQueuelessThreadPoolOperationParameters(operation);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final QueuelessThreadPoolService service = new QueuelessThreadPoolService(params.getMaxThreads().getScaledCount(), params.isBlocking(), params.getKeepAliveTime());\n\n        //TODO add the handoffExceutor injection\n\n        final ServiceBuilder<ManagedQueuelessExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        serviceBuilder.addListener(verificationHandler);\n        serviceBuilder.install();\n    }","id":21134,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final ModelNode resolved = new ModelNode();\n        resolved.get(OP).set(operation.get(OP));\n        resolved.get(OP_ADDR).set(operation.get(OP_ADDR));\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            resolved.get(attribute.getName()).set(attribute.resolveModelAttribute(context, model));\n        }\n\n        final QueuelessOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseQueuelessThreadPoolOperationParameters(resolved);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final QueuelessThreadPoolService service = new QueuelessThreadPoolService(params.getMaxThreads().getScaledCount(), params.isBlocking(), params.getKeepAliveTime());\n\n        //TODO add the handoffExceutor injection\n\n        final ServiceBuilder<ManagedQueuelessExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n\n        if (verificationHandler != null) {\n            serviceBuilder.addListener(verificationHandler);\n        }\n        ServiceController<?> sc = serviceBuilder.install();\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.threadFactoryName(name));\n    }","id":21135,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.executorName(name));\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) {\n        // TODO:  RE-ADD SERVICES\n    }","id":21136,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        QueuelessThreadPoolAdd.INSTANCE.performRuntime(context, operation, model, null, null);\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            attribute.resolveModelAttribute(context, model);\n        }\n\n        final BaseOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseScheduledThreadPoolOperationParameters(operation);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final ScheduledThreadPoolService service = new ScheduledThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n        final ServiceBuilder<ManagedScheduledExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        serviceBuilder.addListener(verificationHandler);\n        serviceBuilder.install();\n\n    }","id":21137,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final ModelNode resolved = new ModelNode();\n        resolved.get(OP).set(operation.get(OP));\n        resolved.get(OP_ADDR).set(operation.get(OP_ADDR));\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            resolved.get(attribute.getName()).set(attribute.resolveModelAttribute(context, model));\n        }\n\n        final BaseOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseScheduledThreadPoolOperationParameters(resolved);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final ScheduledThreadPoolService service = new ScheduledThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n        final ServiceBuilder<ManagedScheduledExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        if (verificationHandler != null) {\n            serviceBuilder.addListener(verificationHandler);\n        }\n        ServiceController<?> sc = serviceBuilder.install();\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.threadFactoryName(name));\n    }","id":21138,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.executorName(name));\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) {\n        // TODO:  RE-ADD SERVICES\n    }","id":21139,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        ScheduledThreadPoolAdd.INSTANCE.performRuntime(context, operation, model, null, null);\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n//        for(final AttributeDefinition attribute : ATTRIBUTES) {\n//            attribute.validateResolvedOperation(model);\n//        }\n\n        final String threadNamePattern = PoolAttributeDefinitions.THREAD_NAME_PATTERN.resolveModelAttribute(context, model).asString();\n        final int priority = PoolAttributeDefinitions.PRIORITY.resolveModelAttribute(context, model).asInt();\n        final String groupName = PoolAttributeDefinitions.GROUP_NAME.resolveModelAttribute(context, model).asString();\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ServiceTarget target = context.getServiceTarget();\n        final ThreadFactoryService service = new ThreadFactoryService();\n        service.setNamePattern(threadNamePattern);\n        service.setPriority(priority);\n        service.setThreadGroupName(groupName);\n        //TODO What about the properties?\n        target.addService(ThreadsServices.threadFactoryName(name), service)\n                .addListener(verificationHandler)\n                .setInitialMode(ServiceController.Mode.ACTIVE)\n                .install();\n    }","id":21140,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final String threadNamePattern = PoolAttributeDefinitions.THREAD_NAME_PATTERN.resolveModelAttribute(context, model).asString();\n        final int priority = PoolAttributeDefinitions.PRIORITY.resolveModelAttribute(context, model).asInt();\n        final String groupName = PoolAttributeDefinitions.GROUP_NAME.resolveModelAttribute(context, model).asString();\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        final ServiceTarget target = context.getServiceTarget();\n        final ThreadFactoryService service = new ThreadFactoryService();\n        service.setNamePattern(threadNamePattern);\n        service.setPriority(priority);\n        service.setThreadGroupName(groupName);\n        ServiceBuilder<?> serviceBuilder = target.addService(ThreadsServices.threadFactoryName(name), service)\n                .addListener(verificationHandler)\n                .setInitialMode(ServiceController.Mode.ACTIVE);\n        if (verificationHandler != null) {\n            serviceBuilder.addListener(verificationHandler);\n        }\n        ServiceController<?> sc = serviceBuilder.install();\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            attribute.resolveModelAttribute(context, model);\n        }\n\n        final BaseOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseUnboundedQueueThreadPoolOperationParameters(operation);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final UnboundedQueueThreadPoolService service = new UnboundedQueueThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n        final ServiceBuilder<ManagedJBossThreadPoolExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        serviceBuilder.addListener(verificationHandler);\n        serviceBuilder.install();\n    }","id":21141,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model,\n            final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final ModelNode resolved = new ModelNode();\n        resolved.get(OP).set(operation.get(OP));\n        resolved.get(OP_ADDR).set(operation.get(OP_ADDR));\n        for(final AttributeDefinition attribute : ATTRIBUTES) {\n            resolved.get(attribute.getName()).set(attribute.resolveModelAttribute(context, model));\n        }\n\n        final BaseOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseUnboundedQueueThreadPoolOperationParameters(resolved);\n\n        ServiceTarget target = context.getServiceTarget();\n        final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n        final UnboundedQueueThreadPoolService service = new UnboundedQueueThreadPoolService(params.getMaxThreads().getScaledCount(), params.getKeepAliveTime());\n        final ServiceBuilder<ManagedJBossThreadPoolExecutorService> serviceBuilder = target.addService(serviceName, service);\n        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n        if (verificationHandler != null) {\n            serviceBuilder.addListener(verificationHandler);\n        }\n        ServiceController<?> sc = serviceBuilder.install();\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.threadFactoryName(name));\n    }","id":21142,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(ThreadsServices.executorName(name));\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) {\n        // TODO:  RE-ADD SERVICES\n    }","id":21143,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        UnboundedQueueThreadPoolAdd.INSTANCE.performRuntime(context, operation, model, null, null);\n    }","commit_id":"aae1be469450ed714cf0630dd4e04eb43df62d4c","url":"https://github.com/wildfly/wildfly"},{"original_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        List<IfTableEntry> ifTableEntries = snmpc.getIfTable().getEntries();\n        for (IfTableEntry ifte : ifTableEntries) {\n            // index\n            Integer sint = ifte.getIfIndex();\n            if (sint == null) {\n                continue;\n            }\n            int xifIndex = sint.intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(sint.intValue());\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // Retrieve ifType so we can check for loopback\n            sint = ifte.getIfType();\n            // FIXME: What if sint is null?\n            int ifType = sint.intValue();\n\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            String physAddr = ifte.getPhysAddr();\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            // type\n            snmpEntry.setType(ifType);\n\n            // speed\n            Long uint = ifte.getIfSpeed();\n            if (uint == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(uint.longValue());\n            }\n\n            // admin status\n            sint = ifte.getIfAdminStatus();\n            if (sint == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(sint.intValue());\n            }\n\n            // oper status\n            sint = ifte.getIfOperStatus();\n            if (sint == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(sint.intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","id":21144,"modified_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        for (IfTableEntry ifte : snmpc.getIfTable().getEntries()) {\n            // index\n            if (ifte.getIfIndex() == null) {\n                continue;\n            }\n            final int xifIndex = ifte.getIfIndex().intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(xifIndex);\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // At some point back in the day this was done with ifType\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            final DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            final String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            final String physAddr = ifte.getPhysAddr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            if (ifte.getIfType() == null) {\n                snmpEntry.setType(0);\n            } else {\n                snmpEntry.setType(ifte.getIfType().intValue());\n            }\n\n            // speed\n            if (ifte.getIfSpeed() == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(ifte.getIfSpeed().longValue());\n            }\n\n            // admin status\n            if (ifte.getIfAdminStatus() == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(ifte.getIfAdminStatus().intValue());\n            }\n\n            // oper status\n            if (ifte.getIfOperStatus() == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(ifte.getIfOperStatus().intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            final String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","commit_id":"bad41e5d51ab58e8480c89010fd618768614301c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        List<IfTableEntry> ifTableEntries = snmpc.getIfTable().getEntries();\n        for (IfTableEntry ifte : ifTableEntries) {\n            // index\n            Integer sint = ifte.getIfIndex();\n            if (sint == null) {\n                continue;\n            }\n            int xifIndex = sint.intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(sint.intValue());\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // Retrieve ifType so we can check for loopback\n            sint = ifte.getIfType();\n            // FIXME: What if sint is null?\n            int ifType = sint.intValue();\n\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            String physAddr = ifte.getPhysAddr();\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            // type\n            snmpEntry.setType(ifType);\n\n            // speed\n            Long uint = ifte.getIfSpeed();\n            if (uint == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(uint.longValue());\n            }\n\n            // admin status\n            sint = ifte.getIfAdminStatus();\n            if (sint == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(sint.intValue());\n            }\n\n            // oper status\n            sint = ifte.getIfOperStatus();\n            if (sint == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(sint.intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","id":21145,"modified_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        for (IfTableEntry ifte : snmpc.getIfTable().getEntries()) {\n            // index\n            if (ifte.getIfIndex() == null) {\n                continue;\n            }\n            final int xifIndex = ifte.getIfIndex().intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(xifIndex);\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // At some point back in the day this was done with ifType\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            final DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            final String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            final String physAddr = ifte.getPhysAddr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            if (ifte.getIfType() == null) {\n                snmpEntry.setType(0);\n            } else {\n                snmpEntry.setType(ifte.getIfType().intValue());\n            }\n\n            // speed\n            if (ifte.getIfSpeed() == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(ifte.getIfSpeed().longValue());\n            }\n\n            // admin status\n            if (ifte.getIfAdminStatus() == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(ifte.getIfAdminStatus().intValue());\n            }\n\n            // oper status\n            if (ifte.getIfOperStatus() == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(ifte.getIfOperStatus().intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            final String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","commit_id":"c79a01a24ad9d04d040912d18a9f0b6ea61f85c5","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        List<IfTableEntry> ifTableEntries = snmpc.getIfTable().getEntries();\n        for (IfTableEntry ifte : ifTableEntries) {\n            // index\n            Integer sint = ifte.getIfIndex();\n            if (sint == null) {\n                continue;\n            }\n            int xifIndex = sint.intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(sint.intValue());\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // Retrieve ifType so we can check for loopback\n            sint = ifte.getIfType();\n            // FIXME: What if sint is null?\n            int ifType = sint.intValue();\n\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            String physAddr = ifte.getPhysAddr();\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            // type\n            snmpEntry.setType(ifType);\n\n            // speed\n            Long uint = ifte.getIfSpeed();\n            if (uint == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(uint.longValue());\n            }\n\n            // admin status\n            sint = ifte.getIfAdminStatus();\n            if (sint == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(sint.intValue());\n            }\n\n            // oper status\n            sint = ifte.getIfOperStatus();\n            if (sint == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(sint.intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","id":21146,"modified_method":"private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,\n            int nodeId, IfCollector collector)\n            throws SQLException {\n        if (!collector.hasSnmpCollection()) {\n            return false;\n        }\n        \n        IfSnmpCollector snmpc = collector.getSnmpCollector();\n\n        if (!snmpc.hasIfTable()) {\n            return false;\n        }\n\n        boolean addedSnmpInterfaceEntry = false;\n\n        for (IfTableEntry ifte : snmpc.getIfTable().getEntries()) {\n            // index\n            if (ifte.getIfIndex() == null) {\n                continue;\n            }\n            final int xifIndex = ifte.getIfIndex().intValue();\n\n            /*\n             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY\n             * returns the FIRST IP address and mask for a given interface as\n             * specified in the ipAddrTable.\n             */\n            InetAddress[] aaddrs = null;\n            if (snmpc.hasIpAddrTable()) {\n                aaddrs = snmpc.getIfAddressAndMask(xifIndex);\n            }\n            if (aaddrs == null) {\n                /*\n                 * Must be non-IP interface, set ifAddress to\n                 * '0.0.0.0' and mask to null\n                 */\n                aaddrs = new InetAddress[2];\n                try {\n                    aaddrs[0] = InetAddress.getByName(\"0.0.0.0\");\n                } catch (UnknownHostException e) {\n                    continue;\n                }\n                aaddrs[1] = null;\n            }\n\n            // At some point back in the day this was done with ifType\n            // Skip loopback interfaces\n            if (aaddrs[0].getHostAddress().startsWith(\"127.\")) {\n                continue;\n            }\n\n            final DbSnmpInterfaceEntry snmpEntry =\n                DbSnmpInterfaceEntry.create(nodeId, xifIndex);\n\n            // IP address\n            snmpEntry.setIfAddress(aaddrs[0]);\n            if (aaddrs[0].equals(ifaddr)) {\n                addedSnmpInterfaceEntry = true;\n            }\n\n            // netmask\n            if (aaddrs[1] != null) {\n                snmpEntry.setNetmask(aaddrs[1]);\n            }\n\n            // description\n            final String str = ifte.getIfDescr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress() + \" has ifDescription: \"\n                        + str);\n            }\n            if (str != null && str.length() > 0) {\n                snmpEntry.setDescription(str);\n            }\n\n            // physical address\n            final String physAddr = ifte.getPhysAddr();\n            if (log().isDebugEnabled()) {\n                log().debug(\"SuspectEventProcessor: \"\n                        + aaddrs[0].getHostAddress()\n                        + \" has physical address: -\" + physAddr + \"-\");\n            }\n            if (physAddr != null && physAddr.length() == 12) {\n                snmpEntry.setPhysicalAddress(physAddr);\n            }\n\n            if (ifte.getIfType() == null) {\n                snmpEntry.setType(0);\n            } else {\n                snmpEntry.setType(ifte.getIfType().intValue());\n            }\n\n            // speed\n            if (ifte.getIfSpeed() == null) {\n                snmpEntry.setSpeed(0);\n            } else {\n                snmpEntry.setSpeed(ifte.getIfSpeed().longValue());\n            }\n\n            // admin status\n            if (ifte.getIfAdminStatus() == null) {\n                snmpEntry.setAdminStatus(0);\n            } else {\n                snmpEntry.setAdminStatus(ifte.getIfAdminStatus().intValue());\n            }\n\n            // oper status\n            if (ifte.getIfOperStatus() == null) {\n                snmpEntry.setOperationalStatus(0);\n            } else {\n                snmpEntry.setOperationalStatus(ifte.getIfOperStatus().intValue());\n            }\n\n            // name (from interface extensions table)\n            String ifName = snmpc.getIfName(xifIndex);\n            if (ifName != null && ifName.length() > 0) {\n                snmpEntry.setName(ifName);\n            }\n\n            // alias (from interface extensions table)\n            final String ifAlias = snmpc.getIfAlias(xifIndex);\n            if (ifAlias != null && ifAlias.length() > 0) {\n                snmpEntry.setAlias(ifAlias);\n            }\n\n            snmpEntry.store(dbc);\n        }\n        return addedSnmpInterfaceEntry;\n    }","commit_id":"e59ab89e194e589e819a8fb2f90cd3771fcd5d93","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Gets the path of the specified artifact metadata within the local repository. Note that the returned path need\n     * not exist (yet).\n     *\n     * @param metadata The artifact metadata whose local repo path should be determined, must not be <code>null<\/code>.\n     * @return The absolute path to the artifact metadata when installed, never <code>null<\/code>.\n     */\n    protected File getLocalRepoFile( ArtifactMetadata metadata )\n    {\n        String path = localRepository.pathOfLocalRepositoryMetadata( metadata, localRepository );\n        return new File( localRepository.getBasedir(), path );\n    }","id":21147,"modified_method":"/**\n     * Gets the path of the specified artifact metadata within the local repository. Note that the returned path need\n     * not exist (yet).\n     *\n     * @param metadata The artifact metadata whose local repo path should be determined, must not be <code>null<\/code>.\n     * @return The absolute path to the artifact metadata when installed, never <code>null<\/code>.\n     */\n    protected File getLocalRepoFile( ProjectArtifactMetadata metadata )\n    {\n        String path = localRepository.pathOfLocalRepositoryMetadata( metadata, localRepository );\n        return new File( localRepository.getBasedir(), path );\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * @see org.apache.maven.plugin.Mojo#execute()\n     */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n\n        if ( !file.exists() )\n        {\n            String message = \"The specified file '\" + file.getPath() + \"' not exists\";\n            getLog().error( message );\n            throw new MojoFailureException( message );\n        }\n\n        ProjectBuildingRequest buildingRequest = session.getProjectBuildingRequest();\n        \n        // ----------------------------------------------------------------------\n        // Override the default localRepository variable\n        // ----------------------------------------------------------------------\n        if ( localRepositoryPath != null )\n        {\n            buildingRequest = repositoryManager.setLocalRepositoryBasedir( buildingRequest, localRepositoryPath );\n            \n            getLog().debug( \"localRepoPath: \" + repositoryManager.getLocalRepositoryBasedir( buildingRequest ) );\n        }\n\n        if ( pomFile != null )\n        {\n            processModel( readModel( pomFile ) );\n        }\n        else\n        {\n            readingPomFromJarFile();\n        }\n\n        validateArtifactInformation();\n        \n        Artifact artifact =\n            artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, packaging, classifier );\n\n        if ( file.equals( getLocalRepoFile( artifact ) ) )\n        {\n            throw new MojoFailureException( \"Cannot install artifact. \"\n                + \"Artifact is already in the local repository.\\n\\nFile in question is: \" + file + \"\\n\" );\n        }\n        artifact.setFile( file );\n\n        File generatedPomFile = null;\n\n        if ( !\"pom\".equals( packaging ) )\n        {\n            if ( pomFile != null )\n            {\n                ArtifactMetadata pomMetadata = new ProjectArtifactMetadata( artifact, pomFile );\n                artifact.addMetadata( pomMetadata );\n            }\n            else\n            {\n                generatedPomFile = generatePomFile();\n                ArtifactMetadata pomMetadata = new ProjectArtifactMetadata( artifact, generatedPomFile );\n                if ( Boolean.TRUE.equals( generatePom )\n                    || ( generatePom == null && !getLocalRepoFile( pomMetadata ).exists() ) )\n                {\n                    getLog().debug( \"Installing generated POM\" );\n                    artifact.addMetadata( pomMetadata );\n                }\n                else if ( generatePom == null )\n                {\n                    getLog().debug( \"Skipping installation of generated POM, already present in local repository\" );\n                }\n            }\n        }\n\n        if ( updateReleaseInfo )\n        {\n            artifact.setRelease( true );\n        }\n\n        Collection<File> metadataFiles = new LinkedHashSet<File>();\n\n        // TODO: maybe not strictly correct, while we should enforce that packaging has a type handler of the same id,\n        // we don't\n        try\n        {\n//            installer.install( file, artifact, localRepository );\n            installer.install( buildingRequest, Collections.singletonList( artifact ) );\n            installChecksums( artifact, createChecksum );\n            addMetaDataFilesForArtifact( artifact, metadataFiles, createChecksum );\n\n        }\n        catch ( ArtifactInstallerException e )\n        {\n            throw new MojoExecutionException( \"Error installing artifact '\" + artifact.getDependencyConflictId()\n                + \"': \" + e.getMessage(), e );\n        }\n        finally\n        {\n            if ( generatedPomFile != null )\n            {\n                // noinspection ResultOfMethodCallIgnored\n                generatedPomFile.delete();\n            }\n        }\n\n        if ( sources != null )\n        {\n            artifact = artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, \"jar\", \"sources\" );\n            artifact.setFile( sources );\n            try\n            {\n//                installer.install( sources, artifact, localRepository );\n                installer.install( buildingRequest, Collections.singletonList( artifact ) );\n                installChecksums( artifact, createChecksum );\n                addMetaDataFilesForArtifact( artifact, metadataFiles, createChecksum );\n\n            }\n            catch ( ArtifactInstallerException e )\n            {\n                throw new MojoExecutionException( \"Error installing sources \" + sources + \": \" + e.getMessage(), e );\n            }\n        }\n\n        if ( javadoc != null )\n        {\n            artifact = artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, \"jar\", \"javadoc\" );\n            artifact.setFile( javadoc );\n            try\n            {\n//                installer.install( javadoc, artifact, localRepository );\n                installer.install( buildingRequest, Collections.singletonList( artifact ) );                \n                installChecksums( artifact, createChecksum );\n                addMetaDataFilesForArtifact( artifact, metadataFiles, createChecksum );\n\n            }\n            catch ( ArtifactInstallerException e )\n            {\n                throw new MojoExecutionException( \"Error installing API docs \" + javadoc + \": \" + e.getMessage(), e );\n            }\n        }\n\n        installChecksums( metadataFiles );\n    }","id":21148,"modified_method":"/**\n     * @see org.apache.maven.plugin.Mojo#execute()\n     */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n\n        if ( !file.exists() )\n        {\n            String message = \"The specified file '\" + file.getPath() + \"' not exists\";\n            getLog().error( message );\n            throw new MojoFailureException( message );\n        }\n\n        ProjectBuildingRequest buildingRequest = session.getProjectBuildingRequest();\n        \n        // ----------------------------------------------------------------------\n        // Override the default localRepository variable\n        // ----------------------------------------------------------------------\n        if ( localRepositoryPath != null )\n        {\n            buildingRequest = repositoryManager.setLocalRepositoryBasedir( buildingRequest, localRepositoryPath );\n            \n            getLog().debug( \"localRepoPath: \" + repositoryManager.getLocalRepositoryBasedir( buildingRequest ) );\n        }\n\n        if ( pomFile != null )\n        {\n            processModel( readModel( pomFile ) );\n        }\n        else\n        {\n            readingPomFromJarFile();\n        }\n\n        validateArtifactInformation();\n        \n        MavenProject project = createMavenProject();\n        Artifact artifact = project.getArtifact();\n        \n        if ( file.equals( getLocalRepoFile( artifact ) ) )\n        {\n            throw new MojoFailureException( \"Cannot install artifact. \"\n                + \"Artifact is already in the local repository.\\n\\nFile in question is: \" + file + \"\\n\" );\n        }\n        \n        if ( classifier == null )\n        {\n            artifact.setFile( file );\n            if ( \"pom\".equals( packaging ) )\n            {\n                project.setFile( file );\n            }\n        }\n        else\n        {\n            projectHelper.attachArtifact( project, packaging, classifier, file );\n        }\n\n        if ( !\"pom\".equals( packaging ) )\n        {\n            if ( pomFile != null )\n            {\n                if ( classifier == null )\n                {\n                    artifact.addMetadata( new ProjectArtifactMetadata( artifact, pomFile ) );\n                }\n                else\n                {\n                    project.setFile( pomFile );\n                }\n            }\n            else\n            {\n                File generatedPomFile = generatePomFile();\n                ProjectArtifactMetadata pomMetadata = new ProjectArtifactMetadata( artifact, generatedPomFile );\n                if ( Boolean.TRUE.equals( generatePom )\n                    || ( generatePom == null && !getLocalRepoFile( pomMetadata ).exists() ) )\n                {\n                    getLog().debug( \"Installing generated POM\" );\n                    if ( classifier == null )\n                    {\n                        artifact.addMetadata( pomMetadata );\n                    }\n                    else\n                    {\n                        project.setFile( generatedPomFile );\n                    }\n                }\n                else if ( generatePom == null )\n                {\n                    getLog().debug( \"Skipping installation of generated POM, already present in local repository\" );\n                }\n            }\n        }\n\n        if ( sources != null )\n        {\n            projectHelper.attachArtifact( project, \"jar\", \"sources\", sources );\n        }\n\n        if ( javadoc != null )\n        {\n            projectHelper.attachArtifact( project, \"jar\", \"javadoc\", javadoc );\n        }\n        \n        try\n        {\n            // CHECKSTYLE_OFF: LineLength\n            ProjectInstallerRequest projectInstallerRequest =\n                new ProjectInstallerRequest().setProject( project ).setCreateChecksum( createChecksum ).setUpdateReleaseInfo( updateReleaseInfo );\n            // CHECKSTYLE_ON: LineLength\n\n            installer.install( buildingRequest, projectInstallerRequest, localRepository );\n        }\n        catch ( Exception e )\n        {\n            throw new MojoExecutionException( e.getMessage(), e );\n        }\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testInstallFileWithChecksum()\n        throws Exception\n    {\n        File testPom =\n            new File( getBasedir(), \"target/test-classes/unit/install-file-with-checksum/\" + \"plugin-config.xml\" );\n\n        InstallFileMojo mojo = (InstallFileMojo) lookupMojo( \"install-file\", testPom );\n\n        assertNotNull( mojo );\n        \n        setVariableValueToObject( mojo, \"session\", createMavenSession() );\n\n        assignValuesForParameter( mojo );\n\n        boolean createChecksum = (Boolean) getVariableValueFromObject( mojo, \"createChecksum\" );\n\n        assertTrue( createChecksum );\n\n        mojo.execute();\n\n        //get the actual checksum of the artifact\n        mojo.digester.calculate( file );\n        String actualMd5Sum = mojo.digester.getMd5();\n        String actualSha1Sum = mojo.digester.getSha1();\n\n        String localPath = getBasedir() + \"/\" + LOCAL_REPO + groupId + \"/\" + artifactId + \"/\" + version + \"/\" +\n            artifactId + \"-\" + version;\n\n        File installedArtifact = new File( localPath + \".\" + \"jar\" );\n\n        File md5 = new File( localPath + \".jar.md5\" );\n        File sha1 = new File( localPath + \".jar.sha1\" );\n\n        assertTrue( md5.exists() );\n        assertTrue( sha1.exists() );\n\n        String generatedMd5 = FileUtils.fileRead( md5, \"UTF-8\" );\n        String generatedSha1 = FileUtils.fileRead( sha1, \"UTF-8\" );\n\n        assertEquals( actualMd5Sum, generatedMd5 );\n        assertEquals( actualSha1Sum, generatedSha1 );\n\n        assertTrue( installedArtifact.exists() );\n        \n        assertEquals( 9, FileUtils.getFiles( new File( LOCAL_REPO ), null, null ).size() );\n    }","id":21149,"modified_method":"public void testInstallFileWithChecksum()\n        throws Exception\n    {\n        File testPom =\n            new File( getBasedir(), \"target/test-classes/unit/install-file-with-checksum/\" + \"plugin-config.xml\" );\n\n        InstallFileMojo mojo = (InstallFileMojo) lookupMojo( \"install-file\", testPom );\n\n        assertNotNull( mojo );\n        \n        setVariableValueToObject( mojo, \"session\", createMavenSession() );\n\n        assignValuesForParameter( mojo );\n\n        boolean createChecksum = (Boolean) getVariableValueFromObject( mojo, \"createChecksum\" );\n\n        assertTrue( createChecksum );\n\n        mojo.execute();\n\n        String localPath = getBasedir() + \"/\" + LOCAL_REPO + groupId + \"/\" + artifactId + \"/\" + version + \"/\" +\n                        artifactId + \"-\" + version;\n        \n        File installedArtifact = new File( localPath + \".\" + \"jar\" );\n        \n        //get the actual checksum of the artifact\n        Map<String, Object> csums = ChecksumUtils.calc( file, Utils.CHECKSUM_ALGORITHMS );\n        for (Map.Entry<String, Object> csum : csums.entrySet()) {\n            Object actualSum = csum.getValue();\n            File sum = new File( localPath + \".jar.\" + csum.getKey().toLowerCase().replace( \"-\", \"\" ) );\n            assertTrue( sum.exists() );\n            String generatedSum = FileUtils.fileRead( sum, \"UTF-8\" );\n            assertEquals( actualSum, generatedSum );\n        }\n\n        assertTrue( installedArtifact.exists() );\n        \n        assertEquals( 9, FileUtils.getFiles( new File( LOCAL_REPO ), null, null ).size() );\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void assignValuesForParameter( Object obj )\n        throws Exception\n    {\n        this.groupId = dotToSlashReplacer( (String) getVariableValueFromObject( obj, \"groupId\" ) );\n\n        this.legacyGroupId = (String) getVariableValueFromObject( obj, \"groupId\" );\n\n        this.artifactId = (String) getVariableValueFromObject( obj, \"artifactId\" );\n\n        this.version = (String) getVariableValueFromObject( obj, \"version\" );\n\n        this.packaging = (String) getVariableValueFromObject( obj, \"packaging\" );\n\n        this.classifier = (String) getVariableValueFromObject( obj, \"classifier\" );\n\n        this.file = (File) getVariableValueFromObject( obj, \"file\" );\n    }","id":21150,"modified_method":"private void assignValuesForParameter( Object obj )\n        throws Exception\n    {\n        this.groupId = dotToSlashReplacer( (String) getVariableValueFromObject( obj, \"groupId\" ) );\n\n        this.artifactId = (String) getVariableValueFromObject( obj, \"artifactId\" );\n\n        this.version = (String) getVariableValueFromObject( obj, \"version\" );\n\n        this.packaging = (String) getVariableValueFromObject( obj, \"packaging\" );\n\n        this.classifier = (String) getVariableValueFromObject( obj, \"classifier\" );\n\n        this.file = (File) getVariableValueFromObject( obj, \"file\" );\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testBasicInstallAndCreateChecksumIsTrue()\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"target/test-classes/unit/basic-install-checksum/plugin-config.xml\" );\n\n        AbstractInstallMojo mojo = (AbstractInstallMojo) lookupMojo( \"install\", testPom );\n\n        assertNotNull( mojo );\n\n        File file = new File( getBasedir(), \"target/test-classes/unit/basic-install-checksum/\" + \"maven-test-jar.jar\" );\n\n        MavenProject project = (MavenProject) getVariableValueFromObject( mojo, \"project\" );\n        updateMavenProject( project );\n\n        setVariableValueToObject( mojo, \"reactorProjects\", Collections.singletonList( project ) );\n        setVariableValueToObject( mojo, \"session\", createMavenSession() );\n\n        artifact = (InstallArtifactStub) project.getArtifact();\n\n        boolean createChecksum = (Boolean) getVariableValueFromObject( mojo, \"createChecksum\" );\n\n        assertTrue( createChecksum );\n\n        artifact.setFile( file );\n\n        mojo.execute();\n\n        ArtifactMetadata metadata = null;\n        for ( Object o : artifact.getMetadataList() )\n        {\n            metadata = (ArtifactMetadata) o;\n            if ( metadata.getRemoteFilename().endsWith( \"pom\" ) )\n            {\n                break;\n            }\n        }\n\n        ArtifactRepository localRepo = (ArtifactRepository) getVariableValueFromObject( mojo, \"localRepository\" );\n\n        File pom = new File( localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata( metadata, localRepo ) );\n\n        assertTrue( pom.exists() );\n\n        //get the actual checksum of the pom\n        mojo.digester.calculate( pom );\n        String actualPomMd5Sum = mojo.digester.getMd5();\n        String actualPomSha1Sum = mojo.digester.getSha1();\n\n        //get the actual checksum of the artifact\n        mojo.digester.calculate( file );\n        String actualMd5Sum = mojo.digester.getMd5();\n        String actualSha1Sum = mojo.digester.getSha1();\n\n        String groupId = dotToSlashReplacer( artifact.getGroupId() );\n\n        String packaging = project.getPackaging();\n\n        String localPath = getBasedir() + \"/\" + LOCAL_REPO + groupId + \"/\" + artifact.getArtifactId() + \"/\" +\n            artifact.getVersion() + \"/\" + artifact.getArtifactId() + \"-\" + artifact.getVersion();\n\n        File installedArtifact = new File( localPath + \".\" + packaging );\n\n        File pomMd5 = new File( localPath + \".pom.md5\" );\n        File pomSha1 = new File( localPath + \".pom.sha1\" );\n\n        File md5 = new File( localPath + \".\" + packaging + \".md5\" );\n        File sha1 = new File( localPath + \".\" + packaging + \".sha1\" );\n\n        assertTrue( pomMd5.exists() );\n        assertTrue( pomSha1.exists() );\n        assertTrue( md5.exists() );\n        assertTrue( sha1.exists() );\n\n        String generatedMd5 = FileUtils.fileRead( md5, \"UTF-8\" );\n        String generatedSha1 = FileUtils.fileRead( sha1, \"UTF-8\" );\n        String generatedPomMd5 = FileUtils.fileRead( pomMd5, \"UTF-8\" );\n        String generatedPomSha1 = FileUtils.fileRead( pomSha1, \"UTF-8\" );\n\n        assertEquals( actualMd5Sum, generatedMd5 );\n        assertEquals( actualSha1Sum, generatedSha1 );\n        assertEquals( actualPomMd5Sum, generatedPomMd5 );\n        assertEquals( actualPomSha1Sum, generatedPomSha1 );\n\n        assertTrue( installedArtifact.exists() );\n        \n        assertEquals( 9, FileUtils.getFiles( new File( LOCAL_REPO ), null, null ).size() );\n    }","id":21151,"modified_method":"public void testBasicInstallAndCreateChecksumIsTrue()\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"target/test-classes/unit/basic-install-checksum/plugin-config.xml\" );\n\n        AbstractInstallMojo mojo = (AbstractInstallMojo) lookupMojo( \"install\", testPom );\n\n        assertNotNull( mojo );\n\n        File file = new File( getBasedir(), \"target/test-classes/unit/basic-install-checksum/\" + \"maven-test-jar.jar\" );\n\n        MavenProject project = (MavenProject) getVariableValueFromObject( mojo, \"project\" );\n        updateMavenProject( project );\n\n        setVariableValueToObject( mojo, \"reactorProjects\", Collections.singletonList( project ) );\n        setVariableValueToObject( mojo, \"session\", createMavenSession() );\n\n        artifact = (InstallArtifactStub) project.getArtifact();\n\n        boolean createChecksum = (Boolean) getVariableValueFromObject( mojo, \"createChecksum\" );\n\n        assertTrue( createChecksum );\n\n        artifact.setFile( file );\n\n        mojo.execute();\n\n        ArtifactMetadata metadata = null;\n        for ( Object o : artifact.getMetadataList() )\n        {\n            metadata = (ArtifactMetadata) o;\n            if ( metadata.getRemoteFilename().endsWith( \"pom\" ) )\n            {\n                break;\n            }\n        }\n\n        ArtifactRepository localRepo = (ArtifactRepository) getVariableValueFromObject( mojo, \"localRepository\" );\n\n        File pom = new File( localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata( metadata, localRepo ) );\n\n        assertTrue( pom.exists() );\n\n        String groupId = dotToSlashReplacer( artifact.getGroupId() );\n        String packaging = project.getPackaging();\n        String localPath = getBasedir() + \"/\" + LOCAL_REPO + groupId + \"/\" + artifact.getArtifactId() + \"/\" +\n                        artifact.getVersion() + \"/\" + artifact.getArtifactId() + \"-\" + artifact.getVersion();\n        \n        //get the actual checksum of the pom\n        Map<String, Object> csums = ChecksumUtils.calc( pom, Utils.CHECKSUM_ALGORITHMS );\n        for (Map.Entry<String, Object> csum : csums.entrySet()) {\n            Object actualPomSum = csum.getValue();\n            File pomSum = new File( localPath + \".pom.\" + csum.getKey().toLowerCase().replace( \"-\", \"\" ) );\n            assertTrue( pomSum.exists() );\n            String generatedPomSum = FileUtils.fileRead( pomSum, \"UTF-8\" );\n            assertEquals( actualPomSum, generatedPomSum );\n        }\n\n        //get the actual checksum of the artifact\n        csums = ChecksumUtils.calc( file, Utils.CHECKSUM_ALGORITHMS );\n        for (Map.Entry<String, Object> csum : csums.entrySet()) {\n            Object actualSum = csum.getValue();\n            File sum = new File( localPath + \".\" + packaging + \".\" + csum.getKey().toLowerCase().replace( \"-\", \"\" ) );\n            assertTrue( sum.exists() );\n            String generatedSum = FileUtils.fileRead( sum, \"UTF-8\" );\n            assertEquals( actualSum, generatedSum );\n        }\n\n        File installedArtifact = new File( localPath + \".\" + packaging );\n\n        assertTrue( installedArtifact.exists() );\n        \n        assertEquals( 9, FileUtils.getFiles( new File( LOCAL_REPO ), null, null ).size() );\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Verifies a checksum file in the local repo.\n     *\n     * @param checksumFile The checksum file to verify, must not be <code>null<\/code>.\n     */\n    public static void verifyChecksum( File checksumFile )\n        throws MojoExecutionException, IOException\n    {\n        File dataFile;\n        SimpleDigester digester;\n        if ( checksumFile.getName().endsWith( \".md5\" ) )\n        {\n            digester = SimpleDigester.md5();\n            dataFile = new File( checksumFile.getPath().substring( 0, checksumFile.getPath().length() - 4 ) );\n        }\n        else if ( checksumFile.getName().endsWith( \".sha1\" ) )\n        {\n            digester = SimpleDigester.sha1();\n            dataFile = new File( checksumFile.getPath().substring( 0, checksumFile.getPath().length() - 5 ) );\n        }\n        else\n        {\n            throw new IllegalArgumentException( \"Unsupported checksum file: \" + checksumFile );\n        }\n\n        String expected = FileUtils.fileRead( checksumFile, \"UTF-8\" );\n        digester.verify( dataFile, expected );\n    }","id":21152,"modified_method":"/**\n     * Verifies the checksum files in the local repo for the given file.\n     *\n     * @param file The file to verify its checksum with, must not be <code>null<\/code>.\n     * @throws MojoExecutionException In case the checksums were incorrect.\n     * @throws IOException If the files couldn't be read.\n     */\n    public static void verifyChecksum( File file )\n        throws MojoExecutionException, IOException\n    {\n        Map<String, Object> checksums = ChecksumUtils.calc( file, CHECKSUM_ALGORITHMS );\n        for ( Map.Entry<String, Object> entry : checksums.entrySet() )\n        {\n            File cksumFile = new File( file + \".\" + entry.getKey().toLowerCase().replace( \"-\", \"\" ) );\n            String actualChecksum = ChecksumUtils.read( cksumFile );\n            if ( !actualChecksum.equals( entry.getValue() ) )\n            {\n                throw new MojoExecutionException( \"Incorrect \" + entry.getKey() + \" checksum for file: \" + file );\n            }\n        }\n    }","commit_id":"88157025830de105f092aed6e70c4000b229e5e1","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \"+toLogString(val));\n                putValue(var.getAlias(), val);\n            }\n        }\n    }","id":21153,"modified_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                if (val.isError()) {\n                    log().error(\"storeResult: got an error for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], but we should only be getting non-errors: \" + val);\n                } else if (val.isEndOfMib()) {\n                    log().debug(\"storeResult: got endOfMib for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], not storing\");\n                } else {\n                    SnmpValueType type = SnmpValueType.valueOf(val.getType());\n                    log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \" + (type == null ? \"Unknown\" : type.getDisplayString()) + \": \"+toLogString(val));\n                    putValue(var.getAlias(), val);\n                }\n            }\n        }\n    }","commit_id":"e459d0a42a8167bec6c13f815690dfe475e47a31","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \"+toLogString(val));\n                putValue(var.getAlias(), val);\n            }\n        }\n    }","id":21154,"modified_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                if (val.isError()) {\n                    log().error(\"storeResult: got an error for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], but we should only be getting non-errors: \" + val);\n                } else if (val.isEndOfMib()) {\n                    log().debug(\"storeResult: got endOfMib for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], not storing\");\n                } else {\n                    SnmpValueType type = SnmpValueType.valueOf(val.getType());\n                    log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \" + (type == null ? \"Unknown\" : type.getDisplayString()) + \": \"+toLogString(val));\n                    putValue(var.getAlias(), val);\n                }\n            }\n        }\n    }","commit_id":"e53e5e64d1a0f9911b670d67d6e014b210a54924","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \"+toLogString(val));\n                putValue(var.getAlias(), val);\n            }\n        }\n    }","id":21155,"modified_method":"public void storeResult(SnmpObjId base, SnmpInstId inst, SnmpValue val) {\n        putValue(base.toString(), val);\n        for(int i = 0; i < ms_elemList.length; i++) {\n            NamedSnmpVar var = ms_elemList[i];\n            if (base.equals(var.getSnmpObjId())) {\n                if (val.isError()) {\n                    log().error(\"storeResult: got an error for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], but we should only be getting non-errors: \" + val);\n                } else if (val.isEndOfMib()) {\n                    log().debug(\"storeResult: got endOfMib for alias \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"], not storing\");\n                } else {\n                    SnmpValueType type = SnmpValueType.valueOf(val.getType());\n                    log().debug(\"Storing Result: alias: \"+var.getAlias()+\" [\"+base+\"].[\"+inst+\"] = \" + (type == null ? \"Unknown\" : type.getDisplayString()) + \": \"+toLogString(val));\n                    putValue(var.getAlias(), val);\n                }\n            }\n        }\n    }","commit_id":"12f4accce6ad4588516824d3eca4fae302b9d3bc","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void removeRule(final String packageName,\r\n                           final String ruleName) {\r\n        final Package pkg = (Package) this.pkgs.get( packageName );\r\n        final Rule rule = pkg.getRule( ruleName );\r\n        // Iterate each workingMemory and lock it\r\n        // This is so we don't update the Rete network during propagation\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n            workingMemory.getLock().lock();\r\n        }\r\n        removeRule( rule );\r\n        pkg.removeRule( rule );\r\n\r\n        // Iterate and unlock\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n            workingMemory.getLock().unlock();\r\n        }\r\n    }","id":21156,"modified_method":"public void removeRule(final String packageName,\r\n                           final String ruleName) {\r\n        final Package pkg = (Package) this.pkgs.get( packageName );\r\n        final Rule rule = pkg.getRule( ruleName );\r\n\r\n        int lastAquiredLock = 0;\r\n        // get a snapshot of current working memories for locking\r\n        AbstractWorkingMemory[] wms = (AbstractWorkingMemory[]) this.workingMemories.keySet().toArray( new AbstractWorkingMemory[this.workingMemories.size()] );\r\n\r\n        try {\r\n            // Iterate each workingMemory and lock it\r\n            // This is so we don't update the Rete network during propagation\r\n            for ( lastAquiredLock = 0; lastAquiredLock < wms.length; lastAquiredLock++ ) {\r\n                wms[lastAquiredLock].getLock().lock();\r\n            }\r\n            \r\n            removeRule( rule );\r\n            pkg.removeRule( rule );\r\n\r\n        } finally {\r\n            // Iterate each workingMemory and attempt to fire any rules, that were activated as a result \r\n            // of the new rule addition. Unlock after fireAllRules();\r\n            for ( lastAquiredLock--; lastAquiredLock > -1; lastAquiredLock-- ) {\r\n                wms[lastAquiredLock].getLock().unlock();\r\n            }\r\n        }\r\n    }","commit_id":"fbee6fdd1daf65191712e0f8ac8774575cf7d1e3","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void removePackage(final String packageName) {\r\n        final Package pkg = (Package) this.pkgs.get( packageName );\r\n        // Iterate each workingMemory and lock it\r\n        // This is so we don't update the Rete network during propagation\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n            workingMemory.getLock().lock();\r\n        }\r\n\r\n        final Rule[] rules = pkg.getRules();\r\n\r\n        for ( int i = 0; i < rules.length; ++i ) {\r\n            removeRule( rules[i] );\r\n        }\r\n\r\n        this.packageClassLoader.removeClassLoader( pkg.getPackageCompilationData().getClassLoader() );\r\n\r\n        pkg.clear();\r\n\r\n        // getting the list of referenced globals \r\n        final Set referencedGlobals = new HashSet();\r\n        for ( final Iterator it = this.pkgs.values().iterator(); it.hasNext(); ) {\r\n            final org.drools.rule.Package pkgref = (org.drools.rule.Package) it.next();\r\n            if ( pkgref != pkg ) {\r\n                referencedGlobals.addAll( pkgref.getGlobals().keySet() );\r\n            }\r\n        }\r\n        // removing globals declared inside the package that are not shared\r\n        for ( final Iterator it = pkg.getGlobals().keySet().iterator(); it.hasNext(); ) {\r\n            final String globalName = (String) it.next();\r\n            if ( !referencedGlobals.contains( globalName ) ) {\r\n                this.globals.remove( globalName );\r\n            }\r\n        }\r\n        // removing the package itself from the list\r\n        this.pkgs.remove( pkg.getName() );\r\n\r\n        // Iterate and unlock\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n            workingMemory.getLock().unlock();\r\n        }\r\n    }","id":21157,"modified_method":"public void removePackage(final String packageName) {\r\n        final Package pkg = (Package) this.pkgs.get( packageName );\r\n\r\n        int lastAquiredLock = 0;\r\n        // get a snapshot of current working memories for locking\r\n        AbstractWorkingMemory[] wms = (AbstractWorkingMemory[]) this.workingMemories.keySet().toArray( new AbstractWorkingMemory[this.workingMemories.size()] );\r\n\r\n        try {\r\n            // Iterate each workingMemory and lock it\r\n            // This is so we don't update the Rete network during propagation\r\n            for ( lastAquiredLock = 0; lastAquiredLock < wms.length; lastAquiredLock++ ) {\r\n                wms[lastAquiredLock].getLock().lock();\r\n            }\r\n            \r\n            final Rule[] rules = pkg.getRules();\r\n\r\n            for ( int i = 0; i < rules.length; ++i ) {\r\n                removeRule( rules[i] );\r\n            }\r\n\r\n            this.packageClassLoader.removeClassLoader( pkg.getPackageCompilationData().getClassLoader() );\r\n\r\n            pkg.clear();\r\n\r\n            // getting the list of referenced globals \r\n            final Set referencedGlobals = new HashSet();\r\n            for ( final Iterator it = this.pkgs.values().iterator(); it.hasNext(); ) {\r\n                final org.drools.rule.Package pkgref = (org.drools.rule.Package) it.next();\r\n                if ( pkgref != pkg ) {\r\n                    referencedGlobals.addAll( pkgref.getGlobals().keySet() );\r\n                }\r\n            }\r\n            // removing globals declared inside the package that are not shared\r\n            for ( final Iterator it = pkg.getGlobals().keySet().iterator(); it.hasNext(); ) {\r\n                final String globalName = (String) it.next();\r\n                if ( !referencedGlobals.contains( globalName ) ) {\r\n                    this.globals.remove( globalName );\r\n                }\r\n            }\r\n            // removing the package itself from the list\r\n            this.pkgs.remove( pkg.getName() );\r\n        } finally {\r\n            // Iterate each workingMemory and attempt to fire any rules, that were activated as a result \r\n            // of the new rule addition. Unlock after fireAllRules();\r\n            for ( lastAquiredLock--; lastAquiredLock > -1; lastAquiredLock-- ) {\r\n                wms[lastAquiredLock].fireAllRules();\r\n                wms[lastAquiredLock].getLock().unlock();\r\n            }\r\n        }\r\n    }","commit_id":"fbee6fdd1daf65191712e0f8ac8774575cf7d1e3","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Add a <code>Package<\/code> to the network. Iterates through the\r\n     * <code>Package<\/code> adding Each individual <code>Rule<\/code> to the\r\n     * network. Before update network each referenced <code>WorkingMemory<\/code>\r\n     * is locked.\r\n     * \r\n     * @param pkg\r\n     *            The package to add.\r\n     * @throws PackageIntegrationException \r\n     * \r\n     * @throws RuleIntegrationException\r\n     *             if an error prevents complete construction of the network for\r\n     *             the <code>Rule<\/code>.\r\n     * @throws FactException\r\n     * @throws InvalidPatternException\r\n     */\r\n    public void addPackage(final Package newPkg) throws PackageIntegrationException {\r\n        newPkg.checkValidity();\r\n        final Package pkg = (Package) this.pkgs.get( newPkg.getName() );\r\n\r\n        // Iterate each workingMemory and lock it\r\n        // This is so we don't update the Rete network during propagation\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n            workingMemory.getLock().lock();\r\n        }\r\n\r\n        if ( pkg != null ) {\r\n            mergePackage( pkg,\r\n                          newPkg );\r\n        } else {\r\n            this.pkgs.put( newPkg.getName(),\r\n                           newPkg );\r\n        }\r\n\r\n        final Map newGlobals = newPkg.getGlobals();\r\n\r\n        // Check that the global data is valid, we cannot change the type\r\n        // of an already declared global variable\r\n        for ( final Iterator it = newGlobals.keySet().iterator(); it.hasNext(); ) {\r\n            final String identifier = (String) it.next();\r\n            final Class type = (Class) newGlobals.get( identifier );\r\n            boolean f =  this.globals.containsKey( identifier );\r\n            if ( f ) {\r\n                boolean y = !this.globals.get( identifier ).equals( type );\r\n                if ( f &&  y ) {\r\n                    throw new PackageIntegrationException( pkg );\r\n                }\r\n            }\r\n        }\r\n        this.globals.putAll( newGlobals );\r\n\r\n        final Rule[] rules = newPkg.getRules();\r\n\r\n        for ( int i = 0; i < rules.length; ++i ) {\r\n            addRule( rules[i] );\r\n        }\r\n\r\n        this.packageClassLoader.addClassLoader( newPkg.getPackageCompilationData().getClassLoader() );\r\n\r\n        // Iterate each workingMemory and attempt to fire any rules, that were activated as a result \r\n        // of the new rule addition. Unlock after fireAllRules();\r\n        for ( final Iterator it = this.workingMemories.keySet().iterator(); it.hasNext(); ) {\r\n            final AbstractWorkingMemory workingMemory = (AbstractWorkingMemory) it.next();\r\n\r\n            workingMemory.fireAllRules();\r\n            workingMemory.getLock().unlock();\r\n        }\r\n    }","id":21158,"modified_method":"/**\r\n     * Add a <code>Package<\/code> to the network. Iterates through the\r\n     * <code>Package<\/code> adding Each individual <code>Rule<\/code> to the\r\n     * network. Before update network each referenced <code>WorkingMemory<\/code>\r\n     * is locked.\r\n     * \r\n     * @param pkg\r\n     *            The package to add.\r\n     * @throws PackageIntegrationException \r\n     * \r\n     * @throws RuleIntegrationException\r\n     *             if an error prevents complete construction of the network for\r\n     *             the <code>Rule<\/code>.\r\n     * @throws FactException\r\n     * @throws InvalidPatternException\r\n     */\r\n    public void addPackage(final Package newPkg) throws PackageIntegrationException {\r\n        newPkg.checkValidity();\r\n        final Package pkg = (Package) this.pkgs.get( newPkg.getName() );\r\n        int lastAquiredLock = 0;\r\n        // get a snapshot of current working memories for locking\r\n        AbstractWorkingMemory[] wms = (AbstractWorkingMemory[]) this.workingMemories.keySet().toArray( new AbstractWorkingMemory[this.workingMemories.size()] );\r\n\r\n        try {\r\n            // Iterate each workingMemory and lock it\r\n            // This is so we don't update the Rete network during propagation\r\n            for ( lastAquiredLock = 0; lastAquiredLock < wms.length; lastAquiredLock++ ) {\r\n                wms[lastAquiredLock].getLock().lock();\r\n            }\r\n\r\n            if ( pkg != null ) {\r\n                mergePackage( pkg,\r\n                              newPkg );\r\n            } else {\r\n                this.pkgs.put( newPkg.getName(),\r\n                               newPkg );\r\n            }\r\n\r\n            final Map newGlobals = newPkg.getGlobals();\r\n\r\n            // Check that the global data is valid, we cannot change the type\r\n            // of an already declared global variable\r\n            for ( final Iterator it = newGlobals.keySet().iterator(); it.hasNext(); ) {\r\n                final String identifier = (String) it.next();\r\n                final Class type = (Class) newGlobals.get( identifier );\r\n                boolean f = this.globals.containsKey( identifier );\r\n                if ( f ) {\r\n                    boolean y = !this.globals.get( identifier ).equals( type );\r\n                    if ( f && y ) {\r\n                        throw new PackageIntegrationException( pkg );\r\n                    }\r\n                }\r\n            }\r\n            this.globals.putAll( newGlobals );\r\n\r\n            final Rule[] rules = newPkg.getRules();\r\n\r\n            for ( int i = 0; i < rules.length; ++i ) {\r\n                addRule( rules[i] );\r\n            }\r\n\r\n            this.packageClassLoader.addClassLoader( newPkg.getPackageCompilationData().getClassLoader() );\r\n\r\n        } finally {\r\n            // Iterate each workingMemory and attempt to fire any rules, that were activated as a result \r\n            // of the new rule addition. Unlock after fireAllRules();\r\n            for ( lastAquiredLock--; lastAquiredLock > -1; lastAquiredLock-- ) {\r\n                wms[lastAquiredLock].fireAllRules();\r\n                wms[lastAquiredLock].getLock().unlock();\r\n            }\r\n        }\r\n\r\n    }","commit_id":"fbee6fdd1daf65191712e0f8ac8774575cf7d1e3","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(url, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21159,"modified_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(m_cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"22ec0b7f4e2d0701414c6d47cfaa8a350a796f4c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(url, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21160,"modified_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"22ec0b7f4e2d0701414c6d47cfaa8a350a796f4c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        RWSClientApi.init();\n        \n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","id":21161,"modified_method":"public void afterPropertiesSet() throws Exception {\n        //FIXME this should be done by spring\n        RWSClientApi.init();\n        m_cp = new ConnectionProperties(m_rwsConfig.getBaseUrl().getServer_url(),m_rwsConfig.getBaseUrl().getDirectory(),m_rwsConfig.getBaseUrl().getTimeout());\n        log().debug(\"Connections used :\" +m_rwsConfig.getBaseUrl().getServer_url()+m_rwsConfig.getBaseUrl().getDirectory());\n        log().debug(\"timeout: \"+m_rwsConfig.getBaseUrl().getTimeout());\n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","commit_id":"22ec0b7f4e2d0701414c6d47cfaa8a350a796f4c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        \n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","id":21162,"modified_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        // Antonio: I'm working on the configuration file and the group\n        // is written in the configuration file\n        // in principle you can provide rancid node to more then a group\n //       String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        String group = m_rancidAdapterConfig.getGroup();\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        // It is in the Configuration file for Rancid ADapter\n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","commit_id":"22ec0b7f4e2d0701414c6d47cfaa8a350a796f4c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            //FIXME: Gugliemo, I made this change... we're keeping a reference to the RancidNode object,\n            //no need to look it up now via the API unless you think we still need to do this.\n            //RancidNode r_node = RWSClientApi.getRWSRancidNode(url, m_rancidAdapterConfig.getGroup(), node.getLabel());\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n\n            //FIXME: something looks weird with this if statement\n            if (rNode.getDeviceName() != null ) {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.updateRWSRancidNode(url, rNode);\n            } else {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.createRWSRancidNode(url, rNode);                \n            }\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21163,"modified_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"22ec0b7f4e2d0701414c6d47cfaa8a350a796f4c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(url, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21164,"modified_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(m_cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"f80e2de633e15ec1609e2700d6ebdfb898dc3be2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(url, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21165,"modified_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"f80e2de633e15ec1609e2700d6ebdfb898dc3be2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        \n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","id":21166,"modified_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        // Antonio: I'm working on the configuration file and the group\n        // is written in the configuration file\n        // in principle you can provide rancid node to more then a group\n //       String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        String group = m_rancidAdapterConfig.getGroup();\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        // It is in the Configuration file for Rancid ADapter\n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","commit_id":"f80e2de633e15ec1609e2700d6ebdfb898dc3be2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        RWSClientApi.init();\n        \n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","id":21167,"modified_method":"public void afterPropertiesSet() throws Exception {\n        //FIXME this should be done by spring\n        RWSClientApi.init();\n        m_cp = new ConnectionProperties(m_rwsConfig.getBaseUrl().getServer_url(),m_rwsConfig.getBaseUrl().getDirectory(),m_rwsConfig.getBaseUrl().getTimeout());\n        log().debug(\"Connections used :\" +m_rwsConfig.getBaseUrl().getServer_url()+m_rwsConfig.getBaseUrl().getDirectory());\n        log().debug(\"timeout: \"+m_rwsConfig.getBaseUrl().getTimeout());\n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","commit_id":"f80e2de633e15ec1609e2700d6ebdfb898dc3be2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            //FIXME: Gugliemo, I made this change... we're keeping a reference to the RancidNode object,\n            //no need to look it up now via the API unless you think we still need to do this.\n            //RancidNode r_node = RWSClientApi.getRWSRancidNode(url, m_rancidAdapterConfig.getGroup(), node.getLabel());\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n\n            //FIXME: something looks weird with this if statement\n            if (rNode.getDeviceName() != null ) {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.updateRWSRancidNode(url, rNode);\n            } else {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.createRWSRancidNode(url, rNode);                \n            }\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21168,"modified_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"f80e2de633e15ec1609e2700d6ebdfb898dc3be2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            //FIXME: Gugliemo, I made this change... we're keeping a reference to the RancidNode object,\n            //no need to look it up now via the API unless you think we still need to do this.\n            //RancidNode r_node = RWSClientApi.getRWSRancidNode(url, m_rancidAdapterConfig.getGroup(), node.getLabel());\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n\n            //FIXME: something looks weird with this if statement\n            if (rNode.getDeviceName() != null ) {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.updateRWSRancidNode(url, rNode);\n            } else {\n                rNode = getSuitableRancidNode(node);\n                RWSClientApi.createRWSRancidNode(url, rNode);                \n            }\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21169,"modified_method":"@Transactional\n    public void updateNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"9a1adff852f748be53d49c855016984d72b94e4a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(url, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21170,"modified_method":"@Transactional\n    public void deleteNode(int nodeId) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode\");\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n            RWSClientApi.deleteRWSRancidNode(m_cp, rNode);\n            \n            RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n            RWSClientApi.deleteRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"9a1adff852f748be53d49c855016984d72b94e4a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        RWSClientApi.init();\n        \n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","id":21171,"modified_method":"public void afterPropertiesSet() throws Exception {\n        //FIXME this should be done by spring\n        RWSClientApi.init();\n        m_cp = new ConnectionProperties(m_rwsConfig.getBaseUrl().getServer_url(),m_rwsConfig.getBaseUrl().getDirectory(),m_rwsConfig.getBaseUrl().getTimeout());\n        log().debug(\"Connections used :\" +m_rwsConfig.getBaseUrl().getServer_url()+m_rwsConfig.getBaseUrl().getDirectory());\n        log().debug(\"timeout: \"+m_rwsConfig.getBaseUrl().getTimeout());\n        Assert.notNull(m_nodeDao, \"Rancid Provisioning Adapter requires nodeDao property to be set.\");\n        \n        List<OnmsNode> nodes = m_nodeDao.findAllProvisionedNodes();\n        m_onmsNodeRancidNodeMap = new ConcurrentHashMap<Integer, RancidNodeContainer>(nodes.size());\n        \n        for (OnmsNode onmsNode : nodes) {\n            RancidNode rNode = getSuitableRancidNode(onmsNode);\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(onmsNode);\n            \n            m_onmsNodeRancidNodeMap.putIfAbsent(onmsNode.getId(), new RancidNodeContainer(rNode, rAuth));\n        }\n        \n    }","commit_id":"9a1adff852f748be53d49c855016984d72b94e4a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            String url = m_rwsConfig.getBaseUrl().getServer_url();\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(url, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(url, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","id":21172,"modified_method":"@Transactional\n    public void addNode(int nodeId) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode\");\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createRWSRancidNode(m_cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(m_cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            sendAndThrow(nodeId, e);\n        }\n    }","commit_id":"9a1adff852f748be53d49c855016984d72b94e4a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        \n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","id":21173,"modified_method":"private RancidNode getSuitableRancidNode(OnmsNode node) {\n        \n\n        //FIXME: Guglielmo, the group should be the foreign source of the node\n        // Antonio: I'm working on the configuration file and the group\n        // is written in the configuration file\n        // in principle you can provide rancid node to more then a group\n //       String group = node.getForeignSource();\n//        RancidNode r_node = new RancidNode(m_rancidAdapterConfig.getGroup(), node.getLabel());\n        String group = m_rancidAdapterConfig.getGroup();\n        RancidNode r_node = new RancidNode(group, node.getLabel());\n\n        //FIXME: Guglielmo, the device type is going to have to be mapped by SysObjectId...\n        //that should probably be in the RancidNode class\n        // It is in the Configuration file for Rancid ADapter\n        r_node.setDeviceType(RancidNode.DEVICE_TYPE_CISCO_IOS);\n        r_node.setStateUp(false);\n        r_node.setComment(RANCID_COMMENT);\n        return r_node;\n\n    }","commit_id":"9a1adff852f748be53d49c855016984d72b94e4a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean isDeleteOwn(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isDeleteOwn(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getDeleteOwn() == null\r\n        || messagePermission.getDeleteOwn() == Boolean.FALSE)\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG\r\n            .debug(\"Role :\" + getCurrentUserRole()\r\n                + \"is not allowed to delete own  messages for given topic \"\r\n                + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getDeleteOwn() == Boolean.TRUE\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft() == Boolean.FALSE\r\n        && topic.getLocked() == Boolean.FALSE)\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","id":21174,"modified_method":"public boolean isDeleteOwn(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isDeleteOwn(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getDeleteOwn() == null\r\n        || messagePermission.getDeleteOwn().equals(Boolean.FALSE))\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG\r\n            .debug(\"Role :\" + getCurrentUserRole()\r\n                + \"is not allowed to delete own  messages for given topic \"\r\n                + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getDeleteOwn().equals(Boolean.TRUE)\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft().equals(Boolean.FALSE)\r\n        && topic.getLocked().equals(Boolean.FALSE))\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","commit_id":"c58b7ae1b40e7729ff961435a8b7a08ab44d3e39","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\r\n   * @param topic\r\n   * @param forum\r\n   * @return\r\n   */\r\n  private boolean checkBaseConditions(DiscussionTopic topic,\r\n      DiscussionForum forum)\r\n  {\r\n    if (isSuperUser())\r\n    {\r\n      return true;\r\n    }\r\n    if (forum.getLocked() == null || forum.getLocked() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This Forum is Locked\");\r\n      return false;\r\n    }\r\n    if (forum.getDraft() == null || forum.getDraft() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This forum is a draft\");\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n      return false;\r\n    }\r\n    return false;\r\n  }","id":21175,"modified_method":"/**\r\n   * @param topic\r\n   * @param forum\r\n   * @return\r\n   */\r\n  private boolean checkBaseConditions(DiscussionTopic topic,\r\n      DiscussionForum forum)\r\n  {\r\n    if (isSuperUser())\r\n    {\r\n      return true;\r\n    }\r\n    if (forum.getLocked() == null || forum.getLocked().equals(Boolean.FALSE))\r\n    {\r\n      LOG.debug(\"This Forum is Locked\");\r\n      return false;\r\n    }\r\n    if (forum.getDraft() == null || forum.getDraft().equals(Boolean.FALSE))\r\n    {\r\n      LOG.debug(\"This forum is a draft\");\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n      return false;\r\n    }\r\n    return false;\r\n  }","commit_id":"c58b7ae1b40e7729ff961435a8b7a08ab44d3e39","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean isMarkAsRead(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isMarkAsRead(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getMarkAsRead() == null\r\n        || messagePermission.getMarkAsRead() == Boolean.FALSE)\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG.debug(\"Role :\" + getCurrentUserRole()\r\n            + \"is not allowed to mark messages as read for given topic \"\r\n            + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getMarkAsRead() == Boolean.TRUE\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft() == Boolean.FALSE\r\n        && topic.getLocked() == Boolean.FALSE)\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","id":21176,"modified_method":"public boolean isMarkAsRead(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isMarkAsRead(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getMarkAsRead() == null\r\n        || messagePermission.getMarkAsRead().equals(Boolean.FALSE))\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG.debug(\"Role :\" + getCurrentUserRole()\r\n            + \"is not allowed to mark messages as read for given topic \"\r\n            + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getMarkAsRead().equals(Boolean.TRUE)\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft().equals(Boolean.FALSE)\r\n        && topic.getLocked().equals(Boolean.FALSE))\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","commit_id":"c58b7ae1b40e7729ff961435a8b7a08ab44d3e39","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean isDeleteAny(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isDeleteAny(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getDeleteAny() == null\r\n        || messagePermission.getDeleteAny() == Boolean.FALSE)\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG.debug(\"Role :\" + getCurrentUserRole()\r\n            + \"is not allowed to delete any messages for given topic \" + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft() == Boolean.TRUE)\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getDeleteAny() == Boolean.TRUE\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft() == Boolean.FALSE\r\n        && topic.getLocked() == Boolean.FALSE)\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","id":21177,"modified_method":"public boolean isDeleteAny(DiscussionTopic topic, DiscussionForum forum)\r\n  {\r\n    if (LOG.isDebugEnabled())\r\n    {\r\n      LOG.debug(\"isDeleteAny(DiscussionTopic \" + topic + \")\");\r\n    }\r\n    if (checkBaseConditions(topic, forum))\r\n    {\r\n      return true;\r\n    }\r\n    MessagePermissions messagePermission = permissionManager\r\n        .getTopicMessagePermissionForRole(topic, getCurrentUserRole(),\r\n            typeManager.getDiscussionForumType());\r\n\r\n    if (messagePermission == null || messagePermission.getDeleteAny() == null\r\n        || messagePermission.getDeleteAny().equals(Boolean.FALSE))\r\n    {\r\n      if (LOG.isDebugEnabled())\r\n      {\r\n        LOG.debug(\"Role :\" + getCurrentUserRole()\r\n            + \"is not allowed to delete any messages for given topic \" + topic);\r\n      }\r\n      return false;\r\n    }\r\n    if (topic.getLocked() == null || topic.getLocked().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is locked \" + topic);\r\n      return false;\r\n    }\r\n    if (topic.getDraft() == null || topic.getDraft().equals(Boolean.TRUE))\r\n    {\r\n      LOG.debug(\"This topic is at draft stage \" + topic);\r\n    }\r\n    if (messagePermission.getDeleteAny().equals(Boolean.TRUE)\r\n        && forum.getDraft().equals(Boolean.FALSE)\r\n        && forum.getLocked().equals(Boolean.FALSE)\r\n        && topic.getDraft().equals(Boolean.FALSE)\r\n        && topic.getLocked().equals(Boolean.FALSE))\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }","commit_id":"c58b7ae1b40e7729ff961435a8b7a08ab44d3e39","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n\tpublic void testPQLQueryGetPQLResultConditionalOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke != false\");\n\t\tqueries.add(\"portal.smoke == true OR portal.smoke == false\");\n\n\t\tqueries.add(\"true AND true\");\n\t\tqueries.add(\"true OR true\");\n\t\tqueries.add(\"false OR true\");\n\t\tqueries.add(\"true OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke == false\");\n\t\tqueries.add(\"portal.smoke != true OR portal.smoke == false\");\n\n\t\tqueries.add(\"false AND true\");\n\t\tqueries.add(\"true AND false\");\n\t\tqueries.add(\"false AND false\");\n\t\tqueries.add(\"false OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21178,"modified_method":"@Test\n\tpublic void testPQLQueryGetPQLResultConditionalOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke != false\");\n\t\tqueries.add(\"portal.smoke == true OR portal.smoke == false\");\n\n\t\tqueries.add(\"true AND true\");\n\t\tqueries.add(\"true OR true\");\n\t\tqueries.add(\"false OR true\");\n\t\tqueries.add(\"true OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke == false\");\n\t\tqueries.add(\"portal.smoke != true OR portal.smoke == false\");\n\n\t\tqueries.add(\"false AND true\");\n\t\tqueries.add(\"true AND false\");\n\t\tqueries.add(\"false AND false\");\n\t\tqueries.add(\"false OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testPQLQueryGetPQLResultComparativeOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names ~ 'Message Boards'\");\n\t\tqueries.add(\"component.names !~ 'Journal'\");\n\n\t\tqueries.add(\"portal.smoke == true\");\n\t\tqueries.add(\"portal.smoke != false\");\n\n\t\tqueries.add(\"priority > 4\");\n\t\tqueries.add(\"priority >= 5\");\n\t\tqueries.add(\"priority < 6\");\n\t\tqueries.add(\"priority <= 5\");\n\n\t\tqueries.add(\"priority > 4.1\");\n\t\tqueries.add(\"priority >= 4.9\");\n\t\tqueries.add(\"priority < 5.1\");\n\t\tqueries.add(\"priority <= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names !~ 'Message Boards'\");\n\t\tqueries.add(\"component.names ~ 'Journal'\");\n\t\tqueries.add(\"portal.smoke != true\");\n\t\tqueries.add(\"portal.smoke == false\");\n\n\t\tqueries.add(\"priority < 4\");\n\t\tqueries.add(\"priority <= 4\");\n\t\tqueries.add(\"priority > 6\");\n\t\tqueries.add(\"priority >= 6\");\n\n\t\tqueries.add(\"priority < 4.1\");\n\t\tqueries.add(\"priority <= 4.9\");\n\t\tqueries.add(\"priority > 5.1\");\n\t\tqueries.add(\"priority >= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21179,"modified_method":"@Test\n\tpublic void testPQLQueryGetPQLResultComparativeOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names ~ 'Message Boards'\");\n\t\tqueries.add(\"component.names !~ 'Journal'\");\n\n\t\tqueries.add(\"portal.smoke == true\");\n\t\tqueries.add(\"portal.smoke != false\");\n\n\t\tqueries.add(\"priority > 4\");\n\t\tqueries.add(\"priority >= 5\");\n\t\tqueries.add(\"priority < 6\");\n\t\tqueries.add(\"priority <= 5\");\n\n\t\tqueries.add(\"priority > 4.1\");\n\t\tqueries.add(\"priority >= 4.9\");\n\t\tqueries.add(\"priority < 5.1\");\n\t\tqueries.add(\"priority <= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names !~ 'Message Boards'\");\n\t\tqueries.add(\"component.names ~ 'Journal'\");\n\t\tqueries.add(\"portal.smoke != true\");\n\t\tqueries.add(\"portal.smoke == false\");\n\n\t\tqueries.add(\"priority < 4\");\n\t\tqueries.add(\"priority <= 4\");\n\t\tqueries.add(\"priority > 6\");\n\t\tqueries.add(\"priority >= 6\");\n\n\t\tqueries.add(\"priority < 4.1\");\n\t\tqueries.add(\"priority <= 4.9\");\n\t\tqueries.add(\"priority > 5.1\");\n\t\tqueries.add(\"priority >= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testPQLValueGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"'false'\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"'true'\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"3.2\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"'3.2'\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"2016.0\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016.0'\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", Double.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"2016\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016'\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", Integer.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","id":21180,"modified_method":"@Test\n\tpublic void testPQLValueGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"'false'\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"true\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"'true'\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"3.2\", 3.2D);\n\t\t_validateGetPQLResult(\"'3.2'\", 3.2D);\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", 3.2D);\n\t\t_validateGetPQLResult(\"2016.0\", 2016D);\n\t\t_validateGetPQLResult(\"'2016.0'\", 2016D);\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", 2016D);\n\n\t\t_validateGetPQLResult(\"2016\", 2016);\n\t\t_validateGetPQLResult(\"'2016'\", 2016);\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", 2016);\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testPQLVariableGetPQLResult() throws Exception {\n\t\t_validateGetPQLResultFromVariable(\"false\", Boolean.valueOf(false));\n\t\t_validateGetPQLResultFromVariable(\"'false'\", Boolean.valueOf(false));\n\t\t_validateGetPQLResultFromVariable(\"\\\"false\\\"\", Boolean.valueOf(false));\n\t\t_validateGetPQLResultFromVariable(\"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResultFromVariable(\"'true'\", Boolean.valueOf(true));\n\t\t_validateGetPQLResultFromVariable(\"\\\"true\\\"\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResultFromVariable(\"3.2\", Double.valueOf(3.2));\n\t\t_validateGetPQLResultFromVariable(\"'3.2'\", Double.valueOf(3.2));\n\t\t_validateGetPQLResultFromVariable(\"\\\"3.2\\\"\", Double.valueOf(3.2));\n\t\t_validateGetPQLResultFromVariable(\"2016.0\", Double.valueOf(2016));\n\t\t_validateGetPQLResultFromVariable(\"'2016.0'\", Double.valueOf(2016));\n\t\t_validateGetPQLResultFromVariable(\"\\\"2016.0\\\"\", Double.valueOf(2016));\n\n\t\t_validateGetPQLResultFromVariable(\"2016\", Integer.valueOf(2016));\n\t\t_validateGetPQLResultFromVariable(\"'2016'\", Integer.valueOf(2016));\n\t\t_validateGetPQLResultFromVariable(\"\\\"2016\\\"\", Integer.valueOf(2016));\n\n\t\t_validateGetPQLResultFromVariable(\"test\", \"test\");\n\t\t_validateGetPQLResultFromVariable(\"'test'\", \"test\");\n\t\t_validateGetPQLResultFromVariable(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResultFromVariable(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResultFromVariable(\"\\\"test test\\\"\", \"test test\");\n\t}","id":21181,"modified_method":"@Test\n\tpublic void testPQLVariableGetPQLResult() throws Exception {\n\t\t_validateGetPQLResultFromVariable(\"false\", Boolean.FALSE);\n\t\t_validateGetPQLResultFromVariable(\"'false'\", Boolean.FALSE);\n\t\t_validateGetPQLResultFromVariable(\"\\\"false\\\"\", Boolean.FALSE);\n\t\t_validateGetPQLResultFromVariable(\"true\", Boolean.TRUE);\n\t\t_validateGetPQLResultFromVariable(\"'true'\", Boolean.TRUE);\n\t\t_validateGetPQLResultFromVariable(\"\\\"true\\\"\", Boolean.TRUE);\n\n\t\t_validateGetPQLResultFromVariable(\"3.2\", 3.2D);\n\t\t_validateGetPQLResultFromVariable(\"'3.2'\", 3.2D);\n\t\t_validateGetPQLResultFromVariable(\"\\\"3.2\\\"\", 3.2D);\n\t\t_validateGetPQLResultFromVariable(\"2016.0\", 2016D);\n\t\t_validateGetPQLResultFromVariable(\"'2016.0'\", 2016D);\n\t\t_validateGetPQLResultFromVariable(\"\\\"2016.0\\\"\", 2016D);\n\n\t\t_validateGetPQLResultFromVariable(\"2016\", 2016);\n\t\t_validateGetPQLResultFromVariable(\"'2016'\", 2016);\n\t\t_validateGetPQLResultFromVariable(\"\\\"2016\\\"\", 2016);\n\n\t\t_validateGetPQLResultFromVariable(\"test\", \"test\");\n\t\t_validateGetPQLResultFromVariable(\"'test'\", \"test\");\n\t\t_validateGetPQLResultFromVariable(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResultFromVariable(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResultFromVariable(\"\\\"test test\\\"\", \"test test\");\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static void _validateGetPQLResultError(\n\t\t\tString pql, String expectedError, Properties properties)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLEntity pqlEntity = PQLEntityFactory.newPQLEntity(pql);\n\n\t\t\tObject objectValue = pqlEntity.getPQLResult(properties);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","id":21182,"modified_method":"private static void _validateGetPQLResultError(\n\t\t\tString pql, String expectedError, Properties properties)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLEntity pqlEntity = PQLEntityFactory.newPQLEntity(pql);\n\n\t\t\tpqlEntity.getPQLResult(properties);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testPQLQueryGetPQLResultParenthesis() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke == true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke == true AND portal.smoke == false) OR true\");\n\n\t\tqueries.add(\"(true OR false) AND true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke != true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke != true AND portal.smoke == true) OR false\");\n\n\t\tqueries.add(\"(false OR false) AND true\");\n\t\tqueries.add(\"(false OR true) AND false\");\n\t\tqueries.add(\"(false OR false) AND false\");\n\t\tqueries.add(\"(false AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21183,"modified_method":"@Test\n\tpublic void testPQLQueryGetPQLResultParenthesis() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke == true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke == true AND portal.smoke == false) OR true\");\n\n\t\tqueries.add(\"(true OR false) AND true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke != true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke != true AND portal.smoke == true) OR false\");\n\n\t\tqueries.add(\"(false OR false) AND true\");\n\t\tqueries.add(\"(false OR true) AND false\");\n\t\tqueries.add(\"(false OR false) AND false\");\n\t\tqueries.add(\"(false AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateNewPQLModifierError(\n\t\t\tString modifier, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLModifier pqlModifier = PQLModifierFactory.newPQLModifier(\n\t\t\t\tmodifier);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error thrown for new PQL modifiers:\");\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following modifier: \" + modifier);\n\t\t\t}\n\t\t}\n\t}","id":21184,"modified_method":"private void _validateNewPQLModifierError(\n\t\t\tString modifier, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLModifierFactory.newPQLModifier(\n\t\t\t\tmodifier);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error thrown for new PQL modifiers:\");\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following modifier: \" + modifier);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testNewPQLModifier() throws Exception {\n\t\tSet<String> availableModifiers = PQLModifier.getAvailableModifiers();\n\n\t\tfor (String modifier : availableModifiers) {\n\t\t\tPQLModifier pqlModifier = PQLModifierFactory.newPQLModifier(\n\t\t\t\tmodifier);\n\t\t}\n\t}","id":21185,"modified_method":"@Test\n\tpublic void testNewPQLModifier() throws Exception {\n\t\tSet<String> availableModifiers = PQLModifier.getAvailableModifiers();\n\n\t\tfor (String modifier : availableModifiers) {\n\t\t\tPQLModifierFactory.newPQLModifier(\n\t\t\t\tmodifier);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\n\t\t\t\"NOT\", Boolean.valueOf(true), Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\n\t\t\t\"NOT\", Boolean.valueOf(false), Boolean.valueOf(true));\n\t}","id":21186,"modified_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\n\t\t\t\"NOT\", Boolean.TRUE, Boolean.FALSE);\n\t\t_validateGetPQLResult(\n\t\t\t\"NOT\", Boolean.FALSE, Boolean.TRUE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultError() throws Exception {\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", null, \"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", \"test\", \"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", Double.valueOf(10.0),\n\t\t\t\"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", Integer.valueOf(10),\n\t\t\t\"Modifier must be used with a boolean value: NOT\");\n\t}","id":21187,"modified_method":"@Test\n\tpublic void testGetPQLResultError() throws Exception {\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", null, \"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", \"test\", \"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", 10.0D,\n\t\t\t\"Modifier must be used with a boolean value: NOT\");\n\t\t_validateGetPQLResultError(\n\t\t\t\"NOT\", 10,\n\t\t\t\"Modifier must be used with a boolean value: NOT\");\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateNewPQLOperatorError(\n\t\t\tString operator, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLOperator pqlOperator = PQLOperatorFactory.newPQLOperator(\n\t\t\t\toperator);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error thrown for new PQL operators:\");\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following operator: \" + operator);\n\t\t\t}\n\t\t}\n\t}","id":21188,"modified_method":"private void _validateNewPQLOperatorError(\n\t\t\tString operator, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLOperatorFactory.newPQLOperator(\n\t\t\t\toperator);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error thrown for new PQL operators:\");\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following operator: \" + operator);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testNewPQLOperator() throws Exception {\n\t\tSet<String> availableOperators = PQLOperator.getAvailableOperators();\n\n\t\tfor (String operator : availableOperators) {\n\t\t\tPQLOperator pqlOperator = PQLOperatorFactory.newPQLOperator(\n\t\t\t\toperator);\n\t\t}\n\t}","id":21189,"modified_method":"@Test\n\tpublic void testNewPQLOperator() throws Exception {\n\t\tSet<String> availableOperators = PQLOperator.getAvailableOperators();\n\n\t\tfor (String operator : availableOperators) {\n\t\t\tPQLOperatorFactory.newPQLOperator(\n\t\t\t\toperator);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorLessThan() throws Exception {\n\t\t_validateGetPQLResult(\"2\", \"<\", \"1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2\", \"<\", \"1.1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"1.1\", Boolean.valueOf(false));\n\n\t\t_validateGetPQLResult(\"2\", \"<\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"2.1\", Boolean.valueOf(false));\n\n\t\t_validateGetPQLResult(\"1\", \"<\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1.1\", \"<\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1\", \"<\", \"2.1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1.1\", \"<\", \"2.1\", Boolean.valueOf(true));\n\t}","id":21190,"modified_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorLessThan() throws Exception {\n\t\t_validateGetPQLResult(\"2\", \"<\", \"1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2\", \"<\", \"1.1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"1.1\", Boolean.FALSE);\n\n\t\t_validateGetPQLResult(\"2\", \"<\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \"<\", \"2.1\", Boolean.FALSE);\n\n\t\t_validateGetPQLResult(\"1\", \"<\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1.1\", \"<\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1\", \"<\", \"2.1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1.1\", \"<\", \"2.1\", Boolean.TRUE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultEqualityOperatorNotEquals() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"!=\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"!=\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test\", \"!=\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"!=\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test1\", \"!=\", \"test2\", Boolean.valueOf(true));\n\t}","id":21191,"modified_method":"@Test\n\tpublic void testGetPQLResultEqualityOperatorNotEquals() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"!=\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"!=\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test\", \"!=\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"!=\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test1\", \"!=\", \"test2\", Boolean.TRUE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultEqualityOperatorEquals() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"==\", \"test\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(null, \"==\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test\", \"==\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"==\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test1\", \"==\", \"test2\", Boolean.valueOf(false));\n\t}","id":21192,"modified_method":"@Test\n\tpublic void testGetPQLResultEqualityOperatorEquals() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"==\", \"test\", Boolean.TRUE);\n\t\t_validateGetPQLResult(null, \"==\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test\", \"==\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"==\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test1\", \"==\", \"test2\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultStringOperatorNotContains() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"!~\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test1\", \"!~\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"!~\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test\", \"!~\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"!~\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test1\", \"!~\", \"test2\", Boolean.valueOf(true));\n\t}","id":21193,"modified_method":"@Test\n\tpublic void testGetPQLResultStringOperatorNotContains() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"!~\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test1\", \"!~\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"!~\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test\", \"!~\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"!~\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test1\", \"!~\", \"test2\", Boolean.TRUE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorLessThanEquals()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"1.1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"1.1\", Boolean.valueOf(false));\n\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"2.1\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"1\", \"<=\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1.1\", \"<=\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1\", \"<=\", \"2.1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"1.1\", \"<=\", \"1.1\", Boolean.valueOf(true));\n\t}","id":21194,"modified_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorLessThanEquals()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"1.1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"1.1\", Boolean.FALSE);\n\n\t\t_validateGetPQLResult(\"2\", \"<=\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \"<=\", \"2.1\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"1\", \"<=\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1.1\", \"<=\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1\", \"<=\", \"2.1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"1.1\", \"<=\", \"1.1\", Boolean.TRUE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateGetPQLResultError(\n\t\t\tString value1, String operator, String value2, String expectedError)\n\t\tthrows Exception {\n\n\t\tString pql = value1 + \" \" + operator + \" \" + value2;\n\n\t\tPQLEntity pqlEntity1 = PQLEntityFactory.newPQLEntity(value1);\n\t\tPQLOperator pqlOperator = PQLOperatorFactory.newPQLOperator(operator);\n\t\tPQLEntity pqlEntity2 = PQLEntityFactory.newPQLEntity(value2);\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tObject pqlResult = pqlOperator.getPQLResult(\n\t\t\t\tpqlEntity1, pqlEntity2, new Properties());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(value2);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","id":21195,"modified_method":"private void _validateGetPQLResultError(\n\t\t\tString value1, String operator, String value2, String expectedError)\n\t\tthrows Exception {\n\n\t\tString pql = value1 + \" \" + operator + \" \" + value2;\n\n\t\tPQLEntity pqlEntity1 = PQLEntityFactory.newPQLEntity(value1);\n\t\tPQLOperator pqlOperator = PQLOperatorFactory.newPQLOperator(operator);\n\t\tPQLEntity pqlEntity2 = PQLEntityFactory.newPQLEntity(value2);\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tpqlOperator.getPQLResult(\n\t\t\t\tpqlEntity1, pqlEntity2, new Properties());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(value2);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorGreaterThan()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \">\", \"1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2\", \">\", \"1.1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"1.1\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"2\", \">\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"2.1\", Boolean.valueOf(false));\n\n\t\t_validateGetPQLResult(\"1\", \">\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1.1\", \">\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1\", \">\", \"2.1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1.1\", \">\", \"2.1\", Boolean.valueOf(false));\n\t}","id":21196,"modified_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorGreaterThan()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \">\", \"1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2\", \">\", \"1.1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"1.1\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"2\", \">\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"2.1\", \">\", \"2.1\", Boolean.FALSE);\n\n\t\t_validateGetPQLResult(\"1\", \">\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1.1\", \">\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1\", \">\", \"2.1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1.1\", \">\", \"2.1\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultConditionalOperatorOR() throws Exception {\n\t\t_validateGetPQLResult(\"true\", \"OR\", \"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"true\", \"OR\", \"false\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"false\", \"OR\", \"false\", Boolean.valueOf(false));\n\t}","id":21197,"modified_method":"@Test\n\tpublic void testGetPQLResultConditionalOperatorOR() throws Exception {\n\t\t_validateGetPQLResult(\"true\", \"OR\", \"true\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"true\", \"OR\", \"false\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"false\", \"OR\", \"false\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorGreaterThanEquals()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \">=\", \"1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2\", \">=\", \"1.1\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"1.1\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"2\", \">=\", \"2\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"2.1\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"1\", \">=\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1.1\", \">=\", \"2\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1\", \">=\", \"2.1\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"1.1\", \">=\", \"2.1\", Boolean.valueOf(false));\n\t}","id":21198,"modified_method":"@Test\n\tpublic void testGetPQLResultRelationalOperatorGreaterThanEquals()\n\t\tthrows Exception {\n\n\t\t_validateGetPQLResult(\"2\", \">=\", \"1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2\", \">=\", \"1.1\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"1.1\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"2\", \">=\", \"2\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"2.1\", \">=\", \"2.1\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"1\", \">=\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1.1\", \">=\", \"2\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1\", \">=\", \"2.1\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"1.1\", \">=\", \"2.1\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultConditionalOperatorAND() throws Exception {\n\t\t_validateGetPQLResult(\"true\", \"AND\", \"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"true\", \"AND\", \"false\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"false\", \"AND\", \"false\", Boolean.valueOf(false));\n\t}","id":21199,"modified_method":"@Test\n\tpublic void testGetPQLResultConditionalOperatorAND() throws Exception {\n\t\t_validateGetPQLResult(\"true\", \"AND\", \"true\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"true\", \"AND\", \"false\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"false\", \"AND\", \"false\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultStringOperatorContains() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"~\", \"test\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"test1\", \"~\", \"test\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(null, \"~\", \"test\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test\", \"~\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(null, \"~\", null, Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"test1\", \"~\", \"test2\", Boolean.valueOf(false));\n\t}","id":21200,"modified_method":"@Test\n\tpublic void testGetPQLResultStringOperatorContains() throws Exception {\n\t\t_validateGetPQLResult(\"test\", \"~\", \"test\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"test1\", \"~\", \"test\", Boolean.TRUE);\n\t\t_validateGetPQLResult(null, \"~\", \"test\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test\", \"~\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(null, \"~\", null, Boolean.FALSE);\n\t\t_validateGetPQLResult(\"test1\", \"~\", \"test2\", Boolean.FALSE);\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultComparativeOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names ~ 'Message Boards'\");\n\t\tqueries.add(\"component.names !~ 'Journal'\");\n\n\t\tqueries.add(\"portal.smoke == true\");\n\t\tqueries.add(\"portal.smoke != false\");\n\n\t\tqueries.add(\"priority > 4\");\n\t\tqueries.add(\"priority >= 5\");\n\t\tqueries.add(\"priority < 6\");\n\t\tqueries.add(\"priority <= 5\");\n\n\t\tqueries.add(\"priority > 4.1\");\n\t\tqueries.add(\"priority >= 4.9\");\n\t\tqueries.add(\"priority < 5.1\");\n\t\tqueries.add(\"priority <= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names !~ 'Message Boards'\");\n\t\tqueries.add(\"component.names ~ 'Journal'\");\n\t\tqueries.add(\"portal.smoke != true\");\n\t\tqueries.add(\"portal.smoke == false\");\n\n\t\tqueries.add(\"priority < 4\");\n\t\tqueries.add(\"priority <= 4\");\n\t\tqueries.add(\"priority > 6\");\n\t\tqueries.add(\"priority >= 6\");\n\n\t\tqueries.add(\"priority < 4.1\");\n\t\tqueries.add(\"priority <= 4.9\");\n\t\tqueries.add(\"priority > 5.1\");\n\t\tqueries.add(\"priority >= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21201,"modified_method":"@Test\n\tpublic void testGetPQLResultComparativeOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names ~ 'Message Boards'\");\n\t\tqueries.add(\"component.names !~ 'Journal'\");\n\n\t\tqueries.add(\"portal.smoke == true\");\n\t\tqueries.add(\"portal.smoke != false\");\n\n\t\tqueries.add(\"priority > 4\");\n\t\tqueries.add(\"priority >= 5\");\n\t\tqueries.add(\"priority < 6\");\n\t\tqueries.add(\"priority <= 5\");\n\n\t\tqueries.add(\"priority > 4.1\");\n\t\tqueries.add(\"priority >= 4.9\");\n\t\tqueries.add(\"priority < 5.1\");\n\t\tqueries.add(\"priority <= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"component.names !~ 'Message Boards'\");\n\t\tqueries.add(\"component.names ~ 'Journal'\");\n\t\tqueries.add(\"portal.smoke != true\");\n\t\tqueries.add(\"portal.smoke == false\");\n\n\t\tqueries.add(\"priority < 4\");\n\t\tqueries.add(\"priority <= 4\");\n\t\tqueries.add(\"priority > 6\");\n\t\tqueries.add(\"priority >= 6\");\n\n\t\tqueries.add(\"priority < 4.1\");\n\t\tqueries.add(\"priority <= 4.9\");\n\t\tqueries.add(\"priority > 5.1\");\n\t\tqueries.add(\"priority >= 5.1\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static void _validateGetPQLResultError(\n\t\t\tString pql, String expectedError, Properties properties)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLQuery pqlQuery = new PQLQuery(pql);\n\n\t\t\tObject result = pqlQuery.getPQLResult(properties);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","id":21202,"modified_method":"private static void _validateGetPQLResultError(\n\t\t\tString pql, String expectedError, Properties properties)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLQuery pqlQuery = new PQLQuery(pql);\n\n\t\t\tpqlQuery.getPQLResult(properties);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error within the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultParenthesis() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke == true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke == true AND portal.smoke == false) OR true\");\n\n\t\tqueries.add(\"(true OR false) AND true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke != true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke != true AND portal.smoke == true) OR false\");\n\n\t\tqueries.add(\"(false OR false) AND true\");\n\t\tqueries.add(\"(false OR true) AND false\");\n\t\tqueries.add(\"(false OR false) AND false\");\n\t\tqueries.add(\"(false AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21203,"modified_method":"@Test\n\tpublic void testGetPQLResultParenthesis() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke == true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke == true AND portal.smoke == false) OR true\");\n\n\t\tqueries.add(\"(true OR false) AND true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND false) OR true\");\n\t\tqueries.add(\"(true AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"(portal.smoke != true OR portal.smoke == false) AND true\");\n\t\tqueries.add(\"(portal.smoke != true AND portal.smoke == true) OR false\");\n\n\t\tqueries.add(\"(false OR false) AND true\");\n\t\tqueries.add(\"(false OR true) AND false\");\n\t\tqueries.add(\"(false OR false) AND false\");\n\t\tqueries.add(\"(false AND true) OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResultConditionalOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke != false\");\n\t\tqueries.add(\"portal.smoke == true OR portal.smoke == false\");\n\n\t\tqueries.add(\"true AND true\");\n\t\tqueries.add(\"true OR true\");\n\t\tqueries.add(\"false OR true\");\n\t\tqueries.add(\"true OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(true), properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke == false\");\n\t\tqueries.add(\"portal.smoke != true OR portal.smoke == false\");\n\n\t\tqueries.add(\"false AND true\");\n\t\tqueries.add(\"true AND false\");\n\t\tqueries.add(\"false AND false\");\n\t\tqueries.add(\"false OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.valueOf(false), properties);\n\t\t}\n\t}","id":21204,"modified_method":"@Test\n\tpublic void testGetPQLResultConditionalOperator() throws Exception {\n\t\tProperties properties = new Properties();\n\n\t\tproperties.setProperty(\"component.names\", \"Blogs,Message Boards,WEM\");\n\t\tproperties.setProperty(\"portal.smoke\", \"true\");\n\t\tproperties.setProperty(\"priority\", \"5\");\n\n\t\tSet<String> queries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke != false\");\n\t\tqueries.add(\"portal.smoke == true OR portal.smoke == false\");\n\n\t\tqueries.add(\"true AND true\");\n\t\tqueries.add(\"true OR true\");\n\t\tqueries.add(\"false OR true\");\n\t\tqueries.add(\"true OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.TRUE, properties);\n\t\t}\n\n\t\tqueries = new TreeSet<>();\n\n\t\tqueries.add(\"portal.smoke == true AND portal.smoke == false\");\n\t\tqueries.add(\"portal.smoke != true OR portal.smoke == false\");\n\n\t\tqueries.add(\"false AND true\");\n\t\tqueries.add(\"true AND false\");\n\t\tqueries.add(\"false AND false\");\n\t\tqueries.add(\"false OR false\");\n\n\t\tfor (String query : queries) {\n\t\t\t_validateGetPQLResult(query, Boolean.FALSE, properties);\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"'false'\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"'true'\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"3.2\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"'3.2'\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"2016.0\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016.0'\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", Double.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"2016\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016'\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", Integer.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","id":21205,"modified_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"'false'\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"true\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"'true'\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"3.2\", 3.2D);\n\t\t_validateGetPQLResult(\"'3.2'\", 3.2D);\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", 3.2D);\n\t\t_validateGetPQLResult(\"2016.0\", 2016D);\n\t\t_validateGetPQLResult(\"'2016.0'\", 2016D);\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", 2016D);\n\n\t\t_validateGetPQLResult(\"2016\", 2016);\n\t\t_validateGetPQLResult(\"'2016'\", 2016);\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", 2016);\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateGetPQLResultError(String pql, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLValue pqlValue = new PQLValue(pql);\n\n\t\t\tObject valueObject = pqlValue.getPQLResult(new Properties());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error for the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","id":21206,"modified_method":"private void _validateGetPQLResultError(String pql, String expectedError)\n\t\tthrows Exception {\n\n\t\tString actualError = null;\n\n\t\ttry {\n\t\t\tPQLValue pqlValue = new PQLValue(pql);\n\n\t\t\tpqlValue.getPQLResult(new Properties());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tactualError = e.getMessage();\n\n\t\t\tif (!actualError.equals(expectedError)) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\t\tsb.append(\"Mismatched error for the following PQL:\\n\");\n\t\t\t\tsb.append(pql);\n\t\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\t\tsb.append(actualError);\n\t\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\t\tsb.append(expectedError);\n\n\t\t\t\tthrow new Exception(sb.toString(), e);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (actualError == null) {\n\t\t\t\tthrow new Exception(\n\t\t\t\t\t\"No error thrown for the following PQL: \" + pql);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateGetPQLResult(String pql, Object expectedResult)\n\t\tthrows Exception {\n\n\t\tProperties properties = new Properties();\n\n\t\tClass clazz = expectedResult.getClass();\n\n\t\tPQLValue pqlValue = new PQLValue(pql);\n\n\t\tObject actualResult = pqlValue.getPQLResult(properties);\n\n\t\tif (!clazz.isInstance(actualResult)) {\n\t\t\tthrow new Exception(pql + \" should be of type: \" + clazz.getName());\n\t\t}\n\n\t\tif (!actualResult.equals(expectedResult)) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(\"Mismatched PQL result within the following PQL:\\n\");\n\t\t\tsb.append(pql);\n\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\tsb.append(actualResult);\n\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\tsb.append(expectedResult);\n\n\t\t\tthrow new Exception(sb.toString());\n\t\t}\n\t}","id":21207,"modified_method":"private void _validateGetPQLResult(String pql, Object expectedResult)\n\t\tthrows Exception {\n\n\t\tProperties properties = new Properties();\n\n\t\tClass<?> clazz = expectedResult.getClass();\n\n\t\tPQLValue pqlValue = new PQLValue(pql);\n\n\t\tObject actualResult = pqlValue.getPQLResult(properties);\n\n\t\tif (!clazz.isInstance(actualResult)) {\n\t\t\tthrow new Exception(pql + \" should be of type: \" + clazz.getName());\n\t\t}\n\n\t\tif (!actualResult.equals(expectedResult)) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(\"Mismatched PQL result within the following PQL:\\n\");\n\t\t\tsb.append(pql);\n\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\tsb.append(actualResult);\n\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\tsb.append(expectedResult);\n\n\t\t\tthrow new Exception(sb.toString());\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"'false'\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.valueOf(false));\n\t\t_validateGetPQLResult(\"true\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"'true'\", Boolean.valueOf(true));\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.valueOf(true));\n\n\t\t_validateGetPQLResult(\"3.2\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"'3.2'\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", Double.valueOf(3.2));\n\t\t_validateGetPQLResult(\"2016.0\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016.0'\", Double.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", Double.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"2016\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"'2016'\", Integer.valueOf(2016));\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", Integer.valueOf(2016));\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","id":21208,"modified_method":"@Test\n\tpublic void testGetPQLResult() throws Exception {\n\t\t_validateGetPQLResult(\"false\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"'false'\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"\\\"false\\\"\", Boolean.FALSE);\n\t\t_validateGetPQLResult(\"true\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"'true'\", Boolean.TRUE);\n\t\t_validateGetPQLResult(\"\\\"true\\\"\", Boolean.TRUE);\n\n\t\t_validateGetPQLResult(\"3.2\", 3.2D);\n\t\t_validateGetPQLResult(\"'3.2'\", 3.2D);\n\t\t_validateGetPQLResult(\"\\\"3.2\\\"\", 3.2D);\n\t\t_validateGetPQLResult(\"2016.0\", 2016D);\n\t\t_validateGetPQLResult(\"'2016.0'\", 2016D);\n\t\t_validateGetPQLResult(\"\\\"2016.0\\\"\", 2016D);\n\n\t\t_validateGetPQLResult(\"2016\", 2016);\n\t\t_validateGetPQLResult(\"'2016'\", 2016);\n\t\t_validateGetPQLResult(\"\\\"2016\\\"\", 2016);\n\n\t\t_validateGetPQLResult(\"test\", \"test\");\n\t\t_validateGetPQLResult(\"'test'\", \"test\");\n\t\t_validateGetPQLResult(\"\\\"test\\\"\", \"test\");\n\n\t\t_validateGetPQLResult(\"'test test'\", \"test test\");\n\t\t_validateGetPQLResult(\"\\\"test test\\\"\", \"test test\");\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _validateGetPQLResult(String pql, Object expectedPQLResult)\n\t\tthrows Exception {\n\n\t\tProperties properties = new Properties();\n\n\t\tproperties.put(\"portal.smoke\", pql);\n\n\t\tClass clazz = expectedPQLResult.getClass();\n\n\t\tPQLVariable pqlVariable = new PQLVariable(\"portal.smoke\");\n\n\t\tObject actualPQLResult = pqlVariable.getPQLResult(properties);\n\n\t\tif (!clazz.isInstance(actualPQLResult)) {\n\t\t\tthrow new Exception(pql + \" should be of type: \" + clazz.getName());\n\t\t}\n\n\t\tif (!actualPQLResult.equals(expectedPQLResult)) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(\"Mismatched PQL result within the following PQL:\\n\");\n\t\t\tsb.append(pql);\n\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\tsb.append(actualPQLResult);\n\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\tsb.append(expectedPQLResult);\n\n\t\t\tthrow new Exception(sb.toString());\n\t\t}\n\t}","id":21209,"modified_method":"private void _validateGetPQLResult(String pql, Object expectedPQLResult)\n\t\tthrows Exception {\n\n\t\tProperties properties = new Properties();\n\n\t\tproperties.put(\"portal.smoke\", pql);\n\n\t\tClass<?> clazz = expectedPQLResult.getClass();\n\n\t\tPQLVariable pqlVariable = new PQLVariable(\"portal.smoke\");\n\n\t\tObject actualPQLResult = pqlVariable.getPQLResult(properties);\n\n\t\tif (!clazz.isInstance(actualPQLResult)) {\n\t\t\tthrow new Exception(pql + \" should be of type: \" + clazz.getName());\n\t\t}\n\n\t\tif (!actualPQLResult.equals(expectedPQLResult)) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(\"Mismatched PQL result within the following PQL:\\n\");\n\t\t\tsb.append(pql);\n\t\t\tsb.append(\"\\n* Actual:   \");\n\t\t\tsb.append(actualPQLResult);\n\t\t\tsb.append(\"\\n* Expected: \");\n\t\t\tsb.append(expectedPQLResult);\n\n\t\t\tthrow new Exception(sb.toString());\n\t\t}\n\t}","commit_id":"b2b091c2b4c0b9c13e06502ae276a55b29f5edb8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Handles all ADE requests.<p>\n     * \n     * @return the result\n     * \n     * @throws JSONException if there is any problem with JSON\n     * @throws CmsException if there is a problem with the cms context\n     */\n    @Override\n    public JSONObject executeAction() throws CmsException, JSONException {\n\n        JSONObject result = new JSONObject();\n\n        HttpServletRequest request = getRequest();\n        CmsObject cms = getCmsObject();\n\n        if (!checkParameters(\n            request,\n            result,\n            ReqParam.ACTION.getName(),\n            ReqParam.LOCALE.getName(),\n            ReqParam.CNTPAGE.getName(),\n            ReqParam.URI.getName())) {\n            // every request needs to have at least these parameters \n            return result;\n        }\n        String actionParam = request.getParameter(ReqParam.ACTION.getName());\n        Action action = Action.valueOf(actionParam.toUpperCase());\n        String localeParam = request.getParameter(ReqParam.LOCALE.getName());\n        cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));\n        String cntPageParam = request.getParameter(ReqParam.CNTPAGE.getName());\n        String uriParam = request.getParameter(ReqParam.URI.getName());\n\n        JSONObject data = new JSONObject();\n        if (checkParameters(request, null, ReqParam.DATA.getName())) {\n            String dataParam = request.getParameter(ReqParam.DATA.getName());\n            data = new JSONObject(dataParam);\n        }\n\n        if (action.equals(Action.ALL)) {\n            // first load, get everything\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            result = getContainerPage(cntPageRes, cntPage, uriParam.equals(cntPageParam) ? null : uriParam);\n        } else if (action.equals(Action.ELEM)) {\n            // get element data\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            if (elems == null) {\n                // single element\n                elems = new JSONArray();\n                elems.put(data.optString(JsonRequest.ELEM.getName()));\n            }\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            JSONObject resElements = new JSONObject();\n            for (int i = 0; i < elems.length(); i++) {\n                String elemId = elems.getString(i);\n                CmsContainerElementBean element = getCachedElement(elemId);\n                resElements.put(element.getClientId(), elemUtil.getElementData(element, cntPage.getTypes()));\n            }\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.ELEMPROPS)) {\n            // element formatted with the given properties\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName(), JsonRequest.PROPERTIES.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            JSONObject properties = data.optJSONObject(JsonRequest.PROPERTIES.getName());\n\n            CmsContainerElementBean element = createElement(m_manager.convertToServerId(elemParam), properties);\n\n            m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n\n            JSONObject resElements = new JSONObject();\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            resElements.put(element.getClientId(), elemUtil.getElementData(element, cntPage.getTypes()));\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.GET)) {\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // get the favorite list\n                result.put(JsonResponse.FAVORITES.getName(), getFavoriteList(null, cntPage.getTypes()));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // get recent list\n                result.put(JsonResponse.RECENT.getName(), getRecentList(null, cntPage.getTypes()));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.SEARCH)) {\n            // new search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.LS)) {\n            // last search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getLastSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n\n            // we need those on the client side to make scrolling work\n            CmsSearchOptions oldOptions = m_sessionCache.getSearchOptions();\n            if (oldOptions != null) {\n                result.put(JsonSearch.TYPE.getName(), oldOptions.getTypes());\n                result.put(JsonSearch.TEXT.getName(), oldOptions.getText());\n                result.put(JsonSearch.LOCATION.getName(), oldOptions.getLocation());\n            }\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.NEW)) {\n            // get a new element\n            if (!checkParameters(data, result, JsonRequest.TYPE.getName())) {\n                return result;\n            }\n            String type = data.optString(JsonRequest.TYPE.getName());\n\n            CmsResource newResource = m_manager.createNewElement(cms, cntPageParam, request, type);\n            result.put(JsonNewRes.ID.getName(), m_manager.convertToClientId(newResource.getStructureId()));\n            result.put(JsonNewRes.URI.getName(), cms.getSitePath(newResource));\n        } else if (action.equals(Action.PROPS)) {\n            // get property dialog information\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            CmsContainerElementBean element = getCachedElement(elemParam);\n            result = elemUtil.getElementPropertyInfo(element);\n        } else if (action.equals(Action.SET)) {\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // save the favorite list\n                JSONArray list = data.optJSONArray(JsonRequest.FAV.getName());\n                m_manager.saveFavoriteList(cms, arrayToElementList(list));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // save the recent list\n                JSONArray list = data.optJSONArray(JsonRequest.REC.getName());\n                m_sessionCache.setCacheRecentList(arrayToElementList(list));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.CNT)) {\n            // save the container page\n            setContainerPage(cntPageParam, data);\n        } else if (action.equals(Action.STARTEDIT)) {\n            // lock the container page\n            try {\n                cms.lockResourceTemporary(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.STOPEDIT)) {\n            // lock the container page\n            try {\n                cms.unlockResource(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.DEL)) {\n            // delete elements\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            deleteElements(elems);\n        } else {\n            error(result, Messages.get().getBundle(getWorkplaceLocale()).key(\n                Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,\n                ReqParam.ACTION.getName(),\n                actionParam));\n        }\n        return result;\n    }","id":21210,"modified_method":"/**\n     * Handles all ADE requests.<p>\n     * \n     * @return the result\n     * \n     * @throws JSONException if there is any problem with JSON\n     * @throws CmsException if there is a problem with the cms context\n     */\n    @Override\n    public JSONObject executeAction() throws CmsException, JSONException {\n\n        JSONObject result = new JSONObject();\n\n        HttpServletRequest request = getRequest();\n        CmsObject cms = getCmsObject();\n\n        if (!checkParameters(\n            request,\n            result,\n            ReqParam.ACTION.getName(),\n            ReqParam.LOCALE.getName(),\n            ReqParam.CNTPAGE.getName(),\n            ReqParam.URI.getName())) {\n            // every request needs to have at least these parameters \n            return result;\n        }\n        String actionParam = request.getParameter(ReqParam.ACTION.getName());\n        Action action = Action.valueOf(actionParam.toUpperCase());\n        String localeParam = request.getParameter(ReqParam.LOCALE.getName());\n        cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));\n        String cntPageParam = request.getParameter(ReqParam.CNTPAGE.getName());\n        String uriParam = request.getParameter(ReqParam.URI.getName());\n\n        JSONObject data = new JSONObject();\n        if (checkParameters(request, null, ReqParam.DATA.getName())) {\n            String dataParam = request.getParameter(ReqParam.DATA.getName());\n            data = new JSONObject(dataParam);\n        }\n\n        if (action.equals(Action.ALL)) {\n            // first load, get everything\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            result = getContainerPage(cntPageRes, cntPage, uriParam.equals(cntPageParam) ? null : uriParam);\n        } else if (action.equals(Action.ELEM)) {\n            // get element data\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            if (elems == null) {\n                // single element\n                elems = new JSONArray();\n                elems.put(data.optString(JsonRequest.ELEM.getName()));\n            }\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            JSONObject resElements = new JSONObject();\n            for (int i = 0; i < elems.length(); i++) {\n                String elemId = elems.getString(i);\n                CmsContainerElementBean element = getCachedElement(elemId);\n                JSONObject elementData = elemUtil.getElementData(element, cntPage.getTypes());\n                resElements.put(element.getClientId(), elementData);\n                if (elementData.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                    // this is a sub-container \n                    Set<String> ids = new HashSet<String>();\n                    ids.add(elemId);\n                    CmsResource elementRes = cms.readResource(element.getElementId());\n                    CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                        cms,\n                        elementRes,\n                        getRequest());\n                    CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                        cms,\n                        cms.getRequestContext().getLocale());\n\n                    // adding all sub-items to the elements data\n                    for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                        if (!ids.contains(subElement.getElementId())) {\n                            String subId = subElement.getClientId();\n                            if (ids.contains(subId)) {\n                                continue;\n                            }\n                            JSONObject subItemData = elemUtil.getElementData(subElement, cntPage.getTypes());\n                            ids.add(subId);\n                            resElements.put(subId, subItemData);\n                        }\n                    }\n                }\n            }\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.ELEMPROPS)) {\n            // element formatted with the given properties\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName(), JsonRequest.PROPERTIES.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            JSONObject properties = data.optJSONObject(JsonRequest.PROPERTIES.getName());\n\n            CmsContainerElementBean element = createElement(m_manager.convertToServerId(elemParam), properties);\n\n            m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n\n            JSONObject resElements = new JSONObject();\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            resElements.put(element.getClientId(), elemUtil.getElementData(element, cntPage.getTypes()));\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.GET)) {\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // get the favorite list\n                result.put(JsonResponse.FAVORITES.getName(), getFavoriteList(null, cntPage.getTypes()));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // get recent list\n                result.put(JsonResponse.RECENT.getName(), getRecentList(null, cntPage.getTypes()));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.SEARCH)) {\n            // new search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.LS)) {\n            // last search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getLastSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n\n            // we need those on the client side to make scrolling work\n            CmsSearchOptions oldOptions = m_sessionCache.getSearchOptions();\n            if (oldOptions != null) {\n                result.put(JsonSearch.TYPE.getName(), oldOptions.getTypes());\n                result.put(JsonSearch.TEXT.getName(), oldOptions.getText());\n                result.put(JsonSearch.LOCATION.getName(), oldOptions.getLocation());\n            }\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.NEW)) {\n            // get a new element\n            if (!checkParameters(data, result, JsonRequest.TYPE.getName())) {\n                return result;\n            }\n            String type = data.optString(JsonRequest.TYPE.getName());\n\n            CmsResource newResource = m_manager.createNewElement(cms, cntPageParam, request, type);\n            result.put(JsonNewRes.ID.getName(), m_manager.convertToClientId(newResource.getStructureId()));\n            result.put(JsonNewRes.URI.getName(), cms.getSitePath(newResource));\n        } else if (action.equals(Action.PROPS)) {\n            // get property dialog information\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            CmsContainerElementBean element = getCachedElement(elemParam);\n            result = elemUtil.getElementPropertyInfo(element);\n        } else if (action.equals(Action.SET)) {\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // save the favorite list\n                JSONArray list = data.optJSONArray(JsonRequest.FAV.getName());\n                m_manager.saveFavoriteList(cms, arrayToElementList(list));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // save the recent list\n                JSONArray list = data.optJSONArray(JsonRequest.REC.getName());\n                m_sessionCache.setCacheRecentList(arrayToElementList(list));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.CNT)) {\n            // save the container page\n            setContainerPage(cntPageParam, data);\n        } else if (action.equals(Action.STARTEDIT)) {\n            // lock the container page\n            try {\n                cms.lockResourceTemporary(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.STOPEDIT)) {\n            // lock the container page\n            try {\n                cms.unlockResource(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.DEL)) {\n            // delete elements\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            deleteElements(elems);\n        } else {\n            error(result, Messages.get().getBundle(getWorkplaceLocale()).key(\n                Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,\n                ReqParam.ACTION.getName(),\n                actionParam));\n        }\n        return result;\n    }","commit_id":"b3b2f9bc1a6c1bdf1d2c844fadf5bdb1df62e96c","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the current user's favorites list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container page types\n     * \n     * @return the current user's favorites list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getFavoriteList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            getCmsObject(),\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // iterate the list and create the missing elements\n        List<CmsContainerElementBean> favList = m_manager.getFavoriteList(getCmsObject());\n        for (CmsContainerElementBean element : favList) {\n            String id = element.getClientId();\n            if ((resElements != null) && !resElements.has(id)) {\n                try {\n                    resElements.put(id, elemUtil.getElementData(element, types));\n                    m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                    result.put(id);\n                } catch (Exception e) {\n                    // ignore any problems\n                    if (!LOG.isDebugEnabled()) {\n                        LOG.warn(e.getLocalizedMessage());\n                    }\n                    LOG.debug(e.getLocalizedMessage(), e);\n                }\n            } else {\n                result.put(id);\n            }\n        }\n\n        return result;\n    }","id":21211,"modified_method":"/**\n     * Returns the current user's favorites list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container page types\n     * \n     * @return the current user's favorites list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getFavoriteList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // iterate the list and create the missing elements\n        List<CmsContainerElementBean> favList = m_manager.getFavoriteList(cms);\n        for (CmsContainerElementBean element : favList) {\n            // checking if resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        resElements.put(id, elemUtil.getElementData(element, types));\n                        m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","commit_id":"b3b2f9bc1a6c1bdf1d2c844fadf5bdb1df62e96c","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the current user's recent list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container types\n     * \n     * @return the current user's recent list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getRecentList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            getCmsObject(),\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // get the cached list\n        List<CmsContainerElementBean> recentList = m_sessionCache.getRecentList();\n        // iterate the list and create the missing elements\n        for (CmsContainerElementBean element : recentList) {\n            String id = element.getClientId();\n            if ((resElements != null) && !resElements.has(id)) {\n                try {\n                    resElements.put(id, elemUtil.getElementData(element, types));\n                    result.put(id);\n                } catch (Exception e) {\n                    // ignore any problems\n                    if (!LOG.isDebugEnabled()) {\n                        LOG.warn(e.getLocalizedMessage());\n                    }\n                    LOG.debug(e.getLocalizedMessage(), e);\n                }\n            } else {\n                result.put(id);\n            }\n        }\n\n        return result;\n    }","id":21212,"modified_method":"/**\n     * Returns the current user's recent list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container types\n     * \n     * @return the current user's recent list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getRecentList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // get the cached list\n        List<CmsContainerElementBean> recentList = m_sessionCache.getRecentList();\n        // iterate the list and create the missing elements\n        for (CmsContainerElementBean element : recentList) {\n            // checking if the resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        resElements.put(id, elemUtil.getElementData(element, types));\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","commit_id":"b3b2f9bc1a6c1bdf1d2c844fadf5bdb1df62e96c","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the data for the given container page.<p>\n     * \n     * @param resource the container page's resource \n     * @param cntPage the container page to use\n     * @param elemUri the current element uri, <code>null<\/code> if not to be used as template\n     * \n     * @return the data for the given container page\n     * \n     * @throws CmsException if something goes wrong with the cms context\n     * @throws JSONException if something goes wrong with the JSON manipulation\n     */\n    public JSONObject getContainerPage(CmsResource resource, CmsContainerPageBean cntPage, String elemUri)\n    throws CmsException, JSONException {\n\n        CmsObject cms = getCmsObject();\n\n        // create empty result object\n        JSONObject result = new JSONObject();\n        JSONObject resElements = new JSONObject();\n        JSONObject resContainers = new JSONObject();\n        result.put(JsonCntPage.ELEMENTS.getName(), resElements);\n        result.put(JsonCntPage.CONTAINERS.getName(), resContainers);\n        result.put(JsonCntPage.LOCALE.getName(), cms.getRequestContext().getLocale().toString());\n        result.put(JsonCntPage.RECENT_LIST_SIZE.getName(), m_manager.getRecentListMaxSize(cms));\n\n        // get the container page itself\n        Set<String> types = cntPage.getTypes();\n        // collect creatable type elements\n        resElements.merge(getNewResourceTypes(cms.getSitePath(resource), types), true, false);\n        // collect searchable type elements\n        resElements.merge(getSearchResourceTypes(cms.getSitePath(resource), types), true, false);\n\n        // collect page elements\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n        Set<String> ids = new HashSet<String>();\n        for (Map.Entry<String, CmsContainerBean> entry : cntPage.getContainers().entrySet()) {\n            CmsContainerBean container = entry.getValue();\n\n            // set the container data\n            JSONObject resContainer = new JSONObject();\n            resContainer.put(JsonContainer.OBJTYPE.getName(), TYPE_CONTAINER);\n            resContainer.put(JsonContainer.NAME.getName(), container.getName());\n            resContainer.put(JsonContainer.TYPE.getName(), container.getType());\n            resContainer.put(JsonContainer.MAXELEMENTS.getName(), container.getMaxElements());\n            JSONArray resContainerElems = new JSONArray();\n            resContainer.put(JsonContainer.ELEMENTS.getName(), resContainerElems);\n\n            // get the actual number of elements to render\n            int renderElems = container.getElements().size();\n            if ((container.getMaxElements() > -1) && (renderElems > container.getMaxElements())) {\n                renderElems = container.getMaxElements();\n            }\n            // add the template element, this will be executed only once during the whole 'for' iteration\n            if ((elemUri != null) && container.getType().equals(CmsContainerPageBean.TYPE_TEMPLATE)) {\n                renderElems--;\n\n                CmsResource elemRes = cms.readResource(elemUri);\n                CmsContainerElementBean element = new CmsContainerElementBean(elemRes.getStructureId(), null, null);\n                m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                // check if the element already exists\n                String id = element.getClientId();\n                // collect ids\n                resContainerElems.put(id);\n                if (ids.contains(id)) {\n                    continue;\n                }\n                // get the element data\n                JSONObject resElement = elemUtil.getElementData(element, types);\n                // store element data\n                ids.add(id);\n                resElements.put(id, resElement);\n            }\n\n            // iterate the elements\n            for (CmsContainerElementBean element : container.getElements()) {\n                if (renderElems < 1) {\n                    // just collect as many elements as allowed in the template\n                    break;\n                }\n                renderElems--;\n\n                // collect ids\n                String id = element.getClientId();\n                resContainerElems.put(id);\n                if (ids.contains(id)) {\n                    continue;\n                }\n                m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                // get the element data\n                JSONObject resElement = elemUtil.getElementData(element, types);\n\n                // get subcontainer elements\n                if (resElement.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                    // this container page should contain exactly one container\n                    CmsResource elementRes = cms.readResource(element.getElementId());\n                    CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                        cms,\n                        elementRes,\n                        getRequest());\n                    CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                        cms,\n                        cms.getRequestContext().getLocale());\n\n                    // adding all sub-items to the elements data\n                    for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                        if (!ids.contains(subElement.getElementId())) {\n                            String subId = subElement.getClientId();\n                            if (ids.contains(subId)) {\n                                continue;\n                            }\n                            JSONObject subItemData = elemUtil.getElementData(subElement, types);\n                            ids.add(subId);\n                            resElements.put(subId, subItemData);\n                        }\n                    }\n                }\n\n                // store element data\n                ids.add(id);\n                resElements.put(id, resElement);\n            }\n\n            resContainers.put(container.getName(), resContainer);\n        }\n        // collect the favorites\n        JSONArray resFavorites = getFavoriteList(resElements, types);\n        result.put(JsonCntPage.FAVORITES.getName(), resFavorites);\n        // collect the recent list\n        JSONArray resRecent = getRecentList(resElements, types);\n        result.put(JsonCntPage.RECENT.getName(), resRecent);\n\n        return result;\n    }","id":21213,"modified_method":"/**\n     * Returns the data for the given container page.<p>\n     * \n     * @param resource the container page's resource \n     * @param cntPage the container page to use\n     * @param elemUri the current element uri, <code>null<\/code> if not to be used as template\n     * \n     * @return the data for the given container page\n     * \n     * @throws CmsException if something goes wrong with the cms context\n     * @throws JSONException if something goes wrong with the JSON manipulation\n     */\n    public JSONObject getContainerPage(CmsResource resource, CmsContainerPageBean cntPage, String elemUri)\n    throws CmsException, JSONException {\n\n        CmsObject cms = getCmsObject();\n\n        // create empty result object\n        JSONObject result = new JSONObject();\n        JSONObject resElements = new JSONObject();\n        JSONObject resContainers = new JSONObject();\n        result.put(JsonCntPage.ELEMENTS.getName(), resElements);\n        result.put(JsonCntPage.CONTAINERS.getName(), resContainers);\n        result.put(JsonCntPage.LOCALE.getName(), cms.getRequestContext().getLocale().toString());\n        result.put(JsonCntPage.RECENT_LIST_SIZE.getName(), m_manager.getRecentListMaxSize(cms));\n\n        // get the container page itself\n        Set<String> types = cntPage.getTypes();\n        // collect creatable type elements\n        resElements.merge(getNewResourceTypes(cms.getSitePath(resource), types), true, false);\n        // collect searchable type elements\n        resElements.merge(getSearchResourceTypes(cms.getSitePath(resource), types), true, false);\n\n        // collect page elements\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n        Set<String> ids = new HashSet<String>();\n        for (Map.Entry<String, CmsContainerBean> entry : cntPage.getContainers().entrySet()) {\n            CmsContainerBean container = entry.getValue();\n\n            // set the container data\n            JSONObject resContainer = new JSONObject();\n            resContainer.put(JsonContainer.OBJTYPE.getName(), TYPE_CONTAINER);\n            resContainer.put(JsonContainer.NAME.getName(), container.getName());\n            resContainer.put(JsonContainer.TYPE.getName(), container.getType());\n            resContainer.put(JsonContainer.MAXELEMENTS.getName(), container.getMaxElements());\n            JSONArray resContainerElems = new JSONArray();\n            resContainer.put(JsonContainer.ELEMENTS.getName(), resContainerElems);\n\n            // get the actual number of elements to render\n            int renderElems = container.getElements().size();\n            if ((container.getMaxElements() > -1) && (renderElems > container.getMaxElements())) {\n                renderElems = container.getMaxElements();\n            }\n            // add the template element, this will be executed only once during the whole 'for' iteration\n            if ((elemUri != null) && container.getType().equals(CmsContainerPageBean.TYPE_TEMPLATE)) {\n                renderElems--;\n\n                CmsResource elemRes = cms.readResource(elemUri);\n                CmsContainerElementBean element = new CmsContainerElementBean(elemRes.getStructureId(), null, null);\n                m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                // check if the element already exists\n                String id = element.getClientId();\n                // collect ids\n                resContainerElems.put(id);\n                if (ids.contains(id)) {\n                    continue;\n                }\n                // get the element data\n                JSONObject resElement = elemUtil.getElementData(element, types);\n                // store element data\n                ids.add(id);\n                resElements.put(id, resElement);\n            }\n\n            // iterate the elements\n            for (CmsContainerElementBean element : container.getElements()) {\n                if (renderElems < 1) {\n                    // just collect as many elements as allowed in the template\n                    break;\n                }\n                renderElems--;\n\n                // collect ids\n                String id = element.getClientId();\n                resContainerElems.put(id);\n                if (ids.contains(id)) {\n                    continue;\n                }\n                m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                // get the element data\n                JSONObject resElement = elemUtil.getElementData(element, types);\n\n                // get subcontainer elements\n                if (resElement.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                    // this container page should contain exactly one container\n                    CmsResource elementRes = cms.readResource(element.getElementId());\n                    CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                        cms,\n                        elementRes,\n                        getRequest());\n                    CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                        cms,\n                        cms.getRequestContext().getLocale());\n\n                    // adding all sub-items to the elements data\n                    for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                        if (!ids.contains(subElement.getElementId())) {\n                            m_sessionCache.setCacheContainerElement(subElement.getClientId(), subElement);\n                            String subId = subElement.getClientId();\n                            if (ids.contains(subId)) {\n                                continue;\n                            }\n                            JSONObject subItemData = elemUtil.getElementData(subElement, types);\n                            ids.add(subId);\n                            resElements.put(subId, subItemData);\n                        }\n                    }\n                }\n\n                // store element data\n                ids.add(id);\n                resElements.put(id, resElement);\n            }\n\n            resContainers.put(container.getName(), resContainer);\n        }\n        // collect the favorites\n        JSONArray resFavorites = getFavoriteList(resElements, types);\n        result.put(JsonCntPage.FAVORITES.getName(), resFavorites);\n        // collect the recent list\n        JSONArray resRecent = getRecentList(resElements, types);\n        result.put(JsonCntPage.RECENT.getName(), resRecent);\n\n        return result;\n    }","commit_id":"d920425c85d9e73512101c3549e9ec0560ecb840","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the current user's favorites list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container page types\n     * \n     * @return the current user's favorites list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getFavoriteList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // iterate the list and create the missing elements\n        List<CmsContainerElementBean> favList = m_manager.getFavoriteList(cms);\n        for (CmsContainerElementBean element : favList) {\n            // checking if resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        resElements.put(id, elemUtil.getElementData(element, types));\n                        m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","id":21214,"modified_method":"/**\n     * Returns the current user's favorites list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container page types\n     * \n     * @return the current user's favorites list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getFavoriteList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // iterate the list and create the missing elements\n        List<CmsContainerElementBean> favList = m_manager.getFavoriteList(cms);\n        for (CmsContainerElementBean element : favList) {\n            // checking if resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        JSONObject elemData = elemUtil.getElementData(element, types);\n                        resElements.put(id, elemData);\n                        if (elemData.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                            // this container page should contain exactly one container\n                            CmsResource elementRes = cms.readResource(element.getElementId());\n                            CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                                cms,\n                                elementRes,\n                                getRequest());\n                            CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                                cms,\n                                cms.getRequestContext().getLocale());\n\n                            // adding all sub-items to the elements data\n                            for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                                String subId = subElement.getClientId();\n                                if (!resElements.has(subId)) {\n                                    JSONObject subItemData = elemUtil.getElementData(subElement, types);\n                                    resElements.put(subId, subItemData);\n                                    m_sessionCache.setCacheContainerElement(subId, subElement);\n                                }\n                            }\n                        }\n                        m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","commit_id":"d920425c85d9e73512101c3549e9ec0560ecb840","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the current user's recent list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container types\n     * \n     * @return the current user's recent list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getRecentList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // get the cached list\n        List<CmsContainerElementBean> recentList = m_sessionCache.getRecentList();\n        // iterate the list and create the missing elements\n        for (CmsContainerElementBean element : recentList) {\n            // checking if the resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        resElements.put(id, elemUtil.getElementData(element, types));\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","id":21215,"modified_method":"/**\n     * Returns the current user's recent list.<p>\n     * \n     * @param resElements the current page's element list\n     * @param types the supported container types\n     * \n     * @return the current user's recent list\n     * \n     * @throws CmsException if something goes wrong \n     */\n    public JSONArray getRecentList(JSONObject resElements, Collection<String> types) throws CmsException {\n\n        JSONArray result = new JSONArray();\n        CmsObject cms = getCmsObject();\n        CmsElementUtil elemUtil = new CmsElementUtil(\n            cms,\n            getRequest().getParameter(ReqParam.URI.getName()),\n            getRequest(),\n            getResponse());\n\n        // get the cached list\n        List<CmsContainerElementBean> recentList = m_sessionCache.getRecentList();\n        // iterate the list and create the missing elements\n        for (CmsContainerElementBean element : recentList) {\n            // checking if the resource exists\n            if (cms.existsResource(element.getElementId(), CmsResourceFilter.ONLY_VISIBLE_NO_DELETED)) {\n                String id = element.getClientId();\n                if ((resElements != null) && !resElements.has(id)) {\n                    try {\n                        JSONObject elemData = elemUtil.getElementData(element, types);\n                        resElements.put(id, elemData);\n                        if (elemData.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                            // this container page should contain exactly one container\n                            CmsResource elementRes = cms.readResource(element.getElementId());\n                            CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                                cms,\n                                elementRes,\n                                getRequest());\n                            CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                                cms,\n                                cms.getRequestContext().getLocale());\n\n                            // adding all sub-items to the elements data\n                            for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                                String subId = subElement.getClientId();\n                                if (!resElements.has(subId)) {\n                                    JSONObject subItemData = elemUtil.getElementData(subElement, types);\n                                    resElements.put(subId, subItemData);\n                                    m_sessionCache.setCacheContainerElement(subId, subElement);\n                                }\n                            }\n                        }\n                        result.put(id);\n                    } catch (Exception e) {\n                        // ignore any problems\n                        if (!LOG.isDebugEnabled()) {\n                            LOG.warn(e.getLocalizedMessage());\n                        }\n                        LOG.debug(e.getLocalizedMessage(), e);\n                    }\n                } else {\n                    result.put(id);\n                }\n            }\n        }\n\n        return result;\n    }","commit_id":"d920425c85d9e73512101c3549e9ec0560ecb840","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Handles all ADE requests.<p>\n     * \n     * @return the result\n     * \n     * @throws JSONException if there is any problem with JSON\n     * @throws CmsException if there is a problem with the cms context\n     */\n    @Override\n    public JSONObject executeAction() throws CmsException, JSONException {\n\n        JSONObject result = new JSONObject();\n\n        HttpServletRequest request = getRequest();\n        CmsObject cms = getCmsObject();\n\n        if (!checkParameters(\n            request,\n            result,\n            ReqParam.ACTION.getName(),\n            ReqParam.LOCALE.getName(),\n            ReqParam.CNTPAGE.getName(),\n            ReqParam.URI.getName())) {\n            // every request needs to have at least these parameters \n            return result;\n        }\n        String actionParam = request.getParameter(ReqParam.ACTION.getName());\n        Action action = Action.valueOf(actionParam.toUpperCase());\n        String localeParam = request.getParameter(ReqParam.LOCALE.getName());\n        cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));\n        String cntPageParam = request.getParameter(ReqParam.CNTPAGE.getName());\n        String uriParam = request.getParameter(ReqParam.URI.getName());\n\n        JSONObject data = new JSONObject();\n        if (checkParameters(request, null, ReqParam.DATA.getName())) {\n            String dataParam = request.getParameter(ReqParam.DATA.getName());\n            data = new JSONObject(dataParam);\n        }\n\n        if (action.equals(Action.ALL)) {\n            // first load, get everything\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            result = getContainerPage(cntPageRes, cntPage, uriParam.equals(cntPageParam) ? null : uriParam);\n        } else if (action.equals(Action.ELEM)) {\n            // get element data\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            if (elems == null) {\n                // single element\n                elems = new JSONArray();\n                elems.put(data.optString(JsonRequest.ELEM.getName()));\n            }\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            JSONObject resElements = new JSONObject();\n            for (int i = 0; i < elems.length(); i++) {\n                String elemId = elems.getString(i);\n                CmsContainerElementBean element = getCachedElement(elemId);\n                JSONObject elementData = elemUtil.getElementData(element, cntPage.getTypes());\n                resElements.put(element.getClientId(), elementData);\n                if (elementData.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {\n                    // this is a sub-container \n                    Set<String> ids = new HashSet<String>();\n                    ids.add(elemId);\n                    CmsResource elementRes = cms.readResource(element.getElementId());\n                    CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(\n                        cms,\n                        elementRes,\n                        getRequest());\n                    CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                        cms,\n                        cms.getRequestContext().getLocale());\n\n                    // adding all sub-items to the elements data\n                    for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                        if (!ids.contains(subElement.getElementId())) {\n                            String subId = subElement.getClientId();\n                            if (ids.contains(subId)) {\n                                continue;\n                            }\n                            JSONObject subItemData = elemUtil.getElementData(subElement, cntPage.getTypes());\n                            ids.add(subId);\n                            resElements.put(subId, subItemData);\n                        }\n                    }\n                }\n            }\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.ELEMPROPS)) {\n            // element formatted with the given properties\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName(), JsonRequest.PROPERTIES.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            JSONObject properties = data.optJSONObject(JsonRequest.PROPERTIES.getName());\n\n            CmsContainerElementBean element = createElement(m_manager.convertToServerId(elemParam), properties);\n\n            m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n\n            JSONObject resElements = new JSONObject();\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            resElements.put(element.getClientId(), elemUtil.getElementData(element, cntPage.getTypes()));\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.GET)) {\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // get the favorite list\n                result.put(JsonResponse.FAVORITES.getName(), getFavoriteList(null, cntPage.getTypes()));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // get recent list\n                result.put(JsonResponse.RECENT.getName(), getRecentList(null, cntPage.getTypes()));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.SEARCH)) {\n            // new search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.LS)) {\n            // last search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getLastSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n\n            // we need those on the client side to make scrolling work\n            CmsSearchOptions oldOptions = m_sessionCache.getSearchOptions();\n            if (oldOptions != null) {\n                result.put(JsonSearch.TYPE.getName(), oldOptions.getTypes());\n                result.put(JsonSearch.TEXT.getName(), oldOptions.getText());\n                result.put(JsonSearch.LOCATION.getName(), oldOptions.getLocation());\n            }\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.NEW)) {\n            // get a new element\n            if (!checkParameters(data, result, JsonRequest.TYPE.getName())) {\n                return result;\n            }\n            String type = data.optString(JsonRequest.TYPE.getName());\n\n            CmsResource newResource = m_manager.createNewElement(cms, cntPageParam, request, type);\n            result.put(JsonNewRes.ID.getName(), m_manager.convertToClientId(newResource.getStructureId()));\n            result.put(JsonNewRes.URI.getName(), cms.getSitePath(newResource));\n        } else if (action.equals(Action.PROPS)) {\n            // get property dialog information\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            CmsContainerElementBean element = getCachedElement(elemParam);\n            result = elemUtil.getElementPropertyInfo(element);\n        } else if (action.equals(Action.SET)) {\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // save the favorite list\n                JSONArray list = data.optJSONArray(JsonRequest.FAV.getName());\n                m_manager.saveFavoriteList(cms, arrayToElementList(list));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // save the recent list\n                JSONArray list = data.optJSONArray(JsonRequest.REC.getName());\n                m_sessionCache.setCacheRecentList(arrayToElementList(list));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.CNT)) {\n            // save the container page\n            setContainerPage(cntPageParam, data);\n        } else if (action.equals(Action.STARTEDIT)) {\n            // lock the container page\n            try {\n                cms.lockResourceTemporary(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.STOPEDIT)) {\n            // lock the container page\n            try {\n                cms.unlockResource(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.DEL)) {\n            // delete elements\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            deleteElements(elems);\n        } else {\n            error(result, Messages.get().getBundle(getWorkplaceLocale()).key(\n                Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,\n                ReqParam.ACTION.getName(),\n                actionParam));\n        }\n        return result;\n    }","id":21216,"modified_method":"/**\n     * Handles all ADE requests.<p>\n     * \n     * @return the result\n     * \n     * @throws JSONException if there is any problem with JSON\n     * @throws CmsException if there is a problem with the cms context\n     */\n    @Override\n    public JSONObject executeAction() throws CmsException, JSONException {\n\n        JSONObject result = new JSONObject();\n\n        HttpServletRequest request = getRequest();\n        CmsObject cms = getCmsObject();\n\n        if (!checkParameters(\n            request,\n            result,\n            ReqParam.ACTION.getName(),\n            ReqParam.LOCALE.getName(),\n            ReqParam.CNTPAGE.getName(),\n            ReqParam.URI.getName())) {\n            // every request needs to have at least these parameters \n            return result;\n        }\n        String actionParam = request.getParameter(ReqParam.ACTION.getName());\n        Action action = Action.valueOf(actionParam.toUpperCase());\n        String localeParam = request.getParameter(ReqParam.LOCALE.getName());\n        cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));\n        String cntPageParam = request.getParameter(ReqParam.CNTPAGE.getName());\n        String uriParam = request.getParameter(ReqParam.URI.getName());\n\n        JSONObject data = new JSONObject();\n        if (checkParameters(request, null, ReqParam.DATA.getName())) {\n            String dataParam = request.getParameter(ReqParam.DATA.getName());\n            data = new JSONObject(dataParam);\n        }\n\n        if (action.equals(Action.ALL)) {\n            // first load, get everything\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            result = getContainerPage(cntPageRes, cntPage, uriParam.equals(cntPageParam) ? null : uriParam);\n        } else if (action.equals(Action.ELEM)) {\n            // get element data\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            if (elems == null) {\n                // single element\n                elems = new JSONArray();\n                elems.put(data.optString(JsonRequest.ELEM.getName()));\n            }\n            result.put(JsonResponse.ELEMENTS.getName(), getElements(elems, uriParam, cntPageParam, request));\n        } else if (action.equals(Action.ELEMPROPS)) {\n            // element formatted with the given properties\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName(), JsonRequest.PROPERTIES.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            JSONObject properties = data.optJSONObject(JsonRequest.PROPERTIES.getName());\n\n            CmsContainerElementBean element = createElement(m_manager.convertToServerId(elemParam), properties);\n\n            m_sessionCache.setCacheContainerElement(element.getClientId(), element);\n\n            JSONObject resElements = new JSONObject();\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            resElements.put(element.getClientId(), elemUtil.getElementData(element, cntPage.getTypes()));\n            result.put(JsonResponse.ELEMENTS.getName(), resElements);\n        } else if (action.equals(Action.GET)) {\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // get the favorite list\n                result.put(JsonResponse.FAVORITES.getName(), getFavoriteList(null, cntPage.getTypes()));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // get recent list\n                result.put(JsonResponse.RECENT.getName(), getRecentList(null, cntPage.getTypes()));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.SEARCH)) {\n            // new search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.LS)) {\n            // last search\n            CmsSearchOptions searchOptions = getSearchOptions(data);\n            CmsResource cntPageRes = cms.readResource(cntPageParam);\n            CmsXmlContainerPage xmlCntPage = CmsXmlContainerPageFactory.unmarshal(cms, cntPageRes, request);\n            CmsContainerPageBean cntPage = xmlCntPage.getCntPage(cms, cms.getRequestContext().getLocale());\n            JSONObject searchResult = getLastSearchResult(cntPageParam, searchOptions, cntPage.getTypes());\n\n            // we need those on the client side to make scrolling work\n            CmsSearchOptions oldOptions = m_sessionCache.getSearchOptions();\n            if (oldOptions != null) {\n                result.put(JsonSearch.TYPE.getName(), oldOptions.getTypes());\n                result.put(JsonSearch.TEXT.getName(), oldOptions.getText());\n                result.put(JsonSearch.LOCATION.getName(), oldOptions.getLocation());\n            }\n            result.merge(searchResult, true, false);\n        } else if (action.equals(Action.NEW)) {\n            // get a new element\n            if (!checkParameters(data, result, JsonRequest.TYPE.getName())) {\n                return result;\n            }\n            String type = data.optString(JsonRequest.TYPE.getName());\n\n            CmsResource newResource = m_manager.createNewElement(cms, cntPageParam, request, type);\n            result.put(JsonNewRes.ID.getName(), m_manager.convertToClientId(newResource.getStructureId()));\n            result.put(JsonNewRes.URI.getName(), cms.getSitePath(newResource));\n        } else if (action.equals(Action.PROPS)) {\n            // get property dialog information\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            String elemParam = data.optString(JsonRequest.ELEM.getName());\n            CmsElementUtil elemUtil = new CmsElementUtil(cms, uriParam, request, getResponse());\n            CmsContainerElementBean element = getCachedElement(elemParam);\n            result = elemUtil.getElementPropertyInfo(element);\n        } else if (action.equals(Action.SET)) {\n            if (checkParameters(data, null, JsonRequest.FAV.getName())) {\n                // save the favorite list\n                JSONArray list = data.optJSONArray(JsonRequest.FAV.getName());\n                m_manager.saveFavoriteList(cms, arrayToElementList(list));\n            } else if (checkParameters(data, result, JsonRequest.REC.getName())) {\n                // save the recent list\n                JSONArray list = data.optJSONArray(JsonRequest.REC.getName());\n                m_sessionCache.setCacheRecentList(arrayToElementList(list));\n            } else {\n                return result;\n            }\n        } else if (action.equals(Action.CNT)) {\n            // save the container page\n            setContainerPage(cntPageParam, data);\n        } else if (action.equals(Action.STARTEDIT)) {\n            // lock the container page\n            try {\n                cms.lockResourceTemporary(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.STOPEDIT)) {\n            // lock the container page\n            try {\n                cms.unlockResource(cntPageParam);\n            } catch (CmsException e) {\n                error(result, e.getLocalizedMessage(getWorkplaceLocale()));\n            }\n        } else if (action.equals(Action.DEL)) {\n            // delete elements\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            JSONArray elems = data.optJSONArray(JsonRequest.ELEM.getName());\n            deleteElements(elems);\n        } else if (action.equals(Action.SUBCNT)) {\n            // save sub container\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            try {\n                setSubContainer(data.getJSONObject(JsonRequest.ELEM.getName()), localeParam);\n            } catch (Exception e) {\n                error(result, e.getLocalizedMessage());\n            }\n        } else if (action.equals(Action.NEWSUB)) {\n            // save sub container\n            if (!checkParameters(data, result, JsonRequest.ELEM.getName())) {\n                return result;\n            }\n            try {\n                CmsResource newSub = createNewSubContainer(cntPageParam, request);\n                JSONObject subcontainer = data.getJSONObject(JsonRequest.ELEM.getName());\n                subcontainer.put(CmsElementUtil.JsonElement.FILE.getName(), cms.getSitePath(newSub));\n                setSubContainer(subcontainer, localeParam);\n                result.put(JsonNewRes.ID.getName(), m_manager.convertToClientId(newSub.getStructureId()));\n                result.put(JsonNewRes.URI.getName(), cms.getSitePath(newSub));\n            } catch (Exception e) {\n                error(result, e.getLocalizedMessage());\n            }\n        } else {\n            error(result, Messages.get().getBundle(getWorkplaceLocale()).key(\n                Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,\n                ReqParam.ACTION.getName(),\n                actionParam));\n        }\n        return result;\n    }","commit_id":"d920425c85d9e73512101c3549e9ec0560ecb840","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the data for an element.<p>\n     * \n     * @param element the resource\n     * @param types the types supported by the container page\n     * \n     * @return the data for an element\n     * \n     * @throws CmsException if something goes wrong\n     * @throws JSONException if something goes wrong in the json manipulation\n     */\n    public JSONObject getElementData(CmsContainerElementBean element, Collection<String> types)\n    throws CmsException, JSONException {\n\n        // create new json object for the element\n        JSONObject resElement = new JSONObject();\n        CmsResource resource = m_cms.readResource(element.getElementId());\n        CmsResourceUtil resUtil = new CmsResourceUtil(m_cms, resource);\n        resElement.put(JsonElement.OBJTYPE.getName(), TYPE_ELEMENT);\n        resElement.put(JsonElement.ID.getName(), element.getClientId());\n        resElement.put(JsonElement.FILE.getName(), resUtil.getFullPath());\n        resElement.put(JsonElement.DATE.getName(), resource.getDateLastModified());\n        resElement.put(JsonElement.USER.getName(), m_cms.readUser(resource.getUserLastModified()).getName());\n        resElement.put(JsonElement.NAVTEXT.getName(), resUtil.getNavText());\n        resElement.put(JsonElement.TITLE.getName(), resUtil.getTitle());\n        resElement.put(\n            JsonElement.NO_EDIT_REASON.getName(),\n            CmsEncoder.escapeHtml(resUtil.getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(m_cms))));\n        resElement.put(JsonElement.STATUS.getName(), \"\" + resUtil.getStateAbbreviation());\n        // add formatted elements\n        JSONObject resContents = new JSONObject();\n        resElement.put(JsonElement.CONTENTS.getName(), resContents);\n        // add formatter uris\n        JSONObject formatters = new JSONObject();\n        resElement.put(JsonElement.FORMATTERS.getName(), formatters);\n\n        if (resource.getTypeId() == CmsResourceTypeXmlContainerPage.SUB_CONTAINER_TYPE_ID) {\n            CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(m_cms, resource, m_req);\n            CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                m_cms,\n                m_cms.getRequestContext().getLocale());\n            if (subContainer.getTypes().isEmpty()) {\n                if (subContainer.getElements().isEmpty()) {\n                    //TODO: use formatter to generate the 'empty'-content\n                    String emptySub = \"<div>NEW AND EMPTY<\/div>\";\n                    for (String type : types) {\n                        formatters.put(type, \"formatter\");\n\n                        resContents.put(type, emptySub);\n                    }\n                } else {\n                    // TODO: throw appropriate exception\n                    return null;\n                }\n            } else {\n                // add formatter and content entries for the supported types\n                for (String type : subContainer.getTypes()) {\n                    if (types.contains(type)) {\n                        formatters.put(type, \"formatter\"); // empty formatters\n                        resContents.put(type, \"<div>should not be used<\/div>\"); // empty contents\n                    }\n                }\n            }\n            String defaultFormatter = m_manager.getXmlContentFormatters(m_cms, resource).get(\n                CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE);\n            String jspResult;\n            try {\n                jspResult = getElementContent(element, m_cms.readResource(defaultFormatter));\n                // set the results\n                formatters.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE, defaultFormatter);\n                resContents.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE, jspResult); // empty contents\n            } catch (Exception e) {\n                LOG.error(Messages.get().getBundle().key(\n                    Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,\n                    m_cms.getSitePath(resource),\n                    defaultFormatter,\n                    CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE), e);\n            }\n            // add subitems\n            JSONArray subitems = new JSONArray();\n            resElement.put(JsonElement.SUBITEMS.getName(), subitems);\n            // iterate the elements\n            for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                // collect ids\n                subitems.put(subElement.getClientId());\n            }\n\n        } else {\n            Iterator<Map.Entry<String, String>> it = m_manager.getXmlContentFormatters(m_cms, resource).entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = it.next();\n                String type = entry.getKey();\n                if (!types.contains(type) && !type.equals(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE)) {\n                    // skip not supported types\n                    continue;\n                }\n                String formatterUri = entry.getValue();\n                formatters.put(type, formatterUri);\n                // execute the formatter jsp for the given element\n                try {\n                    String jspResult = getElementContent(element, m_cms.readResource(formatterUri));\n                    // set the results\n                    resContents.put(type, jspResult);\n                } catch (Exception e) {\n                    LOG.error(Messages.get().getBundle().key(\n                        Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,\n                        m_cms.getSitePath(resource),\n                        formatterUri,\n                        type), e);\n                }\n            }\n        }\n\n        return resElement;\n    }","id":21217,"modified_method":"/**\n     * Returns the data for an element.<p>\n     * \n     * @param element the resource\n     * @param types the types supported by the container page\n     * \n     * @return the data for an element\n     * \n     * @throws CmsException if something goes wrong\n     * @throws JSONException if something goes wrong in the json manipulation\n     */\n    public JSONObject getElementData(CmsContainerElementBean element, Collection<String> types)\n    throws CmsException, JSONException {\n\n        // create new json object for the element\n        JSONObject resElement = new JSONObject();\n        CmsResource resource = m_cms.readResource(element.getElementId());\n        CmsResourceUtil resUtil = new CmsResourceUtil(m_cms, resource);\n        resElement.put(JsonElement.OBJTYPE.getName(), TYPE_ELEMENT);\n        resElement.put(JsonElement.ID.getName(), element.getClientId());\n        resElement.put(JsonElement.FILE.getName(), resUtil.getFullPath());\n        resElement.put(JsonElement.DATE.getName(), resource.getDateLastModified());\n        resElement.put(JsonElement.USER.getName(), m_cms.readUser(resource.getUserLastModified()).getName());\n        resElement.put(JsonElement.NAVTEXT.getName(), resUtil.getNavText());\n        resElement.put(JsonElement.TITLE.getName(), resUtil.getTitle());\n        resElement.put(\n            JsonElement.NO_EDIT_REASON.getName(),\n            CmsEncoder.escapeHtml(resUtil.getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(m_cms))));\n        resElement.put(JsonElement.STATUS.getName(), \"\" + resUtil.getStateAbbreviation());\n        // add formatted elements\n        JSONObject resContents = new JSONObject();\n        resElement.put(JsonElement.CONTENTS.getName(), resContents);\n        // add formatter uris\n        JSONObject formatters = new JSONObject();\n        resElement.put(JsonElement.FORMATTERS.getName(), formatters);\n\n        if (resource.getTypeId() == CmsResourceTypeXmlContainerPage.SUB_CONTAINER_TYPE_ID) {\n            CmsXmlSubContainer xmlSubContainer = CmsXmlSubContainerFactory.unmarshal(m_cms, resource, m_req);\n            CmsSubContainerBean subContainer = xmlSubContainer.getSubContainer(\n                m_cms,\n                m_cms.getRequestContext().getLocale());\n            resElement.put(JsonElement.DESCRIPTION.getName(), subContainer.getDescription());\n            JSONArray jTypes = new JSONArray();\n            resElement.put(JsonElement.TYPES.getName(), jTypes);\n            if (subContainer.getTypes().isEmpty()) {\n                if (subContainer.getElements().isEmpty()) {\n                    //TODO: use formatter to generate the 'empty'-content\n                    String emptySub = \"<div>NEW AND EMPTY<\/div>\";\n                    for (String type : types) {\n                        formatters.put(type, \"formatter\");\n\n                        resContents.put(type, emptySub);\n                    }\n                } else {\n                    // TODO: throw appropriate exception\n                    return null;\n                }\n            } else {\n                // add formatter and content entries for the supported types\n                for (String type : subContainer.getTypes()) {\n                    jTypes.put(type);\n                    if (types.contains(type)) {\n                        formatters.put(type, \"formatter\"); // empty formatters\n                        resContents.put(type, \"<div>should not be used<\/div>\"); // empty contents\n                    }\n                }\n            }\n            String defaultFormatter = m_manager.getXmlContentFormatters(m_cms, resource).get(\n                CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE);\n            String jspResult;\n            try {\n                jspResult = getElementContent(element, m_cms.readResource(defaultFormatter));\n                // set the results\n                formatters.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE, defaultFormatter);\n                resContents.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE, jspResult); // empty contents\n            } catch (Exception e) {\n                LOG.error(Messages.get().getBundle().key(\n                    Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,\n                    m_cms.getSitePath(resource),\n                    defaultFormatter,\n                    CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE), e);\n            }\n            // add subitems\n            JSONArray subitems = new JSONArray();\n            resElement.put(JsonElement.SUBITEMS.getName(), subitems);\n            // iterate the elements\n            for (CmsContainerElementBean subElement : subContainer.getElements()) {\n                // collect ids\n                subitems.put(subElement.getClientId());\n            }\n\n        } else {\n            Iterator<Map.Entry<String, String>> it = m_manager.getXmlContentFormatters(m_cms, resource).entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = it.next();\n                String type = entry.getKey();\n                if (!types.contains(type) && !type.equals(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE)) {\n                    // skip not supported types\n                    continue;\n                }\n                String formatterUri = entry.getValue();\n                formatters.put(type, formatterUri);\n                // execute the formatter jsp for the given element\n                try {\n                    String jspResult = getElementContent(element, m_cms.readResource(formatterUri));\n                    // set the results\n                    resContents.put(type, jspResult);\n                } catch (Exception e) {\n                    LOG.error(Messages.get().getBundle().key(\n                        Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,\n                        m_cms.getSitePath(resource),\n                        formatterUri,\n                        type), e);\n                }\n            }\n        }\n\n        return resElement;\n    }","commit_id":"d920425c85d9e73512101c3549e9ec0560ecb840","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        //StringBuffer buffer = new StringBuffer();\n\tSortedMap nodes = FilterDaoFactory.getInstance().getNodeMap(rule);\n        try {\n            Iterator i = nodes.keySet().iterator();\n            while(i.hasNext()) {\n                Integer key = (Integer)i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if(criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","id":21218,"modified_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        SortedMap<Integer, String> nodes = getFilterDao().getNodeMap(rule);\n        try {\n            Iterator<Integer> i = nodes.keySet().iterator();\n            while (i.hasNext()) {\n                Integer key = i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if (criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void newNotifWithUEI(HttpServletRequest request, HttpSession user, StringBuffer redirectString, StringBuffer rule) throws ServletException {\n        String uei=request.getParameter(\"uei\");\n        Notification newNotice = new Notification();\n        newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n        newNotice.setNumericMessage(\"111-%noticeid%\");\n        newNotice.setSubject(\"Notice #%noticeid%\");\n        newNotice.setStatus(\"on\");\n        newNotice.setUei(uei);\n\n        Map params = new HashMap();\n        rule.append(newNotice.getRule());\n        rule = toSingleQuote(rule);\n        params.put(\"newRule\", rule.toString());\n\n        user.setAttribute(\"newNotice\", newNotice);\n        redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));                         \n    }","id":21219,"modified_method":"private String newNotifWithUEI(HttpServletRequest request, HttpSession user) {\n        String uei = request.getParameter(\"uei\");\n        Notification newNotice = buildNewNotification(\"on\");\n        newNotice.setUei(uei);\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"newRule\", toSingleQuote(newNotice.getRule()));\n\n        user.setAttribute(\"newNotice\", newNotice);\n        \n        return SOURCE_PAGE_RULE + makeQueryString(params);  \n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String makeQueryString(Map map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = (String) i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","id":21220,"modified_method":"private String makeQueryString(Map<String, Object> map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator<String> i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n\tnewNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (int i = 0; i < parameters.length; i++) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameters[i].getName());\n            newParam.setValue(parameters[i].getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","id":21221,"modified_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n        newNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (Parameter parameter : parameters) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameter.getName());\n            newParam.setValue(parameter.getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer checkParens(StringBuffer buffer) {\n        if(buffer.length()==0) {\n            return buffer;\n        }\n        if ((buffer.charAt(0) != '(') || (buffer.charAt(buffer.length() - 1) != ')')) {\n            buffer.append(\")\");\n            buffer.insert(0, \"(\");\n        }\n        return buffer;\n    }","id":21222,"modified_method":"private static String checkParens(String rule) {\n        if (rule.length() == 0) {\n            return rule;\n        } else if ((rule.charAt(0) != '(') || (rule.charAt(rule.length() - 1) != ')')) {\n            return \"(\" + rule + \")\";\n        } else {\n            return rule;\n        }\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        StringBuffer rule = new StringBuffer(\"\");\n        StringBuffer redirectString = new StringBuffer();\n        \n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory:\",e);\n        }\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"delete\")) {\n                try {\n                    NotificationFactory.getInstance().removeNotification(request.getParameter(\"notice\"));\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            } else if (userAction.equals(\"edit\")) {\n                edit(request, user, redirectString);\n            } else if (userAction.equals(\"new\")) {\n                Notification newNotice = new Notification();\n                newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n                newNotice.setNumericMessage(\"111-%noticeid%\");\n                newNotice.setSubject(\"Notice #%noticeid%\");\n                newNotice.setStatus(\"off\");\n\n                user.setAttribute(\"newNotice\", newNotice);\n\n                redirectString.append(SOURCE_PAGE_UEIS);\n            } else if (userAction.equals(\"on\") || userAction.equals(\"off\")) {\n                try {\n                    NotificationFactory.getInstance().updateStatus(request.getParameter(\"notice\"), userAction);\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setUei(request.getParameter(\"uei\"));\n\n            Map params = new HashMap();\n            rule.append(newNotice.getRule());\n            rule = toSingleQuote(rule);\n            params.put(\"newRule\", rule.toString());\n\n            redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n\n            String services[] = request.getParameterValues(\"services\");\n            if (services != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < services.length; i++) {\n                    rule.append(\"is\").append(services[i]);\n                    if (i < services.length - 1)\n                        rule.append(\" | \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            String notServices[] = request.getParameterValues(\"notServices\");\n            if (notServices != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < notServices.length; i++) {\n                    rule.append(\"!is\").append(notServices[i]);\n                    if (i < notServices.length - 1)\n                        rule.append(\" & \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            Map params = new HashMap();\n            params.put(\"newRule\", rule.toString());\n            if (services != null) {\n                params.put(\"services\", services);\n            }\n            if (notServices != null) {\n                params.put(\"notServices\", notServices);\n            }\n\n            // page to redirect to, either validate or skip validation\n            String redirectPage = request.getParameter(\"nextPage\");\n\n            // now lets see if the rule is syntactically valid\n            try {\n                FilterDaoFactory.getInstance().validateRule(rule.toString());\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"failed\");\n                redirectPage = SOURCE_PAGE_RULE;\n            }\n\n            // save the rule if we are bypassing validation\n            if (redirectPage.equals(SOURCE_PAGE_PATH)) {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(rule.toString());\n            }\n\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"rebuild\")) {\n                Map params = new HashMap();\n                params.put(\"newRule\", request.getParameter(\"newRule\"));\n                String services[] = request.getParameterValues(\"services\");\n                if (services != null)\n                    params.put(\"services\", services);\n                params.put(\"mode\", \"rebuild\");\n\n                redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n            } else {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(request.getParameter(\"newRule\"));\n\n                redirectString.append(SOURCE_PAGE_PATH);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setDestinationPath(request.getParameter(\"path\"));\n\n            String description = request.getParameter(\"description\");\n            if (description != null && !description.trim().equals(\"\"))\n                newNotice.setDescription(description);\n            else\n                newNotice.setDescription(null);\n\n            newNotice.setTextMessage(request.getParameter(\"textMsg\"));\n\n            String subject = request.getParameter(\"subject\");\n            if (subject != null && !subject.trim().equals(\"\"))\n                newNotice.setSubject(subject);\n            else\n                newNotice.setSubject(null);\n\n            String numMessage = request.getParameter(\"numMsg\");\n            if (numMessage != null && !numMessage.trim().equals(\"\"))\n                newNotice.setNumericMessage(numMessage);\n            else\n                newNotice.setNumericMessage(null);\n\n            String oldName = newNotice.getName();\n            newNotice.setName(request.getParameter(\"name\"));\n\n            String varbindName=request.getParameter(\"varbindName\");\n            String varbindValue=request.getParameter(\"varbindValue\");\n            \n            Varbind varbind=newNotice.getVarbind();           \n            if(varbindName!=null && !varbindName.trim().equals(\"\") && varbindValue!=null && !varbindValue.trim().equals(\"\")) {\n\n                if(varbind==null) {\n                    varbind=new Varbind();\n                    newNotice.setVarbind(varbind);\n                }\n                varbind.setVbname(varbindName);\n                varbind.setVbvalue(varbindValue);\n            } else {\n                //Must do this to allow clearing out varbind definitions\n                newNotice.setVarbind(null);\n            }\n            \n            try {\n                    // replacing a path with a new name.\n                    NotificationFactory.getInstance().replaceNotification(oldName, newNotice);\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save/reload notification configuration file.\", e);\n            }\n            String suppliedReturnPage=(String)user.getAttribute(\"noticeWizardReturnPage\");\n            if(suppliedReturnPage!=null && !suppliedReturnPage.equals(\"\")) {\n                redirectString.append(suppliedReturnPage);\n            } else {\n                redirectString.append(SOURCE_PAGE_NOTICES);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n            String newRule = rule.toString();\n            String redirectPage = SOURCE_PAGE_VALIDATE_PATH_OUTAGE;\n\t    String criticalIp = request.getParameter(\"criticalIp\");\n            Map params = new HashMap();\n\t    if (newRule != null)\n\t      params.put(\"newRule\", newRule);\n\t    if (request.getParameter(\"criticalSvc\") != null)\n\t      params.put(\"criticalSvc\", request.getParameter(\"criticalSvc\"));\n\t    if (request.getParameter(\"showNodes\") != null)\n\t      params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n\t    if (criticalIp != null && !criticalIp.equals(\"\")) {\n\t      params.put(\"criticalIp\", criticalIp);\n              try {\n                FilterDaoFactory.getInstance().validateRule(\"IPADDR IPLIKE \" + criticalIp);\n              } catch (FilterParseException e) {\n                // page to redirect to if the critical IP is invalid\n                params.put(\"mode\", \"Critical path IP failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n              }\n            }\n            try {\n                FilterDaoFactory.getInstance().validateRule(newRule);\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"Current rule failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            String redirectPage = SOURCE_PAGE_NOTIFICATION_INDEX;\n            String userAction = request.getParameter(\"userAction\");\n            String criticalIp = request.getParameter(\"criticalIp\");\n            String criticalSvc = request.getParameter(\"criticalSvc\");\n            String newRule = request.getParameter(\"newRule\");\n            Map params = new HashMap();\n            if (userAction != null && userAction.equals(\"rebuild\")) {\n                params.put(\"newRule\", newRule);\n                params.put(\"criticalIp\", criticalIp);\n                params.put(\"criticalSvc\", criticalSvc);\n\t        if (request.getParameter(\"showNodes\") != null)\n\t            params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            } else {\n                try {\n                    updatePaths(newRule, criticalIp, criticalSvc);\n                } catch (FilterParseException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                } catch (SQLException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                }\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            //We've come from elsewhere in the Web UI page, and will have a UEI.  \n            //If there are existing notices for this UEI, then go to a page listing them allowing editing.  \n            //If there are none, then create a notice, populate the UEI, and go to the buildRule page.\n            String returnPage=request.getParameter(\"returnPage\");\n            user.setAttribute(\"noticeWizardReturnPage\", returnPage);\n            String uei=request.getParameter(\"uei\");\n            try {\n                if(NotificationFactory.getInstance().hasUei(uei)) {\n                    //There are existing notifications for this UEI - goto a listing page\n                    Map params = new HashMap();\n                    params.put(\"uei\", uei);                   \n                    redirectString.append(SOURCE_PAGE_NOTIFS_FOR_UEI).append(makeQueryString(params));\n                } else {\n                    newNotifWithUEI(request, user, redirectString,rule);\n                }\n            } catch (IOException e) {\n                throw new ServletException(\"IOException while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (MarshalException e) {\n                throw new ServletException(\"Marshalling Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (ValidationException e) {\n                throw new ServletException(\"Validation Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            String userAction=request.getParameter(\"userAction\");\n            if(\"edit\".equals(userAction)) {\n                edit(request, user, redirectString);\n            } else if (\"new\".equals(userAction)) {\n                newNotifWithUEI(request, user, redirectString, rule);\n            }\n        }\n\n        if (redirectString.toString().equals(\"\"))\n            throw new ServletException(\"no redirect specified for this wizard!\");\n\n        response.sendRedirect(redirectString.toString());\n    }","id":21223,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        /*\n         * FIXME: Why do we do this for every request in doPost instead of\n         * once in init?\n         */\n        try {\n            NotifdConfigFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotifdConfigFactory: \" + e, e);\n        }\n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory: \" + e, e);\n        }\n        \n        String redirect;\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            redirect = processNotices(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            redirect = processUeis(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            redirect = processRule(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            redirect = processValidate(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            redirect = processPath(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            redirect = processPathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            redirect = processValidatePathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            redirect = processOtherWebUi(request, user); \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            redirect = processNotificationsForUei(request, user);\n        } else {\n            // FIXME: What do we do if there is no sourcePage match?\n            redirect = \"\";\n        }\n\n        if (redirect.equals(\"\")) {\n            throw new ServletException(\"no redirect specified for this wizard!\");\n        }\n\n        response.sendRedirect(redirect);\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer toSingleQuote(StringBuffer buffer) {\n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        return buffer;\n    }","id":21224,"modified_method":"private static String toSingleQuote(String rule) {\n        StringBuffer buffer = new StringBuffer(rule);\n        \n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        \n        return buffer.toString();\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripExtraWhite(String s) {\n        String myregex = \"\\\\s+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        String mys = matcher.replaceAll(\" \");\n        myregex = \"^\\\\s\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        mys = matcher.replaceAll(\"\");\n        myregex = \"\\\\s$\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21225,"modified_method":"private static String stripExtraWhite(String s) {\n        Pattern pattern1 = Pattern.compile(\"\\\\s+\");\n        Matcher matcher1 = pattern1.matcher(s);\n        String mys1 = matcher1.replaceAll(\" \");\n        \n        Pattern pattern2 = Pattern.compile(\"^\\\\s\");\n        Matcher matcher2 = pattern2.matcher(mys1);\n        String mys2 = matcher2.replaceAll(\"\");\n        \n        Pattern pattern3 = Pattern.compile(\"\\\\s$\");\n        Matcher matcher3 = pattern3.matcher(mys2);\n        return matcher3.replaceAll(\"\");\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21226,"modified_method":"private static String stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        \n        return matcher.replaceAll(\"\");\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void edit(HttpServletRequest request, HttpSession user, StringBuffer redirectString) throws ServletException {\n        Notification oldNotice = null;\n\n        try {\n            oldNotice = NotificationFactory.getInstance().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        redirectString.append(SOURCE_PAGE_UEIS);    \n    }","id":21227,"modified_method":"/**\n     * Common code for two source pages that can't really be considered the same\n     */\n    private String edit(HttpServletRequest request, HttpSession user) throws ServletException {\n        Notification oldNotice;\n\n        try {\n            oldNotice = getNotificationFactory().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        return SOURCE_PAGE_UEIS;\n    }","commit_id":"5b6bbf47ef2b8ebc95040b7a892e1c3c80eeb72e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n\tnewNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (int i = 0; i < parameters.length; i++) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameters[i].getName());\n            newParam.setValue(parameters[i].getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","id":21228,"modified_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n        newNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (Parameter parameter : parameters) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameter.getName());\n            newParam.setValue(parameter.getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        StringBuffer rule = new StringBuffer(\"\");\n        StringBuffer redirectString = new StringBuffer();\n        \n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory:\",e);\n        }\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"delete\")) {\n                try {\n                    NotificationFactory.getInstance().removeNotification(request.getParameter(\"notice\"));\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            } else if (userAction.equals(\"edit\")) {\n                edit(request, user, redirectString);\n            } else if (userAction.equals(\"new\")) {\n                Notification newNotice = new Notification();\n                newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n                newNotice.setNumericMessage(\"111-%noticeid%\");\n                newNotice.setSubject(\"Notice #%noticeid%\");\n                newNotice.setStatus(\"off\");\n\n                user.setAttribute(\"newNotice\", newNotice);\n\n                redirectString.append(SOURCE_PAGE_UEIS);\n            } else if (userAction.equals(\"on\") || userAction.equals(\"off\")) {\n                try {\n                    NotificationFactory.getInstance().updateStatus(request.getParameter(\"notice\"), userAction);\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setUei(request.getParameter(\"uei\"));\n\n            Map params = new HashMap();\n            rule.append(newNotice.getRule());\n            rule = toSingleQuote(rule);\n            params.put(\"newRule\", rule.toString());\n\n            redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n\n            String services[] = request.getParameterValues(\"services\");\n            if (services != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < services.length; i++) {\n                    rule.append(\"is\").append(services[i]);\n                    if (i < services.length - 1)\n                        rule.append(\" | \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            String notServices[] = request.getParameterValues(\"notServices\");\n            if (notServices != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < notServices.length; i++) {\n                    rule.append(\"!is\").append(notServices[i]);\n                    if (i < notServices.length - 1)\n                        rule.append(\" & \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            Map params = new HashMap();\n            params.put(\"newRule\", rule.toString());\n            if (services != null) {\n                params.put(\"services\", services);\n            }\n            if (notServices != null) {\n                params.put(\"notServices\", notServices);\n            }\n\n            // page to redirect to, either validate or skip validation\n            String redirectPage = request.getParameter(\"nextPage\");\n\n            // now lets see if the rule is syntactically valid\n            try {\n                FilterDaoFactory.getInstance().validateRule(rule.toString());\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"failed\");\n                redirectPage = SOURCE_PAGE_RULE;\n            }\n\n            // save the rule if we are bypassing validation\n            if (redirectPage.equals(SOURCE_PAGE_PATH)) {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(rule.toString());\n            }\n\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"rebuild\")) {\n                Map params = new HashMap();\n                params.put(\"newRule\", request.getParameter(\"newRule\"));\n                String services[] = request.getParameterValues(\"services\");\n                if (services != null)\n                    params.put(\"services\", services);\n                params.put(\"mode\", \"rebuild\");\n\n                redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n            } else {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(request.getParameter(\"newRule\"));\n\n                redirectString.append(SOURCE_PAGE_PATH);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setDestinationPath(request.getParameter(\"path\"));\n\n            String description = request.getParameter(\"description\");\n            if (description != null && !description.trim().equals(\"\"))\n                newNotice.setDescription(description);\n            else\n                newNotice.setDescription(null);\n\n            newNotice.setTextMessage(request.getParameter(\"textMsg\"));\n\n            String subject = request.getParameter(\"subject\");\n            if (subject != null && !subject.trim().equals(\"\"))\n                newNotice.setSubject(subject);\n            else\n                newNotice.setSubject(null);\n\n            String numMessage = request.getParameter(\"numMsg\");\n            if (numMessage != null && !numMessage.trim().equals(\"\"))\n                newNotice.setNumericMessage(numMessage);\n            else\n                newNotice.setNumericMessage(null);\n\n            String oldName = newNotice.getName();\n            newNotice.setName(request.getParameter(\"name\"));\n\n            String varbindName=request.getParameter(\"varbindName\");\n            String varbindValue=request.getParameter(\"varbindValue\");\n            \n            Varbind varbind=newNotice.getVarbind();           \n            if(varbindName!=null && !varbindName.trim().equals(\"\") && varbindValue!=null && !varbindValue.trim().equals(\"\")) {\n\n                if(varbind==null) {\n                    varbind=new Varbind();\n                    newNotice.setVarbind(varbind);\n                }\n                varbind.setVbname(varbindName);\n                varbind.setVbvalue(varbindValue);\n            } else {\n                //Must do this to allow clearing out varbind definitions\n                newNotice.setVarbind(null);\n            }\n            \n            try {\n                    // replacing a path with a new name.\n                    NotificationFactory.getInstance().replaceNotification(oldName, newNotice);\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save/reload notification configuration file.\", e);\n            }\n            String suppliedReturnPage=(String)user.getAttribute(\"noticeWizardReturnPage\");\n            if(suppliedReturnPage!=null && !suppliedReturnPage.equals(\"\")) {\n                redirectString.append(suppliedReturnPage);\n            } else {\n                redirectString.append(SOURCE_PAGE_NOTICES);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n            String newRule = rule.toString();\n            String redirectPage = SOURCE_PAGE_VALIDATE_PATH_OUTAGE;\n\t    String criticalIp = request.getParameter(\"criticalIp\");\n            Map params = new HashMap();\n\t    if (newRule != null)\n\t      params.put(\"newRule\", newRule);\n\t    if (request.getParameter(\"criticalSvc\") != null)\n\t      params.put(\"criticalSvc\", request.getParameter(\"criticalSvc\"));\n\t    if (request.getParameter(\"showNodes\") != null)\n\t      params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n\t    if (criticalIp != null && !criticalIp.equals(\"\")) {\n\t      params.put(\"criticalIp\", criticalIp);\n              try {\n                FilterDaoFactory.getInstance().validateRule(\"IPADDR IPLIKE \" + criticalIp);\n              } catch (FilterParseException e) {\n                // page to redirect to if the critical IP is invalid\n                params.put(\"mode\", \"Critical path IP failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n              }\n            }\n            try {\n                FilterDaoFactory.getInstance().validateRule(newRule);\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"Current rule failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            String redirectPage = SOURCE_PAGE_NOTIFICATION_INDEX;\n            String userAction = request.getParameter(\"userAction\");\n            String criticalIp = request.getParameter(\"criticalIp\");\n            String criticalSvc = request.getParameter(\"criticalSvc\");\n            String newRule = request.getParameter(\"newRule\");\n            Map params = new HashMap();\n            if (userAction != null && userAction.equals(\"rebuild\")) {\n                params.put(\"newRule\", newRule);\n                params.put(\"criticalIp\", criticalIp);\n                params.put(\"criticalSvc\", criticalSvc);\n\t        if (request.getParameter(\"showNodes\") != null)\n\t            params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            } else {\n                try {\n                    updatePaths(newRule, criticalIp, criticalSvc);\n                } catch (FilterParseException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                } catch (SQLException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                }\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            //We've come from elsewhere in the Web UI page, and will have a UEI.  \n            //If there are existing notices for this UEI, then go to a page listing them allowing editing.  \n            //If there are none, then create a notice, populate the UEI, and go to the buildRule page.\n            String returnPage=request.getParameter(\"returnPage\");\n            user.setAttribute(\"noticeWizardReturnPage\", returnPage);\n            String uei=request.getParameter(\"uei\");\n            try {\n                if(NotificationFactory.getInstance().hasUei(uei)) {\n                    //There are existing notifications for this UEI - goto a listing page\n                    Map params = new HashMap();\n                    params.put(\"uei\", uei);                   \n                    redirectString.append(SOURCE_PAGE_NOTIFS_FOR_UEI).append(makeQueryString(params));\n                } else {\n                    newNotifWithUEI(request, user, redirectString,rule);\n                }\n            } catch (IOException e) {\n                throw new ServletException(\"IOException while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (MarshalException e) {\n                throw new ServletException(\"Marshalling Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (ValidationException e) {\n                throw new ServletException(\"Validation Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            String userAction=request.getParameter(\"userAction\");\n            if(\"edit\".equals(userAction)) {\n                edit(request, user, redirectString);\n            } else if (\"new\".equals(userAction)) {\n                newNotifWithUEI(request, user, redirectString, rule);\n            }\n        }\n\n        if (redirectString.toString().equals(\"\"))\n            throw new ServletException(\"no redirect specified for this wizard!\");\n\n        response.sendRedirect(redirectString.toString());\n    }","id":21229,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        /*\n         * FIXME: Why do we do this for every request in doPost instead of\n         * once in init?\n         */\n        try {\n            NotifdConfigFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotifdConfigFactory: \" + e, e);\n        }\n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory: \" + e, e);\n        }\n        \n        String redirect;\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            redirect = processNotices(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            redirect = processUeis(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            redirect = processRule(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            redirect = processValidate(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            redirect = processPath(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            redirect = processPathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            redirect = processValidatePathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            redirect = processOtherWebUi(request, user); \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            redirect = processNotificationsForUei(request, user);\n        } else {\n            // FIXME: What do we do if there is no sourcePage match?\n            redirect = \"\";\n        }\n\n        if (redirect.equals(\"\")) {\n            throw new ServletException(\"no redirect specified for this wizard!\");\n        }\n\n        response.sendRedirect(redirect);\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        //StringBuffer buffer = new StringBuffer();\n\tSortedMap nodes = FilterDaoFactory.getInstance().getNodeMap(rule);\n        try {\n            Iterator i = nodes.keySet().iterator();\n            while(i.hasNext()) {\n                Integer key = (Integer)i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if(criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","id":21230,"modified_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        SortedMap<Integer, String> nodes = getFilterDao().getNodeMap(rule);\n        try {\n            Iterator<Integer> i = nodes.keySet().iterator();\n            while (i.hasNext()) {\n                Integer key = i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if (criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21231,"modified_method":"private static String stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        \n        return matcher.replaceAll(\"\");\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer checkParens(StringBuffer buffer) {\n        if(buffer.length()==0) {\n            return buffer;\n        }\n        if ((buffer.charAt(0) != '(') || (buffer.charAt(buffer.length() - 1) != ')')) {\n            buffer.append(\")\");\n            buffer.insert(0, \"(\");\n        }\n        return buffer;\n    }","id":21232,"modified_method":"private static String checkParens(String rule) {\n        if (rule.length() == 0) {\n            return rule;\n        } else if ((rule.charAt(0) != '(') || (rule.charAt(rule.length() - 1) != ')')) {\n            return \"(\" + rule + \")\";\n        } else {\n            return rule;\n        }\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void edit(HttpServletRequest request, HttpSession user, StringBuffer redirectString) throws ServletException {\n        Notification oldNotice = null;\n\n        try {\n            oldNotice = NotificationFactory.getInstance().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        redirectString.append(SOURCE_PAGE_UEIS);    \n    }","id":21233,"modified_method":"/**\n     * Common code for two source pages that can't really be considered the same\n     */\n    private String edit(HttpServletRequest request, HttpSession user) throws ServletException {\n        Notification oldNotice;\n\n        try {\n            oldNotice = getNotificationFactory().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        return SOURCE_PAGE_UEIS;\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void newNotifWithUEI(HttpServletRequest request, HttpSession user, StringBuffer redirectString, StringBuffer rule) throws ServletException {\n        String uei=request.getParameter(\"uei\");\n        Notification newNotice = new Notification();\n        newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n        newNotice.setNumericMessage(\"111-%noticeid%\");\n        newNotice.setSubject(\"Notice #%noticeid%\");\n        newNotice.setStatus(\"on\");\n        newNotice.setUei(uei);\n\n        Map params = new HashMap();\n        rule.append(newNotice.getRule());\n        rule = toSingleQuote(rule);\n        params.put(\"newRule\", rule.toString());\n\n        user.setAttribute(\"newNotice\", newNotice);\n        redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));                         \n    }","id":21234,"modified_method":"private String newNotifWithUEI(HttpServletRequest request, HttpSession user) {\n        String uei = request.getParameter(\"uei\");\n        Notification newNotice = buildNewNotification(\"on\");\n        newNotice.setUei(uei);\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"newRule\", toSingleQuote(newNotice.getRule()));\n\n        user.setAttribute(\"newNotice\", newNotice);\n        \n        return SOURCE_PAGE_RULE + makeQueryString(params);  \n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String makeQueryString(Map map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = (String) i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","id":21235,"modified_method":"private String makeQueryString(Map<String, Object> map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator<String> i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripExtraWhite(String s) {\n        String myregex = \"\\\\s+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        String mys = matcher.replaceAll(\" \");\n        myregex = \"^\\\\s\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        mys = matcher.replaceAll(\"\");\n        myregex = \"\\\\s$\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21236,"modified_method":"private static String stripExtraWhite(String s) {\n        Pattern pattern1 = Pattern.compile(\"\\\\s+\");\n        Matcher matcher1 = pattern1.matcher(s);\n        String mys1 = matcher1.replaceAll(\" \");\n        \n        Pattern pattern2 = Pattern.compile(\"^\\\\s\");\n        Matcher matcher2 = pattern2.matcher(mys1);\n        String mys2 = matcher2.replaceAll(\"\");\n        \n        Pattern pattern3 = Pattern.compile(\"\\\\s$\");\n        Matcher matcher3 = pattern3.matcher(mys2);\n        return matcher3.replaceAll(\"\");\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer toSingleQuote(StringBuffer buffer) {\n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        return buffer;\n    }","id":21237,"modified_method":"private static String toSingleQuote(String rule) {\n        StringBuffer buffer = new StringBuffer(rule);\n        \n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        \n        return buffer.toString();\n    }","commit_id":"c5e943937edcff1940749e95462978f80a7db6ac","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer checkParens(StringBuffer buffer) {\n        if(buffer.length()==0) {\n            return buffer;\n        }\n        if ((buffer.charAt(0) != '(') || (buffer.charAt(buffer.length() - 1) != ')')) {\n            buffer.append(\")\");\n            buffer.insert(0, \"(\");\n        }\n        return buffer;\n    }","id":21238,"modified_method":"private static String checkParens(String rule) {\n        if (rule.length() == 0) {\n            return rule;\n        } else if ((rule.charAt(0) != '(') || (rule.charAt(rule.length() - 1) != ')')) {\n            return \"(\" + rule + \")\";\n        } else {\n            return rule;\n        }\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripExtraWhite(String s) {\n        String myregex = \"\\\\s+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        String mys = matcher.replaceAll(\" \");\n        myregex = \"^\\\\s\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        mys = matcher.replaceAll(\"\");\n        myregex = \"\\\\s$\";\n        pattern = Pattern.compile(myregex);\n        matcher = pattern.matcher(mys);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21239,"modified_method":"private static String stripExtraWhite(String s) {\n        Pattern pattern1 = Pattern.compile(\"\\\\s+\");\n        Matcher matcher1 = pattern1.matcher(s);\n        String mys1 = matcher1.replaceAll(\" \");\n        \n        Pattern pattern2 = Pattern.compile(\"^\\\\s\");\n        Matcher matcher2 = pattern2.matcher(mys1);\n        String mys2 = matcher2.replaceAll(\"\");\n        \n        Pattern pattern3 = Pattern.compile(\"\\\\s$\");\n        Matcher matcher3 = pattern3.matcher(mys2);\n        return matcher3.replaceAll(\"\");\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n\tnewNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (int i = 0; i < parameters.length; i++) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameters[i].getName());\n            newParam.setValue(parameters[i].getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","id":21240,"modified_method":"/**\n     * \n     */\n    private Notification copyNotice(Notification oldNotice) {\n        Notification newNotice = new Notification();\n\n        newNotice.setName(oldNotice.getName());\n        newNotice.setWriteable(oldNotice.getWriteable());\n        newNotice.setDescription(oldNotice.getDescription());\n        newNotice.setUei(oldNotice.getUei());\n        newNotice.setRule(oldNotice.getRule());\n        newNotice.setDestinationPath(oldNotice.getDestinationPath());\n        newNotice.setNoticeQueue(oldNotice.getNoticeQueue());\n        newNotice.setTextMessage(oldNotice.getTextMessage());\n        newNotice.setSubject(oldNotice.getSubject());\n        newNotice.setNumericMessage(oldNotice.getNumericMessage());\n        newNotice.setStatus(oldNotice.getStatus());\n        newNotice.setVarbind(oldNotice.getVarbind());\n\n        Parameter parameters[] = oldNotice.getParameter();\n        for (Parameter parameter : parameters) {\n            Parameter newParam = new Parameter();\n            newParam.setName(parameter.getName());\n            newParam.setValue(parameter.getValue());\n\n            newNotice.addParameter(newParam);\n        }\n\n        return newNotice;\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        StringBuffer rule = new StringBuffer(\"\");\n        StringBuffer redirectString = new StringBuffer();\n        \n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory:\",e);\n        }\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"delete\")) {\n                try {\n                    NotificationFactory.getInstance().removeNotification(request.getParameter(\"notice\"));\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            } else if (userAction.equals(\"edit\")) {\n                edit(request, user, redirectString);\n            } else if (userAction.equals(\"new\")) {\n                Notification newNotice = new Notification();\n                newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n                newNotice.setNumericMessage(\"111-%noticeid%\");\n                newNotice.setSubject(\"Notice #%noticeid%\");\n                newNotice.setStatus(\"off\");\n\n                user.setAttribute(\"newNotice\", newNotice);\n\n                redirectString.append(SOURCE_PAGE_UEIS);\n            } else if (userAction.equals(\"on\") || userAction.equals(\"off\")) {\n                try {\n                    NotificationFactory.getInstance().updateStatus(request.getParameter(\"notice\"), userAction);\n                    redirectString.append(SOURCE_PAGE_NOTICES);\n                } catch (Exception e) {\n                    throw new ServletException(\"Couldn't save/reload notifications configuration file.\", e);\n                }\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setUei(request.getParameter(\"uei\"));\n\n            Map params = new HashMap();\n            rule.append(newNotice.getRule());\n            rule = toSingleQuote(rule);\n            params.put(\"newRule\", rule.toString());\n\n            redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n\n            String services[] = request.getParameterValues(\"services\");\n            if (services != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < services.length; i++) {\n                    rule.append(\"is\").append(services[i]);\n                    if (i < services.length - 1)\n                        rule.append(\" | \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            String notServices[] = request.getParameterValues(\"notServices\");\n            if (notServices != null) {\n                rule.append(\" & \").append(\" (\");\n\n                for (int i = 0; i < notServices.length; i++) {\n                    rule.append(\"!is\").append(notServices[i]);\n                    if (i < notServices.length - 1)\n                        rule.append(\" & \");\n                }\n\n                rule.append(\" )\");\n            }\n\n            Map params = new HashMap();\n            params.put(\"newRule\", rule.toString());\n            if (services != null) {\n                params.put(\"services\", services);\n            }\n            if (notServices != null) {\n                params.put(\"notServices\", notServices);\n            }\n\n            // page to redirect to, either validate or skip validation\n            String redirectPage = request.getParameter(\"nextPage\");\n\n            // now lets see if the rule is syntactically valid\n            try {\n                FilterDaoFactory.getInstance().validateRule(rule.toString());\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"failed\");\n                redirectPage = SOURCE_PAGE_RULE;\n            }\n\n            // save the rule if we are bypassing validation\n            if (redirectPage.equals(SOURCE_PAGE_PATH)) {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(rule.toString());\n            }\n\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            String userAction = request.getParameter(\"userAction\");\n\n            if (userAction.equals(\"rebuild\")) {\n                Map params = new HashMap();\n                params.put(\"newRule\", request.getParameter(\"newRule\"));\n                String services[] = request.getParameterValues(\"services\");\n                if (services != null)\n                    params.put(\"services\", services);\n                params.put(\"mode\", \"rebuild\");\n\n                redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));\n            } else {\n                Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n                newNotice.setRule(request.getParameter(\"newRule\"));\n\n                redirectString.append(SOURCE_PAGE_PATH);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            Notification newNotice = (Notification) user.getAttribute(\"newNotice\");\n            newNotice.setDestinationPath(request.getParameter(\"path\"));\n\n            String description = request.getParameter(\"description\");\n            if (description != null && !description.trim().equals(\"\"))\n                newNotice.setDescription(description);\n            else\n                newNotice.setDescription(null);\n\n            newNotice.setTextMessage(request.getParameter(\"textMsg\"));\n\n            String subject = request.getParameter(\"subject\");\n            if (subject != null && !subject.trim().equals(\"\"))\n                newNotice.setSubject(subject);\n            else\n                newNotice.setSubject(null);\n\n            String numMessage = request.getParameter(\"numMsg\");\n            if (numMessage != null && !numMessage.trim().equals(\"\"))\n                newNotice.setNumericMessage(numMessage);\n            else\n                newNotice.setNumericMessage(null);\n\n            String oldName = newNotice.getName();\n            newNotice.setName(request.getParameter(\"name\"));\n\n            String varbindName=request.getParameter(\"varbindName\");\n            String varbindValue=request.getParameter(\"varbindValue\");\n            \n            Varbind varbind=newNotice.getVarbind();           \n            if(varbindName!=null && !varbindName.trim().equals(\"\") && varbindValue!=null && !varbindValue.trim().equals(\"\")) {\n\n                if(varbind==null) {\n                    varbind=new Varbind();\n                    newNotice.setVarbind(varbind);\n                }\n                varbind.setVbname(varbindName);\n                varbind.setVbvalue(varbindValue);\n            } else {\n                //Must do this to allow clearing out varbind definitions\n                newNotice.setVarbind(null);\n            }\n            \n            try {\n                    // replacing a path with a new name.\n                    NotificationFactory.getInstance().replaceNotification(oldName, newNotice);\n            } catch (Exception e) {\n                throw new ServletException(\"Couldn't save/reload notification configuration file.\", e);\n            }\n            String suppliedReturnPage=(String)user.getAttribute(\"noticeWizardReturnPage\");\n            if(suppliedReturnPage!=null && !suppliedReturnPage.equals(\"\")) {\n                redirectString.append(suppliedReturnPage);\n            } else {\n                redirectString.append(SOURCE_PAGE_NOTICES);\n            }\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            rule.append(request.getParameter(\"newRule\"));\n            rule = toSingleQuote(rule);\n            rule = stripExtraWhite(rule.toString());\n            rule = stripServices(rule.toString());\n            rule = checkParens(rule);\n            String newRule = rule.toString();\n            String redirectPage = SOURCE_PAGE_VALIDATE_PATH_OUTAGE;\n\t    String criticalIp = request.getParameter(\"criticalIp\");\n            Map params = new HashMap();\n\t    if (newRule != null)\n\t      params.put(\"newRule\", newRule);\n\t    if (request.getParameter(\"criticalSvc\") != null)\n\t      params.put(\"criticalSvc\", request.getParameter(\"criticalSvc\"));\n\t    if (request.getParameter(\"showNodes\") != null)\n\t      params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n\t    if (criticalIp != null && !criticalIp.equals(\"\")) {\n\t      params.put(\"criticalIp\", criticalIp);\n              try {\n                FilterDaoFactory.getInstance().validateRule(\"IPADDR IPLIKE \" + criticalIp);\n              } catch (FilterParseException e) {\n                // page to redirect to if the critical IP is invalid\n                params.put(\"mode\", \"Critical path IP failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n              }\n            }\n            try {\n                FilterDaoFactory.getInstance().validateRule(newRule);\n            } catch (FilterParseException e) {\n                // page to redirect to if the rule is invalid\n                params.put(\"mode\", \"Current rule failed\");\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            String redirectPage = SOURCE_PAGE_NOTIFICATION_INDEX;\n            String userAction = request.getParameter(\"userAction\");\n            String criticalIp = request.getParameter(\"criticalIp\");\n            String criticalSvc = request.getParameter(\"criticalSvc\");\n            String newRule = request.getParameter(\"newRule\");\n            Map params = new HashMap();\n            if (userAction != null && userAction.equals(\"rebuild\")) {\n                params.put(\"newRule\", newRule);\n                params.put(\"criticalIp\", criticalIp);\n                params.put(\"criticalSvc\", criticalSvc);\n\t        if (request.getParameter(\"showNodes\") != null)\n\t            params.put(\"showNodes\", request.getParameter(\"showNodes\"));\n                redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n            } else {\n                try {\n                    updatePaths(newRule, criticalIp, criticalSvc);\n                } catch (FilterParseException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                } catch (SQLException e) {\n                    params.put(\"mode\", \"Update failed\");\n                    redirectPage = SOURCE_PAGE_PATH_OUTAGE;\n                }\n            }\n            redirectString.append(redirectPage).append(makeQueryString(params));\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            //We've come from elsewhere in the Web UI page, and will have a UEI.  \n            //If there are existing notices for this UEI, then go to a page listing them allowing editing.  \n            //If there are none, then create a notice, populate the UEI, and go to the buildRule page.\n            String returnPage=request.getParameter(\"returnPage\");\n            user.setAttribute(\"noticeWizardReturnPage\", returnPage);\n            String uei=request.getParameter(\"uei\");\n            try {\n                if(NotificationFactory.getInstance().hasUei(uei)) {\n                    //There are existing notifications for this UEI - goto a listing page\n                    Map params = new HashMap();\n                    params.put(\"uei\", uei);                   \n                    redirectString.append(SOURCE_PAGE_NOTIFS_FOR_UEI).append(makeQueryString(params));\n                } else {\n                    newNotifWithUEI(request, user, redirectString,rule);\n                }\n            } catch (IOException e) {\n                throw new ServletException(\"IOException while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (MarshalException e) {\n                throw new ServletException(\"Marshalling Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } catch (ValidationException e) {\n                throw new ServletException(\"Validation Exception while checking if there is an existing notification for UEI \"+uei, e);\n            } \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            String userAction=request.getParameter(\"userAction\");\n            if(\"edit\".equals(userAction)) {\n                edit(request, user, redirectString);\n            } else if (\"new\".equals(userAction)) {\n                newNotifWithUEI(request, user, redirectString, rule);\n            }\n        }\n\n        if (redirectString.toString().equals(\"\"))\n            throw new ServletException(\"no redirect specified for this wizard!\");\n\n        response.sendRedirect(redirectString.toString());\n    }","id":21241,"modified_method":"public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String sourcePage = request.getParameter(\"sourcePage\");\n        HttpSession user = request.getSession(true);\n\n        /*\n         * FIXME: Why do we do this for every request in doPost instead of\n         * once in init?\n         */\n        try {\n            NotifdConfigFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotifdConfigFactory: \" + e, e);\n        }\n        try {\n            NotificationFactory.init();\n        } catch (Exception e) {\n            throw new ServletException(\"Failed to initialize NotificationFactory: \" + e, e);\n        }\n        \n        String redirect;\n\n        if (sourcePage.equals(SOURCE_PAGE_NOTICES)) {\n            redirect = processNotices(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_UEIS)) {\n            redirect = processUeis(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_RULE)) {\n            redirect = processRule(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE)) {\n            redirect = processValidate(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH)) {\n            redirect = processPath(request, user);\n        } else if (sourcePage.equals(SOURCE_PAGE_PATH_OUTAGE)) {\n            redirect = processPathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_VALIDATE_PATH_OUTAGE)) {\n            redirect = processValidatePathOutage(request);\n        } else if (sourcePage.equals(SOURCE_PAGE_OTHER_WEBUI)) {\n            redirect = processOtherWebUi(request, user); \n        } else if (sourcePage.equals(SOURCE_PAGE_NOTIFS_FOR_UEI)) {\n            redirect = processNotificationsForUei(request, user);\n        } else {\n            // FIXME: What do we do if there is no sourcePage match?\n            redirect = \"\";\n        }\n\n        if (redirect.equals(\"\")) {\n            throw new ServletException(\"no redirect specified for this wizard!\");\n        }\n\n        response.sendRedirect(redirect);\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer toSingleQuote(StringBuffer buffer) {\n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        return buffer;\n    }","id":21242,"modified_method":"private static String toSingleQuote(String rule) {\n        StringBuffer buffer = new StringBuffer(rule);\n        \n        for (int i = 0; (i < buffer.length()); i++) {\n            if ((i < buffer.length() - 5) && (buffer.substring(i, i + 6).equals(\"&quot;\"))) {\n                buffer.replace(i, i + 6, \"'\");\n            } else if (buffer.charAt(i) == '\"') {\n                buffer.replace(i, i + 1, \"'\");\n            }\n        }\n        \n        return buffer.toString();\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static StringBuffer stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        StringBuffer buffer = new StringBuffer(matcher.replaceAll(\"\"));\n        return buffer;\n    }","id":21243,"modified_method":"private static String stripServices(String s) {\n        String myregex = \"\\\\s*\\\\&\\\\s*\\\\(\\\\s*\\\\!?is.+\";\n        Pattern pattern = Pattern.compile(myregex);\n        Matcher matcher = pattern.matcher(s);\n        \n        return matcher.replaceAll(\"\");\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void newNotifWithUEI(HttpServletRequest request, HttpSession user, StringBuffer redirectString, StringBuffer rule) throws ServletException {\n        String uei=request.getParameter(\"uei\");\n        Notification newNotice = new Notification();\n        newNotice.setRule(\"IPADDR IPLIKE *.*.*.*\");\n        newNotice.setNumericMessage(\"111-%noticeid%\");\n        newNotice.setSubject(\"Notice #%noticeid%\");\n        newNotice.setStatus(\"on\");\n        newNotice.setUei(uei);\n\n        Map params = new HashMap();\n        rule.append(newNotice.getRule());\n        rule = toSingleQuote(rule);\n        params.put(\"newRule\", rule.toString());\n\n        user.setAttribute(\"newNotice\", newNotice);\n        redirectString.append(SOURCE_PAGE_RULE).append(makeQueryString(params));                         \n    }","id":21244,"modified_method":"private String newNotifWithUEI(HttpServletRequest request, HttpSession user) {\n        String uei = request.getParameter(\"uei\");\n        Notification newNotice = buildNewNotification(\"on\");\n        newNotice.setUei(uei);\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"newRule\", toSingleQuote(newNotice.getRule()));\n\n        user.setAttribute(\"newNotice\", newNotice);\n        \n        return SOURCE_PAGE_RULE + makeQueryString(params);  \n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void edit(HttpServletRequest request, HttpSession user, StringBuffer redirectString) throws ServletException {\n        Notification oldNotice = null;\n\n        try {\n            oldNotice = NotificationFactory.getInstance().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        redirectString.append(SOURCE_PAGE_UEIS);    \n    }","id":21245,"modified_method":"/**\n     * Common code for two source pages that can't really be considered the same\n     */\n    private String edit(HttpServletRequest request, HttpSession user) throws ServletException {\n        Notification oldNotice;\n\n        try {\n            oldNotice = getNotificationFactory().getNotification(request.getParameter(\"notice\"));\n        } catch (Exception e) {\n            throw new ServletException(\"couldn't get a copy of the notification to edit.\", e);\n        }\n\n        // copy the old path into the new path\n        Notification newNotice = copyNotice(oldNotice);\n        user.setAttribute(\"newNotice\", newNotice);\n\n        return SOURCE_PAGE_UEIS;\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private String makeQueryString(Map map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = (String) i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","id":21246,"modified_method":"private String makeQueryString(Map<String, Object> map) {\n        StringBuffer buffer = new StringBuffer();\n        String separator = \"?\";\n\n        Iterator<String> i = map.keySet().iterator();\n        while (i.hasNext()) {\n            String key = i.next();\n            Object value = map.get(key);\n            if (value instanceof String[]) {\n                String[] list = (String[]) value;\n                for (int j = 0; j < list.length; j++) {\n                    buffer.append(separator).append(key).append(\"=\").append(Util.encode(list[j]));\n                    separator = \"&\";\n                }\n            } else {\n                buffer.append(separator).append(key).append(\"=\").append(Util.encode((String) value));\n            }\n            separator = \"&\";\n        }\n\n        return buffer.toString();\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        //StringBuffer buffer = new StringBuffer();\n\tSortedMap nodes = FilterDaoFactory.getInstance().getNodeMap(rule);\n        try {\n            Iterator i = nodes.keySet().iterator();\n            while(i.hasNext()) {\n                Integer key = (Integer)i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if(criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","id":21247,"modified_method":"private void updatePaths(String rule, String criticalIp, String criticalSvc)\n                                 throws FilterParseException, SQLException {\n        Connection conn = Vault.getDbConnection();\n        SortedMap<Integer, String> nodes = getFilterDao().getNodeMap(rule);\n        try {\n            Iterator<Integer> i = nodes.keySet().iterator();\n            while (i.hasNext()) {\n                Integer key = i.next();\n                deleteCriticalPath(key.intValue(), conn);\n                if (criticalIp != null && !criticalIp.equals(\"\")) {\n                    setCriticalPath(key.intValue(), criticalIp, criticalSvc, conn);\n                }\n            }\n        } finally {\n            Vault.releaseDbConnection(conn);\n        }\n    }","commit_id":"519dd73d2b5912dcbd32d3196dbaa093a5290087","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    boolean authorized = node.clusterManager.checkAuthorization(groupName, password, conn.getEndPoint());\n                    if (!authorized) {\n                        conn.close();\n                        conn = null;\n                        if (logger != null) {\n                            logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","id":21248,"modified_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    if (conn != null) {\n                        boolean authorized = node.clusterManager.checkAuthorization(groupName, password, conn.getEndPoint());\n                        if (!authorized) {\n                            conn.close();\n                            conn = null;\n                            if (logger != null) {\n                                logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                            }\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","commit_id":"685d26b394cc27513a7baa0d36780401ec5acf38","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (true) {\n            String targetStr = addressQueue.take();\n            Address target = null;\n            try {\n                target = null;\n                int colon = targetStr.indexOf(':');\n                if (colon == -1) {\n                    target = new Address(targetStr, node.getConfig().getPort());\n                } else {\n                    target = new Address(targetStr.substring(0, colon), Integer.parseInt(targetStr.substring(colon + 1)));\n                }\n                Connection conn = node.getConnectionManager().getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    conn = node.getConnectionManager().getConnection(target);\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n    }","id":21249,"modified_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (running) {\n            String targetStr = addressQueue.take();\n            try {\n                final AddressHolder addressHolder = AddressUtil.getAddressHolder(targetStr, node.getConfig().getPort());\n                final Address target = new Address(addressHolder.address, addressHolder.port);\n                final ConnectionManager connectionManager = node.getConnectionManager();\n                Connection conn = connectionManager.getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                    conn = connectionManager.getConnection(target);\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n        return null;\n    }","commit_id":"685d26b394cc27513a7baa0d36780401ec5acf38","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    boolean authorized = node.clusterImpl.checkAuthorization(groupName, password, conn.getEndPoint());\n                    if (!authorized) {\n                        conn.close();\n                        conn = null;\n                        if (logger != null) {\n                            logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","id":21250,"modified_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    if (conn != null) {\n                        boolean authorized = node.clusterImpl.checkAuthorization(groupName, password, conn.getEndPoint());\n                        if (!authorized) {\n                            conn.close();\n                            conn = null;\n                            if (logger != null) {\n                                logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                            }\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","commit_id":"a0c45e06b0198db2104d4a19ebe069cd05cd3545","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (true) {\n            String targetStr = addressQueue.take();\n            Address target = null;\n            try {\n                target = null;\n                int colon = targetStr.indexOf(':');\n                if (colon == -1) {\n                    target = new Address(targetStr, node.getConfig().getPort());\n                } else {\n                    target = new Address(targetStr.substring(0, colon), Integer.parseInt(targetStr.substring(colon + 1)));\n                }\n                Connection conn = node.getConnectionManager().getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    conn = node.getConnectionManager().getConnection(target);\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n    }","id":21251,"modified_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (running) {\n            String targetStr = addressQueue.take();\n            try {\n                final AddressHolder addressHolder = AddressUtil.getAddressHolder(targetStr, node.getConfig().getPort());\n                final Address target = new Address(addressHolder.address, addressHolder.port);\n                final ConnectionManager connectionManager = node.getConnectionManager();\n                Connection conn = connectionManager.getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                    conn = connectionManager.getConnection(target);\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n        return null;\n    }","commit_id":"a0c45e06b0198db2104d4a19ebe069cd05cd3545","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (true) {\n            String targetStr = addressQueue.take();\n            Address target = null;\n            try {\n                target = null;\n                int colon = targetStr.indexOf(':');\n                if (colon == -1) {\n                    target = new Address(targetStr, node.getConfig().getPort());\n                } else {\n                    target = new Address(targetStr.substring(0, colon), Integer.parseInt(targetStr.substring(colon + 1)));\n                }\n                Connection conn = node.getConnectionManager().getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    conn = node.getConnectionManager().getConnection(target);\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n    }","id":21252,"modified_method":"@SuppressWarnings(\"BusyWait\")\n    Connection getConnection() throws InterruptedException {\n        while (running) {\n            String targetStr = addressQueue.take();\n            try {\n                final AddressHolder addressHolder = AddressUtil.getAddressHolder(targetStr, node.getConfig().getPort());\n                final Address target = new Address(addressHolder.address, addressHolder.port);\n                final ConnectionManager connectionManager = node.getConnectionManager();\n                Connection conn = connectionManager.getOrConnect(target);\n                for (int i = 0; i < 10; i++) {\n                    if (conn == null) {\n                        Thread.sleep(1000);\n                    } else {\n                        return conn;\n                    }\n                    conn = connectionManager.getConnection(target);\n                }\n            } catch (Throwable e) {\n                Thread.sleep(1000);\n            } finally {\n                addressQueue.offer(targetStr);\n            }\n        }\n        return null;\n    }","commit_id":"b4a9d3cce034573ded24d1056956e07fc21214a9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    boolean authorized = node.clusterManager.checkAuthorization(groupName, password, conn.getEndPoint());\n                    if (!authorized) {\n                        conn.close();\n                        conn = null;\n                        if (logger != null) {\n                            logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","id":21253,"modified_method":"public void run() {\n        Connection conn = null;\n        while (running) {\n            try {\n                RecordUpdate ru = (failureQ.size() > 0) ? failureQ.removeFirst() : q.take();\n                if (conn == null) {\n                    conn = getConnection();\n                    if (conn != null) {\n                        boolean authorized = node.clusterManager.checkAuthorization(groupName, password, conn.getEndPoint());\n                        if (!authorized) {\n                            conn.close();\n                            conn = null;\n                            if (logger != null) {\n                                logger.log(Level.SEVERE, \"Invalid groupName or groupPassword! \");\n                            }\n                        }\n                    }\n                }\n                if (conn != null && conn.live()) {\n                    conn.getWriteHandler().enqueueSocketWritable(ru.toNewPacket());\n                } else {\n                    failureQ.addFirst(ru);\n                    conn = null;\n                }\n            } catch (InterruptedException e) {\n                running = false;\n            } catch (Throwable e) {\n                if (logger != null) {\n                    logger.log(Level.WARNING, e.getMessage(), e);\n                }\n                conn = null;\n            }\n        }\n    }","commit_id":"b4a9d3cce034573ded24d1056956e07fc21214a9","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setStatus(\"A\");\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","id":21254,"modified_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setSource(OnmsMonitoredService.SOURCE_DETECTOR);\n            if (getPollerConfig().isPolled(iface.getIpAddress(), svcType)) svc.setStatus(OnmsMonitoredService.STATUS_ACTIVE);\n            else svc.setStatus(OnmsMonitoredService.STATUS_NOT_POLLED);\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","commit_id":"f3a00a0a880de3a886dd4dbbc92ae71bfde21158","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21255,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"f3a00a0a880de3a886dd4dbbc92ae71bfde21158","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21256,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"f3a00a0a880de3a886dd4dbbc92ae71bfde21158","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setStatus(\"A\");\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","id":21257,"modified_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setSource(OnmsMonitoredService.SOURCE_DETECTOR);\n            if (getPollerConfig().isPolled(iface.getIpAddress(), svcType)) svc.setStatus(OnmsMonitoredService.STATUS_ACTIVE);\n            else svc.setStatus(OnmsMonitoredService.STATUS_NOT_POLLED);\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","commit_id":"a164322211fc6dc693087f13aecddd233765ea40","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21258,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"a164322211fc6dc693087f13aecddd233765ea40","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21259,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"a164322211fc6dc693087f13aecddd233765ea40","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setStatus(\"A\");\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","id":21260,"modified_method":"@Transactional\n    public boolean provisionNode(final String user, String foreignSource, String foreignId, String nodeLabel, String ipAddress,\n            String[] categories, String snmpCommunity, String snmpVersion,\n            String deviceUsername, String devicePassword, String enablePassword,\n            String accessMethod, String autoEnable) throws NodeProvisionException {\n\n        if (log().isDebugEnabled()) {\n            log().debug(String.format(\"adding SNMP community %s (%s)\", snmpCommunity, snmpVersion));\n        }\n        // Set the SNMP community name (if necessary)\n        if (snmpCommunity != null && snmpVersion != null) {\n            try {\n                SnmpEventInfo info = new SnmpEventInfo();\n                info.setCommunityString(snmpCommunity);\n                info.setFirstIPAddress(ipAddress);\n                info.setVersion(snmpVersion);\n                m_snmpPeerFactory.define(info);\n                SnmpPeerFactory.saveCurrent();\n            } catch (Exception e) {\n                throw new NodeProvisionException(\"unable to add SNMP community information\", e);\n            }\n        }\n\n        log().debug(\"creating requisition node\");\n        // Create a requisition node based on the form input\n        RequisitionInterface reqIface = new RequisitionInterface();\n        reqIface.setIpAddr(ipAddress);\n        reqIface.setManaged(true);\n        reqIface.setSnmpPrimary(\"P\");\n        reqIface.setStatus(1);\n\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"ICMP\"));\n        reqIface.putMonitoredService(new RequisitionMonitoredService(\"SNMP\"));\n        \n        RequisitionNode reqNode = new RequisitionNode();\n        reqNode.setNodeLabel(nodeLabel);\n        reqNode.setForeignId(foreignId);\n        reqNode.putInterface(reqIface);\n\n        for (String category : categories) {\n            reqNode.putCategory(new RequisitionCategory(category));\n        }\n\n        if (deviceUsername != null) {\n            reqNode.putAsset(new RequisitionAsset(\"username\", deviceUsername));\n        }\n        if (devicePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"password\", devicePassword));\n        }\n        if (enablePassword != null) {\n            reqNode.putAsset(new RequisitionAsset(\"enable\", enablePassword));\n        }\n        if (accessMethod != null) {\n            reqNode.putAsset(new RequisitionAsset(\"connection\", accessMethod));\n        }\n        if (autoEnable != null) {\n            reqNode.putAsset(new RequisitionAsset(\"autoenable\", autoEnable));\n        }\n\n        // Now save it to the requisition\n        try {\n            Requisition req = m_foreignSourceRepository.getRequisition(foreignSource);\n            req.putNode(reqNode);\n            log().debug(\"saving requisition node\");\n            m_foreignSourceRepository.save(req);\n        } catch (ForeignSourceRepositoryException e) {\n            throw new RuntimeException(\"unable to retrieve foreign source '\" + foreignSource + \"'\", e);\n        }\n        \n        log().debug(\"creating database node\");\n        // Create the basic node\n        \n        OnmsDistPoller dp = m_distPollerDao.get(\"localhost\");\n        OnmsNode node = new OnmsNode(dp);\n        node.setType(\"A\");\n        node.setForeignSource(foreignSource);\n        node.setForeignId(foreignId);\n        node.setLabel(nodeLabel);\n        node.setLabelSource(\"U\");\n\n        node.getAssetRecord().setBuilding(foreignSource);\n        node.getAssetRecord().setAutoenable(autoEnable);\n        node.getAssetRecord().setConnection(accessMethod);\n        node.getAssetRecord().setEnable(enablePassword);\n        node.getAssetRecord().setUsername(deviceUsername);\n        node.getAssetRecord().setPassword(devicePassword);\n        \n        for(String category : categories) {\n            node.addCategory(getCategory(category));\n        }\n        \n        OnmsIpInterface iface = new OnmsIpInterface(ipAddress, node);\n        iface.setIsManaged(\"M\");\n        iface.setIsSnmpPrimary(PrimaryType.PRIMARY);\n        \n        node.addIpInterface(iface);\n\n        for(String svcType : new String[] { \"ICMP\", \"SNMP\" }) {\n            OnmsMonitoredService svc = new OnmsMonitoredService(iface, getServiceType(svcType));\n            svc.setSource(OnmsMonitoredService.SOURCE_DETECTOR);\n            if (getPollerConfig().isPolled(iface.getIpAddress(), svcType)) svc.setStatus(OnmsMonitoredService.STATUS_ACTIVE);\n            else svc.setStatus(OnmsMonitoredService.STATUS_NOT_POLLED);\n            iface.getMonitoredServices().add(svc);\n        }\n        \n        log().debug(\"saving database node\");\n        m_nodeDao.save(node);\n        \n        OnmsNode savedNode = m_nodeDao.findByForeignId(foreignSource, foreignId);\n        \n        Assert.notNull(savedNode, \"Failed to save node to database\");\n        \n        log().debug(\"sending events for new node ID \" + savedNode.getId());\n        savedNode.visit(new AddEventVisitor(m_eventForwarder) {\n\n            /* (non-Javadoc)\n             * @see org.opennms.netmgt.model.events.AddEventVisitor#createNodeAddedEvent(org.opennms.netmgt.model.OnmsNode)\n             */\n            @Override\n            protected Event createNodeAddedEvent(OnmsNode node) {\n                Event e = super.createNodeAddedEvent(node);\n                return new EventBuilder(e).addParam(EventConstants.PARM_USER, user).getEvent();\n            }\n        });\n\n        log().warn(\"about to return (\" + System.currentTimeMillis() + \")\");\n        return true;\n    }","commit_id":"33a2ed7352ddee8553f0d410578808d87ecc48eb","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21261,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"33a2ed7352ddee8553f0d410578808d87ecc48eb","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","id":21262,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","commit_id":"33a2ed7352ddee8553f0d410578808d87ecc48eb","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static Optional<MatchPhrasePrefixQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n\n        XContentParser.Token token = parser.nextToken();\n        if (token != XContentParser.Token.FIELD_NAME) {\n            throw new ParsingException(parser.getTokenLocation(), \"[\" + NAME + \"] query malformed, no field\");\n        }\n        String fieldName = parser.currentName();\n\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n\n        token = parser.nextToken();\n        if (token == XContentParser.Token.START_OBJECT) {\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (token.isValue()) {\n                    if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.QUERY_FIELD)) {\n                        value = parser.objectText();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.ANALYZER_FIELD)) {\n                        analyzer = parser.text();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                        boost = parser.floatValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchPhraseQueryBuilder.SLOP_FIELD)) {\n                        slop = parser.intValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) {\n                        maxExpansion = parser.intValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                        queryName = parser.text();\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                    }\n                } else {\n                    throw new ParsingException(parser.getTokenLocation(),\n                            \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                }\n            }\n            parser.nextToken();\n        } else {\n            value = parser.objectText();\n            // move to the next token\n            token = parser.nextToken();\n            if (token != XContentParser.Token.END_OBJECT) {\n                throw new ParsingException(parser.getTokenLocation(), \"[\" + NAME\n                        + \"] query parsed in simplified form, with direct field name, \"\n                        + \"but included more options than just the field name, possibly use its 'options' form, with 'query' element?\");\n            }\n        }\n\n        if (value == null) {\n            throw new ParsingException(parser.getTokenLocation(), \"No text specified for text query\");\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return Optional.of(matchQuery);\n    }","id":21263,"modified_method":"public static Optional<MatchPhrasePrefixQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {\n                // skip\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(), \"[match_phrase_prefix] query doesn't support multiple \" +\n                            \"fields, found [\" + fieldName + \"] and [\" + currentFieldName + \"]\");\n                }\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.QUERY_FIELD)) {\n                            value = parser.objectText();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.ANALYZER_FIELD)) {\n                            analyzer = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchPhraseQueryBuilder.SLOP_FIELD)) {\n                            slop = parser.intValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) {\n                            maxExpansion = parser.intValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return Optional.of(matchQuery);\n    }","commit_id":"f7b3dce4bcca78745f6af73e03ceb5009c9448b5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalValues() {\n        try {\n            new MatchPhrasePrefixQueryBuilder(null, \"value\");\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            new MatchPhrasePrefixQueryBuilder(\"fieldName\", null);\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n\n        try {\n            matchQuery.maxExpansions(-1);\n            fail(\"must not be positive\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }","id":21264,"modified_method":"public void testIllegalValues() {\n        try {\n            new MatchPhrasePrefixQueryBuilder(null, \"value\");\n            fail(\"field must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"[match_phrase_prefix] requires fieldName\", ex.getMessage());\n        }\n\n        try {\n            new MatchPhrasePrefixQueryBuilder(\"fieldName\", null);\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"[match_phrase_prefix] requires query value\", ex.getMessage());\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n\n        try {\n            matchQuery.maxExpansions(-1);\n            fail(\"must not be positive\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }","commit_id":"f7b3dce4bcca78745f6af73e03ceb5009c9448b5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static Optional<MatchPhraseQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n\n        XContentParser.Token token = parser.nextToken();\n        if (token != XContentParser.Token.FIELD_NAME) {\n            throw new ParsingException(parser.getTokenLocation(), \"[\" + NAME + \"] query malformed, no field\");\n        }\n        String fieldName = parser.currentName();\n\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        String queryName = null;\n\n        token = parser.nextToken();\n        if (token == XContentParser.Token.START_OBJECT) {\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (token.isValue()) {\n                    if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.QUERY_FIELD)) {\n                        value = parser.objectText();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.ANALYZER_FIELD)) {\n                        analyzer = parser.text();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                        boost = parser.floatValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, SLOP_FIELD)) {\n                        slop = parser.intValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                        queryName = parser.text();\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                    }\n                } else {\n                    throw new ParsingException(parser.getTokenLocation(),\n                            \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                }\n            }\n            parser.nextToken();\n        } else {\n            value = parser.objectText();\n            // move to the next token\n            token = parser.nextToken();\n            if (token != XContentParser.Token.END_OBJECT) {\n                throw new ParsingException(parser.getTokenLocation(), \"[\" + NAME\n                        + \"] query parsed in simplified form, with direct field name, \"\n                        + \"but included more options than just the field name, possibly use its 'options' form, with 'query' element?\");\n            }\n        }\n\n        if (value == null) {\n            throw new ParsingException(parser.getTokenLocation(), \"No text specified for text query\");\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return Optional.of(matchQuery);\n    }","id":21265,"modified_method":"public static Optional<MatchPhraseQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {\n                // skip\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(), \"[match_phrase] query doesn't support multiple fields, found [\"\n                            + fieldName + \"] and [\" + currentFieldName + \"]\");\n                }\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.QUERY_FIELD)) {\n                            value = parser.objectText();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MatchQueryBuilder.ANALYZER_FIELD)) {\n                            analyzer = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, SLOP_FIELD)) {\n                            slop = parser.intValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return Optional.of(matchQuery);\n    }","commit_id":"f56333048aa35e7a6153f400ab003fdcbf700517","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public MatchPhraseQueryBuilder(String fieldName, Object value) {\n        if (fieldName == null) {\n            throw new IllegalArgumentException(\"[\" + NAME + \"] requires fieldName\");\n        }\n        if (value == null) {\n            throw new IllegalArgumentException(\"[\" + NAME + \"] requires query value\");\n        }\n        this.fieldName = fieldName;\n        this.value = value;\n    }","id":21266,"modified_method":"public MatchPhraseQueryBuilder(String fieldName, Object value) {\n        if (Strings.isEmpty(fieldName)) {\n            throw new IllegalArgumentException(\"[\" + NAME + \"] requires fieldName\");\n        }\n        if (value == null) {\n            throw new IllegalArgumentException(\"[\" + NAME + \"] requires query value\");\n        }\n        this.fieldName = fieldName;\n        this.value = value;\n    }","commit_id":"f56333048aa35e7a6153f400ab003fdcbf700517","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalValues() {\n        try {\n            new MatchPhraseQueryBuilder(null, \"value\");\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            new MatchPhraseQueryBuilder(\"fieldName\", null);\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }","id":21267,"modified_method":"public void testIllegalValues() {\n        try {\n            new MatchPhraseQueryBuilder(null, \"value\");\n            fail(\"field must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"[match_phrase] requires fieldName\", ex.getMessage());\n        }\n\n        try {\n            new MatchPhraseQueryBuilder(\"fieldName\", null);\n            fail(\"value must not be non-null\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"[match_phrase] requires query value\", ex.getMessage());\n        }\n    }","commit_id":"f56333048aa35e7a6153f400ab003fdcbf700517","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static Optional<CommonTermsQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n        XContentParser.Token token = parser.nextToken();\n        if (token != XContentParser.Token.FIELD_NAME) {\n            throw new ParsingException(parser.getTokenLocation(), \"[\" + NAME + \"] query malformed, no field\");\n        }\n        String fieldName = parser.currentName();\n        Object text = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        String lowFreqMinimumShouldMatch = null;\n        String highFreqMinimumShouldMatch = null;\n        boolean disableCoord = CommonTermsQueryBuilder.DEFAULT_DISABLE_COORD;\n        Operator highFreqOperator = CommonTermsQueryBuilder.DEFAULT_HIGH_FREQ_OCCUR;\n        Operator lowFreqOperator = CommonTermsQueryBuilder.DEFAULT_LOW_FREQ_OCCUR;\n        float cutoffFrequency = CommonTermsQueryBuilder.DEFAULT_CUTOFF_FREQ;\n        String queryName = null;\n        token = parser.nextToken();\n        if (token == XContentParser.Token.START_OBJECT) {\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (token == XContentParser.Token.START_OBJECT) {\n                    if (parseContext.getParseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) {\n                        String innerFieldName = null;\n                        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                            if (token == XContentParser.Token.FIELD_NAME) {\n                                innerFieldName = parser.currentName();\n                            } else if (token.isValue()) {\n                                if (parseContext.getParseFieldMatcher().match(innerFieldName, LOW_FREQ_FIELD)) {\n                                    lowFreqMinimumShouldMatch = parser.text();\n                                } else if (parseContext.getParseFieldMatcher().match(innerFieldName, HIGH_FREQ_FIELD)) {\n                                    highFreqMinimumShouldMatch = parser.text();\n                                } else {\n                                    throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                            \"] query does not support [\" + innerFieldName\n                                            + \"] for [\" + currentFieldName + \"]\");\n                                }\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                        \"] unexpected token type [\" + token\n                                        + \"] after [\" + innerFieldName + \"]\");\n                            }\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                \"] query does not support [\" + currentFieldName + \"]\");\n                    }\n                } else if (token.isValue()) {\n                    if (parseContext.getParseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {\n                        text = parser.objectText();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) {\n                        analyzer = parser.text();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, DISABLE_COORD_FIELD)) {\n                        disableCoord = parser.booleanValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                        boost = parser.floatValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, HIGH_FREQ_OPERATOR_FIELD)) {\n                        highFreqOperator = Operator.fromString(parser.text());\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, LOW_FREQ_OPERATOR_FIELD)) {\n                        lowFreqOperator = Operator.fromString(parser.text());\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) {\n                        lowFreqMinimumShouldMatch = parser.text();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) {\n                        cutoffFrequency = parser.floatValue();\n                    } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                        queryName = parser.text();\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                \"] query does not support [\" + currentFieldName + \"]\");\n                    }\n                }\n            }\n            parser.nextToken();\n        } else {\n            text = parser.objectText();\n            // move to the next token\n            token = parser.nextToken();\n            if (token != XContentParser.Token.END_OBJECT) {\n                throw new ParsingException(parser.getTokenLocation(),\n                        \"[common] query parsed in simplified form, with direct field name, but included more options than just \" +\n                                \"the field name, possibly use its 'options' form, with 'query' element?\");\n            }\n        }\n\n        if (text == null) {\n            throw new ParsingException(parser.getTokenLocation(), \"No text specified for text query\");\n        }\n        return Optional.of(new CommonTermsQueryBuilder(fieldName, text)\n                .lowFreqMinimumShouldMatch(lowFreqMinimumShouldMatch)\n                .highFreqMinimumShouldMatch(highFreqMinimumShouldMatch)\n                .analyzer(analyzer)\n                .highFreqOperator(highFreqOperator)\n                .lowFreqOperator(lowFreqOperator)\n                .disableCoord(disableCoord)\n                .cutoffFrequency(cutoffFrequency)\n                .boost(boost)\n                .queryName(queryName));\n    }","id":21268,"modified_method":"public static Optional<CommonTermsQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {\n        XContentParser parser = parseContext.parser();\n\n        String fieldName = null;\n        Object text = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        String lowFreqMinimumShouldMatch = null;\n        String highFreqMinimumShouldMatch = null;\n        boolean disableCoord = CommonTermsQueryBuilder.DEFAULT_DISABLE_COORD;\n        Operator highFreqOperator = CommonTermsQueryBuilder.DEFAULT_HIGH_FREQ_OCCUR;\n        Operator lowFreqOperator = CommonTermsQueryBuilder.DEFAULT_LOW_FREQ_OCCUR;\n        float cutoffFrequency = CommonTermsQueryBuilder.DEFAULT_CUTOFF_FREQ;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {\n                // skip\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                if (fieldName != null) {\n                    throw new ParsingException(parser.getTokenLocation(), \"[common] query doesn't support multiple fields, found [\"\n                            + fieldName + \"] and [\" + currentFieldName + \"]\");\n                }\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token == XContentParser.Token.START_OBJECT) {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) {\n                            String innerFieldName = null;\n                            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                                if (token == XContentParser.Token.FIELD_NAME) {\n                                    innerFieldName = parser.currentName();\n                                } else if (token.isValue()) {\n                                    if (parseContext.getParseFieldMatcher().match(innerFieldName, LOW_FREQ_FIELD)) {\n                                        lowFreqMinimumShouldMatch = parser.text();\n                                    } else if (parseContext.getParseFieldMatcher().match(innerFieldName, HIGH_FREQ_FIELD)) {\n                                        highFreqMinimumShouldMatch = parser.text();\n                                    } else {\n                                        throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                                \"] query does not support [\" + innerFieldName\n                                                + \"] for [\" + currentFieldName + \"]\");\n                                    }\n                                } else {\n                                    throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                            \"] unexpected token type [\" + token\n                                            + \"] after [\" + innerFieldName + \"]\");\n                                }\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                    \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else if (token.isValue()) {\n                        if (parseContext.getParseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {\n                            text = parser.objectText();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) {\n                            analyzer = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, DISABLE_COORD_FIELD)) {\n                            disableCoord = parser.booleanValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {\n                            boost = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, HIGH_FREQ_OPERATOR_FIELD)) {\n                            highFreqOperator = Operator.fromString(parser.text());\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, LOW_FREQ_OPERATOR_FIELD)) {\n                            lowFreqOperator = Operator.fromString(parser.text());\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) {\n                            lowFreqMinimumShouldMatch = parser.text();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) {\n                            cutoffFrequency = parser.floatValue();\n                        } else if (parseContext.getParseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(), \"[\" + CommonTermsQueryBuilder.NAME +\n                                    \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                fieldName = parser.currentName();\n                text = parser.objectText();\n            }\n        }\n\n        return Optional.of(new CommonTermsQueryBuilder(fieldName, text)\n                .lowFreqMinimumShouldMatch(lowFreqMinimumShouldMatch)\n                .highFreqMinimumShouldMatch(highFreqMinimumShouldMatch)\n                .analyzer(analyzer)\n                .highFreqOperator(highFreqOperator)\n                .lowFreqOperator(lowFreqOperator)\n                .disableCoord(disableCoord)\n                .cutoffFrequency(cutoffFrequency)\n                .boost(boost)\n                .queryName(queryName));\n    }","commit_id":"c3dfe0846c095c9eadb873ec26e2c8f5b03b180b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Constructs a new common terms query.\n     */\n    public CommonTermsQueryBuilder(String fieldName, Object text) {\n        if (Strings.isEmpty(fieldName)) {\n            throw new IllegalArgumentException(\"field name is null or empty\");\n        }\n        if (text == null) {\n            throw new IllegalArgumentException(\"text cannot be null.\");\n        }\n        this.fieldName = fieldName;\n        this.text = text;\n    }","id":21269,"modified_method":"/**\n     * Constructs a new common terms query.\n     */\n    public CommonTermsQueryBuilder(String fieldName, Object text) {\n        if (Strings.isEmpty(fieldName)) {\n            throw new IllegalArgumentException(\"field name is null or empty\");\n        }\n        if (text == null) {\n            throw new IllegalArgumentException(\"text cannot be null\");\n        }\n        this.fieldName = fieldName;\n        this.text = text;\n    }","commit_id":"c3dfe0846c095c9eadb873ec26e2c8f5b03b180b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalArguments() {\n        try {\n            if (randomBoolean()) {\n                new CommonTermsQueryBuilder(null, \"text\");\n            } else {\n                new CommonTermsQueryBuilder(\"\", \"text\");\n            }\n            fail(\"must be non null\");\n        } catch (IllegalArgumentException e) {\n            // okay\n        }\n\n        try {\n            new CommonTermsQueryBuilder(\"fieldName\", null);\n            fail(\"must be non null\");\n        } catch (IllegalArgumentException e) {\n            // okay\n        }\n    }","id":21270,"modified_method":"public void testIllegalArguments() {\n        try {\n            if (randomBoolean()) {\n                new CommonTermsQueryBuilder(null, \"text\");\n            } else {\n                new CommonTermsQueryBuilder(\"\", \"text\");\n            }\n            fail(\"must be non null\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"field name is null or empty\", e.getMessage());\n        }\n\n        try {\n            new CommonTermsQueryBuilder(\"fieldName\", null);\n            fail(\"must be non null\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"text cannot be null\", e.getMessage());\n        }\n    }","commit_id":"c3dfe0846c095c9eadb873ec26e2c8f5b03b180b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","id":21271,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"ab8e3d89d238647fe7d7f36c5e732def6293a6c0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","id":21272,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"ab8e3d89d238647fe7d7f36c5e732def6293a6c0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","id":21273,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"5b88003eec628e07c1b3a5cf59c6509ea1d5dbf4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","id":21274,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"5b88003eec628e07c1b3a5cf59c6509ea1d5dbf4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        return addMonitoredService(iface, svcName);\n    }","id":21275,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer ipInterfaceId, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.get(ipInterfaceId);\n        assertNotNull(iface, \"could not find interface with id %d\", ipInterfaceId);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"b25da74850237f6bcbfd7750e7fd93b9ed8ec881","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        return addMonitoredService(iface, svcName);\n    }","id":21276,"modified_method":"public OnmsMonitoredService addMonitoredService(Integer nodeId, String ipAddress, String svcName) {\n        OnmsIpInterface iface = m_ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n        assertNotNull(iface, \"could not find interface with nodeid %d and ipAddr %s\", nodeId, ipAddress);\n        OnmsServiceType svcType = m_serviceTypeDao.findByName(svcName);\n        if (svcType == null) {\n            svcType = new OnmsServiceType(svcName);\n            m_serviceTypeDao.save(svcType);\n        }\n        \n        OnmsMonitoredService svc = iface.getMonitoredServiceByServiceType(svcName);\n        if (svc != null) {\n            m_monitoredServiceDao.saveOrUpdate(svc);\n        } else {\n        \n            // this adds the service to the interface as a side effect\n            svc = new OnmsMonitoredService(iface, svcType);\n            svc.setStatus(\"A\");\n            m_ipInterfaceDao.saveOrUpdate(iface);\n            AddEventVisitor visitor = new AddEventVisitor(m_eventForwarder);\n            svc.visit(visitor);\n        }\n\n        \n        return svc;\n    }","commit_id":"b25da74850237f6bcbfd7750e7fd93b9ed8ec881","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SlaveContext getSlaveContext()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21277,"modified_method":"public SlaveContext getSlaveContext()\n    {\n        return slaveContext;\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master getMaster()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21278,"modified_method":"public Master getMaster()\n    {\n        return master;\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getReferenceNode()\n    {\n        return getReferenceNodeMethod.execute();\n    }","id":21279,"modified_method":"public Node getReferenceNode()\n    {\n        return localGraph.getReferenceNode();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ) );\n        }\n    }","id":21280,"modified_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT,\n                    DefaultRelationshipTypeCreator.INSTANCE, TopLevelTransactionFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ),\n                    new SlaveRelationshipTypeCreator( broker, receiver ),\n                    new SlaveTopLevelTransactionFactory( broker, receiver ) );\n        }\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node createNode()\n    {\n        return createNodeMethod.execute();\n    }","id":21281,"modified_method":"public Node createNode()\n    {\n        return localGraph.createNode();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21282,"modified_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.registerTransactionEventHandler( handler );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getNodeById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21283,"modified_method":"public Node getNodeById( long id )\n    {\n        return localGraph.getNodeById( id );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21284,"modified_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        return localGraph.enableRemoteShell( initialProperties );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell()\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21285,"modified_method":"public boolean enableRemoteShell()\n    {\n        return localGraph.enableRemoteShell();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21286,"modified_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        return localGraph.getRelationshipTypes();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Relationship getRelationshipById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21287,"modified_method":"public Relationship getRelationshipById( long id )\n    {\n        return localGraph.getRelationshipById( id );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21288,"modified_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.unregisterTransactionEventHandler( handler );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21289,"modified_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.unregisterKernelEventHandler( handler );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<Node> getAllNodes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21290,"modified_method":"public Iterable<Node> getAllNodes()\n    {\n        return localGraph.getAllNodes();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","id":21291,"modified_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config, Broker broker )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = broker;\n//        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21292,"modified_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.registerKernelEventHandler( handler );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Transaction beginTx()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21293,"modified_method":"public Transaction beginTx()\n    {\n        return localGraph.beginTx();\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireWriteLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21294,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getWriteLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                    \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireReadLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21295,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getReadLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                        \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = getSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            graphdb.createNode();\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","id":21296,"modified_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = instantiateSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            Node node = graphdb.createNode();\n            graphdb.getReferenceNode().createRelationshipTo( node, REL_TYPE );\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"2a04e20561c8ef3dd65e069a31c02677da6c1df4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master getMaster()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21297,"modified_method":"public Master getMaster()\n    {\n        return master;\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public SlaveContext getSlaveContext()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21298,"modified_method":"public SlaveContext getSlaveContext()\n    {\n        return slaveContext;\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Relationship getRelationshipById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21299,"modified_method":"public Relationship getRelationshipById( long id )\n    {\n        return localGraph.getRelationshipById( id );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<Node> getAllNodes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21300,"modified_method":"public Iterable<Node> getAllNodes()\n    {\n        return localGraph.getAllNodes();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ) );\n        }\n    }","id":21301,"modified_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT,\n                    DefaultRelationshipTypeCreator.INSTANCE, TopLevelTransactionFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ),\n                    new SlaveRelationshipTypeCreator( broker, receiver ),\n                    new SlaveTopLevelTransactionFactory( broker, receiver ) );\n        }\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node createNode()\n    {\n        return createNodeMethod.execute();\n    }","id":21302,"modified_method":"public Node createNode()\n    {\n        return localGraph.createNode();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21303,"modified_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.registerTransactionEventHandler( handler );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21304,"modified_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.registerKernelEventHandler( handler );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","id":21305,"modified_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config, Broker broker )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = broker;\n//        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21306,"modified_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        return localGraph.getRelationshipTypes();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell()\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21307,"modified_method":"public boolean enableRemoteShell()\n    {\n        return localGraph.enableRemoteShell();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Transaction beginTx()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21308,"modified_method":"public Transaction beginTx()\n    {\n        return localGraph.beginTx();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getReferenceNode()\n    {\n        return getReferenceNodeMethod.execute();\n    }","id":21309,"modified_method":"public Node getReferenceNode()\n    {\n        return localGraph.getReferenceNode();\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21310,"modified_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.unregisterKernelEventHandler( handler );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21311,"modified_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        return localGraph.enableRemoteShell( initialProperties );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getNodeById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21312,"modified_method":"public Node getNodeById( long id )\n    {\n        return localGraph.getNodeById( id );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21313,"modified_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.unregisterTransactionEventHandler( handler );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireWriteLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21314,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getWriteLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                    \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireReadLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21315,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getReadLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                        \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = getSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            graphdb.createNode();\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","id":21316,"modified_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = instantiateSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            Node node = graphdb.createNode();\n            graphdb.getReferenceNode().createRelationshipTo( node, REL_TYPE );\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"a90a9c34d9e7b15783dff2833a690b267b44de2d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Master getMaster()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21317,"modified_method":"public Master getMaster()\n    {\n        return master;\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public SlaveContext getSlaveContext()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21318,"modified_method":"public SlaveContext getSlaveContext()\n    {\n        return slaveContext;\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21319,"modified_method":"public <T> TransactionEventHandler<T> unregisterTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.unregisterTransactionEventHandler( handler );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Relationship getRelationshipById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21320,"modified_method":"public Relationship getRelationshipById( long id )\n    {\n        return localGraph.getRelationshipById( id );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getNodeById( long id )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21321,"modified_method":"public Node getNodeById( long id )\n    {\n        return localGraph.getNodeById( id );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21322,"modified_method":"public <T> TransactionEventHandler<T> registerTransactionEventHandler(\n            TransactionEventHandler<T> handler )\n    {\n        return localGraph.registerTransactionEventHandler( handler );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node createNode()\n    {\n        return createNodeMethod.execute();\n    }","id":21323,"modified_method":"public Node createNode()\n    {\n        return localGraph.createNode();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21324,"modified_method":"public boolean enableRemoteShell( Map<String, Serializable> initialProperties )\n    {\n        return localGraph.enableRemoteShell( initialProperties );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21325,"modified_method":"public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.registerKernelEventHandler( handler );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Transaction beginTx()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21326,"modified_method":"public Transaction beginTx()\n    {\n        return localGraph.beginTx();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21327,"modified_method":"public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n    {\n        return localGraph.unregisterKernelEventHandler( handler );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","id":21328,"modified_method":"public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config, Broker broker )\n    {\n        this.storeDir = storeDir;\n        this.config = config;\n        this.broker = broker;\n//        this.broker = instantiateBroker();\n        reevaluateMyself();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean enableRemoteShell()\n    {\n        // TODO Auto-generated method stub\n        return false;\n    }","id":21329,"modified_method":"public boolean enableRemoteShell()\n    {\n        return localGraph.enableRemoteShell();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ) );\n        }\n    }","id":21330,"modified_method":"protected void reevaluateMyself()\n    {\n        shutdownIfNecessary();\n        if ( brokerSaysIAmMaster() )\n        {\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    LockManagerFactory.DEFAULT, IdGeneratorFactory.DEFAULT,\n                    DefaultRelationshipTypeCreator.INSTANCE, TopLevelTransactionFactory.DEFAULT );\n        }\n        else\n        {\n            ResponseReceiver receiver = new ResponseReceiver();\n            this.localGraph = new EmbeddedGraphDbImpl( storeDir, config, this,\n                    new SlaveLockManager.SlaveLockManagerFactory( broker, receiver ),\n                    new SlaveIdGenerator.SlaveIdGeneratorFactory( broker, receiver ),\n                    new SlaveRelationshipTypeCreator( broker, receiver ),\n                    new SlaveTopLevelTransactionFactory( broker, receiver ) );\n        }\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21331,"modified_method":"public Iterable<RelationshipType> getRelationshipTypes()\n    {\n        return localGraph.getRelationshipTypes();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Node getReferenceNode()\n    {\n        return getReferenceNodeMethod.execute();\n    }","id":21332,"modified_method":"public Node getReferenceNode()\n    {\n        return localGraph.getReferenceNode();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Iterable<Node> getAllNodes()\n    {\n        // TODO Auto-generated method stub\n        return null;\n    }","id":21333,"modified_method":"public Iterable<Node> getAllNodes()\n    {\n        return localGraph.getAllNodes();\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireReadLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21334,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getReadLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireReadLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                        \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getReadLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        LockResult result = null;\n        do\n        {\n            result = receiver.receive( broker.getMaster().acquireWriteLock(\n                    broker.getSlaveContext(), getLocalTxId(), (PropertyContainer) resource ) );\n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","id":21335,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        Node node = resource instanceof Node ? (Node) resource : null;\n        Relationship relationship = resource instanceof Relationship ?\n                (Relationship) resource : null;\n        if ( node == null && relationship == null )\n        {\n            // This is a \"fake\" resource, only grab the lock locally\n            super.getWriteLock( resource );\n            return;\n        }\n        \n        LockResult result = null;\n        do\n        {\n            result = node != null ?\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), node ) ) :\n                    receiver.receive( broker.getMaster().acquireWriteLock(\n                            broker.getSlaveContext(), getLocalTxId(), relationship ) );\n                    \n            switch ( result.getStatus() )\n            {\n            case OK_LOCKED:\n                super.getWriteLock( resource );\n                return;\n            case DEAD_LOCKED:\n                throw new DeadlockDetectedException( result.getDeadlockMessage() );\n            }\n        }\n        while ( result.getStatus() == LockStatus.NOT_LOCKED );\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = getSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            graphdb.createNode();\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","id":21336,"modified_method":"@Test\n    public void slaveCreateNode()\n    {\n        GraphDatabaseService graphdb = instantiateSlave();\n        Transaction tx = graphdb.beginTx();\n        try\n        {\n            Node node = graphdb.createNode();\n            graphdb.getReferenceNode().createRelationshipTo( node, REL_TYPE );\n            tx.success();\n        }\n        finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"d6b16054f2f5d8cac33a3269606aaf7ea958cd7b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = fieldDelimiterPattern.split(columns[i]);\n        counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n      }\n      addPhrase(phrase, null, counts);\n    }\n    br.close();\n    timer.done();\n  }","id":21337,"modified_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    int lineno = 0;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = countDelimiterPattern.split(columns[i], 2);\n        if (tagCount.length == 2) {\n          try {\n            counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n          } catch (NumberFormatException ex) {\n            throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                    \"' from (\" + filename + \":\" + lineno + \"): \" + line, ex);\n          }\n        } else {\n          throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                  \"' from + (\" + filename + \":\" + lineno + \"): \" + line);\n        }\n      }\n      addPhrase(phrase, null, counts);\n      lineno++;\n    }\n    br.close();\n    timer.done();\n  }","commit_id":"8a3a9b6323a25a2e92b30d6f1348257243979516","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = fieldDelimiterPattern.split(columns[i]);\n        counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n      }\n      addPhrase(phrase, null, counts);\n    }\n    br.close();\n    timer.done();\n  }","id":21338,"modified_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    int lineno = 0;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = countDelimiterPattern.split(columns[i], 2);\n        if (tagCount.length == 2) {\n          try {\n            counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n          } catch (NumberFormatException ex) {\n            throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                    \"' from (\" + filename + \":\" + lineno + \"): \" + line, ex);\n          }\n        } else {\n          throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                  \"' from + (\" + filename + \":\" + lineno + \"): \" + line);\n        }\n      }\n      addPhrase(phrase, null, counts);\n      lineno++;\n    }\n    br.close();\n    timer.done();\n  }","commit_id":"f3b89d2b45727190b786bf3a87d741fdc259ac79","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = fieldDelimiterPattern.split(columns[i]);\n        counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n      }\n      addPhrase(phrase, null, counts);\n    }\n    br.close();\n    timer.done();\n  }","id":21339,"modified_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    int lineno = 0;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = countDelimiterPattern.split(columns[i], 2);\n        if (tagCount.length == 2) {\n          try {\n            counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n          } catch (NumberFormatException ex) {\n            throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                    \"' from (\" + filename + \":\" + lineno + \"): \" + line, ex);\n          }\n        } else {\n          throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                  \"' from + (\" + filename + \":\" + lineno + \"): \" + line);\n        }\n      }\n      addPhrase(phrase, null, counts);\n      lineno++;\n    }\n    br.close();\n    timer.done();\n  }","commit_id":"78b37f87ed1a6760990a15f0bc84bdc7b119324f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = fieldDelimiterPattern.split(columns[i]);\n        counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n      }\n      addPhrase(phrase, null, counts);\n    }\n    br.close();\n    timer.done();\n  }","id":21340,"modified_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    int lineno = 0;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = countDelimiterPattern.split(columns[i], 2);\n        if (tagCount.length == 2) {\n          try {\n            counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n          } catch (NumberFormatException ex) {\n            throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                    \"' from (\" + filename + \":\" + lineno + \"): \" + line, ex);\n          }\n        } else {\n          throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                  \"' from + (\" + filename + \":\" + lineno + \"): \" + line);\n        }\n      }\n      addPhrase(phrase, null, counts);\n      lineno++;\n    }\n    br.close();\n    timer.done();\n  }","commit_id":"8ea6a02cc104b73a6cd5904981a36855b372a115","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = fieldDelimiterPattern.split(columns[i]);\n        counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n      }\n      addPhrase(phrase, null, counts);\n    }\n    br.close();\n    timer.done();\n  }","id":21341,"modified_method":"public void readPhrasesWithTagScores(String filename, Pattern fieldDelimiterPattern, Pattern countDelimiterPattern) throws IOException\n  {\n    Timing timer = new Timing();\n    timer.doing(\"Reading phrases: \" + filename);\n    BufferedReader br = IOUtils.getBufferedFileReader(filename);\n    String line;\n    int lineno = 0;\n    while ((line = br.readLine()) != null) {\n      String[] columns = fieldDelimiterPattern.split(line);\n      String phrase = columns[0];\n      // Pick map factory to use depending on number of tags we have\n      MapFactory<String,MutableDouble> mapFactory = (columns.length < 20)?\n              MapFactory.<String,MutableDouble>arrayMapFactory(): MapFactory.<String,MutableDouble>linkedHashMapFactory();\n      Counter<String> counts = new ClassicCounter<String>(mapFactory);\n      for (int i = 1; i < columns.length; i++) {\n        String[] tagCount = countDelimiterPattern.split(columns[i], 2);\n        if (tagCount.length == 2) {\n          try {\n            counts.setCount(tagCount[0], Double.parseDouble(tagCount[1]));\n          } catch (NumberFormatException ex) {\n            throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                    \"' from (\" + filename + \":\" + lineno + \"): \" + line, ex);\n          }\n        } else {\n          throw new RuntimeException(\"Error processing field \" + i + \": '\" + columns[i] +\n                  \"' from + (\" + filename + \":\" + lineno + \"): \" + line);\n        }\n      }\n      addPhrase(phrase, null, counts);\n      lineno++;\n    }\n    br.close();\n    timer.done();\n  }","commit_id":"1a9a1d6aa362404578144c5b9c9fd675bef90dd5","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n\tpublic Map<String, String[]> getRequestProperties(\n\t\t\tHttpServletRequest portletRequest, IPortletWindow portletWindow) {\n\t\treturn Collections.emptyMap();\n\t}","id":21342,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void addResponseProperty(HttpServletRequest portletRequest,\n\t\t\tIPortletWindow portletWindow, String property, String value) {\n\t\t// noop\n\t}","id":21343,"modified_method":"@Override\n    public boolean addResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow,\n            String property, String value) {\n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void setResponseProperty(HttpServletRequest portletRequest,\n\t\t\tIPortletWindow portletWindow, String property, String value) {\n\t\t// noop\n\t}","id":21344,"modified_method":"@Override\n    public boolean setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow,\n            String property, String value) {\n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public Map<String, String[]> getRequestProperties(HttpServletRequest portletRequest, IPortletWindow portletWindow) {\n        final HttpServletRequest httpServletRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n        \n        final Map<String, String[]> properties = new ParameterMap();\n\n        properties.put(\"REMOTE_ADDR\", new String[] { httpServletRequest.getRemoteAddr() });\n        properties.put(\"REQUEST_METHOD\", new String[] { httpServletRequest.getMethod() });\n        \n        Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String name = headerNames.nextElement();\n            Enumeration<String> values = httpServletRequest.getHeaders(name);\n            List<String> v = new ArrayList<String>();\n            while (values.hasMoreElements()) {\n                v.add(values.nextElement());\n            }\n            properties.put(name, v.toArray(new String[v.size()]));\n        }\n\n        return properties;\n    }","id":21345,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n\n        final HttpServletRequest httpServletRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n        \n        final String remoteAddr = httpServletRequest.getRemoteAddr();\n        if (remoteAddr != null) {\n            propertiesPopulator.put(\"REMOTE_ADDR\", remoteAddr);\n        }\n        \n        final String remoteHost = httpServletRequest.getRemoteHost();\n        if (remoteHost != null) {\n            propertiesPopulator.put(\"REMOTE_HOST\", remoteHost);\n        }\n        \n        final String method = httpServletRequest.getMethod();\n        if (method != null) {\n            propertiesPopulator.put(\"REQUEST_METHOD\", method);\n        }\n        \n        @SuppressWarnings(\"unchecked\")\n        final Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            final String name = headerNames.nextElement();\n            \n            @SuppressWarnings(\"unchecked\")\n            final Enumeration<String> values = httpServletRequest.getHeaders(name);\n            while (values.hasMoreElements()) {\n                propertiesPopulator.put(name, values.nextElement());\n            }\n            \n        }\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * @param portalRequestUtils the portalRequestUtils to set\n     */\n    @Autowired\n    public void setPortalRequestUtils(IPortalRequestUtils portalRequestUtils) {\n        this.portalRequestUtils = portalRequestUtils;\n    }","id":21346,"modified_method":"@Autowired\n    public void setPortalRequestUtils(IPortalRequestUtils portalRequestUtils) {\n        this.portalRequestUtils = portalRequestUtils;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void testGetRequestProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"1.2.3.4\");\n        request.setMethod(\"POST\");\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        \n        final IPortalRequestUtils portalRequestUtils = EasyMock.createMock(IPortalRequestUtils.class);\n        EasyMock.expect(portalRequestUtils.getOriginalPortalRequest(request)).andReturn(request);\n        \n        EasyMock.replay(portletWindow, portalRequestUtils);\n        \n        this.httpRequestPropertiesManager.setPortalRequestUtils(portalRequestUtils);\n        \n        final Map<String, String[]> properties = this.httpRequestPropertiesManager.getRequestProperties(request, portletWindow);\n\n        assertNotNull(\"properties Map should not be null\", properties);\n        assertEquals(\"properties Map should have 2 values\", 2, properties.size());\n        assertEquals(Collections.singletonList(\"1.2.3.4\"), Arrays.asList(properties.get(\"REMOTE_ADDR\")));\n        assertEquals(Collections.singletonList(\"POST\"), Arrays.asList(properties.get(\"REQUEST_METHOD\")));\n        \n        EasyMock.verify(portletWindow, portalRequestUtils);\n    }","id":21347,"modified_method":"public void testGetRequestProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"1.2.3.4\");\n        request.setMethod(\"POST\");\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        \n        final IPortalRequestUtils portalRequestUtils = EasyMock.createMock(IPortalRequestUtils.class);\n        EasyMock.expect(portalRequestUtils.getOriginalPortalRequest(request)).andReturn(request);\n        \n        EasyMock.replay(portletWindow, portalRequestUtils);\n        \n        this.httpRequestPropertiesManager.setPortalRequestUtils(portalRequestUtils);\n        \n        final MultivaluedMapPopulator<String, String> populator = new MultivaluedMapPopulator<String, String>();\n        this.httpRequestPropertiesManager.populateRequestProperties(request, portletWindow, populator);\n        \n        final Map<String, List<String>> properties = populator.getMap();\n\n        assertNotNull(\"properties Map should not be null\", properties);\n        \n        final Map<String, List<String>> expected = ImmutableMap.of(\n                \"REMOTE_ADDR\", Collections.singletonList(\"1.2.3.4\"),\n                \"REQUEST_METHOD\", Collections.singletonList(\"POST\"),\n                \"REMOTE_HOST\", Collections.singletonList(\"localhost\"));\n        \n        assertEquals(expected, properties);\n        \n        EasyMock.verify(portletWindow, portalRequestUtils);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public Map<String, String[]> getRequestProperties(HttpServletRequest request, IPortletWindow portletWindow) {\n        return this.properties;\n    }","id":21348,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n        for (final Entry<String, String[]> propEntry : this.properties.entrySet()) {\n            final String name = propEntry.getKey();\n            for (final String value : propEntry.getValue()) {\n                propertiesPopulator.put(name, value);\n            }\n        }\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void addResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        String[] values = this.properties.get(property);\n        values = (String[])ArrayUtils.add(values, value);\n        this.properties.put(property, values);\n    }","id":21349,"modified_method":"public boolean addResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        String[] values = this.properties.get(property);\n        values = (String[])ArrayUtils.add(values, value);\n        this.properties.put(property, values);\n        return true;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void setResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        this.properties.put(property, new String[] { value });\n    }","id":21350,"modified_method":"public boolean setResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        this.properties.put(property, new String[] { value });\n        return true;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n        if (NEW_ITEM_COUNT_PROPERTY.equals(property)) {\n            portletRequest.setAttribute(IPortletRenderer.ATTRIBUTE__PORTLET_NEW_ITEM_COUNT, value);\n        }\n    }","id":21351,"modified_method":"@Override\n    public boolean setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n        if (NEW_ITEM_COUNT_PROPERTY.equals(property) || IPortletRenderer.NEW_ITEM_COUNT_PROPERTY.equals(property)) {\n            portletRequest.setAttribute(IPortletRenderer.ATTRIBUTE__PORTLET_NEW_ITEM_COUNT, value);\n            return true;\n        }\n        \n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n        if (LINK_PROPERTY.equals(property)) {\n            if (StringUtils.isNotBlank(value)) {\n                portletRequest.setAttribute(IPortletRenderer.ATTRIBUTE__PORTLET_LINK, value);\n            }\n        }\n    }","id":21352,"modified_method":"@Override\n    public boolean setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n        if ((LINK_PROPERTY.equals(property) || IPortletRenderer.EXTERNAL_PORTLET_LINK_PROPERTY.equals(property)) && StringUtils.isNotBlank(value)) {\n            portletRequest.setAttribute(IPortletRenderer.ATTRIBUTE__PORTLET_LINK, value);\n            return true;\n        }\n        \n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public Map<String, String[]> getProperties() {\n        return this.requestPropertiesManager.getRequestProperties(this.servletRequest, this.portletWindow);\n    }","id":21353,"modified_method":"@Override\n    public final Map<String, String[]> getProperties() {\n        final MultivaluedMapPopulator<String, String> populator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManager.populateRequestProperties(this.servletRequest, portletWindow, populator);\n        final Map<String, List<String>> map = populator.getMap();\n        return ParameterMap.convertListMap(map);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void addProperty(String key, String value) {\n        // TODO Auto-generated method stub\n        super.addProperty(key, value);\n    }","id":21354,"modified_method":"@Override\n    protected boolean managerAddProperty(String key, String value) {\n        final boolean handled = super.managerAddProperty(key, value);\n        if (!handled) {\n            if (ResourceResponse.HTTP_STATUS_CODE.equals(key)) {\n                this.portletResourceOutputHandler.setStatus(Integer.parseInt(value));\n                return true;\n            }\n            this.portletResourceOutputHandler.addHeader(key, value);\n        }\n        return true;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void setProperty(String key, String value) {\n        // TODO Auto-generated method stub\n        super.setProperty(key, value);\n    }","id":21355,"modified_method":"@Override\n    protected boolean managerSetProperty(String key, String value) {\n        final boolean handled = super.managerSetProperty(key, value);\n        if (!handled) {\n            if (ResourceResponse.HTTP_STATUS_CODE.equals(key)) {\n                this.portletResourceOutputHandler.setStatus(Integer.parseInt(value));\n                return true;\n            }\n            this.portletResourceOutputHandler.setHeader(key, value);\n        }\n        return true;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void addProperty(String key, String value) {\n        this.requestPropertiesManager.addResponseProperty(this.servletRequest, this.portletWindow, key, value);\n    }","id":21356,"modified_method":"@Override\n    public final void addProperty(String key, String value) {\n        managerAddProperty(key, value);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * @see PortletResponse#createElement(String)\n     * \n     * @see org.apache.pluto.container.PortletResponseContext#createElement(java.lang.String)\n     */\n    @Override\n    public Element createElement(String tagName) throws DOMException {\n        // TODO this is terribly inefficient\n        final DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();\n        final DocumentBuilder docBuilder;\n        try {\n            docBuilder = dbfac.newDocumentBuilder();\n            final Document doc = docBuilder.newDocument();\n            return doc.createElement(tagName);\n        }\n        catch (ParserConfigurationException e) {\n            throw new DOMException((short) 0, \"Initialization failure\");\n        }\n    }","id":21357,"modified_method":"@Override\n    public Element createElement(String tagName) throws DOMException {\n        // TODO this is terribly inefficient\n        final DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();\n        final DocumentBuilder docBuilder;\n        try {\n            docBuilder = dbfac.newDocumentBuilder();\n            final Document doc = docBuilder.newDocument();\n            return doc.createElement(tagName);\n        }\n        catch (ParserConfigurationException e) {\n            throw new DOMException((short) 0, \"Initialization failure\");\n        }\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void addProperty(String key, Element element) {\n        // TODO Auto-generated method stub\n    }","id":21358,"modified_method":"@Override\n    public final void addProperty(String key, Element element) {\n        //uPortal doesn't support XML properties\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void setProperty(String key, String value) {\n        //TODO how do these get translated to servlet response headers for resources?\n        this.requestPropertiesManager.setResponseProperty(this.servletRequest, this.portletWindow, key, value);\n    }","id":21359,"modified_method":"@Override\n    public final void setProperty(String key, String value) {\n        managerSetProperty(key, value);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void addResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\t\n\t\tfinal String attributeName = getAttributeName(portletWindow, property);\n\t\t\n\t\tfinal Object existingValue = portalRequest.getAttribute(attributeName);\n\t\tif (!(existingValue instanceof List)) {\n\t\t\tthis.logger.warn(\"Attribute {} for property {} exists but is NOT a List, it will be replaced\", attributeName, property);\n\t\t\tthis.setResponseProperty(portletRequest, portletWindow, property, value);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlogger.debug(\"Adding property {} as attribute {}\", property, attributeName);\n\t\t\n\t\tfinal List<String> values = (List<String>)existingValue;\n\t\tvalues.add(value);\n\t\tportalRequest.setAttribute(attributeName, values);\n\t}","id":21360,"modified_method":"@Override\n\tpublic boolean addResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\t\n\t\tfinal String attributeName = getAttributeName(portletWindow, property);\n\t\t\n\t\tfinal Object existingValue = portalRequest.getAttribute(attributeName);\n\t\tif (!(existingValue instanceof List)) {\n\t\t\tthis.logger.warn(\"Attribute {} for property {} exists but is NOT a List, it will be replaced\", attributeName, property);\n\t\t\tthis.setResponseProperty(portletRequest, portletWindow, property, value);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tlogger.debug(\"Adding property {} as attribute {}\", property, attributeName);\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n        final List<String> values = (List<String>)existingValue;\n\t\tvalues.add(value);\n\t\tportalRequest.setAttribute(attributeName, values);\n\t\treturn true;\n\t}","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic Map<String, String[]> getRequestProperties(HttpServletRequest portletRequest, IPortletWindow portletWindow) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\tfinal String windowIdStr = portletWindow.getPortletWindowId().getStringId();\n\t\t\n\t\tfinal Builder<String, String[]> properties = ImmutableMap.builder();\n\t\tfor (final Enumeration<String> attributeNames = portalRequest.getAttributeNames(); attributeNames.hasMoreElements();) {\n\t\t\tfinal String fullAttributeName = attributeNames.nextElement();\n\t\t\tfinal String propertyName = getPropertyName(windowIdStr, fullAttributeName);\n\t\t\tif (propertyName == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tlogger.debug(\"Found portal request attribute {} returning as property {}\", fullAttributeName, propertyName);\n\n\t\t\tfinal Object value = portalRequest.getAttribute(fullAttributeName);\n\t\t\tfinal String[] values = convertValue(value);\n\t\t\t\n\t\t\tproperties.put(propertyName, values);\n\t\t}\n\t\t\n\t\treturn properties.build();\n\t}","id":21361,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\tfinal String windowIdStr = portletWindow.getPortletWindowId().getStringId();\n\t\t\n\t\tfor (@SuppressWarnings(\"unchecked\") final Enumeration<String> attributeNames = portalRequest.getAttributeNames(); attributeNames.hasMoreElements();) {\n\t\t\tfinal String fullAttributeName = attributeNames.nextElement();\n\t\t\tfinal String propertyName = getPropertyName(windowIdStr, fullAttributeName);\n\t\t\tif (propertyName == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tlogger.debug(\"Found portal request attribute {} returning as property {}\", fullAttributeName, propertyName);\n\n\t\t\tfinal Object value = portalRequest.getAttribute(fullAttributeName);\n\t\t\tconvertValue(propertyName, value, propertiesPopulator);\n\t\t}\n\t}","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\t\n\t\tfinal String attributeName = getAttributeName(portletWindow, property);\n\t\t\n\t\tlogger.debug(\"Setting property {} as attribute {}\", property, attributeName);\n\t\t\n\t\tfinal List<String> values = new LinkedList<String>();\n\t\tvalues.add(value);\n\t\tportalRequest.setAttribute(attributeName, values);\n\t}","id":21362,"modified_method":"@Override\n\tpublic boolean setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow, String property, String value) {\n\t\tif (this.propertyToAttributeMappings.isEmpty() && this.nonNamespacedProperties.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfinal HttpServletRequest portalRequest = this.portalRequestUtils.getOriginalPortalRequest(portletRequest);\n\t\t\n\t\tfinal String attributeName = getAttributeName(portletWindow, property);\n\t\t\n\t\tlogger.debug(\"Setting property {} as attribute {}\", property, attributeName);\n\t\t\n\t\tfinal List<String> values = new LinkedList<String>();\n\t\tvalues.add(value);\n\t\tportalRequest.setAttribute(attributeName, values);\n\t\t\n\t\treturn true;\n\t}","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * Convert a request attribute name to a portlet property name\n\t */\n\tprivate String getPropertyName(final String windowIdStr, final String fullAttributeName) {\n\t\tfinal String attributeName;\n\t\tif (this.nonNamespacedProperties.contains(fullAttributeName)) {\n\t\t\tattributeName = fullAttributeName;\n\t\t}\n\t\telse if (fullAttributeName.startsWith(windowIdStr)) { \n\t\t\tattributeName = fullAttributeName.substring(windowIdStr.length());\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t\t\t\n\t\tfinal String mappedPropertyName = this.attributeToPropertyMappings.get(attributeName);\n\t\tif (mappedPropertyName == null) {\n\t\t\tlogger.warn(\"Attribute {} found that matches the portlet window ID but it is not listed in the propertyMappings or nonNamespacedProperties and will not be returned to the portlet\", attributeName);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn mappedPropertyName;\n\t}","id":21363,"modified_method":"protected <P extends Populator<String, String>> void convertValue(String name, Object value, P propertiesPopulator) {\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (value instanceof Collection) {\n\t\t\tfor (final Object obj : (Collection<?>)value) {\n\t\t\t    propertiesPopulator.put(name, String.valueOf(obj));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (value.getClass().isArray()) {\n\t\t    final int len = Array.getLength(value);\n\t\t    for (int i = 0; i < len; i++) {\n\t\t        propertiesPopulator.put(name, String.valueOf(Array.get(value, i)));\n\t\t    }\n            return;\n        }\n\t\t\n\t\tpropertiesPopulator.put(name, String.valueOf(value));\n\t}","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void addResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            propertiesManager.addResponseProperty(request, portletWindow, property, value);\n        }\n    }","id":21364,"modified_method":"@Override\n    public boolean addResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow,\n            String property, String value) {\n\n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            if (propertiesManager.addResponseProperty(portletRequest, portletWindow, property, value)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void setResponseProperty(HttpServletRequest request, IPortletWindow portletWindow, String property, String value) {\n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            propertiesManager.setResponseProperty(request, portletWindow, property, value);\n        }\n    }","id":21365,"modified_method":"@Override\n    public boolean setResponseProperty(HttpServletRequest portletRequest, IPortletWindow portletWindow,\n            String property, String value) {\n\n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            if (propertiesManager.setResponseProperty(portletRequest, portletWindow, property, value)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public Map<String, String[]> getRequestProperties(HttpServletRequest request, IPortletWindow portletWindow) {\n        final Map<String, String[]> properties = new ParameterMap();\n        \n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            final Map<String, String[]> newProperties = propertiesManager.getRequestProperties(request, portletWindow);\n            \n            if (this.logger.isDebugEnabled()) {\n                this.logger.debug(\"Retrieved properties '\" + newProperties + \"' from manager: \" + propertiesManager);\n            }\n            \n            properties.putAll(newProperties);\n        }\n        \n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(\"Returning properties '\" + properties + \"' for portlet \" +  portletWindow + \" and request \" + request);\n        }\n        \n        return properties;\n    }","id":21366,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n\n        for (final IRequestPropertiesManager propertiesManager : this.propertiesManagers) {\n            propertiesManager.populateRequestProperties(portletRequest, portletWindow, propertiesPopulator);\n        }\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * @param propertiesManagers the propertiesManagers to set\n     */\n\t@Autowired\n    public void setPropertiesManagers(List<IRequestPropertiesManager> propertiesManagers) {\n        this.propertiesManagers = propertiesManagers;\n    }","id":21367,"modified_method":"@Autowired\n    public void setPropertiesManagers(Collection<? extends IRequestPropertiesManager> propertiesManagers) {\n        this.propertiesManagers = new ArrayList<IRequestPropertiesManager>(propertiesManagers);\n        Collections.sort(this.propertiesManagers, OrderComparator.INSTANCE);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void testAddProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final IRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        final IRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(Arrays.asList(new IRequestPropertiesManager[] { delegateManager1, delegateManager2 }));\n        \n        \n        \n        this.requestPropertiesManagerBroker.addResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        final Map<String, String[]> expected1 = Collections.singletonMap(\"prop.A\", new String[] { \"prop.A.1\" });\n        \n        Map<String, String[]> properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties);\n        \n        Map<String, String[]> properties1 = delegateManager1.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties1);\n        \n        Map<String, String[]> properties2 = delegateManager2.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties2);\n        \n        \n        \n        this.requestPropertiesManagerBroker.addResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        final Map<String, String[]> expected2 = Collections.singletonMap(\"prop.A\", new String[] { \"prop.A.1\", \"prop.A.2\" });\n        \n        properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties);\n        \n        properties1 = delegateManager1.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties1);\n        \n        properties2 = delegateManager2.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties2);\n    }","id":21368,"modified_method":"public void testAddProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final MockRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        delegateManager1.setOrder(Ordered.HIGHEST_PRECEDENCE);\n        final MockRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        delegateManager2.setOrder(Ordered.LOWEST_PRECEDENCE);\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(ImmutableList.of(delegateManager1, delegateManager2));\n        \n        \n        \n        this.requestPropertiesManagerBroker.addResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        final Map<String, List<String>> expected1 = Collections.singletonMap(\"prop.A\", Collections.singletonList(\"prop.A.1\"));\n        \n        MultivaluedMapPopulator<String, String> multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected1, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager1.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected1, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager2.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(Collections.EMPTY_MAP, multivaluedMapPopulator.getMap());\n        \n        \n        \n        this.requestPropertiesManagerBroker.addResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        final Map<String, List<String>> expected2 = Collections.<String, List<String>>singletonMap(\"prop.A\", ImmutableList.of(\"prop.A.1\", \"prop.A.2\"));\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected2, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager1.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected2, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager2.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(Collections.EMPTY_MAP, multivaluedMapPopulator.getMap());\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void testGetProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final IRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        final IRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(Arrays.asList(new IRequestPropertiesManager[] { delegateManager1, delegateManager2 }));\n        \n        \n        \n        delegateManager1.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        delegateManager1.setResponseProperty(request, portletWindow, \"prop.B\", \"prop.B.1\");\n        \n        delegateManager2.setResponseProperty(request, portletWindow, \"prop.C\", \"prop.C.1\");\n        \n        Map<String, String[]> properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        \n        final Map<String, String[]> expected1 = new ParameterMap();\n        expected1.put(\"prop.A\", new String[] { \"prop.A.1\" });\n        expected1.put(\"prop.B\", new String[] { \"prop.B.1\" });\n        expected1.put(\"prop.C\", new String[] { \"prop.C.1\" });\n        validateProperties(expected1, properties);\n        \n        \n        \n        delegateManager2.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        \n        properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        \n        final Map<String, String[]> expected2 = new ParameterMap();\n        expected2.put(\"prop.A\", new String[] { \"prop.A.2\" });\n        expected2.put(\"prop.B\", new String[] { \"prop.B.1\" });\n        expected2.put(\"prop.C\", new String[] { \"prop.C.1\" });\n        validateProperties(expected2, properties);\n    }","id":21369,"modified_method":"public void testGetProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final MockRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        delegateManager1.setOrder(Ordered.HIGHEST_PRECEDENCE);\n        final MockRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        delegateManager2.setOrder(Ordered.LOWEST_PRECEDENCE);\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(ImmutableList.of(delegateManager1, delegateManager2));\n        \n        \n        \n        delegateManager1.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        delegateManager1.setResponseProperty(request, portletWindow, \"prop.B\", \"prop.B.1\");\n        \n        delegateManager2.setResponseProperty(request, portletWindow, \"prop.C\", \"prop.C.1\");\n        \n        MultivaluedMapPopulator<String, String> multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        \n        final Map<String, List<String>> expected1 = ImmutableMap.<String, List<String>>of(\n                \"prop.A\", ImmutableList.of(\"prop.A.1\"),\n                \"prop.B\", ImmutableList.of(\"prop.B.1\"),\n                \"prop.C\", ImmutableList.of(\"prop.C.1\"));\n        \n        assertEquals(expected1, multivaluedMapPopulator.getMap());\n        \n        \n        \n        delegateManager2.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        \n        final Map<String, List<String>> expected2 = ImmutableMap.<String, List<String>>of(\n                \"prop.A\", ImmutableList.of(\"prop.A.1\", \"prop.A.2\"),\n                \"prop.B\", ImmutableList.of(\"prop.B.1\"),\n                \"prop.C\", ImmutableList.of(\"prop.C.1\"));\n        \n        assertEquals(expected2, multivaluedMapPopulator.getMap());\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void testSetProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final IRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        final IRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(Arrays.asList(new IRequestPropertiesManager[] { delegateManager1, delegateManager2 }));\n        \n        \n        \n        this.requestPropertiesManagerBroker.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        final Map<String, String[]> expected1 = Collections.singletonMap(\"prop.A\", new String[] { \"prop.A.1\" });\n        \n        Map<String, String[]> properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties);\n        \n        Map<String, String[]> properties1 = delegateManager1.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties1);\n        \n        Map<String, String[]> properties2 = delegateManager2.getRequestProperties(request, portletWindow);\n        validateProperties(expected1, properties2);\n        \n        \n        \n        this.requestPropertiesManagerBroker.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        final Map<String, String[]> expected2 = Collections.singletonMap(\"prop.A\", new String[] { \"prop.A.2\" });\n        \n        properties = this.requestPropertiesManagerBroker.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties);\n        \n        properties1 = delegateManager1.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties1);\n        \n        properties2 = delegateManager2.getRequestProperties(request, portletWindow);\n        validateProperties(expected2, properties2);\n    }","id":21370,"modified_method":"public void testSetProperties() {\n        final MockHttpServletRequest request = new MockHttpServletRequest();\n        \n        final IPortletWindow portletWindow = EasyMock.createMock(IPortletWindow.class);\n        EasyMock.replay(portletWindow);\n        \n        final MockRequestPropertiesManager delegateManager1 = new MockRequestPropertiesManager();\n        delegateManager1.setOrder(Ordered.HIGHEST_PRECEDENCE);\n        final MockRequestPropertiesManager delegateManager2 = new MockRequestPropertiesManager();\n        delegateManager2.setOrder(Ordered.LOWEST_PRECEDENCE);\n        \n        this.requestPropertiesManagerBroker.setPropertiesManagers(ImmutableList.of(delegateManager1, delegateManager2));\n        \n        \n        \n        this.requestPropertiesManagerBroker.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.1\");\n        final Map<String, List<String>> expected1 = Collections.singletonMap(\"prop.A\", Collections.singletonList(\"prop.A.1\"));\n        \n        MultivaluedMapPopulator<String, String> multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected1, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager1.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected1, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager2.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(Collections.EMPTY_MAP, multivaluedMapPopulator.getMap());\n        \n        \n        \n        this.requestPropertiesManagerBroker.setResponseProperty(request, portletWindow, \"prop.A\", \"prop.A.2\");\n        final Map<String, List<String>> expected2 = Collections.<String, List<String>>singletonMap(\"prop.A\", ImmutableList.of(\"prop.A.2\"));\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        this.requestPropertiesManagerBroker.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected2, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager1.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(expected2, multivaluedMapPopulator.getMap());\n        \n        multivaluedMapPopulator = new MultivaluedMapPopulator<String, String>();\n        delegateManager2.populateRequestProperties(request, portletWindow, multivaluedMapPopulator);\n        assertEquals(Collections.EMPTY_MAP, multivaluedMapPopulator.getMap());\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public Map<String, String[]> getRequestProperties(\n            HttpServletRequest portletRequest, IPortletWindow portletWindow) {\n        \n        // get the current user profile\n        IUserInstance ui = userInstanceManager.getUserInstance(portletRequest);\n        UserPreferencesManager upm = (UserPreferencesManager) ui.getPreferencesManager();\n        IUserProfile profile = upm.getUserProfile();\n        \n        // get the theme for this profile\n        long themeId = profile.getThemeStylesheetId();\n        IStylesheetDescriptor theme = stylesheetDao.getStylesheetDescriptor(themeId);\n\n        // set the theme name as a portlet response property\n        return Collections.singletonMap(THEME_NAME_PROPERTY, new String[]{ theme.getName() });\n    }","id":21371,"modified_method":"@Override\n    public <P extends Populator<String, String>> void populateRequestProperties(HttpServletRequest portletRequest,\n            IPortletWindow portletWindow, P propertiesPopulator) {\n        \n        // get the current user profile\n        IUserInstance ui = userInstanceManager.getUserInstance(portletRequest);\n        IUserPreferencesManager upm = ui.getPreferencesManager();\n        IUserProfile profile = upm.getUserProfile();\n        \n        // get the theme for this profile\n        long themeId = profile.getThemeStylesheetId();\n        IStylesheetDescriptor theme = stylesheetDao.getStylesheetDescriptor(themeId);\n\n        // set the theme name as a portlet response property\n        final String themeName = theme.getName();\n        propertiesPopulator.put(IPortletRenderer.THEME_NAME_PROPERTY, themeName);\n        propertiesPopulator.put(THEME_NAME_PROPERTY, themeName);\n    }","commit_id":"ec4ac49ebb723349463504fdb723109575072772","url":"https://github.com/Jasig/uPortal"},{"original_method":"public void testTagger() throws IOException {\n    myAssert(\"This is a big house.\", \"This/DT is/VBZ a/DT big/JJ house/NN\");\n    //clearly a bug in the previous tagger: \"use\" is not \"preposition/subordinate conjunction\"\n    myAssert(\"Marketing do a lot of trouble.\", \"Marketing/NN do/NN a/DT lot/JJ of/IN trouble/NN\");\n    myAssert(\"Manager use his laptop every day.\", \"Manager/NN use/NN his/NNS laptop/NN every/DT day/NN\");\n    myAssert(\"This is a bigger house.\", \"This/DT is/VBZ a/DT bigger/JJR house/NN\");\n    myAssert(\"He doesn't believe me.\", \"He/PRP doesn/VBZ t/RB believe/VB me/PRP\");\n  }","id":21372,"modified_method":"public void testTagger() throws IOException {\n    myAssert(\"This is a big house.\", \"This/[this]DT|This/[this]PDT is/[be]VBZ a/[a]DT big/[big]JJ|big/[big]VB house/[house]NN|house/[house]VB\");\n    myAssert(\"Marketing do a lot of trouble.\", \"Marketing/[marketing]NN:U|Marketing/[market]VBG do/[do]VB a/[a]DT lot/[lot]JJ|lot/[lot]NN|lot/[lot]VB of/[of]IN trouble/[trouble]NN:UN|trouble/[trouble]VB\");\n    myAssert(\"Manager use his laptop every day.\", \"Manager/[manager]NN use/[use]NN|use/[use]VB his/[his]PRP$|his/[hi]NNS laptop/[laptop]NN every/[every]DT day/[day]NN\");\n    myAssert(\"This is a bigger house.\", \"This/[this]DT|This/[this]PDT is/[be]VBZ a/[a]DT bigger/[big]JJR house/[house]NN|house/[house]VB\");\n    myAssert(\"He doesn't believe me.\", \"He/[he]PRP doesn/[do]VBZ t/[t]JJ|t/[t]NN|t/[t]RB believe/[believe]VB me/[I]PRP\");\n    myAssert(\"It has become difficult.\", \"It/[it]PRP has/[have]VBZ become/[become]VB difficult/[difficult]JJ\"); \n  }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void myAssert(String input, String expected) throws IOException {\n    List tokens = tokenizer.tokenize(input);\n    List<String> noWhitespaceTokens = new ArrayList<String>();\n    // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n    for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n      String token = (String) iterator.next();\n      if (isWord(token)) {\n        noWhitespaceTokens.add(token);\n      }\n    }\n    List output = tagger.tag(noWhitespaceTokens);\n    StringBuffer outputStr = new StringBuffer();\n    for (Iterator iter = output.iterator(); iter.hasNext();) {\n      AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n      //FIXME: check for multiple readings\n      outputStr.append(token.getAnalyzedToken(0));\n      if (iter.hasNext())\n        outputStr.append(\" \");\n    }\n    assertEquals(expected, outputStr.toString());\n  }","id":21373,"modified_method":"private void myAssert(String input, String expected) throws IOException {\n    List tokens = tokenizer.tokenize(input);\n    List<String> noWhitespaceTokens = new ArrayList<String>();\n    // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n    for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n      String token = (String) iterator.next();\n      if (isWord(token)) {\n        noWhitespaceTokens.add(token);\n      }\n    }\n    List output = tagger.tag(noWhitespaceTokens);\n    StringBuffer outputStr = new StringBuffer();\n    for (Iterator iter = output.iterator(); iter.hasNext();) {\n      AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n      int readingsNumber = token.getReadingsLength();\n      for (int j = 0; j < readingsNumber; j++) {\n      outputStr.append(token.getAnalyzedToken(j).getToken());\n      outputStr.append(\"/[\");\n      outputStr.append(token.getAnalyzedToken(j).getLemma());\n      outputStr.append(\"]\");\n      outputStr.append(token.getAnalyzedToken(j).getPOSTag());\n      if (readingsNumber > 1 && j < readingsNumber - 1) {\n      outputStr.append(\"|\");\n      }\n      }\n      if (iter.hasNext())\n        outputStr.append(\" \");\n    }\n    assertEquals(expected, outputStr.toString());\n  }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          //FIXME: check for multiple readings\n          outputStr.append(token.getAnalyzedToken(0));\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","id":21374,"modified_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          int readingsNumber = token.getReadingsLength();\n          for (int j = 0; j < readingsNumber; j++) {\n          outputStr.append(token.getAnalyzedToken(j).getToken());\n          outputStr.append(\"/[\");\n          outputStr.append(token.getAnalyzedToken(j).getLemma());\n          outputStr.append(\"]\");\n          outputStr.append(token.getAnalyzedToken(j).getPOSTag());\n          if (readingsNumber > 1 && j < readingsNumber - 1) {\n          outputStr.append(\"|\");\n          }\n          }\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void testTagger() throws IOException {\n        myAssert(\"C'est la vie.\", \"C/N m sp est/V etre ind pres 3 s la/D f s vie/N f s\");\n        myAssert(\"Je ne parle pas français.\", \"Je/R pers suj 1 s ne/A parle/V sub pres 1 s pas/A français/J m p\");\n        myAssert(\"blablabla\",\"blablabla/N m sp\");\n        myAssert(\"non_existing_word\",\"non_existing_word/null\");\n      }","id":21375,"modified_method":"public void testTagger() throws IOException {\n        myAssert(\"C'est la vie.\", \"C/[c]N m sp|C/[c]R dem e s est/[être]V etre ind pres 3 s|est/[est]J e p|est/[est]J e s|est/[est]N m s la/[le]D f s|la/[la]N m sp|la/[la]R pers obj 3 f s vie/[vie]N f s\");\n        myAssert(\"Je ne parle pas français.\", \"Je/[je]R pers suj 1 s ne/[ne]A parle/[parler]V sub pres 1 s|parle/[parler]V sub pres 3 s|parle/[parler]V imp pres 2 s|parle/[parler]V ind pres 1 s|parle/[parler]V ind pres 3 s pas/[pas]A|pas/[pas]N m sp français/[français]J m p|français/[français]J m s|français/[français]N m p|français/[français]N m s\");\n        myAssert(\"blablabla\",\"blablabla/[blablabla]N m sp\");\n        myAssert(\"non_existing_word\",\"non_existing_word/[null]null\");\n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void testTagger() throws IOException {\n        myAssert(\"Non c'è linguaggio senza inganno.\", \"Non/ADV c/null è/VER:ind+pres+3+s linguaggio/NOUN-M:s senza/CON inganno/NOUN-M:s\");\n        myAssert(\"Amo quelli che desiderano l'impossibile.\", \"Amo/VER:ind+pres+1+s quelli/DET-DEMO:m+p che/CON desiderano/VER:ind+pres+3+p l/null impossibile/ADJ:pos+f+s\");\n        myAssert(\"blablabla\",\"blablabla/null\");        \n      }","id":21376,"modified_method":"public void testTagger() throws IOException {\n        myAssert(\"Non c'è linguaggio senza inganno.\", \"Non/[non]ADV c/[null]null è/[essere]VER:ind+pres+3+s|è/[essere]AUX:ind+pres+3+s linguaggio/[linguaggio]NOUN-M:s senza/[senza]CON|senza/[senza]PRE inganno/[inganno]NOUN-M:s|inganno/[ingannare]VER:ind+pres+1+s\");\n        myAssert(\"Amo quelli che desiderano l'impossibile.\", \"Amo/[amare]VER:ind+pres+1+s quelli/[quello]DET-DEMO:m+p|quelli/[quelli]PRO-DEMO-M-P che/[che]CON|che/[che]DET-WH:m+p|che/[che]DET-WH:m+s|che/[che]DET-WH:f+p|che/[che]DET-WH:f+s|che/[che]WH-CHE desiderano/[desiderare]VER:ind+pres+3+p l/[null]null impossibile/[impossibile]ADJ:pos+f+s|impossibile/[impossibile]ADJ:pos+m+s\");\n        myAssert(\"blablabla\",\"blablabla/[null]null\");        \n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          //FIXME: check for multiple readings\n          outputStr.append(token.getAnalyzedToken(0));\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","id":21377,"modified_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          int readingsNumber = token.getReadingsLength();\n          for (int j = 0; j < readingsNumber; j++) {\n          outputStr.append(token.getAnalyzedToken(j).getToken());\n          outputStr.append(\"/[\");\n          outputStr.append(token.getAnalyzedToken(j).getLemma());\n          outputStr.append(\"]\");\n          outputStr.append(token.getAnalyzedToken(j).getPOSTag());\n          if (readingsNumber > 1 && j < readingsNumber - 1) {\n          outputStr.append(\"|\");\n          }\n          }\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void testTagger() throws IOException {\n\t    myAssert(\"To jest duży dom.\", \"To/conj jest/verb:fin:sg:ter:imperf duży/adj:sg:nom:m:pneg dom/subst:sg:nom.acc:m3\");\n\t    myAssert(\"Krowa pasie się na pastwisku.\", \"Krowa/subst:sg:nom:f pasie/subst:sg:loc.voc:m3 się/qub na/prep:acc.loc pastwisku/subst:sg:dat:n+subst:sg:loc:n\");\n\t    myAssert(\"blablabla\",\"blablabla/null\");\n\t  }","id":21378,"modified_method":"public void testTagger() throws IOException {\n\t    myAssert(\"To jest duży dom.\", \"To/[to]conj|To/[ten]adj:sg:nom.acc.voc:n1.n2 jest/[być]verb:fin:sg:ter:imperf duży/[duży]adj:sg:nom:m:pneg dom/[dom]subst:sg:nom.acc:m3\");\n        myAssert(\"Krowa pasie się na pastwisku.\", \"Krowa/[krowa]subst:sg:nom:f pasie/[pas]subst:sg:loc.voc:m3|pasie/[paść]verb:irreg się/[siebie]qub na/[na]prep:acc.loc pastwisku/[pastwisko]subst:sg:dat:n+subst:sg:loc:n\");\n        myAssert(\"blablabla\",\"blablabla/[null]null\");\n\t  }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void myAssert(String input, String expected) throws IOException {\n\t    List tokens = tokenizer.tokenize(input);\n\t    List<String> noWhitespaceTokens = new ArrayList<String>();\n\t    // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n\t    for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n\t      String token = (String) iterator.next();\n\t      if (isWord(token)) {\n\t        noWhitespaceTokens.add(token);\n\t      }\n\t    }\n\t    List output = tagger.tag(noWhitespaceTokens);\n\t    StringBuffer outputStr = new StringBuffer();\n\t    for (Iterator iter = output.iterator(); iter.hasNext();) {\n\t      AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n\t      //FIXME: check for multiple readings\n\t      outputStr.append(token.getAnalyzedToken(0));\n\t      if (iter.hasNext())\n\t        outputStr.append(\" \");\n\t    }\n\t    assertEquals(expected, outputStr.toString());\n\t  }","id":21379,"modified_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          int readingsNumber = token.getReadingsLength();\n          for (int j = 0; j < readingsNumber; j++) {\n          outputStr.append(token.getAnalyzedToken(j).getToken());\n          outputStr.append(\"/[\");\n          outputStr.append(token.getAnalyzedToken(j).getLemma());\n          outputStr.append(\"]\");\n          outputStr.append(token.getAnalyzedToken(j).getPOSTag());\n          if (readingsNumber > 1 && j < readingsNumber - 1) {\n          outputStr.append(\"|\");\n          }\n          }\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          //FIXME: check for multiple readings\n          outputStr.append(token.getAnalyzedToken(0));\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","id":21380,"modified_method":"private void myAssert(String input, String expected) throws IOException {\n        List tokens = tokenizer.tokenize(input);\n        List<String> noWhitespaceTokens = new ArrayList<String>();\n        // whitespace confuses tagger, so give it the tokens but no whitespace tokens:\n        for (Iterator iterator = tokens.iterator(); iterator.hasNext();) {\n          String token = (String) iterator.next();\n          if (isWord(token)) {\n            noWhitespaceTokens.add(token);\n          }\n        }\n        List output = tagger.tag(noWhitespaceTokens);\n        StringBuffer outputStr = new StringBuffer();\n        for (Iterator iter = output.iterator(); iter.hasNext();) {\n          AnalyzedTokenReadings token = (AnalyzedTokenReadings) iter.next();\n          int readingsNumber = token.getReadingsLength();\n          for (int j = 0; j < readingsNumber; j++) {\n          outputStr.append(token.getAnalyzedToken(j).getToken());\n          outputStr.append(\"/[\");\n          outputStr.append(token.getAnalyzedToken(j).getLemma());\n          outputStr.append(\"]\");\n          outputStr.append(token.getAnalyzedToken(j).getPOSTag());\n          if (readingsNumber > 1 && j < readingsNumber - 1) {\n          outputStr.append(\"|\");\n          }\n          }\n          if (iter.hasNext())\n            outputStr.append(\" \");\n        }\n        assertEquals(expected, outputStr.toString());\n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void testTagger() throws IOException {\n        myAssert(\"Soy un hombre muy honrado.\", \"Soy/VSIP1S0 un/DI0MS0 hombre/I muy/RG honrado/VMP00SM\");\n        myAssert(\"Tengo que ir a mi casa.\", \"Tengo/VMIP1S0 que/PR0CN000 ir/VMN0000 a/NCFS000 mi/DP1CSS casa/NCFS000\");\n        myAssert(\"blablabla\",\"blablabla/null\");\n        myAssert(\"non_existing_word\",\"non_existing_word/null\");\n      }","id":21381,"modified_method":"public void testTagger() throws IOException {\n        myAssert(\"Soy un hombre muy honrado.\", \"Soy/[ser]VSIP1S0 un/[uno]DI0MS0|un/[1]Z hombre/[hombre]I|hombre/[hombre]NCMS000 muy/[mucho]RG honrado/[honrar]VMP00SM\");\n        myAssert(\"Tengo que ir a mi casa.\", \"Tengo/[tener]VMIP1S0 que/[que]PR0CN000|que/[que]CS ir/[ir]VMN0000 a/[a]NCFS000|a/[a]SPS00 mi/[mi]DP1CSS casa/[casa]NCFS000|casa/[casar]VMIP3S0|casa/[casar]VMM02S0\");\n        myAssert(\"blablabla\",\"blablabla/[null]null\");        \n      }","commit_id":"0884787b5d95f9d09da23fe2d3be9a67ef37cf7c","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void initialize() {\n        assert bindingContext == null : \"Attempt to initialize twice\";\n\n        final Set<JetFile> jetBuiltInsFiles = getJetBuiltInsFiles();\n\n        final Runnable initializeRunnable = new Runnable() {\n            @Override\n            public void run() {\n                GlobalContextImpl globalContext = ContextPackage.GlobalContext();\n                TopDownAnalysisParameters topDownAnalysisParameters = new TopDownAnalysisParameters(\n                        globalContext.getStorageManager(),\n                        globalContext.getExceptionTracker(),\n                        Predicates.<PsiFile>alwaysFalse(), true, false, Collections.<AnalyzerScriptParameter>emptyList());\n                ModuleDescriptorImpl module = new ModuleDescriptorImpl(\n                        Name.special(\"<fake_module>\"), Collections.<ImportPath>emptyList(), PlatformToKotlinClassMap.EMPTY);\n                InjectorForTopDownAnalyzerBasic injector = new InjectorForTopDownAnalyzerBasic(\n                        myProject, topDownAnalysisParameters, new BindingTraceContext(), module, PlatformToKotlinClassMap.EMPTY);\n\n                TopDownAnalyzer analyzer = injector.getTopDownAnalyzer();\n                analyzer.analyzeFiles(jetBuiltInsFiles, Collections.<AnalyzerScriptParameter>emptyList());\n\n                builtinsPackageFragment = analyzer.getPackageFragmentProvider().getOrCreateFragment(KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME);\n                builtInsSources = Sets.newHashSet(jetBuiltInsFiles);\n                bindingContext = injector.getBindingTrace().getBindingContext();\n            }\n        };\n\n        if (ApplicationManager.getApplication().isUnitTestMode()) {\n            initializeRunnable.run();\n        }\n        else {\n            ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n                @Override\n                public void run() {\n                    ApplicationManager.getApplication().runReadAction(initializeRunnable);\n                }\n            });\n        }\n\n    }","id":21382,"modified_method":"private void initialize() {\n        assert bindingContext == null : \"Attempt to initialize twice\";\n\n        final Set<JetFile> jetBuiltInsFiles = getJetBuiltInsFiles();\n\n        final Runnable initializeRunnable = new Runnable() {\n            @Override\n            public void run() {\n                GlobalContextImpl globalContext = ContextPackage.GlobalContext();\n                TopDownAnalysisParameters topDownAnalysisParameters = new TopDownAnalysisParameters(\n                        globalContext.getStorageManager(),\n                        globalContext.getExceptionTracker(),\n                        Predicates.<PsiFile>alwaysFalse(), true, false, Collections.<AnalyzerScriptParameter>emptyList());\n                ModuleDescriptorImpl module = new ModuleDescriptorImpl(\n                        Name.special(\"<fake_module>\"), Collections.<ImportPath>emptyList(), PlatformToKotlinClassMap.EMPTY);\n                BindingTraceContext trace = new BindingTraceContext();\n                InjectorForTopDownAnalyzerBasic injector = new InjectorForTopDownAnalyzerBasic(\n                        myProject, topDownAnalysisParameters, trace, module, PlatformToKotlinClassMap.EMPTY);\n\n                TopDownAnalyzer analyzer = injector.getTopDownAnalyzer();\n                analyzer.analyzeFiles(jetBuiltInsFiles, Collections.<AnalyzerScriptParameter>emptyList());\n\n                builtinsPackageFragment = analyzer.getPackageFragmentProvider().getOrCreateFragment(KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME);\n                builtInsSources = Sets.newHashSet(jetBuiltInsFiles);\n                bindingContext = trace.getBindingContext();\n            }\n        };\n\n        if (ApplicationManager.getApplication().isUnitTestMode()) {\n            initializeRunnable.run();\n        }\n        else {\n            ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n                @Override\n                public void run() {\n                    ApplicationManager.getApplication().runReadAction(initializeRunnable);\n                }\n            });\n        }\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForBodyResolve(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull BodiesResolveContext bodiesResolveContext,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.bodyResolver = new BodyResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.bodiesResolveContext = bodiesResolveContext;\n        this.moduleDescriptor = moduleDescriptor;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getBodiesResolveContext(), platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(bodiesResolveContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n    }","id":21383,"modified_method":"public InjectorForBodyResolve(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull BodiesResolveContext bodiesResolveContext,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.bodiesResolveContext = bodiesResolveContext;\n        this.moduleDescriptor = moduleDescriptor;\n        this.bodyResolver = new BodyResolver();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(bodiesResolveContext, platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(bodiesResolveContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForJavaDescriptorResolver(\n        @NotNull Project project,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.bindingTrace = bindingTrace;\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.storageManager = globalContext.getStorageManager();\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.traceBasedJavaResolverCache = new TraceBasedJavaResolverCache();\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, getJavaClassFinder(), virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, traceBasedJavaResolverCache);\n        this.module = org.jetbrains.jet.lang.resolve.java.AnalyzerFacadeForJVM.createJavaModule(\"<fake-jdr-module>\");\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, getModule());\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, getModule());\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer(storageManager);\n\n        this.javaClassFinder.setProject(project);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        traceBasedJavaResolverCache.setTrace(bindingTrace);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);\n        deserializedDescriptorResolver.setJavaDescriptorResolver(javaDescriptorResolver);\n        deserializedDescriptorResolver.setJavaPackageFragmentProvider(lazyJavaPackageFragmentProvider);\n        deserializedDescriptorResolver.setStorageManager(storageManager);\n\n        annotationDescriptorDeserializer.setErrorReporter(traceBasedErrorReporter);\n        annotationDescriptorDeserializer.setJavaDescriptorResolver(javaDescriptorResolver);\n        annotationDescriptorDeserializer.setKotlinClassFinder(virtualFileFinder);\n\n        javaClassFinder.initialize();\n\n    }","id":21384,"modified_method":"public InjectorForJavaDescriptorResolver(\n        @NotNull Project project,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.bindingTrace = bindingTrace;\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.module = org.jetbrains.jet.lang.resolve.java.AnalyzerFacadeForJVM.createJavaModule(\"<fake-jdr-module>\");\n        this.storageManager = globalContext.getStorageManager();\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.traceBasedJavaResolverCache = new TraceBasedJavaResolverCache();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, getJavaClassFinder(), virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, traceBasedJavaResolverCache);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, getModule());\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, getModule());\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer(storageManager);\n\n        this.javaClassFinder.setProject(project);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        traceBasedJavaResolverCache.setTrace(bindingTrace);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);\n        deserializedDescriptorResolver.setJavaDescriptorResolver(javaDescriptorResolver);\n        deserializedDescriptorResolver.setJavaPackageFragmentProvider(lazyJavaPackageFragmentProvider);\n        deserializedDescriptorResolver.setStorageManager(storageManager);\n\n        annotationDescriptorDeserializer.setErrorReporter(traceBasedErrorReporter);\n        annotationDescriptorDeserializer.setJavaDescriptorResolver(javaDescriptorResolver);\n        annotationDescriptorDeserializer.setKotlinClassFinder(virtualFileFinder);\n\n        javaClassFinder.initialize();\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForLazyResolve(\n        @NotNull Project project,\n        @NotNull GlobalContextImpl globalContext,\n        @NotNull ModuleDescriptorImpl moduleDescriptor,\n        @NotNull DeclarationProviderFactory declarationProviderFactory,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.moduleDescriptor = moduleDescriptor;\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.bindingTrace = bindingTrace;\n        this.resolveSession = new ResolveSession(project, globalContext, moduleDescriptor, declarationProviderFactory, bindingTrace);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.storageManager = resolveSession.getStorageManager();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n    }","id":21385,"modified_method":"public InjectorForLazyResolve(\n        @NotNull Project project,\n        @NotNull GlobalContextImpl globalContext,\n        @NotNull ModuleDescriptorImpl moduleDescriptor,\n        @NotNull DeclarationProviderFactory declarationProviderFactory,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.moduleDescriptor = moduleDescriptor;\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.bindingTrace = bindingTrace;\n        this.resolveSession = new ResolveSession(project, globalContext, moduleDescriptor, declarationProviderFactory, bindingTrace);\n        this.storageManager = resolveSession.getStorageManager();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForMacros(\n        @NotNull Project project,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.storageManager = globalContext.getStorageManager();\n        this.project = project;\n        this.moduleDescriptor = moduleDescriptor;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n\n        this.expressionTypingServices.setAnnotationResolver(annotationResolver);\n        this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        this.expressionTypingServices.setCallResolver(callResolver);\n        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        this.expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        this.expressionTypingServices.setProject(project);\n        this.expressionTypingServices.setTypeResolver(typeResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n    }","id":21386,"modified_method":"public InjectorForMacros(\n        @NotNull Project project,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.project = project;\n        this.moduleDescriptor = moduleDescriptor;\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.storageManager = globalContext.getStorageManager();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n\n        this.expressionTypingServices.setAnnotationResolver(annotationResolver);\n        this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        this.expressionTypingServices.setCallResolver(callResolver);\n        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        this.expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        this.expressionTypingServices.setProject(project);\n        this.expressionTypingServices.setTypeResolver(typeResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTests(\n        @NotNull Project project,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.descriptorResolver = new DescriptorResolver();\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.typeResolver = new TypeResolver();\n        this.callResolver = new CallResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.storageManager = globalContext.getStorageManager();\n        this.kotlinBuiltIns = KotlinBuiltIns.getInstance();\n        this.project = project;\n        this.moduleDescriptor = moduleDescriptor;\n        this.annotationResolver = new AnnotationResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.candidateResolver = new CandidateResolver();\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setStorageManager(storageManager);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        this.expressionTypingServices.setAnnotationResolver(annotationResolver);\n        this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        this.expressionTypingServices.setCallResolver(callResolver);\n        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        this.expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        this.expressionTypingServices.setProject(project);\n        this.expressionTypingServices.setTypeResolver(typeResolver);\n\n        this.typeResolver.setAnnotationResolver(annotationResolver);\n        this.typeResolver.setModuleDescriptor(moduleDescriptor);\n        this.typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        this.callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        this.callResolver.setCandidateResolver(candidateResolver);\n        this.callResolver.setExpressionTypingServices(expressionTypingServices);\n        this.callResolver.setTypeResolver(typeResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n    }","id":21387,"modified_method":"public InjectorForTests(\n        @NotNull Project project,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.project = project;\n        this.moduleDescriptor = moduleDescriptor;\n        this.descriptorResolver = new DescriptorResolver();\n        this.globalContext = org.jetbrains.jet.context.ContextPackage.GlobalContext();\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.expressionTypingServices = new ExpressionTypingServices(globalContext, platformToKotlinClassMap);\n        this.typeResolver = new TypeResolver();\n        this.storageManager = globalContext.getStorageManager();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setStorageManager(storageManager);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        this.expressionTypingServices.setAnnotationResolver(annotationResolver);\n        this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        this.expressionTypingServices.setCallResolver(callResolver);\n        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        this.expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        this.expressionTypingServices.setProject(project);\n        this.expressionTypingServices.setTypeResolver(typeResolver);\n\n        this.typeResolver.setAnnotationResolver(annotationResolver);\n        this.typeResolver.setModuleDescriptor(moduleDescriptor);\n        this.typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerBasic(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor,\n        @NotNull PlatformToKotlinClassMap platformToKotlinClassMap\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.dependencyClassByQualifiedNameResolverDummy = new DependencyClassByQualifiedNameResolverDummyImpl();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.platformToKotlinClassMap = platformToKotlinClassMap;\n        this.declarationResolver = new DeclarationResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.controlFlowAnalyzer.setTrace(bindingTrace);\n\n        this.declarationsChecker.setTrace(bindingTrace);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setStorageManager(storageManager);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(dependencyClassByQualifiedNameResolverDummy);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n    }","id":21388,"modified_method":"public InjectorForTopDownAnalyzerBasic(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor,\n        @NotNull PlatformToKotlinClassMap platformToKotlinClassMap\n    ) {\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.platformToKotlinClassMap = platformToKotlinClassMap;\n        this.dependencyClassByQualifiedNameResolverDummy = new DependencyClassByQualifiedNameResolverDummyImpl();\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setContext(topDownAnalysisContext);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(dependencyClassByQualifiedNameResolverDummy);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.dependencyClassByQualifiedNameResolverDummy = new DependencyClassByQualifiedNameResolverDummyImpl();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.platformToKotlinClassMap = org.jetbrains.jet.lang.PlatformToKotlinClassMap.EMPTY;\n        this.declarationResolver = new DeclarationResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.controlFlowAnalyzer.setTrace(bindingTrace);\n\n        this.declarationsChecker.setTrace(bindingTrace);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setStorageManager(storageManager);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(dependencyClassByQualifiedNameResolverDummy);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n    }","id":21389,"modified_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.dependencyClassByQualifiedNameResolverDummy = new DependencyClassByQualifiedNameResolverDummyImpl();\n        this.platformToKotlinClassMap = org.jetbrains.jet.lang.PlatformToKotlinClassMap.EMPTY;\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), platformToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setContext(topDownAnalysisContext);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(dependencyClassByQualifiedNameResolverDummy);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.traceBasedJavaResolverCache = new TraceBasedJavaResolverCache();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, traceBasedJavaResolverCache);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, getModuleDescriptor());\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, getModuleDescriptor());\n        this.javaToKotlinClassMap = org.jetbrains.jet.lang.resolve.java.mapping.JavaToKotlinClassMap.getInstance();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.declarationResolver = new DeclarationResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), javaToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer(storageManager);\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.controlFlowAnalyzer.setTrace(bindingTrace);\n\n        this.declarationsChecker.setTrace(bindingTrace);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setStorageManager(storageManager);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        javaClassFinder.setProject(project);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        traceBasedJavaResolverCache.setTrace(bindingTrace);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);\n        deserializedDescriptorResolver.setJavaDescriptorResolver(javaDescriptorResolver);\n        deserializedDescriptorResolver.setJavaPackageFragmentProvider(lazyJavaPackageFragmentProvider);\n        deserializedDescriptorResolver.setStorageManager(storageManager);\n\n        annotationDescriptorDeserializer.setErrorReporter(traceBasedErrorReporter);\n        annotationDescriptorDeserializer.setJavaDescriptorResolver(javaDescriptorResolver);\n        annotationDescriptorDeserializer.setKotlinClassFinder(virtualFileFinder);\n\n        javaClassFinder.initialize();\n\n    }","id":21390,"modified_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.storageManager = topDownAnalysisParameters.getStorageManager();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.traceBasedJavaResolverCache = new TraceBasedJavaResolverCache();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, traceBasedJavaResolverCache);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, getModuleDescriptor());\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, getModuleDescriptor());\n        this.javaToKotlinClassMap = org.jetbrains.jet.lang.resolve.java.mapping.JavaToKotlinClassMap.getInstance();\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices(getTopDownAnalysisContext(), javaToKotlinClassMap);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer(storageManager);\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        javaClassFinder.setProject(project);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        traceBasedJavaResolverCache.setTrace(bindingTrace);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setContext(topDownAnalysisContext);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);\n        deserializedDescriptorResolver.setJavaDescriptorResolver(javaDescriptorResolver);\n        deserializedDescriptorResolver.setJavaPackageFragmentProvider(lazyJavaPackageFragmentProvider);\n        deserializedDescriptorResolver.setStorageManager(storageManager);\n\n        annotationDescriptorDeserializer.setErrorReporter(traceBasedErrorReporter);\n        annotationDescriptorDeserializer.setJavaDescriptorResolver(javaDescriptorResolver);\n        annotationDescriptorDeserializer.setKotlinClassFinder(virtualFileFinder);\n\n        javaClassFinder.initialize();\n\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void setUp() throws Exception {\n            InjectorForTests injector = new InjectorForTests(getProject(), root);\n            KotlinBuiltIns builtIns = injector.getKotlinBuiltIns();\n            descriptorResolver = injector.getDescriptorResolver();\n            scope = createScope(builtIns.getBuiltInsPackageScope());\n        }","id":21391,"modified_method":"public void setUp() throws Exception {\n            InjectorForTests injector = new InjectorForTests(getProject(), root);\n            descriptorResolver = injector.getDescriptorResolver();\n            scope = createScope(KotlinBuiltIns.getInstance().getBuiltInsPackageScope());\n        }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    protected void tearDown() throws Exception {\n        builtIns = null;\n        descriptorResolver = null;\n        super.tearDown();\n    }","id":21392,"modified_method":"@Override\n    protected void tearDown() throws Exception {\n        descriptorResolver = null;\n        super.tearDown();\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private FunctionDescriptor makeFunction(String funDecl) {\n        JetNamedFunction function = JetPsiFactory.createFunction(getProject(), funDecl);\n        return descriptorResolver.resolveFunctionDescriptor(root, builtIns.getBuiltInsPackageScope(), function,\n                                                            JetTestUtils.DUMMY_TRACE, DataFlowInfo.EMPTY);\n    }","id":21393,"modified_method":"private FunctionDescriptor makeFunction(String funDecl) {\n        JetNamedFunction function = JetPsiFactory.createFunction(getProject(), funDecl);\n        return descriptorResolver.resolveFunctionDescriptor(root, KotlinBuiltIns.getInstance().getBuiltInsPackageScope(), function,\n                                                            JetTestUtils.DUMMY_TRACE, DataFlowInfo.EMPTY);\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    public void setUp() throws Exception {\n        super.setUp();\n        InjectorForTests injector = new InjectorForTests(getProject(), root);\n        builtIns = injector.getKotlinBuiltIns();\n        descriptorResolver = injector.getDescriptorResolver();\n    }","id":21394,"modified_method":"@Override\n    public void setUp() throws Exception {\n        super.setUp();\n        InjectorForTests injector = new InjectorForTests(getProject(), root);\n        descriptorResolver = injector.getDescriptorResolver();\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    public void setUp() throws Exception {\n        super.setUp();\n        InjectorForTests injector = new InjectorForTests(getProject(), root);\n        builtIns = injector.getKotlinBuiltIns();\n        descriptorResolver = injector.getDescriptorResolver();\n    }","id":21395,"modified_method":"@Override\n    public void setUp() throws Exception {\n        super.setUp();\n        InjectorForTests injector = new InjectorForTests(getProject(), root);\n        descriptorResolver = injector.getDescriptorResolver();\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private FunctionDescriptor makeFunction(String funDecl) {\n        JetNamedFunction function = JetPsiFactory.createFunction(getProject(), funDecl);\n        return descriptorResolver.resolveFunctionDescriptor(root, builtIns.getBuiltInsPackageScope(), function,\n                                                            JetTestUtils.DUMMY_TRACE, DataFlowInfo.EMPTY);\n    }","id":21396,"modified_method":"private FunctionDescriptor makeFunction(String funDecl) {\n        JetNamedFunction function = JetPsiFactory.createFunction(getProject(), funDecl);\n        return descriptorResolver.resolveFunctionDescriptor(root, KotlinBuiltIns.getInstance().getBuiltInsPackageScope(), function,\n                                                            JetTestUtils.DUMMY_TRACE, DataFlowInfo.EMPTY);\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    protected void tearDown() throws Exception {\n        builtIns = null;\n        descriptorResolver = null;\n        super.tearDown();\n    }","id":21397,"modified_method":"@Override\n    protected void tearDown() throws Exception {\n        descriptorResolver = null;\n        super.tearDown();\n    }","commit_id":"6c77ea91c5f22150a4ea611a4deaa0a22c8d9bda","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see StyleExecutable#matchesStyle(Element)\n     */\n    protected boolean matchesStyle(Element inputElement)\n    {\n        String fontWeight = inputElement.getComputedStyleProperty(Style.FONT_WEIGHT);\n        if (Style.FontWeight.BOLD.equalsIgnoreCase(fontWeight) \n            || Style.FontWeight.BOLDER.equalsIgnoreCase(fontWeight)) {\n            return true;\n        } else {\n            try {\n                int iFontWeight = Integer.parseInt(fontWeight);\n                return iFontWeight > 400;\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n    }","id":21398,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see StyleExecutable#matchesStyle(Element)\n     */\n    protected boolean matchesStyle(Element inputElement)\n    {\n        String fontWeight = inputElement.getComputedStyleProperty(getProperty().getJSName());\n        if (Style.FontWeight.BOLD.equalsIgnoreCase(fontWeight)\n            || Style.FontWeight.BOLDER.equalsIgnoreCase(fontWeight)) {\n            return true;\n        } else {\n            try {\n                int iFontWeight = Integer.parseInt(fontWeight);\n                return iFontWeight > 400;\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates a new executable of this type.\n     */\n    public BoldExecutable()\n    {\n        super(\"strong\", null, Style.FONT_WEIGHT, Style.FontWeight.BOLD, true, false);\n    }","id":21399,"modified_method":"/**\n     * Creates a new executable of this type.\n     */\n    public BoldExecutable()\n    {\n        super(Style.FONT_WEIGHT, Style.FontWeight.BOLD, \"strong\");\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @return the color code for the grid cell that was last clicked\n     */\n    public String getSelectedColor()\n    {\n        if (selectedCell != null) {\n            return selectedCell.getColor();\n        } else {\n            return null;\n        }\n    }","id":21400,"modified_method":"/**\n     * @return the color code for the grid cell that was last clicked, or {@code null} if no cell has been selected\n     */\n    public String getSelectedColor()\n    {\n        return selectedCell != null ? selectedCell.getColor() : null;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Sets the color that should appear as selected on the color palette.\n     * \n     * @param color the color to be selected\n     */\n    public void setColor(String color)\n    {\n        palette.setSelectedColor(convertRGBToHex(color).toUpperCase());\n    }","id":21401,"modified_method":"/**\n     * Sets the color that should appear as selected on the color palette.\n     * \n     * @param color the color to be selected\n     */\n    public void setColor(String color)\n    {\n        palette.setSelectedColor(convertToHex(color).toUpperCase());\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param rgbColor the RGB code of a color\n     * @return the hex code of the specified color\n     */\n    public static native String convertRGBToHex(String rgbColor)\n    /*-{\n        var re = new RegExp(\"rgb\\\\s*\\\\(\\\\s*([0-9]+).*,\\\\s*([0-9]+).*,\\\\s*([0-9]+).*\\\\)\", \"gi\");\n        \n        var rgb = rgbColor.replace(re, \"$1,$2,$3\").split(',');\n        if (rgb.length == 3) {\n            var r = parseInt(rgb[0]).toString(16);\n            var g = parseInt(rgb[1]).toString(16);\n            var b = parseInt(rgb[2]).toString(16);\n        \n            r = r.length == 1 ? '0' + r : r;\n            g = g.length == 1 ? '0' + g : g;\n            b = b.length == 1 ? '0' + b : b;\n        \n            return \"#\" + r + g + b;\n        }\n        \n        return rgbColor;\n    }-*/;","id":21402,"modified_method":"/**\n     * Converts the specified color code to hex code (as in {@code #F0F0EE}). The following input formats are supported:\n     * <ul>\n     * <li>IE's decimal integer format: 8242323<\/li>\n     * <li>RGB CSS expression: {@code rgb(255,125,75)}<\/li>\n     * <\/ul>\n     * .\n     * \n     * @param color a color code, in one of the supported formats\n     * @return the hex code of the specified color\n     */\n    public static String convertToHex(String color)\n    {\n        try {\n            // The color is a decimal integer (IE specific).\n            String hex = Integer.toHexString(Integer.parseInt(color));\n            char[] padding = new char[Math.max(0, 6 - hex.length())];\n            for (int i = 0; i < padding.length; i++) {\n                padding[i] = '0';\n            }\n            hex = String.valueOf(padding) + hex;\n            return '#' + hex.substring(4) + hex.substring(2, 4) + hex.substring(0, 2);\n        } catch (NumberFormatException e) {\n            String rgbRegExp = \"^rgb\\\\s*\\\\(\\\\s*([0-9]+).*,\\\\s*([0-9]+).*,\\\\s*([0-9]+).*\\\\)$\";\n            String[] rgb = color.toLowerCase().replaceAll(rgbRegExp, \"$1,$2,$3\").split(\",\");\n            if (rgb.length == 3) {\n                // The color is a RGB CSS expression.\n                StringBuffer hex = new StringBuffer(\"#\");\n                for (int i = 0; i < rgb.length; i++) {\n                    String channel = Integer.toHexString(Integer.parseInt(rgb[i]));\n                    if (channel.length() == 1) {\n                        channel = '0' + channel;\n                    }\n                    hex.append(channel);\n                }\n                return hex.toString();\n            } else {\n                // Either already hex color or unknown format. Leave it as it is.\n                return color;\n            }\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        if (getTextArea().getCommandManager().isSupported(Command.FORE_COLOR)) {\n            foreColor = new PushButton(Images.INSTANCE.foreColor().createImage(), this);\n            foreColor.setTitle(Strings.INSTANCE.foreColor());\n            toolBarExtension.addFeature(\"forecolor\", foreColor);\n\n            foreColorPicker = new ColorPicker();\n            foreColorPicker.addPopupListener(this);\n        }\n\n        if (getTextArea().getCommandManager().isSupported(Command.BACK_COLOR)) {\n            backColor = new PushButton(Images.INSTANCE.backColor().createImage(), this);\n            backColor.setTitle(Strings.INSTANCE.backColor());\n            toolBarExtension.addFeature(\"backcolor\", backColor);\n\n            backColorPicker = new ColorPicker();\n            backColorPicker.addPopupListener(this);\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addMouseListener(this);\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","id":21403,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        addFeature(\"forecolor\", Command.FORE_COLOR, Images.INSTANCE.foreColor().createImage(), Strings.INSTANCE\n            .foreColor());\n        addFeature(\"backcolor\", Command.BACK_COLOR, Images.INSTANCE.backColor().createImage(), Strings.INSTANCE\n            .backColor());\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == foreColor) {\n            onForeColor(true);\n        } else if (sender == backColor) {\n            onBackColor(true);\n        }\n    }","id":21404,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        Command command = buttons.get(sender);\n        if (command != null) {\n            currentCommand = command;\n\n            String color = getTextArea().getCommandManager().getStringValue(command);\n            getColorPicker().setColor(color);\n\n            int left = sender.getAbsoluteLeft();\n            int top = sender.getAbsoluteTop() + sender.getOffsetHeight();\n            getColorPicker().setPopupPosition(left, top);\n\n            getColorPicker().show();\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see PopupListener#onPopupClosed(PopupPanel, boolean)\n     */\n    public void onPopupClosed(PopupPanel sender, boolean autoHide)\n    {\n        if (sender == foreColorPicker && !autoHide) {\n            onForeColor(false);\n        } else if (sender == backColorPicker && !autoHide) {\n            onBackColor(false);\n        }\n    }","id":21405,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see PopupListener#onPopupClosed(PopupPanel, boolean)\n     */\n    public void onPopupClosed(PopupPanel sender, boolean autoHide)\n    {\n        if (sender == getColorPicker() && !autoHide) {\n            String color = getColorPicker().getColor();\n            if (color != null) {\n                getTextArea().getCommandManager().execute(currentCommand, color);\n            }\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (foreColor != null) {\n            foreColor.removeFromParent();\n            foreColor.removeClickListener(this);\n            foreColor = null;\n\n            foreColorPicker.hide();\n            foreColorPicker.removeFromParent();\n            foreColorPicker.removePopupListener(this);\n            foreColorPicker = null;\n        }\n\n        if (backColor != null) {\n            backColor.removeFromParent();\n            backColor.removeClickListener(this);\n            backColor = null;\n\n            backColorPicker.hide();\n            backColorPicker.removeFromParent();\n            backColorPicker.removePopupListener(this);\n            backColorPicker = null;\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeMouseListener(this);\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","id":21406,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (colorPicker != null) {\n            colorPicker.hide();\n            colorPicker.removeFromParent();\n            colorPicker.removePopupListener(this);\n            colorPicker = null;\n        }\n\n        for (PushButton button : buttons.keySet()) {\n            button.removeFromParent();\n            button.removeClickListener(this);\n        }\n        buttons.clear();\n\n        currentCommand = null;\n\n        toolBarExtension.clearFeatures();\n\n        super.destroy();\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (left != null) {\n            left.removeFromParent();\n            left.removeClickListener(this);\n            left = null;\n        }\n\n        if (center != null) {\n            center.removeFromParent();\n            center.removeClickListener(this);\n            center = null;\n        }\n\n        if (right != null) {\n            right.removeFromParent();\n            right.removeClickListener(this);\n            right = null;\n        }\n\n        if (full != null) {\n            full.removeFromParent();\n            full.removeClickListener(this);\n            full = null;\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeMouseListener(this);\n            getTextArea().removeKeyboardListener(this);\n            getTextArea().getCommandManager().removeCommandListener(this);\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","id":21407,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#destroy()\n     */\n    public void destroy()\n    {\n        for (ToggleButton button : buttons.keySet()) {\n            button.removeFromParent();\n            button.removeClickListener(this);\n        }\n        buttons.clear();\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeMouseListener(this);\n            getTextArea().removeKeyboardListener(this);\n            getTextArea().getCommandManager().removeCommandListener(this);\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        if (getTextArea().getCommandManager().isSupported(Command.JUSTIFY_LEFT)) {\n            left = new ToggleButton(Images.INSTANCE.justifyLeft().createImage(), this);\n            left.setTitle(Strings.INSTANCE.justifyLeft());\n            toolBarExtension.addFeature(\"justifyleft\", left);\n        }\n\n        if (getTextArea().getCommandManager().isSupported(Command.JUSTIFY_CENTER)) {\n            center = new ToggleButton(Images.INSTANCE.justifyCenter().createImage(), this);\n            center.setTitle(Strings.INSTANCE.justifyCenter());\n            toolBarExtension.addFeature(\"justifycenter\", center);\n        }\n\n        if (getTextArea().getCommandManager().isSupported(Command.JUSTIFY_RIGHT)) {\n            right = new ToggleButton(Images.INSTANCE.justifyRight().createImage(), this);\n            right.setTitle(Strings.INSTANCE.justifyRight());\n            toolBarExtension.addFeature(\"justifyright\", right);\n        }\n\n        if (getTextArea().getCommandManager().isSupported(Command.JUSTIFY_FULL)) {\n            full = new ToggleButton(Images.INSTANCE.justifyFull().createImage(), this);\n            full.setTitle(Strings.INSTANCE.justifyFull());\n            toolBarExtension.addFeature(\"justifyfull\", full);\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addMouseListener(this);\n            getTextArea().addKeyboardListener(this);\n            getTextArea().getCommandManager().addCommandListener(this);\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","id":21408,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        addFeature(\"justifyleft\", Command.JUSTIFY_LEFT, Images.INSTANCE.justifyLeft().createImage(), Strings.INSTANCE\n            .justifyLeft());\n        addFeature(\"justifycenter\", Command.JUSTIFY_CENTER, Images.INSTANCE.justifyCenter().createImage(),\n            Strings.INSTANCE.justifyCenter());\n        addFeature(\"justifyright\", Command.JUSTIFY_RIGHT, Images.INSTANCE.justifyRight().createImage(),\n            Strings.INSTANCE.justifyRight());\n        addFeature(\"justifyfull\", Command.JUSTIFY_FULL, Images.INSTANCE.justifyFull().createImage(), Strings.INSTANCE\n            .justifyFull());\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addMouseListener(this);\n            getTextArea().addKeyboardListener(this);\n            getTextArea().getCommandManager().addCommandListener(this);\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#update()\n     */\n    public void update()\n    {\n        if (left != null) {\n            left.setDown(getTextArea().getCommandManager().isExecuted(Command.JUSTIFY_LEFT));\n        }\n        if (center != null) {\n            center.setDown(getTextArea().getCommandManager().isExecuted(Command.JUSTIFY_CENTER));\n        }\n        if (right != null) {\n            right.setDown(getTextArea().getCommandManager().isExecuted(Command.JUSTIFY_RIGHT));\n        }\n        if (full != null) {\n            full.setDown(getTextArea().getCommandManager().isExecuted(Command.JUSTIFY_FULL));\n        }\n    }","id":21409,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#update()\n     */\n    public void update()\n    {\n        for (Map.Entry<ToggleButton, Command> entry : buttons.entrySet()) {\n            entry.getKey().setDown(getTextArea().getCommandManager().isExecuted(entry.getValue()));\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == left) {\n            onJustifyLeft();\n        } else if (sender == center) {\n            onJustifyCenter();\n        } else if (sender == right) {\n            onJustifyRight();\n        } else if (sender == full) {\n            onJustifyFull();\n        }\n    }","id":21410,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        Command command = buttons.get(sender);\n        if (command != null && ((FocusWidget) sender).isEnabled()) {\n            getTextArea().getCommandManager().execute(command);\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Adds to or removes from the given text node the underlying style.\n     * \n     * @param text the target text node\n     * @param startIndex the first character to be processed\n     * @param endIndex the last character to be processed\n     * @param executed whether to add or remove the style\n     * @return a text fragment indicating what has been processed\n     */\n    protected TextFragment execute(Text text, int startIndex, int endIndex, boolean executed)\n    {\n        return executed ? removeStyle(text, startIndex, endIndex) : addStyle(text, startIndex, endIndex);\n    }","id":21411,"modified_method":"/**\n     * Applies the underlying style {@link #property} with the given value to the specified text fragment.\n     * \n     * @param text the target text node\n     * @param startIndex the first character to be processed\n     * @param endIndex the last character to be processed\n     * @param parameter the value to set for the style {@link #property}\n     * @return a text fragment indicating what has been processed\n     */\n    protected TextFragment execute(Text text, int startIndex, int endIndex, String parameter)\n    {\n        // Make sure the style is applied only to the selected text.\n        text.crop(startIndex, endIndex);\n\n        // Look for the farthest in-line element ancestor without sibling nodes.\n        Element ancestor = null;\n        Node node = text.getParentNode();\n        while (node.getChildNodes().getLength() == 1 && domUtils.isInline(node)) {\n            ancestor = (Element) node;\n            node = node.getParentNode();\n        }\n\n        // If we haven't found the proper ancestor, we wrap the text in a span element.\n        if (ancestor == null) {\n            ancestor = ((Document) text.getOwnerDocument()).xCreateSpanElement().cast();\n            text.getParentNode().replaceChild(ancestor, text);\n            ancestor.appendChild(text);\n        }\n\n        // Apply the style.\n        ancestor.getStyle().setProperty(property.getJSName(), parameter);\n\n        return new TextFragment(text, 0, text.getLength());\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Adds to or removes from the given range the in-line formatting.\n     * \n     * @param range the target range\n     * @param executed whether to add or remove the style\n     * @return the given range after being processed\n     */\n    protected Range execute(Range range, boolean executed)\n    {\n        Range styledRange = range;\n        if (range.isCollapsed()) {\n            switch (range.getStartContainer().getNodeType()) {\n                case Node.TEXT_NODE:\n                    Text text = (Text) range.getStartContainer();\n                    text = execute(text, range.getStartOffset(), range.getEndOffset(), executed).getText();\n                    range.selectNodeContents(text);\n                    break;\n                case Node.ELEMENT_NODE:\n                    Text empty = (Text) range.getStartContainer().getOwnerDocument().createTextNode(\"\");\n                    domUtils.insertAt(range.getStartContainer(), empty, range.getStartOffset());\n                    range.selectNodeContents(execute(empty, 0, 0, executed).getText());\n                    break;\n                default:\n                    // Do nothing.\n                    break;\n            }\n        } else {\n            // Iterate through all the text nodes within the given range and apply the underlying style.\n            TextFragment startContainer = null;\n            TextFragment endContainer = null;\n            List<Text> textNodes = getNonEmptyTextNodes(range);\n            for (int i = 0; i < textNodes.size(); i++) {\n                Text text = textNodes.get(i);\n                int startIndex = 0;\n                if (text == range.getStartContainer()) {\n                    startIndex = range.getStartOffset();\n                }\n                int endIndex = text.getLength();\n                if (text == range.getEndContainer()) {\n                    endIndex = range.getEndOffset();\n                }\n                endContainer = execute(text, startIndex, endIndex, executed);\n                if (startContainer == null) {\n                    startContainer = endContainer;\n                }\n            }\n            if (startContainer != null) {\n                // We cannot reuse the given range because it may have been invalidated by the DOM mutations.\n                styledRange = ((Document) startContainer.getText().getOwnerDocument()).createRange();\n                styledRange.setStart(startContainer.getText(), startContainer.getStartIndex());\n                styledRange.setEnd(endContainer.getText(), endContainer.getEndIndex());\n            }\n        }\n        return styledRange;\n    }","id":21412,"modified_method":"/**\n     * Applies the underlying style {@link #property} with the given value to the specified range.\n     * \n     * @param range the target range\n     * @param parameter the value to set for the style {@link #property}\n     * @return the given range after being processed\n     */\n    protected Range execute(Range range, String parameter)\n    {\n        Range styledRange = range;\n        if (range.isCollapsed()) {\n            switch (range.getStartContainer().getNodeType()) {\n                case Node.TEXT_NODE:\n                    Text text = (Text) range.getStartContainer();\n                    text = execute(text, range.getStartOffset(), range.getEndOffset(), parameter).getText();\n                    range.selectNodeContents(text);\n                    break;\n                case Node.ELEMENT_NODE:\n                    Text empty = (Text) range.getStartContainer().getOwnerDocument().createTextNode(\"\");\n                    domUtils.insertAt(range.getStartContainer(), empty, range.getStartOffset());\n                    range.selectNodeContents(execute(empty, 0, 0, parameter).getText());\n                    break;\n                default:\n                    // Do nothing.\n                    break;\n            }\n        } else {\n            // Iterate through all the text nodes within the given range and apply the underlying style.\n            TextFragment startContainer = null;\n            TextFragment endContainer = null;\n            List<Text> textNodes = getNonEmptyTextNodes(range);\n            for (int i = 0; i < textNodes.size(); i++) {\n                Text text = textNodes.get(i);\n                int startIndex = 0;\n                if (text == range.getStartContainer()) {\n                    startIndex = range.getStartOffset();\n                }\n                int endIndex = text.getLength();\n                if (text == range.getEndContainer()) {\n                    endIndex = range.getEndOffset();\n                }\n                endContainer = execute(text, startIndex, endIndex, parameter);\n                if (startContainer == null) {\n                    startContainer = endContainer;\n                }\n            }\n            if (startContainer != null) {\n                // We cannot reuse the given range because it may have been invalidated by the DOM mutations.\n                styledRange = ((Document) startContainer.getText().getOwnerDocument()).createRange();\n                styledRange.setStart(startContainer.getText(), startContainer.getStartIndex());\n                styledRange.setEnd(endContainer.getText(), endContainer.getEndIndex());\n            }\n        }\n        return styledRange;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @return {@link #propertyName}\n     */\n    public String getPropertyName()\n    {\n        return propertyName;\n    }","id":21413,"modified_method":"/**\n     * @return the style property associated with the executable\n     */\n    protected Property getProperty()\n    {\n        return property;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param range a DOM range\n     * @return the list of non empty text nodes that are completely or partially (at least one character) included in\n     *         the given range\n     */\n    private List<Text> getNonEmptyTextNodes(Range range)\n    {\n        Node leaf = domUtils.getFirstLeaf(range);\n        Node lastLeaf = domUtils.getLastLeaf(range);\n        List<Text> textNodes = new ArrayList<Text>();\n        // If the range starts at the end of a text node we have to ignore that node.\n        if (isNonEmptyTextNode(leaf)\n            && (leaf != range.getStartContainer() || range.getStartOffset() < leaf.getNodeValue().length())) {\n            textNodes.add((Text) leaf);\n        }\n        while (leaf != lastLeaf) {\n            leaf = domUtils.getNextLeaf(leaf);\n            if (isNonEmptyTextNode(leaf)) {\n                textNodes.add((Text) leaf);\n            }\n        }\n        // If the range ends at the start of a text node then we have to ignore that node.\n        int lastIndex = textNodes.size() - 1;\n        if (lastIndex >= 0 && range.getEndOffset() == 0 && textNodes.get(lastIndex) == range.getEndContainer()) {\n            textNodes.remove(lastIndex);\n        }\n        return textNodes;\n    }","id":21414,"modified_method":"/**\n     * @param range a DOM range\n     * @return the list of non empty text nodes that are completely or partially (at least one character) included in\n     *         the given range\n     */\n    protected List<Text> getNonEmptyTextNodes(Range range)\n    {\n        Node leaf = domUtils.getFirstLeaf(range);\n        Node lastLeaf = domUtils.getLastLeaf(range);\n        List<Text> textNodes = new ArrayList<Text>();\n        // If the range starts at the end of a text node we have to ignore that node.\n        if (isNonEmptyTextNode(leaf)\n            && (leaf != range.getStartContainer() || range.getStartOffset() < leaf.getNodeValue().length())) {\n            textNodes.add((Text) leaf);\n        }\n        while (leaf != lastLeaf) {\n            leaf = domUtils.getNextLeaf(leaf);\n            if (isNonEmptyTextNode(leaf)) {\n                textNodes.add((Text) leaf);\n            }\n        }\n        // If the range ends at the start of a text node then we have to ignore that node.\n        int lastIndex = textNodes.size() - 1;\n        if (lastIndex >= 0 && range.getEndOffset() == 0 && textNodes.get(lastIndex) == range.getEndContainer()) {\n            textNodes.remove(lastIndex);\n        }\n        return textNodes;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractExecutable#execute(RichTextArea, String)\n     */\n    public boolean execute(RichTextArea rta, String parameter)\n    {\n        Selection selection = rta.getDocument().getSelection();\n        List<Range> ranges = new ArrayList<Range>();\n        boolean executed = isExecuted(rta);\n        for (int i = 0; i < selection.getRangeCount(); i++) {\n            ranges.add(execute(selection.getRangeAt(i), executed));\n        }\n        selection.removeAllRanges();\n        for (Range range : ranges) {\n            selection.addRange(range);\n        }\n        return true;\n    }","id":21415,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractExecutable#execute(RichTextArea, String)\n     */\n    public boolean execute(RichTextArea rta, String parameter)\n    {\n        Selection selection = rta.getDocument().getSelection();\n        List<Range> ranges = new ArrayList<Range>();\n        for (int i = 0; i < selection.getRangeCount(); i++) {\n            ranges.add(execute(selection.getRangeAt(i), parameter));\n        }\n        selection.removeAllRanges();\n        for (Range range : ranges) {\n            selection.addRange(range);\n        }\n        return true;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractRichTextAreaTest#gwtSetUp()\n     */\n    protected void gwtSetUp() throws Exception\n    {\n        super.gwtSetUp();\n\n        if (executable == null) {\n            executable = new StyleExecutable(\"em\", null, Style.FONT_STYLE, Style.FontStyle.ITALIC, true, false);\n            insertHTML = new InsertHTMLExecutable();\n        }\n    }","id":21416,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractRichTextAreaTest#gwtSetUp()\n     */\n    protected void gwtSetUp() throws Exception\n    {\n        super.gwtSetUp();\n\n        if (executable == null) {\n            executable = new ToggleStyleExecutable(Style.FONT_STYLE, Style.FontStyle.ITALIC, \"em\");\n            insertHTML = new InsertHTMLExecutable();\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#destroy()\n     */\n    public void destroy()\n    {\n        destroy(bold);\n        destroy(italic);\n        destroy(underline);\n        destroy(strikeThrough);\n        destroy(teletype);\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeMouseListener(this);\n            getTextArea().removeKeyboardListener(this);\n            getTextArea().getCommandManager().removeCommandListener(this);\n            getTextArea().removeKeyboardListener(shortcutKeyManager);\n            shortcutKeyManager.clear();\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","id":21417,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#destroy()\n     */\n    public void destroy()\n    {\n        for (ToggleButton button : buttons.keySet()) {\n            button.removeFromParent();\n            button.removeClickListener(this);\n        }\n        buttons.clear();\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeMouseListener(this);\n            getTextArea().removeKeyboardListener(this);\n            getTextArea().getCommandManager().removeCommandListener(this);\n            getTextArea().removeKeyboardListener(shortcutKeyManager);\n            shortcutKeyManager.clear();\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#update()\n     */\n    public void update()\n    {\n        update(bold, Command.BOLD);\n        update(italic, Command.ITALIC);\n        update(underline, Command.UNDERLINE);\n        update(strikeThrough, Command.STRIKE_THROUGH);\n        update(teletype, Command.TELETYPE);\n    }","id":21418,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#update()\n     */\n    public void update()\n    {\n        for (Map.Entry<ToggleButton, Command> entry : buttons.entrySet()) {\n            entry.getKey().setDown(getTextArea().getCommandManager().isExecuted(entry.getValue()));\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates a tool bar feature and assigns a shortcut key.\n     * \n     * @param name the feature name\n     * @param command the rich text area command that is executed by this feature\n     * @param image the image displayed on the tool bar\n     * @param title the tool tip used on the tool bar button\n     * @param keyCode the shortcut key to be used\n     * @return the tool bar button that exposes this feature\n     */\n    private ToggleButton createFeature(String name, Command command, Image image, String title, char keyCode)\n    {\n        ToggleButton button = createFeature(name, command, image, title);\n        if (button != null) {\n            ClickCommand clickCommand = new ClickCommand(this, button);\n            shortcutKeyManager.put(new ShortcutKey(keyCode, KeyboardListener.MODIFIER_CTRL), clickCommand);\n            shortcutKeyManager.put(new ShortcutKey(keyCode, KeyboardListener.MODIFIER_META), clickCommand);\n        }\n        return button;\n    }","id":21419,"modified_method":"/**\n     * Creates a tool bar feature and assigns a shortcut key.\n     * \n     * @param name the feature name\n     * @param command the rich text area command that is executed by this feature\n     * @param image the image displayed on the tool bar\n     * @param title the tool tip used on the tool bar button\n     * @param keyCode the shortcut key to be used\n     * @return the tool bar button that exposes this feature\n     */\n    private ToggleButton addFeature(String name, Command command, Image image, String title, char keyCode)\n    {\n        ToggleButton button = addFeature(name, command, image, title);\n        if (button != null) {\n            ClickCommand clickCommand = new ClickCommand(this, button);\n            shortcutKeyManager.put(new ShortcutKey(keyCode, KeyboardListener.MODIFIER_CTRL), clickCommand);\n            shortcutKeyManager.put(new ShortcutKey(keyCode, KeyboardListener.MODIFIER_META), clickCommand);\n        }\n        return button;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates a tool bar feature.\n     * \n     * @param name the feature name\n     * @param command the rich text area command that is executed by this feature\n     * @param image the image displayed on the tool bar\n     * @param title the tool tip used on the tool bar button\n     * @return the tool bar button that exposes this feature\n     */\n    private ToggleButton createFeature(String name, Command command, Image image, String title)\n    {\n        ToggleButton button = null;\n        if (getTextArea().getCommandManager().isSupported(command)) {\n            button = new ToggleButton(image, this);\n            button.setTitle(title);\n            toolBarExtension.addFeature(name, button);\n        }\n        return button;\n    }","id":21420,"modified_method":"/**\n     * Creates a tool bar feature and adds it to the tool bar.\n     * \n     * @param name the feature name\n     * @param command the rich text area command that is executed by this feature\n     * @param image the image displayed on the tool bar\n     * @param title the tool tip used on the tool bar button\n     * @return the tool bar button that exposes this feature\n     */\n    private ToggleButton addFeature(String name, Command command, Image image, String title)\n    {\n        ToggleButton button = null;\n        if (getTextArea().getCommandManager().isSupported(command)) {\n            button = new ToggleButton(image, this);\n            button.setTitle(title);\n            toolBarExtension.addFeature(name, button);\n            buttons.put(button, command);\n        }\n        return button;\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == bold) {\n            onClick(bold, Command.BOLD);\n        } else if (sender == italic) {\n            onClick(italic, Command.ITALIC);\n        } else if (sender == underline) {\n            onClick(underline, Command.UNDERLINE);\n        } else if (sender == strikeThrough) {\n            onClick(strikeThrough, Command.STRIKE_THROUGH);\n        } else if (sender == teletype) {\n            onClick(teletype, Command.TELETYPE);\n        }\n    }","id":21421,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        Command command = buttons.get(sender);\n        if (command != null && ((FocusWidget) sender).isEnabled()) {\n            getTextArea().getCommandManager().execute(command);\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        shortcutKeyManager = new ShortcutKeyManager();\n\n        bold = createFeature(\"bold\", Command.BOLD, Images.INSTANCE.bold().createImage(), Strings.INSTANCE.bold(), 'B');\n        italic =\n            createFeature(\"italic\", Command.ITALIC, Images.INSTANCE.italic().createImage(), Strings.INSTANCE.italic(),\n                'I');\n        underline =\n            createFeature(\"underline\", Command.UNDERLINE, Images.INSTANCE.underline().createImage(), Strings.INSTANCE\n                .underline(), 'U');\n        strikeThrough =\n            createFeature(\"strikethrough\", Command.STRIKE_THROUGH, Images.INSTANCE.strikeThrough().createImage(),\n                Strings.INSTANCE.strikeThrough());\n        teletype =\n            createFeature(\"teletype\", Command.TELETYPE, Images.INSTANCE.teletype().createImage(), Strings.INSTANCE\n                .teletype());\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addKeyboardListener(this);\n            getTextArea().addMouseListener(this);\n            getTextArea().getCommandManager().addCommandListener(this);\n            getTextArea().addKeyboardListener(shortcutKeyManager);\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","id":21422,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractStatefulPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        shortcutKeyManager = new ShortcutKeyManager();\n\n        addFeature(\"bold\", Command.BOLD, Images.INSTANCE.bold().createImage(), Strings.INSTANCE.bold(), 'B');\n        addFeature(\"italic\", Command.ITALIC, Images.INSTANCE.italic().createImage(), Strings.INSTANCE.italic(), 'I');\n        addFeature(\"underline\", Command.UNDERLINE, Images.INSTANCE.underline().createImage(), Strings.INSTANCE\n            .underline(), 'U');\n        addFeature(\"strikethrough\", Command.STRIKE_THROUGH, Images.INSTANCE.strikeThrough().createImage(),\n            Strings.INSTANCE.strikeThrough());\n        addFeature(\"teletype\", Command.TELETYPE, Images.INSTANCE.teletype().createImage(), Strings.INSTANCE.teletype());\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addKeyboardListener(this);\n            getTextArea().addMouseListener(this);\n            getTextArea().getCommandManager().addCommandListener(this);\n            getTextArea().addKeyboardListener(shortcutKeyManager);\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Adds unit tests for the plug-ins to the given test suite.\n     * \n     * @param suite the test suite\n     */\n    private static void addPluginTests(TestSuite suite)\n    {\n        suite.addTestSuite(DefaultPluginFactoryManagerTest.class);\n        suite.addTestSuite(DefaultPluginManagerTest.class);\n        suite.addTestSuite(FocusWidgetUIExtensionTest.class);\n        suite.addTestSuite(ImageMetaDataExtractorTest.class);\n        suite.addTestSuite(LinkMetaDataExtractorTest.class);\n        suite.addTestSuite(MacroCallTest.class);\n        suite.addTestSuite(IndentExecutableTest.class);\n        suite.addTestSuite(OutdentExecutableTest.class);\n    }","id":21423,"modified_method":"/**\n     * Adds unit tests for the plug-ins to the given test suite.\n     * \n     * @param suite the test suite\n     */\n    private static void addPluginTests(TestSuite suite)\n    {\n        suite.addTestSuite(DefaultPluginFactoryManagerTest.class);\n        suite.addTestSuite(DefaultPluginManagerTest.class);\n        suite.addTestSuite(FocusWidgetUIExtensionTest.class);\n        suite.addTestSuite(ImageMetaDataExtractorTest.class);\n        suite.addTestSuite(LinkMetaDataExtractorTest.class);\n        suite.addTestSuite(MacroCallTest.class);\n        suite.addTestSuite(IndentExecutableTest.class);\n        suite.addTestSuite(OutdentExecutableTest.class);\n        suite.addTestSuite(ColorPickerTest.class);\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Default constructor.\n     */\n    public XWikiSyntaxValidator()\n    {\n        super(\"xwiki/2.0\");\n\n        // add XWiki specific validation rules\n        addValidationRule(new DisablingRule(new String[] {\"justifyfull\"}));\n        addValidationRule(new DisableListInHeader());\n        addValidationRule(new DisableIndentOutsideList());\n        // FIXME : find a generic way of disabling inline/block/both elements on some identified elements\n        addValidationRule(new DisableBlockElementsInTable());\n    }","id":21424,"modified_method":"/**\n     * Default constructor.\n     */\n    public XWikiSyntaxValidator()\n    {\n        super(\"xwiki/2.0\");\n\n        // add XWiki specific validation rules\n        addValidationRule(new DisableListInHeader());\n        addValidationRule(new DisableIndentOutsideList());\n        // FIXME : find a generic way of disabling inline/block/both elements on some identified elements\n        addValidationRule(new DisableBlockElementsInTable());\n    }","commit_id":"91f8f8da71b2fb0a0493a171aaea24dc6a6c21a2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, editorContext.getMainFrame(), node);\n    selectFieldsDialog.show();\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", selectFieldsDialog.getSelectedFields());\n    return selectFieldsDialog.isOK();\n  }","id":21425,"modified_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final Wrappers._T<SNodePointer[]> fields = new Wrappers._T<SNodePointer[]>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        fields.value = ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).select(new ISelector<SNode, SNodePointer>() {\n          public SNodePointer select(SNode it) {\n            return new SNodePointer(it);\n          }\n        }).toGenericArray(SNodePointer.class);\n      }\n    });\n\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields.value, false, editorContext.getOperationContext().getProject());\n    selectFieldsDialog.setTitle(\"Select Fields to Generate Getters\");\n    selectFieldsDialog.show();\n\n    if (!(selectFieldsDialog.isOK())) {\n      return false;\n    }\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", Sequence.fromIterable(((Iterable<SNodePointer>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class));\n    return true;\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    for (final SNode field : ((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      Project project = editorContext.getOperationContext().getProject();\n      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);\n      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode method) {\n          return getterName.equals(SPropertyOperations.getString(method, \"name\")) && ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).isEmpty();\n        }\n      })) {\n        continue;\n      }\n      // Method creation begins \n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      SNode added = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGetter_Intention.QuotationClass_wkvgdi_a0a0a6a2a7().createNode(SLinkOperations.getTarget(field, \"type\", true), fieldReference, getterName));\n      lastAdded = added;\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","id":21426,"modified_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    for (SNodePointer fieldPtr : ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      final SNode field = SNodeOperations.cast(fieldPtr.getNode(), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\");\n      Project project = editorContext.getOperationContext().getProject();\n      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);\n      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode method) {\n          return getterName.equals(SPropertyOperations.getString(method, \"name\")) && ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).isEmpty();\n        }\n      })) {\n        continue;\n      }\n      // Method creation begins \n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      SNode added = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGetter_Intention.QuotationClass_wkvgdi_a0a0a7a2a7().createNode(SLinkOperations.getTarget(field, \"type\", true), fieldReference, getterName));\n      lastAdded = added;\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    Project project = editorContext.getOperationContext().getProject();\n    for (final SNode field : ((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);\n      final Wrappers._boolean getterIsAbsent = new Wrappers._boolean(true);\n      ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          if (getterName.equals(SPropertyOperations.getString(it, \"name\")) && ListSequence.fromList(SLinkOperations.getTargets(it, \"parameter\", true)).isEmpty()) {\n            getterIsAbsent.value = false;\n          }\n        }\n      });\n      if (!(getterIsAbsent.value)) {\n        continue;\n      }\n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_43x4b2_a0a0a6a3a7().createNode(SLinkOperations.getTarget(field, \"type\", true), fieldReference, getterName));\n\n      final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);\n      final Wrappers._boolean setterIsAbsent = new Wrappers._boolean(true);\n      ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode method) {\n          if (setterName.equals(SPropertyOperations.getString(method, \"name\")) && (int) ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).count() == 1) {\n            setterIsAbsent.value = false;\n          }\n        }\n      });\n      if (!(setterIsAbsent.value)) {\n        continue;\n      }\n      String parameterName = GenerateGettersAndSettersUtil.getParameterNameForField(field, project);\n      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_43x4b2_a0a0a31a3a7().createNode(SNodeOperations.copyNode(fieldReference), SLinkOperations.getTarget(field, \"type\", true), parameterName, setterName));\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","id":21427,"modified_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    Project project = editorContext.getOperationContext().getProject();\n    for (SNodePointer fieldPtr : ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      final SNode field = SNodeOperations.cast(fieldPtr.getNode(), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\");\n      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);\n      final Wrappers._boolean getterIsAbsent = new Wrappers._boolean(true);\n      ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          if (getterName.equals(SPropertyOperations.getString(it, \"name\")) && ListSequence.fromList(SLinkOperations.getTargets(it, \"parameter\", true)).isEmpty()) {\n            getterIsAbsent.value = false;\n          }\n        }\n      });\n      if (!(getterIsAbsent.value)) {\n        continue;\n      }\n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_43x4b2_a0a0a7a3a7().createNode(SLinkOperations.getTarget(field, \"type\", true), fieldReference, getterName));\n\n      final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);\n      final Wrappers._boolean setterIsAbsent = new Wrappers._boolean(true);\n      ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode method) {\n          if (setterName.equals(SPropertyOperations.getString(method, \"name\")) && (int) ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).count() == 1) {\n            setterIsAbsent.value = false;\n          }\n        }\n      });\n      if (!(setterIsAbsent.value)) {\n        continue;\n      }\n      String parameterName = GenerateGettersAndSettersUtil.getParameterNameForField(field, project);\n      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_43x4b2_a0a0a41a3a7().createNode(SNodeOperations.copyNode(fieldReference), SLinkOperations.getTarget(field, \"type\", true), parameterName, setterName));\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, editorContext.getMainFrame(), node);\n    selectFieldsDialog.show();\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", selectFieldsDialog.getSelectedFields());\n    return selectFieldsDialog.isOK();\n  }","id":21428,"modified_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final Wrappers._T<SNodePointer[]> fields = new Wrappers._T<SNodePointer[]>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        fields.value = ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).select(new ISelector<SNode, SNodePointer>() {\n          public SNodePointer select(SNode it) {\n            return new SNodePointer(it);\n          }\n        }).toGenericArray(SNodePointer.class);\n      }\n    });\n\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields.value, false, editorContext.getOperationContext().getProject());\n    selectFieldsDialog.setTitle(\"Select Fields to Generate Getters and Setters\");\n    selectFieldsDialog.show();\n\n    if (!(selectFieldsDialog.isOK())) {\n      return false;\n    }\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", Sequence.fromIterable(((Iterable<SNodePointer>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class));\n    return true;\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    Project project = editorContext.getOperationContext().getProject();\n    for (final SNode field : ((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);\n      boolean setterIsAbsent = true;\n      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode method) {\n          return setterName.equals(SPropertyOperations.getString(method, \"name\")) && (int) ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).count() == 1;\n        }\n      })) {\n        setterIsAbsent = false;\n      }\n      if (!(setterIsAbsent)) {\n        continue;\n      }\n      // Method creation begins \n      String parameterName = GenerateGettersAndSettersUtil.getParameterNameForField(field, project);\n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      SNode added = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateSetter_Intention.QuotationClass_hfod7k_a0a0a8a3a7().createNode(fieldReference, SLinkOperations.getTarget(field, \"type\", true), parameterName, setterName));\n      lastAdded = added;\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","id":21429,"modified_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    SNode lastAdded = null;\n    Project project = editorContext.getOperationContext().getProject();\n    for (SNodePointer fieldPtr : ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      final SNode field = SNodeOperations.cast(fieldPtr.getNode(), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\");\n      final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);\n      boolean setterIsAbsent = true;\n      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode method) {\n          return setterName.equals(SPropertyOperations.getString(method, \"name\")) && (int) ListSequence.fromList(SLinkOperations.getTargets(method, \"parameter\", true)).count() == 1;\n        }\n      })) {\n        setterIsAbsent = false;\n      }\n      if (!(setterIsAbsent)) {\n        continue;\n      }\n      // Method creation begins \n      String parameterName = GenerateGettersAndSettersUtil.getParameterNameForField(field, project);\n      SNode fieldReference = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldReference, \"variableDeclaration\", field, false);\n      SNode added = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateSetter_Intention.QuotationClass_hfod7k_a0a0a9a3a7().createNode(fieldReference, SLinkOperations.getTarget(field, \"type\", true), parameterName, setterName));\n      lastAdded = added;\n    }\n    if (lastAdded != null) {\n      editorContext.select(lastAdded);\n    }\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, editorContext.getMainFrame(), node);\n    selectFieldsDialog.show();\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", selectFieldsDialog.getSelectedFields());\n    return selectFieldsDialog.isOK();\n  }","id":21430,"modified_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final Wrappers._T<SNodePointer[]> fields = new Wrappers._T<SNodePointer[]>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        fields.value = ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).select(new ISelector<SNode, SNodePointer>() {\n          public SNodePointer select(SNode it) {\n            return new SNodePointer(it);\n          }\n        }).toGenericArray(SNodePointer.class);\n      }\n    });\n\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields.value, false, editorContext.getOperationContext().getProject());\n    selectFieldsDialog.setTitle(\"Select Fields to Generate Setters\");\n    selectFieldsDialog.show();\n\n    if (!(selectFieldsDialog.isOK())) {\n      return false;\n    }\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", Sequence.fromIterable(((Iterable<SNodePointer>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class));\n    return true;\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    final SNode rightmostExpression;\n    SNode firstField = ListSequence.fromList(((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))).first();\n    SNode currentExpression = null;\n    for (SNode field : ((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      SNode fieldRef = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldRef, \"variableDeclaration\", field, false);\n      SNode item = new GenerateToString_Intention.QuotationClass_6enhg7_a0a2a4a7().createNode(((field == firstField ?\n        \"\" :\n        \", \"\n      )) + SPropertyOperations.getString(field, \"name\") + \"=\");\n      if (field == firstField) {\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a3a4a7().createNode(SPropertyOperations.getString(classConcept, \"name\") + \"{\", item);\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a1a3a4a7().createNode(fieldRef, currentExpression);\n      } else {\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a0d0e0h().createNode(item, currentExpression);\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a1a0d0e0h().createNode(fieldRef, currentExpression);\n      }\n    }\n    if (ListSequence.fromList(((List<SNode>) intentionContext.getContextParametersMap().get(\"selectedFields\"))).isEmpty()) {\n      rightmostExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a5a7().createNode(SPropertyOperations.getString(classConcept, \"name\") + \"{}\");\n    } else {\n      rightmostExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a0f0h().createNode(currentExpression);\n    }\n    SNode method = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a6a7().createNode(rightmostExpression));\n    editorContext.select(method);\n  }","id":21431,"modified_method":"public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final SNode classConcept = SNodeOperations.cast(node, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    final SNode rightmostExpression;\n    SNodePointer firstField = (((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\")) != null && ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\")).length > 0 ?\n      ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\"))[0] :\n      null\n    );\n    SNode currentExpression = null;\n    for (SNodePointer fieldPtr : ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\"))) {\n      SNode field = SNodeOperations.cast(fieldPtr.getNode(), \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\");\n      SNode fieldRef = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", null);\n      SLinkOperations.setTarget(fieldRef, \"variableDeclaration\", field, false);\n      SNode item = new GenerateToString_Intention.QuotationClass_6enhg7_a0a3a4a7().createNode(((fieldPtr == firstField ?\n        \"\" :\n        \", \"\n      )) + SPropertyOperations.getString(field, \"name\") + \"=\");\n      if (fieldPtr == firstField) {\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a4a4a7().createNode(SPropertyOperations.getString(classConcept, \"name\") + \"{\", item);\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a1a4a4a7().createNode(fieldRef, currentExpression);\n      } else {\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a0e0e0h().createNode(item, currentExpression);\n        currentExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a1a0e0e0h().createNode(fieldRef, currentExpression);\n      }\n    }\n    if (((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\")) == null || ((SNodePointer[]) intentionContext.getContextParametersMap().get(\"selectedFields\")).length == 0) {\n      rightmostExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a5a7().createNode(SPropertyOperations.getString(classConcept, \"name\") + \"{}\");\n    } else {\n      rightmostExpression = new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a0f0h().createNode(currentExpression);\n    }\n    SNode method = ListSequence.fromList(SLinkOperations.getTargets(classConcept, \"method\", true)).addElement(new GenerateToString_Intention.QuotationClass_6enhg7_a0a0a6a7().createNode(rightmostExpression));\n    editorContext.select(method);\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, editorContext.getMainFrame(), node);\n    selectFieldsDialog.show();\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", selectFieldsDialog.getSelectedFields());\n    return selectFieldsDialog.isOK();\n  }","id":21432,"modified_method":"public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {\n    final Wrappers._T<SNodePointer[]> fields = new Wrappers._T<SNodePointer[]>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        fields.value = ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).select(new ISelector<SNode, SNodePointer>() {\n          public SNodePointer select(SNode it) {\n            return new SNodePointer(it);\n          }\n        }).toGenericArray(SNodePointer.class);\n      }\n    });\n\n    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields.value, true, editorContext.getOperationContext().getProject());\n    selectFieldsDialog.setTitle(\"Generate toString\");\n    selectFieldsDialog.show();\n\n    if (!(selectFieldsDialog.isOK())) {\n      return false;\n    }\n\n    intentionContext.getContextParametersMap().put(\"selectedFields\", Sequence.fromIterable(((Iterable<SNodePointer>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class));\n    return true;\n  }","commit_id":"6e82b0226af3ed8076879b85291ef3589d983487","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void run() {\n        DatagramPacket  packet;\n        byte            receive_buf[]=new byte[65535];\n        int             len;\n        byte[]          tmp, data;\n\n        // moved out of loop to avoid excessive object creations (bela March 8 2001)\n        packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n        while(mcast_receiver != null && mcast_recv_sock != null) {\n            try {\n                packet.setData(receive_buf, 0, receive_buf.length);\n                mcast_recv_sock.receive(packet);\n                len=packet.getLength();\n                data=packet.getData();\n                if(len == 1 && data[0] == 0) {\n                    if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                    continue;\n                }\n\n                if(len == 4) {  // received a diagnostics probe\n                    if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                        handleDiagnosticProbe(packet.getAddress(), packet.getPort());\n                        continue;\n                    }\n                }\n\n                if(log.isTraceEnabled())\n                    log.trace(\"received (mcast) \" + packet.getLength() + \" bytes from \" +\n                                                packet.getAddress() + ':' + packet.getPort() + \" (size=\" + len + \" bytes)\");\n                if(len > receive_buf.length) {\n                    if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                             \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                             \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                }\n\n                if(Version.compareTo(data) == false) {\n                    if(log.isWarnEnabled()) log.warn(\"packet from \" + packet.getAddress() + ':' + packet.getPort() +\n                               \" has different version (\" +\n                               Version.printVersionId(data, Version.version_id.length) +\n                               \") from ours (\" + Version.printVersionId(Version.version_id) +\n                               \"). This may cause problems\");\n                }\n\n                if(use_incoming_packet_handler) {\n                    tmp=new byte[len];\n                    System.arraycopy(data, 0, tmp, 0, len);\n                    incoming_queue.add(tmp);\n                }\n                else\n                    handleIncomingUdpPacket(data);\n            }\n            catch(SocketException sock_ex) {\n                 if(log.isDebugEnabled()) log.debug(\"multicast socket is closed, exception=\" + sock_ex);\n                break;\n            }\n            catch(InterruptedIOException io_ex) { // thread was interrupted\n                ; // go back to top of loop, where we will terminate loop\n            }\n            catch(Throwable ex) {\n                if(log.isErrorEnabled()) log.error(\"exception=\" + ex + \", stack trace=\" + Util.printStackTrace(ex));\n                Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n            }\n        }\n         if(log.isDebugEnabled()) log.debug(\"multicast thread terminated\");\n    }","id":21433,"modified_method":"public void run() {\n        DatagramPacket  packet;\n        byte            receive_buf[]=new byte[65535];\n        int             len;\n        byte[]          tmp, data;\n\n        // moved out of loop to avoid excessive object creations (bela March 8 2001)\n        packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n        while(mcast_receiver != null && mcast_recv_sock != null) {\n            try {\n                packet.setData(receive_buf, 0, receive_buf.length);\n                mcast_recv_sock.receive(packet);\n                len=packet.getLength();\n                data=packet.getData();\n                if(len == 1 && data[0] == 0) {\n                    if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                    continue;\n                }\n\n                if(len == 4) {  // received a diagnostics probe\n                    if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                        handleDiagnosticProbe(packet.getAddress(), packet.getPort());\n                        continue;\n                    }\n                }\n\n                if(log.isTraceEnabled())\n                    log.trace(\"received (mcast) \" + packet.getLength() + \" bytes from \" +\n                                                packet.getAddress() + ':' + packet.getPort() + \" (size=\" + len + \" bytes)\");\n                if(len > receive_buf.length) {\n                    if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                             \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                             \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                }\n\n                if(Version.compareTo(data) == false) {\n                    if(log.isWarnEnabled()) {\n                        StringBuffer sb=new StringBuffer();\n                        sb.append(\"packet from \").append(packet.getAddress()).append(':').append(packet.getPort());\n                        sb.append(\" has different version (\").append(Version.printVersionId(data, Version.version_id.length));\n                        sb.append(\") from ours (\").append(Version.printVersionId(Version.version_id)).append(\"). \");\n                        if(discard_incompatibe_packets)\n                            sb.append(\"Packet is discarded\");\n                        else\n                            sb.append(\"This may cause problems\");\n                        log.warn(sb.toString());\n                    }\n                    if(discard_incompatibe_packets)\n                        continue;\n                }\n\n                if(use_incoming_packet_handler) {\n                    tmp=new byte[len];\n                    System.arraycopy(data, 0, tmp, 0, len);\n                    incoming_queue.add(tmp);\n                }\n                else\n                    handleIncomingUdpPacket(data);\n            }\n            catch(SocketException sock_ex) {\n                 if(log.isDebugEnabled()) log.debug(\"multicast socket is closed, exception=\" + sock_ex);\n                break;\n            }\n            catch(InterruptedIOException io_ex) { // thread was interrupted\n                ; // go back to top of loop, where we will terminate loop\n            }\n            catch(Throwable ex) {\n                if(log.isErrorEnabled()) log.error(\"exception=\" + ex + \", stack trace=\" + Util.printStackTrace(ex));\n                Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n            }\n        }\n         if(log.isDebugEnabled()) log.debug(\"multicast thread terminated\");\n    }","commit_id":"bb3c743a1d3b831b1e8f2e4d41977c2c6eeedd7c","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     * The following properties are being read by the UDP protocol\n     * param mcast_addr - the multicast address to use default is 228.8.8.8\n     * param mcast_port - (int) the port that the multicast is sent on default is 7600\n     * param ip_mcast - (boolean) flag whether to use IP multicast - default is true\n     * param ip_ttl - Set the default time-to-live for multicast packets sent out on this socket. default is 32\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     *\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n        String tmp = null;\n\n        super.setProperties(props);\n        \n        // PropertyPermission not granted if running in an untrusted environment with JNLP.\n        try {\n            tmp=System.getProperty(\"bind.address\");\n        }\n        catch (SecurityException ex){\n        }\n        \n        if(tmp != null)\n            str=tmp;\n        else\n            str=props.getProperty(\"bind_addr\");\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n\t\tstr=props.getProperty(\"start_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"start_port\");\n        }\n\n\t\tstr=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"mcast_addr\");\n        if(str != null) {\n            mcast_addr_name=str;\n            props.remove(\"mcast_addr\");\n        }\n\n        str=props.getProperty(\"mcast_port\");\n        if(str != null) {\n            mcast_port=Integer.parseInt(str);\n            props.remove(\"mcast_port\");\n        }\n\n        str=props.getProperty(\"ip_mcast\");\n        if(str != null) {\n            ip_mcast=Boolean.valueOf(str).booleanValue();\n            props.remove(\"ip_mcast\");\n        }\n\n        str=props.getProperty(\"ip_ttl\");\n        if(str != null) {\n            ip_ttl=Integer.parseInt(str);\n            props.remove(\"ip_ttl\");\n        }\n\n        str=props.getProperty(\"mcast_send_buf_size\");\n        if(str != null) {\n            mcast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"mcast_recv_buf_size\");\n        if(str != null) {\n            mcast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_send_buf_size\");\n        if(str != null) {\n            ucast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_recv_buf_size\");\n        if(str != null) {\n            ucast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(log.isWarnEnabled()) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest UDP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        if(props.size() > 0) {\n            System.err.println(\"UDP.setProperties(): the following properties are not recognized:\");\n            props.list(System.out);\n            return false;\n        }\n\n        if(enable_bundling) {\n            if(use_outgoing_packet_handler == false)\n                if(log.isWarnEnabled()) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","id":21434,"modified_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     * The following properties are being read by the UDP protocol\n     * param mcast_addr - the multicast address to use default is 228.8.8.8\n     * param mcast_port - (int) the port that the multicast is sent on default is 7600\n     * param ip_mcast - (boolean) flag whether to use IP multicast - default is true\n     * param ip_ttl - Set the default time-to-live for multicast packets sent out on this socket. default is 32\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     *\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n        String tmp = null;\n\n        super.setProperties(props);\n        \n        // PropertyPermission not granted if running in an untrusted environment with JNLP.\n        try {\n            tmp=System.getProperty(\"bind.address\");\n        }\n        catch (SecurityException ex){\n        }\n        \n        if(tmp != null)\n            str=tmp;\n        else\n            str=props.getProperty(\"bind_addr\");\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n\t\tstr=props.getProperty(\"start_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"start_port\");\n        }\n\n\t\tstr=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"mcast_addr\");\n        if(str != null) {\n            mcast_addr_name=str;\n            props.remove(\"mcast_addr\");\n        }\n\n        str=props.getProperty(\"mcast_port\");\n        if(str != null) {\n            mcast_port=Integer.parseInt(str);\n            props.remove(\"mcast_port\");\n        }\n\n        str=props.getProperty(\"ip_mcast\");\n        if(str != null) {\n            ip_mcast=Boolean.valueOf(str).booleanValue();\n            props.remove(\"ip_mcast\");\n        }\n\n        str=props.getProperty(\"ip_ttl\");\n        if(str != null) {\n            ip_ttl=Integer.parseInt(str);\n            props.remove(\"ip_ttl\");\n        }\n\n        str=props.getProperty(\"mcast_send_buf_size\");\n        if(str != null) {\n            mcast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"mcast_recv_buf_size\");\n        if(str != null) {\n            mcast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_send_buf_size\");\n        if(str != null) {\n            ucast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_recv_buf_size\");\n        if(str != null) {\n            ucast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatibe_packets\");\n        if(str != null) {\n            discard_incompatibe_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatibe_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(log.isWarnEnabled()) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest UDP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        if(props.size() > 0) {\n            System.err.println(\"UDP.setProperties(): the following properties are not recognized:\");\n            props.list(System.out);\n            return false;\n        }\n\n        if(enable_bundling) {\n            if(use_outgoing_packet_handler == false)\n                if(log.isWarnEnabled()) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","commit_id":"bb3c743a1d3b831b1e8f2e4d41977c2c6eeedd7c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            DatagramPacket  packet;\n            byte            receive_buf[]=new byte[65535];\n            int             len;\n            byte[]          data, tmp;\n\n            // moved out of loop to avoid excessive object creations (bela March 8 2001)\n            packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n            while(running && thread != null && sock != null) {\n                try {\n                    packet.setData(receive_buf, 0, receive_buf.length);\n                    sock.receive(packet);\n                    len=packet.getLength();\n                    data=packet.getData();\n                    if(len == 1 && data[0] == 0) {\n                        if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                        continue;\n                    }\n                    if(log.isTraceEnabled())\n                        log.trace(\"received (ucast) \" + len + \" bytes from \" +\n                                packet.getAddress() + ':' + packet.getPort());\n                    if(len > receive_buf.length) {\n                        if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                                               \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                                               \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                    }\n\n                    if(Version.compareTo(data) == false) {\n                        if(log.isWarnEnabled()) log.warn(\"packet from \" + packet.getAddress() + ':' + packet.getPort() +\n                                   \" has different version (\" +\n                                   Version.printVersionId(data, Version.version_id.length) +\n                                   \") from ours (\" + Version.printVersionId(Version.version_id) +\n                                   \"). This may cause problems\");\n                    }\n\n                    if(use_incoming_packet_handler) {\n                        tmp=new byte[len];\n                        System.arraycopy(data, 0, tmp, 0, len);\n                        incoming_queue.add(tmp);\n                    }\n                    else\n                        handleIncomingUdpPacket(data);\n                }\n                catch(SocketException sock_ex) {\n\n                        if(log.isDebugEnabled()) log.debug(\"unicast receiver socket is closed, exception=\" + sock_ex);\n                    break;\n                }\n                catch(InterruptedIOException io_ex) { // thread was interrupted\n                    ; // go back to top of loop, where we will terminate loop\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled()) log.error(\"[\" + local_addr + \"] exception=\" + ex +\n                                                           \", stack trace=\" + Util.printStackTrace(ex));\n                    Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n                }\n            }\n             if(log.isDebugEnabled()) log.debug(\"unicast receiver thread terminated\");\n        }","id":21435,"modified_method":"public void run() {\n            DatagramPacket  packet;\n            byte            receive_buf[]=new byte[65535];\n            int             len;\n            byte[]          data, tmp;\n\n            // moved out of loop to avoid excessive object creations (bela March 8 2001)\n            packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n            while(running && thread != null && sock != null) {\n                try {\n                    packet.setData(receive_buf, 0, receive_buf.length);\n                    sock.receive(packet);\n                    len=packet.getLength();\n                    data=packet.getData();\n                    if(len == 1 && data[0] == 0) {\n                        if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                        continue;\n                    }\n                    if(log.isTraceEnabled())\n                        log.trace(\"received (ucast) \" + len + \" bytes from \" +\n                                packet.getAddress() + ':' + packet.getPort());\n                    if(len > receive_buf.length) {\n                        if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                                               \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                                               \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                    }\n\n                    if(Version.compareTo(data) == false) {\n                        if(log.isWarnEnabled()) {\n                            StringBuffer sb=new StringBuffer();\n                            sb.append(\"packet from \").append(packet.getAddress()).append(':').append(packet.getPort());\n                            sb.append(\" has different version (\").append(Version.printVersionId(data, Version.version_id.length));\n                            sb.append(\") from ours (\").append(Version.printVersionId(Version.version_id)).append(\"). \");\n                            if(discard_incompatible_packets)\n                                sb.append(\"Packet is discarded\");\n                            else\n                                sb.append(\"This may cause problems\");\n                            log.warn(sb.toString());\n                        }\n                        if(discard_incompatible_packets)\n                            continue;\n                    }\n\n                    if(use_incoming_packet_handler) {\n                        tmp=new byte[len];\n                        System.arraycopy(data, 0, tmp, 0, len);\n                        incoming_queue.add(tmp);\n                    }\n                    else\n                        handleIncomingUdpPacket(data);\n                }\n                catch(SocketException sock_ex) {\n\n                        if(log.isDebugEnabled()) log.debug(\"unicast receiver socket is closed, exception=\" + sock_ex);\n                    break;\n                }\n                catch(InterruptedIOException io_ex) { // thread was interrupted\n                    ; // go back to top of loop, where we will terminate loop\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled()) log.error(\"[\" + local_addr + \"] exception=\" + ex +\n                                                           \", stack trace=\" + Util.printStackTrace(ex));\n                    Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n                }\n            }\n             if(log.isDebugEnabled()) log.debug(\"unicast receiver thread terminated\");\n        }","commit_id":"eed97d65cb02fcbcbc84ce1e8e1a0fe92b503a2f","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n            DatagramPacket  packet;\n            byte            receive_buf[]=new byte[65535];\n            int             len;\n            byte[]          data, tmp;\n\n            // moved out of loop to avoid excessive object creations (bela March 8 2001)\n            packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n            while(running && thread != null && sock != null) {\n                try {\n                    packet.setData(receive_buf, 0, receive_buf.length);\n                    sock.receive(packet);\n                    len=packet.getLength();\n                    data=packet.getData();\n                    if(len == 1 && data[0] == 0) {\n                        if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                        continue;\n                    }\n                    if(log.isTraceEnabled())\n                        log.trace(\"received (ucast) \" + len + \" bytes from \" +\n                                packet.getAddress() + ':' + packet.getPort());\n                    if(len > receive_buf.length) {\n                        if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                                               \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                                               \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                    }\n\n                    if(Version.compareTo(data) == false) {\n                        if(log.isWarnEnabled()) log.warn(\"packet from \" + packet.getAddress() + ':' + packet.getPort() +\n                                   \" has different version (\" +\n                                   Version.printVersionId(data, Version.version_id.length) +\n                                   \") from ours (\" + Version.printVersionId(Version.version_id) +\n                                   \"). This may cause problems\");\n                    }\n\n                    if(use_incoming_packet_handler) {\n                        tmp=new byte[len];\n                        System.arraycopy(data, 0, tmp, 0, len);\n                        incoming_queue.add(tmp);\n                    }\n                    else\n                        handleIncomingUdpPacket(data);\n                }\n                catch(SocketException sock_ex) {\n\n                        if(log.isDebugEnabled()) log.debug(\"unicast receiver socket is closed, exception=\" + sock_ex);\n                    break;\n                }\n                catch(InterruptedIOException io_ex) { // thread was interrupted\n                    ; // go back to top of loop, where we will terminate loop\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled()) log.error(\"[\" + local_addr + \"] exception=\" + ex +\n                                                           \", stack trace=\" + Util.printStackTrace(ex));\n                    Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n                }\n            }\n             if(log.isDebugEnabled()) log.debug(\"unicast receiver thread terminated\");\n        }","id":21436,"modified_method":"public void run() {\n            DatagramPacket  packet;\n            byte            receive_buf[]=new byte[65535];\n            int             len;\n            byte[]          data, tmp;\n\n            // moved out of loop to avoid excessive object creations (bela March 8 2001)\n            packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n            while(running && thread != null && sock != null) {\n                try {\n                    packet.setData(receive_buf, 0, receive_buf.length);\n                    sock.receive(packet);\n                    len=packet.getLength();\n                    data=packet.getData();\n                    if(len == 1 && data[0] == 0) {\n                        if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                        continue;\n                    }\n                    if(log.isTraceEnabled())\n                        log.trace(\"received (ucast) \" + len + \" bytes from \" +\n                                packet.getAddress() + ':' + packet.getPort());\n                    if(len > receive_buf.length) {\n                        if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                                               \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                                               \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                    }\n\n                    if(Version.compareTo(data) == false) {\n                        if(log.isWarnEnabled()) {\n                            StringBuffer sb=new StringBuffer();\n                            sb.append(\"packet from \").append(packet.getAddress()).append(':').append(packet.getPort());\n                            sb.append(\" has different version (\").append(Version.printVersionId(data, Version.version_id.length));\n                            sb.append(\") from ours (\").append(Version.printVersionId(Version.version_id)).append(\"). \");\n                            if(discard_incompatible_packets)\n                                sb.append(\"Packet is discarded\");\n                            else\n                                sb.append(\"This may cause problems\");\n                            log.warn(sb.toString());\n                        }\n                        if(discard_incompatible_packets)\n                            continue;\n                    }\n\n                    if(use_incoming_packet_handler) {\n                        tmp=new byte[len];\n                        System.arraycopy(data, 0, tmp, 0, len);\n                        incoming_queue.add(tmp);\n                    }\n                    else\n                        handleIncomingUdpPacket(data);\n                }\n                catch(SocketException sock_ex) {\n\n                        if(log.isDebugEnabled()) log.debug(\"unicast receiver socket is closed, exception=\" + sock_ex);\n                    break;\n                }\n                catch(InterruptedIOException io_ex) { // thread was interrupted\n                    ; // go back to top of loop, where we will terminate loop\n                }\n                catch(Throwable ex) {\n                    if(log.isErrorEnabled()) log.error(\"[\" + local_addr + \"] exception=\" + ex +\n                                                           \", stack trace=\" + Util.printStackTrace(ex));\n                    Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n                }\n            }\n             if(log.isDebugEnabled()) log.debug(\"unicast receiver thread terminated\");\n        }","commit_id":"5f669df6598722cbbcb81f7ff24c80a0f5c522b7","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     * The following properties are being read by the UDP protocol\n     * param mcast_addr - the multicast address to use default is 228.8.8.8\n     * param mcast_port - (int) the port that the multicast is sent on default is 7600\n     * param ip_mcast - (boolean) flag whether to use IP multicast - default is true\n     * param ip_ttl - Set the default time-to-live for multicast packets sent out on this socket. default is 32\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     *\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n        String tmp = null;\n\n        super.setProperties(props);\n        \n        // PropertyPermission not granted if running in an untrusted environment with JNLP.\n        try {\n            tmp=System.getProperty(\"bind.address\");\n        }\n        catch (SecurityException ex){\n        }\n        \n        if(tmp != null)\n            str=tmp;\n        else\n            str=props.getProperty(\"bind_addr\");\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n\t\tstr=props.getProperty(\"start_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"start_port\");\n        }\n\n\t\tstr=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"mcast_addr\");\n        if(str != null) {\n            mcast_addr_name=str;\n            props.remove(\"mcast_addr\");\n        }\n\n        str=props.getProperty(\"mcast_port\");\n        if(str != null) {\n            mcast_port=Integer.parseInt(str);\n            props.remove(\"mcast_port\");\n        }\n\n        str=props.getProperty(\"ip_mcast\");\n        if(str != null) {\n            ip_mcast=Boolean.valueOf(str).booleanValue();\n            props.remove(\"ip_mcast\");\n        }\n\n        str=props.getProperty(\"ip_ttl\");\n        if(str != null) {\n            ip_ttl=Integer.parseInt(str);\n            props.remove(\"ip_ttl\");\n        }\n\n        str=props.getProperty(\"mcast_send_buf_size\");\n        if(str != null) {\n            mcast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"mcast_recv_buf_size\");\n        if(str != null) {\n            mcast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_send_buf_size\");\n        if(str != null) {\n            ucast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_recv_buf_size\");\n        if(str != null) {\n            ucast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(log.isWarnEnabled()) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest UDP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        if(props.size() > 0) {\n            System.err.println(\"UDP.setProperties(): the following properties are not recognized:\");\n            props.list(System.out);\n            return false;\n        }\n\n        if(enable_bundling) {\n            if(use_outgoing_packet_handler == false)\n                if(log.isWarnEnabled()) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","id":21437,"modified_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     * The following properties are being read by the UDP protocol\n     * param mcast_addr - the multicast address to use default is 228.8.8.8\n     * param mcast_port - (int) the port that the multicast is sent on default is 7600\n     * param ip_mcast - (boolean) flag whether to use IP multicast - default is true\n     * param ip_ttl - Set the default time-to-live for multicast packets sent out on this socket. default is 32\n     * @return true if no other properties are left.\n     *         false if the properties still have data in them, ie ,\n     *         properties are left over and not handled by the protocol stack\n     *\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n        String tmp = null;\n\n        super.setProperties(props);\n        \n        // PropertyPermission not granted if running in an untrusted environment with JNLP.\n        try {\n            tmp=System.getProperty(\"bind.address\");\n        }\n        catch (SecurityException ex){\n        }\n        \n        if(tmp != null)\n            str=tmp;\n        else\n            str=props.getProperty(\"bind_addr\");\n        if(str != null) {\n            try {\n                bind_addr=InetAddress.getByName(str);\n            }\n            catch(UnknownHostException unknown) {\n                if(log.isFatalEnabled()) log.fatal(\"(bind_addr): host \" + str + \" not known\");\n                return false;\n            }\n            props.remove(\"bind_addr\");\n        }\n\n        str=props.getProperty(\"bind_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"bind_port\");\n        }\n\n\t\tstr=props.getProperty(\"start_port\");\n        if(str != null) {\n            bind_port=Integer.parseInt(str);\n            props.remove(\"start_port\");\n        }\n\n\t\tstr=props.getProperty(\"port_range\");\n        if(str != null) {\n            port_range=Integer.parseInt(str);\n            props.remove(\"port_range\");\n        }\n\n        str=props.getProperty(\"mcast_addr\");\n        if(str != null) {\n            mcast_addr_name=str;\n            props.remove(\"mcast_addr\");\n        }\n\n        str=props.getProperty(\"mcast_port\");\n        if(str != null) {\n            mcast_port=Integer.parseInt(str);\n            props.remove(\"mcast_port\");\n        }\n\n        str=props.getProperty(\"ip_mcast\");\n        if(str != null) {\n            ip_mcast=Boolean.valueOf(str).booleanValue();\n            props.remove(\"ip_mcast\");\n        }\n\n        str=props.getProperty(\"ip_ttl\");\n        if(str != null) {\n            ip_ttl=Integer.parseInt(str);\n            props.remove(\"ip_ttl\");\n        }\n\n        str=props.getProperty(\"mcast_send_buf_size\");\n        if(str != null) {\n            mcast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"mcast_recv_buf_size\");\n        if(str != null) {\n            mcast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"mcast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_send_buf_size\");\n        if(str != null) {\n            ucast_send_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_send_buf_size\");\n        }\n\n        str=props.getProperty(\"ucast_recv_buf_size\");\n        if(str != null) {\n            ucast_recv_buf_size=Integer.parseInt(str);\n            props.remove(\"ucast_recv_buf_size\");\n        }\n\n        str=props.getProperty(\"loopback\");\n        if(str != null) {\n            loopback=Boolean.valueOf(str).booleanValue();\n            props.remove(\"loopback\");\n        }\n\n        str=props.getProperty(\"discard_incompatibe_packets\");\n        if(str != null) {\n            discard_incompatibe_packets=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_incompatibe_packets\");\n        }\n\n        // this is deprecated, just left for compatibility (use use_incoming_packet_handler)\n        str=props.getProperty(\"use_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_packet_handler\");\n            if(log.isWarnEnabled()) log.warn(\"'use_packet_handler' is deprecated; use 'use_incoming_packet_handler' instead\");\n        }\n\n        str=props.getProperty(\"use_incoming_packet_handler\");\n        if(str != null) {\n            use_incoming_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_incoming_packet_handler\");\n        }\n\n        str=props.getProperty(\"use_outgoing_packet_handler\");\n        if(str != null) {\n            use_outgoing_packet_handler=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_outgoing_packet_handler\");\n        }\n\n        str=props.getProperty(\"max_bundle_size\");\n        if(str != null) {\n            int bundle_size=Integer.parseInt(str);\n            if(bundle_size > max_bundle_size) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size +\n                        \") is greater than largest UDP fragmentation size (\" + max_bundle_size + ')');\n                return false;\n            }\n            if(bundle_size <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_size (\" + bundle_size + \") is <= 0\");\n                return false;\n            }\n            max_bundle_size=bundle_size;\n            props.remove(\"max_bundle_size\");\n        }\n\n        str=props.getProperty(\"max_bundle_timeout\");\n        if(str != null) {\n            max_bundle_timeout=Long.parseLong(str);\n            if(max_bundle_timeout <= 0) {\n                if(log.isErrorEnabled()) log.error(\"max_bundle_timeout of \" + max_bundle_timeout + \" is invalid\");\n                return false;\n            }\n            props.remove(\"max_bundle_timeout\");\n        }\n\n        str=props.getProperty(\"enable_bundling\");\n        if(str != null) {\n            enable_bundling=Boolean.valueOf(str).booleanValue();\n            props.remove(\"enable_bundling\");\n        }\n\n        if(props.size() > 0) {\n            System.err.println(\"UDP.setProperties(): the following properties are not recognized:\");\n            props.list(System.out);\n            return false;\n        }\n\n        if(enable_bundling) {\n            if(use_outgoing_packet_handler == false)\n                if(log.isWarnEnabled()) log.warn(\"enable_bundling is true; setting use_outgoing_packet_handler=true\");\n            use_outgoing_packet_handler=true;\n        }\n\n        return true;\n    }","commit_id":"b898fa60fbe8b192aa07f0e118368d986715eccf","url":"https://github.com/belaban/JGroups"},{"original_method":"public void run() {\n        DatagramPacket  packet;\n        byte            receive_buf[]=new byte[65535];\n        int             len;\n        byte[]          tmp, data;\n\n        // moved out of loop to avoid excessive object creations (bela March 8 2001)\n        packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n        while(mcast_receiver != null && mcast_recv_sock != null) {\n            try {\n                packet.setData(receive_buf, 0, receive_buf.length);\n                mcast_recv_sock.receive(packet);\n                len=packet.getLength();\n                data=packet.getData();\n                if(len == 1 && data[0] == 0) {\n                    if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                    continue;\n                }\n\n                if(len == 4) {  // received a diagnostics probe\n                    if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                        handleDiagnosticProbe(packet.getAddress(), packet.getPort());\n                        continue;\n                    }\n                }\n\n                if(log.isTraceEnabled())\n                    log.trace(\"received (mcast) \" + packet.getLength() + \" bytes from \" +\n                                                packet.getAddress() + ':' + packet.getPort() + \" (size=\" + len + \" bytes)\");\n                if(len > receive_buf.length) {\n                    if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                             \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                             \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                }\n\n                if(Version.compareTo(data) == false) {\n                    if(log.isWarnEnabled()) log.warn(\"packet from \" + packet.getAddress() + ':' + packet.getPort() +\n                               \" has different version (\" +\n                               Version.printVersionId(data, Version.version_id.length) +\n                               \") from ours (\" + Version.printVersionId(Version.version_id) +\n                               \"). This may cause problems\");\n                }\n\n                if(use_incoming_packet_handler) {\n                    tmp=new byte[len];\n                    System.arraycopy(data, 0, tmp, 0, len);\n                    incoming_queue.add(tmp);\n                }\n                else\n                    handleIncomingUdpPacket(data);\n            }\n            catch(SocketException sock_ex) {\n                 if(log.isDebugEnabled()) log.debug(\"multicast socket is closed, exception=\" + sock_ex);\n                break;\n            }\n            catch(InterruptedIOException io_ex) { // thread was interrupted\n                ; // go back to top of loop, where we will terminate loop\n            }\n            catch(Throwable ex) {\n                if(log.isErrorEnabled()) log.error(\"exception=\" + ex + \", stack trace=\" + Util.printStackTrace(ex));\n                Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n            }\n        }\n         if(log.isDebugEnabled()) log.debug(\"multicast thread terminated\");\n    }","id":21438,"modified_method":"public void run() {\n        DatagramPacket  packet;\n        byte            receive_buf[]=new byte[65535];\n        int             len;\n        byte[]          tmp, data;\n\n        // moved out of loop to avoid excessive object creations (bela March 8 2001)\n        packet=new DatagramPacket(receive_buf, receive_buf.length);\n\n        while(mcast_receiver != null && mcast_recv_sock != null) {\n            try {\n                packet.setData(receive_buf, 0, receive_buf.length);\n                mcast_recv_sock.receive(packet);\n                len=packet.getLength();\n                data=packet.getData();\n                if(len == 1 && data[0] == 0) {\n                    if(log.isTraceEnabled()) log.trace(\"received dummy packet\");\n                    continue;\n                }\n\n                if(len == 4) {  // received a diagnostics probe\n                    if(data[0] == 'd' && data[1] == 'i' && data[2] == 'a' && data[3] == 'g') {\n                        handleDiagnosticProbe(packet.getAddress(), packet.getPort());\n                        continue;\n                    }\n                }\n\n                if(log.isTraceEnabled())\n                    log.trace(\"received (mcast) \" + packet.getLength() + \" bytes from \" +\n                                                packet.getAddress() + ':' + packet.getPort() + \" (size=\" + len + \" bytes)\");\n                if(len > receive_buf.length) {\n                    if(log.isErrorEnabled()) log.error(\"size of the received packet (\" + len + \") is bigger than \" +\n                                             \"allocated buffer (\" + receive_buf.length + \"): will not be able to handle packet. \" +\n                                             \"Use the FRAG protocol and make its frag_size lower than \" + receive_buf.length);\n                }\n\n                if(Version.compareTo(data) == false) {\n                    if(log.isWarnEnabled()) {\n                        StringBuffer sb=new StringBuffer();\n                        sb.append(\"packet from \").append(packet.getAddress()).append(':').append(packet.getPort());\n                        sb.append(\" has different version (\").append(Version.printVersionId(data, Version.version_id.length));\n                        sb.append(\") from ours (\").append(Version.printVersionId(Version.version_id)).append(\"). \");\n                        if(discard_incompatibe_packets)\n                            sb.append(\"Packet is discarded\");\n                        else\n                            sb.append(\"This may cause problems\");\n                        log.warn(sb.toString());\n                    }\n                    if(discard_incompatibe_packets)\n                        continue;\n                }\n\n                if(use_incoming_packet_handler) {\n                    tmp=new byte[len];\n                    System.arraycopy(data, 0, tmp, 0, len);\n                    incoming_queue.add(tmp);\n                }\n                else\n                    handleIncomingUdpPacket(data);\n            }\n            catch(SocketException sock_ex) {\n                 if(log.isDebugEnabled()) log.debug(\"multicast socket is closed, exception=\" + sock_ex);\n                break;\n            }\n            catch(InterruptedIOException io_ex) { // thread was interrupted\n                ; // go back to top of loop, where we will terminate loop\n            }\n            catch(Throwable ex) {\n                if(log.isErrorEnabled()) log.error(\"exception=\" + ex + \", stack trace=\" + Util.printStackTrace(ex));\n                Util.sleep(300); // so we don't get into 100% cpu spinning (should NEVER happen !)\n            }\n        }\n         if(log.isDebugEnabled()) log.debug(\"multicast thread terminated\");\n    }","commit_id":"b898fa60fbe8b192aa07f0e118368d986715eccf","url":"https://github.com/belaban/JGroups"},{"original_method":"@Test\n    public void testGetContainerProfileOverlay() throws Exception {\n        String id = CONTAINER_ID;\n        String version = \"1.0\";\n\n\n        GetDataBuilder getBuilder = createMock(GetDataBuilder.class);\n        SetDataBuilder setBuilder = createMock(SetDataBuilder.class);\n        ExistsBuilder existsBuilder = createMock(ExistsBuilder.class);\n        GetChildrenBuilder getChildrenBuilder = createMock(GetChildrenBuilder.class);\n\n        expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();\n        expect(getBuilder.forPath(ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version, id))).andReturn(\"esb\".getBytes()).anyTimes();\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"esb\")))).andReturn(\"parents=cxf camel\\n\".getBytes()).anyTimes();\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"cxf\")))).andReturn(null).anyTimes();\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"camel\")))).andReturn(null).anyTimes();\n\n        expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"esb\")))).andReturn(Collections.<String>emptyList()).anyTimes();\n        expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"cxf\")))).andReturn(Arrays.asList(new String[]{\"pid1.properties\", \"pid2.properties\"})).anyTimes();\n        expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"camel\")))).andReturn(Arrays.asList(new String[]{\"pid1.properties\"})).anyTimes();\n\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"cxf\")+ \"/pid1.properties\" ))).andReturn(\"k1=v1\\nk2=v2\".getBytes()).anyTimes();\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"cxf\")+ \"/pid2.properties\"))).andReturn(\"k3=v3\".getBytes()).anyTimes();\n        expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version, \"camel\") + \"/pid1.properties\"))).andReturn(\"k1=v4\".getBytes()).anyTimes();\n\n        expect(existsBuilder.forPath(EasyMock.<String>anyObject())).andReturn(new Stat()).anyTimes();\n        expect(curator.getData()).andReturn(getBuilder).anyTimes();\n        expect(curator.setData()).andReturn(setBuilder).anyTimes();\n        expect(curator.getChildren()).andReturn(getChildrenBuilder).anyTimes();\n        expect(curator.checkExists()).andReturn(existsBuilder).anyTimes();\n\n        replay(getBuilder);\n        replay(setBuilder);\n        replay(existsBuilder);\n        replay(getChildrenBuilder);\n        replay(curator);\n\n        Map<String, Map<String, String>> configs = container.getOverlayProfile().getConfigurations();\n        assertNotNull(configs);\n        assertEquals(2, configs.size());\n        assertNotNull(configs.get(\"pid1\"));\n        assertEquals(2, configs.get(\"pid1\").size());\n        assertEquals(\"v4\", configs.get(\"pid1\").get(\"k1\"));\n        assertEquals(\"v2\", configs.get(\"pid1\").get(\"k2\"));\n        assertNotNull(configs.get(\"pid2\"));\n        assertEquals(1, configs.get(\"pid2\").size());\n        assertEquals(\"v3\", configs.get(\"pid2\").get(\"k3\"));\n        verify(curator);\n        verify(getBuilder);\n        verify(setBuilder);\n        verify(getChildrenBuilder);\n        verify(existsBuilder);\n    }","id":21439,"modified_method":"@Test\n    public void testGetContainerProfileOverlay() throws Exception {\n\n        String v = \"1.0\";\n        String defaultProfile = \"default\";\n        String camelProfile = \"feature-camel\";\n        String cxfProfile = \"feature-cxf\";\n        Version version = new VersionImpl(v, fabricService);\n        List<String> profiles = Arrays.asList(camelProfile, cxfProfile);\n\n        Map<String, String> defaultAttributes = new HashMap<String, String>();\n        Map<String, String> camelAttributes = new HashMap<String, String>();\n        Map<String, String> cxfAttributes = new HashMap<String, String>();\n\n        Map<String, byte[]> defaultFiles = new HashMap<String, byte[]>();\n        Map<String, byte[]> camelFiles = new HashMap<String, byte[]>();\n        Map<String, byte[]> cxfFiles = new HashMap<String, byte[]>();\n\n        Map<String, Map<String, String>> defaultPids = new HashMap<String, Map<String, String>>();\n        Map<String, Map<String, String>> camelPids = new HashMap<String, Map<String, String>>();\n        Map<String, Map<String, String>> cxfPids = new HashMap<String, Map<String, String>>();\n\n        camelAttributes.put(\"attribute.\" + Profile.PARENTS, \"default\");\n        cxfAttributes.put(\"attribute.\" + Profile.PARENTS, \"feature-camel\");\n        defaultFiles.put(\"test1.properties\", \"key=fromDefault\".getBytes());\n        camelFiles.put(\"test1.properties\", \"key=fromCamel\".getBytes());\n        cxfFiles.put(\"test2.properties\", \"key=fromCxf\".getBytes());\n\n\n        expect(fabricService.getEnvironment()).andReturn(\"\").anyTimes();\n        expect(fabricService.getVersion(eq(v))).andReturn(version).anyTimes();\n\n        //Define Attributes\n        expect(dataStore.getProfileAttributes(eq(v), eq(defaultProfile))).andReturn(defaultAttributes).anyTimes();\n        expect(dataStore.getProfileAttributes(eq(v), eq(camelProfile))).andReturn(camelAttributes).anyTimes();\n        expect(dataStore.getProfileAttributes(eq(v), eq(cxfProfile))).andReturn(cxfAttributes).anyTimes();\n\n        //Define Files\n        expect(dataStore.getFileConfigurations(eq(v), eq(defaultProfile))).andReturn(defaultFiles).anyTimes();\n        expect(dataStore.getFileConfigurations(eq(v), eq(camelProfile))).andReturn(camelFiles).anyTimes();\n        expect(dataStore.getFileConfigurations(eq(v), eq(cxfProfile))).andReturn(cxfFiles).anyTimes();\n\n        //Define PIDS\n        expect(dataStore.getConfigurations(eq(v), eq(defaultProfile))).andReturn(defaultPids).anyTimes();\n        expect(dataStore.getConfigurations(eq(v), eq(camelProfile))).andReturn(camelPids).anyTimes();\n        expect(dataStore.getConfigurations(eq(v), eq(cxfProfile))).andReturn(cxfPids).anyTimes();\n\n        dataStore.substituteConfigurations((Map<String, Map<String, String>>) anyObject());\n        expectLastCall().anyTimes();\n        expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(v).anyTimes();\n        expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();\n        expect(dataStore.hasProfile(v, camelProfile)).andReturn(true).anyTimes();\n        expect(dataStore.hasProfile(v, cxfProfile)).andReturn(true).anyTimes();\n        replay(fabricService);\n        replay(dataStore);\n\n        Map<String, Map<String, String>> configs = container.getOverlayProfile().getConfigurations();\n        assertNotNull(configs);\n        assertEquals(2, configs.size());\n        assertNotNull(configs.get(\"test1\"));\n        assertEquals(1, configs.get(\"test1\").size());\n        assertEquals(\"fromCamel\", configs.get(\"test1\").get(\"key\"));\n        assertNotNull(configs.get(\"test2\"));\n        assertEquals(1, configs.get(\"test2\").size());\n        assertEquals(\"fromCxf\", configs.get(\"test2\").get(\"key\"));\n        verify(fabricService);\n        verify(dataStore);\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Test\n    public void testGetWithNoProfile() throws Exception {\n        String id = CONTAINER_ID;\n        String version = \"1.0\";\n\n        String node = ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version, id);\n        GetDataBuilder getBuilder = createMock(GetDataBuilder.class);\n        SetDataBuilder setBuilder = createMock(SetDataBuilder.class);\n        ExistsBuilder existsBuilder = createMock(ExistsBuilder.class);\n\n        expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();\n        expect(getBuilder.forPath(node)).andReturn(\"\".getBytes()).anyTimes();\n        expect(setBuilder.forPath(eq(CONFIG_VERSIONS_CONTAINER.getPath(version, id)), (byte[]) anyObject())).andReturn(null).anyTimes();\n        expect(existsBuilder.forPath(EasyMock.<String>anyObject())).andReturn(new Stat()).anyTimes();\n        expect(curator.getData()).andReturn(getBuilder).anyTimes();\n        expect(curator.setData()).andReturn(setBuilder).anyTimes();\n        expect(curator.checkExists()).andReturn(existsBuilder).anyTimes();\n\n        replay(getBuilder);\n        replay(setBuilder);\n        replay(existsBuilder);\n        replay(curator);\n\n        Profile[] profiles = container.getProfiles();\n        assertNotNull(profiles);\n        assertEquals(1, profiles.length);\n        assertEquals(ZkDefs.DEFAULT_PROFILE, profiles[0].getId());\n        verify(curator);\n        verify(getBuilder);\n        verify(setBuilder);\n        verify(existsBuilder);\n    }","id":21440,"modified_method":"@Test\n    public void testGetWithNoProfile() throws Exception {\n        String v = \"1.0\";\n        Version version = new VersionImpl(v, fabricService);\n        List<String> profiles = Arrays.asList();\n\n        expect(fabricService.getVersion(eq(v))).andReturn(version).anyTimes();\n        expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(v).anyTimes();\n        expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();\n        expect(dataStore.hasProfile(v, \"default\")).andReturn(true).anyTimes();\n        replay(fabricService);\n        replay(dataStore);\n\n        Profile[] p = container.getProfiles();\n        assertNotNull(p);\n        assertEquals(1, p.length);\n        assertEquals(ZkDefs.DEFAULT_PROFILE, p[0].getId());\n\n        verify(fabricService);\n        verify(dataStore);\n\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Test\n    public void testGetMultipleProfiles() throws Exception {\n        String id = CONTAINER_ID;\n        String version = \"1.0\";\n        String node = ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version, id);\n\n        GetDataBuilder getBuilder = createMock(GetDataBuilder.class);\n        SetDataBuilder setBuilder = createMock(SetDataBuilder.class);\n        ExistsBuilder existsBuilder = createMock(ExistsBuilder.class);\n\n        expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();\n        expect(getBuilder.forPath(node)).andReturn(\"camel esb\".getBytes()).anyTimes();\n        expect(setBuilder.forPath(eq(CONFIG_VERSIONS_CONTAINER.getPath(version, id)), (byte[]) anyObject())).andReturn(null).anyTimes();\n        expect(existsBuilder.forPath(EasyMock.<String>anyObject())).andReturn(new Stat()).anyTimes();\n        expect(curator.getData()).andReturn(getBuilder).anyTimes();\n        expect(curator.setData()).andReturn(setBuilder).anyTimes();\n        expect(curator.checkExists()).andReturn(existsBuilder).anyTimes();\n\n        replay(getBuilder);\n        replay(setBuilder);\n        replay(existsBuilder);\n        replay(curator);\n\n        Profile[] profiles = container.getProfiles();\n        assertNotNull(profiles);\n        assertEquals(2, profiles.length);\n        assertEquals(\"camel\", profiles[0].getId());\n        assertEquals(\"esb\", profiles[1].getId());\n        verify(curator);\n        verify(getBuilder);\n        verify(setBuilder);\n        verify(existsBuilder);\n    }","id":21441,"modified_method":"@Test\n    public void testGetMultipleProfiles() throws Exception {\n        String v = \"1.0\";\n        String profile1Id = \"feature-camel\";\n        String profile2Id = \"feature-cxf\";\n        Version version = new VersionImpl(v, fabricService);\n        List<String> profiles = Arrays.asList(profile1Id, profile2Id);\n\n        expect(fabricService.getVersion(eq(v))).andReturn(version).anyTimes();\n        expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(v).anyTimes();\n        expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();\n        expect(dataStore.hasProfile(v, profile1Id)).andReturn(true).anyTimes();\n        expect(dataStore.hasProfile(v, profile2Id)).andReturn(true).anyTimes();\n        replay(fabricService);\n        replay(dataStore);\n\n        Profile[] p = container.getProfiles();\n        assertNotNull(p);\n        assertEquals(2, p.length);\n        assertEquals(profile1Id, p[0].getId());\n        assertEquals(profile2Id, p[1].getId());\n\n        verify(fabricService);\n        verify(dataStore);\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Test\n    public void testSetEmptyProfiles() throws Exception {\n        String id = CONTAINER_ID;\n        String version = \"1.0\";\n        GetDataBuilder getBuilder = createMock(GetDataBuilder.class);\n        SetDataBuilder setBuilder = createMock(SetDataBuilder.class);\n\n        expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();\n        expect(getBuilder.forPath(CONFIG_VERSIONS_CONTAINER.getPath(version, id))).andReturn(DEFAULT_PROFILE.getBytes()).anyTimes();\n        expect(setBuilder.forPath(eq(CONFIG_VERSIONS_CONTAINER.getPath(version, id)), (byte[]) anyObject())).andReturn(null).anyTimes();\n        expect(curator.getData()).andReturn(getBuilder).anyTimes();\n        expect(curator.setData()).andReturn(setBuilder).anyTimes();\n\n        replay(getBuilder);\n        replay(setBuilder);\n        replay(curator);\n\n        container.setProfiles(null);\n        container.setProfiles(new Profile[0]);\n        verify(curator);\n        verify(getBuilder);\n        verify(setBuilder);\n    }","id":21442,"modified_method":"@Test\n    public void testSetEmptyProfiles() throws Exception {\n        String version = \"1.0\";\n        List<String> profiles = Arrays.asList(\"default\");\n\n        expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(version).anyTimes();\n        expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();\n        dataStore.setContainerProfiles(CONTAINER_ID, profiles);\n        expectLastCall().times(2);\n        replay(fabricService);\n        replay(dataStore);\n\n        container.setProfiles(null);\n        container.setProfiles(new Profile[0]);\n\n        verify(fabricService);\n        verify(dataStore);\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Before\n    public void setUp() {\n        /*\n        ZooKeeperDataStore zooKeeperDataStore = new ZooKeeperDataStore();\n        zooKeeperDataStore.bindCurator(curator);\n        zooKeeperDataStore.activate();\n        fabricService.bindDataStore(zooKeeperDataStore);\n        fabricService.bindCurator(curator);\n        // [TODO] how did this ever work?\n        reset(container);\n        */\n    }","id":21443,"modified_method":"@Before\n    public void setUp() {\n        fabricService = createMock(FabricService.class);\n        dataStore = createMock(DataStore.class);\n        expect(fabricService.getDataStore()).andReturn(dataStore).anyTimes();\n        container = new ContainerImpl(null, CONTAINER_ID, fabricService);\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Test\n    public void testGetSingleProfile() throws Exception {\n        String id = CONTAINER_ID;\n        String version = \"1.0\";\n        String node = ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version, id);\n\n        GetDataBuilder getBuilder = createMock(GetDataBuilder.class);\n        SetDataBuilder setBuilder = createMock(SetDataBuilder.class);\n        ExistsBuilder existsBuilder = createMock(ExistsBuilder.class);\n\n        expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();\n        expect(getBuilder.forPath(node)).andReturn(\"camel\".getBytes()).anyTimes();\n        expect(setBuilder.forPath(eq(CONFIG_VERSIONS_CONTAINER.getPath(version, id)), (byte[]) anyObject())).andReturn(null).anyTimes();\n        expect(existsBuilder.forPath(EasyMock.<String>anyObject())).andReturn(new Stat()).anyTimes();\n        expect(curator.getData()).andReturn(getBuilder).anyTimes();\n        expect(curator.setData()).andReturn(setBuilder).anyTimes();\n        expect(curator.checkExists()).andReturn(existsBuilder).anyTimes();\n\n        replay(getBuilder);\n        replay(setBuilder);\n        replay(existsBuilder);\n        replay(curator);\n\n        Profile[] profiles = container.getProfiles();\n        assertNotNull(profiles);\n        assertEquals(1, profiles.length);\n        assertEquals(\"camel\", profiles[0].getId());\n        verify(curator);\n        verify(getBuilder);\n        verify(setBuilder);\n        verify(existsBuilder);\n    }","id":21444,"modified_method":"@Test\n    public void testGetSingleProfile() throws Exception {\n        String v = \"1.0\";\n        String profileId = \"feature-camel\";\n        Version version = new VersionImpl(v, fabricService);\n        List<String> profiles = Arrays.asList(profileId);\n\n        expect(fabricService.getVersion(eq(v))).andReturn(version).anyTimes();\n        expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(v).anyTimes();\n        expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();\n        expect(dataStore.hasProfile(v, profileId)).andReturn(true).anyTimes();\n        replay(fabricService);\n        replay(dataStore);\n\n        Profile[] p = container.getProfiles();\n        assertNotNull(p);\n        assertEquals(1, p.length);\n        assertEquals(profileId, p[0].getId());\n\n        verify(fabricService);\n        verify(dataStore);\n    }","commit_id":"fb50c78da860f6531935c9e627c2850005f869c2","url":"https://github.com/fabric8io/fabric8"},{"original_method":"protected void upgradePublicUserIpAddress(Connection conn, long dcId, long networkId, String vlanType) throws SQLException {\n        s_logger.debug(\"Upgrading user ip address for data center \" + dcId + \" network \" + networkId + \" vlan type \" + vlanType);\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"UPDATE user_ip_address INNER JOIN vlan ON user_ip_address.vlan_db_id=vlan.id SET source_network_id=? WHERE user_ip_address.data_center_id=? AND vlan.vlan_type=?\");\n        pstmt.setLong(1, networkId);\n        pstmt.setLong(2, dcId);\n        pstmt.setString(3, vlanType);\n        pstmt.executeUpdate();\n        pstmt.close();\n\n        pstmt = conn.prepareStatement(\"UPDATE vlan SET network_id = ? WHERE data_center_id=? AND vlan_type=?\");\n        pstmt.setLong(1, networkId);\n        pstmt.setLong(2, dcId);\n        pstmt.setString(3, vlanType);\n        pstmt.executeUpdate();\n        pstmt.close();\n\n        pstmt =\n            conn.prepareStatement(\"SELECT user_ip_address.id, user_ip_address.public_ip_address, user_ip_address.account_id, user_ip_address.allocated FROM user_ip_address INNER JOIN vlan ON vlan.id=user_ip_address.vlan_db_id WHERE user_ip_address.data_center_id = ? AND vlan.vlan_type='VirtualNetwork'\");\n        pstmt.setLong(1, dcId);\n        ResultSet rs = pstmt.executeQuery();\n        ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n        while (rs.next()) {\n            Object[] ip = new Object[10];\n            ip[0] = rs.getLong(1); // id\n            ip[1] = rs.getString(2); // ip address\n            ip[2] = rs.getLong(3); // account id\n            ip[3] = rs.getDate(4); // allocated\n            allocatedIps.add(ip);\n        }\n        rs.close();\n        pstmt.close();\n\n        for (Object[] allocatedIp : allocatedIps) {\n            pstmt = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n            }\n            long mac = rs.getLong(1);\n            rs.close();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            Long associatedNetworkId = null;\n            if (allocatedIp[3] != null && allocatedIp[2] != null) {\n                pstmt = conn.prepareStatement(\"SELECT id FROM networks WHERE data_center_id=? AND account_id=?\");\n                pstmt.setLong(1, dcId);\n                pstmt.setLong(2, (Long)allocatedIp[2]);\n                rs = pstmt.executeQuery();\n                if (!rs.next()) {\n                    throw new CloudRuntimeException(\"Unable to find a network for account \" + allocatedIp[2] + \" in dc \" + dcId);\n                }\n                associatedNetworkId = rs.getLong(1);\n                rs.close();\n                pstmt.close();\n            }\n            pstmt = conn.prepareStatement(\"UPDATE user_ip_address SET mac_address=?, network_id=? WHERE id=?\");\n            pstmt.setLong(1, mac);\n            if (associatedNetworkId != null) {\n                pstmt.setLong(2, associatedNetworkId);\n            } else {\n                pstmt.setObject(2, null);\n            }\n            pstmt.setLong(3, (Long)allocatedIp[0]);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n\n    }","id":21445,"modified_method":"protected void upgradePublicUserIpAddress(Connection conn, long dcId, long networkId, String vlanType) throws SQLException {\n        s_logger.debug(\"Upgrading user ip address for data center \" + dcId + \" network \" + networkId + \" vlan type \" + vlanType);\n        try (PreparedStatement pstmt =\n            conn.prepareStatement(\"UPDATE user_ip_address INNER JOIN vlan ON user_ip_address.vlan_db_id=vlan.id SET source_network_id=? WHERE user_ip_address.data_center_id=? AND vlan.vlan_type=?\");) {\n            pstmt.setLong(1, networkId);\n            pstmt.setLong(2, dcId);\n            pstmt.setString(3, vlanType);\n            pstmt.executeUpdate();\n        }\n        try (PreparedStatement pstmt = conn.prepareStatement(\"UPDATE vlan SET network_id = ? WHERE data_center_id=? AND vlan_type=?\");) {\n            pstmt.setLong(1, networkId);\n            pstmt.setLong(2, dcId);\n            pstmt.setString(3, vlanType);\n            pstmt.executeUpdate();\n        }\n        try (PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT user_ip_address.id, user_ip_address.public_ip_address, user_ip_address.account_id, user_ip_address.allocated FROM user_ip_address INNER JOIN vlan ON vlan.id=user_ip_address.vlan_db_id WHERE user_ip_address.data_center_id = ? AND vlan.vlan_type='VirtualNetwork'\");) {\n            pstmt.setLong(1, dcId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n                while (rs.next()) {\n                    Object[] ip = new Object[10];\n                    ip[0] = rs.getLong(1); // id\n                    ip[1] = rs.getString(2); // ip address\n                    ip[2] = rs.getLong(3); // account id\n                    ip[3] = rs.getDate(4); // allocated\n                    allocatedIps.add(ip);\n                }\n                for (Object[] allocatedIp : allocatedIps) {\n                    try (PreparedStatement selectDataCenterMac = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");) {\n                        selectDataCenterMac.setLong(1, dcId);\n                        try (ResultSet selectedDataCenterMac = selectDataCenterMac.executeQuery();) {\n                            if (!selectedDataCenterMac.next()) {\n                                throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n                            }\n                            long mac = selectedDataCenterMac.getLong(1);\n                            try (PreparedStatement updateDataCenter = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");) {\n                                updateDataCenter.setLong(1, dcId);\n                                updateDataCenter.executeUpdate();\n                            }\n                            Long associatedNetworkId = null;\n                            if (allocatedIp[3] != null && allocatedIp[2] != null) {\n                                try (PreparedStatement selectNetworks = conn.prepareStatement(\"SELECT id FROM networks WHERE data_center_id=? AND account_id=?\");) {\n                                    selectNetworks.setLong(1, dcId);\n                                    selectNetworks.setLong(2, (Long)allocatedIp[2]);\n                                    try (ResultSet selectedNetworks = selectNetworks.executeQuery();) {\n                                        if (!selectedNetworks.next()) {\n                                            throw new CloudRuntimeException(\"Unable to find a network for account \" + allocatedIp[2] + \" in dc \" + dcId);\n                                        }\n                                        associatedNetworkId = selectedNetworks.getLong(1);\n                                    }\n                                }\n                            }\n                            try (PreparedStatement updateUserIpAddress = conn.prepareStatement(\"UPDATE user_ip_address SET mac_address=?, network_id=? WHERE id=?\");) {\n                                updateUserIpAddress.setLong(1, mac);\n                                if (associatedNetworkId != null) {\n                                    updateUserIpAddress.setLong(2, associatedNetworkId);\n                                } else {\n                                    updateUserIpAddress.setObject(2, null);\n                                }\n                                updateUserIpAddress.setLong(3, (Long)allocatedIp[0]);\n                                updateUserIpAddress.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"2b9f5b27bb919eb6815111b0b2904d4ce2e4750b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeDirectUserIpAddress(Connection conn, long dcId, long networkId, String vlanType) throws SQLException {\n        s_logger.debug(\"Upgrading user ip address for data center \" + dcId + \" network \" + networkId + \" vlan type \" + vlanType);\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"UPDATE user_ip_address INNER JOIN vlan ON user_ip_address.vlan_db_id=vlan.id SET user_ip_address.source_network_id=vlan.network_id WHERE user_ip_address.data_center_id=? AND vlan.vlan_type=?\");\n        pstmt.setLong(1, dcId);\n        pstmt.setString(2, vlanType);\n        pstmt.executeUpdate();\n        pstmt.close();\n\n        pstmt =\n            conn.prepareStatement(\"SELECT user_ip_address.id, user_ip_address.public_ip_address, user_ip_address.account_id, user_ip_address.allocated FROM user_ip_address INNER JOIN vlan ON vlan.id=user_ip_address.vlan_db_id WHERE user_ip_address.data_center_id = ? AND vlan.vlan_type=?\");\n        pstmt.setLong(1, dcId);\n        pstmt.setString(2, vlanType);\n        ResultSet rs = pstmt.executeQuery();\n        ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n        while (rs.next()) {\n            Object[] ip = new Object[10];\n            ip[0] = rs.getLong(1); // id\n            ip[1] = rs.getString(2); // ip address\n            ip[2] = rs.getLong(3); // account id\n            ip[3] = rs.getDate(4); // allocated\n            allocatedIps.add(ip);\n        }\n        rs.close();\n        pstmt.close();\n\n        s_logger.debug(\"Marking \" + allocatedIps.size() + \" ip addresses to belong to network \" + networkId);\n        s_logger.debug(\"Updating mac addresses for data center id=\" + dcId + \". Found \" + allocatedIps.size() + \" ip addresses to update\");\n\n        for (Object[] allocatedIp : allocatedIps) {\n            pstmt = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n            }\n            long mac = rs.getLong(1);\n            rs.close();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"UPDATE user_ip_address SET mac_address=? WHERE id=?\");\n            pstmt.setLong(1, mac);\n            pstmt.setLong(2, (Long)allocatedIp[0]);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n    }","id":21446,"modified_method":"protected void upgradeDirectUserIpAddress(Connection conn, long dcId, long networkId, String vlanType) throws SQLException {\n        s_logger.debug(\"Upgrading user ip address for data center \" + dcId + \" network \" + networkId + \" vlan type \" + vlanType);\n        try (PreparedStatement pstmt =\n            conn.prepareStatement(\"UPDATE user_ip_address INNER JOIN vlan ON user_ip_address.vlan_db_id=vlan.id SET user_ip_address.source_network_id=vlan.network_id WHERE user_ip_address.data_center_id=? AND vlan.vlan_type=?\");) {\n            pstmt.setLong(1, dcId);\n            pstmt.setString(2, vlanType);\n            pstmt.executeUpdate();\n        }\n        try (PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT user_ip_address.id, user_ip_address.public_ip_address, user_ip_address.account_id, user_ip_address.allocated FROM user_ip_address INNER JOIN vlan ON vlan.id=user_ip_address.vlan_db_id WHERE user_ip_address.data_center_id = ? AND vlan.vlan_type=?\");) {\n            pstmt.setLong(1, dcId);\n            pstmt.setString(2, vlanType);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n                while (rs.next()) {\n                    Object[] ip = new Object[10];\n                    ip[0] = rs.getLong(1); // id\n                    ip[1] = rs.getString(2); // ip address\n                    ip[2] = rs.getLong(3); // account id\n                    ip[3] = rs.getDate(4); // allocated\n                    allocatedIps.add(ip);\n                }\n                s_logger.debug(\"Marking \" + allocatedIps.size() + \" ip addresses to belong to network \" + networkId);\n                s_logger.debug(\"Updating mac addresses for data center id=\" + dcId + \". Found \" + allocatedIps.size() + \" ip addresses to update\");\n                for (Object[] allocatedIp : allocatedIps) {\n                    try (PreparedStatement selectMacAdresses = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");) {\n                        selectMacAdresses.setLong(1, dcId);\n                        try (ResultSet selectedMacAdresses = selectMacAdresses.executeQuery();) {\n                            if (!selectedMacAdresses.next()) {\n                                throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n                            }\n                            long mac = selectedMacAdresses.getLong(1);\n                            try (PreparedStatement updateDataCenter = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");) {\n                                updateDataCenter.setLong(1, dcId);\n                                updateDataCenter.executeUpdate();\n                            }\n                            try (PreparedStatement updateUserIpAddress = conn.prepareStatement(\"UPDATE user_ip_address SET mac_address=? WHERE id=?\");) {\n                                updateUserIpAddress.setLong(1, mac);\n                                updateUserIpAddress.setLong(2, (Long)allocatedIp[0]);\n                                updateUserIpAddress.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"2b9f5b27bb919eb6815111b0b2904d4ce2e4750b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeManagementIpAddress(Connection conn, long dcId) throws SQLException {\n        PreparedStatement pstmt = conn.prepareStatement(\"SELECT op_dc_ip_address_alloc.id FROM op_dc_ip_address_alloc WHERE data_center_id=?\");\n        pstmt.setLong(1, dcId);\n        ResultSet rs = pstmt.executeQuery();\n        ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n        while (rs.next()) {\n            Object[] ip = new Object[10];\n            ip[0] = rs.getLong(1); // id\n            allocatedIps.add(ip);\n        }\n        rs.close();\n        pstmt.close();\n\n        for (Object[] allocatedIp : allocatedIps) {\n            pstmt = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n            }\n            long mac = rs.getLong(1);\n            rs.close();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");\n            pstmt.setLong(1, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET mac_address=? WHERE id=?\");\n            pstmt.setLong(1, mac);\n            pstmt.setLong(2, (Long)allocatedIp[0]);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n\n    }","id":21447,"modified_method":"protected void upgradeManagementIpAddress(Connection conn, long dcId) throws SQLException {\n        ArrayList<Object[]> allocatedIps = new ArrayList<Object[]>();\n        try (PreparedStatement pstmt = conn.prepareStatement(\"SELECT op_dc_ip_address_alloc.id FROM op_dc_ip_address_alloc WHERE data_center_id=?\");) {\n            pstmt.setLong(1, dcId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                while (rs.next()) {\n                    Object[] ip = new Object[10];\n                    ip[0] = rs.getLong(1); // id\n                    allocatedIps.add(ip);\n                }\n            }\n        }\n        for (Object[] allocatedIp : allocatedIps) {\n            try (PreparedStatement pstmt = conn.prepareStatement(\"SELECT mac_address FROM data_center WHERE id = ?\");) {\n                pstmt.setLong(1, dcId);\n                try (ResultSet rs = pstmt.executeQuery();) {\n                    if (!rs.next()) {\n                        throw new CloudRuntimeException(\"Unable to get mac address for data center \" + dcId);\n                    }\n                    long mac = rs.getLong(1);\n                    try (PreparedStatement updateDcMacAddress = conn.prepareStatement(\"UPDATE data_center SET mac_address=mac_address+1 WHERE id = ?\");) {\n                        updateDcMacAddress.setLong(1, dcId);\n                        updateDcMacAddress.executeUpdate();\n                    }\n                    try(PreparedStatement updateDcIp = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET mac_address=? WHERE id=?\");) {\n                        updateDcIp.setLong(1, mac);\n                        updateDcIp.setLong(2, (Long)allocatedIp[0]);\n                        updateDcIp.executeUpdate();\n                    }\n                }\n            }\n        }\n    }","commit_id":"2b9f5b27bb919eb6815111b0b2904d4ce2e4750b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        if (m_tcpReceiver != null) {\n            m_tcpReceiver.stop();\n        }\n\n        if (m_udpReceiver != null) {\n            m_udpReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","id":21448,"modified_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onStart() {\n        m_tcpReceiver.start();\n        m_udpReceiver.start();\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","id":21449,"modified_method":"protected void onStart() {\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.start();\n        }\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_tcpReceiver != null, \"property tcpReceiver must be set\");\n        Assert.state(m_udpReceiver != null, \"property udpReceiver must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        Assert.state(m_localHostAddress != null, \"property localHostAddress must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n\n        m_tcpReceiver.addEventHandler(this);\n        m_udpReceiver.addEventHandler(this);\n    }","id":21450,"modified_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_eventReceivers != null, \"property eventReceivers must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setTcpReceiver(EventReceiver tcpReceiver) {\n        m_tcpReceiver = tcpReceiver;\n    }","id":21451,"modified_method":"public Collection<EventReceiver> getEventReceivers() {\n        return m_eventReceivers;\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setTcpReceiver(new TcpEventReceiver(m_eventdConfigMgr.getTCPPort()));\n                m_eventd.setUdpReceiver(new UdpEventReceiver(m_eventdConfigMgr.getUDPPort()));\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                m_eventd.setLocalHostAddress(myLocalHost());\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","id":21452,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n                \n                EventIpcManagerEventHandlerProxy proxy = new EventIpcManagerEventHandlerProxy();\n                proxy.setEventIpcManager(m_eventdIpcMgr);\n                proxy.afterPropertiesSet();\n                List<EventHandler> eventHandlers = new ArrayList<EventHandler>(0);\n                eventHandlers.add(proxy);\n                \n                TcpEventReceiver tcpEventReceiver = new TcpEventReceiver();\n                tcpEventReceiver.setPort(m_eventdConfigMgr.getTCPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                UdpEventReceiver udpEventReceiver = new UdpEventReceiver();\n                udpEventReceiver.setPort(m_eventdConfigMgr.getUDPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                List<EventReceiver> eventReceivers = new ArrayList<EventReceiver>(2);\n                eventReceivers.add(tcpEventReceiver);\n                eventReceivers.add(udpEventReceiver);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventReceivers(eventReceivers);\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21453,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21454,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_handlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21455,"modified_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_eventHandlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","id":21456,"modified_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_handlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_handlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21457,"modified_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_eventHandlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_eventHandlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","id":21458,"modified_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21459,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21460,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"9339b6eda28116dd3583aee1b23df4cb534b1594","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_tcpReceiver != null, \"property tcpReceiver must be set\");\n        Assert.state(m_udpReceiver != null, \"property udpReceiver must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        Assert.state(m_localHostAddress != null, \"property localHostAddress must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n\n        m_tcpReceiver.addEventHandler(this);\n        m_udpReceiver.addEventHandler(this);\n    }","id":21461,"modified_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_eventReceivers != null, \"property eventReceivers must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setTcpReceiver(EventReceiver tcpReceiver) {\n        m_tcpReceiver = tcpReceiver;\n    }","id":21462,"modified_method":"public Collection<EventReceiver> getEventReceivers() {\n        return m_eventReceivers;\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onStart() {\n        m_tcpReceiver.start();\n        m_udpReceiver.start();\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","id":21463,"modified_method":"protected void onStart() {\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.start();\n        }\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        if (m_tcpReceiver != null) {\n            m_tcpReceiver.stop();\n        }\n\n        if (m_udpReceiver != null) {\n            m_udpReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","id":21464,"modified_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setTcpReceiver(new TcpEventReceiver(m_eventdConfigMgr.getTCPPort()));\n                m_eventd.setUdpReceiver(new UdpEventReceiver(m_eventdConfigMgr.getUDPPort()));\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                m_eventd.setLocalHostAddress(myLocalHost());\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","id":21465,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n                \n                EventIpcManagerEventHandlerProxy proxy = new EventIpcManagerEventHandlerProxy();\n                proxy.setEventIpcManager(m_eventdIpcMgr);\n                proxy.afterPropertiesSet();\n                List<EventHandler> eventHandlers = new ArrayList<EventHandler>(0);\n                eventHandlers.add(proxy);\n                \n                TcpEventReceiver tcpEventReceiver = new TcpEventReceiver();\n                tcpEventReceiver.setPort(m_eventdConfigMgr.getTCPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                UdpEventReceiver udpEventReceiver = new UdpEventReceiver();\n                udpEventReceiver.setPort(m_eventdConfigMgr.getUDPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                List<EventReceiver> eventReceivers = new ArrayList<EventReceiver>(2);\n                eventReceivers.add(tcpEventReceiver);\n                eventReceivers.add(udpEventReceiver);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventReceivers(eventReceivers);\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21466,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_handlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21467,"modified_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_eventHandlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","id":21468,"modified_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21469,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21470,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21471,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_handlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_handlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21472,"modified_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_eventHandlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_eventHandlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","id":21473,"modified_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","commit_id":"58c696e44caf1ba7cf19a3a3da9f94e093d5bf79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_tcpReceiver != null, \"property tcpReceiver must be set\");\n        Assert.state(m_udpReceiver != null, \"property udpReceiver must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        Assert.state(m_localHostAddress != null, \"property localHostAddress must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n\n        m_tcpReceiver.addEventHandler(this);\n        m_udpReceiver.addEventHandler(this);\n    }","id":21474,"modified_method":"protected void onInit() {\n        Assert.state(m_eventdServiceManager != null, \"property eventdServiceManager must be set\");\n        Assert.state(m_eventReceivers != null, \"property eventReceivers must be set\");\n        Assert.state(m_receiver != null, \"property receiver must be set\");\n        \n        m_eventdServiceManager.dataSourceSync();\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        if (m_tcpReceiver != null) {\n            m_tcpReceiver.stop();\n        }\n\n        if (m_udpReceiver != null) {\n            m_udpReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","id":21475,"modified_method":"protected void onStop() {\n        // Stop listener threads\n        if (log().isDebugEnabled()) {\n            log().debug(\"calling shutdown on tcp/udp listener threads\");\n        }\n\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.stop();\n        }\n\n        if (m_receiver != null) {\n            m_receiver.close();\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"shutdown on tcp/udp listener threads returned\");\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setTcpReceiver(EventReceiver tcpReceiver) {\n        m_tcpReceiver = tcpReceiver;\n    }","id":21476,"modified_method":"public Collection<EventReceiver> getEventReceivers() {\n        return m_eventReceivers;\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void onStart() {\n        m_tcpReceiver.start();\n        m_udpReceiver.start();\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","id":21477,"modified_method":"protected void onStart() {\n        for (EventReceiver eventReceiver : m_eventReceivers) {\n            eventReceiver.start();\n        }\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Listener threads started\");\n        }\n\n        if (log().isDebugEnabled()) {\n            log().debug(\"Eventd running\");\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventIpcManager(m_eventdIpcMgr);\n                m_eventd.setTcpReceiver(new TcpEventReceiver(m_eventdConfigMgr.getTCPPort()));\n                m_eventd.setUdpReceiver(new UdpEventReceiver(m_eventdConfigMgr.getUDPPort()));\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                m_eventd.setLocalHostAddress(myLocalHost());\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","id":21478,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        MockUtil.println(\"------------ Begin Test \"+getName()+\" --------------------------\");\n        MockLogAppender.setupLogging();\n        \n        if (m_runSupers) {\n        \n            createMockNetwork();\n            \n            populateDatabase();\n            \n            DataSourceFactory.setInstance(m_db);\n\n            Reader rdr = new StringReader(getSnmpConfig());\n            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));\n            \n            if (isStartEventd()) {\n                m_eventdConfigMgr = new MockEventConfigManager(ConfigurationTestUtils.getReaderForResource(this, \"/org/opennms/netmgt/mock/eventd-configuration.xml\"));\n                \n                JdbcEventdServiceManager eventdServiceManager = new JdbcEventdServiceManager();\n                eventdServiceManager.setDataSource(m_db);\n                eventdServiceManager.afterPropertiesSet();\n\n                /*\n                 * Make sure we specify a full resource path since \"this\" is\n                 * the unit test class, which is most likely in another package. \n                 */\n                File configFile = ConfigurationTestUtils.getFileForResource(this, \"/org/opennms/netmgt/mock/eventconf.xml\");\n                DefaultEventConfDao eventConfDao = new DefaultEventConfDao(configFile);\n                eventConfDao.reload();\n                EventconfFactory.setInstance(eventConfDao);\n                \n                EventExpander eventExpander = new EventExpander();\n                eventExpander.setEventConfDao(eventConfDao);\n                eventExpander.afterPropertiesSet();\n                \n                m_eventdIpcMgr = new EventIpcManagerDefaultImpl();\n                m_eventdIpcMgr.setEventdConfigMgr(m_eventdConfigMgr);\n                m_eventdIpcMgr.setEventExpander(eventExpander);\n                m_eventdIpcMgr.setEventdServiceManager(eventdServiceManager);\n                m_eventdIpcMgr.setDataSource(m_db);\n                m_eventdIpcMgr.afterPropertiesSet();\n                \n                m_eventProxy = new EventProxy() {\n\n                    public void send(Event event) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(event);\n                    }\n\n                    public void send(Log eventLog) throws EventProxyException {\n                        m_eventdIpcMgr.sendNow(eventLog);\n                    }\n                    \n                };\n                \n                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);\n                \n                EventIpcManagerEventHandlerProxy proxy = new EventIpcManagerEventHandlerProxy();\n                proxy.setEventIpcManager(m_eventdIpcMgr);\n                proxy.afterPropertiesSet();\n                List<EventHandler> eventHandlers = new ArrayList<EventHandler>(0);\n                eventHandlers.add(proxy);\n                \n                TcpEventReceiver tcpEventReceiver = new TcpEventReceiver();\n                tcpEventReceiver.setPort(m_eventdConfigMgr.getTCPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                UdpEventReceiver udpEventReceiver = new UdpEventReceiver();\n                udpEventReceiver.setPort(m_eventdConfigMgr.getUDPPort());\n                tcpEventReceiver.setEventHandlers(eventHandlers);\n                \n                List<EventReceiver> eventReceivers = new ArrayList<EventReceiver>(2);\n                eventReceivers.add(tcpEventReceiver);\n                eventReceivers.add(udpEventReceiver);\n\n                m_eventd = new Eventd();\n                m_eventd.setEventdServiceManager(eventdServiceManager);\n                m_eventd.setEventReceivers(eventReceivers);\n                m_eventd.setReceiver(new BroadcastEventProcessor(m_eventdIpcMgr, eventConfDao));\n                \n                m_eventd.init();\n                m_eventd.start();\n            }\n        \n        }\n        \n        m_transMgr = new DataSourceTransactionManager(DataSourceFactory.getInstance());\n\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21479,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21480,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","id":21481,"modified_method":"/**\n     * Constructs a new TCP/IP event receiver on the passed port. The server\n     * socket allocation is delayed until the fiber is actually started.\n     * \n     * @param port\n     *            The binding port for the TCP/IP server socket.\n     */\n    public TcpEventReceiver(int port) {\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n        m_tcpPort = port;\n        m_server = null;\n        m_worker = null;\n        m_logPrefix = null;\n        m_recsPerConn = UNLIMITED_EVENTS;\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_handlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21482,"modified_method":"/**\n     * Allocates the server socket and starts up the server socket processor\n     * thread. If an error occurs allocating the server socket or the Fiber is\n     * in an erronous state then a\n     * {@link java.lang.RuntimeException runtime exception}is thrown.\n     * \n     * @throws java.lang.reflect.UndeclaredThrowableException\n     *             Thrown if an error occurs allocating the server socket.\n     * @throws java.lang.RuntimeException\n     *             Thrown if the fiber is in an erronous state or the underlying\n     *             thread cannot be started.\n     */\n    public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n        try {\n            m_server = new TcpServer(this, m_eventHandlers, m_tcpPort);\n            if (m_logPrefix != null) {\n                m_server.setLogPrefix(m_logPrefix);\n            }\n            if (m_recsPerConn != UNLIMITED_EVENTS) {\n                m_server.setEventsPerConnection(m_recsPerConn);\n            }\n        } catch (IOException e) {\n            throw new UndeclaredThrowableException(e, \"Error opening server socket: \" + e);\n        }\n        m_worker = new Thread(m_server, \"Event TCP Server[\" + m_tcpPort + \"]\");\n\n        try {\n            m_worker.start();\n        } catch (RuntimeException e) {\n            m_worker.interrupt();\n            m_status = STOPPED;\n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            m_handlers.remove(handler);\n        }\n    }","id":21483,"modified_method":"/**\n     * Removes an event handler from the list of handler called when an event is\n     * received. The handler is removed based upon the method\n     * <code>equals()<\/code> inherieted from the <code>Object<\/code> class.\n     * \n     * @param handler\n     *            A reference to the event handler.\n     * \n     */\n    public void removeEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            m_eventHandlers.remove(handler);\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_handlers) {\n            if (!m_handlers.contains(handler)) {\n                m_handlers.add(handler);\n            }\n        }\n    }","id":21484,"modified_method":"/**\n     * Adds a new event handler to receiver. When new events are received the\n     * decoded event is passed to the handler.\n     * \n     * @param handler\n     *            A reference to an event handler\n     * \n     */\n    public void addEventHandler(EventHandler handler) {\n        synchronized (m_eventHandlers) {\n            if (!m_eventHandlers.contains(handler)) {\n                m_eventHandlers.add(handler);\n            }\n        }\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_handlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","id":21485,"modified_method":"public UdpEventReceiver(int port) {\n        m_dgSock = null;\n        m_dgPort = port;\n\n        m_eventsIn = new LinkedList<UdpReceivedEvent>();\n        m_eventUuidsOut = new LinkedList<UdpReceivedEvent>();\n\n        m_eventHandlers = new ArrayList<EventHandler>(3);\n        m_status = START_PENDING;\n\n        m_dgSock = null;\n        m_receiver = null;\n        m_processor = null;\n        m_output = null;\n        m_logPrefix = null;\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_handlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_handlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","id":21486,"modified_method":"public synchronized void start() {\n        assertNotRunning();\n\n        m_status = STARTING;\n\n        try {\n            m_dgSock = new DatagramSocket(m_dgPort);\n\n            m_receiver = new UdpReceiver(m_dgSock, m_eventsIn);\n            m_processor = new UdpProcessor(m_eventHandlers, m_eventsIn, m_eventUuidsOut);\n            m_output = new UdpUuidSender(m_dgSock, m_eventUuidsOut, m_eventHandlers);\n\n            if (m_logPrefix != null) {\n                m_receiver.setLogPrefix(m_logPrefix);\n                m_processor.setLogPrefix(m_logPrefix);\n                m_output.setLogPrefix(m_logPrefix);\n            }\n        } catch (IOException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        Thread rThread = new Thread(m_receiver, \"UDP Event Receiver[\" + m_dgPort + \"]\");\n        Thread pThread = new Thread(m_processor, \"UDP Event Processor[\" + m_dgPort + \"]\");\n        Thread oThread = new Thread(m_output, \"UDP UUID Sender[\" + m_dgPort + \"]\");\n        try {\n            rThread.start();\n            pThread.start();\n            oThread.start();\n        } catch (RuntimeException e) {\n            rThread.interrupt();\n            pThread.interrupt();\n            oThread.interrupt();\n\n            m_status = STOPPED;\n            \n            throw e;\n        }\n\n        m_status = RUNNING;\n    }","commit_id":"728dab139e7faebdd10c854791c310db27672a46","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n  @NotNull\n  public List<ObjectPath> getObjectPathList() {\n    return PsiTreeUtil.getChildrenOfTypeAsList(this, ObjectPath.class);\n  }","id":21487,"modified_method":"@Override\n  @NotNull\n  public ObjectPath getObjectPath() {\n    return findNotNullChildByClass(ObjectPath.class);\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  @NotNull\n  public ObjectPath getObjectPath() {\n    return findNotNullChildByClass(ObjectPath.class);\n  }","id":21488,"modified_method":"@Override\n  @NotNull\n  public List<ObjectPath> getObjectPathList() {\n    return PsiTreeUtil.getChildrenOfTypeAsList(this, ObjectPath.class);\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment\")) return false;\n    if (!nextTokenIs(builder_, ASSIGNMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ASSIGNMENT);\n    result_ = result_ && consumeToken(builder_, ASSIGNMENT_VALUE);\n    if (result_) {\n      marker_.done(ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21489,"modified_method":"public static boolean assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, ASSIGNMENT_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && assignment_2(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean code_block(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_BEGIN);\n    result_ = result_ && code_block_2(builder_, level_ + 1);\n    result_ = result_ && code_block_3(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_END);\n    result_ = result_ && code_block_5(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(CODE_BLOCK);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21490,"modified_method":"public static boolean code_block(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_BEGIN);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, code_block_2(builder_, level_ + 1));\n    result_ = pinned_ && report_error_(builder_, code_block_3(builder_, level_ + 1)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, CODE_BLOCK_OPERATOR_END)) && result_;\n    result_ = pinned_ && code_block_5(builder_, level_ + 1) && result_;\n    if (result_ || pinned_) {\n      marker_.done(CODE_BLOCK);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!multiline_value_assignment_2_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"multiline_value_assignment_2\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","id":21491,"modified_method":"private static boolean multiline_value_assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_4(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_4\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21492,"modified_method":"private static boolean multiline_value_assignment_5(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_5\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean one_line_comment_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"one_line_comment_element\")) return false;\n    if (!nextTokenIs(builder_, ONE_LINE_COMMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ONE_LINE_COMMENT);\n    if (result_) {\n      marker_.done(ONE_LINE_COMMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21493,"modified_method":"static boolean file(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"file\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!file_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"file\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_1\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21494,"modified_method":"private static boolean multiline_value_assignment_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!multiline_value_assignment_3_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"multiline_value_assignment_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_2_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21495,"modified_method":"private static boolean multiline_value_assignment_3_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_3_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean code_block_3_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = internal_expression(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21496,"modified_method":"private static boolean file_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"file_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = expression(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean multiline_value_assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment\")) return false;\n    if (!nextTokenIs(builder_, MULTILINE_VALUE_OPERATOR_BEGIN)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE_OPERATOR_BEGIN);\n    result_ = result_ && multiline_value_assignment_1(builder_, level_ + 1);\n    result_ = result_ && multiline_value_assignment_2(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MULTILINE_VALUE_OPERATOR_END);\n    result_ = result_ && multiline_value_assignment_4(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(MULTILINE_VALUE_ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21497,"modified_method":"public static boolean multiline_value_assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MULTILINE_VALUE_OPERATOR_BEGIN);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, multiline_value_assignment_2(builder_, level_ + 1));\n    result_ = pinned_ && report_error_(builder_, multiline_value_assignment_3(builder_, level_ + 1)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MULTILINE_VALUE_OPERATOR_END)) && result_;\n    result_ = pinned_ && multiline_value_assignment_5(builder_, level_ + 1) && result_;\n    if (result_ || pinned_) {\n      marker_.done(MULTILINE_VALUE_ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"static boolean internal_expression(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_expression\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = internal_object_path(builder_, level_ + 1);\n    result_ = result_ && internal_expression_1(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21498,"modified_method":"static boolean expression(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"expression\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_RECOVER_);\n    result_ = assignment(builder_, level_ + 1);\n    if (!result_) result_ = value_modification(builder_, level_ + 1);\n    if (!result_) result_ = multiline_value_assignment(builder_, level_ + 1);\n    if (!result_) result_ = copying(builder_, level_ + 1);\n    if (!result_) result_ = unsetting(builder_, level_ + 1);\n    if (!result_) result_ = code_block(builder_, level_ + 1);\n    if (!result_) result_ = condition_element(builder_, level_ + 1);\n    if (!result_) result_ = include_statement_element(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, false, _SECTION_RECOVER_, top_expression_recover_parser_);\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean internal_expression_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_expression_1\")) return false;\n    return internal_expression_1_0(builder_, level_ + 1);\n  }","id":21499,"modified_method":"static boolean top_expression_recover(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"top_expression_recover\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_NOT_);\n    result_ = !isAfterNewLine(builder_, level_ + 1);\n    marker_.rollbackTo();\n    result_ = exitErrorRecordingSection(builder_, result_, level_, false, _SECTION_NOT_, null);\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean unsetting(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting\")) return false;\n    if (!nextTokenIs(builder_, UNSETTING_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, UNSETTING_OPERATOR);\n    result_ = result_ && unsetting_1(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(UNSETTING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21500,"modified_method":"public static boolean unsetting(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, UNSETTING_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && unsetting_2(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(UNSETTING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean code_block_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!code_block_3_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"code_block_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","id":21501,"modified_method":"private static boolean code_block_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!expression(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"code_block_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean object_path(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_ENTITY);\n    result_ = result_ && object_path_1(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(OBJECT_PATH);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21502,"modified_method":"public static boolean object_path(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path_0(builder_, level_ + 1);\n    result_ = result_ && object_path_1(builder_, level_ + 1);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_ENTITY);\n    if (result_ || pinned_) {\n      marker_.done(OBJECT_PATH);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean object_path_1_0_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_1_0_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_ENTITY);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21503,"modified_method":"private static boolean object_path_1_0_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_1_0_0\")) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = consumeToken(builder_, OBJECT_PATH_ENTITY);\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    pinned_ = result_; // pin = 2\n    if (!result_ && !pinned_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  public ASTNode parse(final IElementType root_, final PsiBuilder builder_) {\n    int level_ = 0;\n    boolean result_;\n    if (root_ == ASSIGNMENT) {\n      result_ = assignment(builder_, level_ + 1);\n    }\n    else if (root_ == CODE_BLOCK) {\n      result_ = code_block(builder_, level_ + 1);\n    }\n    else if (root_ == CONDITION_ELEMENT) {\n      result_ = condition_element(builder_, level_ + 1);\n    }\n    else if (root_ == COPYING) {\n      result_ = copying(builder_, level_ + 1);\n    }\n    else if (root_ == INCLUDE_STATEMENT_ELEMENT) {\n      result_ = include_statement_element(builder_, level_ + 1);\n    }\n    else if (root_ == MULTILINE_VALUE_ASSIGNMENT) {\n      result_ = multiline_value_assignment(builder_, level_ + 1);\n    }\n    else if (root_ == OBJECT_PATH) {\n      result_ = object_path(builder_, level_ + 1);\n    }\n    else if (root_ == ONE_LINE_COMMENT_ELEMENT) {\n      result_ = one_line_comment_element(builder_, level_ + 1);\n    }\n    else if (root_ == UNSETTING) {\n      result_ = unsetting(builder_, level_ + 1);\n    }\n    else if (root_ == VALUE_MODIFICATION) {\n      result_ = value_modification(builder_, level_ + 1);\n    }\n    else {\n      Marker marker_ = builder_.mark();\n      result_ = c_style_comment_element(builder_, level_ + 1);\n      while (builder_.getTokenType() != null) {\n        builder_.advanceLexer();\n      }\n      marker_.done(root_);\n    }\n    return builder_.getTreeBuilt();\n  }","id":21504,"modified_method":"@NotNull\n  public ASTNode parse(final IElementType root_, final PsiBuilder builder_) {\n    int level_ = 0;\n    boolean result_;\n    if (root_ == ASSIGNMENT) {\n      result_ = assignment(builder_, level_ + 1);\n    }\n    else if (root_ == CODE_BLOCK) {\n      result_ = code_block(builder_, level_ + 1);\n    }\n    else if (root_ == CONDITION_ELEMENT) {\n      result_ = condition_element(builder_, level_ + 1);\n    }\n    else if (root_ == COPYING) {\n      result_ = copying(builder_, level_ + 1);\n    }\n    else if (root_ == INCLUDE_STATEMENT_ELEMENT) {\n      result_ = include_statement_element(builder_, level_ + 1);\n    }\n    else if (root_ == MULTILINE_VALUE_ASSIGNMENT) {\n      result_ = multiline_value_assignment(builder_, level_ + 1);\n    }\n    else if (root_ == OBJECT_PATH) {\n      result_ = object_path(builder_, level_ + 1);\n    }\n    else if (root_ == UNSETTING) {\n      result_ = unsetting(builder_, level_ + 1);\n    }\n    else if (root_ == VALUE_MODIFICATION) {\n      result_ = value_modification(builder_, level_ + 1);\n    }\n    else {\n      Marker marker_ = builder_.mark();\n      result_ = parse_root_(root_, builder_, level_);\n      while (builder_.getTokenType() != null) {\n        builder_.advanceLexer();\n      }\n      marker_.done(root_);\n    }\n    return builder_.getTreeBuilt();\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean value_modification(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"value_modification\")) return false;\n    if (!nextTokenIs(builder_, MODIFICATION_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MODIFICATION_OPERATOR);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_BEGIN);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_ARGUMENT);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_END);\n    if (result_) {\n      marker_.done(VALUE_MODIFICATION);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21505,"modified_method":"public static boolean value_modification(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"value_modification\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION));\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_BEGIN)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_ARGUMENT)) && result_;\n    result_ = pinned_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_END) && result_;\n    if (result_ || pinned_) {\n      marker_.done(VALUE_MODIFICATION);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"static boolean c_style_comment_element(PsiBuilder builder_, int level_) {\n    return consumeToken(builder_, C_STYLE_COMMENT);\n  }","id":21506,"modified_method":"private static boolean assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment_2\")) return false;\n    consumeToken(builder_, ASSIGNMENT_VALUE);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean copying(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"copying\")) return false;\n    if (!nextTokenIs(builder_, COPYING_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, COPYING_OPERATOR);\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(COPYING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21507,"modified_method":"public static boolean copying(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"copying\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, COPYING_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(COPYING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean unsetting_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting_1\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21508,"modified_method":"private static boolean unsetting_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting_2\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean include_statement_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"include_statement_element\")) return false;\n    if (!nextTokenIs(builder_, ONE_LINE_COMMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ONE_LINE_COMMENT);\n    if (result_) {\n      marker_.done(INCLUDE_STATEMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21509,"modified_method":"public static boolean include_statement_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"include_statement_element\")) return false;\n    if (!nextTokenIs(builder_, INCLUDE_STATEMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, INCLUDE_STATEMENT);\n    if (result_) {\n      marker_.done(INCLUDE_STATEMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean internal_object_path_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_object_path_1\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21510,"modified_method":"private static boolean object_path_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_0\")) return false;\n    consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  @NotNull\n  public List<ObjectPath> getObjectPathList() {\n    return PsiTreeUtil.getChildrenOfTypeAsList(this, ObjectPath.class);\n  }","id":21511,"modified_method":"@Override\n  @NotNull\n  public ObjectPath getObjectPath() {\n    return findNotNullChildByClass(ObjectPath.class);\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  @NotNull\n  public ObjectPath getObjectPath() {\n    return findNotNullChildByClass(ObjectPath.class);\n  }","id":21512,"modified_method":"@Override\n  @NotNull\n  public List<ObjectPath> getObjectPathList() {\n    return PsiTreeUtil.getChildrenOfTypeAsList(this, ObjectPath.class);\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean value_modification(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"value_modification\")) return false;\n    if (!nextTokenIs(builder_, MODIFICATION_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MODIFICATION_OPERATOR);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_BEGIN);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_ARGUMENT);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_END);\n    if (result_) {\n      marker_.done(VALUE_MODIFICATION);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21513,"modified_method":"public static boolean value_modification(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"value_modification\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MODIFICATION_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION));\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_BEGIN)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_ARGUMENT)) && result_;\n    result_ = pinned_ && consumeToken(builder_, MODIFICATION_OPERATOR_FUNCTION_PARAM_END) && result_;\n    if (result_ || pinned_) {\n      marker_.done(VALUE_MODIFICATION);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_1\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21514,"modified_method":"private static boolean multiline_value_assignment_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!multiline_value_assignment_3_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"multiline_value_assignment_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_2_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21515,"modified_method":"private static boolean multiline_value_assignment_3_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_3_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean unsetting(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting\")) return false;\n    if (!nextTokenIs(builder_, UNSETTING_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, UNSETTING_OPERATOR);\n    result_ = result_ && unsetting_1(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(UNSETTING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21516,"modified_method":"public static boolean unsetting(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, UNSETTING_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && unsetting_2(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(UNSETTING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!multiline_value_assignment_2_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"multiline_value_assignment_2\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","id":21517,"modified_method":"private static boolean multiline_value_assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_2\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean internal_object_path_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_object_path_1\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21518,"modified_method":"private static boolean object_path_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_0\")) return false;\n    consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean internal_expression_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_expression_1\")) return false;\n    return internal_expression_1_0(builder_, level_ + 1);\n  }","id":21519,"modified_method":"static boolean top_expression_recover(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"top_expression_recover\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_NOT_);\n    result_ = !isAfterNewLine(builder_, level_ + 1);\n    marker_.rollbackTo();\n    result_ = exitErrorRecordingSection(builder_, result_, level_, false, _SECTION_NOT_, null);\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"static boolean c_style_comment_element(PsiBuilder builder_, int level_) {\n    return consumeToken(builder_, C_STYLE_COMMENT);\n  }","id":21520,"modified_method":"private static boolean assignment_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment_2\")) return false;\n    consumeToken(builder_, ASSIGNMENT_VALUE);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment\")) return false;\n    if (!nextTokenIs(builder_, ASSIGNMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ASSIGNMENT);\n    result_ = result_ && consumeToken(builder_, ASSIGNMENT_VALUE);\n    if (result_) {\n      marker_.done(ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21521,"modified_method":"public static boolean assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"assignment\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, ASSIGNMENT_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && assignment_2(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean object_path_1_0_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_1_0_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_ENTITY);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21522,"modified_method":"private static boolean object_path_1_0_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path_1_0_0\")) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = consumeToken(builder_, OBJECT_PATH_ENTITY);\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_SEPARATOR);\n    pinned_ = result_; // pin = 2\n    if (!result_ && !pinned_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean unsetting_1(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting_1\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21523,"modified_method":"private static boolean unsetting_2(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"unsetting_2\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean multiline_value_assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment\")) return false;\n    if (!nextTokenIs(builder_, MULTILINE_VALUE_OPERATOR_BEGIN)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, MULTILINE_VALUE_OPERATOR_BEGIN);\n    result_ = result_ && multiline_value_assignment_1(builder_, level_ + 1);\n    result_ = result_ && multiline_value_assignment_2(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MULTILINE_VALUE_OPERATOR_END);\n    result_ = result_ && multiline_value_assignment_4(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(MULTILINE_VALUE_ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21524,"modified_method":"public static boolean multiline_value_assignment(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, MULTILINE_VALUE_OPERATOR_BEGIN);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, multiline_value_assignment_2(builder_, level_ + 1));\n    result_ = pinned_ && report_error_(builder_, multiline_value_assignment_3(builder_, level_ + 1)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, MULTILINE_VALUE_OPERATOR_END)) && result_;\n    result_ = pinned_ && multiline_value_assignment_5(builder_, level_ + 1) && result_;\n    if (result_ || pinned_) {\n      marker_.done(MULTILINE_VALUE_ASSIGNMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean code_block_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!code_block_3_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"code_block_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","id":21525,"modified_method":"private static boolean code_block_3(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!expression(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"code_block_3\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean code_block_3_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block_3_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = internal_expression(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21526,"modified_method":"private static boolean file_0(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"file_0\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = expression(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean copying(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"copying\")) return false;\n    if (!nextTokenIs(builder_, COPYING_OPERATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, COPYING_OPERATOR);\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(COPYING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21527,"modified_method":"public static boolean copying(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"copying\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, COPYING_OPERATOR);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && object_path(builder_, level_ + 1);\n    if (result_ || pinned_) {\n      marker_.done(COPYING);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean code_block(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_BEGIN);\n    result_ = result_ && code_block_2(builder_, level_ + 1);\n    result_ = result_ && code_block_3(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_END);\n    result_ = result_ && code_block_5(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(CODE_BLOCK);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21528,"modified_method":"public static boolean code_block(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"code_block\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path(builder_, level_ + 1);\n    result_ = result_ && consumeToken(builder_, CODE_BLOCK_OPERATOR_BEGIN);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && report_error_(builder_, code_block_2(builder_, level_ + 1));\n    result_ = pinned_ && report_error_(builder_, code_block_3(builder_, level_ + 1)) && result_;\n    result_ = pinned_ && report_error_(builder_, consumeToken(builder_, CODE_BLOCK_OPERATOR_END)) && result_;\n    result_ = pinned_ && code_block_5(builder_, level_ + 1) && result_;\n    if (result_ || pinned_) {\n      marker_.done(CODE_BLOCK);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean include_statement_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"include_statement_element\")) return false;\n    if (!nextTokenIs(builder_, ONE_LINE_COMMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ONE_LINE_COMMENT);\n    if (result_) {\n      marker_.done(INCLUDE_STATEMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21529,"modified_method":"public static boolean include_statement_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"include_statement_element\")) return false;\n    if (!nextTokenIs(builder_, INCLUDE_STATEMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, INCLUDE_STATEMENT);\n    if (result_) {\n      marker_.done(INCLUDE_STATEMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static boolean multiline_value_assignment_4(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_4\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","id":21530,"modified_method":"private static boolean multiline_value_assignment_5(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"multiline_value_assignment_5\")) return false;\n    consumeToken(builder_, IGNORED_TEXT);\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean one_line_comment_element(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"one_line_comment_element\")) return false;\n    if (!nextTokenIs(builder_, ONE_LINE_COMMENT)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, ONE_LINE_COMMENT);\n    if (result_) {\n      marker_.done(ONE_LINE_COMMENT_ELEMENT);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21531,"modified_method":"static boolean file(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"file\")) return false;\n    int offset_ = builder_.getCurrentOffset();\n    while (true) {\n      if (!file_0(builder_, level_ + 1)) break;\n      int next_offset_ = builder_.getCurrentOffset();\n      if (offset_ == next_offset_) {\n        empty_element_parsed_guard_(builder_, offset_, \"file\");\n        break;\n      }\n      offset_ = next_offset_;\n    }\n    return true;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"static boolean internal_expression(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"internal_expression\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = internal_object_path(builder_, level_ + 1);\n    result_ = result_ && internal_expression_1(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    return result_;\n  }","id":21532,"modified_method":"static boolean expression(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"expression\")) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_RECOVER_);\n    result_ = assignment(builder_, level_ + 1);\n    if (!result_) result_ = value_modification(builder_, level_ + 1);\n    if (!result_) result_ = multiline_value_assignment(builder_, level_ + 1);\n    if (!result_) result_ = copying(builder_, level_ + 1);\n    if (!result_) result_ = unsetting(builder_, level_ + 1);\n    if (!result_) result_ = code_block(builder_, level_ + 1);\n    if (!result_) result_ = condition_element(builder_, level_ + 1);\n    if (!result_) result_ = include_statement_element(builder_, level_ + 1);\n    if (!result_) {\n      marker_.rollbackTo();\n    }\n    else {\n      marker_.drop();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, false, _SECTION_RECOVER_, top_expression_recover_parser_);\n    return result_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean object_path(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY)) return false;\n    boolean result_ = false;\n    final Marker marker_ = builder_.mark();\n    result_ = consumeToken(builder_, OBJECT_PATH_ENTITY);\n    result_ = result_ && object_path_1(builder_, level_ + 1);\n    if (result_) {\n      marker_.done(OBJECT_PATH);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    return result_;\n  }","id":21533,"modified_method":"public static boolean object_path(PsiBuilder builder_, int level_) {\n    if (!recursion_guard_(builder_, level_, \"object_path\")) return false;\n    if (!nextTokenIs(builder_, OBJECT_PATH_ENTITY) && !nextTokenIs(builder_, OBJECT_PATH_SEPARATOR)) return false;\n    boolean result_ = false;\n    boolean pinned_ = false;\n    final Marker marker_ = builder_.mark();\n    enterErrorRecordingSection(builder_, level_, _SECTION_GENERAL_);\n    result_ = object_path_0(builder_, level_ + 1);\n    result_ = result_ && object_path_1(builder_, level_ + 1);\n    pinned_ = result_; // pin = 2\n    result_ = result_ && consumeToken(builder_, OBJECT_PATH_ENTITY);\n    if (result_ || pinned_) {\n      marker_.done(OBJECT_PATH);\n    }\n    else {\n      marker_.rollbackTo();\n    }\n    result_ = exitErrorRecordingSection(builder_, result_, level_, pinned_, _SECTION_GENERAL_, null);\n    return result_ || pinned_;\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  public ASTNode parse(final IElementType root_, final PsiBuilder builder_) {\n    int level_ = 0;\n    boolean result_;\n    if (root_ == ASSIGNMENT) {\n      result_ = assignment(builder_, level_ + 1);\n    }\n    else if (root_ == CODE_BLOCK) {\n      result_ = code_block(builder_, level_ + 1);\n    }\n    else if (root_ == CONDITION_ELEMENT) {\n      result_ = condition_element(builder_, level_ + 1);\n    }\n    else if (root_ == COPYING) {\n      result_ = copying(builder_, level_ + 1);\n    }\n    else if (root_ == INCLUDE_STATEMENT_ELEMENT) {\n      result_ = include_statement_element(builder_, level_ + 1);\n    }\n    else if (root_ == MULTILINE_VALUE_ASSIGNMENT) {\n      result_ = multiline_value_assignment(builder_, level_ + 1);\n    }\n    else if (root_ == OBJECT_PATH) {\n      result_ = object_path(builder_, level_ + 1);\n    }\n    else if (root_ == ONE_LINE_COMMENT_ELEMENT) {\n      result_ = one_line_comment_element(builder_, level_ + 1);\n    }\n    else if (root_ == UNSETTING) {\n      result_ = unsetting(builder_, level_ + 1);\n    }\n    else if (root_ == VALUE_MODIFICATION) {\n      result_ = value_modification(builder_, level_ + 1);\n    }\n    else {\n      Marker marker_ = builder_.mark();\n      result_ = c_style_comment_element(builder_, level_ + 1);\n      while (builder_.getTokenType() != null) {\n        builder_.advanceLexer();\n      }\n      marker_.done(root_);\n    }\n    return builder_.getTreeBuilt();\n  }","id":21534,"modified_method":"@NotNull\n  public ASTNode parse(final IElementType root_, final PsiBuilder builder_) {\n    int level_ = 0;\n    boolean result_;\n    if (root_ == ASSIGNMENT) {\n      result_ = assignment(builder_, level_ + 1);\n    }\n    else if (root_ == CODE_BLOCK) {\n      result_ = code_block(builder_, level_ + 1);\n    }\n    else if (root_ == CONDITION_ELEMENT) {\n      result_ = condition_element(builder_, level_ + 1);\n    }\n    else if (root_ == COPYING) {\n      result_ = copying(builder_, level_ + 1);\n    }\n    else if (root_ == INCLUDE_STATEMENT_ELEMENT) {\n      result_ = include_statement_element(builder_, level_ + 1);\n    }\n    else if (root_ == MULTILINE_VALUE_ASSIGNMENT) {\n      result_ = multiline_value_assignment(builder_, level_ + 1);\n    }\n    else if (root_ == OBJECT_PATH) {\n      result_ = object_path(builder_, level_ + 1);\n    }\n    else if (root_ == UNSETTING) {\n      result_ = unsetting(builder_, level_ + 1);\n    }\n    else if (root_ == VALUE_MODIFICATION) {\n      result_ = value_modification(builder_, level_ + 1);\n    }\n    else {\n      Marker marker_ = builder_.mark();\n      result_ = parse_root_(root_, builder_, level_);\n      while (builder_.getTokenType() != null) {\n        builder_.advanceLexer();\n      }\n      marker_.done(root_);\n    }\n    return builder_.getTreeBuilt();\n  }","commit_id":"21c484696da404d15d3cbd18031c611550e2fdad","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n\tpublic List<Object> getFoldersAndFileEntries(\n\t\t\tlong folderId, int start, int end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tList<Object> foldersAndFileEntries = getFoldersAndFileEntries(folderId);\n\n\t\tif (obc != null) {\n\t\t\tif (obc instanceof RepositoryModelCreateDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelModifiedDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelSizeComparator) {\n\n\t\t\t\tfoldersAndFileEntries = ListUtil.sort(\n\t\t\t\t\tfoldersAndFileEntries, obc);\n\t\t\t}\n\t\t\telse if (obc instanceof RepositoryModelNameComparator) {\n\t\t\t\tif (!obc.isAscending()) {\n\t\t\t\t\tfoldersAndFileEntries = ListUtil.sort(\n\t\t\t\t\t\tfoldersAndFileEntries, obc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {\n\t\t\treturn foldersAndFileEntries;\n\t\t}\n\t\telse {\n\t\t\treturn ListUtil.subList(foldersAndFileEntries, start, end);\n\t\t}\n\t}","id":21535,"modified_method":"@Override\n\tpublic List<Object> getFoldersAndFileEntries(\n\t\t\tlong folderId, int start, int end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tList<Object> foldersAndFileEntries = getFoldersAndFileEntries(folderId);\n\n\t\treturn sortAndPage(foldersAndFileEntries, start, end, obc);\n\t}","commit_id":"e0a6d43785141f1b3c8ac2cce762a2a598459cd1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected List<FileEntry> sortAndPage(List<FileEntry> fileEntries,\n\t\t\tint start, int end, OrderByComparator obc) {\n\t\tif (obc != null) {\n\t\t\tif (obc instanceof RepositoryModelCreateDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelModifiedDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelSizeComparator) {\n\n\t\t\t\tfileEntries = ListUtil.sort(fileEntries, obc);\n\t\t\t}\n\t\t\telse if (obc instanceof RepositoryModelNameComparator) {\n\t\t\t\tif (!obc.isAscending()) {\n\t\t\t\t\tfileEntries = ListUtil.sort(fileEntries, obc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {\n\t\t\treturn fileEntries;\n\t\t}\n\t\telse {\n\t\t\treturn ListUtil.subList(fileEntries, start, end);\n\t\t}\n\t}","id":21536,"modified_method":"protected <E> List<E> sortAndPage(List<E> list,\n\t\t\tint start, int end, OrderByComparator obc) {\n\t\tif (obc != null) {\n\t\t\tif (obc instanceof RepositoryModelCreateDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelModifiedDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelSizeComparator) {\n\n\t\t\t\tlist = ListUtil.sort(list, obc);\n\t\t\t}\n\t\t\telse if (obc instanceof RepositoryModelNameComparator) {\n\t\t\t\tif (!obc.isAscending()) {\n\t\t\t\t\tlist = ListUtil.sort(list, obc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {\n\t\t\treturn list;\n\t\t}\n\t\telse {\n\t\t\treturn ListUtil.subList(list, start, end);\n\t\t}\n\t}","commit_id":"e0a6d43785141f1b3c8ac2cce762a2a598459cd1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic int getFoldersAndFileEntriesCount(long folderId, String[] mimeTypes)\n\t\tthrows SystemException {\n\t\tint size = 0;\n\n\t\tif (mimeTypes != null && mimeTypes.length > 0) {\n\t\t\tgetFolders(folderId).size();\n\n\t\t\ttry {\n\t\t\t\tsize += getCmisDocumentIds(\n\t\t\t\t\t\tgetSession(), folderId, mimeTypes).size();\n\t\t\t} catch (PortalException e) {\n\t\t\t\tthrow new SystemException();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsize = getFoldersAndFileEntries(folderId).size();\n\t\t}\n\n\n\t\t\treturn size;\n\t}","id":21537,"modified_method":"@Override\n\tpublic int getFoldersAndFileEntriesCount(long folderId, String[] mimeTypes)\n\t\tthrows SystemException {\n\t\tint size = 0;\n\n\t\tif (mimeTypes != null && mimeTypes.length > 0) {\n\t\t\tsize = getFolders(folderId).size();\n\n\t\t\ttry {\n\t\t\t\tsize += getCmisDocumentIds(\n\t\t\t\t\t\tgetSession(), folderId, mimeTypes).size();\n\t\t\t} catch (PortalException e) {\n\t\t\t\tthrow new SystemException();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsize = getFoldersAndFileEntries(folderId).size();\n\t\t}\n\n\t\t\treturn size;\n\t}","commit_id":"e0a6d43785141f1b3c8ac2cce762a2a598459cd1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<Object> getFoldersAndFileEntries(\n\t\t\tlong folderId, String[] mimeTypes, int start, int end,\n\t\t\tOrderByComparator obc)\n\t\tthrows SystemException {\n\t\tboolean useCache = (mimeTypes == null);\n\n\t\tMap<Long, List<Object>> foldersAndFileEntriesCache =\n\t\t\t_foldersAndFileEntriesCache.get();\n\n\t\tList<Object> foldersAndFileEntries =\n\t\t\tfoldersAndFileEntriesCache.get(folderId);\n\n\t\tif (null == foldersAndFileEntries || !useCache) {\n\t\t\tfoldersAndFileEntries = new ArrayList<Object>(getFolders(folderId));\n\n\t\t\tfoldersAndFileEntries.addAll(\n\t\t\t\t\tgetFileEntries(\n\t\t\t\t\t\t\tfolderId, mimeTypes,\n\t\t\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS, null));\n\n\t\t\tif (useCache) {\n\t\t\t\tfoldersAndFileEntriesCache.put(folderId, foldersAndFileEntries);\n\t\t\t}\n\t\t}\n\n\t\tif (obc != null) {\n\t\t\tif (obc instanceof RepositoryModelCreateDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelModifiedDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelSizeComparator) {\n\n\t\t\t\tfoldersAndFileEntries = ListUtil.sort(\n\t\t\t\t\tfoldersAndFileEntries, obc);\n\t\t\t}\n\t\t\telse if (obc instanceof RepositoryModelNameComparator) {\n\t\t\t\tif (!obc.isAscending()) {\n\t\t\t\t\tfoldersAndFileEntries = ListUtil.sort(\n\t\t\t\t\t\tfoldersAndFileEntries, obc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {\n\t\t\treturn foldersAndFileEntries;\n\t\t}\n\t\telse {\n\t\t\treturn ListUtil.subList(foldersAndFileEntries, start, end);\n\t\t}\n\t}","id":21538,"modified_method":"public List<Object> getFoldersAndFileEntries(\n\t\t\tlong folderId, String[] mimeTypes, int start, int end,\n\t\t\tOrderByComparator obc)\n\t\tthrows SystemException {\n\t\tboolean useCache = (mimeTypes == null);\n\n\t\tMap<Long, List<Object>> foldersAndFileEntriesCache =\n\t\t\t_foldersAndFileEntriesCache.get();\n\n\t\tList<Object> foldersAndFileEntries =\n\t\t\tfoldersAndFileEntriesCache.get(folderId);\n\n\t\tif (null == foldersAndFileEntries || !useCache) {\n\t\t\tfoldersAndFileEntries = new ArrayList<Object>(getFolders(folderId));\n\n\t\t\tfoldersAndFileEntries.addAll(\n\t\t\t\t\tgetFileEntries(\n\t\t\t\t\t\t\tfolderId, mimeTypes,\n\t\t\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS, null));\n\n\t\t\tif (useCache) {\n\t\t\t\tfoldersAndFileEntriesCache.put(folderId, foldersAndFileEntries);\n\t\t\t}\n\t\t}\n\n\t\treturn sortAndPage(foldersAndFileEntries, start, end, obc);\n\t}","commit_id":"e0a6d43785141f1b3c8ac2cce762a2a598459cd1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<Folder> getFolders(\n\t\t\tlong parentFolderId, boolean includeMountfolders, int start,\n\t\t\tint end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tList<Folder> folders = getFolders(parentFolderId);\n\n\t\tif (obc != null) {\n\t\t\tif (obc instanceof RepositoryModelCreateDateComparator ||\n\t\t\t\tobc instanceof RepositoryModelModifiedDateComparator) {\n\n\t\t\t\tfolders = ListUtil.sort(folders, obc);\n\t\t\t}\n\t\t\telse if (obc instanceof RepositoryModelNameComparator) {\n\t\t\t\tif (!obc.isAscending()) {\n\t\t\t\t\tfolders = ListUtil.sort(folders, obc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {\n\t\t\treturn folders;\n\t\t}\n\t\telse {\n\t\t\treturn ListUtil.subList(folders, start, end);\n\t\t}\n\t}","id":21539,"modified_method":"public List<Folder> getFolders(\n\t\t\tlong parentFolderId, boolean includeMountfolders, int start,\n\t\t\tint end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tList<Folder> folders = getFolders(parentFolderId);\n\n\t\treturn sortAndPage(folders, start, end, obc);\n\t}","commit_id":"e0a6d43785141f1b3c8ac2cce762a2a598459cd1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    Classifier res = createClassifierForClass(name, myModel, reader);\n    adder.invoke(res.getNode());\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","id":21540,"modified_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    SNode res = createClassifierForClass(name, reader);\n    adder.invoke(res);\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateInnerClassifiers(ASMClass ac, final Classifier cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          cls.addStaticInnerClassifiers(((Classifier) ((BaseConcept) SNodeOperations.getAdapter(n))));\n        }\n      });\n    }\n  }","id":21541,"modified_method":"public void updateInnerClassifiers(ASMClass ac, final SNode cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticInnerClassifiers\", true)).addElement(n);\n        }\n      });\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Classifier createClassifierForClass(String fqName, SModel model, ClassReader reader) {\n    Classifier result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = ClassConcept.newInstance(model);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = Interface.newInstance(model);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = Annotation.newInstance(model);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = EnumClass.newInstance(model);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    result.setName(NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.getNode().setId(ASMNodeId.createId(fqName));\n    return result;\n  }","id":21542,"modified_method":"private SNode createClassifierForClass(String fqName, ClassReader reader) {\n    SNode result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", null);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Interface\", null);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Annotation\", null);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumClass\", null);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    SPropertyOperations.set(result, \"name\", NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.setId(ASMNodeId.createId(fqName));\n    return result;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotations(ASMClass ac, Classifier cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      cls.addAnnotation(createAnnotation(annotation, cls.getModel()));\n    }\n  }","id":21543,"modified_method":"private void updateAnnotations(ASMClass ac, SNode cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"annotation\", true)).addElement(createAnnotation(annotation));\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Pair<String, String> p = new Pair<String, String>(packageName, myModule.getModuleFqName());\n      if (!(reported.contains(p))) {\n        reported.add(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","id":21544,"modified_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Tuples._2<String, String> p = MultiTuple.<String,String>from(packageName, myModule.getModuleFqName());\n      if (!(SetSequence.fromSet(reported).contains(p))) {\n        SetSequence.fromSet(reported).addElement(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceMethods(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      InstanceMethodDeclaration methodDeclaration = InstanceMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsFinal(m.isFinal());\n      methodDeclaration.setIsAbstract(m.isAbstract());\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addMethod(methodDeclaration);\n    }\n  }","id":21545,"modified_method":"private void updateInstanceMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", null);\n      SPropertyOperations.set(md, \"isAbstract\", \"\" + m.isAbstract());\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      this.updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"method\", true)).addElement(md);\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateClassifier(IModule module, final Classifier clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (clsfr instanceof Annotation) {\n      final Annotation annotation = (Annotation) clsfr;\n      if (ac.isPublic()) {\n        annotation.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        annotation.setVisibility(null);\n      }\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (clsfr instanceof ClassConcept) {\n      final ClassConcept cls = (ClassConcept) clsfr;\n      if (ac.isPublic()) {\n        cls.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        cls.setVisibility(null);\n      }\n      cls.setAbstractClass(ac.isAbstract());\n      cls.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls.getModel(), cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n      cls.setIsFinal(ac.isFinal());\n    } else if (clsfr instanceof Interface) {\n      final Interface intfc = (Interface) clsfr;\n      if (ac.isPublic()) {\n        intfc.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        intfc.setVisibility(null);\n      }\n      intfc.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc.getModel(), intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    }\n  }","id":21546,"modified_method":"public void updateClassifier(IModule module, final SNode clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\")) {\n      SNode annotation = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\");\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      SNode cls = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n      SPropertyOperations.set(cls, \"abstractClass\", \"\" + ac.isAbstract());\n      SPropertyOperations.set(cls, \"isDeprecated\", \"\" + ac.isDeprecated());\n      SPropertyOperations.set(cls, \"isFinal\", \"\" + ac.isFinal());\n\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      SNode intfc = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\");\n      SPropertyOperations.set(intfc, \"isDeprecated\", \"\" + ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    } else {\n      return;\n    }\n\n    SLinkOperations.setTarget(clsfr, \"visibility\", (ac.isPublic() ?\n      new ClassifierUpdater.QuotationClass_ol94f8_a0a0e0a().createNode() :\n      null\n    ), true);\n\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateTypeVariables(ASMMethod method, SModel model, BaseMethodDeclaration result, Classifier cls) {\n    Map<ASMTypeVariable, TypeVariableDeclaration> typeVars = new HashMap<ASMTypeVariable, TypeVariableDeclaration>();\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      typeVars.put(tv, typeVariableDeclaration);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = typeVars.get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), result, cls, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, result, cls, model));\n        }\n      }\n    }\n  }","id":21547,"modified_method":"private void updateTypeVariables(ASMMethod method, SNode result, SNode cls) {\n    Map<ASMTypeVariable, SNode> typeVars = MapSequence.fromMap(new HashMap<ASMTypeVariable, SNode>());\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a2().createNode(tv.getName());\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"typeVariableDeclaration\", true)).addElement(tvd);\n      MapSequence.fromMap(typeVars).put(tv, tvd);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = MapSequence.fromMap(typeVars).get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          SLinkOperations.setTarget(tvd, \"bound\", getTypeByASMType(tp.getClassBound(), result, cls), true);\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          ListSequence.fromList(SLinkOperations.getTargets(tvd, \"auxBounds\", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, result, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n        }\n      }\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addAnnotationsToParameter(ParameterDeclaration pd, List<ASMAnnotation> annotations) {\n    for (ASMAnnotation a : annotations) {\n      pd.addAnnotation(createAnnotation(a, pd.getModel()));\n    }\n  }","id":21548,"modified_method":"private void addAnnotationsToParameter(SNode pd, List<ASMAnnotation> anns) {\n    ListSequence.fromList(SLinkOperations.getTargets(pd, \"annotation\", true)).addSequence(ListSequence.fromList(anns).<SNode>select(new ISelector<ASMAnnotation, SNode>() {\n      public SNode select(ASMAnnotation it) {\n        return createAnnotation(it);\n      }\n    }));\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private TypeVariableReference createTypeVariableReference(GenericDeclaration genDecl, String name) {\n    TypeVariableReference result = TypeVariableReference.newInstance(genDecl.getModel());\n    result.setTypeVariableDeclaration(findTypeVariableDeclaration(genDecl, name));\n    return result;\n  }","id":21549,"modified_method":"private SNode createTypeVariableReference(SNode genDecl, String name) {\n    return new ClassifierUpdater.QuotationClass_ol94f8_a0a0e().createNode(findTypeVariableDeclaration(genDecl, name));\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected Visibility createVisibility(ASMField f, SModel model) {\n    if (f.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (f.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (f.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","id":21550,"modified_method":"protected SNode createVisibility(ASMField f) {\n    if (f.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0r().createNode();\n    }\n    if (f.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0r().createNode();\n    }\n    if (f.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0r().createNode();\n    }\n    return null;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsAndImplements(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(refSuperclass, null, cls, model);\n      cls.setSuperclass(classifierType);\n    }\n    for (ClassifierType itype : cls.getImplementedInterfaces()) {\n      itype.delete();\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, cls, model);\n      cls.addImplementedInterface(classifierType);\n    }\n  }","id":21551,"modified_method":"private void updateExtendsAndImplements(ASMClass ac, SNode cls) {\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      SLinkOperations.setTarget(cls, \"superclass\", SNodeOperations.cast(getTypeByASMType(refSuperclass, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"), true);\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"implementedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticMethods(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (cls instanceof EnumClass && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n      StaticMethodDeclaration methodDeclaration = StaticMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      if (m.isFinal()) {\n        methodDeclaration.setIsFinal(true);\n      }\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      cls.addStaticMethod(methodDeclaration);\n    }\n  }","id":21552,"modified_method":"private void updateStaticMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\") && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", null);\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticMethod\", true)).addElement(md);\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Expression getAnnotationValue(Object value, SModel model) {\n    if (value instanceof Byte) {\n      Byte b = (Byte) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Boolean) {\n      Boolean b = (Boolean) value;\n      BooleanConstant res = BooleanConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Short) {\n      Short s = (Short) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof Integer) {\n      Integer i = (Integer) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(i);\n      return res;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      Float f = (Float) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + f);\n      return res;\n    }\n    if (value instanceof Double) {\n      Double d = (Double) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + d);\n      return res;\n    }\n    if (value instanceof String) {\n      String s = (String) value;\n      StringLiteral res = StringLiteral.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof List) {\n      List<Object> list = (List) value;\n      ArrayLiteral res = ArrayLiteral.newInstance(model);\n      for (Object o : list) {\n        Expression annotationValue = getAnnotationValue(o, model);\n        if (annotationValue != null) {\n          res.addItem(annotationValue);\n        }\n      }\n      return res;\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      EnumConstantReference res = EnumConstantReference.newInstance(model);\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      addClassifierReference(res.getNode(), EnumConstantReference.ENUM_CLASS, c);\n      addEnumConstReference(res.getNode(), EnumConstantReference.ENUM_CONSTANT_DECLARATION, enumValue);\n      return res;\n    }\n    if (value instanceof ASMAnnotation) {\n      ASMAnnotation annotation = (ASMAnnotation) value;\n      AnnotationInstanceExpression res = AnnotationInstanceExpression.newInstance(model);\n      res.setAnnotationInstance(createAnnotation(annotation, model));\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      ASMClassType classType = (ASMClassType) value;\n      ClassifierClassExpression res = ClassifierClassExpression.newInstance(model);\n      addClassifierReference(res.getNode(), ClassifierClassExpression.CLASSIFIER, classType);\n      return res;\n    }\n    if (value instanceof ASMPrimitiveType) {\n      ASMPrimitiveType primitiveType = (ASMPrimitiveType) value;\n      PrimitiveClassExpression res = PrimitiveClassExpression.newInstance(model);\n      res.setPrimitiveType((PrimitiveType) getTypeByASMType(primitiveType, null, null, model));\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","id":21553,"modified_method":"private SNode getAnnotationValue(Object value) {\n    if (value instanceof Integer) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0u().createNode(value.toString());\n    }\n    if (value instanceof Byte) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0u().createNode(value.toString());\n    }\n    if (value instanceof Short) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0u().createNode(value.toString());\n    }\n    if (value instanceof Boolean) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0d0u().createNode(value.toString());\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0u().createNode(value.toString());\n    }\n    if (value instanceof Double) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0h0u().createNode(value.toString());\n    }\n    if (value instanceof String) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0i0u().createNode(value.toString());\n    }\n    if (value instanceof ASMAnnotation) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0j0u().createNode(createAnnotation((ASMAnnotation) value));\n    }\n    if (value instanceof ASMPrimitiveType) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0k0u().createNode(SNodeOperations.cast(getTypeByASMType((ASMPrimitiveType) value, null, null), \"jetbrains.mps.baseLanguage.structure.PrimitiveType\"));\n    }\n    if (value instanceof List) {\n      List<Object> list = (List<Object>) value;\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0b0l0u().createNode(ListSequence.fromList(list).<SNode>select(new ISelector<Object, SNode>() {\n        public SNode select(Object it) {\n          return getAnnotationValue(it);\n        }\n      }).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return (it != null);\n        }\n      }).toListSequence());\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a2a21a02().createNode();\n      addClassifierReference(res, EnumConstantReference.ENUM_CLASS, c);\n      addEnumConstReference(res, EnumConstantReference.ENUM_CONSTANT_DECLARATION, enumValue);\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a31a02().createNode();\n      addClassifierReference(res, ClassifierClassExpression.CLASSIFIER, (ASMClassType) value);\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, BaseMethodDeclaration method, Classifier classifier, ClassifierType result) {\n    List<Type> toAdd = new ArrayList<Type>();\n    for (ASMType tv : typeParameters) {\n      Type type = getTypeByASMType(tv, method, classifier, result.getModel());\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    for (Type tvr : toAdd) {\n      result.addParameter(tvr);\n    }\n  }","id":21554,"modified_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, SNode method, SNode classifier, SNode result) {\n    List<SNode> toAdd = new ArrayList<SNode>();\n    for (ASMType tv : typeParameters) {\n      SNode type = getTypeByASMType(tv, method, classifier);\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    ListSequence.fromList(SLinkOperations.getTargets(result, \"parameter\", true)).addSequence(ListSequence.fromList(toAdd));\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected Visibility createVisibility(ASMMethod m, SModel model) {\n    if (m.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (m.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (m.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","id":21555,"modified_method":"protected SNode createVisibility(ASMMethod m) {\n    if (m.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0q().createNode();\n    }\n    if (m.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0q().createNode();\n    }\n    if (m.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0q().createNode();\n    }\n    return null;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private TypeVariableDeclaration findTypeVariableDeclaration(GenericDeclaration genDecl, String name) {\n    for (TypeVariableDeclaration tvd : IterableUtil.asIterable(genDecl.typeVariableDeclarations())) {\n      if (name.equals(tvd.getName())) {\n        return tvd;\n      }\n    }\n    return null;\n  }","id":21556,"modified_method":"private SNode findTypeVariableDeclaration(SNode genDecl, final String name) {\n    return ListSequence.fromList(SLinkOperations.getTargets(genDecl, \"typeVariableDeclaration\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return eq_ol94f8_a0a0a0a0a0a0a3(SPropertyOperations.getString(it, \"name\"), name);\n      }\n    }).first();\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotationMethods(ASMClass refCls, Annotation annotation) {\n    SModel model = annotation.getModel();\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      AnnotationMethodDeclaration methodDeclaration = AnnotationMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(refCls, m));\n      methodDeclaration.setVisibility(PublicVisibility.newInstance(model));\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), null, annotation, model));\n      methodDeclaration.getNode().setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      if (m.getAnnotationDefault() != null) {\n        methodDeclaration.setDefaultValue(getAnnotationValue(m.getAnnotationDefault(), model));\n      }\n      annotation.addMethod(methodDeclaration);\n    }\n  }","id":21557,"modified_method":"private void updateAnnotationMethods(ASMClass refCls, final SNode annotation) {\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      SNode md = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a01().createNode(getTypeByASMType(m.getGenericReturnType(), null, annotation), m.getName());\n      SLinkOperations.setTarget(md, \"visibility\", new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a01().createNode(), true);\n      if (m.getAnnotationDefault() != null) {\n        SLinkOperations.setTarget(md, \"defaultValue\", getAnnotationValue(m.getAnnotationDefault()), true);\n      }\n\n      md.setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      ListSequence.fromList(SLinkOperations.getTargets(annotation, \"method\", true)).addElement(md);\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceFields(ASMClass refCls, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      FieldDeclaration decl = FieldDeclaration.newInstance(model);\n      decl.getNode().setId(ASMNodeId.createId(refCls, field));\n      decl.setVisibility(createVisibility(field, model));\n      decl.setName(field.getName());\n      decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n      decl.setIsDeprecated(field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        decl.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addField(decl);\n    }\n  }","id":21558,"modified_method":"private void updateInstanceFields(ASMClass refCls, SNode cls) {\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a3a0a8().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n      SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n\n      decl.setId(ASMNodeId.createId(refCls, field));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"field\", true)).addElement(decl);\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsForInterface(ASMClass ac, Interface intfc) {\n    SModel model = intfc.getModel();\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, intfc, model);\n      intfc.addExtendedInterface(classifierType);\n    }\n  }","id":21559,"modified_method":"private void updateExtendsForInterface(ASMClass ac, SNode intfc) {\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(intfc, \"extendedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, intfc), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private AnnotationInstance createAnnotation(ASMAnnotation annotation, SModel model) {\n    AnnotationInstance result = AnnotationInstance.newInstance(model);\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result.getNode(), AnnotationInstance.ANNOTATION, c);\n    Map<String, Object> values = annotation.getValues();\n    for (String key : values.keySet()) {\n      AnnotationInstanceValue value = AnnotationInstanceValue.newInstance(model);\n      addAnnotationMethodReference(value.getNode(), AnnotationInstanceValue.KEY, c, key);\n      value.setValue(getAnnotationValue(values.get(key), model));\n      result.addValue(value);\n    }\n    return result;\n  }","id":21560,"modified_method":"private SNode createAnnotation(ASMAnnotation annotation) {\n    SNode result = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a91().createNode();\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result, AnnotationInstance.ANNOTATION, c);\n    Map<String, Object> values = ((Map<String, Object>) annotation.getValues());\n    for (String key : MapSequence.fromMap(values).keySet()) {\n      SNode value = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a4a91().createNode(getAnnotationValue(MapSequence.fromMap(values).get(key)));\n      addAnnotationMethodReference(value, AnnotationInstanceValue.KEY, c, key);\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"value\", true)).addElement(value);\n    }\n    return result;\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticFields(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        EnumClass enumClass = (EnumClass) cls;\n        EnumConstantDeclaration enumConstantDeclaration = EnumConstantDeclaration.newInstance(model);\n        enumConstantDeclaration.getNode().setId(ASMNodeId.createId(ac, field));\n        enumConstantDeclaration.setName(field.getName());\n        enumClass.addEnumConstant(enumConstantDeclaration);\n      } else {\n        StaticFieldDeclaration decl = StaticFieldDeclaration.newInstance(model);\n        decl.getNode().setId(ASMNodeId.createId(ac, field));\n        decl.setVisibility(createVisibility(field, model));\n        decl.setName(field.getName());\n        decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n        decl.setIsDeprecated(field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          decl.addAnnotation(createAnnotation(annotation, model));\n        }\n        if (field.isFinal()) {\n          decl.setIsFinal(true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              IntegerConstant initialValue = IntegerConstant.newInstance(model);\n              initialValue.setValue((Integer) value);\n              decl.setInitializer(initialValue);\n            } else if (value instanceof String) {\n              StringLiteral initialValue = StringLiteral.newInstance(model);\n              initialValue.setValue((String) value);\n              decl.setInitializer(initialValue);\n            }\n          }\n        }\n        cls.addStaticField(decl);\n      }\n    }\n  }","id":21561,"modified_method":"private void updateStaticFields(ASMClass ac, SNode cls) {\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        SNode enumClass = SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\");\n        SNode ecd = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a3a0a9().createNode(field.getName());\n\n        ecd.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(enumClass, \"enumConstant\", true)).addElement(ecd);\n      } else {\n        SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0j().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n        SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n        }\n        if (field.isFinal()) {\n          SPropertyOperations.set(decl, \"isFinal\", \"\" + true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j().createNode(value.toString()), true);\n            } else if (value instanceof String) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9().createNode((String) value), true);\n            }\n          }\n        }\n\n        decl.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticField\", true)).addElement(decl);\n      }\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateConstructors(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      ConstructorDeclaration constructor = ConstructorDeclaration.newInstance(model);\n      constructor.getNode().setId(ASMNodeId.createId(ac, c));\n      constructor.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n\n      constructor.setVisibility(createVisibility(c, model));\n      constructor.setIsDeprecated(c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(cls.getModel());\n        typeVariableDeclaration.setName(tv.getName());\n        constructor.addTypeVariableDeclaration(typeVariableDeclaration);\n      }\n      constructor.setName(cls.getName());\n      List<ASMType> parameterType = c.getGenericParameterTypes();\n      List<String> parameterNames = c.getParameterNames();\n      for (int i = 0; i < parameterType.size(); i++) {\n        ASMType pt = parameterType.get(i);\n        ParameterDeclaration pd = ParameterDeclaration.newInstance(model);\n        pd.setName(parameterNames.get(i));\n        pd.setType(getTypeByASMType(pt, constructor, cls, model));\n        addAnnotationsToParameter(pd, c.getParameterAnnotations().get(i));\n        constructor.addParameter(pd);\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        constructor.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        constructor.addThrowsItem(getTypeByASMType(exception, constructor, cls, model));\n      }\n      cls.addConstructor(constructor);\n    }\n  }","id":21562,"modified_method":"private void updateConstructors(ASMClass ac, final SNode cls) {\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      SNode constructor = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a11().createNode(createVisibility(c), SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null), SPropertyOperations.getString(cls, \"name\"));\n      SPropertyOperations.set(constructor, \"isDeprecated\", \"\" + c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"typeVariableDeclaration\", true)).addElement(new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0l().createNode(tv.getName()));\n      }\n      {\n        ASMType pt;\n        String pn;\n        List<ASMAnnotation> pa;\n        Iterator<ASMType> pt_iterator = ListSequence.fromList(c.getGenericParameterTypes()).iterator();\n        Iterator<String> pn_iterator = ListSequence.fromList(c.getParameterNames()).iterator();\n        Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(c.getParameterAnnotations()).iterator();\n        while (true) {\n          if (!(pt_iterator.hasNext())) {\n            break;\n          }\n          if (!(pn_iterator.hasNext())) {\n            break;\n          }\n          if (!(pa_iterator.hasNext())) {\n            break;\n          }\n          pt = pt_iterator.next();\n          pn = pn_iterator.next();\n          pa = pa_iterator.next();\n          {\n            SNode pd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a6a6a4a0a11().createNode(getTypeByASMType(pt, constructor, cls), pn);\n            addAnnotationsToParameter(pd, pa);\n            ListSequence.fromList(SLinkOperations.getTargets(constructor, \"parameter\", true)).addElement(pd);\n          }\n        }\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"throwsItem\", true)).addElement(getTypeByASMType(exception, constructor, cls));\n      }\n\n      constructor.setId(ASMNodeId.createId(ac, c));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"constructor\", true)).addElement(constructor);\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateTypeVariables(ASMClass cls, SModel model, Classifier result) {\n    for (ASMTypeVariable tv : cls.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), null, result, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, null, result, model));\n        }\n      }\n    }\n  }","id":21563,"modified_method":"private void updateTypeVariables(ASMClass cls, SNode result) {\n    for (ASMTypeVariable tv : cls.getTypeParameters()) {\n      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a1().createNode(tv.getName());\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"typeVariableDeclaration\", true)).addElement(tvd);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          SLinkOperations.setTarget(tvd, \"bound\", getTypeByASMType(tp.getClassBound(), null, result), true);\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          ListSequence.fromList(SLinkOperations.getTargets(tvd, \"auxBounds\", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, null, result), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n        }\n      }\n    }\n  }","commit_id":"a48a87e780a007645d43eb64ea7d990066be4c8b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    Classifier res = createClassifierForClass(name, myModel, reader);\n    adder.invoke(res.getNode());\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","id":21564,"modified_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    SNode res = createClassifierForClass(name, reader);\n    adder.invoke(res);\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Classifier createClassifierForClass(String fqName, SModel model, ClassReader reader) {\n    Classifier result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = ClassConcept.newInstance(model);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = Interface.newInstance(model);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = Annotation.newInstance(model);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = EnumClass.newInstance(model);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    result.setName(NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.getNode().setId(ASMNodeId.createId(fqName));\n    return result;\n  }","id":21565,"modified_method":"private SNode createClassifierForClass(String fqName, ClassReader reader) {\n    SNode result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", null);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Interface\", null);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Annotation\", null);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumClass\", null);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    SPropertyOperations.set(result, \"name\", NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.setId(ASMNodeId.createId(fqName));\n    return result;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateInnerClassifiers(ASMClass ac, final Classifier cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          cls.addStaticInnerClassifiers(((Classifier) ((BaseConcept) SNodeOperations.getAdapter(n))));\n        }\n      });\n    }\n  }","id":21566,"modified_method":"public void updateInnerClassifiers(ASMClass ac, final SNode cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticInnerClassifiers\", true)).addElement(n);\n        }\n      });\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Expression getAnnotationValue(Object value, SModel model) {\n    if (value instanceof Byte) {\n      Byte b = (Byte) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Boolean) {\n      Boolean b = (Boolean) value;\n      BooleanConstant res = BooleanConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Short) {\n      Short s = (Short) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof Integer) {\n      Integer i = (Integer) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(i);\n      return res;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      Float f = (Float) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + f);\n      return res;\n    }\n    if (value instanceof Double) {\n      Double d = (Double) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + d);\n      return res;\n    }\n    if (value instanceof String) {\n      String s = (String) value;\n      StringLiteral res = StringLiteral.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof List) {\n      List<Object> list = (List) value;\n      ArrayLiteral res = ArrayLiteral.newInstance(model);\n      for (Object o : list) {\n        Expression annotationValue = getAnnotationValue(o, model);\n        if (annotationValue != null) {\n          res.addItem(annotationValue);\n        }\n      }\n      return res;\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      EnumConstantReference res = EnumConstantReference.newInstance(model);\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      addClassifierReference(res.getNode(), EnumConstantReference.ENUM_CLASS, c);\n      addEnumConstReference(res.getNode(), EnumConstantReference.ENUM_CONSTANT_DECLARATION, enumValue);\n      return res;\n    }\n    if (value instanceof ASMAnnotation) {\n      ASMAnnotation annotation = (ASMAnnotation) value;\n      AnnotationInstanceExpression res = AnnotationInstanceExpression.newInstance(model);\n      res.setAnnotationInstance(createAnnotation(annotation, model));\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      ASMClassType classType = (ASMClassType) value;\n      ClassifierClassExpression res = ClassifierClassExpression.newInstance(model);\n      addClassifierReference(res.getNode(), ClassifierClassExpression.CLASSIFIER, classType);\n      return res;\n    }\n    if (value instanceof ASMPrimitiveType) {\n      ASMPrimitiveType primitiveType = (ASMPrimitiveType) value;\n      PrimitiveClassExpression res = PrimitiveClassExpression.newInstance(model);\n      res.setPrimitiveType((PrimitiveType) getTypeByASMType(primitiveType, null, null, model));\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","id":21567,"modified_method":"private SNode getAnnotationValue(Object value) {\n    if (value instanceof Integer) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0u().createNode(value.toString());\n    }\n    if (value instanceof Byte) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0u().createNode(value.toString());\n    }\n    if (value instanceof Short) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0u().createNode(value.toString());\n    }\n    if (value instanceof Boolean) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0d0u().createNode(value.toString());\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0u().createNode(value.toString());\n    }\n    if (value instanceof Double) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0h0u().createNode(value.toString());\n    }\n    if (value instanceof String) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0i0u().createNode(value.toString());\n    }\n    if (value instanceof ASMAnnotation) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0j0u().createNode(createAnnotation((ASMAnnotation) value));\n    }\n    if (value instanceof ASMPrimitiveType) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0k0u().createNode(SNodeOperations.cast(getTypeByASMType((ASMPrimitiveType) value, null, null), \"jetbrains.mps.baseLanguage.structure.PrimitiveType\"));\n    }\n    if (value instanceof List) {\n      List<Object> list = (List<Object>) value;\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0b0l0u().createNode(ListSequence.fromList(list).<SNode>select(new ISelector<Object, SNode>() {\n        public SNode select(Object it) {\n          return getAnnotationValue(it);\n        }\n      }).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return (it != null);\n        }\n      }).toListSequence());\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a2a21a02().createNode();\n      addClassifierReference(res, \"enumClass\", c);\n      addEnumConstReference(res, \"enumConstantDeclaration\", enumValue);\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a31a02().createNode();\n      addClassifierReference(res, \"classifier\", (ASMClassType) value);\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private TypeVariableDeclaration findTypeVariableDeclaration(GenericDeclaration genDecl, String name) {\n    for (TypeVariableDeclaration tvd : IterableUtil.asIterable(genDecl.typeVariableDeclarations())) {\n      if (name.equals(tvd.getName())) {\n        return tvd;\n      }\n    }\n    return null;\n  }","id":21568,"modified_method":"private SNode findTypeVariableDeclaration(SNode genDecl, final String name) {\n    return ListSequence.fromList(SLinkOperations.getTargets(genDecl, \"typeVariableDeclaration\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return eq_ol94f8_a0a0a0a0a0a0a3(SPropertyOperations.getString(it, \"name\"), name);\n      }\n    }).first();\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateClassifier(IModule module, final Classifier clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (clsfr instanceof Annotation) {\n      final Annotation annotation = (Annotation) clsfr;\n      if (ac.isPublic()) {\n        annotation.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        annotation.setVisibility(null);\n      }\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (clsfr instanceof ClassConcept) {\n      final ClassConcept cls = (ClassConcept) clsfr;\n      if (ac.isPublic()) {\n        cls.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        cls.setVisibility(null);\n      }\n      cls.setAbstractClass(ac.isAbstract());\n      cls.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls.getModel(), cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n      cls.setIsFinal(ac.isFinal());\n    } else if (clsfr instanceof Interface) {\n      final Interface intfc = (Interface) clsfr;\n      if (ac.isPublic()) {\n        intfc.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        intfc.setVisibility(null);\n      }\n      intfc.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc.getModel(), intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    }\n  }","id":21569,"modified_method":"public void updateClassifier(IModule module, final SNode clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\")) {\n      SNode annotation = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\");\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      SNode cls = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n      SPropertyOperations.set(cls, \"abstractClass\", \"\" + ac.isAbstract());\n      SPropertyOperations.set(cls, \"isDeprecated\", \"\" + ac.isDeprecated());\n      SPropertyOperations.set(cls, \"isFinal\", \"\" + ac.isFinal());\n\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      SNode intfc = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\");\n      SPropertyOperations.set(intfc, \"isDeprecated\", \"\" + ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    } else {\n      return;\n    }\n\n    SLinkOperations.setTarget(clsfr, \"visibility\", (ac.isPublic() ?\n      new ClassifierUpdater.QuotationClass_ol94f8_a0a0e0a().createNode() :\n      null\n    ), true);\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected Visibility createVisibility(ASMField f, SModel model) {\n    if (f.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (f.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (f.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","id":21570,"modified_method":"protected SNode createVisibility(ASMField f) {\n    if (f.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0r().createNode();\n    }\n    if (f.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0r().createNode();\n    }\n    if (f.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0r().createNode();\n    }\n    return null;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticFields(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        EnumClass enumClass = (EnumClass) cls;\n        EnumConstantDeclaration enumConstantDeclaration = EnumConstantDeclaration.newInstance(model);\n        enumConstantDeclaration.getNode().setId(ASMNodeId.createId(ac, field));\n        enumConstantDeclaration.setName(field.getName());\n        enumClass.addEnumConstant(enumConstantDeclaration);\n      } else {\n        StaticFieldDeclaration decl = StaticFieldDeclaration.newInstance(model);\n        decl.getNode().setId(ASMNodeId.createId(ac, field));\n        decl.setVisibility(createVisibility(field, model));\n        decl.setName(field.getName());\n        decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n        decl.setIsDeprecated(field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          decl.addAnnotation(createAnnotation(annotation, model));\n        }\n        if (field.isFinal()) {\n          decl.setIsFinal(true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              IntegerConstant initialValue = IntegerConstant.newInstance(model);\n              initialValue.setValue((Integer) value);\n              decl.setInitializer(initialValue);\n            } else if (value instanceof String) {\n              StringLiteral initialValue = StringLiteral.newInstance(model);\n              initialValue.setValue((String) value);\n              decl.setInitializer(initialValue);\n            }\n          }\n        }\n        cls.addStaticField(decl);\n      }\n    }\n  }","id":21571,"modified_method":"private void updateStaticFields(ASMClass ac, SNode cls) {\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        SNode enumClass = SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\");\n        SNode ecd = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a3a0a9().createNode(field.getName());\n\n        ecd.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(enumClass, \"enumConstant\", true)).addElement(ecd);\n      } else {\n        SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0j().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n        SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n        }\n        if (field.isFinal()) {\n          SPropertyOperations.set(decl, \"isFinal\", \"\" + true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j().createNode(value.toString()), true);\n            } else if (value instanceof String) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9().createNode((String) value), true);\n            }\n          }\n        }\n\n        decl.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticField\", true)).addElement(decl);\n      }\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticMethods(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (cls instanceof EnumClass && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n      StaticMethodDeclaration methodDeclaration = StaticMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      if (m.isFinal()) {\n        methodDeclaration.setIsFinal(true);\n      }\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      cls.addStaticMethod(methodDeclaration);\n    }\n  }","id":21572,"modified_method":"private void updateStaticMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\") && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", null);\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticMethod\", true)).addElement(md);\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotationMethods(ASMClass refCls, Annotation annotation) {\n    SModel model = annotation.getModel();\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      AnnotationMethodDeclaration methodDeclaration = AnnotationMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(refCls, m));\n      methodDeclaration.setVisibility(PublicVisibility.newInstance(model));\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), null, annotation, model));\n      methodDeclaration.getNode().setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      if (m.getAnnotationDefault() != null) {\n        methodDeclaration.setDefaultValue(getAnnotationValue(m.getAnnotationDefault(), model));\n      }\n      annotation.addMethod(methodDeclaration);\n    }\n  }","id":21573,"modified_method":"private void updateAnnotationMethods(ASMClass refCls, final SNode annotation) {\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      SNode md = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a01().createNode(getTypeByASMType(m.getGenericReturnType(), null, annotation), m.getName());\n      SLinkOperations.setTarget(md, \"visibility\", new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a01().createNode(), true);\n      if (m.getAnnotationDefault() != null) {\n        SLinkOperations.setTarget(md, \"defaultValue\", getAnnotationValue(m.getAnnotationDefault()), true);\n      }\n\n      md.setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      ListSequence.fromList(SLinkOperations.getTargets(annotation, \"method\", true)).addElement(md);\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceFields(ASMClass refCls, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      FieldDeclaration decl = FieldDeclaration.newInstance(model);\n      decl.getNode().setId(ASMNodeId.createId(refCls, field));\n      decl.setVisibility(createVisibility(field, model));\n      decl.setName(field.getName());\n      decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n      decl.setIsDeprecated(field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        decl.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addField(decl);\n    }\n  }","id":21574,"modified_method":"private void updateInstanceFields(ASMClass refCls, SNode cls) {\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a3a0a8().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n      SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n\n      decl.setId(ASMNodeId.createId(refCls, field));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"field\", true)).addElement(decl);\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addAnnotationsToParameter(ParameterDeclaration pd, List<ASMAnnotation> annotations) {\n    for (ASMAnnotation a : annotations) {\n      pd.addAnnotation(createAnnotation(a, pd.getModel()));\n    }\n  }","id":21575,"modified_method":"private void addAnnotationsToParameter(SNode pd, List<ASMAnnotation> anns) {\n    ListSequence.fromList(SLinkOperations.getTargets(pd, \"annotation\", true)).addSequence(ListSequence.fromList(anns).<SNode>select(new ISelector<ASMAnnotation, SNode>() {\n      public SNode select(ASMAnnotation it) {\n        return createAnnotation(it);\n      }\n    }));\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsAndImplements(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(refSuperclass, null, cls, model);\n      cls.setSuperclass(classifierType);\n    }\n    for (ClassifierType itype : cls.getImplementedInterfaces()) {\n      itype.delete();\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, cls, model);\n      cls.addImplementedInterface(classifierType);\n    }\n  }","id":21576,"modified_method":"private void updateExtendsAndImplements(ASMClass ac, SNode cls) {\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      SLinkOperations.setTarget(cls, \"superclass\", SNodeOperations.cast(getTypeByASMType(refSuperclass, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"), true);\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"implementedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Pair<String, String> p = new Pair<String, String>(packageName, myModule.getModuleFqName());\n      if (!(reported.contains(p))) {\n        reported.add(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","id":21577,"modified_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Tuples._2<String, String> p = MultiTuple.<String,String>from(packageName, myModule.getModuleFqName());\n      if (!(SetSequence.fromSet(reported).contains(p))) {\n        SetSequence.fromSet(reported).addElement(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsForInterface(ASMClass ac, Interface intfc) {\n    SModel model = intfc.getModel();\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, intfc, model);\n      intfc.addExtendedInterface(classifierType);\n    }\n  }","id":21578,"modified_method":"private void updateExtendsForInterface(ASMClass ac, SNode intfc) {\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(intfc, \"extendedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, intfc), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateTypeVariables(ASMMethod method, SModel model, BaseMethodDeclaration result, Classifier cls) {\n    Map<ASMTypeVariable, TypeVariableDeclaration> typeVars = new HashMap<ASMTypeVariable, TypeVariableDeclaration>();\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      typeVars.put(tv, typeVariableDeclaration);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = typeVars.get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), result, cls, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, result, cls, model));\n        }\n      }\n    }\n  }","id":21579,"modified_method":"private void updateTypeVariables(ASMMethod method, SNode result, SNode cls) {\n    Map<ASMTypeVariable, SNode> typeVars = MapSequence.fromMap(new HashMap<ASMTypeVariable, SNode>());\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a2().createNode(tv.getName());\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"typeVariableDeclaration\", true)).addElement(tvd);\n      MapSequence.fromMap(typeVars).put(tv, tvd);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = MapSequence.fromMap(typeVars).get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          SLinkOperations.setTarget(tvd, \"bound\", getTypeByASMType(tp.getClassBound(), result, cls), true);\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          ListSequence.fromList(SLinkOperations.getTargets(tvd, \"auxBounds\", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, result, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n        }\n      }\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceMethods(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      InstanceMethodDeclaration methodDeclaration = InstanceMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsFinal(m.isFinal());\n      methodDeclaration.setIsAbstract(m.isAbstract());\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addMethod(methodDeclaration);\n    }\n  }","id":21580,"modified_method":"private void updateInstanceMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", null);\n      SPropertyOperations.set(md, \"isAbstract\", \"\" + m.isAbstract());\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      this.updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"method\", true)).addElement(md);\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, BaseMethodDeclaration method, Classifier classifier, ClassifierType result) {\n    List<Type> toAdd = new ArrayList<Type>();\n    for (ASMType tv : typeParameters) {\n      Type type = getTypeByASMType(tv, method, classifier, result.getModel());\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    for (Type tvr : toAdd) {\n      result.addParameter(tvr);\n    }\n  }","id":21581,"modified_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, SNode method, SNode classifier, SNode result) {\n    List<SNode> toAdd = new ArrayList<SNode>();\n    for (ASMType tv : typeParameters) {\n      SNode type = getTypeByASMType(tv, method, classifier);\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    ListSequence.fromList(SLinkOperations.getTargets(result, \"parameter\", true)).addSequence(ListSequence.fromList(toAdd));\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected Visibility createVisibility(ASMMethod m, SModel model) {\n    if (m.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (m.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (m.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","id":21582,"modified_method":"protected SNode createVisibility(ASMMethod m) {\n    if (m.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0q().createNode();\n    }\n    if (m.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0q().createNode();\n    }\n    if (m.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0q().createNode();\n    }\n    return null;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateTypeVariables(ASMClass cls, SModel model, Classifier result) {\n    for (ASMTypeVariable tv : cls.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), null, result, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, null, result, model));\n        }\n      }\n    }\n  }","id":21583,"modified_method":"private void updateTypeVariables(ASMClass cls, SNode result) {\n    for (ASMTypeVariable tv : cls.getTypeParameters()) {\n      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a1().createNode(tv.getName());\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"typeVariableDeclaration\", true)).addElement(tvd);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          SLinkOperations.setTarget(tvd, \"bound\", getTypeByASMType(tp.getClassBound(), null, result), true);\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          ListSequence.fromList(SLinkOperations.getTargets(tvd, \"auxBounds\", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, null, result), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n        }\n      }\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private AnnotationInstance createAnnotation(ASMAnnotation annotation, SModel model) {\n    AnnotationInstance result = AnnotationInstance.newInstance(model);\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result.getNode(), AnnotationInstance.ANNOTATION, c);\n    Map<String, Object> values = annotation.getValues();\n    for (String key : values.keySet()) {\n      AnnotationInstanceValue value = AnnotationInstanceValue.newInstance(model);\n      addAnnotationMethodReference(value.getNode(), AnnotationInstanceValue.KEY, c, key);\n      value.setValue(getAnnotationValue(values.get(key), model));\n      result.addValue(value);\n    }\n    return result;\n  }","id":21584,"modified_method":"private SNode createAnnotation(ASMAnnotation annotation) {\n    SNode result = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a91().createNode();\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result, \"annotation\", c);\n    Map<String, Object> values = ((Map<String, Object>) annotation.getValues());\n    for (String key : MapSequence.fromMap(values).keySet()) {\n      SNode value = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a4a91().createNode(getAnnotationValue(MapSequence.fromMap(values).get(key)));\n      addAnnotationMethodReference(value, \"key\", c, key);\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"value\", true)).addElement(value);\n    }\n    return result;\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotations(ASMClass ac, Classifier cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      cls.addAnnotation(createAnnotation(annotation, cls.getModel()));\n    }\n  }","id":21585,"modified_method":"private void updateAnnotations(ASMClass ac, SNode cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"annotation\", true)).addElement(createAnnotation(annotation));\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private TypeVariableReference createTypeVariableReference(GenericDeclaration genDecl, String name) {\n    TypeVariableReference result = TypeVariableReference.newInstance(genDecl.getModel());\n    result.setTypeVariableDeclaration(findTypeVariableDeclaration(genDecl, name));\n    return result;\n  }","id":21586,"modified_method":"private SNode createTypeVariableReference(SNode genDecl, String name) {\n    return new ClassifierUpdater.QuotationClass_ol94f8_a0a0e().createNode(findTypeVariableDeclaration(genDecl, name));\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateConstructors(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      ConstructorDeclaration constructor = ConstructorDeclaration.newInstance(model);\n      constructor.getNode().setId(ASMNodeId.createId(ac, c));\n      constructor.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n\n      constructor.setVisibility(createVisibility(c, model));\n      constructor.setIsDeprecated(c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(cls.getModel());\n        typeVariableDeclaration.setName(tv.getName());\n        constructor.addTypeVariableDeclaration(typeVariableDeclaration);\n      }\n      constructor.setName(cls.getName());\n      List<ASMType> parameterType = c.getGenericParameterTypes();\n      List<String> parameterNames = c.getParameterNames();\n      for (int i = 0; i < parameterType.size(); i++) {\n        ASMType pt = parameterType.get(i);\n        ParameterDeclaration pd = ParameterDeclaration.newInstance(model);\n        pd.setName(parameterNames.get(i));\n        pd.setType(getTypeByASMType(pt, constructor, cls, model));\n        addAnnotationsToParameter(pd, c.getParameterAnnotations().get(i));\n        constructor.addParameter(pd);\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        constructor.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        constructor.addThrowsItem(getTypeByASMType(exception, constructor, cls, model));\n      }\n      cls.addConstructor(constructor);\n    }\n  }","id":21587,"modified_method":"private void updateConstructors(ASMClass ac, final SNode cls) {\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      SNode constructor = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a11().createNode(createVisibility(c), SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null), SPropertyOperations.getString(cls, \"name\"));\n      SPropertyOperations.set(constructor, \"isDeprecated\", \"\" + c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"typeVariableDeclaration\", true)).addElement(new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0l().createNode(tv.getName()));\n      }\n      {\n        ASMType pt;\n        String pn;\n        List<ASMAnnotation> pa;\n        Iterator<ASMType> pt_iterator = ListSequence.fromList(c.getGenericParameterTypes()).iterator();\n        Iterator<String> pn_iterator = ListSequence.fromList(c.getParameterNames()).iterator();\n        Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(c.getParameterAnnotations()).iterator();\n        while (true) {\n          if (!(pt_iterator.hasNext())) {\n            break;\n          }\n          if (!(pn_iterator.hasNext())) {\n            break;\n          }\n          if (!(pa_iterator.hasNext())) {\n            break;\n          }\n          pt = pt_iterator.next();\n          pn = pn_iterator.next();\n          pa = pa_iterator.next();\n          {\n            SNode pd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a6a6a4a0a11().createNode(getTypeByASMType(pt, constructor, cls), pn);\n            addAnnotationsToParameter(pd, pa);\n            ListSequence.fromList(SLinkOperations.getTargets(constructor, \"parameter\", true)).addElement(pd);\n          }\n        }\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"throwsItem\", true)).addElement(getTypeByASMType(exception, constructor, cls));\n      }\n\n      constructor.setId(ASMNodeId.createId(ac, c));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"constructor\", true)).addElement(constructor);\n    }\n  }","commit_id":"6a63de13486571d90d534222b27b2a9b6c4bb298","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static ResultMessage parseFromSource(SearchHit hit) {\n\t\tResultMessage m = new ResultMessage();\n        m.setMessage(hit.getSource());\n\t\tm.setIndex(hit.getIndex());\n        m.setHighlightRanges(hit.getHighlightFields());\n\t\treturn m;\n\t}","id":21588,"modified_method":"public static ResultMessage parseFromSource(SearchHit hit) {\n\t\tResultMessage m = new ResultMessage();\n        // There is no _source field if addFields is used for the request. Just use the returned fields in that case.\n        if (hit.getSource() != null) {\n            m.setMessage(hit.getSource());\n        } else {\n            Map<String, Object> map = Maps.newHashMap();\n\n            for (Map.Entry<String, SearchHitField> o : hit.fields().entrySet()) {\n                map.put(o.getKey(), o.getValue().getValue());\n            }\n            m.setMessage(map);\n\n        }\n\t\tm.setIndex(hit.getIndex());\n        m.setHighlightRanges(hit.getHighlightFields());\n\t\treturn m;\n\t}","commit_id":"47bb75dc546f9beeb968d432c7487926cf845c58","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"protected List<String> parseFields(String fields) {\n        if (fields == null || fields.isEmpty()) {\n            LOG.warn(\"Missing fields parameter. Returning HTTP 400\");\n            throw new BadRequestException(\"Missing required parameter `fields`\");\n        }\n        final Iterable<String> split = Splitter.on(',').omitEmptyStrings().trimResults().split(fields);\n        final ArrayList<String> fieldList = Lists.newArrayList(\"timestamp\");\n        // skip the mandatory field timestamp\n        for (String field : split) {\n            if (\"timestamp\".equals(field)) {\n                continue;\n            }\n            fieldList.add(field);\n        }\n\n        return fieldList;\n    }","id":21589,"modified_method":"protected List<String> parseFields(String fields) {\n        if (fields == null || fields.isEmpty()) {\n            LOG.warn(\"Missing fields parameter. Returning HTTP 400\");\n            throw new BadRequestException(\"Missing required parameter `fields`\");\n        }\n        return parseOptionalFields(fields);\n    }","commit_id":"47bb75dc546f9beeb968d432c7487926cf845c58","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public SearchResult(SearchHits searchHits, Set<String> usedIndices, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n\t\tthis.results = buildResults(searchHits);\n\t\tthis.fields = extractFields(searchHits);\n\t\tthis.totalResults = searchHits.getTotalHits();\n        this.usedIndices = usedIndices;\n\t}","id":21590,"modified_method":"public SearchResult(SearchHits searchHits, Set<String> usedIndices, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n\t\tthis.results = buildResults(searchHits);\n\t\tthis.fields = extractFields(results);\n\t\tthis.totalResults = searchHits.getTotalHits();\n        this.usedIndices = usedIndices;\n\t}","commit_id":"47bb75dc546f9beeb968d432c7487926cf845c58","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public SearchResult search(String query, String filter, TimeRange range, int limit, int offset, Sorting sorting) throws IndexHelper.InvalidRangeFormatException {\n        if(limit <= 0) {\n            limit = LIMIT;\n        }\n\n        Set<String> indices = IndexHelper.determineAffectedIndices(indexer, indexRangeService, deflector, range);\n\n        SearchRequest request;\n\n        if (filter == null) {\n            request = standardSearchRequest(query,\n                                            indices,\n                                            limit,\n                                            offset,\n                                            range,\n                                            sorting).request();\n        } else {\n            request = filteredSearchRequest(query, filter, indices, limit, offset, range, sorting).request();\n        }\n\n        SearchResponse r = c.search(request).actionGet();\n        return new SearchResult(r.getHits(), indices, query, request.source(), r.getTook());\n    }","id":21591,"modified_method":"public SearchResult search(String query, String filter, TimeRange range, int limit, int offset, Sorting sorting) throws IndexHelper.InvalidRangeFormatException {\n        final SearchesConfig searchesConfig = SearchesConfigBuilder.newConfig()\n                .setQuery(query)\n                .setFilter(filter)\n                .setRange(range)\n                .setLimit(limit)\n                .setOffset(offset)\n                .setSorting(sorting)\n                .build();\n\n        return search(searchesConfig);\n    }","commit_id":"47bb75dc546f9beeb968d432c7487926cf845c58","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"boolean forceStoreByAlias(String alias) {\n        return overrideStorageFlag() && alias != null && !alias.equals(\"\");\n    }","id":21592,"modified_method":"boolean forceStoreByAlias(String alias) {\n    \tif(alias == null || alias.equals(\"\")) {\n    \t\treturn false;\n    \t}\n    \tString comment = getIfAliasComment();\n    \tint si = -1;\n    \tif( comment != null && !comment.equals(\"\")) {\n            si = alias.indexOf(comment);\n    \t}\n    \t//if ifAlias begins with comment, return false\n        if (si == 0) {\n            return false;\n        }\n        return overrideStorageFlag();\n    }","commit_id":"a9a13d8b4cdd03d22d705e3140977e36454136fc","url":"https://github.com/OpenNMS/opennms"},{"original_method":"boolean forceStoreByAlias(String alias) {\n        return overrideStorageFlag() && alias != null && !alias.equals(\"\");\n    }","id":21593,"modified_method":"boolean forceStoreByAlias(String alias) {\n    \tif(alias == null || alias.equals(\"\")) {\n    \t\treturn false;\n    \t}\n    \tString comment = getIfAliasComment();\n    \tint si = -1;\n    \tif( comment != null && !comment.equals(\"\")) {\n            si = alias.indexOf(comment);\n    \t}\n    \t//if ifAlias begins with comment, return false\n        if (si == 0) {\n            return false;\n        }\n        return overrideStorageFlag();\n    }","commit_id":"0d021d36b06d173695f9dbc4a081b41e236b7f07","url":"https://github.com/OpenNMS/opennms"},{"original_method":"boolean forceStoreByAlias(String alias) {\n        return overrideStorageFlag() && alias != null && !alias.equals(\"\");\n    }","id":21594,"modified_method":"boolean forceStoreByAlias(String alias) {\n    \tif(alias == null || alias.equals(\"\")) {\n    \t\treturn false;\n    \t}\n    \tString comment = getIfAliasComment();\n    \tint si = -1;\n    \tif( comment != null && !comment.equals(\"\")) {\n            si = alias.indexOf(comment);\n    \t}\n    \t//if ifAlias begins with comment, return false\n        if (si == 0) {\n            return false;\n        }\n        return overrideStorageFlag();\n    }","commit_id":"56741ec96ce5a8d92fd09ef609787c0acdcb33a8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_provisionedNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode();\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        n1.setForeignSource(\"Junit\");\n        n1.setForeignId(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n1.getForeignSource(), n1.getForeignId())).andReturn(n1).times(1);            \n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        if (storeByForeignSource) {\n            File fsDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n            File node1fsDir = m_fileAnticipator.tempDir(fsDir, n1.getForeignSource());\n            File node1Dir = m_fileAnticipator.tempDir(node1fsDir, n1.getForeignId());\n            m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n        } else {\n            File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n            m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n        }\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n\n        Assert.assertEquals(2, children.size());\n        if (storeByForeignSource) {\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].nodeSnmp[]\", children.get(1).getId());\n        } else {\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","id":21595,"modified_method":"private void execute_testFindTopLevelResources_provisionedNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", \"Junit\", \"node1\", \"10.0.0.1\"); // Node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", \"Junit\", \"node2\", \"10.0.0.2\"); // Node on the DB with No RRD Data\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n1.getForeignSource(), n1.getForeignId())).andReturn(n1).times(1);            \n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File featureDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n        File fsDir = m_fileAnticipator.tempDir(featureDir, \"Junit\");\n\n        // RRD Directory for n1\n        File nodeDir = null;\n        if (storeByForeignSource) {\n            nodeDir = m_fileAnticipator.tempDir(fsDir, n1.getForeignId());\n        } else {\n            nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        }\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan node\n        File orphanDir = null;\n        if (storeByForeignSource) {\n            orphanDir = m_fileAnticipator.tempDir(fsDir, \"orphan_node\");\n        } else {\n            orphanDir = m_fileAnticipator.tempDir(snmpDir, \"100\");\n        }\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        // Response Time RRD Directory for n1\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n\n        Assert.assertEquals(2, children.size());\n        if (storeByForeignSource) {\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].nodeSnmp[]\", children.get(1).getId());\n        } else {\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"689dd9ce6bf5a4659325aeb7d9c265468202822f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_discoveredNodes() throws Exception {\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode();\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is called as many time as resources the node has.\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n        Assert.assertEquals(2, children.size());\n        Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n        Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n\n        m_easyMockUtils.verifyAll();\n    }","id":21596,"modified_method":"private void execute_testFindTopLevelResources_discoveredNodes() throws Exception {\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", null, null, \"10.0.0.1\"); // Node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", null, null, \"10.0.0.2\"); // Node on the DB with No RRD Data\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is called as many time as resources the node has.\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n\n        // RRD Directory for n1\n        File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan node\n        File orphanDir = m_fileAnticipator.tempDir(snmpDir, \"100\");\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        // Response Time RRD Directory for n1\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n        Assert.assertEquals(2, children.size());\n        Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n        Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"689dd9ce6bf5a4659325aeb7d9c265468202822f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_hybridNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode(); // discovered node\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        OnmsNode n2 = new OnmsNode(); // requisitioned node\n        n2.setId(2);\n        n2.setLabel(\"node2\");\n        n2.setForeignSource(\"Junit\");\n        n2.setForeignId(\"node2\");\n        OnmsIpInterface ip2 = new OnmsIpInterface();\n        ip2.setId(12);\n        ip2.setIpAddress(InetAddressUtils.addr(\"10.0.0.2\"));\n        ip2.setNode(n2);\n        n2.addIpInterface(ip2);\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(3);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n2.getForeignSource(), n2.getForeignId())).andReturn(n2).times(1);\n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n2.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.get(n2.getId())).andReturn(n2).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n\n        File node1Dir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n\n        if (storeByForeignSource) {\n            File fsDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n            File node2fsDir = m_fileAnticipator.tempDir(fsDir, n2.getForeignSource());\n            File node2Dir = m_fileAnticipator.tempDir(node2fsDir, n2.getForeignId());\n            m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n        } else {\n            File node2Dir = m_fileAnticipator.tempDir(snmpDir, n2.getId().toString());\n            m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n        }\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ip1Dir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip1Dir, \"foo\" + RrdUtils.getExtension());\n        File ip2Dir = m_fileAnticipator.tempDir(responseDir, ip2.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip2Dir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(2, resources.size());\n\n        if (storeByForeignSource) {\n            OnmsResource r1 = resources.get(0); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2]\", r1.getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(1); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n\n        } else {\n            OnmsResource r1 = resources.get(1); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"node[2]\", r1.getId());\n            Assert.assertEquals(\"node[2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"node[2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(0); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","id":21597,"modified_method":"private void execute_testFindTopLevelResources_hybridNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", null, null, \"10.0.0.1\"); // Discovered node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", \"Junit\", \"node2\", \"10.0.0.2\"); // Requisitioned node on the DB with RRD Data\n        nodes.add(n2);\n        OnmsNode n3 = createNode(3, \"node3\", null, null, \"10.0.0.3\"); // Discovered node on the DB with No RRD Data\n        nodes.add(n3);\n        OnmsNode n4 = createNode(4, \"node4\", \"Junit\", \"node4\", \"10.0.0.4\"); // Requisitioned node on the DB with RRD Data\n        nodes.add(n4);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(3);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n2.getForeignSource(), n2.getForeignId())).andReturn(n2).times(1);\n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n2.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.get(n2.getId())).andReturn(n2).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File featureDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n        File fsDir = m_fileAnticipator.tempDir(featureDir, \"Junit\");\n\n        // RRD Directory for n1\n        File node1Dir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for n2\n        File node2Dir = null;\n        if (storeByForeignSource) {\n            node2Dir = m_fileAnticipator.tempDir(fsDir, n2.getForeignId());\n        } else {\n            node2Dir = m_fileAnticipator.tempDir(snmpDir, n2.getId().toString());\n        }\n        m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan discovered node\n        m_fileAnticipator.tempFile(m_fileAnticipator.tempDir(snmpDir, \"100\"), \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan requisitioned node\n        File orphanDir = null;\n        if (storeByForeignSource) {\n            orphanDir = m_fileAnticipator.tempDir(fsDir, \"orphan_node\");\n        } else {\n            orphanDir = m_fileAnticipator.tempDir(snmpDir, \"101\");\n        }\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ip1Dir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip1Dir, \"foo\" + RrdUtils.getExtension());\n        File ip2Dir = m_fileAnticipator.tempDir(responseDir, n2.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip2Dir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(2, resources.size());\n\n        if (storeByForeignSource) {\n            OnmsResource r1 = resources.get(0); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2]\", r1.getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(1); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n\n        } else {\n            OnmsResource r1 = resources.get(1); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"node[2]\", r1.getId());\n            Assert.assertEquals(\"node[2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"node[2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(0); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"689dd9ce6bf5a4659325aeb7d9c265468202822f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_provisionedNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode();\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        n1.setForeignSource(\"Junit\");\n        n1.setForeignId(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n1.getForeignSource(), n1.getForeignId())).andReturn(n1).times(1);            \n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        if (storeByForeignSource) {\n            File fsDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n            File node1fsDir = m_fileAnticipator.tempDir(fsDir, n1.getForeignSource());\n            File node1Dir = m_fileAnticipator.tempDir(node1fsDir, n1.getForeignId());\n            m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n        } else {\n            File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n            m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n        }\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n\n        Assert.assertEquals(2, children.size());\n        if (storeByForeignSource) {\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].nodeSnmp[]\", children.get(1).getId());\n        } else {\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","id":21598,"modified_method":"private void execute_testFindTopLevelResources_provisionedNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", \"Junit\", \"node1\", \"10.0.0.1\"); // Node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", \"Junit\", \"node2\", \"10.0.0.2\"); // Node on the DB with No RRD Data\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n1.getForeignSource(), n1.getForeignId())).andReturn(n1).times(1);            \n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File featureDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n        File fsDir = m_fileAnticipator.tempDir(featureDir, \"Junit\");\n\n        // RRD Directory for n1\n        File nodeDir = null;\n        if (storeByForeignSource) {\n            nodeDir = m_fileAnticipator.tempDir(fsDir, n1.getForeignId());\n        } else {\n            nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        }\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan node\n        File orphanDir = null;\n        if (storeByForeignSource) {\n            orphanDir = m_fileAnticipator.tempDir(fsDir, \"orphan_node\");\n        } else {\n            orphanDir = m_fileAnticipator.tempDir(snmpDir, \"100\");\n        }\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        // Response Time RRD Directory for n1\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n\n        Assert.assertEquals(2, children.size());\n        if (storeByForeignSource) {\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode1].nodeSnmp[]\", children.get(1).getId());\n        } else {\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"a865a0aa011e0e55012f84ad5cc023bc25a87600","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_discoveredNodes() throws Exception {\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode();\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is called as many time as resources the node has.\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n        Assert.assertEquals(2, children.size());\n        Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n        Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n\n        m_easyMockUtils.verifyAll();\n    }","id":21599,"modified_method":"private void execute_testFindTopLevelResources_discoveredNodes() throws Exception {\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", null, null, \"10.0.0.1\"); // Node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", null, null, \"10.0.0.2\"); // Node on the DB with No RRD Data\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(2);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is called as many time as resources the node has.\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n\n        // RRD Directory for n1\n        File nodeDir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(nodeDir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan node\n        File orphanDir = m_fileAnticipator.tempDir(snmpDir, \"100\");\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        // Response Time RRD Directory for n1\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ipDir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ipDir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(1, resources.size());\n        List<OnmsResource> children = resources.get(0).getChildResources();\n        Collections.sort(children);\n        Assert.assertEquals(2, children.size());\n        Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children.get(0).getId());\n        Assert.assertEquals(\"node[1].nodeSnmp[]\", children.get(1).getId());\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"a865a0aa011e0e55012f84ad5cc023bc25a87600","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void execute_testFindTopLevelResources_hybridNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = new OnmsNode(); // discovered node\n        n1.setId(1);\n        n1.setLabel(\"node1\");\n        OnmsIpInterface ip1 = new OnmsIpInterface();\n        ip1.setId(11);\n        ip1.setIpAddress(InetAddressUtils.addr(\"10.0.0.1\"));\n        ip1.setNode(n1);\n        n1.addIpInterface(ip1);\n        nodes.add(n1);\n\n        OnmsNode n2 = new OnmsNode(); // requisitioned node\n        n2.setId(2);\n        n2.setLabel(\"node2\");\n        n2.setForeignSource(\"Junit\");\n        n2.setForeignId(\"node2\");\n        OnmsIpInterface ip2 = new OnmsIpInterface();\n        ip2.setId(12);\n        ip2.setIpAddress(InetAddressUtils.addr(\"10.0.0.2\"));\n        ip2.setNode(n2);\n        n2.addIpInterface(ip2);\n        nodes.add(n2);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(3);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n2.getForeignSource(), n2.getForeignId())).andReturn(n2).times(1);\n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n2.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.get(n2.getId())).andReturn(n2).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n\n        File node1Dir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n\n        if (storeByForeignSource) {\n            File fsDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n            File node2fsDir = m_fileAnticipator.tempDir(fsDir, n2.getForeignSource());\n            File node2Dir = m_fileAnticipator.tempDir(node2fsDir, n2.getForeignId());\n            m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n        } else {\n            File node2Dir = m_fileAnticipator.tempDir(snmpDir, n2.getId().toString());\n            m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n        }\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ip1Dir = m_fileAnticipator.tempDir(responseDir, ip1.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip1Dir, \"foo\" + RrdUtils.getExtension());\n        File ip2Dir = m_fileAnticipator.tempDir(responseDir, ip2.getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip2Dir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(2, resources.size());\n\n        if (storeByForeignSource) {\n            OnmsResource r1 = resources.get(0); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2]\", r1.getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(1); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n\n        } else {\n            OnmsResource r1 = resources.get(1); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"node[2]\", r1.getId());\n            Assert.assertEquals(\"node[2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"node[2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(0); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","id":21600,"modified_method":"private void execute_testFindTopLevelResources_hybridNodes(boolean storeByForeignSource) throws Exception {\n        setStoreByForeignSource(storeByForeignSource);\n        List<OnmsNode> nodes = new ArrayList<OnmsNode>();\n\n        OnmsNode n1 = createNode(1, \"node1\", null, null, \"10.0.0.1\"); // Discovered node on the DB with RRD Data\n        nodes.add(n1);\n        OnmsNode n2 = createNode(2, \"node2\", \"Junit\", \"node2\", \"10.0.0.2\"); // Requisitioned node on the DB with RRD Data\n        nodes.add(n2);\n        OnmsNode n3 = createNode(3, \"node3\", null, null, \"10.0.0.3\"); // Discovered node on the DB with No RRD Data\n        nodes.add(n3);\n        OnmsNode n4 = createNode(4, \"node4\", \"Junit\", \"node4\", \"10.0.0.4\"); // Requisitioned node on the DB with RRD Data\n        nodes.add(n4);\n\n        expect(m_dataCollectionConfigDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).times(3);\n        expect(m_dataCollectionConfigDao.getConfiguredResourceTypes()).andReturn(new HashMap<String, ResourceType>());\n        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        if (storeByForeignSource) {\n            expect(m_nodeDao.findByForeignId(n2.getForeignSource(), n2.getForeignId())).andReturn(n2).times(1);\n        } else {\n            expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n2.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));\n        }\n        expect(m_nodeDao.get(n1.getId())).andReturn(n1).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.get(n2.getId())).andReturn(n2).times(2); // TODO ResponseTimeResourceType is the responsible for this.\n        expect(m_nodeDao.findAll()).andReturn(nodes);\n\n        File snmpDir = m_fileAnticipator.tempDir(\"snmp\");\n        File featureDir = m_fileAnticipator.tempDir(snmpDir, \"fs\");\n        File fsDir = m_fileAnticipator.tempDir(featureDir, \"Junit\");\n\n        // RRD Directory for n1\n        File node1Dir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());\n        m_fileAnticipator.tempFile(node1Dir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for n2\n        File node2Dir = null;\n        if (storeByForeignSource) {\n            node2Dir = m_fileAnticipator.tempDir(fsDir, n2.getForeignId());\n        } else {\n            node2Dir = m_fileAnticipator.tempDir(snmpDir, n2.getId().toString());\n        }\n        m_fileAnticipator.tempFile(node2Dir, \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan discovered node\n        m_fileAnticipator.tempFile(m_fileAnticipator.tempDir(snmpDir, \"100\"), \"foo\" + RrdUtils.getExtension());\n\n        // RRD Directory for an orphan requisitioned node\n        File orphanDir = null;\n        if (storeByForeignSource) {\n            orphanDir = m_fileAnticipator.tempDir(fsDir, \"orphan_node\");\n        } else {\n            orphanDir = m_fileAnticipator.tempDir(snmpDir, \"101\");\n        }\n        m_fileAnticipator.tempFile(orphanDir, \"foo\" + RrdUtils.getExtension());\n\n        File responseDir = m_fileAnticipator.tempDir(\"response\");\n        File ip1Dir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip1Dir, \"foo\" + RrdUtils.getExtension());\n        File ip2Dir = m_fileAnticipator.tempDir(responseDir, n2.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());\n        m_fileAnticipator.tempFile(ip2Dir, \"foo\" + RrdUtils.getExtension());\n\n        m_easyMockUtils.replayAll();\n        m_resourceDao.afterPropertiesSet();\n\n        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();\n        Assert.assertNotNull(resources);\n        Collections.sort(resources);\n        Assert.assertEquals(2, resources.size());\n\n        if (storeByForeignSource) {\n            OnmsResource r1 = resources.get(0); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2]\", r1.getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"nodeSource[Junit%3Anode2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(1); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n\n        } else {\n            OnmsResource r1 = resources.get(1); // parent resource for the provisioned node \n            List<OnmsResource> children1 = r1.getChildResources();\n            Collections.sort(children1);\n            Assert.assertEquals(\"node[2]\", r1.getId());\n            Assert.assertEquals(\"node[2].responseTime[10.0.0.2]\", children1.get(0).getId());\n            Assert.assertEquals(\"node[2].nodeSnmp[]\", children1.get(1).getId());\n\n            OnmsResource r2 = resources.get(0); // parent resource for the discovered node\n            Assert.assertEquals(\"node[1]\", r2.getId());\n            List<OnmsResource> children2 = r2.getChildResources();\n            Collections.sort(children2);\n            Assert.assertEquals(2, children2.size());\n            Assert.assertEquals(\"node[1].responseTime[10.0.0.1]\", children2.get(0).getId());\n            Assert.assertEquals(\"node[1].nodeSnmp[]\", children2.get(1).getId());\n        }\n\n        m_easyMockUtils.verifyAll();\n    }","commit_id":"a865a0aa011e0e55012f84ad5cc023bc25a87600","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * @see XWIKI-5187: XWiki Explorer doesn't support very well spaces and pages with special characters in their names\n     */\n    @Test\n    public void testTreeViewWithSpecialCharactersInEntityNames()\n    {\n        // Create a tree structure.\n        String spaceName = getTestMethodName() + \".0\";\n        String spaceRef = getTestMethodName() + \"\\\\.0\";\n        getUtil().createPage(spaceName, \"WebHome\", null, null);\n        getUtil().createPage(spaceName, \"Level.1\", null, null, null, spaceRef + \".WebHome\");\n        getUtil().createPage(spaceName, \"Level(2)\", null, null, null, spaceRef + \".Level\\\\.1\");\n        getUtil().createPage(spaceName, \"Level@3\", null, null, null, spaceRef + \".Level(2)\");\n        getUtil().createPage(spaceName, \"End\", null, null, null, spaceRef + \".Level@3\");\n\n        EntityTreeElement tree = AllDocsPage.gotoPage().clickTreeTab();\n        tree.lookupEntity(spaceRef + \".End\");\n        tree.waitForPage(spaceName, \"End\", true);\n        assertTrue(tree.hasPage(spaceName, \"Level.1\"));\n        assertTrue(tree.hasPage(spaceName, \"Level(2)\"));\n        assertTrue(tree.hasPage(spaceName, \"Level@3\"));\n    }","id":21601,"modified_method":"/**\n     * @see XWIKI-5187: XWiki Explorer doesn't support very well spaces and pages with special characters in their names\n     */\n    @Test\n    public void testTreeViewWithSpecialCharactersInEntityNames()\n    {\n        // Create a tree structure.\n        String spaceName = getTestMethodName() + \".0\";\n        String spaceRef = getTestMethodName() + \"\\\\.0\";\n        getUtil().createPage(spaceName, \"WebHome\", null, null);\n        getUtil().createPage(spaceName, \"Level.1\", null, null, null, spaceRef + \".WebHome\");\n        getUtil().createPage(spaceName, \"Level{[(2)]}\", null, null, null, spaceRef + \".Level\\\\.1\");\n        getUtil().createPage(spaceName, \"Level@3\", null, null, null, spaceRef + \".Level{[(2)]}\");\n        getUtil().createPage(spaceName, \"End\", null, null, null, spaceRef + \".Level@3\");\n\n        EntityTreeElement tree = AllDocsPage.gotoPage().clickTreeTab();\n        tree.lookupEntity(spaceRef + \".End\");\n        tree.waitForPage(spaceName, \"End\", true);\n        assertTrue(tree.hasPage(spaceName, \"Level.1\"));\n        // The curly open bracket '{' is encoded in the rendered title (for security reasons?..).\n        // See http://jira.xwiki.org/browse/XWIKI-7815\n        assertTrue(tree.hasPage(spaceName, \"Level{[(2)]}\", \"Level&#123;[(2)]}\"));\n        assertTrue(tree.hasPage(spaceName, \"Level@3\"));\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Response addAttachment(String wikiName, String spaceName, String pageName, Multipart multipart)\n            throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, true);\n\n            Document doc = documentInfo.getDocument();\n\n            if (!doc.hasAccessLevel(\"edit\", Utils.getXWikiUser(componentManager))) {\n                throw new WebApplicationException(Status.UNAUTHORIZED);\n            }\n\n            /* The name to be used */\n            String attachmentName = null;\n\n            /* The actual filename of the sent file */\n            String actualFileName = null;\n\n            /* The specified file name using a form field */\n            String overriddenFileName = null;\n            String contentType = null;\n            InputStream inputStream = null;\n\n            for (int i = 0; i < multipart.getCount(); i++) {\n                BodyPart bodyPart = multipart.getBodyPart(i);\n\n                /* Get the content disposition headers */\n                Enumeration e = bodyPart.getMatchingHeaders(new String[]{ \"Content-disposition\" });\n                while (e.hasMoreElements()) {\n                    Header h = (Header) e.nextElement();\n\n                    /* Parse header data. Normally headers are in the form form-data; key=\"value\"; ... */\n                    if (h.getValue().startsWith(\"form-data\")) {\n                        String[] fieldData = h.getValue().split(\";\");\n                        for (String s : fieldData) {\n                            String[] pair = s.split(\"=\");\n                            if (pair.length == 2) {\n                                String key = pair[0].trim();\n                                String value = pair[1].replace(\"\\\"\", \"\").trim();\n\n                                if (\"name\".equals(key)) {\n                                    if (FORM_FILENAME_FIELD.equals(value)) {\n                                        overriddenFileName = bodyPart.getContent().toString();\n                                    }\n                                } else if (\"filename\".equals(key)) {\n                                    actualFileName = value;\n                                    contentType = bodyPart.getContentType();\n                                    inputStream = bodyPart.getInputStream();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (overriddenFileName != null) {\n                attachmentName = overriddenFileName;\n            } else {\n                attachmentName = actualFileName;\n            }\n\n            if (attachmentName == null) {\n                throw new WebApplicationException(Status.BAD_REQUEST);\n            }\n\n            byte[] buffer = new byte[4096];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            while (true) {\n                int read = inputStream.read(buffer);\n                if (read != 4096) {\n                    if (read != -1) {\n                        baos.write(buffer, 0, read);\n                    }\n\n                    break;\n                } else {\n                    baos.write(buffer);\n                }\n            }\n            baos.flush();\n\n            /* Attach the file */\n            AttachmentInfo attachmentInfo = storeAttachment(doc, attachmentName, baos.toByteArray());\n\n            if (attachmentInfo.isAlreadyExisting()) {\n                return Response.status(Status.ACCEPTED).entity(attachmentInfo.getAttachment()).build();\n            } else {\n                return Response\n                        .created(UriBuilder.fromUri(uriInfo.getBaseUri()).path(AttachmentResource.class).build(wikiName,\n                                spaceName, pageName, attachmentName)).entity(attachmentInfo.getAttachment()).build();\n            }\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21602,"modified_method":"@Override\n    public Response addAttachment(String wikiName, String spaceName, String pageName, Multipart multipart)\n            throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, true);\n\n            Document doc = documentInfo.getDocument();\n\n            if (!doc.hasAccessLevel(\"edit\", Utils.getXWikiUser(componentManager))) {\n                throw new WebApplicationException(Status.UNAUTHORIZED);\n            }\n\n            /* The name to be used */\n            String attachmentName = null;\n\n            /* The actual filename of the sent file */\n            String actualFileName = null;\n\n            /* The specified file name using a form field */\n            String overriddenFileName = null;\n            String contentType = null;\n            InputStream inputStream = null;\n\n            for (int i = 0; i < multipart.getCount(); i++) {\n                BodyPart bodyPart = multipart.getBodyPart(i);\n\n                /* Get the content disposition headers */\n                Enumeration e = bodyPart.getMatchingHeaders(new String[]{ \"Content-disposition\" });\n                while (e.hasMoreElements()) {\n                    Header h = (Header) e.nextElement();\n\n                    /* Parse header data. Normally headers are in the form form-data; key=\"value\"; ... */\n                    if (h.getValue().startsWith(\"form-data\")) {\n                        String[] fieldData = h.getValue().split(\";\");\n                        for (String s : fieldData) {\n                            String[] pair = s.split(\"=\");\n                            if (pair.length == 2) {\n                                String key = pair[0].trim();\n                                String value = pair[1].replace(\"\\\"\", \"\").trim();\n\n                                if (\"name\".equals(key)) {\n                                    if (FORM_FILENAME_FIELD.equals(value)) {\n                                        overriddenFileName = bodyPart.getContent().toString();\n                                    }\n                                } else if (\"filename\".equals(key)) {\n                                    actualFileName = value;\n                                    contentType = bodyPart.getContentType();\n                                    inputStream = bodyPart.getInputStream();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (overriddenFileName != null) {\n                attachmentName = overriddenFileName;\n            } else {\n                attachmentName = actualFileName;\n            }\n\n            if (attachmentName == null) {\n                throw new WebApplicationException(Status.BAD_REQUEST);\n            }\n\n            byte[] buffer = new byte[4096];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            while (true) {\n                int read = inputStream.read(buffer);\n                if (read != 4096) {\n                    if (read != -1) {\n                        baos.write(buffer, 0, read);\n                    }\n\n                    break;\n                } else {\n                    baos.write(buffer);\n                }\n            }\n            baos.flush();\n\n            /* Attach the file */\n            AttachmentInfo attachmentInfo = storeAttachment(doc, attachmentName, baos.toByteArray());\n\n            if (attachmentInfo.isAlreadyExisting()) {\n                return Response.status(Status.ACCEPTED).entity(attachmentInfo.getAttachment()).build();\n            } else {\n                return Response.created(Utils.createURI(uriInfo.getBaseUri(), AttachmentResource.class, wikiName,\n                    spaceName, pageName, attachmentName)).entity(attachmentInfo.getAttachment()).build();\n            }\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to spaces.\n     *\n     * @param keywords the string that will be used in a \"like\" XWQL clause\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @return the results.\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights,\n            int number, int start) throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\n                        \" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                            .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                            .setOffset(start).execute();\n\n            for (Object object : queryResult) {\n                String spaceName = (String) object;\n                Document spaceDoc = xwikiApi.getDocument(String.format(\"%s.WebHome\", spaceName));\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", spaceDoc.getPrefixedFullName())) {\n                    String title = spaceDoc.getDisplayTitle();\n\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"space\");\n                    searchResult.setId(String.format(\"%s:%s\", wikiName, spaceName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setTitle(title);\n\n                    /* Add a link to the space information */\n                    Link spaceLink = new Link();\n                    spaceLink.setRel(Relations.SPACE);\n                    String spaceUri =\n                            UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceResource.class)\n                                    .build(wikiName, spaceName)\n                                    .toString();\n                    spaceLink.setHref(spaceUri);\n                    searchResult.getLinks().add(spaceLink);\n\n                    /* Add a link to the webhome if it exists */\n                    String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                    if (xwikiApi.exists(webHomePageId) && xwikiApi.hasAccessLevel(\"view\", webHomePageId)) {\n                        String pageUri =\n                                UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                                        .build(wikiName, spaceName, \"WebHome\").toString();\n\n                        Link pageLink = new Link();\n                        pageLink.setHref(pageUri);\n                        pageLink.setRel(Relations.HOME);\n                        searchResult.getLinks().add(pageLink);\n                    }\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21603,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to spaces.\n     *\n     * @param keywords the string that will be used in a \"like\" XWQL clause\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @return the results.\n     */\n    protected List<SearchResult> searchSpaces(String keywords, String wikiName, boolean hasProgrammingRights,\n            int number, int start) throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            f.format(\"select distinct doc.space from XWikiDocument as doc where upper(doc.space) like :keywords \");\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\" order by doc.space asc\");\n            } else {\n                f.format(\n                        \" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' order by doc.space asc\");\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n            queryResult =\n                    queryManager.createQuery(query, Query.XWQL)\n                            .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                            .setOffset(start).execute();\n\n            for (Object object : queryResult) {\n                String spaceName = (String) object;\n                Document spaceDoc = xwikiApi.getDocument(String.format(\"%s.WebHome\", spaceName));\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", spaceDoc.getPrefixedFullName())) {\n                    String title = spaceDoc.getDisplayTitle();\n\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"space\");\n                    searchResult.setId(Utils.getSpaceId(wikiName, spaceName));\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setTitle(title);\n\n                    /* Add a link to the space information */\n                    Link spaceLink = new Link();\n                    spaceLink.setRel(Relations.SPACE);\n                    String spaceUri =\n                        Utils.createURI(uriInfo.getBaseUri(), SpaceResource.class, wikiName, spaceName).toString();\n                    spaceLink.setHref(spaceUri);\n                    searchResult.getLinks().add(spaceLink);\n\n                    /* Add a link to the webhome if it exists */\n                    String webHomePageId = Utils.getPageId(wikiName, spaceName, \"WebHome\");\n                    if (xwikiApi.exists(webHomePageId) && xwikiApi.hasAccessLevel(\"view\", webHomePageId)) {\n                        String pageUri =\n                            Utils.createURI(uriInfo.getBaseUri(), PageResource.class, wikiName, spaceName, \"WebHome\")\n                                .toString();\n\n                        Link pageLink = new Link();\n                        pageLink.setHref(pageUri);\n                        pageLink.setRel(Relations.HOME);\n                        searchResult.getLinks().add(pageLink);\n                    }\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     *\n     * @param keywords the string that will be used in a \"like\" XWQL clause.\n     * @param number number of results to be returned.\n     * @param start 0-based start offset.\n     * @param orderField the field to be used to order the results.\n     * @param order \"asc\" or \"desc\"\n     * @return the results.\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n            String space, boolean hasProgrammingRights, int number, int start, String orderField, String order,\n            Boolean withPrettyNames)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            /*\n             * If the order field is already one of the field hard coded in the base query, then do not add it to the\n             * select clause.\n             */\n            String addColumn = \"\";\n            if (!StringUtils.isBlank(orderField)) {\n                addColumn =\n                        (orderField.equals(\"\") || orderField.equals(\"fullName\") || orderField.equals(\"name\") ||\n                                orderField\n                                        .equals(\"space\")) ? \"\" : \", doc.\" + orderField;\n            }\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language\");\n                f.format(addColumn);\n                f.format(\" from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language\");\n                f.format(addColumn);\n                f.format(\" from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            /* Build the order clause. */\n            String orderClause = null;\n            if (StringUtils.isBlank(orderField)) {\n                orderClause = \"doc.fullName asc\";\n            } else {\n                /* Check if the order parameter is a valid \"asc\" or \"desc\" string, otherwise use \"asc\" */\n                if (\"asc\".equals(order) || \"desc\".equals(order)) {\n                    orderClause = String.format(\"doc.%s %s\", orderField, order);\n                } else {\n                    orderClause = String.format(\"doc.%s asc\", orderField);\n                }\n            }\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\") order by %s\", orderClause);\n            } else {\n                f.format(\n                        \") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by %s\",\n                        orderClause);\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                                .bindValue(\"space\", space).setLimit(number).setOffset(start).execute();\n            } else {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                                .setOffset(start).execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                    UriBuilder\n                                            .fromUri(this.uriInfo.getBaseUri())\n                                            .path(PageResource.class)\n                                            .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                    URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                    URLEncoder.encode(pageName, \"UTF-8\"))\n                                            .toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                    UriBuilder\n                                            .fromUri(this.uriInfo.getBaseUri())\n                                            .path(PageTranslationResource.class)\n                                            .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                    URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                    URLEncoder.encode(pageName, \"UTF-8\"),\n                                                    language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21604,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Pages. Search for keyword\n     *\n     * @param keywords the string that will be used in a \"like\" XWQL clause.\n     * @param number number of results to be returned.\n     * @param start 0-based start offset.\n     * @param orderField the field to be used to order the results.\n     * @param order \"asc\" or \"desc\"\n     * @return the results.\n     */\n    protected List<SearchResult> searchPages(List<SearchScope> searchScopes, String keywords, String wikiName,\n            String space, boolean hasProgrammingRights, int number, int start, String orderField, String order,\n            Boolean withPrettyNames)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            /*\n             * If the order field is already one of the field hard coded in the base query, then do not add it to the\n             * select clause.\n             */\n            String addColumn = \"\";\n            if (!StringUtils.isBlank(orderField)) {\n                addColumn =\n                        (orderField.equals(\"\") || orderField.equals(\"fullName\") || orderField.equals(\"name\") ||\n                                orderField\n                                        .equals(\"space\")) ? \"\" : \", doc.\" + orderField;\n            }\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language\");\n                f.format(addColumn);\n                f.format(\" from XWikiDocument as doc where doc.space = :space and ( \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, doc.language\");\n                f.format(addColumn);\n                f.format(\" from XWikiDocument as doc where ( \");\n            }\n\n            /* Look for scopes related to pages */\n            int acceptedScopes = 0;\n            for (int i = 0; i < searchScopes.size(); i++) {\n                SearchScope scope = searchScopes.get(i);\n\n                switch (scope) {\n                    case CONTENT:\n                        f.format(\"upper(doc.content) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case NAME:\n                        f.format(\"upper(doc.fullName) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                    case TITLE:\n                        f.format(\"upper(doc.title) like :keywords \");\n                        acceptedScopes++;\n                        break;\n                }\n\n                if (i != searchScopes.size() - 1) {\n                    f.format(\" or \");\n                }\n            }\n\n            /* If we don't find any scope related to pages then return empty results */\n            if (acceptedScopes == 0) {\n                return result;\n            }\n\n            /* Build the order clause. */\n            String orderClause = null;\n            if (StringUtils.isBlank(orderField)) {\n                orderClause = \"doc.fullName asc\";\n            } else {\n                /* Check if the order parameter is a valid \"asc\" or \"desc\" string, otherwise use \"asc\" */\n                if (\"asc\".equals(order) || \"desc\".equals(order)) {\n                    orderClause = String.format(\"doc.%s %s\", orderField, order);\n                } else {\n                    orderClause = String.format(\"doc.%s asc\", orderField);\n                }\n            }\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\") order by %s\", orderClause);\n            } else {\n                f.format(\n                        \") and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by %s\",\n                        orderClause);\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                                .bindValue(\"space\", space).setLimit(number).setOffset(start).execute();\n            } else {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                                .setOffset(start).execute();\n            }\n\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    String pageUri = null;\n                    if (StringUtils.isBlank(language)) {\n                        pageUri =\n                            Utils.createURI(this.uriInfo.getBaseUri(), PageResource.class, wikiName, spaceName,\n                                pageName).toString();\n                    } else {\n                        searchResult.setLanguage(language);\n                        pageUri =\n                            Utils.createURI(this.uriInfo.getBaseUri(), PageTranslationResource.class, wikiName,\n                                spaceName, pageName, language).toString();\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     *\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @param orderField the field to be used to order the results\n     * @param order \"asc\" or \"desc\"\n     * @return the results\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n            boolean hasProgrammingRights, int number, int start, String orderField, String order,\n            Boolean withPrettyNames)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWikiContext xwikiContext = Utils.getXWikiContext(componentManager);\n\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            /*\n             * If the order field is already one of the field hard coded in the base query, then do not add it to the\n             * select clause.\n             */\n            String addColumn =\n                    (orderField.equals(\"\") || orderField.equals(\"fullName\") || orderField.equals(\"name\") || orderField\n                            .equals(\"space\")) ? \"\" : \", doc.\" + orderField;\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number\");\n                f.format(addColumn);\n                f.format(\n                        \" from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number\");\n                f.format(addColumn);\n                f.format(\n                        \" from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            /* Build the order clause. */\n            String orderClause = null;\n            if (StringUtils.isBlank(orderField)) {\n                orderClause = \"doc.fullName asc\";\n            } else {\n                /* Check if the order parameter is a valid \"asc\" or \"desc\" string, otherwise use \"asc\" */\n                if (\"asc\".equals(order) || \"desc\".equals(order)) {\n                    orderClause = String.format(\"doc.%s %s\", orderField, order);\n                } else {\n                    orderClause = String.format(\"doc.%s asc\", orderField);\n                }\n            }\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\" order by %s\", orderClause);\n            } else {\n                f.format(\n                        \" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by %s\",\n                        orderClause);\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                                .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                                .execute();\n            }\n\n            /* Build the result. */\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /*\n                 * Check if the user has the right to see the found document. We also prevent guest users to access\n                 * object data in order to avoid leaking important information such as emails to crawlers.\n                 */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId) && xwikiContext.getUserReference() != null) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    String pageUri =\n                            UriBuilder.fromUri(uriInfo.getBaseUri()).path(PageResource.class)\n                                    .build(wikiName, spaceName, pageName).toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                            UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                                    .build(wikiName, spaceName, pageName, className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21605,"modified_method":"/**\n     * Search for keyword in the given scopes. Limit the search only to Objects.\n     *\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @param orderField the field to be used to order the results\n     * @param order \"asc\" or \"desc\"\n     * @return the results\n     */\n    protected List<SearchResult> searchObjects(String keywords, String wikiName, String space,\n            boolean hasProgrammingRights, int number, int start, String orderField, String order,\n            Boolean withPrettyNames)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWikiContext xwikiContext = Utils.getXWikiContext(componentManager);\n\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (keywords == null) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n\n            /*\n             * If the order field is already one of the field hard coded in the base query, then do not add it to the\n             * select clause.\n             */\n            String addColumn =\n                    (orderField.equals(\"\") || orderField.equals(\"fullName\") || orderField.equals(\"name\") || orderField\n                            .equals(\"space\")) ? \"\" : \", doc.\" + orderField;\n\n            if (space != null) {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number\");\n                f.format(addColumn);\n                f.format(\n                        \" from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where doc.space = :space and obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            } else {\n                f.format(\"select distinct doc.fullName, doc.space, doc.name, obj.className, obj.number\");\n                f.format(addColumn);\n                f.format(\n                        \" from XWikiDocument as doc, BaseObject as obj, StringProperty as sp, LargeStringProperty as lsp where obj.name=doc.fullName and sp.id.id = obj.id and lsp.id.id = obj.id and (upper(sp.value) like :keywords or upper(lsp.value) like :keywords) \");\n            }\n\n            /* Build the order clause. */\n            String orderClause = null;\n            if (StringUtils.isBlank(orderField)) {\n                orderClause = \"doc.fullName asc\";\n            } else {\n                /* Check if the order parameter is a valid \"asc\" or \"desc\" string, otherwise use \"asc\" */\n                if (\"asc\".equals(order) || \"desc\".equals(order)) {\n                    orderClause = String.format(\"doc.%s %s\", orderField, order);\n                } else {\n                    orderClause = String.format(\"doc.%s asc\", orderField);\n                }\n            }\n\n            /* Add some filters if the user doesn't have programming rights. */\n            if (hasProgrammingRights) {\n                f.format(\" order by %s\", orderClause);\n            } else {\n                f.format(\n                        \" and doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' order by %s\",\n                        orderClause);\n            }\n\n            String query = f.toString();\n\n            List<Object> queryResult = null;\n\n            /* This is needed because if the :space placeholder is not in the query, setting it would cause an exception */\n            if (space != null) {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase()))\n                                .bindValue(\"space\", space).setLimit(number).execute();\n            } else {\n                queryResult =\n                        queryManager.createQuery(query, Query.XWQL)\n                                .bindValue(\"keywords\", String.format(\"%%%s%%\", keywords.toUpperCase())).setLimit(number)\n                                .execute();\n            }\n\n            /* Build the result. */\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String className = (String) fields[3];\n                int objectNumber = (Integer) fields[4];\n\n                String id = Utils.getObjectId(wikiName, spaceName, pageName, className, objectNumber);\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /*\n                 * Check if the user has the right to see the found document. We also prevent guest users to access\n                 * object data in order to avoid leaking important information such as emails to crawlers.\n                 */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId) && xwikiContext.getUserReference() != null) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"object\");\n                    searchResult.setId(id);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setClassName(className);\n                    searchResult.setObjectNumber(objectNumber);\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    String pageUri =\n                        Utils.createURI(uriInfo.getBaseUri(), PageResource.class, wikiName, spaceName, pageName)\n                            .toString();\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    String objectUri =\n                        Utils.createURI(uriInfo.getBaseUri(), ObjectResource.class, wikiName, spaceName, pageName,\n                            className, objectNumber).toString();\n                    Link objectLink = new Link();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    searchResult.getLinks().add(objectLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Execute a database query using a supported query language. Limit search to documents.\n     *\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @param withPrettyNames Add the pretty names for users\n     * @param className Add object of type className\n     * @return list of results\n     */\n    protected List<SearchResult> searchDatabaseQuery(String query, String queryLanguage, String wikiName,\n            boolean hasProgrammingRights, boolean distinct, int number, int start, Boolean withPrettyNames,\n            String className)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n        XWikiContext xwikiContext = Utils.getXWikiContext(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (query == null || query.trim().startsWith(\"select\")) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n            if (distinct) {\n                f.format(\n                        \"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc %s\",\n                        query);\n            } else {\n                f.format(\"select doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc %s\", query);\n            }\n            String squery = f.toString();\n\n            if (!hasProgrammingRights) {\n                squery\n                        .replace(\"where \",\n                                \"where doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' and \");\n            }\n\n            List<Object> queryResult = null;\n\n            queryResult = queryManager.createQuery(squery, queryLanguage).setLimit(number).setOffset(start).execute();\n\n            /* Build the result. */\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    /*\n                     * Avoid to return object information if the user is not authenticated. This will prevent crawlers\n                     * to retrieve information such as email addresses and passwords from user's profiles.\n                     */\n                    if (className != null && !className.equals(\"\") && xwikiContext.getUserReference() != null) {\n                        BaseObject baseObject = Utils.getBaseObject(doc, className, 0, componentManager);\n                        if (baseObject != null) {\n                            searchResult.setObject(DomainObjectFactory.createObject(objectFactory,\n                                    uriInfo.getBaseUri(), xwikiContext, doc, baseObject, false, xwikiApi, false));\n                        }\n                    }\n\n                    String pageUri = null;\n                    try {\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                    UriBuilder\n                                            .fromUri(this.uriInfo.getBaseUri())\n                                            .path(PageResource.class)\n                                            .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                    URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                    URLEncoder.encode(pageName, \"UTF-8\"))\n                                            .toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                    UriBuilder\n                                            .fromUri(this.uriInfo.getBaseUri())\n                                            .path(PageTranslationResource.class)\n                                            .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                    URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                    URLEncoder.encode(pageName, \"UTF-8\"),\n                                                    language).toString();\n                        }\n                    } catch (UnsupportedEncodingException ex) {\n                        // This should never happen, UTF-8 is always valid.\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21606,"modified_method":"/**\n     * Execute a database query using a supported query language. Limit search to documents.\n     *\n     * @param number number of results to be returned\n     * @param start 0-based start offset\n     * @param withPrettyNames Add the pretty names for users\n     * @param className Add object of type className\n     * @return list of results\n     */\n    protected List<SearchResult> searchDatabaseQuery(String query, String queryLanguage, String wikiName,\n            boolean hasProgrammingRights, boolean distinct, int number, int start, Boolean withPrettyNames,\n            String className)\n            throws QueryException, IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n        XWikiContext xwikiContext = Utils.getXWikiContext(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (query == null || query.trim().startsWith(\"select\")) {\n                return result;\n            }\n\n            Formatter f = new Formatter();\n            if (distinct) {\n                f.format(\n                        \"select distinct doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc %s\",\n                        query);\n            } else {\n                f.format(\"select doc.fullName, doc.space, doc.name, doc.language from XWikiDocument as doc %s\", query);\n            }\n            String squery = f.toString();\n\n            if (!hasProgrammingRights) {\n                squery\n                        .replace(\"where \",\n                                \"where doc.space<>'XWiki' and doc.space<>'Admin' and doc.space<>'Panels' and doc.name<>'WebPreferences' and \");\n            }\n\n            List<Object> queryResult = null;\n\n            queryResult = queryManager.createQuery(squery, queryLanguage).setLimit(number).setOffset(start).execute();\n\n            /* Build the result. */\n            for (Object object : queryResult) {\n                Object[] fields = (Object[]) object;\n\n                String spaceName = (String) fields[1];\n                String pageName = (String) fields[2];\n                String language = (String) fields[3];\n\n                String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n                String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n\n                /* Check if the user has the right to see the found document */\n                if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                    Document doc = xwikiApi.getDocument(pageFullName);\n                    String title = doc.getDisplayTitle();\n\n                    SearchResult searchResult = objectFactory.createSearchResult();\n                    searchResult.setType(\"page\");\n                    searchResult.setId(pageId);\n                    searchResult.setPageFullName(pageFullName);\n                    searchResult.setTitle(title);\n                    searchResult.setWiki(wikiName);\n                    searchResult.setSpace(spaceName);\n                    searchResult.setPageName(pageName);\n                    searchResult.setVersion(doc.getVersion());\n                    searchResult.setAuthor(doc.getAuthor());\n                    Calendar calendar = Calendar.getInstance();\n                    calendar.setTime(doc.getDate());\n                    searchResult.setModified(calendar);\n\n                    if (withPrettyNames) {\n                        searchResult.setAuthorName(Utils.getAuthorName(doc.getAuthor(), componentManager));\n                    }\n\n                    /*\n                     * Avoid to return object information if the user is not authenticated. This will prevent crawlers\n                     * to retrieve information such as email addresses and passwords from user's profiles.\n                     */\n                    if (className != null && !className.equals(\"\") && xwikiContext.getUserReference() != null) {\n                        BaseObject baseObject = Utils.getBaseObject(doc, className, 0, componentManager);\n                        if (baseObject != null) {\n                            searchResult.setObject(DomainObjectFactory.createObject(objectFactory,\n                                    uriInfo.getBaseUri(), xwikiContext, doc, baseObject, false, xwikiApi, false));\n                        }\n                    }\n\n                    String pageUri = null;\n                    if (StringUtils.isBlank(language)) {\n                        pageUri =\n                            Utils.createURI(this.uriInfo.getBaseUri(), PageResource.class, wikiName, spaceName,\n                                pageName).toString();\n                    } else {\n                        searchResult.setLanguage(language);\n                        pageUri =\n                            Utils.createURI(this.uriInfo.getBaseUri(), PageTranslationResource.class, wikiName,\n                                spaceName, pageName, language).toString();\n                    }\n\n                    Link pageLink = new Link();\n                    pageLink.setHref(pageUri);\n                    pageLink.setRel(Relations.PAGE);\n                    searchResult.getLinks().add(pageLink);\n\n                    result.add(searchResult);\n                }\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Search for keywords using lucene search. It returns results for pages and attachments. The query can be executed\n     * on multiple wikis if the wikis parameter is specified. Otherwise it's run only on the wiki specified by\n     * defaultWikiName. wikis and defaultWikiName parameters cannot be both null.\n     *\n     * @param defaultWikiName the name of the wiki to run the query on (can be null)\n     * @param wikis the name of the wikis to run the query on (can be null). This takes precedence if defaultWikiName is\n     * specified as well.\n     * @param number the number of results to be returned. If it's -1 then the first 20 results are returned.\n     * @param start 0-based start offset\n     */\n    protected List<SearchResult> searchLucene(String query, String defaultWikiName, String wikis,\n            boolean hasProgrammingRights, String orderField, String order, int number, int start,\n            Boolean withPrettyNames)\n            throws IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (query == null) {\n                return result;\n            }\n\n            /*\n             * One of the two must be non-null. If default wiki name is non-null and wikis is null, then it's a local\n             * search in a specific wiki. If wiki name is null and wikis is non-null it's a global query on different\n             * wikis. If both of them are non-null then the wikis parameter takes the precedence.\n             */\n            if (defaultWikiName == null && wikis == null) {\n                return result;\n            }\n\n            if (!hasProgrammingRights) {\n                query += \" AND NOT space:XWiki AND NOT space:Admin AND NOT space:Panels AND NOT name:WebPreferences\";\n            }\n\n            try {\n                XWikiContext context = Utils.getXWikiContext(componentManager);\n                LucenePlugin lucene = (LucenePlugin) Utils.getXWiki(componentManager).getPlugin(\"lucene\", context);\n\n                /*\n                 * Compute the parameter to be passed to the plugin for ordering: orderField (for ordering on orderField\n                 * in ascending order) or -orderFiled (for descending order)\n                 */\n                String orderParameter = \"\";\n                if (!StringUtils.isBlank(orderField)) {\n                    if (\"desc\".equals(order)) {\n                        orderParameter = String.format(\"-%s\", orderField);\n                    } else {\n                        orderParameter = orderField;\n                    }\n                }\n\n                SearchResults luceneSearchResults =\n                        lucene.getSearchResults(query, orderParameter, (wikis == null) ? defaultWikiName : wikis, \"\",\n                                context);\n\n                /*\n                 * Return only the first 20 results otherwise specified. It also seems that Lucene indexing starts at 1\n                 * (though starting from 0 works as well, and gives the samer results as if starting from 1). To keep\n                 * things consistent we add 1 to the passed start value (which is always 0-based).\n                 */\n                List<com.xpn.xwiki.plugin.lucene.SearchResult> luceneResults =\n                        luceneSearchResults.getResults(start + 1, (number == -1) ? 20 : number);\n\n                /* Build the result. */\n                for (com.xpn.xwiki.plugin.lucene.SearchResult luceneSearchResult : luceneResults) {\n                    String wikiName = luceneSearchResult.getWiki();\n                    String spaceName = luceneSearchResult.getSpace();\n                    String pageName = luceneSearchResult.getName();\n                    String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n                    String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n                    /* Check if the user has the right to see the found document */\n                    if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                        Document doc = xwikiApi.getDocument(pageId);\n                        String title = doc.getDisplayTitle();\n\n                        SearchResult searchResult = objectFactory.createSearchResult();\n\n                        searchResult.setPageFullName(pageFullName);\n                        searchResult.setTitle(title);\n                        searchResult.setWiki(wikiName);\n                        searchResult.setSpace(spaceName);\n                        searchResult.setPageName(pageName);\n                        searchResult.setVersion(doc.getVersion());\n\n                        /*\n                         * Check if the result is a page or an attachment, and fill the corresponding fields in the\n                         * result accordingly.\n                         */\n                        if (luceneSearchResult.getType().equals(LucenePlugin.DOCTYPE_WIKIPAGE)) {\n                            searchResult.setType(\"page\");\n                            searchResult.setId(Utils.getPageId(wikiName, spaceName, pageName));\n                        } else {\n                            searchResult.setType(\"file\");\n                            searchResult.setId(String.format(\"%s@%s\", Utils.getPageId(wikiName, pageFullName),\n                                    luceneSearchResult.getFilename()));\n                            searchResult.setFilename(luceneSearchResult.getFilename());\n\n                            String attachmentUri =\n                                    UriBuilder\n                                            .fromUri(this.uriInfo.getBaseUri())\n                                            .path(AttachmentResource.class)\n                                            .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                    URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                    URLEncoder.encode(pageName, \"UTF-8\"),\n                                                    URLEncoder.encode(luceneSearchResult.getFilename(), \"UTF-8\"))\n                                            .toString();\n\n                            Link attachmentLink = new Link();\n                            attachmentLink.setHref(attachmentUri);\n                            attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n                            searchResult.getLinks().add(attachmentLink);\n                        }\n\n                        searchResult.setScore(luceneSearchResult.getScore());\n                        searchResult.setAuthor(luceneSearchResult.getAuthor());\n                        Calendar calendar = Calendar.getInstance();\n                        calendar.setTime(doc.getDate());\n                        searchResult.setModified(calendar);\n\n                        if (withPrettyNames) {\n                            searchResult.setAuthorName(Utils.getAuthorName(luceneSearchResult.getAuthor(),\n                                    componentManager));\n                        }\n\n                        String language = luceneSearchResult.getLanguage();\n                        if (language.equals(\"default\")) {\n                            language = \"\";\n                        }\n\n                        String pageUri = null;\n                        try {\n                            if (StringUtils.isBlank(language)) {\n                                pageUri =\n                                        UriBuilder\n                                                .fromUri(this.uriInfo.getBaseUri())\n                                                .path(PageResource.class)\n                                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                        URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                        URLEncoder.encode(pageName, \"UTF-8\"))\n                                                .toString();\n                            } else {\n                                searchResult.setLanguage(language);\n                                pageUri =\n                                        UriBuilder\n                                                .fromUri(this.uriInfo.getBaseUri())\n                                                .path(PageTranslationResource.class)\n                                                .buildFromEncoded(URLEncoder.encode(wikiName, \"UTF-8\"),\n                                                        URLEncoder.encode(spaceName, \"UTF-8\"),\n                                                        URLEncoder.encode(pageName, \"UTF-8\"), language).toString();\n                            }\n                        } catch (UnsupportedEncodingException ex) {\n                            // This should never happen, UTF-8 is always valid.\n                        }\n\n                        Link pageLink = new Link();\n                        pageLink.setHref(pageUri);\n                        pageLink.setRel(Relations.PAGE);\n                        searchResult.getLinks().add(pageLink);\n\n                        result.add(searchResult);\n                    }\n                }\n            } catch (Exception e) {\n                throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_UNKNOWN,\n                        \"Error performing lucene search\", e);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21607,"modified_method":"/**\n     * Search for keywords using lucene search. It returns results for pages and attachments. The query can be executed\n     * on multiple wikis if the wikis parameter is specified. Otherwise it's run only on the wiki specified by\n     * defaultWikiName. wikis and defaultWikiName parameters cannot be both null.\n     *\n     * @param defaultWikiName the name of the wiki to run the query on (can be null)\n     * @param wikis the name of the wikis to run the query on (can be null). This takes precedence if defaultWikiName is\n     * specified as well.\n     * @param number the number of results to be returned. If it's -1 then the first 20 results are returned.\n     * @param start 0-based start offset\n     */\n    protected List<SearchResult> searchLucene(String query, String defaultWikiName, String wikis,\n            boolean hasProgrammingRights, String orderField, String order, int number, int start,\n            Boolean withPrettyNames)\n            throws IllegalArgumentException, UriBuilderException, XWikiException\n    {\n        XWiki xwikiApi = Utils.getXWikiApi(componentManager);\n\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        /* This try is just needed for executing the finally clause. */\n        try {\n            List<SearchResult> result = new ArrayList<SearchResult>();\n\n            if (query == null) {\n                return result;\n            }\n\n            /*\n             * One of the two must be non-null. If default wiki name is non-null and wikis is null, then it's a local\n             * search in a specific wiki. If wiki name is null and wikis is non-null it's a global query on different\n             * wikis. If both of them are non-null then the wikis parameter takes the precedence.\n             */\n            if (defaultWikiName == null && wikis == null) {\n                return result;\n            }\n\n            if (!hasProgrammingRights) {\n                query += \" AND NOT space:XWiki AND NOT space:Admin AND NOT space:Panels AND NOT name:WebPreferences\";\n            }\n\n            try {\n                XWikiContext context = Utils.getXWikiContext(componentManager);\n                LucenePlugin lucene = (LucenePlugin) Utils.getXWiki(componentManager).getPlugin(\"lucene\", context);\n\n                /*\n                 * Compute the parameter to be passed to the plugin for ordering: orderField (for ordering on orderField\n                 * in ascending order) or -orderFiled (for descending order)\n                 */\n                String orderParameter = \"\";\n                if (!StringUtils.isBlank(orderField)) {\n                    if (\"desc\".equals(order)) {\n                        orderParameter = String.format(\"-%s\", orderField);\n                    } else {\n                        orderParameter = orderField;\n                    }\n                }\n\n                SearchResults luceneSearchResults =\n                        lucene.getSearchResults(query, orderParameter, (wikis == null) ? defaultWikiName : wikis, \"\",\n                                context);\n\n                /*\n                 * Return only the first 20 results otherwise specified. It also seems that Lucene indexing starts at 1\n                 * (though starting from 0 works as well, and gives the samer results as if starting from 1). To keep\n                 * things consistent we add 1 to the passed start value (which is always 0-based).\n                 */\n                List<com.xpn.xwiki.plugin.lucene.SearchResult> luceneResults =\n                        luceneSearchResults.getResults(start + 1, (number == -1) ? 20 : number);\n\n                /* Build the result. */\n                for (com.xpn.xwiki.plugin.lucene.SearchResult luceneSearchResult : luceneResults) {\n                    String wikiName = luceneSearchResult.getWiki();\n                    String spaceName = luceneSearchResult.getSpace();\n                    String pageName = luceneSearchResult.getName();\n                    String pageFullName = Utils.getPageFullName(wikiName, spaceName, pageName);\n                    String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n                    /* Check if the user has the right to see the found document */\n                    if (xwikiApi.hasAccessLevel(\"view\", pageId)) {\n                        Document doc = xwikiApi.getDocument(pageId);\n                        String title = doc.getDisplayTitle();\n\n                        SearchResult searchResult = objectFactory.createSearchResult();\n\n                        searchResult.setPageFullName(pageFullName);\n                        searchResult.setTitle(title);\n                        searchResult.setWiki(wikiName);\n                        searchResult.setSpace(spaceName);\n                        searchResult.setPageName(pageName);\n                        searchResult.setVersion(doc.getVersion());\n\n                        /*\n                         * Check if the result is a page or an attachment, and fill the corresponding fields in the\n                         * result accordingly.\n                         */\n                        if (luceneSearchResult.getType().equals(LucenePlugin.DOCTYPE_WIKIPAGE)) {\n                            searchResult.setType(\"page\");\n                            searchResult.setId(Utils.getPageId(wikiName, spaceName, pageName));\n                        } else {\n                            searchResult.setType(\"file\");\n                            searchResult.setId(String.format(\"%s@%s\", Utils.getPageId(wikiName, pageFullName),\n                                    luceneSearchResult.getFilename()));\n                            searchResult.setFilename(luceneSearchResult.getFilename());\n\n                            String attachmentUri =\n                                Utils.createURI(this.uriInfo.getBaseUri(), AttachmentResource.class, wikiName,\n                                    spaceName, pageName, luceneSearchResult.getFilename()).toString();\n\n                            Link attachmentLink = new Link();\n                            attachmentLink.setHref(attachmentUri);\n                            attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n                            searchResult.getLinks().add(attachmentLink);\n                        }\n\n                        searchResult.setScore(luceneSearchResult.getScore());\n                        searchResult.setAuthor(luceneSearchResult.getAuthor());\n                        Calendar calendar = Calendar.getInstance();\n                        calendar.setTime(doc.getDate());\n                        searchResult.setModified(calendar);\n\n                        if (withPrettyNames) {\n                            searchResult.setAuthorName(Utils.getAuthorName(luceneSearchResult.getAuthor(),\n                                    componentManager));\n                        }\n\n                        String language = luceneSearchResult.getLanguage();\n                        if (language.equals(\"default\")) {\n                            language = \"\";\n                        }\n\n                        String pageUri = null;\n                        if (StringUtils.isBlank(language)) {\n                            pageUri =\n                                Utils.createURI(this.uriInfo.getBaseUri(), PageResource.class, wikiName, spaceName,\n                                    pageName).toString();\n                        } else {\n                            searchResult.setLanguage(language);\n                            pageUri =\n                                Utils.createURI(this.uriInfo.getBaseUri(), PageTranslationResource.class, wikiName,\n                                    spaceName, pageName, language).toString();\n                        }\n\n                        Link pageLink = new Link();\n                        pageLink.setHref(pageUri);\n                        pageLink.setRel(Relations.PAGE);\n                        searchResult.getLinks().add(pageLink);\n\n                        result.add(searchResult);\n                    }\n                }\n            } catch (Exception e) {\n                throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_UNKNOWN,\n                        \"Error performing lucene search\", e);\n            }\n\n            return result;\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Properties getClassProperties(String wikiName, String className) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            com.xpn.xwiki.api.Class xwikiClass = Utils.getXWikiApi(componentManager).getClass(className);\n            if (xwikiClass == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Class clazz = DomainObjectFactory.createClass(objectFactory, uriInfo.getBaseUri(), wikiName, xwikiClass);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(clazz.getProperties());\n\n            String classUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ClassResource.class).build(wikiName,\n                    xwikiClass.getName()).toString();\n            Link classLink = objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            properties.getLinks().add(classLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21608,"modified_method":"@Override\n    public Properties getClassProperties(String wikiName, String className) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            com.xpn.xwiki.api.Class xwikiClass = Utils.getXWikiApi(componentManager).getClass(className);\n            if (xwikiClass == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Class clazz = DomainObjectFactory.createClass(objectFactory, uriInfo.getBaseUri(), wikiName, xwikiClass);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(clazz.getProperties());\n\n            String classUri = Utils.createURI(uriInfo.getBaseUri(), ClassResource.class, wikiName,\n                xwikiClass.getName()).toString();\n            Link classLink = objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            properties.getLinks().add(classLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Property getClassProperty(String wikiName, String className, String propertyName) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            com.xpn.xwiki.api.Class xwikiClass = Utils.getXWikiApi(componentManager).getClass(className);\n            if (xwikiClass == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Class clazz = DomainObjectFactory.createClass(objectFactory, uriInfo.getBaseUri(), wikiName, xwikiClass);\n\n            for (Property property : clazz.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String classUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ClassResource.class)\n                            .build(wikiName, xwikiClass.getName()).toString();\n                    Link classLink = objectFactory.createLink();\n                    classLink.setHref(classUri);\n                    classLink.setRel(Relations.CLASS);\n                    property.getLinks().add(classLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21609,"modified_method":"@Override\n    public Property getClassProperty(String wikiName, String className, String propertyName) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            com.xpn.xwiki.api.Class xwikiClass = Utils.getXWikiApi(componentManager).getClass(className);\n            if (xwikiClass == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Class clazz = DomainObjectFactory.createClass(objectFactory, uriInfo.getBaseUri(), wikiName, xwikiClass);\n\n            for (Property property : clazz.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String classUri = Utils.createURI(uriInfo.getBaseUri(), ClassResource.class, wikiName,\n                        xwikiClass.getName()).toString();\n                    Link classLink = objectFactory.createLink();\n                    classLink.setHref(classUri);\n                    classLink.setRel(Relations.CLASS);\n                    property.getLinks().add(classLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Response postComment(String wikiName, String spaceName, String pageName, Comment comment)\n            throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, true);\n\n            Document doc = documentInfo.getDocument();\n\n            int id = doc.createNewObject(\"XWiki.XWikiComments\");\n            com.xpn.xwiki.api.Object commentObject = doc.getObject(\"XWiki.XWikiComments\", id);\n            commentObject.set(\"author\", Utils.getXWikiUser(componentManager));\n            commentObject.set(\"date\", new Date());\n\n            boolean save = false;\n\n            if (comment.getHighlight() != null) {\n                commentObject.set(\"highlight\", comment.getHighlight());\n                save = true;\n            }\n\n            if (comment.getText() != null) {\n                commentObject.set(\"comment\", comment.getText());\n                save = true;\n            }\n\n            if (comment.getReplyTo() != null) {\n                commentObject.set(\"replyto\", comment.getReplyTo());\n            }\n\n            if (save) {\n                doc.save();\n\n                Comment createdComment = DomainObjectFactory\n                        .createComment(objectFactory, uriInfo.getBaseUri(), doc, commentObject,\n                                Utils.getXWikiApi(componentManager), false);\n\n                return Response.created(UriBuilder.fromUri(uriInfo.getBaseUri()).path(CommentResource.class)\n                        .build(wikiName, spaceName, pageName, id)).entity(createdComment).build();\n            }\n\n            return null;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21610,"modified_method":"@Override\n    public Response postComment(String wikiName, String spaceName, String pageName, Comment comment)\n            throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, true);\n\n            Document doc = documentInfo.getDocument();\n\n            int id = doc.createNewObject(\"XWiki.XWikiComments\");\n            com.xpn.xwiki.api.Object commentObject = doc.getObject(\"XWiki.XWikiComments\", id);\n            commentObject.set(\"author\", Utils.getXWikiUser(componentManager));\n            commentObject.set(\"date\", new Date());\n\n            boolean save = false;\n\n            if (comment.getHighlight() != null) {\n                commentObject.set(\"highlight\", comment.getHighlight());\n                save = true;\n            }\n\n            if (comment.getText() != null) {\n                commentObject.set(\"comment\", comment.getText());\n                save = true;\n            }\n\n            if (comment.getReplyTo() != null) {\n                commentObject.set(\"replyto\", comment.getReplyTo());\n            }\n\n            if (save) {\n                doc.save();\n\n                Comment createdComment = DomainObjectFactory\n                        .createComment(objectFactory, uriInfo.getBaseUri(), doc, commentObject,\n                                Utils.getXWikiApi(componentManager), false);\n\n                return Response.created(Utils.createURI(uriInfo.getBaseUri(), CommentResource.class, wikiName,\n                    spaceName, pageName, id)).entity(createdComment).build();\n            }\n\n            return null;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Page createPage(ObjectFactory objectFactory, URI baseUri, URI self, Document doc, boolean useVersion,\n            XWiki xwikiApi, Boolean withPrettyNames) throws XWikiException\n    {\n        Page page = objectFactory.createPage();\n        fillPageSummary(page, objectFactory, baseUri, doc, useVersion, xwikiApi, withPrettyNames);\n\n        page.setVersion(doc.getVersion());\n        page.setMajorVersion(doc.getRCSVersion().at(0));\n        page.setMinorVersion(doc.getRCSVersion().at(1));\n        page.setLanguage(doc.getLanguage());\n        page.setCreator(doc.getCreator());\n        if (withPrettyNames) {\n            page.setCreatorName(xwikiApi.getUserName(doc.getCreator(), false));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(doc.getCreationDate());\n        page.setCreated(calendar);\n\n        page.setModifier(doc.getContentAuthor());\n        if (withPrettyNames) {\n            page.setModifierName(xwikiApi.getUserName(doc.getContentAuthor(), false));\n        }\n\n        calendar = Calendar.getInstance();\n        calendar.setTime(doc.getContentUpdateDate());\n        page.setModified(calendar);\n\n        page.setContent(doc.getContent());\n\n        if (self != null) {\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(self.toString());\n            pageLink.setRel(Relations.SELF);\n            page.getLinks().add(pageLink);\n        }\n\n        com.xpn.xwiki.api.Class xwikiClass = doc.getxWikiClass();\n        if (xwikiClass != null) {\n            String classUri =\n                    UriBuilder.fromUri(baseUri).path(ClassResource.class).build(doc.getWiki(), xwikiClass.getName())\n                            .toString();\n            Link classLink = objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            page.getLinks().add(classLink);\n        }\n\n        return page;\n    }","id":21611,"modified_method":"public static Page createPage(ObjectFactory objectFactory, URI baseUri, URI self, Document doc, boolean useVersion,\n        XWiki xwikiApi, Boolean withPrettyNames) throws XWikiException\n    {\n        Page page = objectFactory.createPage();\n        fillPageSummary(page, objectFactory, baseUri, doc, useVersion, xwikiApi, withPrettyNames);\n\n        page.setVersion(doc.getVersion());\n        page.setMajorVersion(doc.getRCSVersion().at(0));\n        page.setMinorVersion(doc.getRCSVersion().at(1));\n        page.setLanguage(doc.getLanguage());\n        page.setCreator(doc.getCreator());\n        if (withPrettyNames) {\n            page.setCreatorName(xwikiApi.getUserName(doc.getCreator(), false));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(doc.getCreationDate());\n        page.setCreated(calendar);\n\n        page.setModifier(doc.getContentAuthor());\n        if (withPrettyNames) {\n            page.setModifierName(xwikiApi.getUserName(doc.getContentAuthor(), false));\n        }\n\n        calendar = Calendar.getInstance();\n        calendar.setTime(doc.getContentUpdateDate());\n        page.setModified(calendar);\n\n        page.setContent(doc.getContent());\n\n        if (self != null) {\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(self.toString());\n            pageLink.setRel(Relations.SELF);\n            page.getLinks().add(pageLink);\n        }\n\n        com.xpn.xwiki.api.Class xwikiClass = doc.getxWikiClass();\n        if (xwikiClass != null) {\n            String classUri = uri(baseUri, ClassResource.class, doc.getWiki(), xwikiClass.getName());\n            Link classLink = objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            page.getLinks().add(classLink);\n        }\n\n        return page;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Translations createTranslations(ObjectFactory objectFactory, URI baseUri, Document doc)\n            throws XWikiException\n    {\n        Translations translations = objectFactory.createTranslations();\n\n        List<String> languages = doc.getTranslationList();\n\n        if (!languages.isEmpty()) {\n            if (!doc.getDefaultLanguage().equals(\"\")) {\n                translations.setDefault(doc.getDefaultLanguage());\n\n                Translation translation = objectFactory.createTranslation();\n                translation.setLanguage(doc.getDefaultLanguage());\n\n                /* Add the default page with the default translation explicitely */\n                String pageTranslationUri =\n                        UriBuilder.fromUri(baseUri).path(PageResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link pageTranslationLink = objectFactory.createLink();\n                pageTranslationLink.setHref(pageTranslationUri);\n                pageTranslationLink.setRel(Relations.PAGE);\n                translation.getLinks().add(pageTranslationLink);\n\n                String historyUri =\n                        UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link historyLink = objectFactory.createLink();\n                historyLink.setHref(historyUri);\n                historyLink.setRel(Relations.HISTORY);\n                translation.getLinks().add(historyLink);\n\n                translations.getTranslations().add(translation);\n            }\n        }\n\n        for (String language : languages) {\n            Translation translation = objectFactory.createTranslation();\n            translation.setLanguage(language);\n\n            String pageTranslationUri =\n                    UriBuilder.fromUri(baseUri).path(PageTranslationResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), language).toString();\n            Link pageTranslationLink = objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri =\n                    UriBuilder.fromUri(baseUri).path(PageTranslationHistoryResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), language).toString();\n            Link historyLink = objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        return translations;\n    }","id":21612,"modified_method":"public static Translations createTranslations(ObjectFactory objectFactory, URI baseUri, Document doc)\n        throws XWikiException\n    {\n        Translations translations = objectFactory.createTranslations();\n\n        List<String> languages = doc.getTranslationList();\n\n        if (!languages.isEmpty()) {\n            if (!doc.getDefaultLanguage().equals(\"\")) {\n                translations.setDefault(doc.getDefaultLanguage());\n\n                Translation translation = objectFactory.createTranslation();\n                translation.setLanguage(doc.getDefaultLanguage());\n\n                /* Add the default page with the default translation explicitely */\n                String pageTranslationUri =\n                    uri(baseUri, PageResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n                Link pageTranslationLink = objectFactory.createLink();\n                pageTranslationLink.setHref(pageTranslationUri);\n                pageTranslationLink.setRel(Relations.PAGE);\n                translation.getLinks().add(pageTranslationLink);\n\n                String historyUri =\n                    uri(baseUri, PageHistoryResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n                Link historyLink = objectFactory.createLink();\n                historyLink.setHref(historyUri);\n                historyLink.setRel(Relations.HISTORY);\n                translation.getLinks().add(historyLink);\n\n                translations.getTranslations().add(translation);\n            }\n        }\n\n        for (String language : languages) {\n            Translation translation = objectFactory.createTranslation();\n            translation.setLanguage(language);\n\n            String pageTranslationUri =\n                uri(baseUri, PageTranslationResource.class, doc.getWiki(), doc.getSpace(), doc.getName(), language);\n            Link pageTranslationLink = objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri =\n                uri(baseUri, PageTranslationHistoryResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                    language);\n            Link historyLink = objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        return translations;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Attachment createAttachment(ObjectFactory objectFactory, URI baseUri,\n            com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl,\n            XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        Attachment attachment = objectFactory.createAttachment();\n\n        fillAttachment(attachment, objectFactory, baseUri, xwikiAttachment, xwikiRelativeUrl, xwikiAbsoluteUrl,\n                xwikiApi, withPrettyNames);\n\n        String attachmentUri = createAttachmentUri(baseUri, xwikiAttachment, xwikiAttachment.getDocument(), false);\n\n        Link attachmentLink = objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        return attachment;\n    }","id":21613,"modified_method":"public static Attachment createAttachment(ObjectFactory objectFactory, URI baseUri,\n        com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl, XWiki xwikiApi,\n        Boolean withPrettyNames)\n    {\n        Attachment attachment = objectFactory.createAttachment();\n\n        fillAttachment(attachment, objectFactory, baseUri, xwikiAttachment, xwikiRelativeUrl, xwikiAbsoluteUrl,\n            xwikiApi, withPrettyNames);\n\n        Document doc = xwikiAttachment.getDocument();\n        String attachmentUri =\n            uri(baseUri, AttachmentResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                xwikiAttachment.getFilename());\n\n        Link attachmentLink = objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        return attachment;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Space createSpace(ObjectFactory objectFactory, URI baseUri, String wikiName, String spaceName,\n            Document home)\n    {\n        Space space = objectFactory.createSpace();\n        space.setId(Utils.getSpaceId(wikiName, spaceName));\n        space.setWiki(wikiName);\n        space.setName(spaceName);\n        if (home != null) {\n            space.setHome(home.getPrefixedFullName());\n            space.setXwikiRelativeUrl(home.getURL(\"view\"));\n            space.setXwikiAbsoluteUrl(home.getExternalURL(\"view\"));\n        }\n\n        String pagesUri = UriBuilder.fromUri(baseUri).path(PagesResource.class).build(wikiName, spaceName).toString();\n        Link pagesLink = objectFactory.createLink();\n        pagesLink.setHref(pagesUri);\n        pagesLink.setRel(Relations.PAGES);\n        space.getLinks().add(pagesLink);\n\n        if (home != null) {\n            String homeUri =\n                    UriBuilder.fromUri(baseUri).path(PageResource.class).build(wikiName, spaceName, home.getName())\n                            .toString();\n            Link homeLink = objectFactory.createLink();\n            homeLink.setHref(homeUri);\n            homeLink.setRel(Relations.HOME);\n            space.getLinks().add(homeLink);\n        }\n\n        String searchUri =\n                UriBuilder.fromUri(baseUri).path(SpaceSearchResource.class).build(wikiName, spaceName).toString();\n        Link searchLink = objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        space.getLinks().add(searchLink);\n\n        return space;\n    }","id":21614,"modified_method":"public static Space createSpace(ObjectFactory objectFactory, URI baseUri, String wikiName, String spaceName,\n        Document home)\n    {\n        Space space = objectFactory.createSpace();\n        space.setId(Utils.getSpaceId(wikiName, spaceName));\n        space.setWiki(wikiName);\n        space.setName(spaceName);\n        if (home != null) {\n            space.setHome(home.getPrefixedFullName());\n            space.setXwikiRelativeUrl(home.getURL(\"view\"));\n            space.setXwikiAbsoluteUrl(home.getExternalURL(\"view\"));\n        }\n\n        String pagesUri = uri(baseUri, PagesResource.class, wikiName, spaceName);\n        Link pagesLink = objectFactory.createLink();\n        pagesLink.setHref(pagesUri);\n        pagesLink.setRel(Relations.PAGES);\n        space.getLinks().add(pagesLink);\n\n        if (home != null) {\n            String homeUri = uri(baseUri, PageResource.class, wikiName, spaceName, home.getName());\n            Link homeLink = objectFactory.createLink();\n            homeLink.setHref(homeUri);\n            homeLink.setRel(Relations.HOME);\n            space.getLinks().add(homeLink);\n        }\n\n        String searchUri = uri(baseUri, SpaceSearchResource.class, wikiName, spaceName);\n        Link searchLink = objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        space.getLinks().add(searchLink);\n\n        return space;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static ObjectSummary createObjectSummary(ObjectFactory objectFactory, URI baseUri,\n            XWikiContext xwikiContext, Document doc, BaseObject xwikiObject, boolean useVersion, XWiki xwikiApi,\n            Boolean withPrettyNames) throws XWikiException\n    {\n        ObjectSummary objectSummary = objectFactory.createObjectSummary();\n        fillObjectSummary(objectSummary, objectFactory, baseUri, doc, xwikiObject, xwikiApi, withPrettyNames);\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.OBJECT);\n        objectSummary.getLinks().add(objectLink);\n\n        String propertiesUri;\n\n        if (useVersion) {\n            propertiesUri =\n                    UriBuilder\n                            .fromUri(baseUri)\n                            .path(ObjectPropertiesAtPageVersionResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion(),\n                                    xwikiObject.getClassName(),\n                                    xwikiObject.getNumber()).toString();\n        } else {\n            propertiesUri =\n                    UriBuilder\n                            .fromUri(baseUri)\n                            .path(ObjectPropertiesResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), xwikiObject.getClassName(),\n                                    xwikiObject.getNumber()).toString();\n        }\n\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        objectSummary.getLinks().add(propertyLink);\n\n        return objectSummary;\n    }","id":21615,"modified_method":"public static ObjectSummary createObjectSummary(ObjectFactory objectFactory, URI baseUri,\n        XWikiContext xwikiContext, Document doc, BaseObject xwikiObject, boolean useVersion, XWiki xwikiApi,\n        Boolean withPrettyNames) throws XWikiException\n    {\n        ObjectSummary objectSummary = objectFactory.createObjectSummary();\n        fillObjectSummary(objectSummary, objectFactory, baseUri, doc, xwikiObject, xwikiApi, withPrettyNames);\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.OBJECT);\n        objectSummary.getLinks().add(objectLink);\n\n        String propertiesUri;\n\n        if (useVersion) {\n            propertiesUri =\n                uri(baseUri, ObjectPropertiesAtPageVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                    doc.getVersion(), xwikiObject.getClassName(), xwikiObject.getNumber());\n        } else {\n            propertiesUri =\n                uri(baseUri, ObjectPropertiesResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                    xwikiObject.getClassName(), xwikiObject.getNumber());\n        }\n\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        objectSummary.getLinks().add(propertyLink);\n\n        return objectSummary;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n            Document doc, boolean useVersion, XWiki xwikiApi, Boolean withPrettyNames) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n        pageSummary.setVersion(doc.getVersion());\n        pageSummary.setAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            pageSummary.setAuthorName(xwikiApi.getUserName(doc.getAuthor(), false));\n        }\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri =\n                UriBuilder.fromUri(baseUri).path(SpaceResource.class).build(doc.getWiki(), doc.getSpace()).toString();\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri =\n                    UriBuilder.fromUri(baseUri).path(PageResource.class)\n                            .build(parent.getWiki(), parent.getSpace(), parent.getName()).toString();\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri =\n                UriBuilder.fromUri(baseUri).path(PageHistoryResource.class)\n                        .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                    UriBuilder.fromUri(baseUri).path(PageChildrenResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                        UriBuilder.fromUri(baseUri).path(CommentsVersionResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri =\n                        UriBuilder.fromUri(baseUri).path(CommentsResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                        UriBuilder.fromUri(baseUri).path(AttachmentsAtPageVersionResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri =\n                        UriBuilder.fromUri(baseUri).path(AttachmentsResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                        UriBuilder.fromUri(baseUri).path(ObjectsAtPageVersionResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri =\n                        UriBuilder.fromUri(baseUri).path(ObjectsResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri =\n                        UriBuilder.fromUri(baseUri).path(PageTagsResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName()).toString();\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","id":21616,"modified_method":"private static void fillPageSummary(PageSummary pageSummary, ObjectFactory objectFactory, URI baseUri,\n        Document doc, boolean useVersion, XWiki xwikiApi, Boolean withPrettyNames) throws XWikiException\n    {\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(createTranslations(objectFactory, baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntaxId());\n        pageSummary.setVersion(doc.getVersion());\n        pageSummary.setAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            pageSummary.setAuthorName(xwikiApi.getUserName(doc.getAuthor(), false));\n        }\n\n        Document parent = Utils.getParentDocument(doc, xwikiApi);\n        pageSummary.setParent(doc.getParent());\n        // parentId must not be set if the parent document does not exist.\n        if (parent != null && !parent.isNew()) {\n            pageSummary.setParentId(parent.getPrefixedFullName());\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        String spaceUri = uri(baseUri, SpaceResource.class, doc.getWiki(), doc.getSpace());\n        Link spaceLink = objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parent != null) {\n            String parentUri = uri(baseUri, PageResource.class, parent.getWiki(), parent.getSpace(), parent.getName());\n            Link parentLink = objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri = uri(baseUri, PageHistoryResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n        Link historyLink = objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri =\n                uri(baseUri, PageChildrenResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n            Link pageChildrenLink = objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri =\n                    uri(baseUri, CommentsVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                        doc.getVersion());\n            } else {\n                commentsUri = uri(baseUri, CommentsResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n            }\n\n            Link commentsLink = objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri =\n                    uri(baseUri, AttachmentsAtPageVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                        doc.getVersion());\n            } else {\n                attachmentsUri = uri(baseUri, AttachmentsResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n            }\n\n            Link attachmentsLink = objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri =\n                    uri(baseUri, ObjectsAtPageVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                        doc.getVersion());\n            } else {\n                objectsUri = uri(baseUri, ObjectsResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n            }\n            Link objectsLink = objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri = uri(baseUri, PageTagsResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n                Link tagsLink = objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = uri(baseUri, SyntaxesResource.class);\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static HistorySummary createHistorySummary(ObjectFactory objectFactory, URI baseUri, String wikiName,\n            String spaceName, String pageName, String language, Version version, String modifier, Date modified,\n            XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        HistorySummary historySummary = objectFactory.createHistorySummary();\n\n        String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n        historySummary.setPageId(pageId);\n        historySummary.setWiki(wikiName);\n        historySummary.setSpace(spaceName);\n        historySummary.setName(pageName);\n        historySummary.setVersion(version.toString());\n        historySummary.setMajorVersion(version.at(0));\n        historySummary.setMinorVersion(version.at(1));\n        historySummary.setModifier(modifier);\n        if (withPrettyNames) {\n            historySummary.setModifierName(xwikiApi.getUserName(modifier, false));\n        }\n\n        historySummary.setLanguage(language);\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(modified);\n        historySummary.setModified(calendar);\n\n        if (language == null) {\n            String pageUri =\n                    UriBuilder.fromUri(baseUri).path(PageVersionResource.class)\n                            .build(wikiName, spaceName, pageName, version).toString();\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(pageUri);\n            pageLink.setRel(Relations.PAGE);\n            historySummary.getLinks().add(pageLink);\n        } else {\n            String pageUri =\n                    UriBuilder.fromUri(baseUri).path(PageTranslationVersionResource.class)\n                            .build(wikiName, spaceName, pageName, language, version).toString();\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(pageUri);\n            pageLink.setRel(Relations.PAGE);\n            historySummary.getLinks().add(pageLink);\n        }\n\n        return historySummary;\n    }","id":21617,"modified_method":"public static HistorySummary createHistorySummary(ObjectFactory objectFactory, URI baseUri, String wikiName,\n        String spaceName, String pageName, String language, Version version, String modifier, Date modified,\n        XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        HistorySummary historySummary = objectFactory.createHistorySummary();\n\n        String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n\n        historySummary.setPageId(pageId);\n        historySummary.setWiki(wikiName);\n        historySummary.setSpace(spaceName);\n        historySummary.setName(pageName);\n        historySummary.setVersion(version.toString());\n        historySummary.setMajorVersion(version.at(0));\n        historySummary.setMinorVersion(version.at(1));\n        historySummary.setModifier(modifier);\n        if (withPrettyNames) {\n            historySummary.setModifierName(xwikiApi.getUserName(modifier, false));\n        }\n\n        historySummary.setLanguage(language);\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(modified);\n        historySummary.setModified(calendar);\n\n        if (language == null) {\n            String pageUri = uri(baseUri, PageVersionResource.class, wikiName, spaceName, pageName, version);\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(pageUri);\n            pageLink.setRel(Relations.PAGE);\n            historySummary.getLinks().add(pageLink);\n        } else {\n            String pageUri =\n                uri(baseUri, PageTranslationVersionResource.class, wikiName, spaceName, pageName, language, version);\n            Link pageLink = objectFactory.createLink();\n            pageLink.setHref(pageUri);\n            pageLink.setRel(Relations.PAGE);\n            historySummary.getLinks().add(pageLink);\n        }\n\n        return historySummary;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static PageSummary createPageSummary(ObjectFactory objectFactory, URI baseUri, Document doc, XWiki xwikiApi,\n            Boolean withPrettyNames)\n            throws XWikiException\n    {\n        PageSummary pageSummary = objectFactory.createPageSummary();\n        fillPageSummary(pageSummary, objectFactory, baseUri, doc, false, xwikiApi, withPrettyNames);\n\n        String pageUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class).build(doc.getWiki(), doc.getSpace(), doc.getName())\n                        .toString();\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        pageSummary.getLinks().add(pageLink);\n\n        return pageSummary;\n    }","id":21618,"modified_method":"public static PageSummary createPageSummary(ObjectFactory objectFactory, URI baseUri, Document doc, XWiki xwikiApi,\n        Boolean withPrettyNames) throws XWikiException\n    {\n        PageSummary pageSummary = objectFactory.createPageSummary();\n        fillPageSummary(pageSummary, objectFactory, baseUri, doc, false, xwikiApi, withPrettyNames);\n\n        String pageUri = uri(baseUri, PageResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        pageSummary.getLinks().add(pageLink);\n\n        return pageSummary;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Wiki createWiki(ObjectFactory objectFactory, URI baseUri, String wikiName)\n    {\n        Wiki wiki = objectFactory.createWiki().withId(wikiName).withName(wikiName);\n\n        String spacesUri = UriBuilder.fromUri(baseUri).path(SpacesResource.class).build(wikiName).toString();\n        Link spacesLink = objectFactory.createLink();\n        spacesLink.setHref(spacesUri);\n        spacesLink.setRel(Relations.SPACES);\n        wiki.getLinks().add(spacesLink);\n\n        String classesUri = UriBuilder.fromUri(baseUri).path(ClassesResource.class).build(wikiName).toString();\n        Link classesLink = objectFactory.createLink();\n        classesLink.setHref(classesUri);\n        classesLink.setRel(Relations.CLASSES);\n        wiki.getLinks().add(classesLink);\n\n        String modificationsUri =\n                UriBuilder.fromUri(baseUri).path(ModificationsResource.class).build(wikiName).toString();\n        Link modificationsLink = objectFactory.createLink();\n        modificationsLink.setHref(modificationsUri);\n        modificationsLink.setRel(Relations.MODIFICATIONS);\n        wiki.getLinks().add(modificationsLink);\n\n        String searchUri = UriBuilder.fromUri(baseUri).path(WikiSearchResource.class).build(wikiName).toString();\n        Link searchLink = objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        wiki.getLinks().add(searchLink);\n\n        String queryUri = UriBuilder.fromUri(baseUri).path(WikiSearchQueryResource.class).build(wikiName).toString();\n        Link queryLink = objectFactory.createLink();\n        queryLink.setHref(queryUri);\n        queryLink.setRel(Relations.QUERY);\n        wiki.getLinks().add(queryLink);\n\n        return wiki;\n    }","id":21619,"modified_method":"public static Wiki createWiki(ObjectFactory objectFactory, URI baseUri, String wikiName)\n    {\n        Wiki wiki = objectFactory.createWiki().withId(wikiName).withName(wikiName);\n\n        String spacesUri = uri(baseUri, SpacesResource.class, wikiName);\n        Link spacesLink = objectFactory.createLink();\n        spacesLink.setHref(spacesUri);\n        spacesLink.setRel(Relations.SPACES);\n        wiki.getLinks().add(spacesLink);\n\n        String classesUri = uri(baseUri, ClassesResource.class, wikiName);\n        Link classesLink = objectFactory.createLink();\n        classesLink.setHref(classesUri);\n        classesLink.setRel(Relations.CLASSES);\n        wiki.getLinks().add(classesLink);\n\n        String modificationsUri = uri(baseUri, ModificationsResource.class, wikiName);\n        Link modificationsLink = objectFactory.createLink();\n        modificationsLink.setHref(modificationsUri);\n        modificationsLink.setRel(Relations.MODIFICATIONS);\n        wiki.getLinks().add(modificationsLink);\n\n        String searchUri = uri(baseUri, WikiSearchResource.class, wikiName);\n        Link searchLink = objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        wiki.getLinks().add(searchLink);\n\n        String queryUri = uri(baseUri, WikiSearchQueryResource.class, wikiName);\n        Link queryLink = objectFactory.createLink();\n        queryLink.setHref(queryUri);\n        queryLink.setRel(Relations.QUERY);\n        wiki.getLinks().add(queryLink);\n\n        return wiki;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Object createObject(ObjectFactory objectFactory, URI baseUri, XWikiContext xwikiContext,\n            Document doc, BaseObject xwikiObject, boolean useVersion, XWiki xwikiApi, Boolean withPrettyNames)\n            throws XWikiException\n    {\n        Object object = objectFactory.createObject();\n        fillObjectSummary(object, objectFactory, baseUri, doc, xwikiObject, xwikiApi, withPrettyNames);\n\n        BaseClass xwikiClass = xwikiObject.getXClass(xwikiContext);\n\n        for (java.lang.Object propertyClassObject : xwikiClass.getProperties()) {\n            com.xpn.xwiki.objects.classes.PropertyClass propertyClass =\n                    (com.xpn.xwiki.objects.classes.PropertyClass) propertyClassObject;\n\n            Property property = objectFactory.createProperty();\n\n            for (java.lang.Object o : propertyClass.getProperties()) {\n                BaseProperty baseProperty = (BaseProperty) o;\n                Attribute attribute = objectFactory.createAttribute();\n                attribute.setName(baseProperty.getName());\n\n                /* Check for null values in order to prevent NPEs */\n                if (baseProperty.getValue() != null) {\n                    attribute.setValue(baseProperty.getValue().toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            if (propertyClass instanceof ListClass) {\n                ListClass listClass = (ListClass) propertyClass;\n\n                List allowedValueList = listClass.getList(xwikiContext);\n\n                if (!allowedValueList.isEmpty()) {\n                    Formatter f = new Formatter();\n                    for (int i = 0; i < allowedValueList.size(); i++) {\n                        if (i != allowedValueList.size() - 1) {\n                            f.format(\"%s,\", allowedValueList.get(i).toString());\n                        } else {\n                            f.format(\"%s\", allowedValueList.get(i).toString());\n                        }\n                    }\n\n                    Attribute attribute = objectFactory.createAttribute();\n                    attribute.setName(Constants.ALLOWED_VALUES_ATTRIBUTE_NAME);\n                    attribute.setValue(f.toString());\n                    property.getAttributes().add(attribute);\n                }\n            }\n\n            property.setName(propertyClass.getName());\n            property.setType(propertyClass.getClassType());\n            if (xwikiObject.get(propertyClass.getName()) != null) {\n                property.setValue(xwikiObject.get(propertyClass.getName()).toFormString());\n            } else {\n                property.setValue(\"\");\n            }\n\n            String propertyUri;\n\n            if (useVersion) {\n                propertyUri =\n                        UriBuilder\n                                .fromUri(baseUri)\n                                .path(ObjectPropertyAtPageVersionResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion(),\n                                        xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName())\n                                .toString();\n            } else {\n                propertyUri =\n                        UriBuilder\n                                .fromUri(baseUri)\n                                .path(ObjectPropertyResource.class)\n                                .build(doc.getWiki(), doc.getSpace(), doc.getName(), xwikiObject.getClassName(),\n                                        xwikiObject.getNumber(), propertyClass.getName()).toString();\n            }\n            Link propertyLink = objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            object.getProperties().add(property);\n        }\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.SELF);\n        object.getLinks().add(objectLink);\n\n        return object;\n    }","id":21620,"modified_method":"public static Object createObject(ObjectFactory objectFactory, URI baseUri, XWikiContext xwikiContext,\n        Document doc, BaseObject xwikiObject, boolean useVersion, XWiki xwikiApi, Boolean withPrettyNames)\n        throws XWikiException\n    {\n        Object object = objectFactory.createObject();\n        fillObjectSummary(object, objectFactory, baseUri, doc, xwikiObject, xwikiApi, withPrettyNames);\n\n        BaseClass xwikiClass = xwikiObject.getXClass(xwikiContext);\n\n        for (java.lang.Object propertyClassObject : xwikiClass.getProperties()) {\n            com.xpn.xwiki.objects.classes.PropertyClass propertyClass =\n                (com.xpn.xwiki.objects.classes.PropertyClass) propertyClassObject;\n\n            Property property = objectFactory.createProperty();\n\n            for (java.lang.Object o : propertyClass.getProperties()) {\n                BaseProperty baseProperty = (BaseProperty) o;\n                Attribute attribute = objectFactory.createAttribute();\n                attribute.setName(baseProperty.getName());\n\n                /* Check for null values in order to prevent NPEs */\n                if (baseProperty.getValue() != null) {\n                    attribute.setValue(baseProperty.getValue().toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            if (propertyClass instanceof ListClass) {\n                ListClass listClass = (ListClass) propertyClass;\n\n                List allowedValueList = listClass.getList(xwikiContext);\n\n                if (!allowedValueList.isEmpty()) {\n                    Formatter f = new Formatter();\n                    for (int i = 0; i < allowedValueList.size(); i++) {\n                        if (i != allowedValueList.size() - 1) {\n                            f.format(\"%s,\", allowedValueList.get(i).toString());\n                        } else {\n                            f.format(\"%s\", allowedValueList.get(i).toString());\n                        }\n                    }\n\n                    Attribute attribute = objectFactory.createAttribute();\n                    attribute.setName(Constants.ALLOWED_VALUES_ATTRIBUTE_NAME);\n                    attribute.setValue(f.toString());\n                    property.getAttributes().add(attribute);\n                }\n            }\n\n            property.setName(propertyClass.getName());\n            property.setType(propertyClass.getClassType());\n            if (xwikiObject.get(propertyClass.getName()) != null) {\n                property.setValue(xwikiObject.get(propertyClass.getName()).toFormString());\n            } else {\n                property.setValue(\"\");\n            }\n\n            String propertyUri;\n\n            if (useVersion) {\n                propertyUri =\n                    uri(baseUri, ObjectPropertyAtPageVersionResource.class, doc.getWiki(), doc.getSpace(),\n                        doc.getName(), doc.getVersion(), xwikiObject.getClassName(), xwikiObject.getNumber(),\n                        propertyClass.getName());\n            } else {\n                propertyUri =\n                    uri(baseUri, ObjectPropertyResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                        xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName());\n            }\n            Link propertyLink = objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            object.getProperties().add(property);\n        }\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.SELF);\n        object.getLinks().add(objectLink);\n\n        return object;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static Link getObjectLink(ObjectFactory objectFactory, URI baseUri, Document doc, BaseObject xwikiObject,\n            boolean useVersion, String relation)\n    {\n        String objectUri;\n\n        if (useVersion) {\n            objectUri =\n                    UriBuilder\n                            .fromUri(baseUri)\n                            .path(ObjectAtPageVersionResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), doc.getVersion(),\n                                    xwikiObject.getClassName(),\n                                    xwikiObject.getNumber()).toString();\n        } else {\n            objectUri =\n                    UriBuilder\n                            .fromUri(baseUri)\n                            .path(ObjectResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), xwikiObject.getClassName(),\n                                    xwikiObject.getNumber()).toString();\n        }\n        Link objectLink = objectFactory.createLink();\n        objectLink.setHref(objectUri);\n        objectLink.setRel(relation);\n\n        return objectLink;\n    }","id":21621,"modified_method":"private static Link getObjectLink(ObjectFactory objectFactory, URI baseUri, Document doc, BaseObject xwikiObject,\n        boolean useVersion, String relation)\n    {\n        String objectUri;\n\n        if (useVersion) {\n            objectUri =\n                uri(baseUri, ObjectAtPageVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                    doc.getVersion(), xwikiObject.getClassName(), xwikiObject.getNumber());\n        } else {\n            objectUri =\n                uri(baseUri, ObjectResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                    xwikiObject.getClassName(), xwikiObject.getNumber());\n        }\n        Link objectLink = objectFactory.createLink();\n        objectLink.setHref(objectUri);\n        objectLink.setRel(relation);\n\n        return objectLink;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Xwiki createXWikiRoot(ObjectFactory objectFactory, URI baseUri, String version)\n    {\n        Xwiki xwiki = objectFactory.createXwiki().withVersion(version);\n\n        String wikisUri = UriBuilder.fromUri(baseUri).path(WikisResource.class).build().toString();\n        Link wikisLink = objectFactory.createLink();\n        wikisLink.setHref(wikisUri);\n        wikisLink.setRel(Relations.WIKIS);\n        xwiki.getLinks().add(wikisLink);\n\n        String syntaxesUri = UriBuilder.fromUri(baseUri).path(SyntaxesResource.class).build().toString();\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        xwiki.getLinks().add(syntaxesLink);\n\n        return xwiki;\n    }","id":21622,"modified_method":"public static Xwiki createXWikiRoot(ObjectFactory objectFactory, URI baseUri, String version)\n    {\n        Xwiki xwiki = objectFactory.createXwiki().withVersion(version);\n\n        String wikisUri = uri(baseUri, WikisResource.class);\n        Link wikisLink = objectFactory.createLink();\n        wikisLink.setHref(wikisUri);\n        wikisLink.setRel(Relations.WIKIS);\n        xwiki.getLinks().add(wikisLink);\n\n        String syntaxesUri = uri(baseUri, SyntaxesResource.class);\n        Link syntaxesLink = objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        xwiki.getLinks().add(syntaxesLink);\n\n        return xwiki;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void fillAttachment(Attachment attachment, ObjectFactory objectFactory, URI baseUri,\n            com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl,\n            XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        Document doc = xwikiAttachment.getDocument();\n\n        attachment.setId(String.format(\"%s@%s\", doc.getPrefixedFullName(), xwikiAttachment.getFilename()));\n        attachment.setName(xwikiAttachment.getFilename());\n        attachment.setSize(xwikiAttachment.getFilesize());\n        attachment.setVersion(xwikiAttachment.getVersion());\n        attachment.setPageId(doc.getPrefixedFullName());\n        attachment.setPageVersion(doc.getVersion());\n        attachment.setMimeType(xwikiAttachment.getMimeType());\n        attachment.setAuthor(xwikiAttachment.getAuthor());\n        if (withPrettyNames) {\n            attachment.setAuthorName(xwikiApi.getUserName(xwikiAttachment.getAuthor(), false));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(xwikiAttachment.getDate());\n        attachment.setDate(calendar);\n\n        attachment.setXwikiRelativeUrl(xwikiRelativeUrl);\n        attachment.setXwikiAbsoluteUrl(xwikiAbsoluteUrl);\n\n        String pageUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class).build(doc.getWiki(), doc.getSpace(), doc.getName())\n                        .toString();\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        attachment.getLinks().add(pageLink);\n    }","id":21623,"modified_method":"private static void fillAttachment(Attachment attachment, ObjectFactory objectFactory, URI baseUri,\n        com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl, XWiki xwikiApi,\n        Boolean withPrettyNames)\n    {\n        Document doc = xwikiAttachment.getDocument();\n\n        attachment.setId(String.format(\"%s@%s\", doc.getPrefixedFullName(), xwikiAttachment.getFilename()));\n        attachment.setName(xwikiAttachment.getFilename());\n        attachment.setSize(xwikiAttachment.getFilesize());\n        attachment.setVersion(xwikiAttachment.getVersion());\n        attachment.setPageId(doc.getPrefixedFullName());\n        attachment.setPageVersion(doc.getVersion());\n        attachment.setMimeType(xwikiAttachment.getMimeType());\n        attachment.setAuthor(xwikiAttachment.getAuthor());\n        if (withPrettyNames) {\n            attachment.setAuthorName(xwikiApi.getUserName(xwikiAttachment.getAuthor(), false));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(xwikiAttachment.getDate());\n        attachment.setDate(calendar);\n\n        attachment.setXwikiRelativeUrl(xwikiRelativeUrl);\n        attachment.setXwikiAbsoluteUrl(xwikiAbsoluteUrl);\n\n        String pageUri = uri(baseUri, PageResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        attachment.getLinks().add(pageLink);\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Comment createComment(ObjectFactory objectFactory, URI baseUri, Document doc,\n            com.xpn.xwiki.api.Object xwikiComment, XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        Comment comment = objectFactory.createComment();\n        comment.setId(xwikiComment.getNumber());\n\n        com.xpn.xwiki.api.Property property = xwikiComment.getProperty(\"author\");\n        if (property != null) {\n            comment.setAuthor((String) property.getValue());\n            if (withPrettyNames) {\n                comment.setAuthorName(xwikiApi.getUserName((String) property.getValue(), false));\n            }\n        }\n\n        property = xwikiComment.getProperty(\"date\");\n        if (property != null) {\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime((Date) property.getValue());\n            comment.setDate(calendar);\n        }\n\n        property = xwikiComment.getProperty(\"highlight\");\n        if (property != null) {\n            comment.setHighlight((String) property.getValue());\n        }\n\n        property = xwikiComment.getProperty(\"comment\");\n        if (property != null) {\n            comment.setText((String) property.getValue());\n        }\n\n        property = xwikiComment.getProperty(\"replyto\");\n        if (property != null) {\n            comment.setReplyTo((Integer) property.getValue());\n        }\n\n        String pageUri =\n                UriBuilder.fromUri(baseUri).path(PageResource.class).build(doc.getWiki(), doc.getSpace(), doc.getName())\n                        .toString();\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        comment.getLinks().add(pageLink);\n\n        return comment;\n    }","id":21624,"modified_method":"public static Comment createComment(ObjectFactory objectFactory, URI baseUri, Document doc,\n        com.xpn.xwiki.api.Object xwikiComment, XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        Comment comment = objectFactory.createComment();\n        comment.setId(xwikiComment.getNumber());\n\n        com.xpn.xwiki.api.Property property = xwikiComment.getProperty(\"author\");\n        if (property != null) {\n            comment.setAuthor((String) property.getValue());\n            if (withPrettyNames) {\n                comment.setAuthorName(xwikiApi.getUserName((String) property.getValue(), false));\n            }\n        }\n\n        property = xwikiComment.getProperty(\"date\");\n        if (property != null) {\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime((Date) property.getValue());\n            comment.setDate(calendar);\n        }\n\n        property = xwikiComment.getProperty(\"highlight\");\n        if (property != null) {\n            comment.setHighlight((String) property.getValue());\n        }\n\n        property = xwikiComment.getProperty(\"comment\");\n        if (property != null) {\n            comment.setText((String) property.getValue());\n        }\n\n        property = xwikiComment.getProperty(\"replyto\");\n        if (property != null) {\n            comment.setReplyTo((Integer) property.getValue());\n        }\n\n        String pageUri = uri(baseUri, PageResource.class, doc.getWiki(), doc.getSpace(), doc.getName());\n        Link pageLink = objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        comment.getLinks().add(pageLink);\n\n        return comment;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Attachment createAttachmentAtVersion(ObjectFactory objectFactory, URI baseUri,\n            com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl,\n            XWiki xwikiApi, Boolean withPrettyNames)\n    {\n        Attachment attachment = new Attachment();\n\n        fillAttachment(attachment, objectFactory, baseUri, xwikiAttachment, xwikiRelativeUrl, xwikiAbsoluteUrl,\n                xwikiApi, withPrettyNames);\n\n        Document doc = xwikiAttachment.getDocument();\n\n        String attachmentUri = createAttachmentUri(baseUri, xwikiAttachment, doc, true);\n\n        Link attachmentLink = objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        return attachment;\n    }","id":21625,"modified_method":"public static Attachment createAttachmentAtVersion(ObjectFactory objectFactory, URI baseUri,\n        com.xpn.xwiki.api.Attachment xwikiAttachment, String xwikiRelativeUrl, String xwikiAbsoluteUrl, XWiki xwikiApi,\n        Boolean withPrettyNames)\n    {\n        Attachment attachment = new Attachment();\n\n        fillAttachment(attachment, objectFactory, baseUri, xwikiAttachment, xwikiRelativeUrl, xwikiAbsoluteUrl,\n            xwikiApi, withPrettyNames);\n\n        Document doc = xwikiAttachment.getDocument();\n        String attachmentUri =\n            uri(baseUri, AttachmentVersionResource.class, doc.getWiki(), doc.getSpace(), doc.getName(),\n                xwikiAttachment.getFilename(), xwikiAttachment.getVersion());\n\n        Link attachmentLink = objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        return attachment;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Class createClass(ObjectFactory objectFactory, URI baseUri, String wikiName,\n            com.xpn.xwiki.api.Class xwikiClass)\n    {\n        Class clazz = objectFactory.createClass();\n        clazz.setId(xwikiClass.getName());\n        clazz.setName(xwikiClass.getName());\n\n        for (java.lang.Object xwikiPropertyClassObject : xwikiClass.getProperties()) {\n            PropertyClass xwikiPropertyClass = (PropertyClass) xwikiPropertyClassObject;\n\n            Property property = objectFactory.createProperty();\n            property.setName(xwikiPropertyClass.getName());\n            property.setType(xwikiPropertyClass.getxWikiClass().getName());\n\n            for (java.lang.Object xwikiPropertyObject : xwikiPropertyClass.getProperties()) {\n                com.xpn.xwiki.api.Property xwikiProperty = (com.xpn.xwiki.api.Property) xwikiPropertyObject;\n                java.lang.Object value = xwikiProperty.getValue();\n\n                Attribute attribute = objectFactory.createAttribute();\n                attribute.setName(xwikiProperty.getName());\n\n                if (value != null) {\n                    attribute.setValue(value.toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            String propertyUri =\n                    UriBuilder.fromUri(baseUri).path(ClassPropertyResource.class)\n                            .build(wikiName, xwikiClass.getName(), xwikiPropertyClass.getName()).toString();\n            Link propertyLink = objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            clazz.getProperties().add(property);\n        }\n\n        String classUri =\n                UriBuilder.fromUri(baseUri).path(ClassResource.class).build(wikiName, xwikiClass.getName()).toString();\n        Link classLink = objectFactory.createLink();\n        classLink.setHref(classUri);\n        classLink.setRel(Relations.SELF);\n        clazz.getLinks().add(classLink);\n\n        String propertiesUri =\n                UriBuilder.fromUri(baseUri).path(ClassPropertiesResource.class).build(wikiName, xwikiClass.getName())\n                        .toString();\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        clazz.getLinks().add(propertyLink);\n\n        String objectsUri =\n                UriBuilder.fromUri(baseUri).path(AllObjectsForClassNameResource.class)\n                        .build(wikiName, xwikiClass.getName()).toString();\n        Link objectsLink = objectFactory.createLink();\n        objectsLink.setHref(objectsUri);\n        objectsLink.setRel(Relations.OBJECTS);\n        clazz.getLinks().add(objectsLink);\n\n        return clazz;\n    }","id":21626,"modified_method":"public static Class createClass(ObjectFactory objectFactory, URI baseUri, String wikiName,\n        com.xpn.xwiki.api.Class xwikiClass)\n    {\n        Class clazz = objectFactory.createClass();\n        clazz.setId(xwikiClass.getName());\n        clazz.setName(xwikiClass.getName());\n\n        for (java.lang.Object xwikiPropertyClassObject : xwikiClass.getProperties()) {\n            PropertyClass xwikiPropertyClass = (PropertyClass) xwikiPropertyClassObject;\n\n            Property property = objectFactory.createProperty();\n            property.setName(xwikiPropertyClass.getName());\n            property.setType(xwikiPropertyClass.getxWikiClass().getName());\n\n            for (java.lang.Object xwikiPropertyObject : xwikiPropertyClass.getProperties()) {\n                com.xpn.xwiki.api.Property xwikiProperty = (com.xpn.xwiki.api.Property) xwikiPropertyObject;\n                java.lang.Object value = xwikiProperty.getValue();\n\n                Attribute attribute = objectFactory.createAttribute();\n                attribute.setName(xwikiProperty.getName());\n\n                if (value != null) {\n                    attribute.setValue(value.toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            String propertyUri =\n                uri(baseUri, ClassPropertyResource.class, wikiName, xwikiClass.getName(), xwikiPropertyClass.getName());\n            Link propertyLink = objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            clazz.getProperties().add(property);\n        }\n\n        String classUri = uri(baseUri, ClassResource.class, wikiName, xwikiClass.getName());\n        Link classLink = objectFactory.createLink();\n        classLink.setHref(classUri);\n        classLink.setRel(Relations.SELF);\n        clazz.getLinks().add(classLink);\n\n        String propertiesUri = uri(baseUri, ClassPropertiesResource.class, wikiName, xwikiClass.getName());\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        clazz.getLinks().add(propertyLink);\n\n        String objectsUri = uri(baseUri, AllObjectsForClassNameResource.class, wikiName, xwikiClass.getName());\n        Link objectsLink = objectFactory.createLink();\n        objectsLink.setHref(objectsUri);\n        objectsLink.setRel(Relations.OBJECTS);\n        clazz.getLinks().add(objectsLink);\n\n        return clazz;\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Properties getObjectProperties(String wikiName, String spaceName, String pageName, String version,\n            String className, Integer objectNumber, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, version, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(xwikiDocument, doc.getVersion(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, true, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(object.getProperties());\n\n            String objectUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectAtPageVersionResource.class).build(\n                    doc.getWiki(), doc.getSpace(), doc.getName(), version, object.getClassName(),\n                    object.getNumber()).toString();\n\n            Link objectLink = objectFactory.createLink();\n            objectLink.setHref(objectUri);\n            objectLink.setRel(Relations.OBJECT);\n            properties.getLinks().add(objectLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21627,"modified_method":"@Override\n    public Properties getObjectProperties(String wikiName, String spaceName, String pageName, String version,\n            String className, Integer objectNumber, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, version, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(xwikiDocument, doc.getVersion(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, true, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(object.getProperties());\n\n            String objectUri = Utils.createURI(uriInfo.getBaseUri(), ObjectAtPageVersionResource.class, doc.getWiki(),\n                doc.getSpace(), doc.getName(), version, object.getClassName(), object.getNumber()).toString();\n\n            Link objectLink = objectFactory.createLink();\n            objectLink.setHref(objectUri);\n            objectLink.setRel(Relations.OBJECT);\n            properties.getLinks().add(objectLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Properties getObjectProperties(String wikiName, String spaceName, String pageName, String className,\n            Integer objectNumber, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            com.xpn.xwiki.objects.BaseObject baseObject = getBaseObject(doc, className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, false, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(object.getProperties());\n\n            String objectUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class).build(doc.getWiki(),\n                    doc.getSpace(), doc.getName(), object.getClassName(), object.getNumber()).toString();\n            Link objectLink = objectFactory.createLink();\n            objectLink.setHref(objectUri);\n            objectLink.setRel(Relations.OBJECT);\n            properties.getLinks().add(objectLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21628,"modified_method":"@Override\n    public Properties getObjectProperties(String wikiName, String spaceName, String pageName, String className,\n            Integer objectNumber, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            com.xpn.xwiki.objects.BaseObject baseObject = getBaseObject(doc, className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, false, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            Properties properties = objectFactory.createProperties();\n            properties.getProperties().addAll(object.getProperties());\n\n            String objectUri = Utils.createURI(uriInfo.getBaseUri(), ObjectResource.class, doc.getWiki(),\n                doc.getSpace(), doc.getName(), object.getClassName(), object.getNumber()).toString();\n            Link objectLink = objectFactory.createLink();\n            objectLink.setHref(objectUri);\n            objectLink.setRel(Relations.OBJECT);\n            properties.getLinks().add(objectLink);\n\n            return properties;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Property getObjectProperty(String wikiName, String spaceName, String pageName, String version,\n            String className, Integer objectNumber, String propertyName, Boolean withPrettyNames) throws\n            XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, version, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(xwikiDocument, doc.getVersion(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, true, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            for (Property property : object.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String objectUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectAtPageVersionResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), version, object.getClassName(),\n                                    object.getNumber()).toString();\n                    Link objectLink = objectFactory.createLink();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    property.getLinks().add(objectLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21629,"modified_method":"@Override\n    public Property getObjectProperty(String wikiName, String spaceName, String pageName, String version,\n            String className, Integer objectNumber, String propertyName, Boolean withPrettyNames) throws\n            XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, version, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(xwikiDocument, doc.getVersion(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, true, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            for (Property property : object.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String objectUri = Utils.createURI(uriInfo.getBaseUri(), ObjectAtPageVersionResource.class,\n                        doc.getWiki(), doc.getSpace(), doc.getName(), version, object.getClassName(),\n                        object.getNumber()).toString();\n                    Link objectLink = objectFactory.createLink();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    property.getLinks().add(objectLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Property getObjectProperty(String wikiName, String spaceName, String pageName, String className,\n            Integer objectNumber, String propertyName, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, false, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            for (Property property : object.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String objectUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class)\n                            .build(doc.getWiki(), doc.getSpace(), doc.getName(), object.getClassName(),\n                                    object.getNumber()).toString();\n                    Link objectLink = objectFactory.createLink();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    property.getLinks().add(objectLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21630,"modified_method":"@Override\n    public Property getObjectProperty(String wikiName, String spaceName, String pageName, String className,\n            Integer objectNumber, String propertyName, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            com.xpn.xwiki.objects.BaseObject baseObject = xwikiDocument.getObject(className, objectNumber);\n            if (baseObject == null) {\n                throw new WebApplicationException(Status.NOT_FOUND);\n            }\n\n            Object object = DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                    componentManager), doc, baseObject, false, Utils.getXWikiApi(componentManager), withPrettyNames);\n\n            for (Property property : object.getProperties()) {\n                if (property.getName().equals(propertyName)) {\n                    String objectUri = Utils.createURI(uriInfo.getBaseUri(), ObjectResource.class, doc.getWiki(),\n                        doc.getSpace(), doc.getName(), object.getClassName(), object.getNumber()).toString();\n                    Link objectLink = objectFactory.createLink();\n                    objectLink.setHref(objectUri);\n                    objectLink.setRel(Relations.OBJECT);\n                    property.getLinks().add(objectLink);\n\n                    return property;\n                }\n            }\n\n            throw new WebApplicationException(Status.NOT_FOUND);\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Response addObject(String wikiName, String spaceName, String pageName, Object object)\n            throws XWikiRestException\n    {\n        if (object.getClassName() == null) {\n            throw new WebApplicationException(Status.BAD_REQUEST);\n        }\n\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            if (!doc.hasAccessLevel(\"edit\", Utils.getXWikiUser(componentManager))) {\n                throw new WebApplicationException(Status.UNAUTHORIZED);\n            }\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            int objectNumber =\n                    xwikiDocument.createNewObject(object.getClassName(), Utils.getXWikiContext(componentManager));\n\n            BaseObject xwikiObject = xwikiDocument.getObject(object.getClassName(), objectNumber);\n\n            if (xwikiObject == null) {\n                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);\n            }\n\n            // We must initialize all the fields to an empty value in order to correctly create the object\n            BaseClass xwikiClass = Utils.getXWiki(componentManager)\n                    .getClass(xwikiObject.getClassName(), Utils.getXWikiContext(componentManager));\n            for (java.lang.Object propertyNameObject : xwikiClass.getPropertyNames()) {\n                String propertyName = (String) propertyNameObject;\n                xwikiObject.set(propertyName, \"\", Utils.getXWikiContext(componentManager));\n            }\n\n            for (Property property : object.getProperties()) {\n                xwikiObject.set(property.getName(), property.getValue(), Utils.getXWikiContext(componentManager));\n            }\n\n            doc.save();\n\n            return Response.created(UriBuilder.fromUri(uriInfo.getBaseUri()).path(ObjectResource.class).build(wikiName,\n                    spaceName, pageName, object.getClassName(), objectNumber))\n                    .entity(DomainObjectFactory.createObject(objectFactory, uriInfo.getBaseUri(), Utils.getXWikiContext(\n                            componentManager), doc, xwikiObject, false, Utils.getXWikiApi(componentManager), false))\n                    .build();\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21631,"modified_method":"@Override\n    public Response addObject(String wikiName, String spaceName, String pageName, Object object)\n            throws XWikiRestException\n    {\n        if (object.getClassName() == null) {\n            throw new WebApplicationException(Status.BAD_REQUEST);\n        }\n\n        try {\n            DocumentInfo documentInfo = getDocumentInfo(wikiName, spaceName, pageName, null, null, true, false);\n\n            Document doc = documentInfo.getDocument();\n\n            if (!doc.hasAccessLevel(\"edit\", Utils.getXWikiUser(componentManager))) {\n                throw new WebApplicationException(Status.UNAUTHORIZED);\n            }\n\n            XWikiDocument xwikiDocument = Utils.getXWiki(componentManager)\n                    .getDocument(doc.getPrefixedFullName(), Utils.getXWikiContext(componentManager));\n\n            int objectNumber =\n                    xwikiDocument.createNewObject(object.getClassName(), Utils.getXWikiContext(componentManager));\n\n            BaseObject xwikiObject = xwikiDocument.getObject(object.getClassName(), objectNumber);\n\n            if (xwikiObject == null) {\n                throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);\n            }\n\n            // We must initialize all the fields to an empty value in order to correctly create the object\n            BaseClass xwikiClass = Utils.getXWiki(componentManager)\n                    .getClass(xwikiObject.getClassName(), Utils.getXWikiContext(componentManager));\n            for (java.lang.Object propertyNameObject : xwikiClass.getPropertyNames()) {\n                String propertyName = (String) propertyNameObject;\n                xwikiObject.set(propertyName, \"\", Utils.getXWikiContext(componentManager));\n            }\n\n            for (Property property : object.getProperties()) {\n                xwikiObject.set(property.getName(), property.getValue(), Utils.getXWikiContext(componentManager));\n            }\n\n            doc.save();\n\n            return Response.created(Utils.createURI(uriInfo.getBaseUri(), ObjectResource.class, wikiName, spaceName,\n                pageName, object.getClassName(), objectNumber)).entity(DomainObjectFactory.createObject(objectFactory,\n                    uriInfo.getBaseUri(), Utils.getXWikiContext(componentManager), doc, xwikiObject, false,\n                    Utils.getXWikiApi(componentManager), false)).build();\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Tags getPageTags(String wikiName, String spaceName, String pageName) throws XWikiRestException\n    {\n        try {\n            String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n            List<String> tagNames = getTagsFromDocument(pageId);\n\n            Tags tags = objectFactory.createTags();\n            for (String tagName : tagNames) {\n                Tag tag = objectFactory.createTag();\n                tag.setName(tagName);\n\n                String tagUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(PagesForTagsResource.class)\n                        .build(wikiName, tagName).toString();\n                Link tagLink = objectFactory.createLink();\n                tagLink.setHref(tagUri);\n                tagLink.setRel(Relations.TAG);\n                tag.getLinks().add(tagLink);\n\n                tags.getTags().add(tag);\n            }\n\n            return tags;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21632,"modified_method":"@Override\n    public Tags getPageTags(String wikiName, String spaceName, String pageName) throws XWikiRestException\n    {\n        try {\n            String pageId = Utils.getPageId(wikiName, spaceName, pageName);\n            List<String> tagNames = getTagsFromDocument(pageId);\n\n            Tags tags = objectFactory.createTags();\n            for (String tagName : tagNames) {\n                Tag tag = objectFactory.createTag();\n                tag.setName(tagName);\n\n                String tagUri =\n                    Utils.createURI(uriInfo.getBaseUri(), PagesForTagsResource.class, wikiName, tagName).toString();\n                Link tagLink = objectFactory.createLink();\n                tagLink.setHref(tagUri);\n                tagLink.setRel(Relations.TAG);\n                tag.getLinks().add(tagLink);\n\n                tags.getTags().add(tag);\n            }\n\n            return tags;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public SearchResults search(String wikiName, String spaceName, String keywords, List<String> searchScopeStrings,\n            Integer number, Integer start, String orderField, String order, Boolean withPrettyNames)\n            throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\",\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(SpaceSearchResource.class).build(wikiName, spaceName)\n                            .toString(), SEARCH_TEMPLATE_INFO));\n\n            List<SearchScope> searchScopes = parseSearchScopeStrings(searchScopeStrings);\n\n            searchResults.getSearchResults().addAll(\n                    search(searchScopes, keywords, wikiName, spaceName,\n                            Utils.getXWiki(componentManager).getRightService().hasProgrammingRights(\n                                    Utils.getXWikiContext(componentManager)), number, start, true, orderField, order,\n                            withPrettyNames));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21633,"modified_method":"@Override\n    public SearchResults search(String wikiName, String spaceName, String keywords, List<String> searchScopeStrings,\n            Integer number, Integer start, String orderField, String order, Boolean withPrettyNames)\n            throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\", Utils.createURI(uriInfo.getBaseUri(),\n                SpaceSearchResource.class, wikiName, spaceName).toString(), SEARCH_TEMPLATE_INFO));\n\n            List<SearchScope> searchScopes = parseSearchScopeStrings(searchScopeStrings);\n\n            searchResults.getSearchResults().addAll(\n                    search(searchScopes, keywords, wikiName, spaceName,\n                            Utils.getXWiki(componentManager).getRightService().hasProgrammingRights(\n                                    Utils.getXWikiContext(componentManager)), number, start, true, orderField, order,\n                            withPrettyNames));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Tags getTags(String wikiName) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Tags tags = objectFactory.createTags();\n\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<String> tagNames = getAllTags();\n\n            for (String tagName : tagNames) {\n                Tag tag = objectFactory.createTag();\n                tag.setName(tagName);\n\n                String tagUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(PagesForTagsResource.class).build(\n                        wikiName, tagName).toString();\n                Link tagLink = objectFactory.createLink();\n                tagLink.setHref(tagUri);\n                tagLink.setRel(Relations.TAG);\n                tag.getLinks().add(tagLink);\n\n                tags.getTags().add(tag);\n            }\n\n            return tags;\n        } catch (QueryException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","id":21634,"modified_method":"@Override\n    public Tags getTags(String wikiName) throws XWikiRestException\n    {\n        String database = Utils.getXWikiContext(componentManager).getDatabase();\n\n        try {\n            Tags tags = objectFactory.createTags();\n\n            Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n\n            List<String> tagNames = getAllTags();\n\n            for (String tagName : tagNames) {\n                Tag tag = objectFactory.createTag();\n                tag.setName(tagName);\n\n                String tagUri =\n                    Utils.createURI(uriInfo.getBaseUri(), PagesForTagsResource.class, wikiName, tagName).toString();\n                Link tagLink = objectFactory.createLink();\n                tagLink.setHref(tagUri);\n                tagLink.setRel(Relations.TAG);\n                tag.getLinks().add(tagLink);\n\n                tags.getTags().add(tag);\n            }\n\n            return tags;\n        } catch (QueryException e) {\n            throw new XWikiRestException(e);\n        } finally {\n            Utils.getXWikiContext(componentManager).setDatabase(database);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public SearchResults search(String wikiName, String query,\n            String queryTypeString, Integer number, Integer start, Boolean distinct, String orderField, String order,\n            Boolean withPrettyNames, String className) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\",\n                    UriBuilder.fromUri(uriInfo.getBaseUri()).path(WikiSearchQueryResource.class).build(wikiName)\n                            .toString(), QUERY_TEMPLATE_INFO));\n\n            searchResults.getSearchResults().addAll(searchQuery(query, queryTypeString, wikiName, null,\n                    Utils.getXWiki(componentManager).getRightService().hasProgrammingRights(\n                            Utils.getXWikiContext(componentManager)), orderField, order, distinct, number, start,\n                    withPrettyNames, className));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21635,"modified_method":"@Override\n    public SearchResults search(String wikiName, String query,\n            String queryTypeString, Integer number, Integer start, Boolean distinct, String orderField, String order,\n            Boolean withPrettyNames, String className) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\",\n                Utils.createURI(uriInfo.getBaseUri(), WikiSearchQueryResource.class, wikiName).toString(),\n                QUERY_TEMPLATE_INFO));\n\n            searchResults.getSearchResults().addAll(searchQuery(query, queryTypeString, wikiName, null,\n                    Utils.getXWiki(componentManager).getRightService().hasProgrammingRights(\n                            Utils.getXWikiContext(componentManager)), orderField, order, distinct, number, start,\n                    withPrettyNames, className));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public SearchResults search(String wikiName, String keywords, List<String> searchScopeStrings, Integer number,\n        Integer start, String orderField, String order, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\",\n                UriBuilder.fromUri(uriInfo.getBaseUri()).path(WikiSearchResource.class).build(wikiName).toString(),\n                SEARCH_TEMPLATE_INFO));\n\n            if (wikiName != null) {\n                Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n            }\n\n            List<SearchScope> searchScopes = parseSearchScopeStrings(searchScopeStrings);\n\n            searchResults.getSearchResults().addAll(\n                search(searchScopes, keywords, getXWikiContext().getDatabase(), null, Utils.getXWiki(componentManager)\n                    .getRightService().hasProgrammingRights(Utils.getXWikiContext(componentManager)), number, start,\n                    true, orderField, order, withPrettyNames));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21636,"modified_method":"@Override\n    public SearchResults search(String wikiName, String keywords, List<String> searchScopeStrings, Integer number,\n        Integer start, String orderField, String order, Boolean withPrettyNames) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\",\n                Utils.createURI(uriInfo.getBaseUri(), WikiSearchResource.class, wikiName).toString(),\n                SEARCH_TEMPLATE_INFO));\n\n            if (wikiName != null) {\n                Utils.getXWikiContext(componentManager).setDatabase(wikiName);\n            }\n\n            List<SearchScope> searchScopes = parseSearchScopeStrings(searchScopeStrings);\n\n            searchResults.getSearchResults().addAll(\n                search(searchScopes, keywords, getXWikiContext().getDatabase(), null, Utils.getXWiki(componentManager)\n                    .getRightService().hasProgrammingRights(Utils.getXWikiContext(componentManager)), number, start,\n                    true, orderField, order, withPrettyNames));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Wikis getWikis() throws XWikiRestException\n    {\n        try {\n            String mainWiki = Utils.getXWikiContext(componentManager).getMainXWiki();\n\n            List<String> databaseNames = Utils.getXWiki(componentManager).getVirtualWikisDatabaseNames(\n                    Utils.getXWikiContext(componentManager));\n\n            /* The main wiki, usually \"xwiki\", doesn't have a wiki descriptor. So if it's not in the list returned by\n             getVirtualWikisDatabaseNames add it. */\n            if (!databaseNames.contains(mainWiki)) {\n                databaseNames.add(mainWiki);\n            }\n\n            Wikis wikis = objectFactory.createWikis();\n\n            for (String databaseName : databaseNames) {\n                wikis.getWikis().add(DomainObjectFactory.createWiki(objectFactory, uriInfo.getBaseUri(), databaseName));\n            }\n\n            String queryUri = UriBuilder.fromUri(uriInfo.getBaseUri()).path(WikisSearchQueryResource.class).toString();\n            Link queryLink = objectFactory.createLink();\n            queryLink.setHref(queryUri);\n            queryLink.setRel(Relations.QUERY);\n            wikis.getLinks().add(queryLink);\n\n            return wikis;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21637,"modified_method":"@Override\n    public Wikis getWikis() throws XWikiRestException\n    {\n        try {\n            String mainWiki = Utils.getXWikiContext(componentManager).getMainXWiki();\n\n            List<String> databaseNames = Utils.getXWiki(componentManager).getVirtualWikisDatabaseNames(\n                    Utils.getXWikiContext(componentManager));\n\n            /* The main wiki, usually \"xwiki\", doesn't have a wiki descriptor. So if it's not in the list returned by\n             getVirtualWikisDatabaseNames add it. */\n            if (!databaseNames.contains(mainWiki)) {\n                databaseNames.add(mainWiki);\n            }\n\n            Wikis wikis = objectFactory.createWikis();\n\n            for (String databaseName : databaseNames) {\n                wikis.getWikis().add(DomainObjectFactory.createWiki(objectFactory, uriInfo.getBaseUri(), databaseName));\n            }\n\n            String queryUri = Utils.createURI(uriInfo.getBaseUri(), WikisSearchQueryResource.class).toString();\n            Link queryLink = objectFactory.createLink();\n            queryLink.setHref(queryUri);\n            queryLink.setRel(Relations.QUERY);\n            wikis.getLinks().add(queryLink);\n\n            return wikis;\n        } catch (XWikiException e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public SearchResults search(String query, Integer number, Integer start, Boolean distinct, String searchWikis,\n        String orderField, String order, Boolean withPrettyNames, String className) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\", UriBuilder.fromUri(uriInfo.getBaseUri()).toString(),\n                MULTIWIKI_QUERY_TEMPLATE_INFO));\n\n            searchResults.getSearchResults().addAll(\n                searchQuery(\n                    query,\n                    QueryType.LUCENE.toString(),\n                    getXWikiContext().getDatabase(),\n                    searchWikis,\n                    Utils.getXWiki(componentManager).getRightService()\n                        .hasProgrammingRights(Utils.getXWikiContext(componentManager)), orderField, order, distinct,\n                    number, start, withPrettyNames, className));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","id":21638,"modified_method":"@Override\n    public SearchResults search(String query, Integer number, Integer start, Boolean distinct, String searchWikis,\n        String orderField, String order, Boolean withPrettyNames, String className) throws XWikiRestException\n    {\n        try {\n            SearchResults searchResults = objectFactory.createSearchResults();\n            searchResults.setTemplate(String.format(\"%s?%s\", uriInfo.getBaseUri().toString(),\n                MULTIWIKI_QUERY_TEMPLATE_INFO));\n\n            searchResults.getSearchResults().addAll(\n                searchQuery(\n                    query,\n                    QueryType.LUCENE.toString(),\n                    getXWikiContext().getDatabase(),\n                    searchWikis,\n                    Utils.getXWiki(componentManager).getRightService()\n                        .hasProgrammingRights(Utils.getXWikiContext(componentManager)), orderField, order, distinct,\n                    number, start, withPrettyNames, className));\n\n            return searchResults;\n        } catch (Exception e) {\n            throw new XWikiRestException(e);\n        }\n    }","commit_id":"473922633ce8ed39c143c632c6ba0dbb50886467","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void generate(final Grammar grammar, final Xtend2ExecutionContext ctx) {\n    Naming _naming = this.getNaming();\n    String _lineDelimiter = _naming.getLineDelimiter();\n    this._xtextIDEAGeneratorExtensions.installOutlets(ctx, this.ideaProjectPath, this.encoding, _lineDelimiter);\n    Outlet _srcOutlet = this._xtextIDEAGeneratorExtensions.getSrcOutlet(ctx);\n    String outlet_src = _srcOutlet.getName();\n    Outlet _srcGenOutlet = this._xtextIDEAGeneratorExtensions.getSrcGenOutlet(ctx);\n    String outlet_src_gen = _srcGenOutlet.getName();\n    final BindFactory bindFactory = new BindFactory();\n    String _psiParserName = this._ideaPluginClassNames.getPsiParserName(grammar);\n    bindFactory.addTypeToType(\"com.intellij.lang.PsiParser\", _psiParserName);\n    String _tokenTypeProviderName = this._ideaPluginClassNames.getTokenTypeProviderName(grammar);\n    bindFactory.addTypeToType(\"org.eclipse.xtext.idea.parser.TokenTypeProvider\", _tokenTypeProviderName);\n    String _parserDefinitionName = this._ideaPluginClassNames.getParserDefinitionName(grammar);\n    bindFactory.addTypeToType(\"com.intellij.lang.ParserDefinition\", _parserDefinitionName);\n    String _elementTypeProviderName = this._ideaPluginClassNames.getElementTypeProviderName(grammar);\n    bindFactory.addTypeToTypeSingleton(\"org.eclipse.xtext.idea.lang.IElementTypeProvider\", _elementTypeProviderName);\n    if (this.typesIntegrationRequired) {\n      bindFactory.addTypeToType(\"org.eclipse.xtext.common.types.access.IJvmTypeProvider.Factory\", \"org.eclipse.xtext.idea.types.access.StubTypeProviderFactory\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider\", \"org.eclipse.xtext.idea.types.StubBasedTypeScopeProvider\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.xbase.jvmmodel.JvmModelAssociator\", \"org.eclipse.xtext.idea.jvmmodel.PsiJvmModelAssociator\");\n      bindFactory.addTypeToTypeSingleton(\"org.eclipse.xtext.idea.types.stubindex.JvmDeclaredTypeShortNameIndex\", \"org.eclipse.xtext.idea.types.stubindex.JvmDeclaredTypeShortNameIndex\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.xbase.typesystem.internal.IFeatureScopeTracker.Provider\", \"org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider\");\n    }\n    final Set<Binding> bindings = bindFactory.getBindings();\n    String _standaloneSetupIdea = this._ideaPluginClassNames.getStandaloneSetupIdea(grammar);\n    String _javaPath = this._ideaPluginClassNames.toJavaPath(_standaloneSetupIdea);\n    CharSequence _compileStandaloneSetup = this.compileStandaloneSetup(grammar);\n    ctx.writeFile(outlet_src, _javaPath, _compileStandaloneSetup);\n    String _ideaModuleName = this._ideaPluginClassNames.getIdeaModuleName(grammar);\n    String _javaPath_1 = this._ideaPluginClassNames.toJavaPath(_ideaModuleName);\n    CharSequence _compileIdeaModule = this.compileIdeaModule(grammar);\n    ctx.writeFile(outlet_src, _javaPath_1, _compileIdeaModule);\n    String _completionContributor = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _xtendPath = this._ideaPluginClassNames.toXtendPath(_completionContributor);\n    CharSequence _compileCompletionContributor = this.compileCompletionContributor(grammar);\n    ctx.writeFile(outlet_src, _xtendPath, _compileCompletionContributor);\n    String _languageName = this._ideaPluginClassNames.getLanguageName(grammar);\n    String _javaPath_2 = this._ideaPluginClassNames.toJavaPath(_languageName);\n    CharSequence _compileLanguage = this.compileLanguage(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_2, _compileLanguage);\n    String _fileTypeName = this._ideaPluginClassNames.getFileTypeName(grammar);\n    String _javaPath_3 = this._ideaPluginClassNames.toJavaPath(_fileTypeName);\n    CharSequence _compileFileType = this.compileFileType(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_3, _compileFileType);\n    String _fileTypeFactoryName = this._ideaPluginClassNames.getFileTypeFactoryName(grammar);\n    String _javaPath_4 = this._ideaPluginClassNames.toJavaPath(_fileTypeFactoryName);\n    CharSequence _compileFileTypeFactory = this.compileFileTypeFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_4, _compileFileTypeFactory);\n    String _fileImplName = this._ideaPluginClassNames.getFileImplName(grammar);\n    String _javaPath_5 = this._ideaPluginClassNames.toJavaPath(_fileImplName);\n    CharSequence _compileFileImpl = this.compileFileImpl(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_5, _compileFileImpl);\n    String _tokenTypeProviderName_1 = this._ideaPluginClassNames.getTokenTypeProviderName(grammar);\n    String _javaPath_6 = this._ideaPluginClassNames.toJavaPath(_tokenTypeProviderName_1);\n    CharSequence _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_6, _compileTokenTypeProvider);\n    String _elementTypeProviderName_1 = this._ideaPluginClassNames.getElementTypeProviderName(grammar);\n    String _javaPath_7 = this._ideaPluginClassNames.toJavaPath(_elementTypeProviderName_1);\n    CharSequence _compileElementTypeProvider = this.compileElementTypeProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_7, _compileElementTypeProvider);\n    String _parserDefinitionName_1 = this._ideaPluginClassNames.getParserDefinitionName(grammar);\n    String _javaPath_8 = this._ideaPluginClassNames.toJavaPath(_parserDefinitionName_1);\n    CharSequence _compileParserDefinition = this.compileParserDefinition(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_8, _compileParserDefinition);\n    String _syntaxHighlighterFactoryName = this._ideaPluginClassNames.getSyntaxHighlighterFactoryName(grammar);\n    String _javaPath_9 = this._ideaPluginClassNames.toJavaPath(_syntaxHighlighterFactoryName);\n    CharSequence _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_9, _compileSyntaxHighlighterFactory);\n    String _abstractIdeaModuleName = this._ideaPluginClassNames.getAbstractIdeaModuleName(grammar);\n    String _javaPath_10 = this._ideaPluginClassNames.toJavaPath(_abstractIdeaModuleName);\n    CharSequence _compileGuiceModuleIdeaGenerated = this.compileGuiceModuleIdeaGenerated(grammar, bindings);\n    ctx.writeFile(outlet_src_gen, _javaPath_10, _compileGuiceModuleIdeaGenerated);\n    String _extensionFactoryName = this._ideaPluginClassNames.getExtensionFactoryName(grammar);\n    String _javaPath_11 = this._ideaPluginClassNames.toJavaPath(_extensionFactoryName);\n    CharSequence _compileExtensionFactory = this.compileExtensionFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_11, _compileExtensionFactory);\n    String _buildProcessParametersProviderName = this._ideaPluginClassNames.buildProcessParametersProviderName(grammar);\n    String _javaPath_12 = this._ideaPluginClassNames.toJavaPath(_buildProcessParametersProviderName);\n    CharSequence _compileBuildProcessParametersProvider = this.compileBuildProcessParametersProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_12, _compileBuildProcessParametersProvider);\n    String _codeBlockModificationListenerName = this._ideaPluginClassNames.getCodeBlockModificationListenerName(grammar);\n    String _javaPath_13 = this._ideaPluginClassNames.toJavaPath(_codeBlockModificationListenerName);\n    CharSequence _compileCodeBlockModificationListener = this.compileCodeBlockModificationListener(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_13, _compileCodeBlockModificationListener);\n    String _elementDescriptionProviderName = this._ideaPluginClassNames.getElementDescriptionProviderName(grammar);\n    String _javaPath_14 = this._ideaPluginClassNames.toJavaPath(_elementDescriptionProviderName);\n    CharSequence _compileElementDescriptionProvider = this.compileElementDescriptionProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_14, _compileElementDescriptionProvider);\n    String _psiParserName_1 = this._ideaPluginClassNames.getPsiParserName(grammar);\n    String _javaPath_15 = this._ideaPluginClassNames.toJavaPath(_psiParserName_1);\n    CharSequence _compilePsiParser = this.compilePsiParser(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_15, _compilePsiParser);\n    String _pomDeclarationSearcherName = this._ideaPluginClassNames.getPomDeclarationSearcherName(grammar);\n    String _javaPath_16 = this._ideaPluginClassNames.toJavaPath(_pomDeclarationSearcherName);\n    CharSequence _compilePomDeclarationSearcher = this.compilePomDeclarationSearcher(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_16, _compilePomDeclarationSearcher);\n    if (this.typesIntegrationRequired) {\n      String _jvmTypesElementFinderName = this._ideaPluginClassNames.getJvmTypesElementFinderName(grammar);\n      String _javaPath_17 = this._ideaPluginClassNames.toJavaPath(_jvmTypesElementFinderName);\n      CharSequence _compileJvmTypesElementFinder = this.compileJvmTypesElementFinder(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_17, _compileJvmTypesElementFinder);\n      String _jvmTypesShortNamesCacheName = this._ideaPluginClassNames.getJvmTypesShortNamesCacheName(grammar);\n      String _javaPath_18 = this._ideaPluginClassNames.toJavaPath(_jvmTypesShortNamesCacheName);\n      CharSequence _compileJvmTypesShortNamesCache = this.compileJvmTypesShortNamesCache(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_18, _compileJvmTypesShortNamesCache);\n      String _jvmElementsReferencesSearch = this._ideaPluginClassNames.getJvmElementsReferencesSearch(grammar);\n      String _javaPath_19 = this._ideaPluginClassNames.toJavaPath(_jvmElementsReferencesSearch);\n      CharSequence _compileJvmElementsReferencesSearch = this.compileJvmElementsReferencesSearch(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_19, _compileJvmElementsReferencesSearch);\n    }\n    OutputImpl output = new OutputImpl();\n    this.addOutlet(output, IdeaPluginGenerator.PLUGIN, false, this.ideaProjectPath);\n    this.addOutlet(output, IdeaPluginGenerator.META_INF_PLUGIN, false, (this.ideaProjectPath + \"/META-INF\"));\n    if (this.deployable) {\n      StringConcatenation _builder = new StringConcatenation();\n      String _name = grammar.getName();\n      String _simpleName = this._ideaPluginClassNames.toSimpleName(_name);\n      _builder.append(_simpleName, \"\");\n      _builder.append(\" Launch Intellij.launch\");\n      CharSequence _compileLaunchIntellij = this.compileLaunchIntellij(grammar);\n      this.writeFile(output, IdeaPluginGenerator.PLUGIN, _builder.toString(), _compileLaunchIntellij);\n      CharSequence _compilePluginXml = this.compilePluginXml(grammar);\n      this.writeFile(output, IdeaPluginGenerator.META_INF_PLUGIN, \"plugin.xml\", _compilePluginXml);\n    }\n    CharSequence _compileProjectXml = this.compileProjectXml(grammar);\n    this.writeFile(output, IdeaPluginGenerator.PLUGIN, \".project\", _compileProjectXml);\n    CharSequence _compileClasspathXml = this.compileClasspathXml(grammar);\n    this.writeFile(output, IdeaPluginGenerator.PLUGIN, \".classpath\", _compileClasspathXml);\n  }","id":21639,"modified_method":"public void generate(final Grammar grammar, final Xtend2ExecutionContext ctx) {\n    Naming _naming = this.getNaming();\n    String _lineDelimiter = _naming.getLineDelimiter();\n    this._xtextIDEAGeneratorExtensions.installOutlets(ctx, this.ideaProjectPath, this.encoding, _lineDelimiter);\n    Outlet _srcOutlet = this._xtextIDEAGeneratorExtensions.getSrcOutlet(ctx);\n    String outlet_src = _srcOutlet.getName();\n    Outlet _srcGenOutlet = this._xtextIDEAGeneratorExtensions.getSrcGenOutlet(ctx);\n    String outlet_src_gen = _srcGenOutlet.getName();\n    final BindFactory bindFactory = new BindFactory();\n    String _psiParserName = this._ideaPluginClassNames.getPsiParserName(grammar);\n    bindFactory.addTypeToType(\"com.intellij.lang.PsiParser\", _psiParserName);\n    String _tokenTypeProviderName = this._ideaPluginClassNames.getTokenTypeProviderName(grammar);\n    bindFactory.addTypeToType(\"org.eclipse.xtext.idea.parser.TokenTypeProvider\", _tokenTypeProviderName);\n    String _parserDefinitionName = this._ideaPluginClassNames.getParserDefinitionName(grammar);\n    bindFactory.addTypeToType(\"com.intellij.lang.ParserDefinition\", _parserDefinitionName);\n    String _elementTypeProviderName = this._ideaPluginClassNames.getElementTypeProviderName(grammar);\n    bindFactory.addTypeToTypeSingleton(\"org.eclipse.xtext.idea.lang.IElementTypeProvider\", _elementTypeProviderName);\n    if (this.typesIntegrationRequired) {\n      bindFactory.addTypeToType(\"org.eclipse.xtext.common.types.access.IJvmTypeProvider.Factory\", \"org.eclipse.xtext.idea.types.access.StubTypeProviderFactory\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider\", \"org.eclipse.xtext.idea.types.StubBasedTypeScopeProvider\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.xbase.jvmmodel.JvmModelAssociator\", \"org.eclipse.xtext.idea.jvmmodel.PsiJvmModelAssociator\");\n      bindFactory.addTypeToTypeSingleton(\"org.eclipse.xtext.idea.types.stubindex.JvmDeclaredTypeShortNameIndex\", \"org.eclipse.xtext.idea.types.stubindex.JvmDeclaredTypeShortNameIndex\");\n      bindFactory.addTypeToType(\"org.eclipse.xtext.xbase.typesystem.internal.IFeatureScopeTracker.Provider\", \"org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider\");\n    }\n    final Set<Binding> bindings = bindFactory.getBindings();\n    String _standaloneSetupIdea = this._ideaPluginClassNames.getStandaloneSetupIdea(grammar);\n    String _javaPath = this._ideaPluginClassNames.toJavaPath(_standaloneSetupIdea);\n    CharSequence _compileStandaloneSetup = this.compileStandaloneSetup(grammar);\n    ctx.writeFile(outlet_src, _javaPath, _compileStandaloneSetup);\n    String _ideaModuleName = this._ideaPluginClassNames.getIdeaModuleName(grammar);\n    String _javaPath_1 = this._ideaPluginClassNames.toJavaPath(_ideaModuleName);\n    CharSequence _compileIdeaModule = this.compileIdeaModule(grammar);\n    ctx.writeFile(outlet_src, _javaPath_1, _compileIdeaModule);\n    String _completionContributor = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _xtendPath = this._ideaPluginClassNames.toXtendPath(_completionContributor);\n    CharSequence _compileCompletionContributor = this.compileCompletionContributor(grammar);\n    ctx.writeFile(outlet_src, _xtendPath, _compileCompletionContributor);\n    String _abstractCompletionContributor = this._ideaPluginClassNames.getAbstractCompletionContributor(grammar);\n    String _javaPath_2 = this._ideaPluginClassNames.toJavaPath(_abstractCompletionContributor);\n    CharSequence _compileAbstractCompletionContributor = this.compileAbstractCompletionContributor(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_2, _compileAbstractCompletionContributor);\n    String _languageName = this._ideaPluginClassNames.getLanguageName(grammar);\n    String _javaPath_3 = this._ideaPluginClassNames.toJavaPath(_languageName);\n    CharSequence _compileLanguage = this.compileLanguage(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_3, _compileLanguage);\n    String _fileTypeName = this._ideaPluginClassNames.getFileTypeName(grammar);\n    String _javaPath_4 = this._ideaPluginClassNames.toJavaPath(_fileTypeName);\n    CharSequence _compileFileType = this.compileFileType(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_4, _compileFileType);\n    String _fileTypeFactoryName = this._ideaPluginClassNames.getFileTypeFactoryName(grammar);\n    String _javaPath_5 = this._ideaPluginClassNames.toJavaPath(_fileTypeFactoryName);\n    CharSequence _compileFileTypeFactory = this.compileFileTypeFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_5, _compileFileTypeFactory);\n    String _fileImplName = this._ideaPluginClassNames.getFileImplName(grammar);\n    String _javaPath_6 = this._ideaPluginClassNames.toJavaPath(_fileImplName);\n    CharSequence _compileFileImpl = this.compileFileImpl(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_6, _compileFileImpl);\n    String _tokenTypeProviderName_1 = this._ideaPluginClassNames.getTokenTypeProviderName(grammar);\n    String _javaPath_7 = this._ideaPluginClassNames.toJavaPath(_tokenTypeProviderName_1);\n    CharSequence _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_7, _compileTokenTypeProvider);\n    String _elementTypeProviderName_1 = this._ideaPluginClassNames.getElementTypeProviderName(grammar);\n    String _javaPath_8 = this._ideaPluginClassNames.toJavaPath(_elementTypeProviderName_1);\n    CharSequence _compileElementTypeProvider = this.compileElementTypeProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_8, _compileElementTypeProvider);\n    String _parserDefinitionName_1 = this._ideaPluginClassNames.getParserDefinitionName(grammar);\n    String _javaPath_9 = this._ideaPluginClassNames.toJavaPath(_parserDefinitionName_1);\n    CharSequence _compileParserDefinition = this.compileParserDefinition(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_9, _compileParserDefinition);\n    String _syntaxHighlighterFactoryName = this._ideaPluginClassNames.getSyntaxHighlighterFactoryName(grammar);\n    String _javaPath_10 = this._ideaPluginClassNames.toJavaPath(_syntaxHighlighterFactoryName);\n    CharSequence _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_10, _compileSyntaxHighlighterFactory);\n    String _abstractIdeaModuleName = this._ideaPluginClassNames.getAbstractIdeaModuleName(grammar);\n    String _javaPath_11 = this._ideaPluginClassNames.toJavaPath(_abstractIdeaModuleName);\n    CharSequence _compileGuiceModuleIdeaGenerated = this.compileGuiceModuleIdeaGenerated(grammar, bindings);\n    ctx.writeFile(outlet_src_gen, _javaPath_11, _compileGuiceModuleIdeaGenerated);\n    String _extensionFactoryName = this._ideaPluginClassNames.getExtensionFactoryName(grammar);\n    String _javaPath_12 = this._ideaPluginClassNames.toJavaPath(_extensionFactoryName);\n    CharSequence _compileExtensionFactory = this.compileExtensionFactory(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_12, _compileExtensionFactory);\n    String _buildProcessParametersProviderName = this._ideaPluginClassNames.buildProcessParametersProviderName(grammar);\n    String _javaPath_13 = this._ideaPluginClassNames.toJavaPath(_buildProcessParametersProviderName);\n    CharSequence _compileBuildProcessParametersProvider = this.compileBuildProcessParametersProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_13, _compileBuildProcessParametersProvider);\n    String _codeBlockModificationListenerName = this._ideaPluginClassNames.getCodeBlockModificationListenerName(grammar);\n    String _javaPath_14 = this._ideaPluginClassNames.toJavaPath(_codeBlockModificationListenerName);\n    CharSequence _compileCodeBlockModificationListener = this.compileCodeBlockModificationListener(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_14, _compileCodeBlockModificationListener);\n    String _elementDescriptionProviderName = this._ideaPluginClassNames.getElementDescriptionProviderName(grammar);\n    String _javaPath_15 = this._ideaPluginClassNames.toJavaPath(_elementDescriptionProviderName);\n    CharSequence _compileElementDescriptionProvider = this.compileElementDescriptionProvider(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_15, _compileElementDescriptionProvider);\n    String _psiParserName_1 = this._ideaPluginClassNames.getPsiParserName(grammar);\n    String _javaPath_16 = this._ideaPluginClassNames.toJavaPath(_psiParserName_1);\n    CharSequence _compilePsiParser = this.compilePsiParser(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_16, _compilePsiParser);\n    String _pomDeclarationSearcherName = this._ideaPluginClassNames.getPomDeclarationSearcherName(grammar);\n    String _javaPath_17 = this._ideaPluginClassNames.toJavaPath(_pomDeclarationSearcherName);\n    CharSequence _compilePomDeclarationSearcher = this.compilePomDeclarationSearcher(grammar);\n    ctx.writeFile(outlet_src_gen, _javaPath_17, _compilePomDeclarationSearcher);\n    if (this.typesIntegrationRequired) {\n      String _jvmTypesElementFinderName = this._ideaPluginClassNames.getJvmTypesElementFinderName(grammar);\n      String _javaPath_18 = this._ideaPluginClassNames.toJavaPath(_jvmTypesElementFinderName);\n      CharSequence _compileJvmTypesElementFinder = this.compileJvmTypesElementFinder(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_18, _compileJvmTypesElementFinder);\n      String _jvmTypesShortNamesCacheName = this._ideaPluginClassNames.getJvmTypesShortNamesCacheName(grammar);\n      String _javaPath_19 = this._ideaPluginClassNames.toJavaPath(_jvmTypesShortNamesCacheName);\n      CharSequence _compileJvmTypesShortNamesCache = this.compileJvmTypesShortNamesCache(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_19, _compileJvmTypesShortNamesCache);\n      String _jvmElementsReferencesSearch = this._ideaPluginClassNames.getJvmElementsReferencesSearch(grammar);\n      String _javaPath_20 = this._ideaPluginClassNames.toJavaPath(_jvmElementsReferencesSearch);\n      CharSequence _compileJvmElementsReferencesSearch = this.compileJvmElementsReferencesSearch(grammar);\n      ctx.writeFile(outlet_src_gen, _javaPath_20, _compileJvmElementsReferencesSearch);\n    }\n    OutputImpl output = new OutputImpl();\n    this.addOutlet(output, IdeaPluginGenerator.PLUGIN, false, this.ideaProjectPath);\n    this.addOutlet(output, IdeaPluginGenerator.META_INF_PLUGIN, false, (this.ideaProjectPath + \"/META-INF\"));\n    if (this.deployable) {\n      StringConcatenation _builder = new StringConcatenation();\n      String _name = grammar.getName();\n      String _simpleName = this._ideaPluginClassNames.toSimpleName(_name);\n      _builder.append(_simpleName, \"\");\n      _builder.append(\" Launch Intellij.launch\");\n      CharSequence _compileLaunchIntellij = this.compileLaunchIntellij(grammar);\n      this.writeFile(output, IdeaPluginGenerator.PLUGIN, _builder.toString(), _compileLaunchIntellij);\n      CharSequence _compilePluginXml = this.compilePluginXml(grammar);\n      this.writeFile(output, IdeaPluginGenerator.META_INF_PLUGIN, \"plugin.xml\", _compilePluginXml);\n    }\n    CharSequence _compileProjectXml = this.compileProjectXml(grammar);\n    this.writeFile(output, IdeaPluginGenerator.PLUGIN, \".project\", _compileProjectXml);\n    CharSequence _compileClasspathXml = this.compileClasspathXml(grammar);\n    this.writeFile(output, IdeaPluginGenerator.PLUGIN, \".classpath\", _compileClasspathXml);\n  }","commit_id":"299669c2589595cfbccaf901114873be4d75e917","url":"https://github.com/eclipse/xtext"},{"original_method":"public CharSequence compileCompletionContributor(final Grammar grammar) {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package \");\n    String _completionContributor = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _packageName = this._ideaPluginClassNames.toPackageName(_completionContributor);\n    _builder.append(_packageName, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.newLine();\n    _builder.append(\"import \");\n    String _languageName = this._ideaPluginClassNames.getLanguageName(grammar);\n    _builder.append(_languageName, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"import org.eclipse.xtext.idea.completion.AbstractCompletionContributor\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.append(\"class \");\n    String _completionContributor_1 = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _simpleName = this._ideaPluginClassNames.toSimpleName(_completionContributor_1);\n    _builder.append(_simpleName, \"\");\n    _builder.append(\" extends AbstractCompletionContributor {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"new() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"super(\");\n    String _languageName_1 = this._ideaPluginClassNames.getLanguageName(grammar);\n    String _simpleName_1 = this._ideaPluginClassNames.toSimpleName(_languageName_1);\n    _builder.append(_simpleName_1, \"\\t\\t\");\n    _builder.append(\".INSTANCE)\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    return _builder;\n  }","id":21640,"modified_method":"public CharSequence compileCompletionContributor(final Grammar grammar) {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"package \");\n    String _completionContributor = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _packageName = this._ideaPluginClassNames.toPackageName(_completionContributor);\n    _builder.append(_packageName, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.newLine();\n    _builder.append(\"import org.eclipse.xtext.idea.lang.AbstractXtextLanguage;\");\n    _builder.newLine();\n    _builder.append(\"import \");\n    String _languageName = this._ideaPluginClassNames.getLanguageName(grammar);\n    _builder.append(_languageName, \"\");\n    _builder.append(\";\");\n    _builder.newLineIfNotEmpty();\n    _builder.newLine();\n    _builder.append(\"class \");\n    String _completionContributor_1 = this._ideaPluginClassNames.getCompletionContributor(grammar);\n    String _simpleName = this._ideaPluginClassNames.toSimpleName(_completionContributor_1);\n    _builder.append(_simpleName, \"\");\n    _builder.append(\" extends \");\n    String _abstractCompletionContributor = this._ideaPluginClassNames.getAbstractCompletionContributor(grammar);\n    String _simpleName_1 = this._ideaPluginClassNames.toSimpleName(_abstractCompletionContributor);\n    _builder.append(_simpleName_1, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"new() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"this(\");\n    String _languageName_1 = this._ideaPluginClassNames.getLanguageName(grammar);\n    String _simpleName_2 = this._ideaPluginClassNames.toSimpleName(_languageName_1);\n    _builder.append(_simpleName_2, \"\\t\\t\");\n    _builder.append(\".INSTANCE)\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"new(AbstractXtextLanguage lang) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"super(lang)\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"//custom rules here\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    _builder.newLine();\n    return _builder;\n  }","commit_id":"299669c2589595cfbccaf901114873be4d75e917","url":"https://github.com/eclipse/xtext"},{"original_method":"public XtendCompletionContributor() {\n    super(XtendLanguage.INSTANCE);\n  }","id":21641,"modified_method":"public XtendCompletionContributor() {\n    this(XtendLanguage.INSTANCE);\n  }","commit_id":"299669c2589595cfbccaf901114873be4d75e917","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n        public void run() {\n            try {\n                RepositoryUtil.stopRepository();\n            } catch(Exception e) {\n                //ignore for now\n            }\n        }","id":21642,"modified_method":"public AbstractRepositoryTest(String testInstanceName) {\n        super();\n        this.testInstanceName = testInstanceName;\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"@Override\n\tpublic Object invokeExplosively(Object target, Object... params)\n\t\t\tthrows Throwable {\n\t\t// Executes the test method on the supplied target\n\n\t\t// Check if this is the first test running from this specific\n\t\t// PerformanceSuite\n\t\t// and run the BeforeSuite methods\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& (performanceSuiteState.getBeforeSuiteMethod() != null)\n\t\t\t\t&& (performanceSuiteState.getTargetObjectSuite() != null)\n\t\t\t\t&& (performanceSuiteState.getNumberOfExecutedMethods() == 0)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\t\t\tperformanceSuiteState.getBeforeSuiteMethod().invoke(\n\t\t\t\t\tperformanceSuiteState.getTargetObjectSuite());\n\t\t}\n\n\t\t// In case of a PerformanceSuite we need to run the methods annotated\n\t\t// with Before and After\n\t\t// ourselves as JUnit can't find them (JUnit is looking for them in the\n\t\t// test suite class);\n\t\t// in case we don't have to deal with a PerformanceSuite just skip this\n\t\t// as JUnit will run the methods itself\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\n\t\t\trecursiveCallSpecificMethod(this.target.getClass(), this.target,\n\t\t\t\t\tBefore.class);\n\t\t}\n\n\t\t// Need to count the number of tests run from the PerformanceSuite\n\t\t// so that we can call the AfterSuite method after the last test from\n\t\t// the suite\n\t\t// has run and the AfterSuite needs to run\n\t\tperformanceSuiteState.incrementNumberOfExecutedTestMethods();\n\n\t\tObject response = null;\n\n\t\tMethod testMethodToInvoke = this.getMethod();\n\n\t\tPerformanceTest performanceAnnotation = testMethodToInvoke\n\t\t\t\t.getAnnotation(PerformanceTest.class);\n\n\t\t// retrieve the test configuration options\n\t\tint warmuptime = performanceAnnotation.warmuptime();\n\t\tint runtime = performanceAnnotation.runtime();\n\t\tint warmupinvocations = performanceAnnotation.warmupinvocations();\n\t\tint runinvocations = performanceAnnotation.runinvocations();\n\n\t\tDescriptiveStatistics statistics = new DescriptiveStatistics();\n\n\t\t// System.out.println(\"Warmup started - test :\" +\n\t\t// testMethodToInvoke.getName());\n\n\t\tif (warmupinvocations != 0) {\n\t\t\t// Run the number of invocation specified in the annotation\n\t\t\t// for warming up the system\n\t\t\tfor (int invocationIndex = 0; invocationIndex < warmupinvocations; invocationIndex++) {\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, BeforeMethodInvocation.class);\n\n\t\t\t\t// TODO: implement the method to run a before a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, BeforeSpecificTest.class);\n\n\t\t\t\tresponse = super.invokeExplosively(this.target, params);\n\n\t\t\t\t// TODO: implement the method to run a after a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, AfterSpecificTest.class);\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, AfterMethodInvocation.class);\n\t\t\t}\n\t\t} else {\n\t\t\t// Run a few iterations to warm up the system\n\t\t\tlong warmupEnd = System.currentTimeMillis() + warmuptime * 1000;\n\t\t\twhile (System.currentTimeMillis() < warmupEnd) {\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, BeforeMethodInvocation.class);\n\n\t\t\t\t// TODO: implement the method to run a before a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, BeforeSpecificTest.class);\n\n\t\t\t\tresponse = super.invokeExplosively(this.target, params);\n\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, AfterSpecificTest.class);\n\t\t\t\t// TODO: implement the method to run a after a specific test\n\t\t\t\t// method\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, AfterMethodInvocation.class);\n\t\t\t}\n\t\t}\n\n\t\t// System.out.println(\"Warmup ended - test :\" +\n\t\t// testMethodToInvoke.getName());\n\t\tif (runinvocations != 0) {\n\t\t\t// Run the specified number of iterations and capture the execution\n\t\t\t// times\n\t\t\tfor (int invocationIndex = 0; invocationIndex < runinvocations; invocationIndex++) {\n\n\t\t\t\tresponse = this.invokeTimedTestMethod(testMethodToInvoke,\n\t\t\t\t\t\tstatistics, params);\n\t\t\t}\n\t\t} else {\n\t\t\t// Run test iterations and capture the execution times\n\t\t\tlong runtimeEnd = System.currentTimeMillis() + runtime * 1000;\n\n\t\t\twhile (System.currentTimeMillis() < runtimeEnd) {\n\n\t\t\t\tresponse = this.invokeTimedTestMethod(testMethodToInvoke,\n\t\t\t\t\t\tstatistics, params);\n\n\t\t\t}\n\t\t}\n\n\t\tif (statistics.getN() > 0) {\n            ReportLogger.writeReport(this.performanceSuiteState.testSuiteName, testCaseName, this.target.getClass().getName(),\n                    getMethod().getName(), statistics, ReportLogger.ReportType.TXT, reportLevel);\n\t\t}\n\n\t\t// In case of a PerformanceSuite we need to run the methods annotated\n\t\t// with Before and After\n\t\t// ourselves as JUnit can't find them; in case we don't have to deal\n\t\t// with a PerformanceSuite\n\t\t// just skip this as JUnit will run the methods itself\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\n\t\t\trecursiveCallSpecificMethod(this.target.getClass(), this.target,\n\t\t\t\t\tAfter.class);\n\t\t}\n\n\t\t// Check if this is the last test running from a PerformanceSuite\n\t\t// and run the AfterSuite method\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& (performanceSuiteState.getAfterSuiteMethod() != null)\n\t\t\t\t&& (performanceSuiteState.getTargetObjectSuite() != null)\n\t\t\t\t&& (performanceSuiteState.getNumberOfExecutedMethods() == performanceSuiteState\n\t\t\t\t\t\t.getNumberOfMethodsInSuite())\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\t\t\tperformanceSuiteState.getAfterSuiteMethod().invoke(\n\t\t\t\t\tperformanceSuiteState.getTargetObjectSuite());\n\n\t\t}\n\n\t\treturn response;\n\t}","id":21643,"modified_method":"@Override\n\tpublic Object invokeExplosively(Object target, Object... params)\n\t\t\tthrows Throwable {\n\t\t// Executes the test method on the supplied target\n\n\t\t// Check if this is the first test running from this specific\n\t\t// PerformanceSuite\n\t\t// and run the BeforeSuite methods\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& (performanceSuiteState.getBeforeSuiteMethod() != null)\n\t\t\t\t&& (performanceSuiteState.getTargetObjectSuite() != null)\n\t\t\t\t&& (performanceSuiteState.getNumberOfExecutedMethods() == 0)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\t\t\tperformanceSuiteState.getBeforeSuiteMethod().invoke(\n\t\t\t\t\tperformanceSuiteState.getTargetObjectSuite());\n\t\t}\n\n\t\t// In case of a PerformanceSuite we need to run the methods annotated\n\t\t// with Before and After\n\t\t// ourselves as JUnit can't find them (JUnit is looking for them in the\n\t\t// test suite class);\n\t\t// in case we don't have to deal with a PerformanceSuite just skip this\n\t\t// as JUnit will run the methods itself\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\n\t\t\trecursiveCallSpecificMethod(this.target.getClass(), this.target,\n\t\t\t\t\tBefore.class);\n\t\t}\n\n\t\t// Need to count the number of tests run from the PerformanceSuite\n\t\t// so that we can call the AfterSuite method after the last test from\n\t\t// the suite\n\t\t// has run and the AfterSuite needs to run\n\t\tperformanceSuiteState.incrementNumberOfExecutedTestMethods();\n\n\t\tObject response = null;\n\n\t\tMethod testMethodToInvoke = this.getMethod();\n\n\t\tPerformanceTest performanceAnnotation = testMethodToInvoke\n\t\t\t\t.getAnnotation(PerformanceTest.class);\n\n\t\t// retrieve the test configuration options\n\t\tint warmuptime = performanceAnnotation.warmuptime();\n\t\tint runtime = performanceAnnotation.runtime();\n\t\tint warmupinvocations = performanceAnnotation.warmupinvocations();\n\t\tint runinvocations = performanceAnnotation.runinvocations();\n\n\t\tDescriptiveStatistics statistics = new DescriptiveStatistics();\n\n\t\t// System.out.println(\"Warmup started - test :\" +\n\t\t// testMethodToInvoke.getName());\n\n\t\tif (warmupinvocations != 0) {\n\t\t\t// Run the number of invocation specified in the annotation\n\t\t\t// for warming up the system\n\t\t\tfor (int invocationIndex = 0; invocationIndex < warmupinvocations; invocationIndex++) {\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, BeforeMethodInvocation.class);\n\n\t\t\t\t// TODO: implement the method to run a before a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, BeforeSpecificTest.class);\n\n\t\t\t\tresponse = super.invokeExplosively(this.target, params);\n\n\t\t\t\t// TODO: implement the method to run a after a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, AfterSpecificTest.class);\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, AfterMethodInvocation.class);\n\t\t\t}\n\t\t} else {\n\t\t\t// Run a few iterations to warm up the system\n\t\t\tlong warmupEnd = System.currentTimeMillis() + warmuptime * 1000;\n\t\t\twhile (System.currentTimeMillis() < warmupEnd) {\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, BeforeMethodInvocation.class);\n\n\t\t\t\t// TODO: implement the method to run a before a specific test\n\t\t\t\t// method\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, BeforeSpecificTest.class);\n\n\t\t\t\tresponse = super.invokeExplosively(this.target, params);\n\n\t\t\t\t// recursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t// this.target, AfterSpecificTest.class);\n\t\t\t\t// TODO: implement the method to run a after a specific test\n\t\t\t\t// method\n\n\t\t\t\trecursiveCallSpecificMethod(this.target.getClass(),\n\t\t\t\t\t\tthis.target, AfterMethodInvocation.class);\n\t\t\t}\n\t\t}\n\n\t\t// System.out.println(\"Warmup ended - test :\" +\n\t\t// testMethodToInvoke.getName());\n\t\tif (runinvocations != 0) {\n\t\t\t// Run the specified number of iterations and capture the execution\n\t\t\t// times\n\t\t\tfor (int invocationIndex = 0; invocationIndex < runinvocations; invocationIndex++) {\n\n\t\t\t\tresponse = this.invokeTimedTestMethod(testMethodToInvoke,\n\t\t\t\t\t\tstatistics, params);\n\t\t\t}\n\t\t} else {\n\t\t\t// Run test iterations and capture the execution times\n\t\t\tlong runtimeEnd = System.currentTimeMillis() + runtime * 1000;\n\n\t\t\twhile (System.currentTimeMillis() < runtimeEnd) {\n\n\t\t\t\tresponse = this.invokeTimedTestMethod(testMethodToInvoke,\n\t\t\t\t\t\tstatistics, params);\n\n\t\t\t}\n\t\t}\n\n\t\tif (statistics.getN() > 0) {\n\t\t    ReportLogger.writeReport(this.performanceSuiteState.testSuiteName, testCaseName, ((String )this.target.getClass().getMethod(\"toString\", null).invoke(this.target, null)),\n                    getMethod().getName(), statistics, ReportLogger.ReportType.TXT, reportLevel);\n\t\t}\n\n\t\t// In case of a PerformanceSuite we need to run the methods annotated\n\t\t// with Before and After\n\t\t// ourselves as JUnit can't find them; in case we don't have to deal\n\t\t// with a PerformanceSuite\n\t\t// just skip this as JUnit will run the methods itself\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\n\t\t\trecursiveCallSpecificMethod(this.target.getClass(), this.target,\n\t\t\t\t\tAfter.class);\n\t\t}\n\n\t\t// Check if this is the last test running from a PerformanceSuite\n\t\t// and run the AfterSuite method\n\t\tif ((performanceSuiteState != null)\n\t\t\t\t&& (performanceSuiteState.getAfterSuiteMethod() != null)\n\t\t\t\t&& (performanceSuiteState.getTargetObjectSuite() != null)\n\t\t\t\t&& (performanceSuiteState.getNumberOfExecutedMethods() == performanceSuiteState\n\t\t\t\t\t\t.getNumberOfMethodsInSuite())\n\t\t\t\t&& !performanceSuiteState.testSuiteName\n\t\t\t\t\t\t.equals(ParameterizedTestList.TEST_CASE_ONLY)) {\n\t\t\tperformanceSuiteState.getAfterSuiteMethod().invoke(\n\t\t\t\t\tperformanceSuiteState.getTargetObjectSuite());\n\n\t\t}\n\n\t\treturn response;\n\t}","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n        \n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.setTestSuiteTitle(\"jcr.resource-2.1.0\");\n        testCenter.addTestObject(new ResolveNonExistingWith1000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000VanityPathTest(helper));\n        //tests.add(new ResolveNonExistingWith30000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith1000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000AliasTest(helper));\n        //tests.add(new ResolveNonExistingWith30000AliasTest(helper));\n                \n        return testCenter;\n    }","id":21644,"modified_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n        \n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith1000VanityPathTest\",helper, 100, 10));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith5000VanityPathTest\",helper, 100, 50));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith10000VanityPathTest\",helper, 100, 100));\n        \n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWithManyAliasTest\",helper, 1000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith5000AliasTest\",helper, 5000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith10000AliasTest\",helper, 10000));\n                \n        return testCenter;\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n        \n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.setTestSuiteTitle(\"jcr.resource-2.2.0\");\n        testCenter.addTestObject(new ResolveNonExistingWith1000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000VanityPathTest(helper));\n        //tests.add(new ResolveNonExistingWith30000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith1000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000AliasTest(helper));\n        //tests.add(new ResolveNonExistingWith30000AliasTest(helper));\n        \n        return testCenter;\n    }","id":21645,"modified_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n\n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.setTestSuiteTitle(\"jcr.resource-2.2.0\");\n        \n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith1000VanityPathTest\",helper, 100, 10));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith5000VanityPathTest\",helper, 100, 50));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith10000VanityPathTest\",helper, 100, 100));\n        \n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith1000AliasTest\",helper, 1000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith5000AliasTest\",helper, 5000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith10000AliasTest\",helper, 10000));\n\n        return testCenter;\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n        \n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.setTestSuiteTitle(\"jcr.resource-2.0.10\");\n        testCenter.addTestObject(new ResolveNonExistingWith1000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000VanityPathTest(helper));\n        //tests.add(new ResolveNonExistingWith30000VanityPathTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith1000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith5000AliasTest(helper));\n        testCenter.addTestObject(new ResolveNonExistingWith10000AliasTest(helper));\n        //tests.add(new ResolveNonExistingWith30000AliasTest(helper));\n        \n        return testCenter;\n        \n    }","id":21646,"modified_method":"@PerformanceTestSuite\n    public ParameterizedTestList testPerformance() throws Exception {\n        Helper helper = new Helper();\n        \n        ParameterizedTestList testCenter = new ParameterizedTestList();\n        testCenter.setTestSuiteTitle(\"jcr.resource-2.0.10\");\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith1000VanityPathTest\",helper, 100, 10));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith5000VanityPathTest\",helper, 100, 50));\n        testCenter.addTestObject(new ResolveNonExistingWithManyVanityPathTest(\"ResolveNonExistingWith10000VanityPathTest\",helper, 100, 100));\n        \n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWithManyAliasTest\",helper, 1000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith5000AliasTest\",helper, 5000));\n        testCenter.addTestObject(new ResolveNonExistingWithManyAliasTest(\"ResolveNonExistingWith10000AliasTest\",helper, 10000));\n        \n        return testCenter;\n        \n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"protected void runTest() throws Exception {\n        String path = ResourceUtil.normalize(ResourceUtil.getParent(rootPath) + \"/\" + \"testNonExistingAlias\"\n                + \".print.html\");\n        HttpServletRequest request = new ResourceResolverTestRequest(path);\n        Resource res = resResolver.resolve(request, path);\n        Assert.assertNotNull(res);\n    }","id":21647,"modified_method":"@PerformanceTest\n    public void runTest() throws Exception {\n        String path = ResourceUtil.normalize(ResourceUtil.getParent(rootPath) + \"/\" + \"testNonExistingAlias\"\n                + \".print.html\");\n        HttpServletRequest request = new ResourceResolverTestRequest(path);\n        Resource res = resResolver.resolve(request, path);\n        Assert.assertNotNull(res);\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"public ResolveNonExistingWithManyAliasTest(TestHelper helper, int nodeCount) {\n        this.helper = helper;\n        this.nodeCount = nodeCount;\n    }","id":21648,"modified_method":"public ResolveNonExistingWithManyAliasTest(String testInstanceName, TestHelper helper, int nodeCount) {\n        super(testInstanceName);\n        this.helper = helper;\n        this.nodeCount = nodeCount;\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"protected void runTest() throws Exception {\n        String path = ResourceUtil.normalize(ResourceUtil.getParent(rootPath) + \"/\" + \"testNonExistingVanity\"\n                + \".print.html\");\n        HttpServletRequest request = new ResourceResolverTestRequest(path);\n        Resource res = resResolver.resolve(request, path);\n        Assert.assertNotNull(res);\n    }","id":21649,"modified_method":"@PerformanceTest\n    public void runTest() throws Exception {\n        String path = ResourceUtil.normalize(ResourceUtil.getParent(rootPath) + \"/\" + \"testNonExistingVanity\"\n                + \".print.html\");\n        HttpServletRequest request = new ResourceResolverTestRequest(path);\n        Resource res = resResolver.resolve(request, path);\n        Assert.assertNotNull(res);\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"public ResolveNonExistingWithManyVanityPathTest(TestHelper helper, int nodeCount, int childNodeCount) {\n        this.helper = helper;\n        this.nodeCount = nodeCount;\n        this.childNodeCount = childNodeCount;\n    }","id":21650,"modified_method":"public ResolveNonExistingWithManyVanityPathTest(String testInstanceName,\n            TestHelper helper, int nodeCount, int childNodeCount) {\n        super(testInstanceName);\n        this.helper = helper;\n        this.nodeCount = nodeCount;\n        this.childNodeCount = childNodeCount;\n    }","commit_id":"bff1c6f62e371cda28682325184c0c4cb3b81162","url":"https://github.com/apache/sling"},{"original_method":"private static Node getNodeAtPath(Document document, Node parentNode, String path, int nodePos, int d)\n\t{\n\t\tif ( parentNode == null ) parentNode = document;\n\t\tdoDebug(d,\"> getNodeAtPath path@\" + nodePos + \"=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\n\t\tString [] newPath = path.split(\"/\");\n\t\t// doDebug(d,\"newPath = \"+outStringArray(newPath));\n\t\tfor ( int i=1; i< newPath.length; i++ )\n\t\t{\n\t\t\tString nodeName = newPath[i];\n\t\t\tif ( i == newPath.length-1 ) {\n\t\t\t\t// doDebug(d,\"Splitting !=\"+nodeName);\n\t\t\t\t// check to see if we have a nodename=attributename\n\t\t\t\tString [] nodeSplit = nodeName.split(\"!\");\n\t\t\t\tif ( nodeSplit.length > 1 ) {\n\t\t\t\t\tnodeName = nodeSplit[0];\n\t\t\t\t\t// doDebug(d,\"new nodeName=\"+nodeName);\n\t\t\t\t}\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, nodePos, d);\n\t\t\t} else {\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, 0, d);\n\t\t\t}\t\n\t\t}\n\t\td--;\n\t\tdoDebug(d,\"< getNodeAtPath returning=\"+ nodeToString(parentNode));\n\t\treturn parentNode;\n\t}","id":21651,"modified_method":"private static Node getNodeAtPath(Document document, Node parentNode, String path, int nodePos, int d)\n\t{\n\t\tif ( parentNode == null ) parentNode = document;\n\t\tif ( DF ) doDebug(d,\"> getNodeAtPath path@\" + nodePos + \"=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\n\t\tString [] newPath = path.split(\"/\");\n\t\t// doDebug(d,\"newPath = \"+outStringArray(newPath));\n\t\tfor ( int i=1; i< newPath.length; i++ )\n\t\t{\n\t\t\tString nodeName = newPath[i];\n\t\t\tif ( i == newPath.length-1 ) {\n\t\t\t\t// doDebug(d,\"Splitting !=\"+nodeName);\n\t\t\t\t// check to see if we have a nodename=attributename\n\t\t\t\tString [] nodeSplit = nodeName.split(\"!\");\n\t\t\t\tif ( nodeSplit.length > 1 ) {\n\t\t\t\t\tnodeName = nodeSplit[0];\n\t\t\t\t\t// doDebug(d,\"new nodeName=\"+nodeName);\n\t\t\t\t}\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, nodePos, d);\n\t\t\t} else {\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, 0, d);\n\t\t\t}\t\n\t\t}\n\t\td--;\n\t\tif ( DF ) doDebug(d,\"< getNodeAtPath returning=\"+ nodeToString(parentNode));\n\t\treturn parentNode;\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public static boolean unitTest(String xmlString, boolean doDebug)\n\t{\n\n\t\tif ( xmlString == null ) return false;\n\t\tdebugFlag = doDebug;\n\t\t\n\t\t// If Debug is turned on - let the chips fly, exceptions and\n\t\t// All...\n\t\tif ( doDebug ) {\n\t\t\tdebugFlag = true;\n\t\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\t\tif ( pretty1.equals(pretty2) ) return true;\n\t\t\tSystem.out.println(\"XMLMap - unit test failed\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// For Debug off - we first try it silently and in a try/catch block\n\t\tdebugFlag = false;\n\t\ttry {\n\t\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\t\tif ( pretty1.equals(pretty2) ) return true;\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\t// We will re-do below so folks see the trace back - \n\t\t\t// in the context of debug\n\t\t}\n\n\t\t// If we failed - re-do it with verbose mode on\n\t\tSystem.out.println(\"XMLMap - unit test failed\");\n\t\tSystem.out.println(xmlString);\n\t\tdebugFlag = true;\n\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\tSystem.out.println(\"Pretty Print Version pass 1\\n\"+pretty1);\n\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\tSystem.out.println(\"Pretty Print Version pass 2\\n\"+pretty2);\n\t\tdebugFlag = false;  // Always reset class-wide variable\n\t\treturn false;\n\t}","id":21652,"modified_method":"public static boolean unitTest(String xmlString, boolean doDebug)\n\t{\n\n\t\tif ( xmlString == null ) return false;\n\t\tDF = doDebug;\n\t\t\n\t\t// If Debug is turned on - let the chips fly, exceptions and\n\t\t// All...\n\t\tif ( doDebug ) {\n\t\t\tDF = true;\n\t\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\t\tif ( pretty1.equals(pretty2) ) return true;\n\t\t\tSystem.out.println(\"XMLMap - unit test failed\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// For Debug off - we first try it silently and in a try/catch block\n\t\tDF = false;\n\t\ttry {\n\t\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\t\tif ( pretty1.equals(pretty2) ) return true;\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\t// We will re-do below so folks see the trace back - \n\t\t\t// in the context of debug\n\t\t}\n\n\t\t// If we failed - re-do it with verbose mode on\n\t\tSystem.out.println(\"XMLMap - unit test failed\");\n\t\tSystem.out.println(xmlString);\n\t\tDF = true;\n\t\tString pretty1 = XMLMap.prettyPrint(xmlString);\n\t\tSystem.out.println(\"Pretty Print Version pass 1\\n\"+pretty1);\n\t\tString pretty2 = XMLMap.prettyPrint(pretty1);\n\t\tSystem.out.println(\"Pretty Print Version pass 2\\n\"+pretty2);\n\t\tDF = false;  // Always reset class-wide variable\n\t\treturn false;\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public static void runSamples() {\n\t\tSystem.out.println(\"Running XMLMap (www.mdom.org) Samples...\");\n\t\tdebugFlag = false;\n\n\t\t// Test the parsing of a Basic string Map\n\t\tMap<String, String> tm = XMLMap.getMap(simpleText);\n\t\t// System.out.println(\"tm=\"+tm);\n\t\t\n\t\t// Test the production of a basic map\n\t\tMap<String,String> simpleMap = new TreeMap<String,String>();\n\t\tsimpleMap.put(\"/a/b!x\", \"X\");\n\t\tsimpleMap.put(\"/a/b\", \"B\");\n\t\tsimpleMap.put(\"/a/c/d\", \"D\");\n\t\tSystem.out.println(\"simpleMap\\n\"+simpleMap);\n\t\tString simpleXml = XMLMap.getXML(simpleMap, true);\n\t\tSystem.out.println(\"simpleXml\\n\"+simpleXml);\n\t\tunitTest(simpleXml,false);\n\t\t\t\t\n\t\t// Do a select of a subMap\n\t\tMap<String,String> subMap = XMLMap.selectSubMap(tm, \"/a/c\");\n\t\tMap<String,Object> joinedMap = new TreeMap<String,Object>();\n\t\tSystem.out.println(\"subMap=\"+subMap);\n\t\tjoinedMap.put(\"/top/id\", \"1234\");\n\t\tjoinedMap.put(\"/top/fun\", subMap); // Graft the map onto this node\n\t\tSystem.out.println(\"joinedMap\\n\"+joinedMap);\n\t\tString joinedXml = XMLMap.getXML(joinedMap, true);\n\t\tSystem.out.println(\"joinedXML\\n\"+joinedXml);\n\t\tunitTest(joinedXml,false);\n\t\t\n\t\t// Do an Array\n\t\tMap<String,Object> arrayMap = new TreeMap<String,Object>();\n\t\tString [] arrayStr = { \"first\", \"second\", \"third\" };\n        arrayMap.put(\"/root/stuff\", arrayStr);\n\t\tSystem.out.println(\"arrayMap\\n\"+arrayMap);\n\t\tString arrayXml = XMLMap.getXML(arrayMap, true);\n\t\tSystem.out.println(\"arrayXml\\n\"+arrayXml);\n\t\tunitTest(arrayXml,false);\n\n\t\t// Make a Map that is a combination of Maps, String, and Arrays\n        Map<String,Object> newMap = new TreeMap<String,Object>();\n\n        newMap.put(\"/Root/milton\",\"Root-milton\");\n        newMap.put(\"/Root/joe\",\"Root-joe\");\n        \n        Map<String,String> m2 = new TreeMap<String,String>();\n        m2.put(\"/fred/a\",\"fred-a\");\n        m2.put(\"/fred/b\",\"fred-b\");\n        newMap.put(\"/Root/freds\", m2);\n        \n        // Add a list of maps\n        // <Root>\n        //   <maps>\n        //     <map>\n        //       <key>key-0<\/key>\n        //       <val>val-0<\/val>\n        //     <\/map>\n        //     <map>\n        //       <key>key-1<\/key>\n        //       <val>val-1<\/val>\n        //     <\/map>\n        //   <\/maps>\n        // <\/Root>\n        \n        List<Map<String,String>> lm = new ArrayList<Map<String,String>>();\n        Map<String,String> m3 = null;\n        m3 = new TreeMap<String,String>();\n        m3.put(\"/key\",\"key-0\");\n        m3.put(\"/val\",\"val-0\");\n        lm.add(m3);\n        \n        m3 = new TreeMap<String,String>();\n        m3.put(\"/key\",\"key-1\");\n        m3.put(\"/val\",\"val-1\");\n        lm.add(m3);\n        \n        newMap.put(\"/Root/maps/map\", lm);\n        \n        // Add an array of Strings\n        // <Root>\n        //   <array>first<\/array>\n        //   <array>second<\/array>\n        //   <array>third<\/array>\n        // <\/Root>\n        \n        String [] strar = { \"first\", \"second\", \"third\" };\n        newMap.put(\"/Root/array\", strar);\n        \n        // Add a list of Maps - this is a bit of a weird application - mostly as a \n        // completeness test to insure lists of maps and arrays are equivalent.  Also\n        // since the getFullMap returns maps, not Arrays of strings, this is necessary\n        // to insure symmetry - i.e. we can take a map structure we produce and \n        // regenerate the XML.  Most users will not use this form in construction.\n        //\n        // <Root>\n        //     <item>item-1<\/item>\n        //     <item>item-2<\/item>\n        // <\/Root>\n        \n        List<Map<String,String>> l1 = new ArrayList<Map<String,String>>();\n        Map<String,String> m4 = new TreeMap<String,String>();\n        m4.put(\"/\", \"item-1\");\n        l1.add(m4);\n        Map<String,String> m5 = new TreeMap<String,String>();\n        m5.put(\"/\", \"item-2\");\n        l1.add(m5);\n        newMap.put(\"/Root/item\", l1);\n \n        // Put in using the XMLMap bracket Syntax - not a particularly good\n        // Way to represent multiple items - it is just here for completeness.\n        newMap.put(\"/Root/anns/ann[0]\",\"Root-ann[0]\");\n        newMap.put(\"/Root/anns/ann[1]\",\"Root-ann[1]\");\n        newMap.put(\"/Root/bobs/bob[0]/key\",\"Root-bobs-bob[0]-key\");\n        newMap.put(\"/Root/bobs/bob[0]/val\",\"Root-bobs-bob[0]-val\");\n        newMap.put(\"/Root/bobs/bob[1]/key\",\"Root-bobs-bob[1]-key\");\n        newMap.put(\"/Root/bobs/bob[1]/val\",\"Root-bobs-bob[1]-val\");\n   \n        // This is not allowed because maps cannot have duplicates \n /*       \n        Map<String,String> m6 = new TreeMap<String,String>();\n        m5.put(\"/two\", \"two-1\");\n        m5.put(\"/two\", \"two-2\");\n        newMap.put(\"/Root\", m6);\n  */      \n        \n        // Take the Map - turn it into XML and then parse the returned\n        // XML into a second map - take the second map and produce more XML\n        // If all goes well, the two generated blobs of XML should be the\n        // same.  If anything goes wrong - we re-do it with lots of debug\n        String complexXml = null;\n        boolean success = false;\n    \tdebugFlag = false;\n        try {\n            complexXml = XMLMap.getXML(newMap, true);\n            success = true;\n        } catch(Exception e) {\n        \tsuccess = false;\n        }\n        \n        // If we fail - do it again with deep levels of verbosity\n        if ( success ) {\n        \tunitTest(complexXml,false);\n        } else {\n        \tdebugFlag = true;\n        \tSystem.out.println(\"\\n MISMATCH AND/OR SOME ERROR HAS OCCURED - REDO in VERBODE MODE\");\n            System.out.println(\"Starting out newMap=\"+newMap); \n            complexXml = XMLMap.getXML(newMap, true);\n        \tunitTest(complexXml,false);\n        \tdebugFlag = false;\n        }\n    \t\n        // A different example - iterating through nested sets - demonstrating the short form\n        // of getSites() with the first parameter a string -the commented code below is the long form.\n        \n        // Map<String,Object> theMap = XMLMap.getFullMap(sitesText);\n        // List<Map<String,Object>> theList = XMLMap.getList(theMap, \"/sites/site\");\n        // for ( Map<String,Object> siteMap : theList) {\n        \n        // The short form using convenience method if you don't need the map for anything else\n        System.out.println(\"\\nParsing Sites Structure\");\n        for ( Map<String,Object> siteMap : XMLMap.getList(sitesText,\"/sites/site\")) {\n        \tSystem.out.println(\"Site=\"+siteMap);\n        \tSystem.out.println(\"Id=\"+XMLMap.getString(siteMap,\"/id\"));\n            for ( Map<String,Object> toolMap : XMLMap.getList(siteMap,\"/tools/tool\")) {\n        \t\tSystem.out.println(\"Tool=\"+toolMap);\n        \t\tSystem.out.println(\"ToolId=\"+XMLMap.getString(toolMap,\"/toolid\"));\n                for ( Map<String,Object> property : XMLMap.getList(toolMap, \"/properties/property\")) {\n        \t\t\tSystem.out.println(\"key=\"+XMLMap.getString(property, \"/key\"));\n        \t\t\tSystem.out.println(\"val=\"+XMLMap.getString(property, \"/val\"));\n        \t\t}\n        \t}\n\t    }\n        \n        // Lets parse some RSS as a final kind of easy but quite practical test\n        debugFlag = false;\n        System.out.println(\"\\nParsing RSS Feed\");\n        // System.out.println(XMLMap.prettyPrint(rssText));\n        Map<String,Object> rssFullMap = XMLMap.getFullMap(rssText);\n        System.out.println(\"RSS Full Map\\n\"+rssFullMap);\n        System.out.println(\"Rss Version=\"+XMLMap.getString(rssFullMap,\"/rss!version\"));\n        System.out.println(\"Chan-desc=\"+XMLMap.getString(rssFullMap,\"/rss/channel/description\"));\n        System.out.println(\"Chan-title=\"+XMLMap.getString(rssFullMap,\"/rss/channel/title\"));\n        \n        Map<String,String> rssStringMap = XMLMap.flattenMap(rssFullMap);\n        System.out.println(\"RSS Flat String Only Map\\n\"+rssStringMap);\n        System.out.println(\"Rss Version=\"+rssStringMap.get(\"/rss!version\"));\n        System.out.println(\"Chan-desc=\"+rssStringMap.get(\"/rss/channel/description\"));\n        System.out.println(\"Chan-title=\"+rssStringMap.get(\"/rss/channel/title\"));\n\n        for ( Map<String,Object> rssItem : XMLMap.getList(rssFullMap,\"/rss/channel/item\")) {\n        \tSystem.out.println(\"=== Item ===\");\n        \tSystem.out.println(\" Item-title=\"+XMLMap.getString(rssItem, \"/title\"));\n        \tSystem.out.println(\" Item-description=\"+XMLMap.getString(rssItem, \"/description\"));\n        \tSystem.out.println(\" Item-link=\"+XMLMap.getString(rssItem, \"/link\"));\n        }\t\n\t}","id":21653,"modified_method":"public static void runSamples() {\n\t\tSystem.out.println(\"Running XMLMap (www.mdom.org) Samples...\");\n\t\tDF = false;\n\n\t\t// Test the parsing of a Basic string Map\n\t\tMap<String, String> tm = XMLMap.getMap(simpleText);\n\t\t// System.out.println(\"tm=\"+tm);\n\t\t\n\t\t// Test the production of a basic map\n\t\tMap<String,String> simpleMap = new TreeMap<String,String>();\n\t\tsimpleMap.put(\"/a/b!x\", \"X\");\n\t\tsimpleMap.put(\"/a/b\", \"B\");\n\t\tsimpleMap.put(\"/a/c/d\", \"D\");\n\t\tSystem.out.println(\"simpleMap\\n\"+simpleMap);\n\t\tString simpleXml = XMLMap.getXML(simpleMap, true);\n\t\tSystem.out.println(\"simpleXml\\n\"+simpleXml);\n\t\tunitTest(simpleXml,false);\n\t\t\t\t\n\t\t// Do a select of a subMap\n\t\tMap<String,String> subMap = XMLMap.selectSubMap(tm, \"/a/c\");\n\t\tMap<String,Object> joinedMap = new TreeMap<String,Object>();\n\t\tSystem.out.println(\"subMap=\"+subMap);\n\t\tjoinedMap.put(\"/top/id\", \"1234\");\n\t\tjoinedMap.put(\"/top/fun\", subMap); // Graft the map onto this node\n\t\tSystem.out.println(\"joinedMap\\n\"+joinedMap);\n\t\tString joinedXml = XMLMap.getXML(joinedMap, true);\n\t\tSystem.out.println(\"joinedXML\\n\"+joinedXml);\n\t\tunitTest(joinedXml,false);\n\t\t\n\t\t// Do an Array\n\t\tMap<String,Object> arrayMap = new TreeMap<String,Object>();\n\t\tString [] arrayStr = { \"first\", \"second\", \"third\" };\n        arrayMap.put(\"/root/stuff\", arrayStr);\n\t\tSystem.out.println(\"arrayMap\\n\"+arrayMap);\n\t\tString arrayXml = XMLMap.getXML(arrayMap, true);\n\t\tSystem.out.println(\"arrayXml\\n\"+arrayXml);\n\t\tunitTest(arrayXml,false);\n\n\t\t// Make a Map that is a combination of Maps, String, and Arrays\n        Map<String,Object> newMap = new TreeMap<String,Object>();\n\n        newMap.put(\"/Root/milton\",\"Root-milton\");\n        newMap.put(\"/Root/joe\",\"Root-joe\");\n        \n        Map<String,String> m2 = new TreeMap<String,String>();\n        m2.put(\"/fred/a\",\"fred-a\");\n        m2.put(\"/fred/b\",\"fred-b\");\n        newMap.put(\"/Root/freds\", m2);\n        \n        // Add a list of maps\n        // <Root>\n        //   <maps>\n        //     <map>\n        //       <key>key-0<\/key>\n        //       <val>val-0<\/val>\n        //     <\/map>\n        //     <map>\n        //       <key>key-1<\/key>\n        //       <val>val-1<\/val>\n        //     <\/map>\n        //   <\/maps>\n        // <\/Root>\n        \n        List<Map<String,String>> lm = new ArrayList<Map<String,String>>();\n        Map<String,String> m3 = null;\n        m3 = new TreeMap<String,String>();\n        m3.put(\"/key\",\"key-0\");\n        m3.put(\"/val\",\"val-0\");\n        lm.add(m3);\n        \n        m3 = new TreeMap<String,String>();\n        m3.put(\"/key\",\"key-1\");\n        m3.put(\"/val\",\"val-1\");\n        lm.add(m3);\n        \n        newMap.put(\"/Root/maps/map\", lm);\n        \n        // Add an array of Strings\n        // <Root>\n        //   <array>first<\/array>\n        //   <array>second<\/array>\n        //   <array>third<\/array>\n        // <\/Root>\n        \n        String [] strar = { \"first\", \"second\", \"third\" };\n        newMap.put(\"/Root/array\", strar);\n        \n        // Add a list of Maps - this is a bit of a weird application - mostly as a \n        // completeness test to insure lists of maps and arrays are equivalent.  Also\n        // since the getFullMap returns maps, not Arrays of strings, this is necessary\n        // to insure symmetry - i.e. we can take a map structure we produce and \n        // regenerate the XML.  Most users will not use this form in construction.\n        //\n        // <Root>\n        //     <item>item-1<\/item>\n        //     <item>item-2<\/item>\n        // <\/Root>\n        \n        List<Map<String,String>> l1 = new ArrayList<Map<String,String>>();\n        Map<String,String> m4 = new TreeMap<String,String>();\n        m4.put(\"/\", \"item-1\");\n        l1.add(m4);\n        Map<String,String> m5 = new TreeMap<String,String>();\n        m5.put(\"/\", \"item-2\");\n        l1.add(m5);\n        newMap.put(\"/Root/item\", l1);\n \n        // Put in using the XMLMap bracket Syntax - not a particularly good\n        // Way to represent multiple items - it is just here for completeness.\n        newMap.put(\"/Root/anns/ann[0]\",\"Root-ann[0]\");\n        newMap.put(\"/Root/anns/ann[1]\",\"Root-ann[1]\");\n        newMap.put(\"/Root/bobs/bob[0]/key\",\"Root-bobs-bob[0]-key\");\n        newMap.put(\"/Root/bobs/bob[0]/val\",\"Root-bobs-bob[0]-val\");\n        newMap.put(\"/Root/bobs/bob[1]/key\",\"Root-bobs-bob[1]-key\");\n        newMap.put(\"/Root/bobs/bob[1]/val\",\"Root-bobs-bob[1]-val\");\n   \n        // This is not allowed because maps cannot have duplicates \n /*       \n        Map<String,String> m6 = new TreeMap<String,String>();\n        m5.put(\"/two\", \"two-1\");\n        m5.put(\"/two\", \"two-2\");\n        newMap.put(\"/Root\", m6);\n  */      \n        \n        // Take the Map - turn it into XML and then parse the returned\n        // XML into a second map - take the second map and produce more XML\n        // If all goes well, the two generated blobs of XML should be the\n        // same.  If anything goes wrong - we re-do it with lots of debug\n        String complexXml = null;\n        boolean success = false;\n    \tDF = false;\n        try {\n            complexXml = XMLMap.getXML(newMap, true);\n            success = true;\n        } catch(Exception e) {\n        \tsuccess = false;\n        }\n        \n        // If we fail - do it again with deep levels of verbosity\n        if ( success ) {\n        \tunitTest(complexXml,false);\n        } else {\n        \tDF = true;\n        \tSystem.out.println(\"\\n MISMATCH AND/OR SOME ERROR HAS OCCURED - REDO in VERBODE MODE\");\n            System.out.println(\"Starting out newMap=\"+newMap); \n            complexXml = XMLMap.getXML(newMap, true);\n        \tunitTest(complexXml,false);\n        \tDF = false;\n        }\n    \t\n        // A different example - iterating through nested sets - demonstrating the short form\n        // of getSites() with the first parameter a string -the commented code below is the long form.\n        \n        // Map<String,Object> theMap = XMLMap.getFullMap(sitesText);\n        // List<Map<String,Object>> theList = XMLMap.getList(theMap, \"/sites/site\");\n        // for ( Map<String,Object> siteMap : theList) {\n        \n        // The short form using convenience method if you don't need the map for anything else\n        System.out.println(\"\\nParsing Sites Structure\");\n        for ( Map<String,Object> siteMap : XMLMap.getList(sitesText,\"/sites/site\")) {\n        \tSystem.out.println(\"Site=\"+siteMap);\n        \tSystem.out.println(\"Id=\"+XMLMap.getString(siteMap,\"/id\"));\n            for ( Map<String,Object> toolMap : XMLMap.getList(siteMap,\"/tools/tool\")) {\n        \t\tSystem.out.println(\"Tool=\"+toolMap);\n        \t\tSystem.out.println(\"ToolId=\"+XMLMap.getString(toolMap,\"/toolid\"));\n                for ( Map<String,Object> property : XMLMap.getList(toolMap, \"/properties/property\")) {\n        \t\t\tSystem.out.println(\"key=\"+XMLMap.getString(property, \"/key\"));\n        \t\t\tSystem.out.println(\"val=\"+XMLMap.getString(property, \"/val\"));\n        \t\t}\n        \t}\n\t    }\n        \n        // Lets parse some RSS as a final kind of easy but quite practical test\n        DF = false;\n        System.out.println(\"\\nParsing RSS Feed\");\n        // System.out.println(XMLMap.prettyPrint(rssText));\n        Map<String,Object> rssFullMap = XMLMap.getFullMap(rssText);\n        System.out.println(\"RSS Full Map\\n\"+rssFullMap);\n        System.out.println(\"Rss Version=\"+XMLMap.getString(rssFullMap,\"/rss!version\"));\n        System.out.println(\"Chan-desc=\"+XMLMap.getString(rssFullMap,\"/rss/channel/description\"));\n        System.out.println(\"Chan-title=\"+XMLMap.getString(rssFullMap,\"/rss/channel/title\"));\n        \n        Map<String,String> rssStringMap = XMLMap.flattenMap(rssFullMap);\n        System.out.println(\"RSS Flat String Only Map\\n\"+rssStringMap);\n        System.out.println(\"Rss Version=\"+rssStringMap.get(\"/rss!version\"));\n        System.out.println(\"Chan-desc=\"+rssStringMap.get(\"/rss/channel/description\"));\n        System.out.println(\"Chan-title=\"+rssStringMap.get(\"/rss/channel/title\"));\n\n        for ( Map<String,Object> rssItem : XMLMap.getList(rssFullMap,\"/rss/channel/item\")) {\n        \tSystem.out.println(\"=== Item ===\");\n        \tSystem.out.println(\" Item-title=\"+XMLMap.getString(rssItem, \"/title\"));\n        \tSystem.out.println(\" Item-description=\"+XMLMap.getString(rssItem, \"/description\"));\n        \tSystem.out.println(\" Item-link=\"+XMLMap.getString(rssItem, \"/link\"));\n        }\t\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@SuppressWarnings({ \"unused\", \"static-access\" })\n\tprivate static void recurse(Map<String, Object> tm, String path, Node parentNode, boolean doFull, int d) \n\t{\n\t\tdoDebug(d,\"> recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\n\t\tNodeList nl = parentNode.getChildNodes();\n\t\tNamedNodeMap nm = parentNode.getAttributes();\n\n\t\t// Count the TextNodes\n\t\tint nodeCount = 0;\n\t\tString value = null;\n\t\t\n\t\t// Insert the text node if we find one\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.TEXT_NODE) {\n\t\t\t\tvalue = node.getNodeValue();\n\t\t\t\tif ( value == null ) break;\n\t\t\t\tif ( value.trim().length() < 1 ) break;\n\t\t\t\t// doDebug(d,\"Adding path=\"+path+\" value=\"+node.getNodeValue());\n\t\t\t\ttm.put(path,node.getNodeValue());\n\t\t\t\tbreak;  // Only the first one\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Now loop through and add the attribute values \n\t\tif ( nm != null ) for (int i = 0; i< nm.getLength(); i++ ) {\n\t\t\tNode node = nm.item(i);\n\t\t\tif (node.getNodeType() == node.ATTRIBUTE_NODE) {\n\t\t\t\tString name = node.getNodeName();\n\t\t\t\tvalue = node.getNodeValue();\n\t\t\t\t// doDebug(d,\"ATTR \"+path+\"(\"+name+\") = \"+node.getNodeValue());\n\t\t\t\tif ( name == null || name.trim().length() < 1 || \n\t\t\t\t\t\tvalue == null || value.trim().length() < 1 ) continue;  \n\n\t\t\t\tString newPath = path+\"!\"+name;\n\t\t\t\ttm.put(newPath,value);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If we are not doing the full DOM - we only traverse the first child\n\t\t// with the same name - so we use a set to record which nodes \n\t\t// we have gone down.\n\t\tif ( ! doFull ) {\n\t\t\t// Now descend the tree to the next level deeper !!\n\t\t\tSet <String> done = new HashSet<String>();\n\t\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node.getNodeType() == node.ELEMENT_NODE && ( ! done.contains(node.getNodeName())) ) {\n\t\t\t\t\tdoDebug(d,\"Going down the rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\trecurse(tm, addSlash(path)+node.getNodeName(),node,doFull,d);\n\t\t\t\t\tdoDebug(d,\"Back from the rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\tdone.add(node.getNodeName());\t\n\t\t\t\t}\n\t\t\t}\n\t\t\td--;\n\t\t\tdoDebug(d,\"< recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\t\treturn;\n\t\t}\n\n\t\t// If we are going to do the full expansion - we need to know when \n\t\t// There are more than one child with the same name.  If there are more\n\t\t// One child, we make list of Maps.\n\n\t\tMap<String,Integer> childMap = new TreeMap<String,Integer>();\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE ) {\n\t\t\t\tInteger count = childMap.get(node.getNodeName());\n\t\t\t\tif ( count == null ) count = new Integer(0);\n\t\t\t\tcount = count + 1;\n\t\t\t\t// Insert or Replace\n\t\t\t\tchildMap.put(node.getNodeName(), count);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( childMap.size() < 1 ) return;\n\t\t\n\t\t// Now go through the children nodes and make a List of Maps\n\t\tIterator<String> iter = childMap.keySet().iterator();\n\t\tMap<String,List<Map<String,Object>>> nodeMap = new TreeMap<String,List<Map<String,Object>>>();\n\t\twhile ( iter.hasNext() ) {\n\t\t\tString nextChild = iter.next();\n\t\t\tif ( nextChild == null ) continue;\n\t\t\tInteger count = childMap.get(nextChild);\n\t\t\tif ( count == null ) continue;\n\t\t\tif ( count < 2 ) continue;\n\t\t\tdoDebug(d,\"Making a List for \"+nextChild);\n\t\t\tList<Map<String,Object>> newList = new ArrayList<Map<String,Object>>();\n\t\t\tnodeMap.put(nextChild,newList);\n\t\t}\n\t\t\n\t\t// Now descend the tree to the next level deeper !!\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE ) {\n\t\t\t\tString childName = node.getNodeName();\n\t\t\t\tif ( childName == null ) continue;\n\t\t\t\tList<Map<String,Object>> mapList = nodeMap.get(childName);\n\t\t\t\tif ( mapList == null ) {\n\t\t\t\t\tdoDebug(d,\"Going down the single rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\trecurse(tm, addSlash(path)+node.getNodeName(),node,doFull,d);\n\t\t\t\t\tdoDebug(d,\"Back from the single rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t} else {\n\t\t\t\t\tdoDebug(d,\"Going down the multi rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\tMap<String,Object> newMap = new TreeMap<String,Object>();\n\t\t\t\t\trecurse(newMap,\"/\",node,doFull,d);\n\t\t\t\t\tdoDebug(d,\"Back from the multi rabbit hole path=\"+path+\" node=\"+node.getNodeName()+\" map=\"+newMap);\n\t\t\t\t\tif ( newMap.size() > 0 ) mapList.add(newMap);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Now append the multi-node maps to our current map\n\t\tIterator<String> iter2 = nodeMap.keySet().iterator();\n\t\twhile ( iter2.hasNext() ) {\n\t\t\tString nextChild = iter2.next();\n\t\t\tif ( nextChild == null ) continue;\n\t\t\tList<Map<String,Object>> newList = nodeMap.get(nextChild);\n\t\t\tif ( newList == null ) continue;\n\t\t\tif ( newList.size() < 1 ) continue;\n\t\t\tdoDebug(d,\"Adding sub-map name=\"+nextChild+\" list=\"+newList);\n\t\t\ttm.put(path+\"/\"+nextChild, newList);\n\t\t}\n\t\td--;\n        doDebug(d,\"< recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t}","id":21654,"modified_method":"@SuppressWarnings({ \"unused\", \"static-access\" })\n\tprivate static void recurse(Map<String, Object> tm, String path, Node parentNode, boolean doFull, int d) \n\t{\n\t\tif ( DF ) doDebug(d,\"> recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\n\t\tNodeList nl = parentNode.getChildNodes();\n\t\tNamedNodeMap nm = parentNode.getAttributes();\n\n\t\t// Count the TextNodes\n\t\tint nodeCount = 0;\n\t\tString value = null;\n\t\t\n\t\t// Insert the text node if we find one\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.TEXT_NODE) {\n\t\t\t\tvalue = node.getNodeValue();\n\t\t\t\tif ( value == null ) break;\n\t\t\t\tif ( value.trim().length() < 1 ) break;\n\t\t\t\t// doDebug(d,\"Adding path=\"+path+\" value=\"+node.getNodeValue());\n\t\t\t\ttm.put(path,node.getNodeValue());\n\t\t\t\tbreak;  // Only the first one\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Now loop through and add the attribute values \n\t\tif ( nm != null ) for (int i = 0; i< nm.getLength(); i++ ) {\n\t\t\tNode node = nm.item(i);\n\t\t\tif (node.getNodeType() == node.ATTRIBUTE_NODE) {\n\t\t\t\tString name = node.getNodeName();\n\t\t\t\tvalue = node.getNodeValue();\n\t\t\t\t// doDebug(d,\"ATTR \"+path+\"(\"+name+\") = \"+node.getNodeValue());\n\t\t\t\tif ( name == null || name.trim().length() < 1 || \n\t\t\t\t\t\tvalue == null || value.trim().length() < 1 ) continue;  \n\n\t\t\t\tString newPath = path+\"!\"+name;\n\t\t\t\ttm.put(newPath,value);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If we are not doing the full DOM - we only traverse the first child\n\t\t// with the same name - so we use a set to record which nodes \n\t\t// we have gone down.\n\t\tif ( ! doFull ) {\n\t\t\t// Now descend the tree to the next level deeper !!\n\t\t\tSet <String> done = new HashSet<String>();\n\t\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node.getNodeType() == node.ELEMENT_NODE && ( ! done.contains(node.getNodeName())) ) {\n\t\t\t\t\tif ( DF ) doDebug(d,\"Going down the rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\trecurse(tm, addSlash(path)+node.getNodeName(),node,doFull,d);\n\t\t\t\t\tif ( DF ) doDebug(d,\"Back from the rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\tdone.add(node.getNodeName());\t\n\t\t\t\t}\n\t\t\t}\n\t\t\td--;\n\t\t\tif ( DF ) doDebug(d,\"< recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t\t\treturn;\n\t\t}\n\n\t\t// If we are going to do the full expansion - we need to know when \n\t\t// There are more than one child with the same name.  If there are more\n\t\t// One child, we make list of Maps.\n\n\t\tMap<String,Integer> childMap = new TreeMap<String,Integer>();\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE ) {\n\t\t\t\tInteger count = childMap.get(node.getNodeName());\n\t\t\t\tif ( count == null ) count = new Integer(0);\n\t\t\t\tcount = count + 1;\n\t\t\t\t// Insert or Replace\n\t\t\t\tchildMap.put(node.getNodeName(), count);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( childMap.size() < 1 ) return;\n\t\t\n\t\t// Now go through the children nodes and make a List of Maps\n\t\tIterator<String> iter = childMap.keySet().iterator();\n\t\tMap<String,List<Map<String,Object>>> nodeMap = new TreeMap<String,List<Map<String,Object>>>();\n\t\twhile ( iter.hasNext() ) {\n\t\t\tString nextChild = iter.next();\n\t\t\tif ( nextChild == null ) continue;\n\t\t\tInteger count = childMap.get(nextChild);\n\t\t\tif ( count == null ) continue;\n\t\t\tif ( count < 2 ) continue;\n\t\t\tif ( DF ) doDebug(d,\"Making a List for \"+nextChild);\n\t\t\tList<Map<String,Object>> newList = new ArrayList<Map<String,Object>>();\n\t\t\tnodeMap.put(nextChild,newList);\n\t\t}\n\t\t\n\t\t// Now descend the tree to the next level deeper !!\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE ) {\n\t\t\t\tString childName = node.getNodeName();\n\t\t\t\tif ( childName == null ) continue;\n\t\t\t\tList<Map<String,Object>> mapList = nodeMap.get(childName);\n\t\t\t\tif ( mapList == null ) {\n\t\t\t\t\tif ( DF ) doDebug(d,\"Going down the single rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\trecurse(tm, addSlash(path)+node.getNodeName(),node,doFull,d);\n\t\t\t\t\tif ( DF ) doDebug(d,\"Back from the single rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t} else {\n\t\t\t\t\tif ( DF ) doDebug(d,\"Going down the multi rabbit hole path=\"+path+\" node=\"+node.getNodeName());\n\t\t\t\t\tMap<String,Object> newMap = new TreeMap<String,Object>();\n\t\t\t\t\trecurse(newMap,\"/\",node,doFull,d);\n\t\t\t\t\tif ( DF ) doDebug(d,\"Back from the multi rabbit hole path=\"+path+\" node=\"+node.getNodeName()+\" map=\"+newMap);\n\t\t\t\t\tif ( newMap.size() > 0 ) mapList.add(newMap);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Now append the multi-node maps to our current map\n\t\tIterator<String> iter2 = nodeMap.keySet().iterator();\n\t\twhile ( iter2.hasNext() ) {\n\t\t\tString nextChild = iter2.next();\n\t\t\tif ( nextChild == null ) continue;\n\t\t\tList<Map<String,Object>> newList = nodeMap.get(nextChild);\n\t\t\tif ( newList == null ) continue;\n\t\t\tif ( newList.size() < 1 ) continue;\n\t\t\tif ( DF ) doDebug(d,\"Adding sub-map name=\"+nextChild+\" list=\"+newList);\n\t\t\ttm.put(path+\"/\"+nextChild, newList);\n\t\t}\n\t\td--;\n        if ( DF ) doDebug(d,\"< recurse path=\"+path+\" parentNode=\"+ nodeToString(parentNode));\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private static void iterateMap(Document document, Node parentNode, Map<?, ?> tm, int d)\n\t{\n\t\tdoDebug(d,\"> IterateMap parentNode= \"+ nodeToString(parentNode));\n\t\td++;\n\t\tIterator<?> iter = tm.keySet().iterator();\n\t\twhile( iter.hasNext() ) {\n\t\t\tString key = (String) iter.next();\n\t\t\tif ( key == null ) continue;\n\t\t\tif ( ! key.startsWith(\"/\") ) continue;  // Skip\n\t\t\tObject obj = tm.get(key);\n\t\t\tif ( obj == null ) {\n\t\t\t\tcontinue;\n\t\t\t} if ( obj instanceof String ) {\n\t\t\t\tstoreInDom(document, parentNode, key, (String) obj, 0, d);\n\t\t\t} else if ( obj instanceof String [] ) {\n\t\t\t\tString [] strArray = (String []) obj;\n\t\t\t\tdoDebug(d,\"Looping through an array of length \"+strArray.length);\n\t\t\t\tfor(int i=0; i < strArray.length; i++ ) {\n\t\t\t\t\tstoreInDom(document, parentNode, key, strArray[i], i, d);\n\t\t\t\t} \n\t\t\t} else if ( obj instanceof Map ) {\n\t\t\t\tMap<?, ?> subMap = (Map<?, ?>) obj;\n\t\t\t\tNode startNode = getNodeAtPath(document, parentNode, key, 0, d);\n\t\t\t\tdoDebug(d,\"descending into Map path=\"+key+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\titerateMap(document, startNode, subMap, d);\n\t\t\t\tdoDebug(d,\"back from descent Map path=\"+key+\" startNode=\"+ nodeToString(startNode));\n\t\t\t} else if ( obj instanceof List ) {\n\t\t\t\tList<?> lst = (List<?>) obj;\n\t\t\t\tdoDebug(d,\"Have a list that is this long \"+lst.size());\n\t\t\t\tIterator<?> listIter = lst.iterator();\n\t\t\t\tint newPos = 0;\n\t\t\t\twhile ( listIter.hasNext() ) {\n\t\t\t\t\tObject listObj = listIter.next();\n\t\t\t\t\tdoDebug(d,\"Processing List element@\"+newPos+\" \"+listObj.getClass().getName());\n\t\t\t\t\tif ( listObj instanceof String ) {\n\t\t\t\t\t\tstoreInDom(document, parentNode, key, (String) listObj, newPos, d);\n\t\t\t\t\t\tnewPos++;\n\t\t\t\t\t} if ( listObj instanceof Map ) {\n\t\t\t\t\t\tMap<?, ?> subMap = (Map<?, ?>) listObj;\n\t\t\t\t\t\tdoDebug(d,\"Retrieving key from  List-Map path=\"+key+\"@\"+newPos);\n\t\t\t\t\t\tNode startNode = getNodeAtPath(document, parentNode, key, newPos, d);\n\t\t\t\t\t\tdoDebug(d,\"descending into List-Map path=\"+key+\"@\"+newPos+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\t\t\titerateMap(document, startNode, subMap, d);\n\t\t\t\t\t\tdoDebug(d,\"back from descent List-Map path=\"+key+\"@\"+newPos+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\t\t\tnewPos++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"XMLMap Encountered an object of type \"+obj.getClass().getName()+\" in a List which should contain only Map objects\");\n\t\t\t\t\t}\n\t\t\t\t}\n \t\t\t} else {\n\t\t\t\tdoDebug(d,\"Found a \"+obj.getClass().getName()+\" do not know how to iterate.\");\n\t\t\t}\n\t\t}\n\t\td--;\n\t\tdoDebug(d,\"< IterateMap parentNode = \"+ nodeToString(parentNode));\n\t}","id":21655,"modified_method":"private static void iterateMap(Document document, Node parentNode, Map<?, ?> tm, int d)\n\t{\n\t\tif ( DF ) doDebug(d,\"> IterateMap parentNode= \"+ nodeToString(parentNode));\n\t\td++;\n\t\tIterator<?> iter = tm.keySet().iterator();\n\t\twhile( iter.hasNext() ) {\n\t\t\tString key = (String) iter.next();\n\t\t\tif ( key == null ) continue;\n\t\t\tif ( ! key.startsWith(\"/\") ) continue;  // Skip\n\t\t\tObject obj = tm.get(key);\n\t\t\tif ( obj == null ) {\n\t\t\t\tcontinue;\n\t\t\t} if ( obj instanceof String ) {\n\t\t\t\tstoreInDom(document, parentNode, key, (String) obj, 0, d);\n\t\t\t} else if ( obj instanceof String [] ) {\n\t\t\t\tString [] strArray = (String []) obj;\n\t\t\t\tif ( DF ) doDebug(d,\"Looping through an array of length \"+strArray.length);\n\t\t\t\tfor(int i=0; i < strArray.length; i++ ) {\n\t\t\t\t\tstoreInDom(document, parentNode, key, strArray[i], i, d);\n\t\t\t\t} \n\t\t\t} else if ( obj instanceof Map ) {\n\t\t\t\tMap<?, ?> subMap = (Map<?, ?>) obj;\n\t\t\t\tNode startNode = getNodeAtPath(document, parentNode, key, 0, d);\n\t\t\t\tif ( DF ) doDebug(d,\"descending into Map path=\"+key+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\titerateMap(document, startNode, subMap, d);\n\t\t\t\tif ( DF ) doDebug(d,\"back from descent Map path=\"+key+\" startNode=\"+ nodeToString(startNode));\n\t\t\t} else if ( obj instanceof List ) {\n\t\t\t\tList<?> lst = (List<?>) obj;\n\t\t\t\tif ( DF ) doDebug(d,\"Have a list that is this long \"+lst.size());\n\t\t\t\tIterator<?> listIter = lst.iterator();\n\t\t\t\tint newPos = 0;\n\t\t\t\twhile ( listIter.hasNext() ) {\n\t\t\t\t\tObject listObj = listIter.next();\n\t\t\t\t\tif ( DF ) doDebug(d,\"Processing List element@\"+newPos+\" \"+listObj.getClass().getName());\n\t\t\t\t\tif ( listObj instanceof String ) {\n\t\t\t\t\t\tstoreInDom(document, parentNode, key, (String) listObj, newPos, d);\n\t\t\t\t\t\tnewPos++;\n\t\t\t\t\t} if ( listObj instanceof Map ) {\n\t\t\t\t\t\tMap<?, ?> subMap = (Map<?, ?>) listObj;\n\t\t\t\t\t\tif ( DF ) doDebug(d,\"Retrieving key from  List-Map path=\"+key+\"@\"+newPos);\n\t\t\t\t\t\tNode startNode = getNodeAtPath(document, parentNode, key, newPos, d);\n\t\t\t\t\t\tif ( DF ) doDebug(d,\"descending into List-Map path=\"+key+\"@\"+newPos+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\t\t\titerateMap(document, startNode, subMap, d);\n\t\t\t\t\t\tif ( DF ) doDebug(d,\"back from descent List-Map path=\"+key+\"@\"+newPos+\" startNode=\"+ nodeToString(startNode));\n\t\t\t\t\t\tnewPos++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"XMLMap Encountered an object of type \"+obj.getClass().getName()+\" in a List which should contain only Map objects\");\n\t\t\t\t\t}\n\t\t\t\t}\n \t\t\t} else {\n\t\t\t\tif ( DF ) doDebug(d,\"Found a \"+obj.getClass().getName()+\" do not know how to iterate.\");\n\t\t\t}\n\t\t}\n\t\td--;\n\t\tif ( DF ) doDebug(d,\"< IterateMap parentNode = \"+ nodeToString(parentNode));\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@SuppressWarnings(\"static-access\")\n\tprivate static Node getOrAddChildNode(Document doc, Node parentNode, String nodeName,int whichNode, int d)\n\t{\n\t\tdoDebug(d,\"> getOrAddChildNode name=\"+nodeName+\"@\"+whichNode+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\t\tif ( nodeName == null || parentNode == null) return null;\n\n\t\t// Check to see if we are somewhere in an index\n\t\tint begpos = nodeName.indexOf('[');\n\t\tint endpos = nodeName.indexOf(']');\n\t\t// doDebug(d,\"Looking for bracket ipos=\"+begpos+\" endpos=\"+endpos);\n\t\tif ( begpos > 0 && endpos > begpos && endpos < nodeName.length() ) {\n\t\t\tString indStr = nodeName.substring(begpos+1,endpos);\n\t\t\tdoDebug(d,\"Index String = \"+ indStr);\n\t\t\tnodeName = nodeName.substring(0,begpos);\n\t\t\tdoDebug(d,\"New Nodename=\"+nodeName);\n\t\t\tInteger iVal = new Integer(indStr); \n\t\t\tdoDebug(d,\"Integer = \"+iVal);\n\t\t\twhichNode = iVal;\n\t\t}\n\t\t\n\t\tNodeList nl = parentNode.getChildNodes();\n\t\tint foundNodes = -1;\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\t// doDebug(d,\"length= \" +nl.getLength()+ \" i=\"+i+\" NT=\"+node.getNodeType());\n\t\t\t// doDebug(d,\"searching nn=\"+nodeName+\" nc=\"+node.getNodeName());\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE) {\n\t\t\t\tif ( nodeName.equals(node.getNodeName()) ) {\n\t\t\t\t\tfoundNodes++;\n\t\t\t\t\td--;\n\t\t\t\t\tdoDebug(d,\"< getOrAddChildNode found name=\"+ nodeToString(node));\n\t\t\t\t\tdoDebug(d,\"foundNodes = \"+foundNodes+\" looking for node=\"+whichNode);\n\t\t\t\t\tif ( foundNodes >= whichNode ) return node;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tElement newNode = null;\n\t\twhile ( foundNodes < whichNode ) {\n\t\t\tfoundNodes++;\n\t\t\tdoDebug(d,\"Adding node at position \" + foundNodes + \" moving toward \" + whichNode);\n\t\t\tif ( nodeName == null ) continue;\n\t\t\tnewNode = doc.createElement(nodeName);\n\t\t\tdoDebug(d,\"Adding \"+nodeName+\" at \"+ nodeToString(parentNode)+\" in \"+doc);\n\t\t\tparentNode.appendChild(newNode);\n\t\t\tdoDebug(d,\"xml=\"+documentToString(doc,false));\n\t\t\tdoDebug(d,\"getOrAddChildNode added newnode=\"+ nodeToString(newNode));\n\t\t}\n\t\td--;\n\t\tdoDebug(d,\"< getOrAddChildNode added newnode=\"+ nodeToString(newNode));\n\t\treturn newNode;\n\t}","id":21656,"modified_method":"@SuppressWarnings(\"static-access\")\n\tprivate static Node getOrAddChildNode(Document doc, Node parentNode, String nodeName,int whichNode, int d)\n\t{\n\t\tif ( DF ) doDebug(d,\"> getOrAddChildNode name=\"+nodeName+\"@\"+whichNode+\" parentNode=\"+ nodeToString(parentNode));\n\t\td++;\n\t\tif ( nodeName == null || parentNode == null) return null;\n\n\t\t// Check to see if we are somewhere in an index\n\t\tint begpos = nodeName.indexOf('[');\n\t\tint endpos = nodeName.indexOf(']');\n\t\t// doDebug(d,\"Looking for bracket ipos=\"+begpos+\" endpos=\"+endpos);\n\t\tif ( begpos > 0 && endpos > begpos && endpos < nodeName.length() ) {\n\t\t\tString indStr = nodeName.substring(begpos+1,endpos);\n\t\t\tif ( DF ) doDebug(d,\"Index String = \"+ indStr);\n\t\t\tnodeName = nodeName.substring(0,begpos);\n\t\t\tif ( DF ) doDebug(d,\"New Nodename=\"+nodeName);\n\t\t\tInteger iVal = new Integer(indStr); \n\t\t\tif ( DF ) doDebug(d,\"Integer = \"+iVal);\n\t\t\twhichNode = iVal;\n\t\t}\n\t\t\n\t\tNodeList nl = parentNode.getChildNodes();\n\t\tint foundNodes = -1;\n\t\tif ( nl != null ) for (int i = 0; i< nl.getLength(); i++ ) {\n\t\t\tNode node = nl.item(i);\n\t\t\t// doDebug(d,\"length= \" +nl.getLength()+ \" i=\"+i+\" NT=\"+node.getNodeType());\n\t\t\t// doDebug(d,\"searching nn=\"+nodeName+\" nc=\"+node.getNodeName());\n\t\t\tif (node.getNodeType() == node.ELEMENT_NODE) {\n\t\t\t\tif ( nodeName.equals(node.getNodeName()) ) {\n\t\t\t\t\tfoundNodes++;\n\t\t\t\t\td--;\n\t\t\t\t\tif ( DF ) doDebug(d,\"< getOrAddChildNode found name=\"+ nodeToString(node));\n\t\t\t\t\tif ( DF ) doDebug(d,\"foundNodes = \"+foundNodes+\" looking for node=\"+whichNode);\n\t\t\t\t\tif ( foundNodes >= whichNode ) return node;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tElement newNode = null;\n\t\twhile ( foundNodes < whichNode ) {\n\t\t\tfoundNodes++;\n\t\t\tif ( DF ) doDebug(d,\"Adding node at position \" + foundNodes + \" moving toward \" + whichNode);\n\t\t\tif ( nodeName == null ) continue;\n\t\t\tnewNode = doc.createElement(nodeName);\n\t\t\tif ( DF ) doDebug(d,\"Adding \"+nodeName+\" at \"+ nodeToString(parentNode)+\" in \"+doc);\n\t\t\tparentNode.appendChild(newNode);\n\t\t\tif ( DF ) doDebug(d,\"xml=\"+documentToString(doc,false));\n\t\t\tif ( DF ) doDebug(d,\"getOrAddChildNode added newnode=\"+ nodeToString(newNode));\n\t\t}\n\t\td--;\n\t\tif ( DF ) doDebug(d,\"< getOrAddChildNode added newnode=\"+ nodeToString(newNode));\n\t\treturn newNode;\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private static void doDebug(int d, String str) {\n\t\tif ( ! debugFlag ) return;\n \t\tfor(int i=0; i<d;i++) System.out.print(\" \");\n\t\tSystem.out.println(str);\n\t}","id":21657,"modified_method":"private static void doDebug(int d, String str) {\n\t\tif ( ! DF ) return;\n \t\tfor(int i=0; i<d;i++) System.out.print(\" \");\n\t\tSystem.out.println(str);\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private static void storeInDom(Document document, Node parentNode, String key, String value, int nodePos, int d)\n\t{\n\t\tdoDebug(d,\"> storeInDom\"+key+\"@\"+ nodePos + \" = \" + value + \" parent=\"+ nodeToString(parentNode));\n\t\td++;\n\t\tif ( document == null || key == null || value == null ) return;\n\t\tif ( parentNode == null ) parentNode = document;\n\t\tdoDebug(d,\"parentNode I=\"+ nodeToString(parentNode));\n\n\t\tString [] newPath = key.split(\"/\");\n\t\tdoDebug(d,\"newPath = \"+outStringArray(newPath));\n\t\tString nodeAttr = null;\n\t\tfor ( int i=1; i< newPath.length; i++ )\n\t\t{\n\t\t\tString nodeName = newPath[i];\n\t\t\tif ( i == newPath.length-1 ) {\n\t\t\t\t// doDebug(d,\"Splitting !=\"+nodeName);\n\t\t\t\t// check to see if we have a nodename=attributename\n\t\t\t\tString [] nodeSplit = nodeName.split(\"!\");\n\t\t\t\tif ( nodeSplit.length > 1 ) {\n\t\t\t\t\tnodeName = nodeSplit[0];\n\t\t\t\t\tnodeAttr = nodeSplit[1];\n\t\t\t\t\t// doDebug(d,\"new nodeName=\"+nodeName+\" nodeAttr=\"+nodeAttr);\n\t\t\t\t}\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, nodePos, d);\n\t\t\t} else {\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, 0, d);\n\t\t\t}\n\t\t}\n\t\t// doDebug(d,\"parentNode after=\"+ nodeToString(parentNode));\n\n\t\tif ( nodeAttr != null )\n\t\t{\n\t\t\tif ( value!= null && parentNode instanceof Element ) \n\t\t\t{\n\t\t\t\tElement element = (Element) parentNode;\n\t\t\t\t// doDebug(d,\"Adding an attribute \"+nodeAttr);\n\t\t\t\telement.setAttribute(nodeAttr,value);\n\t\t\t}\n\t\t}\n\t\telse if ( value != null ) \n\t\t{\n\t\t\tText newNode = document.createTextNode(value);\n\t\t\tparentNode.appendChild(newNode);\n\t\t}\n\t\td--;\n\t\t// doDebug(d,\"xml=\"+documentToString(document,false));\n\t\t// doDebug(d,\"< storeInDom\"+key+\" = \" + value);\n\t}","id":21658,"modified_method":"private static void storeInDom(Document document, Node parentNode, String key, String value, int nodePos, int d)\n\t{\n\t\tif ( DF ) doDebug(d,\"> storeInDom\"+key+\"@\"+ nodePos + \" = \" + value + \" parent=\"+ nodeToString(parentNode));\n\t\td++;\n\t\tif ( document == null || key == null || value == null ) return;\n\t\tif ( parentNode == null ) parentNode = document;\n\t\tif ( DF ) doDebug(d,\"parentNode I=\"+ nodeToString(parentNode));\n\n\t\tString [] newPath = key.split(\"/\");\n\t\tif ( DF ) doDebug(d,\"newPath = \"+outStringArray(newPath));\n\t\tString nodeAttr = null;\n\t\tfor ( int i=1; i< newPath.length; i++ )\n\t\t{\n\t\t\tString nodeName = newPath[i];\n\t\t\tif ( i == newPath.length-1 ) {\n\t\t\t\t// doDebug(d,\"Splitting !=\"+nodeName);\n\t\t\t\t// check to see if we have a nodename=attributename\n\t\t\t\tString [] nodeSplit = nodeName.split(\"!\");\n\t\t\t\tif ( nodeSplit.length > 1 ) {\n\t\t\t\t\tnodeName = nodeSplit[0];\n\t\t\t\t\tnodeAttr = nodeSplit[1];\n\t\t\t\t\t// doDebug(d,\"new nodeName=\"+nodeName+\" nodeAttr=\"+nodeAttr);\n\t\t\t\t}\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, nodePos, d);\n\t\t\t} else {\n\t\t\t\tparentNode = getOrAddChildNode(document, parentNode, nodeName, 0, d);\n\t\t\t}\n\t\t}\n\t\t// doDebug(d,\"parentNode after=\"+ nodeToString(parentNode));\n\n\t\tif ( nodeAttr != null )\n\t\t{\n\t\t\tif ( value!= null && parentNode instanceof Element ) \n\t\t\t{\n\t\t\t\tElement element = (Element) parentNode;\n\t\t\t\t// doDebug(d,\"Adding an attribute \"+nodeAttr);\n\t\t\t\telement.setAttribute(nodeAttr,value);\n\t\t\t}\n\t\t}\n\t\telse if ( value != null ) \n\t\t{\n\t\t\tText newNode = document.createTextNode(value);\n\t\t\tparentNode.appendChild(newNode);\n\t\t}\n\t\td--;\n\t\t// doDebug(d,\"xml=\"+documentToString(document,false));\n\t\t// doDebug(d,\"< storeInDom\"+key+\" = \" + value);\n\t}","commit_id":"f4f109ae911c7d7fdc1527b133da6e2df028af71","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void copyResources( File sourceDirectory, File webappDirectory, String includes, String excludes,\n                               String webXml )\n        throws IOException\n    {\n        if ( sourceDirectory != webappDirectory )\n        {\n            getLog().info( \"Copy webapp resources to \" + webappDirectory.getAbsolutePath() );\n\n            if ( warSourceDirectory.exists() )\n            {\n                //TODO : Use includes and excludes\n                FileUtils.copyDirectoryStructure( sourceDirectory, webappDirectory );\n            }\n\n            if ( webXml != null && !\"\".equals( webXml ) )\n            {\n                FileUtils.copyFileToDirectory( new File( webXml ), new File( webappDirectory, WEB_INF ) );\n            }\n        }\n    }","id":21659,"modified_method":"public void copyResources( File sourceDirectory, File webappDirectory, String includes, String excludes,\n                               String webXml )\n        throws IOException\n    {\n        if ( sourceDirectory != webappDirectory )\n        {\n            getLog().info( \"Copy webapp resources to \" + webappDirectory.getAbsolutePath() );\n\n            if ( new File( warSourceDirectory ).exists() )\n            {\n                //TODO : Use includes and excludes\n                FileUtils.copyDirectoryStructure( sourceDirectory, webappDirectory );\n            }\n\n            if ( webXml != null && !\"\".equals( webXml ) )\n            {\n                FileUtils.copyFileToDirectory( new File( webXml ), new File( webappDirectory, WEB_INF ) );\n            }\n        }\n    }","commit_id":"fd72e4294cce2dabf51f37a02072e7ca49404eaf","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void generateExplodedWebapp()\n        throws IOException\n    {\n        webappDirectory.mkdirs();\n\n        File webinfDir = new File( webappDirectory, WEB_INF );\n\n        webinfDir.mkdirs();\n\n        copyResources( warSourceDirectory, webappDirectory, warSourceIncludes, warSourceExcludes, webXml );\n\n        buildWebapp( project );\n    }","id":21660,"modified_method":"public void generateExplodedWebapp()\n        throws IOException\n    {\n        File webappDirectory = new File( this.webappDirectory );\n        webappDirectory.mkdirs();\n\n        File webinfDir = new File( webappDirectory, WEB_INF );\n\n        webinfDir.mkdirs();\n\n        copyResources( new File( warSourceDirectory ), webappDirectory, warSourceIncludes, warSourceExcludes, webXml );\n\n        buildWebapp( project );\n    }","commit_id":"fd72e4294cce2dabf51f37a02072e7ca49404eaf","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     *\n     */\n    public void buildWebapp( MavenProject project )\n        throws IOException\n    {\n        getLog().info( \"Assembling webapp \" + project.getArtifactId() + \" in \" + webappDirectory.getAbsolutePath() );\n\n        File libDirectory = new File( webappDirectory, WEB_INF + \"/lib\" );\n\n        File tldDirectory = new File( webappDirectory, WEB_INF + \"/tld\" );\n\n        File webappClassesDirectory = new File( webappDirectory, WEB_INF + \"/classes\" );\n\n        if ( classesDirectory.exists() )\n        {\n            FileUtils.copyDirectoryStructure( classesDirectory, webappClassesDirectory );\n        }\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )\n        {\n            Artifact artifact = (Artifact) iter.next();\n\n            if ( \"jar\".equals( artifact.getType() ) && Artifact.SCOPE_RUNTIME.equals( artifact.getScope() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), libDirectory );\n            }\n            if ( \"tld\".equals( artifact.getType() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), tldDirectory );\n            }\n        }\n    }","id":21661,"modified_method":"/**\n     *\n     */\n    public void buildWebapp( MavenProject project )\n        throws IOException\n    {\n        getLog().info( \"Assembling webapp \" + project.getArtifactId() + \" in \" + webappDirectory );\n\n        File libDirectory = new File( webappDirectory, WEB_INF + \"/lib\" );\n\n        File tldDirectory = new File( webappDirectory, WEB_INF + \"/tld\" );\n\n        File webappClassesDirectory = new File( webappDirectory, WEB_INF + \"/classes\" );\n\n        File classesDirectory = new File( this.classesDirectory );\n        if ( classesDirectory.exists() )\n        {\n            FileUtils.copyDirectoryStructure( classesDirectory, webappClassesDirectory );\n        }\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )\n        {\n            Artifact artifact = (Artifact) iter.next();\n\n            if ( \"jar\".equals( artifact.getType() ) && Artifact.SCOPE_RUNTIME.equals( artifact.getScope() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), libDirectory );\n            }\n            if ( \"tld\".equals( artifact.getType() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), tldDirectory );\n            }\n        }\n    }","commit_id":"fd72e4294cce2dabf51f37a02072e7ca49404eaf","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void generateExplodedWebapp()\n        throws IOException\n    {\n        webappDirectory.mkdirs();\n\n        File webinfDir = new File( webappDirectory, WEB_INF );\n\n        webinfDir.mkdirs();\n\n        copyResources( warSourceDirectory, webappDirectory, warSourceIncludes, warSourceExcludes, webXml );\n\n        buildWebapp( project );\n    }","id":21662,"modified_method":"public void generateExplodedWebapp()\n        throws IOException\n    {\n        File webappDirectory = new File( this.webappDirectory );\n        webappDirectory.mkdirs();\n\n        File webinfDir = new File( webappDirectory, WEB_INF );\n\n        webinfDir.mkdirs();\n\n        copyResources( new File( warSourceDirectory ), webappDirectory, warSourceIncludes, warSourceExcludes, webXml );\n\n        buildWebapp( project );\n    }","commit_id":"092c2f75cfc22f6d4083a22eabc39ae581937d4a","url":"https://github.com/apache/maven"},{"original_method":"/**\n     *\n     */\n    public void buildWebapp( MavenProject project )\n        throws IOException\n    {\n        getLog().info( \"Assembling webapp \" + project.getArtifactId() + \" in \" + webappDirectory.getAbsolutePath() );\n\n        File libDirectory = new File( webappDirectory, WEB_INF + \"/lib\" );\n\n        File tldDirectory = new File( webappDirectory, WEB_INF + \"/tld\" );\n\n        File webappClassesDirectory = new File( webappDirectory, WEB_INF + \"/classes\" );\n\n        if ( classesDirectory.exists() )\n        {\n            FileUtils.copyDirectoryStructure( classesDirectory, webappClassesDirectory );\n        }\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )\n        {\n            Artifact artifact = (Artifact) iter.next();\n\n            if ( \"jar\".equals( artifact.getType() ) && Artifact.SCOPE_RUNTIME.equals( artifact.getScope() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), libDirectory );\n            }\n            if ( \"tld\".equals( artifact.getType() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), tldDirectory );\n            }\n        }\n    }","id":21663,"modified_method":"/**\n     *\n     */\n    public void buildWebapp( MavenProject project )\n        throws IOException\n    {\n        getLog().info( \"Assembling webapp \" + project.getArtifactId() + \" in \" + webappDirectory );\n\n        File libDirectory = new File( webappDirectory, WEB_INF + \"/lib\" );\n\n        File tldDirectory = new File( webappDirectory, WEB_INF + \"/tld\" );\n\n        File webappClassesDirectory = new File( webappDirectory, WEB_INF + \"/classes\" );\n\n        File classesDirectory = new File( this.classesDirectory );\n        if ( classesDirectory.exists() )\n        {\n            FileUtils.copyDirectoryStructure( classesDirectory, webappClassesDirectory );\n        }\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )\n        {\n            Artifact artifact = (Artifact) iter.next();\n\n            if ( \"jar\".equals( artifact.getType() ) && Artifact.SCOPE_RUNTIME.equals( artifact.getScope() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), libDirectory );\n            }\n            if ( \"tld\".equals( artifact.getType() ) )\n            {\n                FileUtils.copyFileToDirectory( artifact.getFile(), tldDirectory );\n            }\n        }\n    }","commit_id":"092c2f75cfc22f6d4083a22eabc39ae581937d4a","url":"https://github.com/apache/maven"},{"original_method":"public void copyResources( File sourceDirectory, File webappDirectory, String includes, String excludes,\n                               String webXml )\n        throws IOException\n    {\n        if ( sourceDirectory != webappDirectory )\n        {\n            getLog().info( \"Copy webapp resources to \" + webappDirectory.getAbsolutePath() );\n\n            if ( warSourceDirectory.exists() )\n            {\n                //TODO : Use includes and excludes\n                FileUtils.copyDirectoryStructure( sourceDirectory, webappDirectory );\n            }\n\n            if ( webXml != null && !\"\".equals( webXml ) )\n            {\n                FileUtils.copyFileToDirectory( new File( webXml ), new File( webappDirectory, WEB_INF ) );\n            }\n        }\n    }","id":21664,"modified_method":"public void copyResources( File sourceDirectory, File webappDirectory, String includes, String excludes,\n                               String webXml )\n        throws IOException\n    {\n        if ( sourceDirectory != webappDirectory )\n        {\n            getLog().info( \"Copy webapp resources to \" + webappDirectory.getAbsolutePath() );\n\n            if ( new File( warSourceDirectory ).exists() )\n            {\n                //TODO : Use includes and excludes\n                FileUtils.copyDirectoryStructure( sourceDirectory, webappDirectory );\n            }\n\n            if ( webXml != null && !\"\".equals( webXml ) )\n            {\n                FileUtils.copyFileToDirectory( new File( webXml ), new File( webappDirectory, WEB_INF ) );\n            }\n        }\n    }","commit_id":"092c2f75cfc22f6d4083a22eabc39ae581937d4a","url":"https://github.com/apache/maven"},{"original_method":"public Set<String> getMacs() {\n\t\t\tif (macs.isEmpty())\n\t\t\t\treturn bridgeTopologyPort.getMacs();\n\t\t\treturn macs;\n\t\t}","id":21665,"modified_method":"public Set<String> getMacs() {\n\t\t\treturn macs;\n\t\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public BridgeTopologyLinkCandidate(BridgeTopologyPort btp) {\n\t\t\tbridgeTopologyPort = btp;\n\t\t}","id":21666,"modified_method":"public BridgeTopologyLinkCandidate(BridgeTopologyPort btp) {\n\t\t\tbridgeTopologyPort = btp;\n\t\t\tmacs = bridgeTopologyPort.getMacs();\n\t\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private BridgeTopologyLinkCandidate parseBFTEntry(\n\t\t\tBridgeTopologyLinkCandidate topologyLinkCandidate) {\n\t\t/*\n\t\t * This class is designed to get the topology on one bridge forwarding\n\t\t * table at a time so this means that the rules are written considering\n\t\t * port1 belonging always to the same bridge.\n\t\t * \n\t\t * \n\t\t * We assume the following:\n\t\t * \n\t\t * 1) there where no loops into the network (so there is a hierarchy)\n\t\t * \n\t\t * Corollary 1\n\t\t * \n\t\t * If exists there is only one backbone port from sw1 and sw2 If exists\n\t\t * there is only one backbone port from sw2 and sw1\n\t\t * \n\t\t * Corollary 2 There is only one \"pseudo device\" containing the bridge\n\t\t * \n\t\t * Corollary 3 on a backbone port two different mac address must belong\n\t\t * to the same pseudo device\n\t\t */\n\t\tfor (BridgeTopologyLinkCandidate linkcandidate : bridgeTopologyPortCandidates) {\n\t\t\t// regola same node non faccio niente\n\t\t\tif (linkcandidate.getBridgeTopologyPort().getNodeid().intValue() == topologyLinkCandidate\n\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue()) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 0: same node candidate nodeid {}, port{}:  do nothing checking nodeid{}, port{}, macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// regola intersezione nulla non faccio niente\n\t\t\tif (linkcandidate.intersectionNull(topologyLinkCandidate)) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 00: mac intesection null candidate nodeid {}, port{}: do nothing checking node {}, port {}: macs {}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (linkcandidate.getRole() == BridgePortRole.BACKBONE) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 1-d: setting candidate node {} port{} to DIRECT: checking node {}, BACKBONE port{}, macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (topologyLinkCandidate.getRole() == BridgePortRole.BACKBONE) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 1-r: candidate node{} BACKBONE port{}: setting node {} port{} macs{} to DIRECT\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// regola della dipendenza assoluta new\n\t\t\tif (topologyLinkCandidate.strictContained(linkcandidate)) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 2-d: candidate node{} DIRECT port{} strict contained: checking node {} BACKBONE port {} macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\tlinkcandidate.addTarget(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// regola della dipendenza assoluta old\n\t\t\tif (linkcandidate.strictContained(topologyLinkCandidate)) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 2-r: candidate node{} BACKBONE port{} strict contains: checking node {} DIRECT port {} macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.addTarget(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (linkcandidate.getLinkPortCandidate() == null\n\t\t\t\t\t&& topologyLinkCandidate.getLinkPortCandidate() == null) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 3: set candidate each other candidate: candidate node{} port{}: checking node {} port {} macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\t\t\t\tlinkcandidate.setLinkPortCandidate(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort());\n\t\t\t\ttopologyLinkCandidate.setLinkPortCandidate(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (linkcandidate.getLinkPortCandidate() != null\n\t\t\t\t\t&& topologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getNodeid().intValue() == linkcandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getNodeid().intValue()\n\t\t\t\t\t&& topologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort().intValue() != linkcandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getBridgePort().intValue()) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 4-d: candidate node{} DIRECT port{} strict contained: checking node {} BACKBONE port {} macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\tlinkcandidate.addTarget(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\ttopologyLinkCandidate.setLinkPortCandidate(null);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (topologyLinkCandidate.getLinkPortCandidate() != null\n\t\t\t\t\t&& linkcandidate.getBridgeTopologyPort().getNodeid()\n\t\t\t\t\t\t\t.intValue() == topologyLinkCandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getNodeid().intValue()\n\t\t\t\t\t&& linkcandidate.getBridgeTopologyPort().getBridgePort()\n\t\t\t\t\t\t\t.intValue() != topologyLinkCandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getBridgePort().intValue()) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFTEntry: rule 4-r: candidate node{} BACKBONE port{} strict contains: checking node {} DIRECT port {} macs{}\",\n\t\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), topologyLinkCandidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tlinkcandidate.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tlinkcandidate.getMacs());\n\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.addTarget(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tlinkcandidate.setLinkPortCandidate(null);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\treturn topologyLinkCandidate;\n\t}","id":21667,"modified_method":"private BridgeTopologyLinkCandidate parseBFTEntry(\n\t\t\tBridgeTopologyLinkCandidate topologyLinkCandidate) {\n\t\t/*\n\t\t * This class is designed to get the topology on one bridge forwarding\n\t\t * table at a time so this means that the rules are written considering\n\t\t * port1 belonging always to the same bridge.\n\t\t * \n\t\t * \n\t\t * We assume the following:\n\t\t * \n\t\t * 1) there where no loops into the network (so there is a hierarchy)\n\t\t * \n\t\t * Corollary 1\n\t\t * \n\t\t * If exists there is only one backbone port from sw1 and sw2 If exists\n\t\t * there is only one backbone port from sw2 and sw1\n\t\t * \n\t\t * Corollary 2 There is only one \"pseudo device\" containing the bridge\n\t\t * \n\t\t * Corollary 3 on a backbone port two different mac address must belong\n\t\t * to the same pseudo device\n\t\t */\n\t\tfor (BridgeTopologyLinkCandidate linkcandidate : bridgeTopologyPortCandidates) {\n\t\t\tLOG.info(\"parseBFTEntry: ------------------\");\n\t\t\tLOG.info(\n\t\t\t\t\t\"parseBFTEntry: start: candidate node {} port {} macs {} targets {} role {}: node {} port {} macs {} targets {} role {}\",\n\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort(), topologyLinkCandidate.getMacs(),\n\t\t\t\t\ttopologyLinkCandidate.getTargets(), topologyLinkCandidate\n\t\t\t\t\t\t\t.getRole(), linkcandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getNodeid(), linkcandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort(), linkcandidate.getMacs(),\n\t\t\t\t\tlinkcandidate.getTargets(), linkcandidate.getRole());\n\t\t\t// regola same node non faccio niente\n\t\t\tif (linkcandidate.getBridgeTopologyPort().getNodeid().intValue() == topologyLinkCandidate\n\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue()) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 0: same node do nothing\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// regola intersezione nulla non faccio niente\n\t\t\tif (linkcandidate.intersectionNull(topologyLinkCandidate)) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 00: mac intesection null do nothing\");\n\t\t\t\tcontinue;\n\t\t\t} \n\t\t\t\n\t\t\tif (linkcandidate.getRole() == BridgePortRole.BACKBONE && topologyLinkCandidate.strictContainedPort(linkcandidate)) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 1-d: BACKBONE checking: setting candidate to DIRECT\");\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tlinkcandidate.addTarget(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t} else if (topologyLinkCandidate.getRole() == BridgePortRole.BACKBONE && linkcandidate.strictContainedPort(topologyLinkCandidate)) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 1-r: BACKBONE candidate: setting checking to DIRECT\");\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.addTarget(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t} else if (topologyLinkCandidate.strictContainedPort(linkcandidate)) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 2-d: candidate strict contained: setting: candidate to DIRECT: checking to BACKBONE\");\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\tlinkcandidate.addTarget(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t} else if (linkcandidate.strictContainedPort(topologyLinkCandidate)) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 2-r: candidate strict contains: setting: candidate to BACKBONE: checking to DIRECT\");\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.addTarget(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t} else if (linkcandidate.getLinkPortCandidate() == null\n\t\t\t\t\t&& topologyLinkCandidate.getLinkPortCandidate() == null) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 3: port candidate each other\");\n\t\t\t\tlinkcandidate.setLinkPortCandidate(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort());\n\t\t\t\ttopologyLinkCandidate.setLinkPortCandidate(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort());\n\t\t\t} else if (linkcandidate.getLinkPortCandidate() != null\n\t\t\t\t\t&& topologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getNodeid().intValue() == linkcandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getNodeid().intValue()\n\t\t\t\t\t&& topologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort().intValue() != linkcandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getBridgePort().intValue()) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 4-d: checking forwards on two different ports on candidate: setting: candidate  to DIRECT: checking to BACKBONE\");\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n\t\t\t\tlinkcandidate.addTarget(topologyLinkCandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\ttopologyLinkCandidate.setLinkPortCandidate(null);\n\t\t\t} else if (topologyLinkCandidate.getLinkPortCandidate() != null\n\t\t\t\t\t&& linkcandidate.getBridgeTopologyPort().getNodeid()\n\t\t\t\t\t\t\t.intValue() == topologyLinkCandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getNodeid().intValue()\n\t\t\t\t\t&& linkcandidate.getBridgeTopologyPort().getBridgePort()\n\t\t\t\t\t\t\t.intValue() != topologyLinkCandidate\n\t\t\t\t\t\t\t.getLinkPortCandidate().getBridgePort().intValue()) {\n\t\t\t\tLOG.info(\"parseBFTEntry: rule 4-r: candidate forwards on two different ports on checking: setting: candidate to BACKBONE: checking to DIRECT\");\n\t\t\t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n\t\t\t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n\t\t\t\ttopologyLinkCandidate.addTarget(linkcandidate\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid());\n\n\t\t\t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n\t\t\t\tlinkcandidate.setLinkPortCandidate(null);\n\t\t\t}\n\t\t\tLOG.info(\n\t\t\t\t\t\"parseBFTEntry: end: candidate node {} port {} macs {} targets {} role {}: node {} port {} macs {} targets {} role {}\",\n\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\ttopologyLinkCandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort(), topologyLinkCandidate.getMacs(),\n\t\t\t\t\ttopologyLinkCandidate.getTargets(), topologyLinkCandidate\n\t\t\t\t\t\t\t.getRole(), linkcandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getNodeid(), linkcandidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort(), linkcandidate.getMacs(),\n\t\t\t\t\tlinkcandidate.getTargets(), linkcandidate.getRole());\n\n\t\t}\n\t\treturn topologyLinkCandidate;\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void parseBFT(Integer nodeid, Map<Integer,Set<String>> bridgeForwardingTable) {\n\t\tLOG.info(\n\t\t\t\t\"parseBFT: parsing node {},\",\n\t\t\t\tnodeid);\n\n\t\t// parsing bridge forwarding table\n\t\tfor (final Entry<Integer, Set<String>> curEntry : bridgeForwardingTable.entrySet()) {\n\t\t\tBridgeTopologyPort bridgetopologyport = new BridgeTopologyPort(\n\t\t\t\t\tnodeid, curEntry.getKey(), curEntry.getValue());\n\n\t\t\tif (parsed(bridgetopologyport)) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFT: node {}, port {} has been previuosly parsed. Skipping.\",\n\t\t\t\t\t\tnodeid, curEntry.getKey());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tBridgeTopologyLinkCandidate topologycandidate = new BridgeTopologyLinkCandidate(\n\t\t\t\t\tbridgetopologyport);\n\t\t\tfor (String mac : curEntry.getValue()) {\n\t\t\t\tif (bridgeAssociatedMacAddressMap.containsKey(mac)) {\n\t\t\t\t\tfor (BridgeTopologyPort swPort : bridgeAssociatedMacAddressMap\n\t\t\t\t\t\t\t.get(mac)) {\n\t\t\t\t\t\tif (swPort.getNodeid().intValue() == nodeid)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\t\"parseBFT: node {}, port {}: mac {} found on bridge adding target: targetnodeid {}, targetport {}\",\n\t\t\t\t\t\t\t\tnodeid, curEntry.getKey(), mac,\n\t\t\t\t\t\t\t\tswPort.getNodeid(), swPort.getBridgePort());\n\t\t\t\t\t\ttopologycandidate.setLinkPortCandidate(swPort);\n\t\t\t\t\t\ttopologycandidate.addTarget(swPort.getNodeid());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbridgeTopologyPortCandidates.add(parseBFTEntry(topologycandidate));\n\t\t}\n\t\t// first: cannot have two backbone from one bridge, so if a backbone and\n\t\t// b with candidate, then b is direct\n\t\tSet<BridgeTopologyLinkCandidate> secondStep = new HashSet<BridgeTopology.BridgeTopologyLinkCandidate>();\n\t\tfor (BridgeTopologyLinkCandidate candidateA : bridgeTopologyPortCandidates) {\n\t\t\tif (candidateA.getRole() != BridgePortRole.BACKBONE)\n\t\t\t\tcontinue;\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (candidateB.getBridgeTopologyPort().getNodeid().intValue() != candidateA\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getRole() != null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getLinkPortCandidate() == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateA.getTargets().contains(\n\t\t\t\t\t\tcandidateB.getLinkPortCandidate().getNodeid())) {\n\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\"parseBFT: rule A: node {} BACKBONE port {}: only one backbone port is allowed for targets {}: setting port {} to DIRECT\",\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\t\tcandidateA.getTargets(), candidateB\n\t\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort());\n\t\t\t\t\tcandidateB.setRole(BridgePortRole.DIRECT);\n\t\t\t\t\tcandidateB.setLinkPortCandidate(null);\n\t\t\t\t\tsecondStep.add(candidateB);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// second: if a contains mac and is direct and b contains mac: then b is\n\t\t// backbone\n\t\tfor (BridgeTopologyLinkCandidate candidateA : secondStep) {\n\t\t\tif (candidateA.getRole() != BridgePortRole.DIRECT)\n\t\t\t\tcontinue;\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (candidateB.getBridgeTopologyPort().getNodeid().intValue() == candidateA\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getRole() == BridgePortRole.DIRECT)\n\t\t\t\t\tcontinue;\n\t\t\t\tSet<String> otherMacs = new HashSet<String>();\n\t\t\t\tfor (String mac : candidateA.getMacs()) {\n\t\t\t\t\tif (candidateB.getMacs().contains(mac)) {\n\t\t\t\t\t\totherMacs.add(mac);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (otherMacs.isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFT: rule B: macs {}: node {} DIRECT port {}: removing from node {} BACKBONE port {} \",\n\t\t\t\t\t\totherMacs, candidateA.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid(), candidateA\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getBridgePort());\n\t\t\t\tcandidateB.removeMacs(otherMacs);\n\t\t\t\tcandidateB.addTarget(candidateA.getBridgeTopologyPort()\n\t\t\t\t\t\t.getNodeid());\n\t\t\t}\n\t\t}\n\n\t\tfor (BridgeTopologyLinkCandidate candidateA : bridgeTopologyPortCandidates) {\n\t\t\tif (parsed(candidateA.getBridgeTopologyPort()))\n\t\t\t\tcontinue;\n\t\t\tif (candidateA.getTargets().isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tLOG.info(\n\t\t\t\t\t\"parseBFT: bridgetobridge discovery: parsing nodeidA {}, portA {}, targetsA {}.\",\n\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid(), candidateA\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\tcandidateA.getTargets());\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (parsed(candidateB\n\t\t\t\t\t\t.getBridgeTopologyPort()))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getTargets().isEmpty())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateA.getBridgeTopologyPort().getNodeid().intValue() == candidateB\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFT: bridgetobridge discovery: parsing nodeidB {}, portB {}, targetsB {}.\",\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tcandidateB.getTargets());\n\t\t\t\tif (candidateA.getTargets().contains(\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid())\n\t\t\t\t\t\t&& candidateB.getTargets().contains(\n\t\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid())) {\n\t\t\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort(),\n\t\t\t\t\t\t\tcandidateB.getBridgeTopologyPort());\n\t\t\t\t\tif (link.getMacs().isEmpty()) {\n\t\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\"parseBFT: bridgetobridge discovery: link found {}\",\n\t\t\t\t\t\t\tlink);\n\t\t\t\t\t\tbridgelinks.add(link);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// reset all roles\n\t\tfor (BridgeTopologyLinkCandidate candidate : bridgeTopologyPortCandidates) {\n\t\t\tcandidate.setRole(null);\n\t\t}\n\t}","id":21668,"modified_method":"public void parseBFT(Integer nodeid,\n\t\t\tMap<Integer, Set<String>> bridgeForwardingTable) {\n\t\tLOG.info(\"parseBFT: parsing node {},\", nodeid);\n\n\t\t// parsing bridge forwarding table\n\t\tfor (final Entry<Integer, Set<String>> curEntry : bridgeForwardingTable\n\t\t\t\t.entrySet()) {\n\t\t\tBridgeTopologyPort bridgetopologyport = new BridgeTopologyPort(\n\t\t\t\t\tnodeid, curEntry.getKey(), curEntry.getValue());\n\n\t\t\tif (parsed(bridgetopologyport)) {\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFT: node {}, port {} has been previuosly parsed. Skipping.\",\n\t\t\t\t\t\tnodeid, curEntry.getKey());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tBridgeTopologyLinkCandidate topologycandidate = new BridgeTopologyLinkCandidate(\n\t\t\t\t\tbridgetopologyport);\n\t\t\tfor (String mac : curEntry.getValue()) {\n\t\t\t\tif (bridgeAssociatedMacAddressMap.containsKey(mac)) {\n\t\t\t\t\tfor (BridgeTopologyPort swPort : bridgeAssociatedMacAddressMap\n\t\t\t\t\t\t\t.get(mac)) {\n\t\t\t\t\t\tif (swPort.getNodeid().intValue() == nodeid)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\t\"parseBFT: node {}, port {}: mac {} found on bridge adding target: targetnodeid {}, targetport {}\",\n\t\t\t\t\t\t\t\tnodeid, curEntry.getKey(), mac,\n\t\t\t\t\t\t\t\tswPort.getNodeid(), swPort.getBridgePort());\n\t\t\t\t\t\ttopologycandidate.setLinkPortCandidate(swPort);\n\t\t\t\t\t\ttopologycandidate.addTarget(swPort.getNodeid());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbridgeTopologyPortCandidates.add(parseBFTEntry(topologycandidate));\n\t\t}\n\t\t// first: cannot have two backbone from one bridge, so if a backbone and\n\t\t// b with candidate, then b is direct\n\t\tSet<BridgeTopologyLinkCandidate> secondStep = new HashSet<BridgeTopology.BridgeTopologyLinkCandidate>();\n\t\tfor (BridgeTopologyLinkCandidate candidateA : bridgeTopologyPortCandidates) {\n\t\t\tif (candidateA.getRole() != BridgePortRole.BACKBONE)\n\t\t\t\tcontinue;\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (candidateB.getBridgeTopologyPort().getNodeid().intValue() != candidateA\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getRole() != null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getLinkPortCandidate() == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateA.getTargets().contains(\n\t\t\t\t\t\tcandidateB.getLinkPortCandidate().getNodeid())) {\n\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\"parseBFT: rule A: only one backbone port: BACKBONE node {} port {} targets {}: setting port {} to DIRECT\",\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\t\tcandidateA.getTargets(), candidateB\n\t\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort());\n\t\t\t\t\tcandidateB.setRole(BridgePortRole.DIRECT);\n\t\t\t\t\tcandidateB.setLinkPortCandidate(null);\n\t\t\t\t\tsecondStep.add(candidateB);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// second: if a contains mac and is direct and b contains mac: then b is\n\t\t// backbone\n\t\tfor (BridgeTopologyLinkCandidate candidateA : secondStep) {\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (candidateB.getBridgeTopologyPort().getNodeid().intValue() == candidateA\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getRole() == BridgePortRole.DIRECT)\n\t\t\t\t\tcontinue;\n\t\t\t\tSet<String> otherMacs = new HashSet<String>();\n\t\t\t\tfor (String mac : candidateA.getMacs()) {\n\t\t\t\t\tif (candidateB.getMacs().contains(mac)) {\n\t\t\t\t\t\totherMacs.add(mac);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (otherMacs.isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"parseBFT: rule B: found DIRECT: node {} BACKBONE port {}: removing mac {} and adding target {}\",\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\totherMacs, candidateA.getBridgeTopologyPort()\n\t\t\t\t\t\t\t\t.getNodeid());\n\t\t\t\tcandidateB.removeMacs(otherMacs);\n\t\t\t\tcandidateB.addTarget(candidateA.getBridgeTopologyPort()\n\t\t\t\t\t\t.getNodeid());\n\t\t\t}\n\t\t}\n\n\t\t// reset all roles\n\t\tfor (BridgeTopologyLinkCandidate candidate : bridgeTopologyPortCandidates) {\n\t\t\tif (candidate.getRole() == BridgePortRole.DIRECT)\n\t\t\t\tcandidate.setRole(null);\n\t\t}\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<BridgeTopologyLink> getTopology() {\n\n\t\tfor (BridgeTopologyLinkCandidate candidateA : bridgeTopologyPortCandidates) {\n\t\t\t\n\t\t\tif (parsed(candidateA.getBridgeTopologyPort()))\n\t\t\t\tcontinue;\n\t\t\tif (candidateA.getTargets().isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tLOG.info(\n\t\t\t\t\t\"getTopology: bridgetobridge discovery: parsing nodeidA {}, portA {}, targetsA {}.\",\n\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid(), candidateA\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\tcandidateA.getTargets());\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (parsed(candidateA.getBridgeTopologyPort()))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getTargets().isEmpty())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateA.getBridgeTopologyPort().getNodeid().intValue() == candidateB\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"getTopology: bridgetobridge discovery: parsing nodeidB {}, portB {}, targetsB {}.\",\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tcandidateB.getTargets());\n\t\t\t\tif (candidateA.getTargets().contains(\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid())\n\t\t\t\t\t\t&& candidateB.getTargets().contains(\n\t\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid())) {\n\t\t\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort(),\n\t\t\t\t\t\t\tcandidateB.getBridgeTopologyPort());\n\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\"getTopology: bridgetobridge discovery: link found {}\",\n\t\t\t\t\t\t\tlink);\n\t\t\t\t\tbridgelinks.add(link);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (BridgeTopologyLinkCandidate candidate : bridgeTopologyPortCandidates) {\n\t\t\tif (parsed(candidate.getBridgeTopologyPort()))\n\t\t\t\tcontinue;\n\t\t\tLOG.info(\n\t\t\t\t\t\"getTopology: mac discovery: parsing nodeid {}, port {}, macs {}, targets {}.\",\n\t\t\t\t\tcandidate.getBridgeTopologyPort().getNodeid(), candidate\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(), candidate\n\t\t\t\t\t\t\t.getMacs(), candidate.getTargets());\n\t\t\tif (candidate.getLinkPortCandidate() == null\n\t\t\t\t\t|| candidate.getRole() == BridgePortRole.DIRECT) {\n\t\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\t\tnew BridgeTopologyPort(candidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid(), candidate\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\t\t\tcandidate.getMacs()));\n\t\t\t\tLOG.info(\"getTopology: bridgetomac link found {}\", link);\n\t\t\t\tbridgelinks.add(link);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (parsed(candidate.getLinkPortCandidate())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\tnew BridgeTopologyPort(candidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getNodeid(), candidate.getBridgeTopologyPort()\n\t\t\t\t\t\t\t.getBridgePort(), candidate.getMacs()),\n\t\t\t\t\tcandidate.getLinkPortCandidate());\n\t\t\tLOG.info(\n\t\t\t\t\t\"getTopology: bridgebridge link found using port associated mac {}\",\n\t\t\t\t\tlink);\n\t\t\tbridgelinks.add(link);\n\t\t}\n\t\treturn bridgelinks;\n\t}","id":21669,"modified_method":"public List<BridgeTopologyLink> getTopology() {\n\n\t\tfor (BridgeTopologyLinkCandidate candidateA : bridgeTopologyPortCandidates) {\n\t\t\tif (parsed(candidateA.getBridgeTopologyPort()))\n\t\t\t\tcontinue;\n\t\t\tif (candidateA.getTargets().isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (BridgeTopologyLinkCandidate candidateB : bridgeTopologyPortCandidates) {\n\t\t\t\tif (parsed(candidateA.getBridgeTopologyPort()))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateB.getTargets().isEmpty())\n\t\t\t\t\tcontinue;\n\t\t\t\tif (candidateA.getBridgeTopologyPort().getNodeid().intValue() >= candidateB\n\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid().intValue())\n\t\t\t\t\tcontinue;\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"getTopology: bridgetobridge discovery: parsing nodeidA {}, portA {}, targetsA {}.\",\n\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid(), candidateA\n\t\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tcandidateA.getTargets());\n\t\t\t\tLOG.info(\n\t\t\t\t\t\t\"getTopology: bridgetobridge discovery: parsing nodeidB {}, portB {}, targetsB {}.\",\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid(),\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\tcandidateB.getTargets());\n\t\t\t\tif (candidateA.getTargets().contains(\n\t\t\t\t\t\tcandidateB.getBridgeTopologyPort().getNodeid())\n\t\t\t\t\t\t&& candidateB.getTargets().contains(\n\t\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort().getNodeid())) {\n\t\t\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\t\t\tcandidateA.getBridgeTopologyPort(),\n\t\t\t\t\t\t\tcandidateB.getBridgeTopologyPort());\n\t\t\t\t\tLOG.info(\n\t\t\t\t\t\t\t\"getTopology: bridgetobridge discovery: link found {}\",\n\t\t\t\t\t\t\tlink);\n\t\t\t\t\tbridgelinks.add(link);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (BridgeTopologyLinkCandidate candidate : bridgeTopologyPortCandidates) {\n\t\t\tif (parsed(candidate.getBridgeTopologyPort()))\n\t\t\t\tcontinue;\n\t\t\tLOG.info(\n\t\t\t\t\t\"getTopology: mac discovery: parsing nodeid {}, port {}, macs {}, targets {}.\",\n\t\t\t\t\tcandidate.getBridgeTopologyPort().getNodeid(), candidate\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(), candidate\n\t\t\t\t\t\t\t.getMacs(), candidate.getTargets());\n\t\t\tBridgeTopologyLink link = new BridgeTopologyLink(\n\t\t\t\t\tnew BridgeTopologyPort(candidate\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getNodeid(), candidate\n\t\t\t\t\t\t\t.getBridgeTopologyPort().getBridgePort(),\n\t\t\t\t\t\t\tcandidate.getMacs()));\n\t\t\tLOG.info(\"getTopology: bridgetomac link found {}\", link);\n\t\t\tbridgelinks.add(link);\n\t\t}\n\t\treturn bridgelinks;\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean strictContained(BridgeTopologyLinkCandidate portcandidate) {\n\t\t\tif (portcandidate.getMacs().size() <= getMacs().size())\n\t\t\t\treturn false;\n\t\t\tfor (String mac : getMacs()) {\n\t\t\t\tif (!portcandidate.getMacs().contains(mac))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}","id":21670,"modified_method":"public boolean strictContained(BridgeTopologyLinkCandidate portcandidate) {\n\t\t\tif (portcandidate.getMacs().size() <= getMacs().size())\n\t\t\t\treturn strictContainedPort(portcandidate);\n\t\t\tfor (String mac : getMacs()) {\n\t\t\t\tif (!portcandidate.getMacs().contains(mac))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void removeMacs(Set<String> otherMacs) {\n\t\t\tSet<String> curmacs = new HashSet<String>();\n\t\t\tfor (String mac : getMacs()) {\n\t\t\t\tif (otherMacs.contains(mac))\n\t\t\t\t\tcontinue;\n\t\t\t\tcurmacs.add(mac);\n\t\t\t}\n\t\t\trole = BridgePortRole.BACKBONE;\n\t\t\tmacs = curmacs;\n\t\t}","id":21671,"modified_method":"public void removeMacs(Set<String> otherMacs) {\n\t\t\tSet<String> curmacs = new HashSet<String>();\n\t\t\tfor (String mac : getMacs()) {\n\t\t\t\tif (otherMacs.contains(mac))\n\t\t\t\t\tcontinue;\n\t\t\t\tcurmacs.add(mac);\n\t\t\t}\n\t\t\tmacs = curmacs;\n\t\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void merge(BridgeTopologyLinkCandidate other) {\n\t\t\tfor (String mac : other.macs) {\n\t\t\t\tif (bridgeTopologyPort.getMacs().contains(mac))\n\t\t\t\t\tmacs.add(mac);\n\t\t\t}\n\t\t}","id":21672,"modified_method":"public boolean strictContainedPort(BridgeTopologyLinkCandidate portcandidate) {\n\t\t\tif (portcandidate.getBridgeTopologyPort().getMacs().size() <= getBridgeTopologyPort().getMacs().size())\n\t\t\t\treturn false;\n\t\t\tfor (String mac : getBridgeTopologyPort().getMacs()) {\n\t\t\t\tif (!portcandidate.getBridgeTopologyPort().getMacs().contains(mac))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t\t\n\t\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyACB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\n\t}","id":21673,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyACB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        topology.check(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyDF() {\n\t\tDEFTopology topology = new DEFTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(3, links.size());\n\t}","id":21674,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyDF() {\n\t\tDEFGTopology topology = new DEFGTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        topology.checkDF(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyCA() {\n\n\t\tABCTopology topology = new ABCTopology();\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(3, links.size());\n        \n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portCB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeA, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portAB,link.getDesignateBridgePort().getBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\t}","id":21675,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyCA() {\n\n\t\tABCTopology topology = new ABCTopology();\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        topology.checkAC(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyEF() {\n\t\tDEFTopology topology = new DEFTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(3, links.size());\n\t}","id":21676,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyEF() {\n\t\tDEFGTopology topology = new DEFGTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        topology.checkEF(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyCAB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\t}","id":21677,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyCAB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        topology.check(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyDE() {\n\t\tDEFTopology topology = new DEFTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(3, links.size());\n\n\t}","id":21678,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyDE() {\n\t\tDEFGTopology topology = new DEFGTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n\n        topology.checkDE(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyCB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(4, links.size());\n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().isEmpty()) {\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portCB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeB, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portBC,link.getDesignateBridgePort().getBridgePort());\n    \t\t} else if (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\t}","id":21679,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyCB() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        topology.checkBC(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyBC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(4, links.size());\n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().isEmpty()) {\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeC, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portCB,link.getDesignateBridgePort().getBridgePort());\n    \t\t} else if (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\t}","id":21680,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyBC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        topology.checkBC(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyDFE() {\n\t\tDEFTopology topology = new DEFTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\t}","id":21681,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyDFE() {\n\t\tDEFGTopology topology = new DEFGTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n        \n        topology.checkDEF(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyABC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\t}","id":21682,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyABC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        topology.check(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyAB() {\n\t\tABCTopology topology = new ABCTopology();\n        \n\t\tBridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(4, links.size());\n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().isEmpty()) {\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portAB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeB, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portBA,link.getDesignateBridgePort().getBridgePort());\n    \t\t} else if (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\n\t}","id":21683,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyAB() {\n\t\tABCTopology topology = new ABCTopology();\n        \n\t\tBridgeTopology bridgeTopology = new BridgeTopology();\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n\n        topology.checkAB(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyBA() {\n\t\tABCTopology topology = new ABCTopology();\n        \n\t\tBridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(4, links.size());\n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().isEmpty()) {\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeA, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portAB,link.getDesignateBridgePort().getBridgePort());\n    \t\t} else if (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeB, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portBC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\n\t}","id":21684,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyBA() {\n\t\tABCTopology topology = new ABCTopology();\n        \n\t\tBridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        topology.checkAB(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyBCA() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\t}","id":21685,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyBCA() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        topology.check(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyCBA() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\n\t}","id":21686,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyCBA() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n\n        topology.check(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyBAC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\n\t}","id":21687,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyBAC() {\n\t\tABCTopology topology = new ABCTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeB,topology.bftB);\n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        topology.check(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyAC() {\n\n\t\tABCTopology topology = new ABCTopology();\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(3, links.size());\n        \n        for (BridgeTopologyLink link: links) {\n        \tif (link.getMacs().contains(topology.mac1)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portA,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac2)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portAB,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(topology.nodeC, link.getDesignateBridgePort().getNodeid());\n        \t\tassertEquals(topology.portCB,link.getDesignateBridgePort().getBridgePort());\n       \t\t} else if (link.getMacs().contains(topology.mac3)) {\n        \t\tassertEquals(1, link.getMacs().size());\n        \t\tassertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());\n        \t\tassertEquals(topology.portC,link.getBridgeTopologyPort().getBridgePort());\n        \t\tassertEquals(null, link.getDesignateBridgePort());\n    \t\t} else {\n    \t\t\tassertEquals(false, true);\n    \t\t}\n        }\n\t}","id":21688,"modified_method":"@Test\n\tpublic void testTwoConnectedBridgeTopologyAC() {\n\n\t\tABCTopology topology = new ABCTopology();\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);\n        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);\n\n        topology.checkAC(bridgeTopology.getTopology());\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyDEF() {\n\n\t\tDEFTopology topology = new DEFTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        List<BridgeTopologyLink> links = bridgeTopology.getTopology();\n        printBridgeTopologyLinks(links);\n        assertEquals(5, links.size());\n\n\t}","id":21689,"modified_method":"@Test\n\tpublic void testThreeConnectedBridgeTopologyDEF() {\n\n\t\tDEFGTopology topology = new DEFGTopology();\n\n        BridgeTopology bridgeTopology = new BridgeTopology();\n        \n        bridgeTopology.parseBFT(topology.nodeD,topology.bftD);\n        bridgeTopology.parseBFT(topology.nodeE,topology.bftE);\n        bridgeTopology.parseBFT(topology.nodeF,topology.bftF);\n\n        topology.checkDEF(bridgeTopology.getTopology());\n\n\t}","commit_id":"40c700515e154c2d3a7f1a21b356b342009581b7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                runningRouters.add(router);\n            }\n        }\n        return runningRouters;\n    }","id":21690,"modified_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                if (router != null) {\n                    runningRouters.add(router);\n                }\n            }\n        }\n        return runningRouters;\n    }","commit_id":"898051ecff5c10540ea9a0933a0df3f752d87826","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n\n        /* Get the host_id in order to find the cluster */\n        long host_id = 0;\n        for (DomainRouterVO router : routers) {\n            host_id = router.getHostId();\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","id":21691,"modified_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n\n        /* Get the host_id in order to find the cluster */\n        Long host_id = new Long(0);\n        for (DomainRouterVO router : routers) {\n            if (host_id == null || host_id == 0) {\n                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n            }\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        if (host_id == null || host_id == 0) {\n            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","commit_id":"898051ecff5c10540ea9a0933a0df3f752d87826","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                runningRouters.add(router);\n            }\n        }\n        return runningRouters;\n    }","id":21692,"modified_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                if (router != null) {\n                    runningRouters.add(router);\n                }\n            }\n        }\n        return runningRouters;\n    }","commit_id":"93662904236e3b888f07ad77d506d5d656d20b33","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n        \n        /* Get the host_id in order to find the cluster */\n        long host_id = 0;\n        for (DomainRouterVO router : routers) {\n            host_id = router.getHostId();\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","id":21693,"modified_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n        \n        /* Get the host_id in order to find the cluster */\n        Long host_id = new Long(0);\n        for (DomainRouterVO router : routers) {\n            if (host_id == null || host_id == 0) {\n                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n            }\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        if (host_id == null || host_id == 0) {\n            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","commit_id":"93662904236e3b888f07ad77d506d5d656d20b33","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                runningRouters.add(router);\n            }\n        }\n        return runningRouters;\n    }","id":21694,"modified_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                if (router != null) {\n                    runningRouters.add(router);\n                }\n            }\n        }\n        return runningRouters;\n    }","commit_id":"b10f560be52c4dc448a484917caf8c553b67b77c","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n\n        /* Get the host_id in order to find the cluster */\n        long host_id = 0;\n        for (DomainRouterVO router : routers) {\n            host_id = router.getHostId();\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","id":21695,"modified_method":"@Override\n    public boolean restart(Network network, ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException{\n        DataCenter dc = _configMgr.getZone(network.getDataCenterId());\n        if (!canHandle(network.getGuestType(), dc)) {\n            s_logger.trace(\"Virtual router element doesn't handle network restart for the network \" + network);\n            return false;\n        }\n\n        DeployDestination dest = new DeployDestination(dc, null, null, null);\n\n        NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        \n        // We need to re-implement the network since the redundancy capability may changed\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers == null || routers.isEmpty()) {\n            s_logger.trace(\"Can't find virtual router element in network \" + network.getId());\n            return true;\n        }\n\n        /* Get the host_id in order to find the cluster */\n        Long host_id = new Long(0);\n        for (DomainRouterVO router : routers) {\n            if (host_id == null || host_id == 0) {\n                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n            }\n            /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n            if (!_routerMgr.destroyRouter(router.getId())) {\n                s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n            }\n        }\n        if (host_id == null || host_id == 0) {\n            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n        }\n        \n        /* The cluster here is only used to determine hypervisor type, not the real deployment */\n        Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());\n        dest = new DeployDestination(dc, null, cluster, null);\n        return implement(network, networkOffering, dest, context);\n    }","commit_id":"b10f560be52c4dc448a484917caf8c553b67b77c","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Poll the specified address for Citrix service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port (by default port\n     * 1494). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if the extracted return code indicates that we are talking to an\n     * Citrix server ('ICA' appears in the response) we set the service status to\n     * SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // check the interface type\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Get the category logger\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // get the parameters\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        //don't let the user set the timeout to 0, an infinite loop will occur if the server\n        // is down\n        if (timeout == 0) timeout = 10;\n\n        // Extract the address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n        String host = ipv4Addr.getHostAddress();\n\n        if (log.isDebugEnabled()) log.debug(\"CitrixMonitor.poll: Polling interface: \" + host + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"CitrixMonitor: connected to host: \" + host + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n\n                // Allocate a line reader\n                //\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                StringBuffer buffer = new StringBuffer();\n\n                // Not an infinite loop...socket timeout will break this out\n                // of the loop if \"ICA\" string is never read.\n                //\n                while (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    buffer.append((char) reader.read());\n                    if (buffer.toString().indexOf(\"ICA\") > -1) {\n                        serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        responseTime = System.currentTimeMillis() - sentTime;\n                        if (responseTime >= 0 && rrdPath != null) {\n                            try {\n                                this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                            } catch (RuntimeException rex) {\n                                log.debug(\"There was a problem writing the RRD:\" + rex);\n                            }\n                        }\n                    } else {\n                        serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                }\n            } catch (ConnectException cE) {\n                // Connection refused!! Continue to retry.\n                //\n                cE.fillInStackTrace();\n                log.debug(\"CitrixPlugin: connection refused by host \" + host, cE);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                // No route to host!! No need to perform retries.\n                e.fillInStackTrace();\n                log.info(\"CitrixPlugin: Unable to test host \" + host + \", no route available\", e);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                break;\n            } catch (InterruptedIOException e) {\n                log.debug(\"CitrixMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (IOException e) {\n                log.info(\"CitrixPlugin: Error communicating with host \" + host, e);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (Throwable t) {\n                log.warn(\"CitrixPlugin: Undeclared throwable exception caught contacting host \" + host, t);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } finally {\n                try {\n                    if (socket != null) {\n                        socket.close();\n                        socket = null;\n                    }\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21696,"modified_method":"/**\n     * Poll the specified address for Citrix service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port (by default port\n     * 1494). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if the extracted return code indicates that we are talking to an\n     * Citrix server ('ICA' appears in the response) we set the service status to\n     * SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // check the interface type\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Get the category logger\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // get the parameters\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        //don't let the user set the timeout to 0, an infinite loop will occur if the server\n        // is down\n        if (timeout == 0) timeout = 10;\n\n        // Extract the address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n        String host = ipv4Addr.getHostAddress();\n\n        if (log.isDebugEnabled()) log.debug(\"CitrixMonitor.poll: Polling interface: \" + host + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"CitrixMonitor: connected to host: \" + host + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n\n                // Allocate a line reader\n                //\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                StringBuffer buffer = new StringBuffer();\n\n                // Not an infinite loop...socket timeout will break this out\n                // of the loop if \"ICA\" string is never read.\n                //\n                while (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    buffer.append((char) reader.read());\n                    if (buffer.toString().indexOf(\"ICA\") > -1) {\n                        serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        responseTime = System.currentTimeMillis() - sentTime;\n                        if (responseTime >= 0 && rrdPath != null) {\n                            try {\n                                this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                            } catch (RuntimeException rex) {\n                                log.debug(\"There was a problem writing the RRD:\" + rex);\n                            }\n                        }\n                    } else {\n                        serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                }\n            } catch (ConnectException cE) {\n                // Connection refused!! Continue to retry.\n                //\n                cE.fillInStackTrace();\n                log.debug(\"CitrixPlugin: connection refused by host \" + host, cE);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                // No route to host!! No need to perform retries.\n                e.fillInStackTrace();\n                log.info(\"CitrixPlugin: Unable to test host \" + host + \", no route available\", e);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                break;\n            } catch (InterruptedIOException e) {\n                log.debug(\"CitrixMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (IOException e) {\n                log.info(\"CitrixPlugin: Error communicating with host \" + host, e);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } catch (Throwable t) {\n                log.warn(\"CitrixPlugin: Undeclared throwable exception caught contacting host \" + host, t);\n                serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n            } finally {\n                try {\n                    if (socket != null) {\n                        socket.close();\n                        socket = null;\n                    }\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Poll the specified address for DHCP service availability.\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availability of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\t// Process parameters\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t// Retries\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(\"DhcpMonitor.poll: address: \" + ipv4Addr + \" timeout: \" + timeout + \" retry: \" + retry);\n\t\t\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tlong responseTime = -1;\n\t\ttry\n\t\t{\n\t\t\t// Dhcpd.isServer() returns the response time in milliseconds\n\t\t\t// if the remote box is a DHCP server or -1 if the remote\n\t\t\t// box is NOT a DHCP server.\n\t\t\t// \n\t\t\tresponseTime = Dhcpd.isServer(ipv4Addr, (long)timeout, retry);\n\t\t\tif (responseTime >= 0)\n\t\t\t{\n\t\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t}\n\t\t}\n\t\tcatch(IOException ioE)\n\t\t{\n\t\t\tioE.fillInStackTrace();\n\t\t\tlog.warn(\"DhcpMonitor.poll: An I/O exception occured during DHCP discovery\", ioE);\n\t\t}\n\n\t\t// Store response time if available\n\t\t//\n\t\tif (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)\n\t\t{\n\t\t\t// Store response time in RRD\n\t\t\tif (responseTime >= 0 && rrdPath != null)\n\t\t\t{\n                        \ttry\n                                {\n\t\t\t\t\tthis.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                }\n                                catch(RuntimeException rex)\n                                {\n                                \tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n\t\t\t}\n\t\t}\n\t\t\n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\treturn serviceStatus;\n\t}","id":21697,"modified_method":"/**\n\t * Poll the specified address for DHCP service availability.\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availability of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\t// Process parameters\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t// Retries\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(\"DhcpMonitor.poll: address: \" + ipv4Addr + \" timeout: \" + timeout + \" retry: \" + retry);\n\t\t\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tlong responseTime = -1;\n\t\ttry\n\t\t{\n\t\t\t// Dhcpd.isServer() returns the response time in milliseconds\n\t\t\t// if the remote box is a DHCP server or -1 if the remote\n\t\t\t// box is NOT a DHCP server.\n\t\t\t// \n\t\t\tresponseTime = Dhcpd.isServer(ipv4Addr, (long)timeout, retry);\n\t\t\tif (responseTime >= 0)\n\t\t\t{\n\t\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t}\n\t\t}\n\t\tcatch(IOException ioE)\n\t\t{\n\t\t\tioE.fillInStackTrace();\n\t\t\tlog.warn(\"DhcpMonitor.poll: An I/O exception occured during DHCP discovery\", ioE);\n\t\t}\n\n\t\t// Store response time if available\n\t\t//\n\t\tif (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)\n\t\t{\n\t\t\t// Store response time in RRD\n\t\t\tif (responseTime >= 0 && rrdPath != null)\n\t\t\t{\n                        \ttry\n                                {\n\t\t\t\t\tthis.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                }\n                                catch(RuntimeException rex)\n                                {\n                                \tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n\t\t\t}\n\t\t}\n\t\t\n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\treturn serviceStatus;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Poll the specified address for DNS service availability.<\/P>\n\t *\n\t * <P>During the poll an DNS address request query packet is generated\n\t * for hostname 'localhost'.  The query is sent via UDP socket to the\n\t * interface at the specified port (by default UDP port 53).  If a \n\t * response is received, it is parsed and validated.  If the DNS lookup\n\t * was successful the service status is set to SERVICE_AVAILABLE and the\n\t * method returns.<\/P>\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t//\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\t// get the log\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t// get the parameters\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint port  = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\n\n\t\t// Host to lookup?\n\t\t//\n\t\tString lookup = ParameterMap.getKeyedString(parameters, \"lookup\", null);\n\t\tif(lookup == null || lookup.length() == 0)\n\t\t{\n\t\t\t// Get hostname of local machine for future DNS lookups\n\t\t\t//\n\t\t\ttry \n\t\t\t{\n\t\t\t\tlookup = InetAddress.getLocalHost().getHostName();\n\t\t\t}\n\t\t\tcatch(UnknownHostException ukE)\n\t\t\t{\n\t\t\t\t// Recast the exception as a Service Monitor Exception\n\t\t\t\t//\n\t\t\t\tukE.fillInStackTrace();\n\t\t\t\tthrow new UndeclaredThrowableException(ukE);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// get the address and DNS address request\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\t\tDNSAddressRequest request = new DNSAddressRequest(lookup);\n\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tDatagramSocket socket = null;\n\t\tlong responseTime = -1;\n\t\ttry \n\t\t{\n\t\t\tsocket = new DatagramSocket();\n\t\t\tsocket.setSoTimeout(timeout); // will force the InterruptedIOException\n\n\t\t\tfor (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\t// Send DNS request\n\t\t\t\t\t//\n\t\t\t\t\tbyte[] data = request.buildRequest();\n\t\t\t\t\tDatagramPacket outgoing = new DatagramPacket(data, \n\t\t\t\t\t\t\t\t\t\t   data.length, \n\t\t\t\t\t\t\t\t\t\t   ipv4Addr, \n\t\t\t\t\t\t\t\t\t\t   port);\n\t\t\t\t\tlong sentTime = System.currentTimeMillis();\n\t\t\t\t\tsocket.send(outgoing);\n\t\t\t\t\t\n\t\t\t\t\t// Get DNS Response\n\t\t\t\t\t//\n\t\t\t\t\tbyte[] buffer = new byte[512];\n\t\t\t\t\tDatagramPacket incoming = new DatagramPacket(buffer, buffer.length);\n\t\t\t\t\tsocket.receive(incoming);\n\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n\t\t\t\t\t\n\t\t\t\t\t// Validate DNS Response\n\t\t\t\t\t// IOException thrown if packet does not decode as expected.\n\t\t\t\t\trequest.verifyResponse(incoming.getData(), incoming.getLength());\n\t\t\t\t\t\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"poll: valid DNS request received, responseTime= \" + responseTime + \"ms\");\n\t\t\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t\t} \n\t\t\t\tcatch (InterruptedIOException ex) \n\t\t\t\t{\n\t\t\t\t\t// Ignore, no response received.\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tcatch(NoRouteToHostException e)\n\t\t{\n\t\t\te.fillInStackTrace();\n\t\t\tlog.debug(\"No route to host exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch(ConnectException e)\n\t\t{\n\t\t        //Connection refused. Continue to retry.\n                        //\n                        e.fillInStackTrace();\n\t\t\tlog.debug(\"Connection exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch (IOException ex) \n\t\t{\n\t\t\tex.fillInStackTrace();\n\t\t\tlog.info(\"IOException while polling address: \" + ipv4Addr, ex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(socket != null)\n\t\t\t\tsocket.close();\n\t\t}\n\t\n\t\t// Store response time if available\n\t\t//\n\t\tif (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)\n\t\t{\n\t\t\t// Store response time in RRD\n\t\t\tif (responseTime >= 0 && rrdPath != null)\n\t\t\t{\n                        \ttry\n                        \t{\n\t\t\t\t\tthis.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        \t}\n                        \tcatch(RuntimeException rex)\n                        \t{\n                                \tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                        \t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// \n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\treturn serviceStatus;\n\t}","id":21698,"modified_method":"/**\n\t * <P>Poll the specified address for DNS service availability.<\/P>\n\t *\n\t * <P>During the poll an DNS address request query packet is generated\n\t * for hostname 'localhost'.  The query is sent via UDP socket to the\n\t * interface at the specified port (by default UDP port 53).  If a \n\t * response is received, it is parsed and validated.  If the DNS lookup\n\t * was successful the service status is set to SERVICE_AVAILABLE and the\n\t * method returns.<\/P>\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t//\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\t// get the log\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t// get the parameters\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint port  = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\n\n\t\t// Host to lookup?\n\t\t//\n\t\tString lookup = ParameterMap.getKeyedString(parameters, \"lookup\", null);\n\t\tif(lookup == null || lookup.length() == 0)\n\t\t{\n\t\t\t// Get hostname of local machine for future DNS lookups\n\t\t\t//\n\t\t\ttry \n\t\t\t{\n\t\t\t\tlookup = InetAddress.getLocalHost().getHostName();\n\t\t\t}\n\t\t\tcatch(UnknownHostException ukE)\n\t\t\t{\n\t\t\t\t// Recast the exception as a Service Monitor Exception\n\t\t\t\t//\n\t\t\t\tukE.fillInStackTrace();\n\t\t\t\tthrow new UndeclaredThrowableException(ukE);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// get the address and DNS address request\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\t\tDNSAddressRequest request = new DNSAddressRequest(lookup);\n\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tDatagramSocket socket = null;\n\t\tlong responseTime = -1;\n\t\ttry \n\t\t{\n\t\t\tsocket = new DatagramSocket();\n\t\t\tsocket.setSoTimeout(timeout); // will force the InterruptedIOException\n\n\t\t\tfor (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\t// Send DNS request\n\t\t\t\t\t//\n\t\t\t\t\tbyte[] data = request.buildRequest();\n\t\t\t\t\tDatagramPacket outgoing = new DatagramPacket(data, \n\t\t\t\t\t\t\t\t\t\t   data.length, \n\t\t\t\t\t\t\t\t\t\t   ipv4Addr, \n\t\t\t\t\t\t\t\t\t\t   port);\n\t\t\t\t\tlong sentTime = System.currentTimeMillis();\n\t\t\t\t\tsocket.send(outgoing);\n\t\t\t\t\t\n\t\t\t\t\t// Get DNS Response\n\t\t\t\t\t//\n\t\t\t\t\tbyte[] buffer = new byte[512];\n\t\t\t\t\tDatagramPacket incoming = new DatagramPacket(buffer, buffer.length);\n\t\t\t\t\tsocket.receive(incoming);\n\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n\t\t\t\t\t\n\t\t\t\t\t// Validate DNS Response\n\t\t\t\t\t// IOException thrown if packet does not decode as expected.\n\t\t\t\t\trequest.verifyResponse(incoming.getData(), incoming.getLength());\n\t\t\t\t\t\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"poll: valid DNS request received, responseTime= \" + responseTime + \"ms\");\n\t\t\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t\t} \n\t\t\t\tcatch (InterruptedIOException ex) \n\t\t\t\t{\n\t\t\t\t\t// Ignore, no response received.\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tcatch(NoRouteToHostException e)\n\t\t{\n\t\t\te.fillInStackTrace();\n\t\t\tlog.debug(\"No route to host exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch(ConnectException e)\n\t\t{\n\t\t        //Connection refused. Continue to retry.\n                        //\n                        e.fillInStackTrace();\n\t\t\tlog.debug(\"Connection exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch (IOException ex) \n\t\t{\n\t\t\tex.fillInStackTrace();\n\t\t\tlog.info(\"IOException while polling address: \" + ipv4Addr, ex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(socket != null)\n\t\t\t\tsocket.close();\n\t\t}\n\t\n\t\t// Store response time if available\n\t\t//\n\t\tif (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)\n\t\t{\n\t\t\t// Store response time in RRD\n\t\t\tif (responseTime >= 0 && rrdPath != null)\n\t\t\t{\n                        \ttry\n                        \t{\n\t\t\t\t\tthis.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        \t}\n                        \tcatch(RuntimeException rex)\n                        \t{\n                                \tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                        \t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// \n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\treturn serviceStatus;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Poll the specified address for FTP service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 21). If the connection request is successful, the banner line generated by the interface\n     * is parsed and if the extracted return code indicates that we are talking to an FTP\n     * server we continue. Next, an FTP 'QUIT' command is sent. Provided that the interface's\n     * response is valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // check the interface type\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Get the category logger\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // get the parameters\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String userid = ParameterMap.getKeyedString(parameters, \"userid\", null);\n        String password = ParameterMap.getKeyedString(parameters, \"password\", null);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Extract the address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"FtpMonitor.poll: Polling interface: \" + ipv4Addr.getHostAddress() + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                log.debug(\"FtpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = lineRdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (banner == null) continue;\n                if (MULTILINE.match(banner)) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(), 0, 3) + \" \";\n\n                    // Create new regExp to look for last line\n                    // of this mutli line response\n                    try {\n                        ENDMULTILINE = new RE(multiLineRC);\n                    } catch (RESyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = lineRdr.readLine();\n                    } while (banner != null && !ENDMULTILINE.match(banner));\n                    if (banner == null) continue;\n                }\n\n                StringTokenizer t = new StringTokenizer(banner);\n\n                int rc = -1;\n                try {\n                    rc = Integer.parseInt(t.nextToken());\n                } catch (NumberFormatException nfE) {\n                    nfE.fillInStackTrace();\n                    log.warn(\"Banner page returned invalid result code\", nfE);\n                }\n\n                // Verify that return code is in proper range.\n                //\n                if (rc >= 200 && rc <= 299) {\n                    // \n                    // Attempt to login if userid and password available\n                    //\n                    boolean bLoginOk = false;\n                    if (userid == null || userid.length() == 0 || password == null || password.length() == 0) {\n                        bLoginOk = true;\n                    } else {\n                        // send the use string\n                        //\n                        String cmd = \"user \" + userid + \"\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // get the response code.\n                        //\n                        String response = null;\n                        do {\n                            response = lineRdr.readLine();\n                        } while (response != null && MULTILINE.match(response));\n                        if (response == null) continue;\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        // Verify that return code is in proper range.\n                        //\n                        if (rc >= 200 && rc <= 399) {\n                            // send the password\n                            //\n                            cmd = \"pass \" + password + \"\\r\\n\";\n                            socket.getOutputStream().write(cmd.getBytes());\n\n                            // get the response...check for multi-line response\n                            //\n                            response = lineRdr.readLine();\n                            if (response == null) continue;\n\n                            if (MULTILINE.match(response)) {\n                                // Ok we have a multi-line response...first three\n                                // chars of the response line are the return code.\n                                // The last line of the response will start with\n                                // return code followed by a space.\n                                String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                                // Create new regExp to look for last line\n                                // of this mutli line response\n                                try {\n                                    ENDMULTILINE = new RE(multiLineRC);\n                                } catch (RESyntaxException ex) {\n                                    throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                                }\n\n                                // read until we hit the last line of the multi-line\n                                // response\n                                do {\n                                    response = lineRdr.readLine();\n                                } while (response != null && !ENDMULTILINE.match(response));\n                                if (response == null) continue;\n                            }\n\n                            // Verify that return code is in proper range.\n                            //\n                            if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: tokenizing respone to check for return code: \" + response);\n                            t = new StringTokenizer(response);\n                            rc = Integer.parseInt(t.nextToken());\n                            if (rc >= 200 && rc <= 299) {\n                                if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: Login successful, parsed return code: \" + rc);\n                                bLoginOk = true;\n                            } else {\n                                if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: Login failed, parsed return code: \" + rc);\n                                bLoginOk = false;\n                            }\n                        }\n                    }\n\n                    if (bLoginOk) {\n                        // FTP should recognize the QUIT command\n                        //\n                        String cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        String response = lineRdr.readLine();\n                        if (response == null) continue;\n                        if (MULTILINE.match(response)) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                            // Create new regExp to look for last line\n                            // of this mutli line response\n                            try {\n                                ENDMULTILINE = new RE(multiLineRC);\n                            } catch (RESyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = lineRdr.readLine();\n                            } while (response != null && !ENDMULTILINE.match(response));\n\n                            if (response == null) continue;\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        // Verify that return code is in proper range.\n                        //\n\n                        if (rc >= 200 && rc <= 299) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                        // Special Case: Also want to accept the following ERROR message\n                        // generated by some FTP servers following a QUIT command without\n                        // a previously successful login:\n                        //\n                        // \"530 QUIT : User not logged in. Please login with USER and PASS\n                        // first.\"\n                        //\n                        else if (rc == 530 && response.indexOf(FTP_ERROR_530_TEXT) != -1) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                        // Special Case: Also want to accept the following ERROR message\n                        // generated by some FTP servers following a QUIT command without\n                        // a previously successful login:\n                        //\n                        // \"425 Session is disconnected.\"\n                        //\n                        else if (rc == 425 && response.indexOf(FTP_ERROR_425_TEXT) != -1) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or login/QUIT command process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NumberFormatException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.info(\"FtpMonitor.poll: NumberFormatException while polling address: \" + ipv4Addr, e);\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                log.warn(\"FtpMonitor.poll: No route to host exception for address: \" + ipv4Addr, e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                // Ignore\n                log.debug(\"FtpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                e.fillInStackTrace();\n                log.debug(\"FtpMonitor.poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.debug(\"FtpMonitor.poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    log.debug(\"FtpMonitor.poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21699,"modified_method":"/**\n     * Poll the specified address for FTP service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 21). If the connection request is successful, the banner line generated by the interface\n     * is parsed and if the extracted return code indicates that we are talking to an FTP\n     * server we continue. Next, an FTP 'QUIT' command is sent. Provided that the interface's\n     * response is valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // check the interface type\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Get the category logger\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // get the parameters\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String userid = ParameterMap.getKeyedString(parameters, \"userid\", null);\n        String password = ParameterMap.getKeyedString(parameters, \"password\", null);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Extract the address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"FtpMonitor.poll: Polling interface: \" + ipv4Addr.getHostAddress() + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                log.debug(\"FtpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = lineRdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (banner == null) continue;\n                if (MULTILINE.match(banner)) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(), 0, 3) + \" \";\n\n                    // Create new regExp to look for last line\n                    // of this mutli line response\n                    try {\n                        ENDMULTILINE = new RE(multiLineRC);\n                    } catch (RESyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = lineRdr.readLine();\n                    } while (banner != null && !ENDMULTILINE.match(banner));\n                    if (banner == null) continue;\n                }\n\n                StringTokenizer t = new StringTokenizer(banner);\n\n                int rc = -1;\n                try {\n                    rc = Integer.parseInt(t.nextToken());\n                } catch (NumberFormatException nfE) {\n                    nfE.fillInStackTrace();\n                    log.warn(\"Banner page returned invalid result code\", nfE);\n                }\n\n                // Verify that return code is in proper range.\n                //\n                if (rc >= 200 && rc <= 299) {\n                    // \n                    // Attempt to login if userid and password available\n                    //\n                    boolean bLoginOk = false;\n                    if (userid == null || userid.length() == 0 || password == null || password.length() == 0) {\n                        bLoginOk = true;\n                    } else {\n                        // send the use string\n                        //\n                        String cmd = \"user \" + userid + \"\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // get the response code.\n                        //\n                        String response = null;\n                        do {\n                            response = lineRdr.readLine();\n                        } while (response != null && MULTILINE.match(response));\n                        if (response == null) continue;\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        // Verify that return code is in proper range.\n                        //\n                        if (rc >= 200 && rc <= 399) {\n                            // send the password\n                            //\n                            cmd = \"pass \" + password + \"\\r\\n\";\n                            socket.getOutputStream().write(cmd.getBytes());\n\n                            // get the response...check for multi-line response\n                            //\n                            response = lineRdr.readLine();\n                            if (response == null) continue;\n\n                            if (MULTILINE.match(response)) {\n                                // Ok we have a multi-line response...first three\n                                // chars of the response line are the return code.\n                                // The last line of the response will start with\n                                // return code followed by a space.\n                                String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                                // Create new regExp to look for last line\n                                // of this mutli line response\n                                try {\n                                    ENDMULTILINE = new RE(multiLineRC);\n                                } catch (RESyntaxException ex) {\n                                    throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                                }\n\n                                // read until we hit the last line of the multi-line\n                                // response\n                                do {\n                                    response = lineRdr.readLine();\n                                } while (response != null && !ENDMULTILINE.match(response));\n                                if (response == null) continue;\n                            }\n\n                            // Verify that return code is in proper range.\n                            //\n                            if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: tokenizing respone to check for return code: \" + response);\n                            t = new StringTokenizer(response);\n                            rc = Integer.parseInt(t.nextToken());\n                            if (rc >= 200 && rc <= 299) {\n                                if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: Login successful, parsed return code: \" + rc);\n                                bLoginOk = true;\n                            } else {\n                                if (log.isDebugEnabled()) log.debug(\"FtpMonitor.poll: Login failed, parsed return code: \" + rc);\n                                bLoginOk = false;\n                            }\n                        }\n                    }\n\n                    if (bLoginOk) {\n                        // FTP should recognize the QUIT command\n                        //\n                        String cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        String response = lineRdr.readLine();\n                        if (response == null) continue;\n                        if (MULTILINE.match(response)) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                            // Create new regExp to look for last line\n                            // of this mutli line response\n                            try {\n                                ENDMULTILINE = new RE(multiLineRC);\n                            } catch (RESyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = lineRdr.readLine();\n                            } while (response != null && !ENDMULTILINE.match(response));\n\n                            if (response == null) continue;\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        // Verify that return code is in proper range.\n                        //\n\n                        if (rc >= 200 && rc <= 299) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                        // Special Case: Also want to accept the following ERROR message\n                        // generated by some FTP servers following a QUIT command without\n                        // a previously successful login:\n                        //\n                        // \"530 QUIT : User not logged in. Please login with USER and PASS\n                        // first.\"\n                        //\n                        else if (rc == 530 && response.indexOf(FTP_ERROR_530_TEXT) != -1) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                        // Special Case: Also want to accept the following ERROR message\n                        // generated by some FTP servers following a QUIT command without\n                        // a previously successful login:\n                        //\n                        // \"425 Session is disconnected.\"\n                        //\n                        else if (rc == 425 && response.indexOf(FTP_ERROR_425_TEXT) != -1) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or login/QUIT command process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NumberFormatException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.info(\"FtpMonitor.poll: NumberFormatException while polling address: \" + ipv4Addr, e);\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                log.warn(\"FtpMonitor.poll: No route to host exception for address: \" + ipv4Addr, e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                // Ignore\n                log.debug(\"FtpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                e.fillInStackTrace();\n                log.debug(\"FtpMonitor.poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.debug(\"FtpMonitor.poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    log.debug(\"FtpMonitor.poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Poll the specified address for service availability.\n\t *\n\t * During the poll an attempt is made to call the specified\n\t * external script or program.  If the connection request is\n\t * successful, the banner line returned as standard output by\n\t * the script or program is parsed for a partial match with\n\t * the banner string specified in the poller configuration.\n\t * Provided that the script's response is valid we set the\n\t * service status to SERVICE_AVAILABLE and return.\n\t *\n\t * The timeout is handled by ExecRunner and is also passed\n\t * as a parameter to the script or program being called.\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...)\n\t * to be used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t * @throws java.lang.RuntimeException Thrown if the interface\n\t * experiences error during the poll.\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t//\n\t\t// Process parameters\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t//\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\t//\n\t\t// convert timeout to seconds for ExecRunner\n\t\t//\n\t\tif (0 < timeout && timeout < 1000)\n\t\t\ttimeout = 1;\n\t\telse\n\t\t\ttimeout = timeout/1000;\n                String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n                if (rrdPath == null || dsName == null)\n                {\n                        log.info(\"poll: RRD repository and/or ds-name not specified in parameters, latency data will not be stored.\");\n                }\n\n                String args = ParameterMap.getKeyedString(parameters, \"args\", null);\n\n\t\t// Script\n\t\t//\n\t\tString script = ParameterMap.getKeyedString(parameters, \"script\", null);\n\t\tif(script == null)\n\t\t{\n\t\t\tthrow new RuntimeException(\"GpMonitor: required parameter 'script' is not present in supplied properties.\");\n\t\t}\n\t\t\n\t\t// BannerMatch\n\t\t//\n\t\tString strBannerMatch = (String)parameters.get(\"banner\");\n\n\t\t// Get the address instance.\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(\"poll: address = \" + ipv4Addr.getHostAddress()\n\t\t\t\t  + \", script = \" + script + \", arguments = \" + args\n\t\t\t\t  + \", timeout(seconds) = \" + timeout + \", retry = \" + retry);\n\n\t\t// Give it a whirl\n\t\t//\n\t\tint serviceStatus = SERVICE_UNAVAILABLE;\n                long responseTime = -1;\n\n\t\tfor (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlong sentTime = System.currentTimeMillis();\n\t\t\t\t\n\t\t\t\tint exitStatus = 100;\n\t\t\t\tExecRunner er = new ExecRunner();\n\t\t\t\ter.setMaxRunTimeSecs(timeout);\n\t\t\t\tif (args == null)\n\t\t\t\t\texitStatus = er.exec(script + \" --hostname \" + ipv4Addr.getHostAddress() + \" --timeout \" +timeout);\n\t\t\t\telse\n\t\t\t\t\texitStatus = er.exec(script + \" --hostname \" + ipv4Addr.getHostAddress() + \" --timeout \" +timeout + \" \" + args);\n\t\t\t\tif (exitStatus != 0)\n\t\t\t\t{\n\t\t\t\t\tlog.debug(script + \" failed with exit code \" + exitStatus);\n\t\t\t\t\tserviceStatus = SERVICE_UNAVAILABLE;\n\t\t\t\t}\n\t\t\t\tif (er.isMaxRunTimeExceeded())\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.debug(script + \" failed. Timeout exceeded\");\n\t\t\t\t\t\tserviceStatus = SERVICE_UNAVAILABLE;\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (exitStatus == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tString scriptoutput = \"\";\n\t\t\t\t\t\tscriptoutput = er.getOutString();\n\t\t\t\t\t\tString scripterror = \"\";\n\t\t\t\t\t\tscripterror = er.getErrString();\n                                        \tif (!scriptoutput.equals(\"\"))\n\t\t\t\t\t\t\tlog.debug(script + \" output  = \" + scriptoutput);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlog.debug(script + \" returned no output\");\n                                        \tif (!scripterror.equals(\"\"))\n\t\t\t\t\t\t\tlog.debug(script + \" error = \" + scripterror);\n\t\t\t\t\t\tif (strBannerMatch == null || strBannerMatch.equals(\"*\"))\n\t\t\t\t\t\t\tserviceStatus = SERVICE_AVAILABLE;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (scriptoutput.indexOf(strBannerMatch) > -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tserviceStatus = SERVICE_AVAILABLE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse serviceStatus = SERVICE_UNRESPONSIVE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (serviceStatus == SERVICE_AVAILABLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n\t\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlog.debug(\"poll: responseTime = \" + responseTime + \"ms\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (responseTime >= 0 && rrdPath != null && dsName != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tcatch(ArrayIndexOutOfBoundsException e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(script + \" ArrayIndexOutOfBoundsException\");\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(\"IOException occurred. Check for proper operation of \" + script);\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(script + \"Exception occurred\");\n\t\t\t}\n\t\t}\n\t\n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\tlog.debug(\"poll: GP - serviceStatus= \" +serviceStatus + \"  \" + ipv4Addr.getHostAddress());\n\t\treturn serviceStatus;\n\t}","id":21700,"modified_method":"/**\n\t * Poll the specified address for service availability.\n\t *\n\t * During the poll an attempt is made to call the specified\n\t * external script or program.  If the connection request is\n\t * successful, the banner line returned as standard output by\n\t * the script or program is parsed for a partial match with\n\t * the banner string specified in the poller configuration.\n\t * Provided that the script's response is valid we set the\n\t * service status to SERVICE_AVAILABLE and return.\n\t *\n\t * The timeout is handled by ExecRunner and is also passed\n\t * as a parameter to the script or program being called.\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...)\n\t * to be used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t * @throws java.lang.RuntimeException Thrown if the interface\n\t * experiences error during the poll.\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t//\n\t\t// Process parameters\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t//\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\t//\n\t\t// convert timeout to seconds for ExecRunner\n\t\t//\n\t\tif (0 < timeout && timeout < 1000)\n\t\t\ttimeout = 1;\n\t\telse\n\t\t\ttimeout = timeout/1000;\n                String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n                if (rrdPath == null || dsName == null)\n                {\n                        log.info(\"poll: RRD repository and/or ds-name not specified in parameters, latency data will not be stored.\");\n                }\n\n                String args = ParameterMap.getKeyedString(parameters, \"args\", null);\n\n\t\t// Script\n\t\t//\n\t\tString script = ParameterMap.getKeyedString(parameters, \"script\", null);\n\t\tif(script == null)\n\t\t{\n\t\t\tthrow new RuntimeException(\"GpMonitor: required parameter 'script' is not present in supplied properties.\");\n\t\t}\n\t\t\n\t\t// BannerMatch\n\t\t//\n\t\tString strBannerMatch = (String)parameters.get(\"banner\");\n\n\t\t// Get the address instance.\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(\"poll: address = \" + ipv4Addr.getHostAddress()\n\t\t\t\t  + \", script = \" + script + \", arguments = \" + args\n\t\t\t\t  + \", timeout(seconds) = \" + timeout + \", retry = \" + retry);\n\n\t\t// Give it a whirl\n\t\t//\n\t\tint serviceStatus = SERVICE_UNAVAILABLE;\n                long responseTime = -1;\n\n\t\tfor (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlong sentTime = System.currentTimeMillis();\n\t\t\t\t\n\t\t\t\tint exitStatus = 100;\n\t\t\t\tExecRunner er = new ExecRunner();\n\t\t\t\ter.setMaxRunTimeSecs(timeout);\n\t\t\t\tif (args == null)\n\t\t\t\t\texitStatus = er.exec(script + \" --hostname \" + ipv4Addr.getHostAddress() + \" --timeout \" +timeout);\n\t\t\t\telse\n\t\t\t\t\texitStatus = er.exec(script + \" --hostname \" + ipv4Addr.getHostAddress() + \" --timeout \" +timeout + \" \" + args);\n\t\t\t\tif (exitStatus != 0)\n\t\t\t\t{\n\t\t\t\t\tlog.debug(script + \" failed with exit code \" + exitStatus);\n\t\t\t\t\tserviceStatus = SERVICE_UNAVAILABLE;\n\t\t\t\t}\n\t\t\t\tif (er.isMaxRunTimeExceeded())\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.debug(script + \" failed. Timeout exceeded\");\n\t\t\t\t\t\tserviceStatus = SERVICE_UNAVAILABLE;\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (exitStatus == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tString scriptoutput = \"\";\n\t\t\t\t\t\tscriptoutput = er.getOutString();\n\t\t\t\t\t\tString scripterror = \"\";\n\t\t\t\t\t\tscripterror = er.getErrString();\n                                        \tif (!scriptoutput.equals(\"\"))\n\t\t\t\t\t\t\tlog.debug(script + \" output  = \" + scriptoutput);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlog.debug(script + \" returned no output\");\n                                        \tif (!scripterror.equals(\"\"))\n\t\t\t\t\t\t\tlog.debug(script + \" error = \" + scripterror);\n\t\t\t\t\t\tif (strBannerMatch == null || strBannerMatch.equals(\"*\"))\n\t\t\t\t\t\t\tserviceStatus = SERVICE_AVAILABLE;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (scriptoutput.indexOf(strBannerMatch) > -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tserviceStatus = SERVICE_AVAILABLE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse serviceStatus = SERVICE_UNRESPONSIVE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (serviceStatus == SERVICE_AVAILABLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n\t\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlog.debug(\"poll: responseTime = \" + responseTime + \"ms\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (responseTime >= 0 && rrdPath != null && dsName != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tcatch(ArrayIndexOutOfBoundsException e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(script + \" ArrayIndexOutOfBoundsException\");\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(\"IOException occurred. Check for proper operation of \" + script);\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\te.fillInStackTrace();\n\t\t\t\tlog.debug(script + \"Exception occurred\");\n\t\t\t}\n\t\t}\n\t\n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\tlog.debug(\"poll: GP - serviceStatus= \" +serviceStatus + \"  \" + ipv4Addr.getHostAddress());\n\t\treturn serviceStatus;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Poll the specified address for HTTP service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port(s) (by default TCP\n     * ports 80, 8080, 8888). If the connection request is successful, an HTTP 'GET' command is\n     * sent to the interface. The response is parsed and a return code extracted and verified.\n     * Provided that the interface's response is valid we set the service status to\n     * SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, and others) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int[] ports = ParameterMap.getKeyedIntegerArray(parameters, \"port\", DEFAULT_PORTS);\n        String url = ParameterMap.getKeyedString(parameters, \"url\", DEFAULT_URL);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n        int response = ParameterMap.getKeyedInteger(parameters, \"response\", -1);\n        String responseText = ParameterMap.getKeyedString(parameters, \"response text\", null);\n\n        // Set to true if \"response\" property has a valid return code specified.\n        //  By default response will be deemed valid if the return code\n        //  falls in the range: 99 < rc < 500\n        //  This is based on the following information from RFC 1945 (HTTP 1.0)\n        // \t\tHTTP 1.0 GET return codes:\n        //\t\t \t1xx: Informational - Not used, future use\n        //\t\t\t2xx: Success\n        //\t\t\t3xx: Redirection\n        //\t\t\t4xx: Client error\n        //\t\t\t5xx: Server error\n        boolean bStrictResponse = (response > 99 && response < 600);\n\n        // Extract the ip address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n        String strIpv4Addr = ipv4Addr.getHostAddress();\n\n        // Following a successful poll 'currentPort' will contain the port on\n        // the remote host that was successfully queried\n        //\n        final String cmd = \"GET \" + url + \" HTTP/1.0\\r\\nHost: \" + strIpv4Addr + \"\\r\\n\\r\\n\";\n\n        // Cycle through the port list\n        //\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        int currentPort = -1;\n        long responseTime = -1;\n        for (int portIndex = 0; portIndex < ports.length && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; portIndex++) {\n            currentPort = ports[portIndex];\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Port = \" + currentPort + \", Address = \" + ipv4Addr + \", Timeout = \" + timeout + \", Retry = \" + retry);\n            }\n\n            for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n                Socket socket = null;\n                try {\n                    //\n                    // create a connected socket\n                    //\n                    socket = new Socket();\n                    socket.connect(new InetSocketAddress(ipv4Addr, currentPort), timeout);\n                    socket.setSoTimeout(timeout);\n\n                    log.debug(\"HttpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + currentPort);\n\n                    // We're connected, so upgrade status to unresponsive\n                    serviceStatus = SERVICE_UNRESPONSIVE;\n\n                    //\n                    // Issue HTTP 'GET' command and check the return code in the response\n                    //\n                    long sentTime = System.currentTimeMillis();\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Get a buffered input stream that will read a line\n                    // at a time\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                    String line = lineRdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n                    if (line == null) continue;\n\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"poll: response= \" + line);\n                        log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                    }\n\n                    if (line.startsWith(\"HTTP/\")) {\n                        StringTokenizer t = new StringTokenizer(line);\n                        t.nextToken();\n\n                        int rVal = -1;\n                        try {\n                            rVal = Integer.parseInt(t.nextToken());\n                        } catch (NumberFormatException nfE) {\n                            log.info(\"Error converting response code from host = \" + ipv4Addr + \", response = \" + line);\n                        }\n\n                        if (bStrictResponse && rVal == response) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 500 && (url.equals(DEFAULT_URL))) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 400) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else {\n                            serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                        }\n                    }\n\n                    if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE && responseText != null && responseText.length() > 0) {\n                        // This loop will rip through the rest of the Response Header\n                        //\n                        do {\n                            line = lineRdr.readLine();\n\n                        } while (line != null && line.length() != 0);\n                        if (line == null) continue;\n\n                        // Now lets rip through the Entity-Body (i.e., content) looking\n                        // for the required text.\n                        //\n                        boolean bResponseTextFound = false;\n                        do {\n                            line = lineRdr.readLine();\n\n                            if (line != null) {\n                                int responseIndex = line.indexOf(responseText);\n                                if (responseIndex != -1) bResponseTextFound = true;\n                            }\n\n                        } while (line != null && !bResponseTextFound);\n\n                        // Set the status back to failed\n                        //\n                        if (!bResponseTextFound) serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                } catch (NoRouteToHostException e) {\n                    e.fillInStackTrace();\n                    log.warn(\"No route to host exception for address \" + ipv4Addr, e);\n                    portIndex = ports.length; // Will cause outer for(;;) to terminate\n                    break; // Break out of inner for(;;)\n                } catch (InterruptedIOException e) {\n                    // Ignore\n                    log.debug(\"HttpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n                } catch (ConnectException e) {\n                    // Connection Refused. Continue to retry.\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"Connection exception for \" + ipv4Addr + \":\" + ports[portIndex]);\n\n                } catch (IOException e) {\n                    // Ignore\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"IOException while polling address \" + ipv4Addr, e);\n                } finally {\n                    try {\n                        // Close the socket\n                        if (socket != null) socket.close();\n                    } catch (IOException e) {\n                        e.fillInStackTrace();\n                        log.debug(\"Error closing socket connection\", e);\n                    }\n                }\n\n            } // end for (attempts)\n        } // end for (ports)\n\n        // Add the 'qualifier' parm to the parameter map. This parm will\n        // contain the port on which the service was found if AVAILABLE or\n        // will contain a comma delimited list of the port(s) which were\n        // tried if the service is UNAVAILABLE\n        //\n        if (serviceStatus == ServiceMonitor.SERVICE_UNAVAILABLE) {\n            //\n            // Build port string\n            //\n            StringBuffer testedPorts = new StringBuffer();\n            for (int i = 0; i < ports.length; i++) {\n                if (i == 0)\n                    testedPorts.append(ports[0]);\n                else\n                    testedPorts.append(',').append(ports[i]);\n            }\n\n            // Add to parameter map\n            parameters.put(\"qualifier\", testedPorts.toString());\n        } else if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE) {\n            parameters.put(\"qualifier\", Integer.toString(currentPort));\n\n            // Store response time in RRD\n            if (responseTime >= 0 && rrdPath != null) {\n                try {\n                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                } catch (RuntimeException rex) {\n                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21701,"modified_method":"/**\n     * Poll the specified address for HTTP service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port(s) (by default TCP\n     * ports 80, 8080, 8888). If the connection request is successful, an HTTP 'GET' command is\n     * sent to the interface. The response is parsed and a return code extracted and verified.\n     * Provided that the interface's response is valid we set the service status to\n     * SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, and others) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int[] ports = ParameterMap.getKeyedIntegerArray(parameters, \"port\", DEFAULT_PORTS);\n        String url = ParameterMap.getKeyedString(parameters, \"url\", DEFAULT_URL);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n        int response = ParameterMap.getKeyedInteger(parameters, \"response\", -1);\n        String responseText = ParameterMap.getKeyedString(parameters, \"response text\", null);\n\n        // Set to true if \"response\" property has a valid return code specified.\n        //  By default response will be deemed valid if the return code\n        //  falls in the range: 99 < rc < 500\n        //  This is based on the following information from RFC 1945 (HTTP 1.0)\n        // \t\tHTTP 1.0 GET return codes:\n        //\t\t \t1xx: Informational - Not used, future use\n        //\t\t\t2xx: Success\n        //\t\t\t3xx: Redirection\n        //\t\t\t4xx: Client error\n        //\t\t\t5xx: Server error\n        boolean bStrictResponse = (response > 99 && response < 600);\n\n        // Extract the ip address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n        String strIpv4Addr = ipv4Addr.getHostAddress();\n\n        // Following a successful poll 'currentPort' will contain the port on\n        // the remote host that was successfully queried\n        //\n        final String cmd = \"GET \" + url + \" HTTP/1.0\\r\\nHost: \" + strIpv4Addr + \"\\r\\n\\r\\n\";\n\n        // Cycle through the port list\n        //\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        int currentPort = -1;\n        long responseTime = -1;\n        for (int portIndex = 0; portIndex < ports.length && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; portIndex++) {\n            currentPort = ports[portIndex];\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Port = \" + currentPort + \", Address = \" + ipv4Addr + \", Timeout = \" + timeout + \", Retry = \" + retry);\n            }\n\n            for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n                Socket socket = null;\n                try {\n                    //\n                    // create a connected socket\n                    //\n                    socket = new Socket();\n                    socket.connect(new InetSocketAddress(ipv4Addr, currentPort), timeout);\n                    socket.setSoTimeout(timeout);\n\n                    log.debug(\"HttpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + currentPort);\n\n                    // We're connected, so upgrade status to unresponsive\n                    serviceStatus = SERVICE_UNRESPONSIVE;\n\n                    //\n                    // Issue HTTP 'GET' command and check the return code in the response\n                    //\n                    long sentTime = System.currentTimeMillis();\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Get a buffered input stream that will read a line\n                    // at a time\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                    String line = lineRdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n                    if (line == null) continue;\n\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"poll: response= \" + line);\n                        log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                    }\n\n                    if (line.startsWith(\"HTTP/\")) {\n                        StringTokenizer t = new StringTokenizer(line);\n                        t.nextToken();\n\n                        int rVal = -1;\n                        try {\n                            rVal = Integer.parseInt(t.nextToken());\n                        } catch (NumberFormatException nfE) {\n                            log.info(\"Error converting response code from host = \" + ipv4Addr + \", response = \" + line);\n                        }\n\n                        if (bStrictResponse && rVal == response) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 500 && (url.equals(DEFAULT_URL))) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 400) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        } else {\n                            serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                        }\n                    }\n\n                    if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE && responseText != null && responseText.length() > 0) {\n                        // This loop will rip through the rest of the Response Header\n                        //\n                        do {\n                            line = lineRdr.readLine();\n\n                        } while (line != null && line.length() != 0);\n                        if (line == null) continue;\n\n                        // Now lets rip through the Entity-Body (i.e., content) looking\n                        // for the required text.\n                        //\n                        boolean bResponseTextFound = false;\n                        do {\n                            line = lineRdr.readLine();\n\n                            if (line != null) {\n                                int responseIndex = line.indexOf(responseText);\n                                if (responseIndex != -1) bResponseTextFound = true;\n                            }\n\n                        } while (line != null && !bResponseTextFound);\n\n                        // Set the status back to failed\n                        //\n                        if (!bResponseTextFound) serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                } catch (NoRouteToHostException e) {\n                    e.fillInStackTrace();\n                    log.warn(\"No route to host exception for address \" + ipv4Addr, e);\n                    portIndex = ports.length; // Will cause outer for(;;) to terminate\n                    break; // Break out of inner for(;;)\n                } catch (InterruptedIOException e) {\n                    // Ignore\n                    log.debug(\"HttpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n                } catch (ConnectException e) {\n                    // Connection Refused. Continue to retry.\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"Connection exception for \" + ipv4Addr + \":\" + ports[portIndex]);\n\n                } catch (IOException e) {\n                    // Ignore\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"IOException while polling address \" + ipv4Addr, e);\n                } finally {\n                    try {\n                        // Close the socket\n                        if (socket != null) socket.close();\n                    } catch (IOException e) {\n                        e.fillInStackTrace();\n                        log.debug(\"Error closing socket connection\", e);\n                    }\n                }\n\n            } // end for (attempts)\n        } // end for (ports)\n\n        // Add the 'qualifier' parm to the parameter map. This parm will\n        // contain the port on which the service was found if AVAILABLE or\n        // will contain a comma delimited list of the port(s) which were\n        // tried if the service is UNAVAILABLE\n        //\n        if (serviceStatus == ServiceMonitor.SERVICE_UNAVAILABLE) {\n            //\n            // Build port string\n            //\n            StringBuffer testedPorts = new StringBuffer();\n            for (int i = 0; i < ports.length; i++) {\n                if (i == 0)\n                    testedPorts.append(ports[0]);\n                else\n                    testedPorts.append(',').append(ports[i]);\n            }\n\n            // Add to parameter map\n            parameters.put(\"qualifier\", testedPorts.toString());\n        } else if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE) {\n            parameters.put(\"qualifier\", Integer.toString(currentPort));\n\n            // Store response time in RRD\n            if (responseTime >= 0 && rrdPath != null) {\n                try {\n                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                } catch (RuntimeException rex) {\n                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Poll the specified address for HTTPS service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port(s) (by default TCP\n     * port 443). If the connection request is successful, an HTTP 'GET' command is sent to the\n     * interface. The response is parsed and a return code extracted and verified. Provided\n     * that the interface's response is valid we set the service status to SERVICE_AVAILABLE\n     * and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int[] ports = ParameterMap.getKeyedIntegerArray(parameters, \"port\", DEFAULT_PORTS);\n        String url = ParameterMap.getKeyedString(parameters, \"url\", DEFAULT_URL);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        int response = ParameterMap.getKeyedInteger(parameters, \"response\", -1);\n        String responseText = ParameterMap.getKeyedString(parameters, \"response text\", null);\n\n        // Set to true if \"response\" property has a valid return code specified.\n        //  By default response will be deemed valid if the return code\n        //  falls in the range: 100 < rc < 400\n        //  This is based on the following information from RFC 1945 (HTTP 1.0)\n        // \t\tHTTP 1.0 GET return codes:\n        //\t\t \t1xx: Informational - Not used, future use\n        //\t\t\t2xx: Success\n        //\t\t\t3xx: Redirection\n        //\t\t\t4xx: Client error\n        //\t\t\t5xx: Server error\n        boolean bStrictResponse = (response > 99 && response < 600);\n\n        // Extract the ip address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        // Following a successful poll 'currentPort' will contain the port on\n        // the remote host that was successfully queried\n        //\n        final String cmd = \"GET \" + url + \" HTTP/1.0\\r\\n\\r\\n\";\n\n        //set properties to allow the use of SSL for the https connection\n        System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");\n        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());\n\n        // Cycle through the port list\n        //\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        int currentPort = -1;\n        for (int portIndex = 0; portIndex < ports.length && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; portIndex++) {\n            currentPort = ports[portIndex];\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Port = \" + currentPort + \", Address = \" + ipv4Addr + \", Timeout = \" + timeout + \", Retry = \" + retry);\n            }\n\n            for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n                Socket socket = null;\n                Socket sslSocket = null;\n                try {\n                    //set up the certificate validation. USING THIS SCHEME WILL ACCEPT ALL\n                    // CERTIFICATES\n                    SSLSocketFactory sslSF = null;\n                    TrustManager[] tm = { new RelaxedX509TrustManager()};\n                    SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                    sslContext.init(null, tm, new java.security.SecureRandom());\n                    sslSF = sslContext.getSocketFactory();\n\n                    //connect and communicate\n                    long sentTime = System.currentTimeMillis();\n                    socket = new Socket();\n                    socket.connect(new InetSocketAddress(ipv4Addr, currentPort), timeout);\n                    socket.setSoTimeout(timeout);\n                    log.debug(getClass().getName() + \": connect successful!!\");\n                    // We're connected, so upgrade status to unresponsive\n                    serviceStatus = SERVICE_UNRESPONSIVE;\n                    sslSocket = sslSF.createSocket(socket, ipv4Addr.getHostAddress(), currentPort, true);\n                    sslSocket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Get a buffered input stream that will read a line\n                    // at a time\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));\n                    String line = lineRdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n                    if (line == null) continue;\n\n                    if (log.isDebugEnabled()) log.debug(\"HttpPlugin.poll: Response = \" + line);\n\n                    if (line.startsWith(\"HTTP/\")) {\n                        StringTokenizer t = new StringTokenizer(line);\n                        t.nextToken();\n\n                        int rVal = -1;\n                        try {\n                            rVal = Integer.parseInt(t.nextToken());\n                        } catch (NumberFormatException nfE) {\n                            log.info(\"Error converting response code from host = \" + ipv4Addr + \", response = \" + line);\n                        }\n\n                        if (bStrictResponse && rVal == response) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 500 && (url.equals(DEFAULT_URL))) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 400) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else {\n                            serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                        }\n                    }\n\n                    if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE && responseText != null && responseText.length() > 0) {\n                        // This loop will rip through the rest of the Response Header\n                        //\n                        do {\n                            line = lineRdr.readLine();\n\n                        } while (line != null && line.length() != 0);\n                        if (line == null) continue;\n\n                        // Now lets rip through the Entity-Body (i.e., content) looking\n                        // for the required text.\n                        //\n                        boolean bResponseTextFound = false;\n                        do {\n                            line = lineRdr.readLine();\n\n                            if (line != null) {\n                                int responseIndex = line.indexOf(responseText);\n                                if (responseIndex != -1) bResponseTextFound = true;\n                            }\n\n                        } while (line != null && !bResponseTextFound);\n\n                        // Set the status back to failed\n                        //\n                        if (!bResponseTextFound) serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                } catch (NoRouteToHostException e) {\n                    e.fillInStackTrace();\n                    log.warn(\"No route to host exception for address \" + ipv4Addr, e);\n                    portIndex = ports.length; // Will cause outer for(;;) to terminate\n                    break; // Break out of inner for(;;)\n                } catch (ConnectException e) {\n                    // Connection Refused!! Continue to retry.\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"Connection exception for \" + ipv4Addr + \":\" + ports[portIndex]);\n\n                } catch (InterruptedIOException e) {\n                    log.debug(getClass().getName() + \": failed to connect within specified timeout (attempt #\" + attempts + \")\");\n                } catch (IOException e) {\n                    // Ignore\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"IOException while polling address \" + ipv4Addr, e);\n                } catch (Throwable t) {\n                    log.warn(getClass().getName() + \": An undeclared throwable exception caught contacting host \" + ipv4Addr, t);\n                    break;\n                } finally {\n                    try {\n                        // Close the socket\n                        if (socket != null) socket.close();\n                    } catch (IOException e) {\n                        e.fillInStackTrace();\n                        log.debug(\"Error closing socket connection\", e);\n                    }\n                }\n\n            } // end for (attempts)\n\n        } // end for (ports)\n\n        // Add the 'qualifier' parm to the parameter map. This parm will\n        // contain the port on which the service was found if AVAILABLE or\n        // will contain a comma delimited list of the port(s) which were\n        // tried if the service is UNAVAILABLE\n        //\n        if (serviceStatus == ServiceMonitor.SERVICE_UNAVAILABLE) {\n            //\n            // Build port string\n            //\n            StringBuffer testedPorts = new StringBuffer();\n            for (int i = 0; i < ports.length; i++) {\n                if (i == 0)\n                    testedPorts.append(ports[0]);\n                else\n                    testedPorts.append(',').append(ports[i]);\n            }\n\n            // Add to parameter map\n            parameters.put(\"qualifier\", testedPorts.toString());\n        } else {\n            parameters.put(\"qualifier\", Integer.toString(currentPort));\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21702,"modified_method":"/**\n     * Poll the specified address for HTTPS service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port(s) (by default TCP\n     * port 443). If the connection request is successful, an HTTP 'GET' command is sent to the\n     * interface. The response is parsed and a return code extracted and verified. Provided\n     * that the interface's response is valid we set the service status to SERVICE_AVAILABLE\n     * and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int[] ports = ParameterMap.getKeyedIntegerArray(parameters, \"port\", DEFAULT_PORTS);\n        String url = ParameterMap.getKeyedString(parameters, \"url\", DEFAULT_URL);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        int response = ParameterMap.getKeyedInteger(parameters, \"response\", -1);\n        String responseText = ParameterMap.getKeyedString(parameters, \"response text\", null);\n\n        // Set to true if \"response\" property has a valid return code specified.\n        //  By default response will be deemed valid if the return code\n        //  falls in the range: 100 < rc < 400\n        //  This is based on the following information from RFC 1945 (HTTP 1.0)\n        // \t\tHTTP 1.0 GET return codes:\n        //\t\t \t1xx: Informational - Not used, future use\n        //\t\t\t2xx: Success\n        //\t\t\t3xx: Redirection\n        //\t\t\t4xx: Client error\n        //\t\t\t5xx: Server error\n        boolean bStrictResponse = (response > 99 && response < 600);\n\n        // Extract the ip address\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        // Following a successful poll 'currentPort' will contain the port on\n        // the remote host that was successfully queried\n        //\n        final String cmd = \"GET \" + url + \" HTTP/1.0\\r\\n\\r\\n\";\n\n        //set properties to allow the use of SSL for the https connection\n        System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");\n        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());\n\n        // Cycle through the port list\n        //\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        int currentPort = -1;\n        for (int portIndex = 0; portIndex < ports.length && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; portIndex++) {\n            currentPort = ports[portIndex];\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Port = \" + currentPort + \", Address = \" + ipv4Addr + \", Timeout = \" + timeout + \", Retry = \" + retry);\n            }\n\n            for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n                Socket socket = null;\n                Socket sslSocket = null;\n                try {\n                    //set up the certificate validation. USING THIS SCHEME WILL ACCEPT ALL\n                    // CERTIFICATES\n                    SSLSocketFactory sslSF = null;\n                    TrustManager[] tm = { new RelaxedX509TrustManager()};\n                    SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                    sslContext.init(null, tm, new java.security.SecureRandom());\n                    sslSF = sslContext.getSocketFactory();\n\n                    //connect and communicate\n                    long sentTime = System.currentTimeMillis();\n                    socket = new Socket();\n                    socket.connect(new InetSocketAddress(ipv4Addr, currentPort), timeout);\n                    socket.setSoTimeout(timeout);\n                    log.debug(getClass().getName() + \": connect successful!!\");\n                    // We're connected, so upgrade status to unresponsive\n                    serviceStatus = SERVICE_UNRESPONSIVE;\n                    sslSocket = sslSF.createSocket(socket, ipv4Addr.getHostAddress(), currentPort, true);\n                    sslSocket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Get a buffered input stream that will read a line\n                    // at a time\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));\n                    String line = lineRdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n                    if (line == null) continue;\n\n                    if (log.isDebugEnabled()) log.debug(\"HttpPlugin.poll: Response = \" + line);\n\n                    if (line.startsWith(\"HTTP/\")) {\n                        StringTokenizer t = new StringTokenizer(line);\n                        t.nextToken();\n\n                        int rVal = -1;\n                        try {\n                            rVal = Integer.parseInt(t.nextToken());\n                        } catch (NumberFormatException nfE) {\n                            log.info(\"Error converting response code from host = \" + ipv4Addr + \", response = \" + line);\n                        }\n\n                        if (bStrictResponse && rVal == response) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 500 && (url.equals(DEFAULT_URL))) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else if (!bStrictResponse && rVal > 99 && rVal < 400) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        } else {\n                            serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                        }\n                    }\n\n                    if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE && responseText != null && responseText.length() > 0) {\n                        // This loop will rip through the rest of the Response Header\n                        //\n                        do {\n                            line = lineRdr.readLine();\n\n                        } while (line != null && line.length() != 0);\n                        if (line == null) continue;\n\n                        // Now lets rip through the Entity-Body (i.e., content) looking\n                        // for the required text.\n                        //\n                        boolean bResponseTextFound = false;\n                        do {\n                            line = lineRdr.readLine();\n\n                            if (line != null) {\n                                int responseIndex = line.indexOf(responseText);\n                                if (responseIndex != -1) bResponseTextFound = true;\n                            }\n\n                        } while (line != null && !bResponseTextFound);\n\n                        // Set the status back to failed\n                        //\n                        if (!bResponseTextFound) serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                    }\n                } catch (NoRouteToHostException e) {\n                    e.fillInStackTrace();\n                    log.warn(\"No route to host exception for address \" + ipv4Addr, e);\n                    portIndex = ports.length; // Will cause outer for(;;) to terminate\n                    break; // Break out of inner for(;;)\n                } catch (ConnectException e) {\n                    // Connection Refused!! Continue to retry.\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"Connection exception for \" + ipv4Addr + \":\" + ports[portIndex]);\n\n                } catch (InterruptedIOException e) {\n                    log.debug(getClass().getName() + \": failed to connect within specified timeout (attempt #\" + attempts + \")\");\n                } catch (IOException e) {\n                    // Ignore\n                    //\n                    e.fillInStackTrace();\n                    log.debug(\"IOException while polling address \" + ipv4Addr, e);\n                } catch (Throwable t) {\n                    log.warn(getClass().getName() + \": An undeclared throwable exception caught contacting host \" + ipv4Addr, t);\n                    break;\n                } finally {\n                    try {\n                        // Close the socket\n                        if (socket != null) socket.close();\n                    } catch (IOException e) {\n                        e.fillInStackTrace();\n                        log.debug(\"Error closing socket connection\", e);\n                    }\n                }\n\n            } // end for (attempts)\n\n        } // end for (ports)\n\n        // Add the 'qualifier' parm to the parameter map. This parm will\n        // contain the port on which the service was found if AVAILABLE or\n        // will contain a comma delimited list of the port(s) which were\n        // tried if the service is UNAVAILABLE\n        //\n        if (serviceStatus == ServiceMonitor.SERVICE_UNAVAILABLE) {\n            //\n            // Build port string\n            //\n            StringBuffer testedPorts = new StringBuffer();\n            for (int i = 0; i < ports.length; i++) {\n                if (i == 0)\n                    testedPorts.append(ports[0]);\n                else\n                    testedPorts.append(',').append(ports[i]);\n            }\n\n            // Add to parameter map\n            parameters.put(\"qualifier\", testedPorts.toString());\n        } else {\n            parameters.put(\"qualifier\", Integer.toString(currentPort));\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Update an RRD database file with latency/response time data.\n\t * \n\t * @param rrdJniInterface \tinterface used to issue RRD commands.\n\t * @param repository\t\tpath to the RRD file repository\n\t * @param addr\t\t\tinterface address\n\t * @param value\t\t\tvalue to update the RRD file with\n\t * \n\t * @return true if RRD file successfully created, false otherwise\n\t */\n\tpublic void updateRRD(Interface rrdJniInterface, String repository, InetAddress addr, String dsName, long value, org.opennms.netmgt.config.poller.Package pkg)\n\t{\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\t\t\n\t\t// Create RRD if it doesn't already exist\n\t\tcreateRRD(rrdJniInterface, repository, addr, dsName, pkg);\n\t\t\n\t\t// Build complete path\n\t\tString fullPath = repository + File.separator + addr.getHostAddress() + File.separator + dsName + \".rrd\";\n\t\t\n\t\t// update RRD database\n\t\tString cmd = \"update \" + fullPath + \" N:\" + String.valueOf(value);\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"updateRRD: issuing RRD update command: \" + cmd);\n\n\t\t// Issue the RRD 'create' command\n\t\tString[] results = Interface.launch(cmd);\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"updateRRD: RRD update command completed for \" + addr.getHostAddress());\n\t\t\t\n\t\t// Sanity check results array\n\t\tif (results == null)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t{\n\t\t\t\tlog.error(\"updateRRD: Unexpected failure calling native method launch() with command string: \" + cmd);\n\t\t\t\tlog.error(\"updateRRD: No error text available.\");\n\t\t\t}\n\t\t\tthrow new RuntimeException(\"RRD database 'update' failed for interface \" + addr.getHostAddress());\n\t\t}\n\t    \n\t\t// Check error string at index 0, will be null if create was successful\n\t\tif (results[0] != null)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\tlog.error(\"RRD database 'update' failed for \" + addr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t\tthrow new RuntimeException(\"RRD database 'update' failed for interface \" + addr.getHostAddress() + \", reason: \" + results[0]);\n\t\t}\n\t}","id":21703,"modified_method":"/**\n\t * Update an RRD database file with latency/response time data.\n\t * \n\t * @param rrdJniInterface \tinterface used to issue RRD commands.\n\t * @param repository\t\tpath to the RRD file repository\n\t * @param addr\t\t\tinterface address\n\t * @param value\t\t\tvalue to update the RRD file with\n\t * \n\t * @return true if RRD file successfully created, false otherwise\n\t */\n\tpublic void updateRRD(String repository, InetAddress addr, String dsName, long value, org.opennms.netmgt.config.poller.Package pkg)\n\t{\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\t\t\n\t\ttry {\n\t\t    // Create RRD if it doesn't already exist\n\t\t    createRRD(repository, addr, dsName, pkg);\n            \n\t\t    // add interface address to RRD repository path\n\t\t    String path = repository + File.separator + addr.getHostAddress();\n\t\t    \n\t\t    RrdUtils.updateRRD(addr.getHostAddress(), path, dsName, Long.toString(value));\n\t\t    \n        }\n\t\tcatch (RrdException e) {\n\t\t\tif(log.isEnabledFor(Priority.ERROR)) {\n                String msg = e.getMessage();\n                log.error(msg);\n                throw new RuntimeException(msg, e);\n            }\n\t\t}\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>This method is called after the framework creates an\n\t * instance of the plug-in. The framework passes the object a proxy\n\t * object that can be used to retreive configuration information \n\t * specific to the plug-in. Additionally, any parameters for the \n\t * plug-in from the package definition are passed using the \n\t * parameters element.<\/P>\n\t *\n\t * <P>If there is a critical error, like missing service libraries, the\n\t * the montior may throw a ServiceMonitorException. If the plug-in \n\t * throws an exception then the plug-in will be disabled in the\n\t * framework.<\/P>\n\t *\n\t * @param parameters\tNot currently used\n\t *\n\t * @exception java.lang.RuntimeException Thrown if\n\t * \tan unrecoverable error occurs that prevents the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Initialize jni RRD interface.\n\t\t// \n\t\ttry\n\t\t{\n\t\t\torg.opennms.netmgt.rrd.Interface.init();\n\t\t}\n\t\tcatch(SecurityException se)\n\t\t{\n\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", se);\n\t\t\tthrow new UndeclaredThrowableException(se);\n\t\t}\n\t\tcatch(UnsatisfiedLinkError ule)\n\t\t{\n\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", ule);\n\t\t\tthrow new UndeclaredThrowableException(ule);\n\t\t}\n\t\t\n\t\t// Save local reference to singleton instance \n\t\t//\n\t\tm_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","id":21704,"modified_method":"/**\n\t * <P>This method is called after the framework creates an\n\t * instance of the plug-in. The framework passes the object a proxy\n\t * object that can be used to retreive configuration information \n\t * specific to the plug-in. Additionally, any parameters for the \n\t * plug-in from the package definition are passed using the \n\t * parameters element.<\/P>\n\t *\n\t * <P>If there is a critical error, like missing service libraries, the\n\t * the montior may throw a ServiceMonitorException. If the plug-in \n\t * throws an exception then the plug-in will be disabled in the\n\t * framework.<\/P>\n\t *\n\t * @param parameters\tNot currently used\n\t *\n\t * @exception java.lang.RuntimeException Thrown if\n\t * \tan unrecoverable error occurs that prevents the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n        try {\n            RrdUtils.initialize();\n        }\n        catch (RrdException e) {\n            if(log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n\n        if (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Create an RRD database file for storing latency/response time\n\t * data.\n\t * \n\t * @param rrdJniInterface \tinterface used to issue RRD commands.\n\t * @param repository\t\tpath to the RRD file repository\n\t * @param addr\t\t\tinterface address\n\t * @param dsName\t\tdata source/RRD file name\n\t * \n\t * @return true if RRD file successfully created, false otherwise\n\t */\n\tpublic boolean createRRD(Interface rrdJniInterface, String repository, InetAddress addr, String dsName, org.opennms.netmgt.config.poller.Package pkg)\n\t{\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\t\t\n\t\t// add interface address to RRD repository path\n\t\tString path = repository + File.separator + addr.getHostAddress();\n\t\t\n\t\t// If a directory does not yet exist for this interface create it.\n\t\t//\n\t\tFile f = new File(path);\n\t\tif (!f.isDirectory())\n\t\t\tif (!f.mkdirs())\n\t\t\t\tthrow new RuntimeException(\"Unable to create RRD file repository, path: \" + path);\n\t\t\n\t\t// add RRD file name to path\n\t\tString fullPath = path + File.separator + dsName + \".rrd\";\n\t\t\n\t\tf = new File(fullPath);\n\t\tif (f.exists())\n\t\t{\n\t\t\t// Already exists, no need to create\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n                        // Build RRA portion of RRD create command\n                        //\n                        String cmdRRA = new String();\n                        List rraList = PollerConfigFactory.getInstance().getRRAList(pkg);\n                        Iterator j = rraList.iterator();\n                        while (j.hasNext())\n                        {\n                                String rra = (String)j.next();\n                                cmdRRA = cmdRRA.concat(\" \" + rra);\n                        }\n\n\t\t\t// Build RRD create command\n\t\t\t// \n\t\t\t// Step size: \t5 minutes\n\t\t\t// RRAs:    \t1 week of 5 minute average data\n\t\t\t//              6 months worth of hourly min, max, average data\n\t\t\tString cmd = \"create \" + fullPath + \" --step \" +\n\t\t\t\tPollerConfigFactory.getInstance().getStep(pkg) +\n\t\t\t\t\" DS:\" + dsName + \":GAUGE:600:U:U \" + \n\t\t\t\tcmdRRA;\n\t\t\t\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"createRRD: issuing RRD create command: \" + cmd);\n\t\t\t\n\t\t\t// Issue the RRD 'create' command\n\t\t\tString[] results = Interface.launch(cmd);\n\t\t    \n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"createRRD: RRD create command completed for \" + addr.getHostAddress());\n\t\t\t\t\n\t\t\t// Sanity check results array\n\t\t\tif (results == null)\n\t\t\t{\n\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t{\n\t\t\t\t\tlog.error(\"createRRD: Unexpected failure calling native method launch() with command string: \" + cmd);\n\t\t\t\t\tlog.error(\"createRRD: No error text available.\");\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(\"RRD database 'create' failed for interface \" + addr.getHostAddress());\n\t\t\t}\n\t\t    \n\t\t\t// Check error string at index 0, will be null if create was successful\n\t\t\tif (results[0] != null)\n\t\t\t{\n\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\tlog.error(\"RRD database 'create' failed for \" + addr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t\t\tthrow new RuntimeException(\"RRD database 'create' failed for interface \" + addr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t}","id":21705,"modified_method":"/**\n\t * Create an RRD database file for storing latency/response time\n\t * data.\n\t * \n\t * @param rrdJniInterface \tinterface used to issue RRD commands.\n\t * @param repository\t\tpath to the RRD file repository\n\t * @param addr\t\t\tinterface address\n\t * @param dsName\t\tdata source/RRD file name\n\t * \n\t * @return true if RRD file successfully created, false otherwise\n\t */\n\tpublic boolean createRRD(String repository, InetAddress addr, String dsName, org.opennms.netmgt.config.poller.Package pkg) throws RrdException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\t\n        List rraList = PollerConfigFactory.getInstance().getRRAList(pkg);\n\n        // add interface address to RRD repository path\n\t\tString path = repository + File.separator + addr.getHostAddress();\n        \n\t\treturn RrdUtils.createRRD(addr.getHostAddress(), path, dsName, PollerConfigFactory.getInstance().getStep(pkg), \"GAUGE\", 600, \"U\", \"U\", rraList);\n        \n\t\t\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Poll the specified address for ICMP service availability.<\/P>\n\t *\n\t * <P>The ICMP service monitor relies on Discovery for the actual\n\t * generation of IMCP 'ping' requests.  A JSDT session with two\n\t * channels (send/recv) is utilized for passing poll requests and\n\t * receiving poll replies from discovery.  All exchanges are\n\t * SOAP/XML compliant.<\/P>\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\n\t\t// get parameters\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\t\t\n\t\t// Find an appropritate thread id\n\t\t//\n\t\tLong tidKey = null;\n\t\tlong tid = (long)Thread.currentThread().hashCode();\n\t\tsynchronized(m_waiting)\n\t\t{\n\t\t\twhile(m_waiting.containsKey(tidKey = new Long(tid)))\n\t\t\t\t++tid;\n\t\t}\n\n\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\t\tDatagramPacket pkt   = getDatagram(ipv4Addr, tid);\n\t\tPing reply           = new Ping(ipv4Addr);\n\t\tm_waiting.put(tidKey, reply);\n\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tfor(int attempts = 0; attempts <= retry && !reply.isSignaled(); ++attempts)\n\t\t{\n\t\t\t// Send the datagram and wait\n\t\t\t//\n\t\t\tsynchronized(reply)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tm_icmpSock.send(pkt);\n\t\t\t\t}\n\t\t\t\tcatch(IOException ioE)\n\t\t\t\t{\n\t\t\t\t\tlog.info(\"Failed to send to address \" + ipv4Addr, ioE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcatch(Throwable t)\n\t\t\t\t{\n\t\t\t\t\tlog.info(\"Undeclared throwable exception caught sending to \" + ipv4Addr, t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\treply.wait(timeout);\n\t\t\t\t}\n\t\t\t\tcatch(InterruptedException ex)\n\t\t\t\t{\n\t\t\t\t\t// interrupted so return, reset interrupt.\n\t\t\t\t\t//\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tm_waiting.remove(tidKey);\n\n\t\tif(reply.isSignaled())\n\t\t{\n\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t\n\t\t\t// Determine round-trip-time for the ping packet\n\t\t\tPacket replyPkt = reply.getPacket();\n\t\t\tif (replyPkt != null)\n\t\t\t{\n                                long rtt = replyPkt.getPingRTT();\n                                log.debug(\"Ping round trip time for \" + ipv4Addr + \": \" + rtt + \"us\");\n\n                                // Store round-trip-time in RRD database\n                                if (rtt >= 0 && rrdPath != null)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t                                        this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, rtt, pkg);\n\t\t\t\t\t}\n\t\t\t\t\tcatch(RuntimeException rex)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.debug(\"There was a problem writing the RRD:\" + rex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn serviceStatus;\n\t}","id":21706,"modified_method":"/**\n\t * <P>Poll the specified address for ICMP service availability.<\/P>\n\t *\n\t * <P>The ICMP service monitor relies on Discovery for the actual\n\t * generation of IMCP 'ping' requests.  A JSDT session with two\n\t * channels (send/recv) is utilized for passing poll requests and\n\t * receiving poll replies from discovery.  All exchanges are\n\t * SOAP/XML compliant.<\/P>\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\tCategory log = ThreadCategory.getInstance(this.getClass());\n\n\t\t// get parameters\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\t\t\n\t\t// Find an appropritate thread id\n\t\t//\n\t\tLong tidKey = null;\n\t\tlong tid = (long)Thread.currentThread().hashCode();\n\t\tsynchronized(m_waiting)\n\t\t{\n\t\t\twhile(m_waiting.containsKey(tidKey = new Long(tid)))\n\t\t\t\t++tid;\n\t\t}\n\n\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\t\tDatagramPacket pkt   = getDatagram(ipv4Addr, tid);\n\t\tPing reply           = new Ping(ipv4Addr);\n\t\tm_waiting.put(tidKey, reply);\n\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tfor(int attempts = 0; attempts <= retry && !reply.isSignaled(); ++attempts)\n\t\t{\n\t\t\t// Send the datagram and wait\n\t\t\t//\n\t\t\tsynchronized(reply)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tm_icmpSock.send(pkt);\n\t\t\t\t}\n\t\t\t\tcatch(IOException ioE)\n\t\t\t\t{\n\t\t\t\t\tlog.info(\"Failed to send to address \" + ipv4Addr, ioE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcatch(Throwable t)\n\t\t\t\t{\n\t\t\t\t\tlog.info(\"Undeclared throwable exception caught sending to \" + ipv4Addr, t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\treply.wait(timeout);\n\t\t\t\t}\n\t\t\t\tcatch(InterruptedException ex)\n\t\t\t\t{\n\t\t\t\t\t// interrupted so return, reset interrupt.\n\t\t\t\t\t//\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tm_waiting.remove(tidKey);\n\n\t\tif(reply.isSignaled())\n\t\t{\n\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t\n\t\t\t// Determine round-trip-time for the ping packet\n\t\t\tPacket replyPkt = reply.getPacket();\n\t\t\tif (replyPkt != null)\n\t\t\t{\n                                long rtt = replyPkt.getPingRTT();\n                                log.debug(\"Ping round trip time for \" + ipv4Addr + \": \" + rtt + \"us\");\n\n                                // Store round-trip-time in RRD database\n                                if (rtt >= 0 && rrdPath != null)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t                                        this.updateRRD(rrdPath, ipv4Addr, dsName, rtt, pkg);\n\t\t\t\t\t}\n\t\t\t\t\tcatch(RuntimeException rex)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.debug(\"There was a problem writing the RRD:\" + rex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn serviceStatus;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for IMAP service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 143). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if it starts with a '* OK , it indicates that we are talking to\n     * an IMAP server and we continue. Next, a 'LOGOUT' command is sent to the interface. Again\n     * the response is parsed and the response is verified to see that we get a '* OK'. If the\n     * interface's response is valid we set the service status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // Retries\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"ImapMonitor.poll: address: \" + ipv4Addr + \" port: \" + port + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (log.isDebugEnabled()) log.debug(\"ImapMonitor.Poll(): banner: \" + banner);\n\n                if (banner != null && banner.startsWith(IMAP_START_RESPONSE_PREFIX)) {\n                    //\n                    // Send the LOGOUT\n                    //\n                    socket.getOutputStream().write(IMAP_LOGOUT_REQUEST.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    if (response != null && response.startsWith(IMAP_BYE_RESPONSE_PREFIX)) {\n                        response = rdr.readLine();\n                        if (response != null && response.startsWith(IMAP_LOGOUT_RESPONSE_PREFIX)) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or logout process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                log.warn(\"ImapMonitor.poll: No route to host exception for address: \" + ipv4Addr, e);\n                break; // Break out of for(;;)\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                log.debug(\"ImapMonitor.poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (InterruptedIOException e) {\n                log.debug(\"ImapMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.debug(\"ImapMonitor.poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    log.debug(\"ImapMonitor.poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21707,"modified_method":"/**\n     * <P>\n     * Poll the specified address for IMAP service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 143). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if it starts with a '* OK , it indicates that we are talking to\n     * an IMAP server and we continue. Next, a 'LOGOUT' command is sent to the interface. Again\n     * the response is parsed and the response is verified to see that we get a '* OK'. If the\n     * interface's response is valid we set the service status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // Retries\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"ImapMonitor.poll: address: \" + ipv4Addr + \" port: \" + port + \" timeout: \" + timeout + \" retry: \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (log.isDebugEnabled()) log.debug(\"ImapMonitor.Poll(): banner: \" + banner);\n\n                if (banner != null && banner.startsWith(IMAP_START_RESPONSE_PREFIX)) {\n                    //\n                    // Send the LOGOUT\n                    //\n                    socket.getOutputStream().write(IMAP_LOGOUT_REQUEST.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    if (response != null && response.startsWith(IMAP_BYE_RESPONSE_PREFIX)) {\n                        response = rdr.readLine();\n                        if (response != null && response.startsWith(IMAP_LOGOUT_RESPONSE_PREFIX)) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or logout process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                log.warn(\"ImapMonitor.poll: No route to host exception for address: \" + ipv4Addr, e);\n                break; // Break out of for(;;)\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                log.debug(\"ImapMonitor.poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (InterruptedIOException e) {\n                log.debug(\"ImapMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                log.debug(\"ImapMonitor.poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    log.debug(\"ImapMonitor.poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n   \t* Network interface to poll for a given service.\n   \t* Make sure you're using the latest (at least 5.5) <a href=\"http://www.sybase.com/detail_list/1,6902,2912,00.html\">JConnect version<\/a>\n   \t* or the plugin will not be able to tell exactly if the service is up or not.\n   \t* @param iface The interface to poll\n   \t* @param parameters Parameters to pass when polling the interface\n   \t* Currently recognized Map keys:\n   \t* <ul>\n   \t* <li> user - Database user\n   \t* <li> password - User password\n   \t* <li> port - server port\n   \t* <li> timeout - Number of miliseconds to wait before sending a timeout\n   \t* <li> driver - The JDBC driver to use\n   \t* <li> url - The vendor specific jdbc  URL\n   \t* <\/ul>\n   \t* @return int An status code that shows the status of the service\n   \t* @throws java.lang.RuntimeException Thrown if an unrecoverable error\n   \t*\t occurs that prevents the interface from being monitored.\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SURPRESS_EVENT_MASK\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_AVAILABLE\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNAVAILABLE\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNRESPONSIVE\n   \t* @see <a href=\"http://manuals.sybase.com/onlinebooks/group-jc/jcg0550e/prjdbc/@Generic__BookTextView/9332;pt=1016#X\">Error codes for JConnect<\/a>\n   \t*/\t\n  \tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n    \t\tCategory log = ThreadCategory.getInstance(getClass());\n\n    \t\t// Asume that the service is down\n    \t\tint status = SERVICE_UNAVAILABLE;\n    \t\tConnection con = null;\n    \t\tStatement statement = null;\n    \t\tResultSet resultset = null;\n\n    \t\tif(iface.getType() != NetworkInterface.TYPE_IPV4) \n\t\t{\n      \t\t\tlog.error(getClass().getName() + \": Unsupported interface type, only TYPE_IPV4 currently supported\");\n      \t\t\tthrow new NetworkInterfaceNotSupportedException(getClass().getName() + \": Unsupported interface type, only TYPE_IPV4 currently supported\");\n    \t\t}\n    \n    \t\tif (parameters == null) \n\t\t{\n\t    \tthrow new NullPointerException();\n    \t\t}\n    \t\ttry \n\t\t{\n\t    \tClass.forName(ParameterMap.getKeyedString(parameters, \"driver\", DBTools.DEFAULT_JDBC_DRIVER)).newInstance();\n    \t\t} \n\t\tcatch (Exception exp) {\n\t    \t\texp.printStackTrace();\n\t    \t\tthrow new RuntimeException(exp.toString());\n    \t\t}\n    \t\tlog.info(getClass().getName() + \": Loaded JDBC driver\");\n\n    \t\t// Get the JDBC url host part\n    \t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n    \t\tString url = null;\n    \t\turl = DBTools.constructUrl(ParameterMap.getKeyedString(parameters, \"url\", DBTools.DEFAULT_URL), ipv4Addr.getCanonicalHostName());\n\t  \tif (log.isDebugEnabled()) {\n            \t\tlog.debug(getClass().getName() + \": JDBC url: \" + url);\n\t\t}\n\n\t\tint retries = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString db_user = ParameterMap.getKeyedString(parameters, \"user\", DBTools.DEFAULT_DATABASE_USER);\n\t\tString db_pass = ParameterMap.getKeyedString(parameters, \"password\", DBTools.DEFAULT_DATABASE_PASSWORD);\n\t        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n    \t\tString dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\t\n       \t\tif (rrdPath == null) {\n            \t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        \t}\n        \tif (dsName == null) {\n            \t\tdsName = DS_NAME;\n        \t}\n\n    \t\tfor (int attempts = 0; attempts <= retries; attempts++) \n\t\t{ \n      \t\ttry \n\t\t{\n\t\t\tlong responseTime = -1;\n        \t\tDriverManager.setLoginTimeout(timeout);\n\t\t\tlong sentTime = System.currentTimeMillis();\n        \t\tcon = DriverManager.getConnection(url, db_user, db_pass);\n\n        \t\t// We are connected, upgrade the status to unresponsive\n        \t\tstatus = SERVICE_UNRESPONSIVE;\n\n        \t\tif ( con != null) \n\t\t\t{\n\t\t\t\tDatabaseMetaData metadata = con.getMetaData();\n\t\t\t\tresultset = metadata.getCatalogs();\n\t\t\t\twhile (resultset.next()) \n\t\t\t\t{\n\t\t\t\t\tresultset.getString(1);\n\t\t\t\t}\n\n          \t\t\t// The query worked, assume than the server is ok\n          \t\t\tif (resultset != null) \n\t\t\t\t{\n\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n            \t\t\t\tstatus = SERVICE_AVAILABLE;\n\t  \t\t\t\tif (log.isDebugEnabled()) {\n            \t\t\t\t\tlog.debug(getClass().getName() + \": JDBC service is AVAILABLE on: \" + ipv4Addr.getCanonicalHostName());\n\t\t\t\t                log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n\n\t\t\t\t\t}\n\t\t\t\t\t// Update response time\n\t\t\t\t        if (responseTime >= 0 && rrdPath != null) {\n                        \t\t\ttry {\n                            \t\t\t\tthis.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        \t\t\t} catch (RuntimeException rex) {\n                            \t\t\t\tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                        \t\t\t}\n                    \t\t\t}\n            \t\t\t\tbreak;\n          \t\t\t}\n        \t\t} // end if con\n      \t\t} \n\t\tcatch (SQLException sqlEx) \n\t\t{\n\t  \t\tif (log.isDebugEnabled()) \n\t\t\t{\n\t      \t\t\tlog.debug(getClass().getName() + \": JDBC service is not responding on: \" + ipv4Addr.getCanonicalHostName() + \", \" + sqlEx.getSQLState() + \", \" + sqlEx.toString());\n\t      \t\tsqlEx.printStackTrace();\n\t\t\t}\n      \t\t} \n\t\tfinally \n\t\t{\n\t\t\tif (resultset != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\t\tresultset.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tresultset = null;\n        \t\t}\n\t\tif (statement != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\tstatement.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tstatement = null;\n        \t\t}\n        \tif (con != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\tcon.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tcon = null;\n        \t\t}\t\n      \t\t}\n    \t}\n    \treturn status;\n  }","id":21708,"modified_method":"/**\n   \t* Network interface to poll for a given service.\n   \t* Make sure you're using the latest (at least 5.5) <a href=\"http://www.sybase.com/detail_list/1,6902,2912,00.html\">JConnect version<\/a>\n   \t* or the plugin will not be able to tell exactly if the service is up or not.\n   \t* @param iface The interface to poll\n   \t* @param parameters Parameters to pass when polling the interface\n   \t* Currently recognized Map keys:\n   \t* <ul>\n   \t* <li> user - Database user\n   \t* <li> password - User password\n   \t* <li> port - server port\n   \t* <li> timeout - Number of miliseconds to wait before sending a timeout\n   \t* <li> driver - The JDBC driver to use\n   \t* <li> url - The vendor specific jdbc  URL\n   \t* <\/ul>\n   \t* @return int An status code that shows the status of the service\n   \t* @throws java.lang.RuntimeException Thrown if an unrecoverable error\n   \t*\t occurs that prevents the interface from being monitored.\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SURPRESS_EVENT_MASK\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_AVAILABLE\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNAVAILABLE\n   \t* @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNRESPONSIVE\n   \t* @see <a href=\"http://manuals.sybase.com/onlinebooks/group-jc/jcg0550e/prjdbc/@Generic__BookTextView/9332;pt=1016#X\">Error codes for JConnect<\/a>\n   \t*/\t\n  \tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n    \t\tCategory log = ThreadCategory.getInstance(getClass());\n\n    \t\t// Asume that the service is down\n    \t\tint status = SERVICE_UNAVAILABLE;\n    \t\tConnection con = null;\n    \t\tStatement statement = null;\n    \t\tResultSet resultset = null;\n\n    \t\tif(iface.getType() != NetworkInterface.TYPE_IPV4) \n\t\t{\n      \t\t\tlog.error(getClass().getName() + \": Unsupported interface type, only TYPE_IPV4 currently supported\");\n      \t\t\tthrow new NetworkInterfaceNotSupportedException(getClass().getName() + \": Unsupported interface type, only TYPE_IPV4 currently supported\");\n    \t\t}\n    \n    \t\tif (parameters == null) \n\t\t{\n\t    \tthrow new NullPointerException();\n    \t\t}\n    \t\ttry \n\t\t{\n\t    \tClass.forName(ParameterMap.getKeyedString(parameters, \"driver\", DBTools.DEFAULT_JDBC_DRIVER)).newInstance();\n    \t\t} \n\t\tcatch (Exception exp) {\n\t    \t\texp.printStackTrace();\n\t    \t\tthrow new RuntimeException(exp.toString());\n    \t\t}\n    \t\tlog.info(getClass().getName() + \": Loaded JDBC driver\");\n\n    \t\t// Get the JDBC url host part\n    \t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n    \t\tString url = null;\n    \t\turl = DBTools.constructUrl(ParameterMap.getKeyedString(parameters, \"url\", DBTools.DEFAULT_URL), ipv4Addr.getCanonicalHostName());\n\t  \tif (log.isDebugEnabled()) {\n            \t\tlog.debug(getClass().getName() + \": JDBC url: \" + url);\n\t\t}\n\n\t\tint retries = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString db_user = ParameterMap.getKeyedString(parameters, \"user\", DBTools.DEFAULT_DATABASE_USER);\n\t\tString db_pass = ParameterMap.getKeyedString(parameters, \"password\", DBTools.DEFAULT_DATABASE_PASSWORD);\n\t        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n    \t\tString dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\t\n       \t\tif (rrdPath == null) {\n            \t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        \t}\n        \tif (dsName == null) {\n            \t\tdsName = DS_NAME;\n        \t}\n\n    \t\tfor (int attempts = 0; attempts <= retries; attempts++) \n\t\t{ \n      \t\ttry \n\t\t{\n\t\t\tlong responseTime = -1;\n        \t\tDriverManager.setLoginTimeout(timeout);\n\t\t\tlong sentTime = System.currentTimeMillis();\n        \t\tcon = DriverManager.getConnection(url, db_user, db_pass);\n\n        \t\t// We are connected, upgrade the status to unresponsive\n        \t\tstatus = SERVICE_UNRESPONSIVE;\n\n        \t\tif ( con != null) \n\t\t\t{\n\t\t\t\tDatabaseMetaData metadata = con.getMetaData();\n\t\t\t\tresultset = metadata.getCatalogs();\n\t\t\t\twhile (resultset.next()) \n\t\t\t\t{\n\t\t\t\t\tresultset.getString(1);\n\t\t\t\t}\n\n          \t\t\t// The query worked, assume than the server is ok\n          \t\t\tif (resultset != null) \n\t\t\t\t{\n\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n            \t\t\t\tstatus = SERVICE_AVAILABLE;\n\t  \t\t\t\tif (log.isDebugEnabled()) {\n            \t\t\t\t\tlog.debug(getClass().getName() + \": JDBC service is AVAILABLE on: \" + ipv4Addr.getCanonicalHostName());\n\t\t\t\t                log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n\n\t\t\t\t\t}\n\t\t\t\t\t// Update response time\n\t\t\t\t        if (responseTime >= 0 && rrdPath != null) {\n                        \t\t\ttry {\n                            \t\t\t\tthis.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        \t\t\t} catch (RuntimeException rex) {\n                            \t\t\t\tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                        \t\t\t}\n                    \t\t\t}\n            \t\t\t\tbreak;\n          \t\t\t}\n        \t\t} // end if con\n      \t\t} \n\t\tcatch (SQLException sqlEx) \n\t\t{\n\t  \t\tif (log.isDebugEnabled()) \n\t\t\t{\n\t      \t\t\tlog.debug(getClass().getName() + \": JDBC service is not responding on: \" + ipv4Addr.getCanonicalHostName() + \", \" + sqlEx.getSQLState() + \", \" + sqlEx.toString());\n\t      \t\tsqlEx.printStackTrace();\n\t\t\t}\n      \t\t} \n\t\tfinally \n\t\t{\n\t\t\tif (resultset != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\t\tresultset.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tresultset = null;\n        \t\t}\n\t\tif (statement != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\tstatement.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tstatement = null;\n        \t\t}\n        \tif (con != null) \n\t\t\t{\n          \t\ttry  \n\t\t\t{ \n\t\t\tcon.close(); \n\t\t\t} \n\t\t\tcatch (SQLException ignore) {}\n          \t\tcon = null;\n        \t\t}\t\n      \t\t}\n    \t}\n    \treturn status;\n  }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Initialize the service thresholder.<\/P>\n\t *\n\t * @param parameters\tParameter map which contains (currently) a single\n\t *  \t\t\tentry, the name of the service which this thresholder\n\t *                      is responsible for latency threshold checking keyed\n\t *    \t\t\tby the String \"svcName\"\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Service name\n\t\t//\n\t\tm_svcName = (String)parameters.get(\"svcName\");\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: latency thresholder for service '\" + m_svcName + \"'\");\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n\t\t// Initialize jni RRD interface.\n\t\t//\n\t\ttry\n\t\t{\n\t\t\torg.opennms.netmgt.rrd.Interface.init();\n\t\t}\n\t\tcatch(SecurityException se)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", se);\n\t\t\tthrow new UndeclaredThrowableException(se);\n\t\t}\n\t\tcatch(UnsatisfiedLinkError ule)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", ule);\n\t\t\tthrow new UndeclaredThrowableException(ule);\n\t\t}\n\t\t\n\t\t// Save local reference to singleton instance \n\t\t//\n\t\tm_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","id":21709,"modified_method":"/**\n\t * <P>Initialize the service thresholder.<\/P>\n\t *\n\t * @param parameters\tParameter map which contains (currently) a single\n\t *  \t\t\tentry, the name of the service which this thresholder\n\t *                      is responsible for latency threshold checking keyed\n\t *    \t\t\tby the String \"svcName\"\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Service name\n\t\t//\n\t\tm_svcName = (String)parameters.get(\"svcName\");\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: latency thresholder for service '\" + m_svcName + \"'\");\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n        try {\n            RrdUtils.initialize();\n        }\n        catch (RrdException e) {\n            if(log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n        \n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Performs threshold checking on an directory which contains one or\n\t * more RRD files containing latency/response time information.  \n\t * ThresholdEntity objects are stored for performing threshold\n\t * checking.  \n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId\t\tNode identifier of interface being checked\n\t * @param ipAddr\t\tIP address of the interface being checked\n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param thresholdMap\t\tMap of configured interface level ThresholdEntity \n\t * \t\t\t\t\tobjects\tkeyed by datasource name.\n\t  * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkRrdDir(File directory, \n\t\t\t\tint nodeId,\n\t\t\t\tInetAddress ipAddr,\n\t\t\t\tint interval,\n\t\t\t\tDate date,\n\t\t\t\tMap thresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tipAddr == null ||\n\t\t\tdate == null \t||\n\t\t\tthresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkPerformanceDir: threshold checking dir: \" + directory.getAbsolutePath());\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null)\n\t\t\treturn;\n\t\t\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = fetch(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21710,"modified_method":"/**\n\t * Performs threshold checking on an directory which contains one or\n\t * more RRD files containing latency/response time information.  \n\t * ThresholdEntity objects are stored for performing threshold\n\t * checking.  \n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId\t\tNode identifier of interface being checked\n\t * @param ipAddr\t\tIP address of the interface being checked\n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param thresholdMap\t\tMap of configured interface level ThresholdEntity \n\t * \t\t\t\t\tobjects\tkeyed by datasource name.\n\t  * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkRrdDir(File directory, \n\t\t\t\tint nodeId,\n\t\t\t\tInetAddress ipAddr,\n\t\t\t\tint interval,\n\t\t\t\tDate date,\n\t\t\t\tMap thresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tipAddr == null ||\n\t\t\tdate == null \t||\n\t\t\tthresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkPerformanceDir: threshold checking dir: \" + directory.getAbsolutePath());\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null)\n\t\t\treturn;\n\t\t\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n                 catch (RrdException e) {\n                     log.error(\"An error occurred retriving the last value for datasource '\"+ datasource + \"'\", e);\n                 }\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId,\n\t\t\t\t\t\t\t\t\t\tipAddr,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Poll the specified address for NTP service availability.<\/P>\n\t *\n\t * <P>During the poll an NTP request query packet is generated.\n\t * The query is sent via UDP socket to the interface at the specified \n\t * port (by default UDP port 123).  If a response is received, it is \n\t * parsed and validated.  If the NTP was successful the service status \n\t * is set to SERVICE_AVAILABLE and the method returns.<\/P>\n\t *\n\t * @param iface\t\tThe network interface to test the service on.\n\t * @param parameters\tThe package parameters (timeout, retry, etc...) to be \n\t *  used for this poll.\n\t *\n\t * @return The availibility of the interface and if a transition event\n\t * \tshould be supressed.\n\t *\n\t */\n\tpublic int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) \n\t{\n\t\t//\n\t\t// Get interface address from NetworkInterface\n\t\t//\n\t\tif (iface.getType() != NetworkInterface.TYPE_IPV4)\n\t\t\tthrow new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n\t\t// get the log\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\n\t\t// get the parameters\n\t\t//\n\t\tint retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n\t\tint port  = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n\t\tint timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n                String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n\t\tif (rrdPath == null)\n\t\t{\n\t\t\tlog.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n                if (dsName == null)\n                {\n                        dsName = DS_NAME;\n                }\n\n\n\t\t\n\t\t// get the address and NTP address request\n\t\t//\n\t\tInetAddress ipv4Addr = (InetAddress)iface.getAddress();\n\t\t\n\t\tint serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n\t\tDatagramSocket socket = null;\n\t\tlong responseTime = -1;\n\t\ttry \n\t\t{\n\t\t\tsocket = new DatagramSocket();\n\t\t\tsocket.setSoTimeout(timeout); // will force the InterruptedIOException\n\n\t\t\tfor (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\t// Send NTP request\n\t\t\t\t\t//\n\t\t\t\t\tbyte[] data = new NtpMessage().toByteArray();\n\t\t\t\t\tDatagramPacket outgoing = new DatagramPacket(data, \n\t\t\t\t\t\t\t\t\t\t   data.length, \n\t\t\t\t\t\t\t\t\t\t   ipv4Addr, \n\t\t\t\t\t\t\t\t\t\t   port);\n\t\t\t\t\tlong sentTime = System.currentTimeMillis();\n\t\t\t\t\tsocket.send(outgoing);\n\t\t\t\t\t\n\t\t\t\t\t// Get NTP Response\n\t\t\t\t\t//\n\t\t\t\t\t//byte[] buffer = new byte[512];\n\t\t\t\t\tDatagramPacket incoming = new DatagramPacket(data, data.length);\n\t\t\t\t\tsocket.receive(incoming);\n\t\t\t\t\tresponseTime = System.currentTimeMillis() - sentTime;\n\t\t\t\t\tdouble destinationTimestamp = (System.currentTimeMillis()/1000.0) + 2208988800.0;\n\t\t\t\t\t\n\t\t\t\t\t// Validate NTP Response\n\t\t\t\t\t// IOException thrown if packet does not decode as expected.\n\t\t\t\t\tNtpMessage msg = new NtpMessage(incoming.getData());\n\t\t\t\t\tdouble localClockOffset = ((msg.receiveTimestamp - msg.originateTimestamp) + (msg.transmitTimestamp - destinationTimestamp)) / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"poll: valid NTP request received the local clock offset is \" + localClockOffset + \", responseTime= \" + responseTime + \"ms\");\n\t\t\t\t\t\tlog.debug(\"poll: NTP message : \" + msg.toString());\n\t\t\t\t\tserviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n\t\t\t\t} \n\t\t\t\tcatch (InterruptedIOException ex) \n\t\t\t\t{\n\t\t\t\t\t// Ignore, no response received.\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tcatch(NoRouteToHostException e)\n\t\t{\n\t\t\te.fillInStackTrace();\n\t\t\tlog.debug(\"No route to host exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch(ConnectException e)\n\t\t{\n\t\t        //Connection refused. Continue to retry.\n                        //\n                        e.fillInStackTrace();\n\t\t\tlog.debug(\"Connection exception for address: \" + ipv4Addr, e);\n\t\t}\n\t\tcatch (IOException ex) \n\t\t{\n\t\t\tex.fillInStackTrace();\n\t\t\tlog.info(\"IOException while polling address: \" + ipv4Addr, ex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(socket != null)\n\t\t\t\tsocket.close();\n\t\t}\n\t\n\t\t// Store response time if available\n\t\t//\n\t\tif (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)\n\t\t{\n\t\t\t// Store response time in RRD\n\t\t\tif (responseTime >= 0 && rrdPath != null)\n\t\t\t{\n                        \ttry\n                        \t{\n\t\t\t\t\tthis.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        \t}\n                        \tcatch(RuntimeException rex)\n                        \t{\n                                \tlog.debug(\"There was a problem writing the RRD:\" + rex);\n                        \t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// \n\t\t//\n\t\t// return the status of the service\n\t\t//\n\t\treturn serviceStatus;\n\t}","id":21711,"modified_method":"/**\n     * <P>\n     * Poll the specified address for NTP service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an NTP request query packet is generated. The query is\n     * sent via UDP socket to the interface at the specified port (by default\n     * UDP port 123). If a response is received, it is parsed and validated. If\n     * the NTP was successful the service status is set to SERVICE_AVAILABLE and\n     * the method returns.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * \n     * @return The availibility of the interface and if a transition event\n     *         should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // get the log\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // get the parameters\n        //\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // get the address and NTP address request\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        DatagramSocket socket = null;\n        long responseTime = -1;\n        try {\n            socket = new DatagramSocket();\n            socket.setSoTimeout(timeout); // will force the\n                                          // InterruptedIOException\n\n            for (int attempts = 0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++) {\n                try {\n                    // Send NTP request\n                    //\n                    byte[] data = new NtpMessage().toByteArray();\n                    DatagramPacket outgoing = new DatagramPacket(data, data.length, ipv4Addr, port);\n                    long sentTime = System.currentTimeMillis();\n                    socket.send(outgoing);\n\n                    // Get NTP Response\n                    //\n                    //byte[] buffer = new byte[512];\n                    DatagramPacket incoming = new DatagramPacket(data, data.length);\n                    socket.receive(incoming);\n                    responseTime = System.currentTimeMillis() - sentTime;\n                    double destinationTimestamp = (System.currentTimeMillis() / 1000.0) + 2208988800.0;\n\n                    // Validate NTP Response\n                    // IOException thrown if packet does not decode as expected.\n                    NtpMessage msg = new NtpMessage(incoming.getData());\n                    double localClockOffset = ((msg.receiveTimestamp - msg.originateTimestamp) + (msg.transmitTimestamp - destinationTimestamp)) / 2;\n\n                    if (log.isDebugEnabled())\n                        log.debug(\"poll: valid NTP request received the local clock offset is \" + localClockOffset + \", responseTime= \" + responseTime + \"ms\");\n                    log.debug(\"poll: NTP message : \" + msg.toString());\n                    serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                } catch (InterruptedIOException ex) {\n                    // Ignore, no response received.\n                }\n            }\n        } catch (NoRouteToHostException e) {\n            e.fillInStackTrace();\n            log.debug(\"No route to host exception for address: \" + ipv4Addr, e);\n        } catch (ConnectException e) {\n            //Connection refused. Continue to retry.\n            //\n            e.fillInStackTrace();\n            log.debug(\"Connection exception for address: \" + ipv4Addr, e);\n        } catch (IOException ex) {\n            ex.fillInStackTrace();\n            log.info(\"IOException while polling address: \" + ipv4Addr, ex);\n        } finally {\n            if (socket != null)\n                socket.close();\n        }\n\n        // Store response time if available\n        //\n        if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE) {\n            // Store response time in RRD\n            if (responseTime >= 0 && rrdPath != null) {\n                try {\n                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                } catch (RuntimeException rex) {\n                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                }\n            }\n        }\n\n        // \n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for POP3 service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 110). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if the response indicates that we are talking to an POP3 server\n     * we continue. Next, a POP3 'QUIT' command is sent to the interface. Again the response is\n     * parsed and verified. Provided that the interface's response is valid we set the service\n     * status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT) + 1;\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled()) log.debug(\"poll: address = \" + ipv4Addr + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"Pop3Monitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                // Server response should start with: \"+OK\"\n                //\n                String banner = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (banner == null) continue;\n                StringTokenizer t = new StringTokenizer(banner);\n\n                if (t.nextToken().equals(\"+OK\")) {\n                    //\n                    // POP3 server should recoginize the QUIT command\n                    //\n                    String cmd = \"QUIT\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Parse the response to the QUIT command\n                    //\n                    // Server response should start with: \"+OK\"\n                    //\n                    t = new StringTokenizer(rdr.readLine());\n                    if (t.nextToken().equals(\"+OK\")) {\n                        serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        // Store response time in RRD\n                        if (responseTime >= 0 && rrdPath != null) {\n                            try {\n                                this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                            } catch (RuntimeException rex) {\n                                log.debug(\"There was a problem writing the RRD:\" + rex);\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or QUIT command process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NoRouteToHostException e) {\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                // Ignore\n                log.debug(\"Pop3Monitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address \" + ipv4Addr.getHostAddress(), e);\n            } catch (IOException e) {\n                // Ignore\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n\n                } catch (IOException e) {\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21712,"modified_method":"/**\n     * <P>\n     * Poll the specified address for POP3 service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 110). If the connection request is successful, the banner line generated by the\n     * interface is parsed and if the response indicates that we are talking to an POP3 server\n     * we continue. Next, a POP3 'QUIT' command is sent to the interface. Again the response is\n     * parsed and verified. Provided that the interface's response is valid we set the service\n     * status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT) + 1;\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled()) log.debug(\"poll: address = \" + ipv4Addr + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"Pop3Monitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                // Server response should start with: \"+OK\"\n                //\n                String banner = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (banner == null) continue;\n                StringTokenizer t = new StringTokenizer(banner);\n\n                if (t.nextToken().equals(\"+OK\")) {\n                    //\n                    // POP3 server should recoginize the QUIT command\n                    //\n                    String cmd = \"QUIT\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // Parse the response to the QUIT command\n                    //\n                    // Server response should start with: \"+OK\"\n                    //\n                    t = new StringTokenizer(rdr.readLine());\n                    if (t.nextToken().equals(\"+OK\")) {\n                        serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                        // Store response time in RRD\n                        if (responseTime >= 0 && rrdPath != null) {\n                            try {\n                                this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                            } catch (RuntimeException rex) {\n                                log.debug(\"There was a problem writing the RRD:\" + rex);\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or QUIT command process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NoRouteToHostException e) {\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                // Ignore\n                log.debug(\"Pop3Monitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address \" + ipv4Addr.getHostAddress(), e);\n            } catch (IOException e) {\n                // Ignore\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n\n                } catch (IOException e) {\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Checks the parameters passed to this servlet, and if all are okay, executes\n     * the RRDTool command in another process and pipes its PNG output to the\n     * <code>ServletOutputStream<\/code> back to the requesting web browser.\n     */\n    public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {\n        String rrdDir = request.getParameter( \"rrddir\" );\n        String start  = request.getParameter( \"start\" );\n        String end    = request.getParameter( \"end\" );\n\n        if( rrdDir == null || start == null || end == null ) {\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n            return;\n        }\n        \n        if( !GraphUtil.isValidRRDName(rrdDir) ) {\n            this.log(\"Illegal RRD directory: \" + rrdDir);\n            throw new IllegalArgumentException(\"Illegal RRD directory: \" + rrdDir);\n        }\n    \n        String command = createAdHocCommand( request, rrdDir, start, end );\n\n        if(command == null) {\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n            return;\n        }\n\n        this.log( command );\n        String[] commandArray = Util.createCommandArray( command, '@' );\n        Process process = Runtime.getRuntime().exec( commandArray, null, workDir );\n\n        ServletOutputStream out = response.getOutputStream();\n        ByteArrayOutputStream tempOut = new ByteArrayOutputStream();\n        BufferedInputStream in = new BufferedInputStream( process.getInputStream() );\n\n        Util.streamToStream( in, tempOut );\n\n        in.close();\n        tempOut.close();\n\n        BufferedReader err = new BufferedReader( new InputStreamReader( process.getErrorStream() ));\n        String line = err.readLine();\n        StringBuffer buffer = new StringBuffer();\n\n        while( line != null ) {\n            buffer.append( line );\n            line = err.readLine();\n        }\n\n        if( buffer.length() > 0 ) {\n            this.log( \"Read from stderr: \" + buffer.toString() );\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/error.png\"), out );\n        }\n        else {\n            byte[] byteArray = tempOut.toByteArray();\n            ByteArrayInputStream tempIn = new ByteArrayInputStream( byteArray );\n            response.setContentType( this.mimeType );\n\n            Util.streamToStream( tempIn, out );\n        }\n\n        out.close();\n    }","id":21713,"modified_method":"/**\n     * Checks the parameters passed to this servlet, and if all are okay, executes\n     * the RRDTool command in another process and pipes its PNG output to the\n     * <code>ServletOutputStream<\/code> back to the requesting web browser.\n     */\n    public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {\n        String rrdDir = request.getParameter( \"rrddir\" );\n        String start  = request.getParameter( \"start\" );\n        String end    = request.getParameter( \"end\" );\n\n        if( rrdDir == null || start == null || end == null ) {\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n            return;\n        }\n        \n        if( !GraphUtil.isValidRRDName(rrdDir) ) {\n            this.log(\"Illegal RRD directory: \" + rrdDir);\n            throw new IllegalArgumentException(\"Illegal RRD directory: \" + rrdDir);\n        }\n\n        // begin inserted code\n        String command = createAdHocCommand( request, rrdDir, start, end );\n\n        if(command == null) {\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n            return;\n        }\n        \n        InputStream tempIn = null;\n        ServletOutputStream out = response.getOutputStream();\n        try {\n            \n            this.log( \"Executing RRD command in this directory: \" + workDir );\n            this.log( command );\n            \n            \n            tempIn = RrdUtils.createGraph(command, workDir);\n            \n        } catch (RrdException e) {\n            this.log(\"Read from stderr: \"+e.getMessage());\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/error.png\"), out );\n        }\n        \n        if (tempIn != null) {\n            response.setContentType( this.mimeType );\n            Util.streamToStream( tempIn, out );\n            \n            tempIn.close();\n        }\n        out.close();\n\n        // end inserted code\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initializes this servlet by reading the rrdtool-graph properties file.\n     */\n    public void init() throws ServletException {\n        try {\n            String propertiesFilename = Vault.getHomeDir() + this.getServletConfig().getInitParameter(\"rrd-properties\");\n\n            this.properties = new Properties();\n            this.properties.load( new FileInputStream( propertiesFilename ));\n        }\n        catch( FileNotFoundException e ) {\n            throw new ServletException( \"Could not find configuration file\", e );\n        }\n        catch( IOException e ) {\n            throw new ServletException( \"Could not load configuration file\", e );\n        }\n\n        this.workDir = new File( this.properties.getProperty( \"command.input.dir\" ));\n        this.commandPrefix = this.properties.getProperty( \"command.prefix\" );\n        this.mimeType = this.properties.getProperty( \"output.mime\" );\n    }","id":21714,"modified_method":"/**\n     * Initializes this servlet by reading the rrdtool-graph properties file.\n     */\n    public void init() throws ServletException {\n        try {\n            String propertiesFilename = Vault.getHomeDir() + this.getServletConfig().getInitParameter(\"rrd-properties\");\n\n            this.properties = new Properties();\n            this.properties.load( new FileInputStream( propertiesFilename ));\n            \n            RrdUtils.initialize();\n        }\n        catch( FileNotFoundException e ) {\n            throw new ServletException( \"Could not find configuration file\", e );\n        }\n        catch( IOException e ) {\n            throw new ServletException( \"Could not load configuration file\", e );\n        } catch (RrdException  e) {\n            throw new ServletException( \"Could not initialize graphing system\", e);\n        }\n\n        this.workDir = new File( this.properties.getProperty( \"command.input.dir\" ));\n        this.commandPrefix = this.properties.getProperty( \"command.prefix\" );\n        this.mimeType = this.properties.getProperty( \"output.mime\" );\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Checks the parameters passed to this servlet, and if all are okay, executes\n     * the RRDTool command in another process and pipes its PNG output to the\n     * <code>ServletOutputStream<\/code> back to the requesting web browser.\n     */\n    public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {\n        String report = request.getParameter( \"report\" );\n        String[] rrds = request.getParameterValues( \"rrd\" );\n        String start  = request.getParameter( \"start\" );\n        String end    = request.getParameter( \"end\" );\n\n        if( report == null || rrds == null || start == null || end == null ) {\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n            return;\n        }\n        \n        for( int i=0; i < rrds.length; i++ ) {\n            if( !GraphUtil.isValidRRDName(rrds[i]) ) {\n                this.log(\"Illegal RRD filename: \" + rrds[i]);\n                throw new IllegalArgumentException(\"Illegal RRD filename: \" + rrds[i]);\n            }\n        }\n        \n        String command = this.createPrefabCommand( request, report, rrds, start, end );\n\n        this.log( \"Executing RRD command in this directory: \" + this.workDir );\n        this.log( command );\n\n        String[] commandArray = Util.createCommandArray( command, '@' );\n        Process process = Runtime.getRuntime().exec( commandArray, null, this.workDir );\n\n        ServletOutputStream out = response.getOutputStream();\n        ByteArrayOutputStream tempOut = new ByteArrayOutputStream();\n        BufferedInputStream in = new BufferedInputStream( process.getInputStream() );\n\n        Util.streamToStream( in, tempOut );\n\n        in.close();\n        tempOut.close();\n\n        BufferedReader err = new BufferedReader( new InputStreamReader( process.getErrorStream() ));\n        String line = err.readLine();\n        StringBuffer buffer = new StringBuffer();\n\n        while( line != null ) {\n            buffer.append( line );\n            line = err.readLine();\n        }\n\n        if( buffer.length() > 0 ) {\n            this.log( \"Read from stderr: \" + buffer.toString() );\n            response.setContentType( \"image/png\" );\n            Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/error.png\"), out );\n        }\n        else {\n            byte[] byteArray = tempOut.toByteArray();\n            ByteArrayInputStream tempIn = new ByteArrayInputStream( byteArray );\n            response.setContentType( this.mimeType );\n\n            Util.streamToStream( tempIn, out );\n        }\n\n        out.close();\n    }","id":21715,"modified_method":"/**\n     * Checks the parameters passed to this servlet, and if all are okay, executes\n     * the RRDTool command in another process and pipes its PNG output to the\n     * <code>ServletOutputStream<\/code> back to the requesting web browser.\n     */\n    public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {\n        try {\n            String report = request.getParameter( \"report\" );\n            String[] rrds = request.getParameterValues( \"rrd\" );\n            String start  = request.getParameter( \"start\" );\n            String end    = request.getParameter( \"end\" );\n            \n            if( report == null || rrds == null || start == null || end == null ) {\n                response.setContentType( \"image/png\" );\n                Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/missingparams.png\"), response.getOutputStream() );\n                return;\n            }\n            \n            for( int i=0; i < rrds.length; i++ ) {\n                if( !GraphUtil.isValidRRDName(rrds[i]) ) {\n                    this.log(\"Illegal RRD filename: \" + rrds[i]);\n                    throw new IllegalArgumentException(\"Illegal RRD filename: \" + rrds[i]);\n                }\n            }\n            \n            String command = this.createPrefabCommand( request, report, rrds, start, end );\n            \n            InputStream tempIn = null;\n            ServletOutputStream out = response.getOutputStream();\n            try {\n                \n                this.log( \"Executing RRD command in this directory: \" + workDir );\n                this.log( command );\n                \n                File workDir = this.workDir;\n                \n                tempIn = RrdUtils.createGraph(command, workDir);\n                \n            } catch (RrdException e) {\n                this.log(\"Read from stderr: \"+e.getMessage());\n                response.setContentType( \"image/png\" );\n                Util.streamToStream( this.getServletContext().getResourceAsStream( \"/images/rrd/error.png\"), out );\n            }\n            \n            if (tempIn != null) {\n                response.setContentType( this.mimeType );\n                Util.streamToStream( tempIn, out );\n                \n                tempIn.close();\n            }\n            out.close();\n        } catch (Exception e) { \n            this.log(\"Exception occurred: \"+e.getMessage(), e);\n        }\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initializes this servlet by reading the rrdtool-graph properties file.\n     */\n    public void init() throws ServletException {\n        Properties properties = new Properties();\n        \n        try {\n            String propertiesFilename = Vault.getHomeDir() + this.getServletConfig().getInitParameter(\"rrd-properties\");\n            properties.load( new FileInputStream( propertiesFilename ));\n        }\n        catch( FileNotFoundException e ) {\n            throw new ServletException( \"Could not find configuration file\", e );\n        }\n        catch( IOException e ) {\n            throw new ServletException( \"Could not load configuration file\", e );\n        }\n\n        this.workDir = new File( properties.getProperty( \"command.input.dir\" ));\n        this.commandPrefix = properties.getProperty( \"command.prefix\" );\n        this.mimeType = properties.getProperty( \"output.mime\" );        \n        this.reportMap = PrefabGraph.getPrefabGraphDefinitions(properties);\n    }","id":21716,"modified_method":"/**\n     * Initializes this servlet by reading the rrdtool-graph properties file.\n     */\n    public void init() throws ServletException {\n        Properties properties = new Properties();\n        \n        try {\n            String propertiesFilename = Vault.getHomeDir() + this.getServletConfig().getInitParameter(\"rrd-properties\");\n            properties.load( new FileInputStream( propertiesFilename ));\n\n            RrdUtils.initialize();\n            \n        }\n        catch( FileNotFoundException e ) {\n            throw new ServletException( \"Could not find configuration file\", e );\n        }\n        catch( IOException e ) {\n            throw new ServletException( \"Could not load configuration file\", e );\n        } catch (RrdException e) {\n            throw new ServletException( \"Could not initialize graphing system\", e);\n        }\n\n        this.workDir = new File( properties.getProperty( \"command.input.dir\" ));\n        this.commandPrefix = properties.getProperty( \"command.prefix\" );\n        this.mimeType = properties.getProperty( \"output.mime\" );        \n        this.reportMap = PrefabGraph.getPrefabGraphDefinitions(properties);\n        \n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for SMTP service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 25). If the connection request is successful, the banner line generated by the interface\n     * is parsed and if the extracted return code indicates that we are talking to an SMTP\n     * server we continue. Next, an SMTP 'HELO' command is sent to the interface. Again the\n     * response is parsed and a return code extracted and verified. Finally, an SMTP 'QUIT'\n     * command is sent. Provided that the interface's response is valid we set the service\n     * status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                log.debug(\"SmtpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n\n                if (banner == null) continue;\n                if (MULTILINE.match(banner)) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(), 0, 3) + \" \";\n\n                    // Create new regExp to look for last line\n                    // of this mutli line response\n                    try {\n                        ENDMULTILINE = new RE(multiLineRC);\n                    } catch (RESyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = rdr.readLine();\n                    } while (banner != null && !ENDMULTILINE.match(banner));\n                    if (banner == null) continue;\n                }\n\n                if (log.isDebugEnabled()) log.debug(\"poll: banner = \" + banner);\n\n                StringTokenizer t = new StringTokenizer(banner);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n\n                    if (response == null) continue;\n                    if (MULTILINE.match(response)) {\n                        // Ok we have a multi-line response...first three\n                        // chars of the response line are the return code.\n                        // The last line of the response will start with\n                        // return code followed by a space.\n                        String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                        // Create new regExp to look for last line\n                        // of this mutli line response\n                        try {\n                            ENDMULTILINE = new RE(multiLineRC);\n                        } catch (RESyntaxException ex) {\n                            throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                        }\n\n                        // read until we hit the last line of the multi-line\n                        // response\n                        do {\n                            response = rdr.readLine();\n                        } while (response != null && !ENDMULTILINE.match(response));\n                        if (response == null) continue;\n                    }\n\n                    t = new StringTokenizer(response);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        //\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        response = rdr.readLine();\n                        if (response == null) continue;\n                        if (MULTILINE.match(response)) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                            // Create new regExp to look for last line\n                            // of this mutli line response\n                            try {\n                                ENDMULTILINE = new RE(multiLineRC);\n                            } catch (RESyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = rdr.readLine();\n                            } while (response != null && !ENDMULTILINE.match(response));\n                            if (response == null) continue;\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or HELO/QUIT comand process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NumberFormatException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: NumberFormatException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"SmtpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address \" + ipv4Addr.getHostAddress(), e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21717,"modified_method":"/**\n     * <P>\n     * Poll the specified address for SMTP service availability.\n     * <\/P>\n     * \n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by default TCP port\n     * 25). If the connection request is successful, the banner line generated by the interface\n     * is parsed and if the extracted return code indicates that we are talking to an SMTP\n     * server we continue. Next, an SMTP 'HELO' command is sent to the interface. Again the\n     * response is parsed and a return code extracted and verified. Finally, an SMTP 'QUIT'\n     * command is sent. Provided that the interface's response is valid we set the service\n     * status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     *  \n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n\n                log.debug(\"SmtpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n\n                if (banner == null) continue;\n                if (MULTILINE.match(banner)) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(), 0, 3) + \" \";\n\n                    // Create new regExp to look for last line\n                    // of this mutli line response\n                    try {\n                        ENDMULTILINE = new RE(multiLineRC);\n                    } catch (RESyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = rdr.readLine();\n                    } while (banner != null && !ENDMULTILINE.match(banner));\n                    if (banner == null) continue;\n                }\n\n                if (log.isDebugEnabled()) log.debug(\"poll: banner = \" + banner);\n\n                StringTokenizer t = new StringTokenizer(banner);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    responseTime = System.currentTimeMillis() - sentTime;\n\n                    if (response == null) continue;\n                    if (MULTILINE.match(response)) {\n                        // Ok we have a multi-line response...first three\n                        // chars of the response line are the return code.\n                        // The last line of the response will start with\n                        // return code followed by a space.\n                        String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                        // Create new regExp to look for last line\n                        // of this mutli line response\n                        try {\n                            ENDMULTILINE = new RE(multiLineRC);\n                        } catch (RESyntaxException ex) {\n                            throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                        }\n\n                        // read until we hit the last line of the multi-line\n                        // response\n                        do {\n                            response = rdr.readLine();\n                        } while (response != null && !ENDMULTILINE.match(response));\n                        if (response == null) continue;\n                    }\n\n                    t = new StringTokenizer(response);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        //\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        response = rdr.readLine();\n                        if (response == null) continue;\n                        if (MULTILINE.match(response)) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(), 0, 3) + \" \";\n\n                            // Create new regExp to look for last line\n                            // of this mutli line response\n                            try {\n                                ENDMULTILINE = new RE(multiLineRC);\n                            } catch (RESyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = rdr.readLine();\n                            } while (response != null && !ENDMULTILINE.match(response));\n                            if (response == null) continue;\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221) {\n                            serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;\n                            // Store response time in RRD\n                            if (responseTime >= 0 && rrdPath != null) {\n                                try {\n                                    this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                                } catch (RuntimeException rex) {\n                                    log.debug(\"There was a problem writing the RRD:\" + rex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or HELO/QUIT comand process.\n                if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE) {\n                    serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;\n                }\n            } catch (NumberFormatException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: NumberFormatException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"SmtpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address \" + ipv4Addr.getHostAddress(), e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address \" + ipv4Addr.getHostAddress(), e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Initialize the service collector.<\/P>\n\t * \n\t * <P>During initialization the SNMP collector:\n\t *     \n\t *    - Initializes various configuration factories.\n\t *    - Verifies access to the database\n\t *    - Verifies access to RRD file repository\n\t *    - Verifies access to JNI RRD shared library\n\t *    - Determines if SNMP to be stored for only the\n\t *         node'sprimary interface or for all interfaces.<\/P>\n\t *\n\t * @param parameters\tNot currently used.\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n\t\t// Initialize the SnmpPeerFactory\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tSnmpPeerFactory.reload();\n\t\t}\n\t\tcatch(MarshalException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(ValidationException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(IOException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\t\n\t\t// Initialize the DataCollectionConfigFactory \n\t\t//\n\t\ttry\n\t\t{\n\t\t\tDataCollectionConfigFactory.reload();\n\n\t\t}\n\t\tcatch(MarshalException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(ValidationException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(IOException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\t\n\t\t// Make sure we can connect to the database\n\t\t//\n\t\tjava.sql.Connection ctest = null;\n\t\ttry\n\t\t{\n\t\t\tDatabaseConnectionFactory.reload();\n\t\t\tctest = DatabaseConnectionFactory.getInstance().getConnection();\n\t\t}\n\t\tcatch (IOException ie)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: IOException getting database connection\", ie);\n\t\t\tthrow new UndeclaredThrowableException(ie);\n\t\t}\n\t\tcatch (MarshalException me)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Marshall Exception getting database connection\", me);\n\t\t\tthrow new UndeclaredThrowableException(me);\n\t\t}\n\t\tcatch (ValidationException ve)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Validation Exception getting database connection\", ve);\n\t\t\tthrow new UndeclaredThrowableException(ve);\n\t\t}\n\t\tcatch (SQLException sqlE)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed getting connection to the database.\", sqlE);\n\t\t\tthrow new UndeclaredThrowableException(sqlE);\n\t\t}\n\t\tcatch (ClassNotFoundException cnfE)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed loading database driver.\", cnfE);\n\t\t\tthrow new UndeclaredThrowableException(cnfE);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(ctest != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tctest.close();\n\t\t\t\t}\n\t\t\t\tcatch(Throwable t)\n\t\t\t\t{\n\t\t\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\t\t\tlog.warn(\"initialize: an exception occured while closing the JDBC connection\", t);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\t\n\t\t// Get path to RRD repository\n\t\t//\n\t\tm_rrdPath = DataCollectionConfigFactory.getInstance().getRrdRepository();\n\t\tif(m_rrdPath == null)\n\t\t\tthrow new RuntimeException(\"Configuration error, failed to retrieve path to RRD repository.\");\n\n\t\t// Strip the File.separator char off of the end of the path\n\t\tif (m_rrdPath.endsWith(File.separator))\n\t\t{\n\t\t\tm_rrdPath = m_rrdPath.substring(0, (m_rrdPath.length() - File.separator.length()));\n\t\t}\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: SNMP RRD file repository path: \" + m_rrdPath);\n\n\t\t// If the RRD file repository directory does NOT already exist, create it.\n\t\t//\n\t\tFile f = new File(m_rrdPath);\n\t\tif (!f.isDirectory())\n\t\t\tif (!f.mkdirs())\n\t\t\t\tthrow new RuntimeException(\"Unable to create RRD file repository, path: \" + m_rrdPath);\n\n\t\t// Initialize jni RRD interface.\n\t\t// \n\t\ttry\n\t\t{\n\t\t\torg.opennms.netmgt.rrd.Interface.init();\n\t\t}\n\t\tcatch(SecurityException se)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", se);\n\t\t\tthrow new UndeclaredThrowableException(se);\n\t\t}\n\t\tcatch(UnsatisfiedLinkError ule)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", ule);\n\t\t\tthrow new UndeclaredThrowableException(ule);\n\t\t}\n\t\t\n\t\t// Save local reference to singleton instance \n\t\t//\n\t\tm_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","id":21718,"modified_method":"/**\n\t * <P>Initialize the service collector.<\/P>\n\t * \n\t * <P>During initialization the SNMP collector:\n\t *     \n\t *    - Initializes various configuration factories.\n\t *    - Verifies access to the database\n\t *    - Verifies access to RRD file repository\n\t *    - Verifies access to JNI RRD shared library\n\t *    - Determines if SNMP to be stored for only the\n\t *         node'sprimary interface or for all interfaces.<\/P>\n\t *\n\t * @param parameters\tNot currently used.\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n\t\t// Initialize the SnmpPeerFactory\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tSnmpPeerFactory.reload();\n\t\t}\n\t\tcatch(MarshalException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(ValidationException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(IOException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load SNMP configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\t\n\t\t// Initialize the DataCollectionConfigFactory \n\t\t//\n\t\ttry\n\t\t{\n\t\t\tDataCollectionConfigFactory.reload();\n\n\t\t}\n\t\tcatch(MarshalException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(ValidationException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\tcatch(IOException ex)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to load data collection configuration\", ex);\n\t\t\tthrow new UndeclaredThrowableException(ex);\n\t\t}\n\t\t\n\t\t// Make sure we can connect to the database\n\t\t//\n\t\tjava.sql.Connection ctest = null;\n\t\ttry\n\t\t{\n\t\t\tDatabaseConnectionFactory.reload();\n\t\t\tctest = DatabaseConnectionFactory.getInstance().getConnection();\n\t\t}\n\t\tcatch (IOException ie)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: IOException getting database connection\", ie);\n\t\t\tthrow new UndeclaredThrowableException(ie);\n\t\t}\n\t\tcatch (MarshalException me)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Marshall Exception getting database connection\", me);\n\t\t\tthrow new UndeclaredThrowableException(me);\n\t\t}\n\t\tcatch (ValidationException ve)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Validation Exception getting database connection\", ve);\n\t\t\tthrow new UndeclaredThrowableException(ve);\n\t\t}\n\t\tcatch (SQLException sqlE)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed getting connection to the database.\", sqlE);\n\t\t\tthrow new UndeclaredThrowableException(sqlE);\n\t\t}\n\t\tcatch (ClassNotFoundException cnfE)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed loading database driver.\", cnfE);\n\t\t\tthrow new UndeclaredThrowableException(cnfE);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(ctest != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tctest.close();\n\t\t\t\t}\n\t\t\t\tcatch(Throwable t)\n\t\t\t\t{\n\t\t\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\t\t\tlog.warn(\"initialize: an exception occured while closing the JDBC connection\", t);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\t\n\t\t// Get path to RRD repository\n\t\t//\n\t\tm_rrdPath = DataCollectionConfigFactory.getInstance().getRrdRepository();\n\t\tif(m_rrdPath == null)\n\t\t\tthrow new RuntimeException(\"Configuration error, failed to retrieve path to RRD repository.\");\n\n        // TODO: make a path utils class that has the below in it\n\t\t// Strip the File.separator char off of the end of the path\n\t\tif (m_rrdPath.endsWith(File.separator))\n\t\t{\n\t\t\tm_rrdPath = m_rrdPath.substring(0, (m_rrdPath.length() - File.separator.length()));\n\t\t}\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: SNMP RRD file repository path: \" + m_rrdPath);\n\n\t\t// If the RRD file repository directory does NOT already exist, create it.\n\t\t//\n\t\tFile f = new File(m_rrdPath);\n\t\tif (!f.isDirectory())\n\t\t\tif (!f.mkdirs())\n\t\t\t\tthrow new RuntimeException(\"Unable to create RRD file repository, path: \" + m_rrdPath);\n\n            \n        try {\n            RrdUtils.initialize();\n        }\n        catch (RrdException e) {\n            if(log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n\t\t\n\t\t// Save local reference to singleton instance \n\t\t//\n\t\t//m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * This method is responsible for building an RRD-style update command for \n\t * the specified data source name.  Generated update command string has the\n\t * following format:\n\t *\n\t * \tupdate <rrdFile> N:<value>\n\t *\n\t * @param repository\tDirectory where RRD file resides\n\t * @param ds\t\tRRD data source object.\n\t * @param collectorEntry  Map of retrieved SNMP values for node or interface from \n\t * \t\t\twhich the 'values' portion of the update command are taken.\n\t * \n\t * @return \"RRD_ERROR\" if there was some error while attemnpting to build the \n\t *   \t\t\tupdate string. \n\t *         RRD-style update command string if update is required.\n\t *         null if no update is required because no SNMP value was retrieved for \n\t * \t \t\tthe specified data source.\n\t */\n\tprivate String buildRRDUpdateCmd(String repository, RRDDataSource ds, SNMPCollectorEntry collectorEntry)\n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\tString rrdFile = repository + File.separator + ds.getName() + \".rrd\";\n\t\t\n\t\tboolean rrdError = false;\n\t\tString dsValue = null;\n\t\t\n\t\t// Build RRD 'update' command\n\t\t// Determine if the specified RRD data source matches a MIB object collected \n\t\t// via SNMP. \n\t\t\t\n\t\t// Make sure we have an actual object id value.\n\t\tif (ds.getOid() == null)\n\t\t\treturn null;\n\t\t\t\t\n\t\tString instance = null;\n\t\tif (ds.getInstance().equals(MibObject.INSTANCE_IFINDEX))\n\t\t\tinstance = (String)collectorEntry.get(SNMPCollectorEntry.IF_INDEX);\n\t\telse\n\t\t\tinstance = ds.getInstance();\n \n\t\tString fullOid = ds.getOid() + \".\" + instance;\n \n\t\tSnmpSyntax snmpVar = (SnmpSyntax)collectorEntry.get(fullOid);  \n\t\tif (snmpVar == null)\n\t\t{\n\t\t\t// No value retrieved matching this oid\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"issueRRDUpdate: name:oid:value -  \" + ds.getName() + \":\" + fullOid + \":\" + snmpVar.toString());\n\t\t\t\t\n\t\t\t// RRD only supports the storage of integer data types.  If we see a\n\t\t\t// data type other than those listed below an error will be logged\n\t\t\t// and no RRD update will take place.\n\t\t\t// Am I missing any SNMP data types here?\n\t\t\tswitch (snmpVar.typeId())\n\t\t\t{\n\t\t\t\tcase SnmpSMI.SMI_INTEGER:\n\t\t\t\t\tdsValue= String.valueOf(((SnmpInt32)snmpVar).getValue());\n\t\t\t\t\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_COUNTER32:\n\t\t\t\t\tdsValue = String.valueOf(((SnmpCounter32)snmpVar).getValue());\n\t\t\t\t\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_COUNTER64:\n\t\t\t\t\tdsValue = String.valueOf(((SnmpCounter64)snmpVar).getValue());\n\t\t\t\t\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_GAUGE32:\n\t\t\t\t\tdsValue = String.valueOf(((SnmpGauge32)snmpVar).getValue());\n\t\t\t\t\tbreak;\n\t\t\t\t// *NOTE* Same as SnmpSMI.SMI_GAUGE32\n\t\t\t\t//case SnmpSMI.SMI_UNSIGNED32:\n\t\t\t\t//\tdsValue = ((SnmpUInt32)snmpVar).getValue();\n\t\t\t\t//\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_TIMETICKS:\n\t\t\t\t\tdsValue = String.valueOf(((SnmpTimeTicks)snmpVar).getValue());\n\t\t\t\t\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_STRING:\n\t\t\t\t\tdsValue = ((SnmpOctetString)snmpVar).toString();\n\t\t\t\t\t\n\t\t\t\t\t// Validate that the octet string value represents an\n\t\t\t\t\t// integer/double value, otherwise it can't be stored in the RRD database\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tnew Double(dsValue);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NumberFormatException nfE)\n\t\t\t\t\t{\n\t\t\t\t\t\trrdError = true;\n\t\t\t\t\t\tlog.warn(\"buildRRDUpdateCmd: number format exception attempting to convert octet string value '\" + \n\t\t\t\t\t\t\tdsValue + \"' to a numeric value for data source '\" + ds.getName() + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\trrdError = true;\n\t\t\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.warn(\"buildRRDUpdateCmd: SNMP value of data source '\" + \n\t\t\t\t\t\t\t\tds.getName() + \n\t\t\t\t\t\t\t\t\"' is not one of the supported data types by RRD, invalid typeID: \" + \n\t\t\t\t\t\t\t\tsnmpVar.typeId());\n\t\t\t\t\t\tlog.warn(\"buildRRDUpdateCmd: Valid RRD data types are:  COUNTER, GAUGE, DERIVE, & ABSOLUTE.  Please check content of 'DataCollection.xml' file.\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Build  RRD 'update' command string\n\t\tString cmd = null;\n\t\tif (rrdError)\n\t\t{\n\t\t\tcmd = RRD_ERROR;\n\t\t}\n\t\telse if (dsValue != null)\n\t\t{\n\t\t\tcmd = \"update \" + rrdFile + \" N:\" + dsValue;\n\t\t}\n\t\t \n\t\treturn cmd;\n\t\t}","id":21719,"modified_method":"/**\n     * @param ds\n     * @param collectorEntry\n     * @param log\n     * @param dsVal\n     * @return\n     * @throws Exception\n     */\n    public String getRRDValue(RRDDataSource ds, SNMPCollectorEntry collectorEntry) throws IllegalArgumentException {\n        Category log = ThreadCategory.getInstance(getClass());\n        String dsVal = null;\n        \n\t\t// Make sure we have an actual object id value.\n\t\tif (ds.getOid() == null) \n\t\t\treturn null;\n        \t\t\n\t\tString instance = null;\n\t\tif (ds.getInstance().equals(MibObject.INSTANCE_IFINDEX))\n\t\t\tinstance = (String)collectorEntry.get(SNMPCollectorEntry.IF_INDEX);\n\t\telse\n\t\t\tinstance = ds.getInstance();\n \n\t\tString fullOid = ds.getOid() + \".\" + instance;\n \n\t\tSnmpSyntax snmpVar = (SnmpSyntax)collectorEntry.get(fullOid);  \n\t\tif (snmpVar == null)\n\t\t\t// No value retrieved matching this oid\n\t\t\treturn null;\n\n        if (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"issueRRDUpdate: name:oid:value -  \" + ds.getName() + \":\" + fullOid + \":\" + snmpVar.toString());\n\t\t\t\t\n\t\t\t// RRD only supports the storage of integer data types.  If we see a\n\t\t\t// data type other than those listed below an error will be logged\n\t\t\t// and no RRD update will take place.\n\t\t\t// Am I missing any SNMP data types here?\n\t\t\tswitch (snmpVar.typeId())\n\t\t\t{\n\t\t\t\tcase SnmpSMI.SMI_INTEGER:\n                     return snmpVar.toString();\n\t\t\t\tcase SnmpSMI.SMI_COUNTER32:\n\t\t\t\t\treturn snmpVar.toString();\n\t\t\t\tcase SnmpSMI.SMI_COUNTER64:\n\t\t\t\t\treturn snmpVar.toString();\n\t\t\t\tcase SnmpSMI.SMI_GAUGE32:\n\t\t\t\t\treturn snmpVar.toString();\n\t\t\t\t// *NOTE* Same as SnmpSMI.SMI_GAUGE32\n\t\t\t\t//case SnmpSMI.SMI_UNSIGNED32:\n\t\t\t\t//\tdsValue = ((SnmpUInt32)snmpVar).getValue();\n\t\t\t\t//\tbreak;\n\t\t\t\tcase SnmpSMI.SMI_TIMETICKS:\n\t\t\t\t\treturn snmpVar.toString();\n\t\t\t\tcase SnmpSMI.SMI_STRING:\n\t\t\t\t\tString dsValue = ((SnmpOctetString)snmpVar).toString();\n\t\t\t\t\t\n\t\t\t\t\t// Validate that the octet string value represents an\n\t\t\t\t\t// integer/double value, otherwise it can't be stored in the RRD database\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tnew Double(dsValue);\n                          return dsValue;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NumberFormatException nfE)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"number format exception attempting to convert octet string value '\" + \n\t\t\t\t\t\t\tdsValue + \"' to a numeric value for data source '\" + ds.getName() + \"'\");\n                       \n\t\t\t\t\t}\n\t\t\t\tdefault:\n                    throw new IllegalArgumentException(\"SNMP value of data source '\" + \n                            ds.getName() + \n                            \"' is not one of the supported data types by RRD, invalid typeID: \" + \n                            snmpVar.typeId() + \" Valid RRD data types are:  COUNTER, GAUGE, DERIVE, & ABSOLUTE.  Please check content of 'DataCollection.xml' file.\");\n\t\t\t}\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Creates a single RRD file for the specified RRD data source.\n\t * \n\t * @param collectionName\tName of the collection \n\t * @param ipaddr\t\tInterface address\n\t * @param directory\t\tRRD repository directory\n\t * @param ds\t\t\tRRD data source \n\t * \n\t * @return TRUE if new RRD file created, FALSE if RRD file was not created \n\t *            because it already existed.\n\t */\n\tpublic boolean createRRD(String collectionName, InetAddress ipaddr, String directory, RRDDataSource ds)\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\tString fileName = ds.getName() + \".rrd\";\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"createRRD: rrd path and file name to create: \" + directory + File.separator + fileName);\n\n\t\t// Create directories if necessary\n\t\t//\n\t\tFile f = new File(directory);\n\t\tif (!f.isDirectory())\n\t\t\tif (!f.mkdirs())\n\t\t\t\tthrow new RuntimeException(\"Unable to create RRD repository directory: \" + directory);\n\t\t\t\t\n\t\t// Create the RRD file if it does not already exists for the current data source\n\t\tString completePath = directory + File.separator + fileName;\n\t\tf = new File(completePath);\n\t\tif (f.exists())\n\t\t{\n\t\t\t// Already exists, no need to create\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Build RRD create command prefix\n\t\t\tString cmdPrefix = \"create \" + completePath + \" --step \" + \n\t\t\t\tDataCollectionConfigFactory.getInstance().getStep(collectionName);\n\t\t    \n\t\t\t// Build datasource portion of RRD create command\n\t\t\t//\n\t\t\tString cmdDS = \" DS:\" + ds.getName() + \":\" + \n\t\t\t\t\t\tds.getType() + \":\" + \n\t\t\t\t\t\tds.getHeartbeat() + \":\" + \n\t\t\t\t\t\tds.getMin() + \":\" + \n\t\t\t\t\t\tds.getMax();\n\n\t\t\t// Build RRA portion of RRD create command\n\t\t\t//\n\t\t\tString cmdRRA = new String();\n\t\t\tList rraList = DataCollectionConfigFactory.getInstance().getRRAList(collectionName);\n\t\t\tIterator j = rraList.iterator();\n\t\t\twhile (j.hasNext())\n\t\t\t{\n\t\t\t\tString rra = (String)j.next();\n\t\t\t\tcmdRRA = cmdRRA.concat(\" \" + rra);\n\t\t\t}\n\t\t    \n\t\t\t// Put it all together...\n\t\t\tString cmd = cmdPrefix + cmdDS + cmdRRA;\n\t\t\n\t\t\t// Issue the RRD 'create' command\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"createRRD: issuing RRD create command: \" + cmd);\n\n\t\t\tString[] results = Interface.launch(cmd);\n\t\t    \n\t\t\t// Sanity check results array\n\t\t\tif (results == null)\n\t\t\t{\n\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t{\n\t\t\t\t\tlog.error(\"createRRD: Unexpected failure calling native method launch() with command string: \" + cmd);\n\t\t\t\t\tlog.error(\"createRRD: No error text available.\");\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(\"RRD database 'create' failed for primary SNMP interface \" + ipaddr.getHostAddress());\n\t\t\t}\n\t\t    \n\t\t\t// Check error string at index 0, will be null if create was successful\n\t\t\tif (results[0] != null)\n\t\t\t{\n\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\tlog.error(\"RRD database 'create' failed for \" + ipaddr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t\t\tthrow new RuntimeException(\"RRD database 'create' failed for primary SNMP interface \" + ipaddr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t}\n\t}","id":21720,"modified_method":"/**\n\t * Creates a single RRD file for the specified RRD data source.\n\t * \n\t * @param collectionName\tName of the collection \n\t * @param ipaddr\t\tInterface address\n\t * @param directory\t\tRRD repository directory\n\t * @param ds\t\t\tRRD data source \n\t * \n\t * @return TRUE if new RRD file created, FALSE if RRD file was not created \n\t *            because it already existed.\n\t */\n\tpublic boolean createRRD(String collectionName, InetAddress ipaddr, String directory, RRDDataSource ds) throws RrdException\n\t{\n        String creator = \"primary SNMP interface \" + ipaddr.getHostAddress();\n        int step = DataCollectionConfigFactory.getInstance().getStep(collectionName);\n        List rraList = DataCollectionConfigFactory.getInstance().getRRAList(collectionName);\n       \n        \n        return RrdUtils.createRRD(creator, directory, ds.getName(), step, ds.getType(), ds.getHeartbeat(), ds.getMin(), ds.getMax(), rraList);\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * This method is responsible for building an RRDTool style 'update' command\n\t * which is issued via the RRD JNI interface in order to push the latest\n\t * SNMP-collected values into the interface's RRD database.\n\t *\n\t * @param collectionName SNMP data Collection name from 'datacollection-config.xml'\n\t * @param iface \tNetworkInterface object of the interface currently being polled\n\t * @param nodeCollector Node level MIB data collected via SNMP for the polled interface\n\t * @param ifCollector \tInterface level MIB data collected via SNMP for the polled interface\n\t *\n\t * @exception RuntimeException  Thrown if the data source list for the interface\n\t * \t\t\t\tis null.\n\t */\n\tprivate boolean updateRRDs(String collectionName, NetworkInterface iface, SnmpNodeCollector nodeCollector, SnmpIfCollector ifCollector)\n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\tInetAddress ipaddr = (InetAddress)iface.getAddress();\n\t\t\n\t\t// Retrieve SNMP storage attribute\n\t\tString snmpStorage = (String)iface.getAttribute(SNMP_STORAGE_KEY);\n\t\t\t\n\t\t// Get primary interface index from NodeInfo object\n\t\tNodeInfo nodeInfo = (NodeInfo)iface.getAttribute(NODE_INFO_KEY);\n\t\tInteger primaryIfIndex = new Integer(nodeInfo.getPrimarySnmpIfIndex()); \n\t\t\n\t\t// Retrieve interface map attribute\n\t\t//\n\t\tMap ifMap = (Map)iface.getAttribute(IF_MAP_KEY);\n\t\t \n\t\t// Write relevant collected SNMP statistics to RRD database\n\t\t// \n\t\t// First the node level RRD info will be updated.\n\t\t// Secondly the interface level RRD info will be updated.\n\t\t//\n\t\tboolean rrdError = false;\n\t\t\n\t\t// -----------------------------------------------------------\n\t\t// Node data\n\t\t// -----------------------------------------------------------\n\t\tif (nodeCollector != null)\n\t\t{\n\t\t\tlog.debug(\"updateRRDs: processing node-level collection...\");\n\t\t\t\n\t\t\t// Build path to node RRD repository.  createRRD() will make the\n\t\t\t// appropriate directories if they do not already exist.\n\t\t\t//\n\t\t\tString nodeRepository = m_rrdPath + File.separator +\n\t\t\t\t\t\tString.valueOf(nodeInfo.getNodeId());\n\t\t\t\n\t\t\tSNMPCollectorEntry nodeEntry = nodeCollector.getEntry();\n\t\t\t\n\t\t\t// Iterate over the node datasource list and issue RRD update\n\t\t\t// commands to update each datasource which has a corresponding\n\t\t\t// value in the collected SNMP data\n\t\t\t//\n\t\t\tIterator iter = nodeInfo.getDsList().iterator();\n\t\t\twhile (iter.hasNext())\n\t\t\t{\n\t\t\t\tRRDDataSource ds = (RRDDataSource)iter.next(); \t\n\n\t\t\t\tString cmd = buildRRDUpdateCmd(nodeRepository, ds, nodeEntry);\n\n\t\t\t\tif (cmd == null)\n\t\t\t\t{\n\t\t\t\t\t// Do nothing, no update is necessary\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"updateRRDs: Skipping update, no data retrieved for nodeId: \" \n\t\t\t\t\t\t\t+ nodeInfo.getNodeId() + \" datasource: \" + ds.getName());\n\t\t\t\t}\n\t\t\t\telse if (cmd.equals(RRD_ERROR))\n\t\t\t\t{\n\t\t\t\t\t// Set rrdError flag\n\t\t\t\t\trrdError = true;\n\t\t\t\t\tlog.warn(\"updateRRDs: call to buildRRDUpdateCmd() failed for node: \" + \n\t\t\t\t\t\t\tnodeInfo.getNodeId() + \" datasource: \" + ds.getName());\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t// Call createRRD() to create RRD if it doesn't already exist\n\t\t\t\t\t//\n\t\t\t\t\tcreateRRD(collectionName, ipaddr, nodeRepository, ds);\n\t\t\t\t\t\n\t\t\t\t\t// Issue the RRD update\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"updateRRDs: Issuing RRD update command: \" + cmd);\n\t\t\t\t\tString[] results = Interface.launch(cmd);\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"updateRRDs: RRD update command completed.\");\n\t\t\t\t\t\n\t\t\t\t\t// Sanity check results array\n\t\t\t\t\tif (results == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlog.error(\"updateRRDs: Unexpected failure calling native method launch() with command string: \" + cmd);\n\t\t\t\t\t\t\tlog.error(\"updateRRDs: No error text available.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t    \n\t\t\t\t\t// Check error string at index 0, will be null if 'update' was successful\n\t\t\t\t\tif (results[0] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t\tlog.error(\"updateRRDs: node RRD database 'update' failed for \" + ipaddr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t\t\t}\t\t\n\t\t\t\t} \n\t\t\t} // end while(more datasources)\n\t\t} // end if(nodeCollector != null)\n\t\t\n\t\t// -----------------------------------------------------------\n\t\t// Interface-specific data\n\t\t// -----------------------------------------------------------\n\t\t\n\t\tif (ifCollector != null)\n\t\t{\n\t\t\t// Retrieve list of SNMP collector entries generated for the \n\t\t\t// remote node's interfaces.\n\t\t\t//\n\t\t\tList snmpCollectorEntries = ifCollector.getEntries();\n\t\t\tif (snmpCollectorEntries == null)\n\t\t\t\tthrow new RuntimeException(\"updateRRDs:  No data retrieved for the interface \" + ipaddr.getHostAddress());\n\t\t\t\n\t\t\t// Iterate over the SNMP collector entries \n\t\t\t//\n\t\t\tIterator iter = snmpCollectorEntries.iterator();  \n\t\t\twhile (iter.hasNext()) \n\t\t\t{\n\t\t\t\tSNMPCollectorEntry ifEntry = (SNMPCollectorEntry)iter.next();\n\t\n\t\t\t\tString ifIndex = (String)ifEntry.get(SNMPCollectorEntry.IF_INDEX);\n\t\t\t\t\n\t\t\t\t// Are we storing SNMP data for all interfaces or primary interface only?\n\t\t\t\t// If only storing for primary interface only proceed if current\n\t\t\t\t// ifIndex is equal to the ifIndex of the primary SNMP interface\n\t\t\t\tif (snmpStorage.equals(SNMP_STORAGE_PRIMARY))\n\t\t\t\t{\n\t\t\t\t\tif (!ifIndex.equals(primaryIfIndex.toString()))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: only storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tIfInfo ifInfo = (IfInfo)ifMap.get(new Integer(ifIndex));\n\n\t\t\t\tif (snmpStorage.equals(SNMP_STORAGE_SELECT))\n\t\t\t\t{\n\t\t\t\t\tif (ifInfo.getCollType() == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: selectively storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (ifInfo.getCollType().equals(\"N\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: selectively storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Use ifIndex to lookup the IfInfo object from the interface map\n\t\t\t\t//\n\t\t\t\tif (ifInfo.getDsList() == null)\n\t\t\t\t\tthrow new RuntimeException(\"Data Source list not available for primary IP addr \" + ipaddr.getHostAddress() + \" and ifIndex \" + ifInfo.getIndex());\n\t\t\t\t\n\t\t\t\t// Iterate over the interface datasource list and issue RRD update\n\t\t\t\t// commands to update each datasource which has a corresponding\n\t\t\t\t// value in the collected SNMP data\n\t\t\t\t//\n\t\t\t\tIterator i = ifInfo.getDsList().iterator();\n\t\t\t\twhile (i.hasNext())\n\t\t\t\t{\n\t\t\t\t\tRRDDataSource ds = (RRDDataSource)i.next(); \t\n\t\t\t\t\t\n\t\t\t\t\t// Build path to interface RRD repository.  createRRD() will make the\n\t\t\t\t\t// appropriate directories if they do not already exist.\n\t\t\t\t\t//\n\t\t\t\t\tString ifRepository = m_rrdPath + File.separator + \n\t\t\t\t\t\t\tString.valueOf(nodeInfo.getNodeId()) + File.separator + \n\t\t\t\t\t\t\tifInfo.getLabel();\n\t\t\t\t\t\n\t\t\t\t\t// Build RRD update command\n\t\t\t\t\t//\n\t\t\t\t\tString cmd = buildRRDUpdateCmd(ifRepository, ds, ifEntry);\n\t\t\t\t\tif (cmd == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Do nothing, no update is necessary\n\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: Skipping update, no data retrieved for node/ifindex: \" + \n\t\t\t\t\t\t\t\tnodeInfo.getNodeId() + \"/\" + ifIndex + \" datasource: \" + ds.getName());\n\t\t\t\t\t}\n\t\t\t\t\telse if (cmd.equals(RRD_ERROR))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Set rrdError flag\n\t\t\t\t\t\trrdError = true;\n\t\t\t\t\t\tlog.warn(\"updateRRDs: call to buildRRDUpdateCmd() failed for node/ifindex: \" + \n\t\t\t\t\t\t\t\t\tnodeInfo.getNodeId() + \"/\" + ifIndex + \" datasource: \" + ds.getName());\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\t// Call createRRD() to create RRD if it doesn't already exist\n\t\t\t\t\t\t//\n\t\t\t\t\t\tcreateRRD(collectionName, ipaddr, ifRepository, ds);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t// Issue the RRD update\n\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: Issuing RRD update command: \" + cmd);\n\t\t\t\t\t\t\n\t\t\t\t\t\tString[] results = Interface.launch(cmd);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: RRD update command completed.\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t// Sanity check results array\n\t\t\t\t\t\tif (results == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlog.error(\"updateRRDs: Unexpected failure calling native method launch() with command string: \" + cmd);\n\t\t\t\t\t\t\t\tlog.error(\"updateRRDs: No error text available.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t    \n\t\t\t\t\t\t// Check error string at index 0, will be null if 'update' was successful\n\t\t\t\t\t\tif (results[0] != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t\t\tlog.error(\"updateRRDs: interface RRD database 'update' failed for \" + ipaddr.getHostAddress() + \", reason: \" + results[0]);\n\t\t\t\t\t\t}\t\t\n\t\t\t\t\t}\n\t\t\t\t} // end while(more datasources)\n\t\t\t} // end while(more SNMP collector entries)\n\t\t} // end if(ifCollector != null)\n\t\treturn rrdError;\n\t}","id":21721,"modified_method":"/**\n\t * This method is responsible for building an RRDTool style 'update' command\n\t * which is issued via the RRD JNI interface in order to push the latest\n\t * SNMP-collected values into the interface's RRD database.\n\t *\n\t * @param collectionName SNMP data Collection name from 'datacollection-config.xml'\n\t * @param iface \tNetworkInterface object of the interface currently being polled\n\t * @param nodeCollector Node level MIB data collected via SNMP for the polled interface\n\t * @param ifCollector \tInterface level MIB data collected via SNMP for the polled interface\n\t *\n\t * @exception RuntimeException  Thrown if the data source list for the interface\n\t * \t\t\t\tis null.\n\t */\n\tprivate boolean updateRRDs(String collectionName, NetworkInterface iface, SnmpNodeCollector nodeCollector, SnmpIfCollector ifCollector)\n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\tInetAddress ipaddr = (InetAddress)iface.getAddress();\n\t\t\n\t\t// Retrieve SNMP storage attribute\n\t\tString snmpStorage = (String)iface.getAttribute(SNMP_STORAGE_KEY);\n\t\t\t\n\t\t// Get primary interface index from NodeInfo object\n\t\tNodeInfo nodeInfo = (NodeInfo)iface.getAttribute(NODE_INFO_KEY);\n\t\tInteger primaryIfIndex = new Integer(nodeInfo.getPrimarySnmpIfIndex()); \n\t\t\n\t\t// Retrieve interface map attribute\n\t\t//\n\t\tMap ifMap = (Map)iface.getAttribute(IF_MAP_KEY);\n\t\t \n\t\t// Write relevant collected SNMP statistics to RRD database\n\t\t// \n\t\t// First the node level RRD info will be updated.\n\t\t// Secondly the interface level RRD info will be updated.\n\t\t//\n\t\tboolean rrdError = false;\n\t\t\n\t\t// -----------------------------------------------------------\n\t\t// Node data\n\t\t// -----------------------------------------------------------\n\t\tif (nodeCollector != null)\n\t\t{\n\t\t\tlog.debug(\"updateRRDs: processing node-level collection...\");\n\t\t\t\n\t\t\t// Build path to node RRD repository.  createRRD() will make the\n\t\t\t// appropriate directories if they do not already exist.\n\t\t\t//\n\t\t\tString nodeRepository = m_rrdPath + File.separator +\n\t\t\t\t\t\tString.valueOf(nodeInfo.getNodeId());\n\t\t\t\n\t\t\tSNMPCollectorEntry nodeEntry = nodeCollector.getEntry();\n\t\t\t\n\t\t\t// Iterate over the node datasource list and issue RRD update\n\t\t\t// commands to update each datasource which has a corresponding\n\t\t\t// value in the collected SNMP data\n\t\t\t//\n\t\t\tIterator iter = nodeInfo.getDsList().iterator();\n\t\t\twhile (iter.hasNext())\n\t\t\t{\n\t\t\t\tRRDDataSource ds = (RRDDataSource)iter.next();\n                \n                try {\n                \n                    String dsVal = getRRDValue(ds, nodeEntry);\n\t\t\t\tif (dsVal == null)\n\t\t\t\t{\n\t\t\t\t\t// Do nothing, no update is necessary\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\tlog.debug(\"updateRRDs: Skipping update, no data retrieved for nodeId: \" \n\t\t\t\t\t\t\t+ nodeInfo.getNodeId() + \" datasource: \" + ds.getName());\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t// Call createRRD() to create RRD if it doesn't already exist\n\t\t\t\t\t//\n\t\t\t\t\tcreateRRD(collectionName, ipaddr, nodeRepository, ds);\n\t\t\t\t\tRrdUtils.updateRRD(ipaddr.getHostAddress(), nodeRepository, ds.getName(), dsVal);\t\t\n\t\t\t\t} \n                }\n                catch (RrdException e) {\n                    if (log.isEnabledFor(Priority.ERROR))\n                        log.error(\"updateRRDs: \"+e.getMessage());\n                }\n                catch(IllegalArgumentException e) {\n                    log.warn(\"getRRDValue: \"+e.getMessage());\n                    // Set rrdError flag\n                    rrdError = true;\n                    log.warn(\"updateRRDs: call to getRRDValue() failed for node: \" + \n                            nodeInfo.getNodeId() + \" datasource: \" + ds.getName());\n                }\n                \n\t\t\t} // end while(more datasources)\n\t\t} // end if(nodeCollector != null)\n\t\t\n\t\t// -----------------------------------------------------------\n\t\t// Interface-specific data\n\t\t// -----------------------------------------------------------\n\t\t\n\t\tif (ifCollector != null)\n\t\t{\n\t\t\t// Retrieve list of SNMP collector entries generated for the \n\t\t\t// remote node's interfaces.\n\t\t\t//\n\t\t\tList snmpCollectorEntries = ifCollector.getEntries();\n\t\t\tif (snmpCollectorEntries == null)\n\t\t\t\tthrow new RuntimeException(\"updateRRDs:  No data retrieved for the interface \" + ipaddr.getHostAddress());\n\t\t\t\n\t\t\t// Iterate over the SNMP collector entries \n\t\t\t//\n\t\t\tIterator iter = snmpCollectorEntries.iterator();  \n\t\t\twhile (iter.hasNext()) \n\t\t\t{\n\t\t\t\tSNMPCollectorEntry ifEntry = (SNMPCollectorEntry)iter.next();\n\t\n\t\t\t\tString ifIndex = (String)ifEntry.get(SNMPCollectorEntry.IF_INDEX);\n\t\t\t\t\n\t\t\t\t// Are we storing SNMP data for all interfaces or primary interface only?\n\t\t\t\t// If only storing for primary interface only proceed if current\n\t\t\t\t// ifIndex is equal to the ifIndex of the primary SNMP interface\n\t\t\t\tif (snmpStorage.equals(SNMP_STORAGE_PRIMARY))\n\t\t\t\t{\n\t\t\t\t\tif (!ifIndex.equals(primaryIfIndex.toString()))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: only storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tIfInfo ifInfo = (IfInfo)ifMap.get(new Integer(ifIndex));\n\n\t\t\t\tif (snmpStorage.equals(SNMP_STORAGE_SELECT))\n\t\t\t\t{\n\t\t\t\t\tif (ifInfo.getCollType() == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: selectively storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (ifInfo.getCollType().equals(\"N\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: selectively storing SNMP data for primary interface (\" + primaryIfIndex + \"), skipping ifIndex: \" + ifIndex);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Use ifIndex to lookup the IfInfo object from the interface map\n\t\t\t\t//\n\t\t\t\tif (ifInfo.getDsList() == null)\n\t\t\t\t\tthrow new RuntimeException(\"Data Source list not available for primary IP addr \" + ipaddr.getHostAddress() + \" and ifIndex \" + ifInfo.getIndex());\n\t\t\t\t\n\t\t\t\t// Iterate over the interface datasource list and issue RRD update\n\t\t\t\t// commands to update each datasource which has a corresponding\n\t\t\t\t// value in the collected SNMP data\n\t\t\t\t//\n\t\t\t\tIterator i = ifInfo.getDsList().iterator();\n\t\t\t\twhile (i.hasNext())\n\t\t\t\t{\n\t\t\t\t\tRRDDataSource ds = (RRDDataSource)i.next(); \t\n\t\t\t\t\t\n\t\t\t\t\t// Build path to interface RRD repository.  createRRD() will make the\n\t\t\t\t\t// appropriate directories if they do not already exist.\n\t\t\t\t\t//\n\t\t\t\t\tString ifRepository = m_rrdPath + File.separator + \n\t\t\t\t\t\t\tString.valueOf(nodeInfo.getNodeId()) + File.separator + \n\t\t\t\t\t\t\tifInfo.getLabel();\n                    \n                    \n                    \n                    try {\n                    \n                        String dsVal = getRRDValue(ds, ifEntry);\n\t\t\t\t\t\n\t\t\t\t\t// Build RRD update command\n\t\t\t\t\t//\n\t\t\t\t\tif (dsVal == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Do nothing, no update is necessary\n\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"updateRRDs: Skipping update, no data retrieved for node/ifindex: \" + \n\t\t\t\t\t\t\t\tnodeInfo.getNodeId() + \"/\" + ifIndex + \" datasource: \" + ds.getName());\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\t// Call createRRD() to create RRD if it doesn't already exist\n\t\t\t\t\t\t//\n\t\t\t\t\t\tcreateRRD(collectionName, ipaddr, ifRepository, ds);\n                        RrdUtils.updateRRD(ipaddr.getHostAddress(), ifRepository, ds.getName(), dsVal);\n\t\t\t\t\t\t\t\n                    }\n                    }\n                    catch (RrdException e) {\n                        if (log.isEnabledFor(Priority.ERROR)) {\n                            log.error(\"updateRRDs: \"+e.getMessage());\n                        }\n                    }\n                    catch(IllegalArgumentException e) {\n                        log.warn(\"buildRRDUpdateCmd: \"+e.getMessage());\n                        // Set rrdError flag\n                        rrdError = true;\n                        log.warn(\"updateRRDs: call to buildRRDUpdateCmd() failed for node/ifindex: \" + \n                                    nodeInfo.getNodeId() + \"/\" + ifIndex + \" datasource: \" + ds.getName());\n                    }\n                    \n\t\t\t\t\t\n\t\t\t\t} // end while(more datasources)\n\t\t\t} // end while(more SNMP collector entries)\n\t\t} // end if(ifCollector != null)\n\t\treturn rrdError;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * <P>Initialize the service thresholder.<\/P>\n\t *\n\t * @param parameters\tNot currently used.\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n\t\t// Initialize jni RRD interface.\n\t\t//\n\t\ttry\n\t\t{\n\t\t\torg.opennms.netmgt.rrd.Interface.init();\n\t\t}\n\t\tcatch(SecurityException se)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", se);\n\t\t\tthrow new UndeclaredThrowableException(se);\n\t\t}\n\t\tcatch(UnsatisfiedLinkError ule)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.FATAL))\n\t\t\t\tlog.fatal(\"initialize: Failed to initialize JNI RRD interface\", ule);\n\t\t\tthrow new UndeclaredThrowableException(ule);\n\t\t}\n\t\t\n\t\t// Save local reference to singleton instance \n\t\t//\n\t\tm_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","id":21722,"modified_method":"/**\n\t * <P>Initialize the service thresholder.<\/P>\n\t *\n\t * @param parameters\tNot currently used.\n\t *\n\t * @exception RuntimeException\tThrown if an unrecoverable error occurs that prevents \n\t * the plug-in from functioning.\n\t *\n\t */\n\tpublic void initialize(Map parameters) \n\t{\n\t\t// Log4j category\n\t\t//\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Get local host name (used when generating threshold events)\n\t\t//\n\t\ttry\n\t\t{\n\t\t\tm_host = InetAddress.getLocalHost().getHostName();\n\t\t}\n\t\tcatch(UnknownHostException e)\n\t\t{\n\t\t\tif(log.isEnabledFor(Priority.WARN))\n\t\t\t\tlog.warn(\"initialize: Unable to resolve local host name.\", e);\n\t\t\tm_host = \"unresolved.host\";\n\t\t}\n\t\t\n        try {\n            RrdUtils.initialize();\n        }\n        catch (RrdException e) {\n            if(log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n\t\t\n\t\treturn;\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Performs threshold checking on an SNMP RRD node directory.\n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId \t\tNode identifier\n\t * @param primary \t\tPrimary SNMP interface address \n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param thresholdMap\t\tMap of node level ThresholdEntity objects\n\t * \t\t\t\t\tkeyed by datasource name.\n\t * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkNodeDir(File directory, \n\t\t\t\tInteger nodeId, \n\t\t\t\tInetAddress primary, \n\t\t\t\tint interval,\n\t\t\t\tDate  date,\n\t\t\t\tMap thresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tnodeId == null\t||\n\t\t\tprimary == null || \n\t\t\tdate == null \t||\n\t\t\tthresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkNodeDir: threshold checking node dir: \" + directory.getAbsolutePath());\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null)\n\t\t\treturn;\n\t\t\t\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = fetch(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21723,"modified_method":"/**\n\t * Performs threshold checking on an SNMP RRD node directory.\n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId \t\tNode identifier\n\t * @param primary \t\tPrimary SNMP interface address \n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param thresholdMap\t\tMap of node level ThresholdEntity objects\n\t * \t\t\t\t\tkeyed by datasource name.\n\t * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkNodeDir(File directory, \n\t\t\t\tInteger nodeId, \n\t\t\t\tInetAddress primary, \n\t\t\t\tint interval,\n\t\t\t\tDate  date,\n\t\t\t\tMap thresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tnodeId == null\t||\n\t\t\tprimary == null || \n\t\t\tdate == null \t||\n\t\t\tthresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkNodeDir: threshold checking node dir: \" + directory.getAbsolutePath());\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null)\n\t\t\treturn;\n\t\t\t\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n                catch (RrdException e) {\n                    log.error(\"An error occurred retriving the last value for datasource '\"+ datasource + \"'\", e);\n                }\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Performs threshold checking on an SNMP RRD interface directory.\n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId \t\tNode identifier\n\t * @param primary \t\tPrimary SNMP interface address \n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param baseIfThresholdMap\tMap of configured interface level ThresholdEntity \n\t * \t\t\t\t\tobjects\tkeyed by datasource name.\n\t * @param allIfThresholdMap\tMap of threshold maps indexed by ifLabel\n\t * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkIfDir(File directory, \n\t\t\t\tInteger nodeId, \n\t\t\t\tInetAddress primary, \n\t\t\t\tint interval,\n\t\t\t\tDate date,\n\t\t\t\tMap baseIfThresholdMap,\n\t\t\t\tMap allIfThresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tnodeId == null\t||\n\t\t\tprimary == null || \n\t\t\tdate == null \t||\n\t\t\tbaseIfThresholdMap == null ||\n\t\t\tallIfThresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkIfDir: threshold checking interface dir: \" + directory.getAbsolutePath());\n\t\t\n\t\tString ifLabel = directory.getName();\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkIfDir: ifLabel=\" + ifLabel);\n\n\t\t// This is an interface directory extract the\n\t\t// interface label from the full path name of the file\n\t\t//\n\t\t/*\n\t\tString path = directory.getAbsolutePath();\n\t\tString path = directory\n\t\tint fileSepIndex = path.lastIndexOf(File.separatorChar);\n\t\tif (fileSepIndex >= 0)\n\t\t\tifLabel = path.substring(fileSepIndex+1, path.length());\n\t\telse \n\t\t\tifLabel = path;\n\t\t*/\n\t\t\n\t\t// Attempt to retrieve the threshold map for this interface\n\t\t// using the ifLabel for the interface \n\t\t// \n\t\tMap thresholdMap = (Map)allIfThresholdMap.get(ifLabel);\n\t\tif (thresholdMap == null)\n\t\t{\n\t\t\t// Doesn't exist yet, go ahead and create it\n\t\t\t// Must maintain a separate threshold map for\n\t\t\t// each interface.\n\t\t\tthresholdMap = new HashMap();\n\t\t\t\n\t\t\t// Iterate over base interface threshold map and clone each\n\t\t\t// ThresholdEntity object and add it to the threshold map.\n\t\t\t// for this interface.\n\t\t\t// \n\t\t\tIterator iter = baseIfThresholdMap.values().iterator();\n\t\t\twhile (iter.hasNext())\n\t\t\t{\n\t\t\t\tThresholdEntity entity = (ThresholdEntity)iter.next();\n\t\t\t\tthresholdMap.put(entity.getDatasourceName(), entity.clone());\n\t\t\t}\n\t\t\t\n\t\t\t// Add the new threshold map for this interface\n\t\t\t// to the all interfaces map.\n\t\t\tallIfThresholdMap.put(ifLabel, thresholdMap);\n\t\t}\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null || files.length==0)\n\t\t{\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"checkIfDir: no RRD files in dir: \" + directory);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tMap ifDataMap = null;\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"checkIfDir: looking up datasource: \" + datasource);\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = fetch(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\t// ifLabel will either be set to null for node level datasource values\n\t\t\t\t\t\t// or to a specific interface in the case of an interface level datasource.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ifLabel has the following format:\n\t\t\t\t\t\t// \t<ifName|ifDescr>-<macAddr>\n\t\t\t\t\t\t// \n\t\t\t\t\t\t// Call IfLabel.getInterfaceInfoFromLabel() utility method to retrieve \n\t\t\t\t\t\t// data from the 'snmpInterfaces' table for this interface.  This method\n\t\t\t\t\t\t// will return a Map of database values keyed by field name.\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif (ifLabel != null && ifDataMap == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Get database connection\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tjava.sql.Connection dbConn = null;\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdbConn = DatabaseConnectionFactory.getInstance().getConnection();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (SQLException sqlE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t\t\t\tlog.error(\"checkIfDir: Failed getting connection to the database.\", sqlE);\n\t\t\t\t\t\t\t\tthrow new UndeclaredThrowableException(sqlE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Make certain we close the connection\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tifDataMap = IfLabel.getInterfaceInfoFromIfLabel(dbConn, nodeId.intValue(), ifLabel);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (SQLException e)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Logging a warning message but processing will continue for\n\t\t\t\t\t\t\t\t// this thresholding event, when the event is created it \n\t\t\t\t\t\t\t\t// will be created with an interface value set to the primary\n\t\t\t\t\t\t\t\t// SNMP interface address and an event source set to \n\t\t\t\t\t\t\t\t// <datasource>:<ifLabel>.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlog.warn(\"Failed to retrieve interface info from database using ifLabel '\" + ifLabel);\n\t\t\t\t\t\t\t\tifDataMap = new HashMap();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinally\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Done with the database so close the connection\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (SQLException sqle)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.INFO))\n\t\t\t\t\t\t\t\t\t\tlog.info(\"checkIfDir: SQLException while closing database connection\", sqle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Adding ifLabel value to the map for potential use by\n\t\t\t\t\t\t\t// the createEvent() method\n\t\t\t\t\t\t\tifDataMap.put(\"iflabel\", ifLabel);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Debug - dump data map\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tIterator iter = ifDataMap.keySet().iterator();\n\t\t\t\t\t\t\t\twhile (iter.hasNext())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tString key = (String)iter.next();\n\t\t\t\t\t\t\t\t\tString value = (String)ifDataMap.get(key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21724,"modified_method":"/**\n\t * Performs threshold checking on an SNMP RRD interface directory.\n\t * \n\t * @param directory\t\tRRD repository directory\n\t * @param nodeId \t\tNode identifier\n\t * @param primary \t\tPrimary SNMP interface address \n\t * @param interval\t\tConfigured thresholding interval\n\t * @param date \t\t\tSource for timestamp to be used for all \n\t * \t\t\t\t\tgenerated events\n\t * @param baseIfThresholdMap\tMap of configured interface level ThresholdEntity \n\t * \t\t\t\t\tobjects\tkeyed by datasource name.\n\t * @param allIfThresholdMap\tMap of threshold maps indexed by ifLabel\n\t * @param events\t\tCastor events object containing any\n\t * \t\t\t\t\tevents to be generated as a result\n\t * \t\t\t\t\tof threshold checking.\n\t * \n\t * @throws IllegalArgumentException if path parameter is not a directory.\n\t */\n\tprivate void checkIfDir(File directory, \n\t\t\t\tInteger nodeId, \n\t\t\t\tInetAddress primary, \n\t\t\t\tint interval,\n\t\t\t\tDate date,\n\t\t\t\tMap baseIfThresholdMap,\n\t\t\t\tMap allIfThresholdMap,\n\t\t\t\tEvents events)\n\t\tthrows IllegalArgumentException\n\t{\n\t\tCategory log = ThreadCategory.getInstance(getClass());\n\t\t\n\t\t// Sanity Check\n\t\tif (directory == null ||\n\t\t\tnodeId == null\t||\n\t\t\tprimary == null || \n\t\t\tdate == null \t||\n\t\t\tbaseIfThresholdMap == null ||\n\t\t\tallIfThresholdMap == null ||\n\t\t\tevents == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Null parameters not permitted.\");\n\t\t}\n\t\t\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkIfDir: threshold checking interface dir: \" + directory.getAbsolutePath());\n\t\t\n\t\tString ifLabel = directory.getName();\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"checkIfDir: ifLabel=\" + ifLabel);\n\n\t\t// This is an interface directory extract the\n\t\t// interface label from the full path name of the file\n\t\t//\n\t\t/*\n\t\tString path = directory.getAbsolutePath();\n\t\tString path = directory\n\t\tint fileSepIndex = path.lastIndexOf(File.separatorChar);\n\t\tif (fileSepIndex >= 0)\n\t\t\tifLabel = path.substring(fileSepIndex+1, path.length());\n\t\telse \n\t\t\tifLabel = path;\n\t\t*/\n\t\t\n\t\t// Attempt to retrieve the threshold map for this interface\n\t\t// using the ifLabel for the interface \n\t\t// \n\t\tMap thresholdMap = (Map)allIfThresholdMap.get(ifLabel);\n\t\tif (thresholdMap == null)\n\t\t{\n\t\t\t// Doesn't exist yet, go ahead and create it\n\t\t\t// Must maintain a separate threshold map for\n\t\t\t// each interface.\n\t\t\tthresholdMap = new HashMap();\n\t\t\t\n\t\t\t// Iterate over base interface threshold map and clone each\n\t\t\t// ThresholdEntity object and add it to the threshold map.\n\t\t\t// for this interface.\n\t\t\t// \n\t\t\tIterator iter = baseIfThresholdMap.values().iterator();\n\t\t\twhile (iter.hasNext())\n\t\t\t{\n\t\t\t\tThresholdEntity entity = (ThresholdEntity)iter.next();\n\t\t\t\tthresholdMap.put(entity.getDatasourceName(), entity.clone());\n\t\t\t}\n\t\t\t\n\t\t\t// Add the new threshold map for this interface\n\t\t\t// to the all interfaces map.\n\t\t\tallIfThresholdMap.put(ifLabel, thresholdMap);\n\t\t}\n\t\t\n\t\t// Iterate over directory contents and threshold\n\t\t// check any RRD files which represent datasources\n\t\t// in the threshold maps.\n\t\t//\n\t\tFile[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);\n\t\t\n\t\tif (files == null || files.length==0)\n\t\t{\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"checkIfDir: no RRD files in dir: \" + directory);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tMap ifDataMap = null;\n\t\tfor (int i=0; i<files.length; i++)\n\t\t{\n\t\t\t// File name has format: <datsource>.rrd\n\t\t\t// Must strip off \".rrd\" portion.\n\t\t\tString filename = files[i].getName();\n\t\t\tString datasource = filename.substring(0, filename.indexOf(\".rrd\"));\n\t\t\t\n\t\t\t// Lookup the ThresholdEntity object corresponding\n\t\t\t// to this datasource.  \n\t\t\t//\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"checkIfDir: looking up datasource: \" + datasource);\n\t\t\tThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);\n\t\t\tif (threshold != null)\n\t\t\t{\n\t\t\t\t// Use RRD JNI interface to \"fetch\" value of the\n\t\t\t\t// datasource from the RRD file\n\t\t\t\t//\n\t\t\t\tDouble dsValue = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);\n\t\t\t\t}\n\t\t\t\tcatch (NumberFormatException nfe)\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Unable to convert retrieved value for datasource '\" + datasource + \"' to a double, skipping evaluation.\");\n\t\t\t\t}\n                catch (RrdException e) {\n                    log.error(\"An error occurred retriving the last value for datasource '\"+ datasource + \"'\", e);\n                }\n\t\t\t\t\n\t\t\t\tif (dsValue != null && !dsValue.isNaN())\n\t\t\t\t{\n\t\t\t\t\t// Evaluate the threshold\n\t\t\t\t\t// \n\t\t\t\t\t// ThresholdEntity.evaluate() returns an integer value\n\t\t\t\t\t// which indicates which threshold values were\n\t\t\t\t\t// triggered and require an event to be generated (if any).\n\t\t\t\t\t// \n\t\t\t\t\tint result = threshold.evaluate(dsValue.doubleValue());\n\t\t\t\t\tif (result != ThresholdEntity.NONE_TRIGGERED)\n\t\t\t\t\t{\n\t\t\t\t\t\t// ifLabel will either be set to null for node level datasource values\n\t\t\t\t\t\t// or to a specific interface in the case of an interface level datasource.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// ifLabel has the following format:\n\t\t\t\t\t\t// \t<ifName|ifDescr>-<macAddr>\n\t\t\t\t\t\t// \n\t\t\t\t\t\t// Call IfLabel.getInterfaceInfoFromLabel() utility method to retrieve \n\t\t\t\t\t\t// data from the 'snmpInterfaces' table for this interface.  This method\n\t\t\t\t\t\t// will return a Map of database values keyed by field name.\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif (ifLabel != null && ifDataMap == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Get database connection\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tjava.sql.Connection dbConn = null;\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdbConn = DatabaseConnectionFactory.getInstance().getConnection();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (SQLException sqlE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.ERROR))\n\t\t\t\t\t\t\t\t\tlog.error(\"checkIfDir: Failed getting connection to the database.\", sqlE);\n\t\t\t\t\t\t\t\tthrow new UndeclaredThrowableException(sqlE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Make certain we close the connection\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tifDataMap = IfLabel.getInterfaceInfoFromIfLabel(dbConn, nodeId.intValue(), ifLabel);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (SQLException e)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Logging a warning message but processing will continue for\n\t\t\t\t\t\t\t\t// this thresholding event, when the event is created it \n\t\t\t\t\t\t\t\t// will be created with an interface value set to the primary\n\t\t\t\t\t\t\t\t// SNMP interface address and an event source set to \n\t\t\t\t\t\t\t\t// <datasource>:<ifLabel>.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlog.warn(\"Failed to retrieve interface info from database using ifLabel '\" + ifLabel);\n\t\t\t\t\t\t\t\tifDataMap = new HashMap();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinally\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Done with the database so close the connection\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (SQLException sqle)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(log.isEnabledFor(Priority.INFO))\n\t\t\t\t\t\t\t\t\t\tlog.info(\"checkIfDir: SQLException while closing database connection\", sqle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Adding ifLabel value to the map for potential use by\n\t\t\t\t\t\t\t// the createEvent() method\n\t\t\t\t\t\t\tifDataMap.put(\"iflabel\", ifLabel);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Debug - dump data map\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tIterator iter = ifDataMap.keySet().iterator();\n\t\t\t\t\t\t\t\twhile (iter.hasNext())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tString key = (String)iter.next();\n\t\t\t\t\t\t\t\t\tString value = (String)ifDataMap.get(key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_TRIGGERED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.HIGH_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary,\n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getHighThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||\n\t\t\t\t\t\t\tresult == ThresholdEntity.LOW_REARMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tevents.addEvent(createEvent(nodeId, \n\t\t\t\t\t\t\t\t\t\tprimary, \n\t\t\t\t\t\t\t\t\t\tifDataMap,\n\t\t\t\t\t\t\t\t\t\tdsValue.doubleValue(),\n\t\t\t\t\t\t\t\t\t\tthreshold.getLowThreshold(),\n\t\t\t\t\t\t\t\t\t\tEventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, \n\t\t\t\t\t\t\t\t\t\tdate));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Poll the specified address for service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port. If the connection\n     * request is successful, the banner line generated by the interface is parsed and if the\n     * banner text indicates that we are talking to Provided that the interface's response is\n     * valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if the interface experiences errors during the poll.\n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Port\n        //\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        if (port == DEFAULT_PORT) { throw new RuntimeException(\"SshMonitor: required parameter 'port' is not present in supplied properties.\"); }\n\n        // BannerMatch\n        //\n        String strBannerMatch = (String) parameters.get(\"banner\");\n\n        // Get the address instance.\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        // Give it a whirl\n        //\n        int serviceStatus = SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"SshMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                if (strBannerMatch == null || strBannerMatch.equals(\"*\")) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    break;\n                }\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String response = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (response == null) continue;\n                if (log.isDebugEnabled()) {\n                    log.debug(\"poll: banner = \" + response);\n                    log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                }\n\n                if (response.indexOf(strBannerMatch) > -1) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // send the identifier string\n                    //\n                    String cmd = \"SSH-1.99-OpenNMS_1.1\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n                    // get the response code.\n                    //\n                    response = null;\n                    try {\n                        response = rdr.readLine();\n                    } catch (IOException e) {\n                    }\n\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                } else\n                    serviceStatus = SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"SshMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21725,"modified_method":"/**\n     * Poll the specified address for service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port. If the connection\n     * request is successful, the banner line generated by the interface is parsed and if the\n     * banner text indicates that we are talking to Provided that the interface's response is\n     * valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if the interface experiences errors during the poll.\n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Port\n        //\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        if (port == DEFAULT_PORT) { throw new RuntimeException(\"SshMonitor: required parameter 'port' is not present in supplied properties.\"); }\n\n        // BannerMatch\n        //\n        String strBannerMatch = (String) parameters.get(\"banner\");\n\n        // Get the address instance.\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        // Give it a whirl\n        //\n        int serviceStatus = SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"SshMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                if (strBannerMatch == null || strBannerMatch.equals(\"*\")) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    break;\n                }\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String response = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (response == null) continue;\n                if (log.isDebugEnabled()) {\n                    log.debug(\"poll: banner = \" + response);\n                    log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                }\n\n                if (response.indexOf(strBannerMatch) > -1) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // send the identifier string\n                    //\n                    String cmd = \"SSH-1.99-OpenNMS_1.1\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n                    // get the response code.\n                    //\n                    response = null;\n                    try {\n                        response = rdr.readLine();\n                    } catch (IOException e) {\n                    }\n\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                } else\n                    serviceStatus = SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"SshMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                // Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Poll the specified address for service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port. If the connection\n     * request is successful, the banner line generated by the interface is parsed and if the\n     * banner text indicates that we are talking to Provided that the interface's response is\n     * valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if the interface experiences errors during the poll.\n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Port\n        //\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        if (port == DEFAULT_PORT) { throw new RuntimeException(\"TcpMonitor: required parameter 'port' is not present in supplied properties.\"); }\n\n        // BannerMatch\n        //\n        String strBannerMatch = (String) parameters.get(\"banner\");\n\n        // Get the address instance.\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        // Give it a whirl\n        //\n        int serviceStatus = SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"TcpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                if (strBannerMatch == null || strBannerMatch.equals(\"*\")) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                    break;\n                }\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String response = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (response == null) continue;\n                if (log.isDebugEnabled()) {\n                    log.debug(\"poll: banner = \" + response);\n                    log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                }\n\n                if (response.indexOf(strBannerMatch) > -1) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                } else\n                    serviceStatus = SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"TcpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                //Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":21726,"modified_method":"/**\n     * Poll the specified address for service availability.\n     * \n     * During the poll an attempt is made to connect on the specified port. If the connection\n     * request is successful, the banner line generated by the interface is parsed and if the\n     * banner text indicates that we are talking to Provided that the interface's response is\n     * valid we set the service status to SERVICE_AVAILABLE and return.\n     * \n     * @param iface\n     *            The network interface to test the service on.\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for this poll.\n     * \n     * @return The availibility of the interface and if a transition event should be supressed.\n     * \n     * @throws java.lang.RuntimeException\n     *             Thrown if the interface experiences errors during the poll.\n     */\n    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {\n        //\n        // Process parameters\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n\n        //\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n                throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        int retry = ParameterMap.getKeyedInteger(parameters, \"retry\", DEFAULT_RETRY);\n        int timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", DEFAULT_TIMEOUT);\n        String rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n        String dsName = ParameterMap.getKeyedString(parameters, \"ds-name\", null);\n\n        if (rrdPath == null) {\n            log.info(\"poll: RRD repository not specified in parameters, latency data will not be stored.\");\n        }\n        if (dsName == null) {\n            dsName = DS_NAME;\n        }\n\n        // Port\n        //\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        if (port == DEFAULT_PORT) { throw new RuntimeException(\"TcpMonitor: required parameter 'port' is not present in supplied properties.\"); }\n\n        // BannerMatch\n        //\n        String strBannerMatch = (String) parameters.get(\"banner\");\n\n        // Get the address instance.\n        //\n        InetAddress ipv4Addr = (InetAddress) iface.getAddress();\n\n        if (log.isDebugEnabled())\n                log.debug(\"poll: address = \" + ipv4Addr.getHostAddress() + \", port = \" + port + \", timeout = \" + timeout + \", retry = \" + retry);\n\n        // Give it a whirl\n        //\n        int serviceStatus = SERVICE_UNAVAILABLE;\n        long responseTime = -1;\n\n        for (int attempts = 0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++) {\n            Socket socket = null;\n            try {\n                //\n                // create a connected socket\n                //\n                long sentTime = System.currentTimeMillis();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);\n                socket.setSoTimeout(timeout);\n                log.debug(\"TcpMonitor: connected to host: \" + ipv4Addr + \" on port: \" + port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = SERVICE_UNRESPONSIVE;\n\n                if (strBannerMatch == null || strBannerMatch.equals(\"*\")) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                    break;\n                }\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String response = rdr.readLine();\n                responseTime = System.currentTimeMillis() - sentTime;\n\n                if (response == null) continue;\n                if (log.isDebugEnabled()) {\n                    log.debug(\"poll: banner = \" + response);\n                    log.debug(\"poll: responseTime= \" + responseTime + \"ms\");\n                }\n\n                if (response.indexOf(strBannerMatch) > -1) {\n                    serviceStatus = SERVICE_AVAILABLE;\n                    // Store response time in RRD\n                    if (responseTime >= 0 && rrdPath != null) {\n                        try {\n                            this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);\n                        } catch (RuntimeException rex) {\n                            log.debug(\"There was a problem writing the RRD:\" + rex);\n                        }\n                    }\n                } else\n                    serviceStatus = SERVICE_UNAVAILABLE;\n            } catch (NoRouteToHostException e) {\n                e.fillInStackTrace();\n                if (log.isEnabledFor(Priority.WARN)) log.warn(\"poll: No route to host exception for address \" + ipv4Addr.getHostAddress(), e);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n                log.debug(\"TcpMonitor: did not connect to host within timeout: \" + timeout + \" attempt: \" + attempts);\n            } catch (ConnectException e) {\n                //Connection refused. Continue to retry.\n                //\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: Connection exception for address: \" + ipv4Addr, e);\n            } catch (IOException e) {\n                // Ignore\n                e.fillInStackTrace();\n                if (log.isDebugEnabled()) log.debug(\"poll: IOException while polling address: \" + ipv4Addr, e);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) socket.close();\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    if (log.isDebugEnabled()) log.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"fe0acdbb1503d4392c4be013b5256e1383e79876","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","id":21727,"modified_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct, 10, 3);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Ignore\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n    }","id":21728,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void walk(CollectionTracker c) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(1);\n        config.setMaxRepetitions(1);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","id":21729,"modified_method":"private void walk(CollectionTracker c, int maxVarsPerPdu, int maxRepetitions) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(maxVarsPerPdu);\n        config.setMaxRepetitions(maxRepetitions);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":21730,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        System.err.println(String.format(\"instantiating table tracker: rc=%s, repetitions=%d, object IDs = %s\", rc, maxRepetitions, Arrays.toString(ids)));\n        m_ids = ids;\n        m_lastOid = new SnmpObjId[ids.length];\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_finishedColumns = new ArrayList<Boolean>(ids.length);\n        for (int i = 0; i < ids.length; i++) {\n            m_lastOid[i] = ids[i];\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            m_finishedColumns.add(false);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":21731,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_ids.length);\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":21732,"modified_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (Boolean b : m_finishedColumns) {\n            if (!b) {\n                System.err.println(\"isFinished: false\");\n                return false;\n            }\n        }\n        System.err.println(\"isFinished: true\");\n        return true;\n    }","id":21733,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        for (int i = 0; i < pduBuilder.getMaxVarsPerPdu(); i++) {\n            pduBuilder.addOid(m_lastOid[m_nextColumnIndex + i]);\n        }\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new TableResponseProcessor(m_nextColumnIndex, pduBuilder.getMaxVarsPerPdu());\n        System.err.println(\"got response processor\");\n\n        m_nextColumnIndex++;\n        return rp;\n    }","id":21734,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(int columnIndex, SnmpResult res) {\n        System.err.println(String.format(\"store result: column[%s]: storing %s\", columnIndex, res));\n        \n        if (m_callback != null) {\n            System.err.println(String.format(\"pending data: column[%s]: adding %s\", columnIndex, res));\n            m_pendingData.get(columnIndex).add(res);\n\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"pending data: row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        if (m_nextColumnIndex > m_ids.length) {\n            m_nextColumnIndex = 0;\n        }\n\n        super.storeResult(res);\n    }","id":21735,"modified_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        System.err.println(\"setting max repetitions to \" + maxRepetitions);\n        m_maxRepetitions = maxRepetitions;\n    }","id":21736,"modified_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        m_maxRepetitions = maxRepetitions;\n    }","commit_id":"6344b2f0eae942cb95bdc0363b6a7a3b8620b344","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","id":21737,"modified_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct, 10, 3);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void walk(CollectionTracker c) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(1);\n        config.setMaxRepetitions(1);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","id":21738,"modified_method":"private void walk(CollectionTracker c, int maxVarsPerPdu, int maxRepetitions) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(maxVarsPerPdu);\n        config.setMaxRepetitions(maxRepetitions);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Ignore\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n    }","id":21739,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        for (int i = 0; i < pduBuilder.getMaxVarsPerPdu(); i++) {\n            pduBuilder.addOid(m_lastOid[m_nextColumnIndex + i]);\n        }\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new TableResponseProcessor(m_nextColumnIndex, pduBuilder.getMaxVarsPerPdu());\n        System.err.println(\"got response processor\");\n\n        m_nextColumnIndex++;\n        return rp;\n    }","id":21740,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(int columnIndex, SnmpResult res) {\n        System.err.println(String.format(\"store result: column[%s]: storing %s\", columnIndex, res));\n        \n        if (m_callback != null) {\n            System.err.println(String.format(\"pending data: column[%s]: adding %s\", columnIndex, res));\n            m_pendingData.get(columnIndex).add(res);\n\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"pending data: row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        if (m_nextColumnIndex > m_ids.length) {\n            m_nextColumnIndex = 0;\n        }\n\n        super.storeResult(res);\n    }","id":21741,"modified_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (Boolean b : m_finishedColumns) {\n            if (!b) {\n                System.err.println(\"isFinished: false\");\n                return false;\n            }\n        }\n        System.err.println(\"isFinished: true\");\n        return true;\n    }","id":21742,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_ids.length);\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":21743,"modified_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        System.err.println(String.format(\"instantiating table tracker: rc=%s, repetitions=%d, object IDs = %s\", rc, maxRepetitions, Arrays.toString(ids)));\n        m_ids = ids;\n        m_lastOid = new SnmpObjId[ids.length];\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_finishedColumns = new ArrayList<Boolean>(ids.length);\n        for (int i = 0; i < ids.length; i++) {\n            m_lastOid[i] = ids[i];\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            m_finishedColumns.add(false);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":21744,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":21745,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        System.err.println(\"setting max repetitions to \" + maxRepetitions);\n        m_maxRepetitions = maxRepetitions;\n    }","id":21746,"modified_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        m_maxRepetitions = maxRepetitions;\n    }","commit_id":"0c26d55384ae437fae2f0d4556c2cbbd3cc2e460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","id":21747,"modified_method":"@Test\n    public void testColumnTracker() throws Exception {\n        CountingColumnTracker ct = new CountingColumnTracker(SnmpObjId.get(\".1.3.6.1.2.1.2.2.1.1\"));\n\n        walk(ct, 10, 3);\n        assertEquals(\"number of columns returned must match test data\", Long.valueOf(6).longValue(), ct.getCount());\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Ignore\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n    }","id":21748,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void walk(CollectionTracker c) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(1);\n        config.setMaxRepetitions(1);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","id":21749,"modified_method":"private void walk(CollectionTracker c, int maxVarsPerPdu, int maxRepetitions) throws Exception {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getLocalHost());\n        config.setPort(9161);\n        config.setVersion(SnmpAgentConfig.VERSION2C);\n        config.setMaxVarsPerPdu(maxVarsPerPdu);\n        config.setMaxRepetitions(maxRepetitions);\n        SnmpWalker walker = SnmpUtils.createWalker(config, \"test\", c);\n        assertNotNull(walker);\n        walker.start();\n        walker.waitFor();\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_ids.length);\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":21750,"modified_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":21751,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(int columnIndex, SnmpResult res) {\n        System.err.println(String.format(\"store result: column[%s]: storing %s\", columnIndex, res));\n        \n        if (m_callback != null) {\n            System.err.println(String.format(\"pending data: column[%s]: adding %s\", columnIndex, res));\n            m_pendingData.get(columnIndex).add(res);\n\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"pending data: row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        if (m_nextColumnIndex > m_ids.length) {\n            m_nextColumnIndex = 0;\n        }\n\n        super.storeResult(res);\n    }","id":21752,"modified_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (Boolean b : m_finishedColumns) {\n            if (!b) {\n                System.err.println(\"isFinished: false\");\n                return false;\n            }\n        }\n        System.err.println(\"isFinished: true\");\n        return true;\n    }","id":21753,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        for (int i = 0; i < pduBuilder.getMaxVarsPerPdu(); i++) {\n            pduBuilder.addOid(m_lastOid[m_nextColumnIndex + i]);\n        }\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new TableResponseProcessor(m_nextColumnIndex, pduBuilder.getMaxVarsPerPdu());\n        System.err.println(\"got response processor\");\n\n        m_nextColumnIndex++;\n        return rp;\n    }","id":21754,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        System.err.println(String.format(\"instantiating table tracker: rc=%s, repetitions=%d, object IDs = %s\", rc, maxRepetitions, Arrays.toString(ids)));\n        m_ids = ids;\n        m_lastOid = new SnmpObjId[ids.length];\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_finishedColumns = new ArrayList<Boolean>(ids.length);\n        for (int i = 0; i < ids.length; i++) {\n            m_lastOid[i] = ids[i];\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            m_finishedColumns.add(false);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":21755,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        System.err.println(\"setting max repetitions to \" + maxRepetitions);\n        m_maxRepetitions = maxRepetitions;\n    }","id":21756,"modified_method":"@Override\n    public void setMaxRepetitions(int maxRepetitions) {\n        m_maxRepetitions = maxRepetitions;\n    }","commit_id":"a5c1ab78bf6fd0bba23bfd9d5072acd34b8b597d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public final EObject entryRuleConcrete1_Impl() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete1_Impl = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:457:2: (iv_ruleConcrete1_Impl= ruleConcrete1_Impl EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:458:2: iv_ruleConcrete1_Impl= ruleConcrete1_Impl EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getConcrete1_ImplRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete1_Impl_in_entryRuleConcrete1_Impl933);\n            iv_ruleConcrete1_Impl=ruleConcrete1_Impl();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete1_Impl; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete1_Impl943); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21757,"modified_method":"public final EObject entryRuleConcrete1_Impl() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete1_Impl = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:404:2: (iv_ruleConcrete1_Impl= ruleConcrete1_Impl EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:405:2: iv_ruleConcrete1_Impl= ruleConcrete1_Impl EOF\n            {\n             newCompositeNode(grammarAccess.getConcrete1_ImplRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete1_Impl_in_entryRuleConcrete1_Impl933);\n            iv_ruleConcrete1_Impl=ruleConcrete1_Impl();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete1_Impl; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete1_Impl943); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject entryRuleConcrete0() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete0 = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:286:2: (iv_ruleConcrete0= ruleConcrete0 EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:287:2: iv_ruleConcrete0= ruleConcrete0 EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getConcrete0Rule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete0_in_entryRuleConcrete0490);\n            iv_ruleConcrete0=ruleConcrete0();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete0; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete0500); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21758,"modified_method":"public final EObject entryRuleConcrete0() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete0 = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:252:2: (iv_ruleConcrete0= ruleConcrete0 EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:253:2: iv_ruleConcrete0= ruleConcrete0 EOF\n            {\n             newCompositeNode(grammarAccess.getConcrete0Rule()); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete0_in_entryRuleConcrete0490);\n            iv_ruleConcrete0=ruleConcrete0();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete0; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete0500); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleAbstract() throws RecognitionException {\n        EObject current = null;\n\n        EObject this_Concrete0_Impl_0 = null;\n\n        EObject this_Concrete1_Impl_1 = null;\n\n        EObject this_DiamondInheritance_2 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:247:6: ( (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:248:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:248:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance )\n            int alt4=3;\n            switch ( input.LA(1) ) {\n            case 18:\n                {\n                alt4=1;\n                }\n                break;\n            case 19:\n                {\n                alt4=2;\n                }\n                break;\n            case 20:\n                {\n                alt4=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 4, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt4) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:249:5: this_Concrete0_Impl_0= ruleConcrete0_Impl\n                    {\n                     \n                            currentNode=createCompositeNode(grammarAccess.getAbstractAccess().getConcrete0_ImplParserRuleCall_0(), currentNode); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_ruleAbstract401);\n                    this_Concrete0_Impl_0=ruleConcrete0_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete0_Impl_0; \n                            currentNode = currentNode.getParent();\n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:259:5: this_Concrete1_Impl_1= ruleConcrete1_Impl\n                    {\n                     \n                            currentNode=createCompositeNode(grammarAccess.getAbstractAccess().getConcrete1_ImplParserRuleCall_1(), currentNode); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete1_Impl_in_ruleAbstract428);\n                    this_Concrete1_Impl_1=ruleConcrete1_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete1_Impl_1; \n                            currentNode = currentNode.getParent();\n                        \n\n                    }\n                    break;\n                case 3 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:269:5: this_DiamondInheritance_2= ruleDiamondInheritance\n                    {\n                     \n                            currentNode=createCompositeNode(grammarAccess.getAbstractAccess().getDiamondInheritanceParserRuleCall_2(), currentNode); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_ruleAbstract455);\n                    this_DiamondInheritance_2=ruleDiamondInheritance();\n\n                    state._fsp--;\n\n                     \n                            current = this_DiamondInheritance_2; \n                            currentNode = currentNode.getParent();\n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21759,"modified_method":"public final EObject ruleAbstract() throws RecognitionException {\n        EObject current = null;\n\n        EObject this_Concrete0_Impl_0 = null;\n\n        EObject this_Concrete1_Impl_1 = null;\n\n        EObject this_DiamondInheritance_2 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:213:28: ( (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:214:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:214:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_Concrete1_Impl_1= ruleConcrete1_Impl | this_DiamondInheritance_2= ruleDiamondInheritance )\n            int alt4=3;\n            switch ( input.LA(1) ) {\n            case 18:\n                {\n                alt4=1;\n                }\n                break;\n            case 19:\n                {\n                alt4=2;\n                }\n                break;\n            case 20:\n                {\n                alt4=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 4, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt4) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:215:5: this_Concrete0_Impl_0= ruleConcrete0_Impl\n                    {\n                     \n                            newCompositeNode(grammarAccess.getAbstractAccess().getConcrete0_ImplParserRuleCall_0()); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_ruleAbstract401);\n                    this_Concrete0_Impl_0=ruleConcrete0_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete0_Impl_0; \n                            afterParserOrEnumRuleCall();\n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:225:5: this_Concrete1_Impl_1= ruleConcrete1_Impl\n                    {\n                     \n                            newCompositeNode(grammarAccess.getAbstractAccess().getConcrete1_ImplParserRuleCall_1()); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete1_Impl_in_ruleAbstract428);\n                    this_Concrete1_Impl_1=ruleConcrete1_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete1_Impl_1; \n                            afterParserOrEnumRuleCall();\n                        \n\n                    }\n                    break;\n                case 3 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:235:5: this_DiamondInheritance_2= ruleDiamondInheritance\n                    {\n                     \n                            newCompositeNode(grammarAccess.getAbstractAccess().getDiamondInheritanceParserRuleCall_2()); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_ruleAbstract455);\n                    this_DiamondInheritance_2=ruleDiamondInheritance();\n\n                    state._fsp--;\n\n                     \n                            current = this_DiamondInheritance_2; \n                            afterParserOrEnumRuleCall();\n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleConcrete0_Impl() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:370:6: ( ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:371:1: ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:371:1: ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:371:2: () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:371:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:372:5: \n            {\n             \n                    temp=factory.create(grammarAccess.getConcrete0_ImplAccess().getConcrete0Action_0().getType().getClassifier());\n                    current = temp; \n                    temp = null;\n                    CompositeNode newNode = createCompositeNode(grammarAccess.getConcrete0_ImplAccess().getConcrete0Action_0(), currentNode.getParent());\n                newNode.getChildren().add(currentNode);\n                moveLookaheadInfo(currentNode, newNode);\n                currentNode = newNode; \n                    associateNodeWithAstElement(currentNode, current); \n                \n\n            }\n\n            otherlv_1=(Token)match(input,18,FollowSets000.FOLLOW_18_in_ruleConcrete0_Impl753); \n\n                \tcreateLeafNode(otherlv_1, grammarAccess.getConcrete0_ImplAccess().getConcrete0Keyword_1(), null);\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:386:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:387:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:387:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:388:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        currentNode=createCompositeNode(grammarAccess.getConcrete0_ImplAccess().getNameEStringParserRuleCall_2_0(), currentNode); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleConcrete0_Impl774);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = factory.create(grammarAccess.getConcrete0_ImplRule().getType().getClassifier());\n            \t            associateNodeWithAstElement(currentNode.getParent(), current);\n            \t        }\n            \t        try {\n            \t       \t\tset(\n            \t       \t\t\tcurrent, \n            \t       \t\t\t\"name\",\n            \t        \t\tlv_name_2_0, \n            \t        \t\t\"EString\", \n            \t        \t\tcurrentNode);\n            \t        } catch (ValueConverterException vce) {\n            \t\t\t\thandleValueConverterException(vce);\n            \t        }\n            \t        currentNode = currentNode.getParent();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21760,"modified_method":"public final EObject ruleConcrete0_Impl() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:330:28: ( ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:331:1: ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:331:1: ( () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:331:2: () otherlv_1= 'Concrete0' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:331:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:332:5: \n            {\n\n                    current = forceCreateModelElement(\n                        grammarAccess.getConcrete0_ImplAccess().getConcrete0Action_0(),\n                        current);\n                \n\n            }\n\n            otherlv_1=(Token)match(input,18,FollowSets000.FOLLOW_18_in_ruleConcrete0_Impl753); \n\n                \tnewLeafNode(otherlv_1, grammarAccess.getConcrete0_ImplAccess().getConcrete0Keyword_1());\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:341:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:342:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:342:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:343:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        newCompositeNode(grammarAccess.getConcrete0_ImplAccess().getNameEStringParserRuleCall_2_0()); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleConcrete0_Impl774);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = createModelElementForParent(grammarAccess.getConcrete0_ImplRule());\n            \t        }\n                   \t\tset(\n                   \t\t\tcurrent, \n                   \t\t\t\"name\",\n                    \t\tlv_name_2_0, \n                    \t\t\"EString\");\n            \t        afterParserOrEnumRuleCall();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleConcrete0() throws RecognitionException {\n        EObject current = null;\n\n        EObject this_Concrete0_Impl_0 = null;\n\n        EObject this_DiamondInheritance_1 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:299:6: ( (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:300:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:300:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance )\n            int alt5=2;\n            int LA5_0 = input.LA(1);\n\n            if ( (LA5_0==18) ) {\n                alt5=1;\n            }\n            else if ( (LA5_0==20) ) {\n                alt5=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 5, 0, input);\n\n                throw nvae;\n            }\n            switch (alt5) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:301:5: this_Concrete0_Impl_0= ruleConcrete0_Impl\n                    {\n                     \n                            currentNode=createCompositeNode(grammarAccess.getConcrete0Access().getConcrete0_ImplParserRuleCall_0(), currentNode); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_ruleConcrete0547);\n                    this_Concrete0_Impl_0=ruleConcrete0_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete0_Impl_0; \n                            currentNode = currentNode.getParent();\n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:311:5: this_DiamondInheritance_1= ruleDiamondInheritance\n                    {\n                     \n                            currentNode=createCompositeNode(grammarAccess.getConcrete0Access().getDiamondInheritanceParserRuleCall_1(), currentNode); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_ruleConcrete0574);\n                    this_DiamondInheritance_1=ruleDiamondInheritance();\n\n                    state._fsp--;\n\n                     \n                            current = this_DiamondInheritance_1; \n                            currentNode = currentNode.getParent();\n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21761,"modified_method":"public final EObject ruleConcrete0() throws RecognitionException {\n        EObject current = null;\n\n        EObject this_Concrete0_Impl_0 = null;\n\n        EObject this_DiamondInheritance_1 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:263:28: ( (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:264:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:264:1: (this_Concrete0_Impl_0= ruleConcrete0_Impl | this_DiamondInheritance_1= ruleDiamondInheritance )\n            int alt5=2;\n            int LA5_0 = input.LA(1);\n\n            if ( (LA5_0==18) ) {\n                alt5=1;\n            }\n            else if ( (LA5_0==20) ) {\n                alt5=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 5, 0, input);\n\n                throw nvae;\n            }\n            switch (alt5) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:265:5: this_Concrete0_Impl_0= ruleConcrete0_Impl\n                    {\n                     \n                            newCompositeNode(grammarAccess.getConcrete0Access().getConcrete0_ImplParserRuleCall_0()); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_ruleConcrete0547);\n                    this_Concrete0_Impl_0=ruleConcrete0_Impl();\n\n                    state._fsp--;\n\n                     \n                            current = this_Concrete0_Impl_0; \n                            afterParserOrEnumRuleCall();\n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:275:5: this_DiamondInheritance_1= ruleDiamondInheritance\n                    {\n                     \n                            newCompositeNode(grammarAccess.getConcrete0Access().getDiamondInheritanceParserRuleCall_1()); \n                        \n                    pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_ruleConcrete0574);\n                    this_DiamondInheritance_1=ruleDiamondInheritance();\n\n                    state._fsp--;\n\n                     \n                            current = this_DiamondInheritance_1; \n                            afterParserOrEnumRuleCall();\n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject entryRuleConcrete0_Impl() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete0_Impl = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:357:2: (iv_ruleConcrete0_Impl= ruleConcrete0_Impl EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:358:2: iv_ruleConcrete0_Impl= ruleConcrete0_Impl EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getConcrete0_ImplRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_entryRuleConcrete0_Impl697);\n            iv_ruleConcrete0_Impl=ruleConcrete0_Impl();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete0_Impl; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete0_Impl707); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21762,"modified_method":"public final EObject entryRuleConcrete0_Impl() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleConcrete0_Impl = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:319:2: (iv_ruleConcrete0_Impl= ruleConcrete0_Impl EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:320:2: iv_ruleConcrete0_Impl= ruleConcrete0_Impl EOF\n            {\n             newCompositeNode(grammarAccess.getConcrete0_ImplRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleConcrete0_Impl_in_entryRuleConcrete0_Impl697);\n            iv_ruleConcrete0_Impl=ruleConcrete0_Impl();\n\n            state._fsp--;\n\n             current =iv_ruleConcrete0_Impl; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleConcrete0_Impl707); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleConcrete1_Impl() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:470:6: ( ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:471:1: ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:471:1: ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:471:2: () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:471:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:472:5: \n            {\n             \n                    temp=factory.create(grammarAccess.getConcrete1_ImplAccess().getConcrete1Action_0().getType().getClassifier());\n                    current = temp; \n                    temp = null;\n                    CompositeNode newNode = createCompositeNode(grammarAccess.getConcrete1_ImplAccess().getConcrete1Action_0(), currentNode.getParent());\n                newNode.getChildren().add(currentNode);\n                moveLookaheadInfo(currentNode, newNode);\n                currentNode = newNode; \n                    associateNodeWithAstElement(currentNode, current); \n                \n\n            }\n\n            otherlv_1=(Token)match(input,19,FollowSets000.FOLLOW_19_in_ruleConcrete1_Impl989); \n\n                \tcreateLeafNode(otherlv_1, grammarAccess.getConcrete1_ImplAccess().getConcrete1Keyword_1(), null);\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:486:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:487:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:487:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:488:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        currentNode=createCompositeNode(grammarAccess.getConcrete1_ImplAccess().getNameEStringParserRuleCall_2_0(), currentNode); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleConcrete1_Impl1010);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = factory.create(grammarAccess.getConcrete1_ImplRule().getType().getClassifier());\n            \t            associateNodeWithAstElement(currentNode.getParent(), current);\n            \t        }\n            \t        try {\n            \t       \t\tset(\n            \t       \t\t\tcurrent, \n            \t       \t\t\t\"name\",\n            \t        \t\tlv_name_2_0, \n            \t        \t\t\"EString\", \n            \t        \t\tcurrentNode);\n            \t        } catch (ValueConverterException vce) {\n            \t\t\t\thandleValueConverterException(vce);\n            \t        }\n            \t        currentNode = currentNode.getParent();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21763,"modified_method":"public final EObject ruleConcrete1_Impl() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:415:28: ( ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:416:1: ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:416:1: ( () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:416:2: () otherlv_1= 'Concrete1' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:416:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:417:5: \n            {\n\n                    current = forceCreateModelElement(\n                        grammarAccess.getConcrete1_ImplAccess().getConcrete1Action_0(),\n                        current);\n                \n\n            }\n\n            otherlv_1=(Token)match(input,19,FollowSets000.FOLLOW_19_in_ruleConcrete1_Impl989); \n\n                \tnewLeafNode(otherlv_1, grammarAccess.getConcrete1_ImplAccess().getConcrete1Keyword_1());\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:426:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:427:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:427:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:428:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        newCompositeNode(grammarAccess.getConcrete1_ImplAccess().getNameEStringParserRuleCall_2_0()); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleConcrete1_Impl1010);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = createModelElementForParent(grammarAccess.getConcrete1_ImplRule());\n            \t        }\n                   \t\tset(\n                   \t\t\tcurrent, \n                   \t\t\t\"name\",\n                    \t\tlv_name_2_0, \n                    \t\t\"EString\");\n            \t        afterParserOrEnumRuleCall();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final AntlrDatatypeRuleToken ruleINT0() throws RecognitionException {\n        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();\n\n        Token kw=null;\n\n         setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:341:6: (kw= 'INT' )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:343:2: kw= 'INT'\n            {\n            kw=(Token)match(input,17,FollowSets000.FOLLOW_17_in_ruleINT0658); \n\n                    current.merge(kw);\n                    createLeafNode(kw, grammarAccess.getINT0Access().getINTKeyword(), null); \n                \n\n            }\n\n             resetLookahead(); \n            \t    lastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21764,"modified_method":"public final AntlrDatatypeRuleToken ruleINT0() throws RecognitionException {\n        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();\n\n        Token kw=null;\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:303:28: (kw= 'INT' )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:305:2: kw= 'INT'\n            {\n            kw=(Token)match(input,17,FollowSets000.FOLLOW_17_in_ruleINT0658); \n\n                    current.merge(kw);\n                    newLeafNode(kw, grammarAccess.getINT0Access().getINTKeyword()); \n                \n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject entryRuleDiamondInheritance() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleDiamondInheritance = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:519:2: (iv_ruleDiamondInheritance= ruleDiamondInheritance EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:520:2: iv_ruleDiamondInheritance= ruleDiamondInheritance EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getDiamondInheritanceRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_entryRuleDiamondInheritance1046);\n            iv_ruleDiamondInheritance=ruleDiamondInheritance();\n\n            state._fsp--;\n\n             current =iv_ruleDiamondInheritance; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleDiamondInheritance1056); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21765,"modified_method":"public final EObject entryRuleDiamondInheritance() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleDiamondInheritance = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:453:2: (iv_ruleDiamondInheritance= ruleDiamondInheritance EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:454:2: iv_ruleDiamondInheritance= ruleDiamondInheritance EOF\n            {\n             newCompositeNode(grammarAccess.getDiamondInheritanceRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleDiamondInheritance_in_entryRuleDiamondInheritance1046);\n            iv_ruleDiamondInheritance=ruleDiamondInheritance();\n\n            state._fsp--;\n\n             current =iv_ruleDiamondInheritance; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleDiamondInheritance1056); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject entryRuleRoot() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleRoot = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:72:2: (iv_ruleRoot= ruleRoot EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:73:2: iv_ruleRoot= ruleRoot EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleRoot_in_entryRuleRoot75);\n            iv_ruleRoot=ruleRoot();\n\n            state._fsp--;\n\n             current =iv_ruleRoot; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleRoot85); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21766,"modified_method":"public final EObject entryRuleRoot() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleRoot = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:71:2: (iv_ruleRoot= ruleRoot EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:72:2: iv_ruleRoot= ruleRoot EOF\n            {\n             newCompositeNode(grammarAccess.getRootRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleRoot_in_entryRuleRoot75);\n            iv_ruleRoot=ruleRoot();\n\n            state._fsp--;\n\n             current =iv_ruleRoot; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleRoot85); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject entryRuleAbstract() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleAbstract = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:234:2: (iv_ruleAbstract= ruleAbstract EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:235:2: iv_ruleAbstract= ruleAbstract EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getAbstractRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_entryRuleAbstract344);\n            iv_ruleAbstract=ruleAbstract();\n\n            state._fsp--;\n\n             current =iv_ruleAbstract; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleAbstract354); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21767,"modified_method":"public final EObject entryRuleAbstract() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleAbstract = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:202:2: (iv_ruleAbstract= ruleAbstract EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:203:2: iv_ruleAbstract= ruleAbstract EOF\n            {\n             newCompositeNode(grammarAccess.getAbstractRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_entryRuleAbstract344);\n            iv_ruleAbstract=ruleAbstract();\n\n            state._fsp--;\n\n             current =iv_ruleAbstract; \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleAbstract354); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final String entryRuleEString() throws RecognitionException {\n        String current = null;\n\n        AntlrDatatypeRuleToken iv_ruleEString = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:419:2: (iv_ruleEString= ruleEString EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:420:2: iv_ruleEString= ruleEString EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_entryRuleEString811);\n            iv_ruleEString=ruleEString();\n\n            state._fsp--;\n\n             current =iv_ruleEString.getText(); \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleEString822); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21768,"modified_method":"public final String entryRuleEString() throws RecognitionException {\n        String current = null;\n\n        AntlrDatatypeRuleToken iv_ruleEString = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:368:2: (iv_ruleEString= ruleEString EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:369:2: iv_ruleEString= ruleEString EOF\n            {\n             newCompositeNode(grammarAccess.getEStringRule()); \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_entryRuleEString811);\n            iv_ruleEString=ruleEString();\n\n            state._fsp--;\n\n             current =iv_ruleEString.getText(); \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleEString822); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final AntlrDatatypeRuleToken ruleEString() throws RecognitionException {\n        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();\n\n        Token this_STRING_0=null;\n        Token this_ID_1=null;\n\n         setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:432:6: ( (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:433:1: (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:433:1: (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID )\n            int alt6=2;\n            int LA6_0 = input.LA(1);\n\n            if ( (LA6_0==RULE_STRING) ) {\n                alt6=1;\n            }\n            else if ( (LA6_0==RULE_ID) ) {\n                alt6=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 6, 0, input);\n\n                throw nvae;\n            }\n            switch (alt6) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:433:6: this_STRING_0= RULE_STRING\n                    {\n                    this_STRING_0=(Token)match(input,RULE_STRING,FollowSets000.FOLLOW_RULE_STRING_in_ruleEString862); \n\n                    \t\tcurrent.merge(this_STRING_0);\n                        \n                     \n                        createLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); \n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:441:10: this_ID_1= RULE_ID\n                    {\n                    this_ID_1=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_RULE_ID_in_ruleEString888); \n\n                    \t\tcurrent.merge(this_ID_1);\n                        \n                     \n                        createLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); \n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             resetLookahead(); \n            \t    lastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21769,"modified_method":"public final AntlrDatatypeRuleToken ruleEString() throws RecognitionException {\n        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();\n\n        Token this_STRING_0=null;\n        Token this_ID_1=null;\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:379:28: ( (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:380:1: (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:380:1: (this_STRING_0= RULE_STRING | this_ID_1= RULE_ID )\n            int alt6=2;\n            int LA6_0 = input.LA(1);\n\n            if ( (LA6_0==RULE_STRING) ) {\n                alt6=1;\n            }\n            else if ( (LA6_0==RULE_ID) ) {\n                alt6=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 6, 0, input);\n\n                throw nvae;\n            }\n            switch (alt6) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:380:6: this_STRING_0= RULE_STRING\n                    {\n                    this_STRING_0=(Token)match(input,RULE_STRING,FollowSets000.FOLLOW_RULE_STRING_in_ruleEString862); \n\n                    \t\tcurrent.merge(this_STRING_0);\n                        \n                     \n                        newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); \n                        \n\n                    }\n                    break;\n                case 2 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:388:10: this_ID_1= RULE_ID\n                    {\n                    this_ID_1=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_RULE_ID_in_ruleEString888); \n\n                    \t\tcurrent.merge(this_ID_1);\n                        \n                     \n                        newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); \n                        \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleDiamondInheritance() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:532:6: ( ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:533:1: ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:533:1: ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:533:2: () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:533:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:534:5: \n            {\n             \n                    temp=factory.create(grammarAccess.getDiamondInheritanceAccess().getDiamondInheritanceAction_0().getType().getClassifier());\n                    current = temp; \n                    temp = null;\n                    CompositeNode newNode = createCompositeNode(grammarAccess.getDiamondInheritanceAccess().getDiamondInheritanceAction_0(), currentNode.getParent());\n                newNode.getChildren().add(currentNode);\n                moveLookaheadInfo(currentNode, newNode);\n                currentNode = newNode; \n                    associateNodeWithAstElement(currentNode, current); \n                \n\n            }\n\n            otherlv_1=(Token)match(input,20,FollowSets000.FOLLOW_20_in_ruleDiamondInheritance1102); \n\n                \tcreateLeafNode(otherlv_1, grammarAccess.getDiamondInheritanceAccess().getDiamondInheritanceKeyword_1(), null);\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:548:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:549:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:549:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:550:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        currentNode=createCompositeNode(grammarAccess.getDiamondInheritanceAccess().getNameEStringParserRuleCall_2_0(), currentNode); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleDiamondInheritance1123);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = factory.create(grammarAccess.getDiamondInheritanceRule().getType().getClassifier());\n            \t            associateNodeWithAstElement(currentNode.getParent(), current);\n            \t        }\n            \t        try {\n            \t       \t\tset(\n            \t       \t\t\tcurrent, \n            \t       \t\t\t\"name\",\n            \t        \t\tlv_name_2_0, \n            \t        \t\t\"EString\", \n            \t        \t\tcurrentNode);\n            \t        } catch (ValueConverterException vce) {\n            \t\t\t\thandleValueConverterException(vce);\n            \t        }\n            \t        currentNode = currentNode.getParent();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21770,"modified_method":"public final EObject ruleDiamondInheritance() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:464:28: ( ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:465:1: ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:465:1: ( () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:465:2: () otherlv_1= 'DiamondInheritance' ( (lv_name_2_0= ruleEString ) )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:465:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:466:5: \n            {\n\n                    current = forceCreateModelElement(\n                        grammarAccess.getDiamondInheritanceAccess().getDiamondInheritanceAction_0(),\n                        current);\n                \n\n            }\n\n            otherlv_1=(Token)match(input,20,FollowSets000.FOLLOW_20_in_ruleDiamondInheritance1102); \n\n                \tnewLeafNode(otherlv_1, grammarAccess.getDiamondInheritanceAccess().getDiamondInheritanceKeyword_1());\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:475:1: ( (lv_name_2_0= ruleEString ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:476:1: (lv_name_2_0= ruleEString )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:476:1: (lv_name_2_0= ruleEString )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:477:3: lv_name_2_0= ruleEString\n            {\n             \n            \t        newCompositeNode(grammarAccess.getDiamondInheritanceAccess().getNameEStringParserRuleCall_2_0()); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleEString_in_ruleDiamondInheritance1123);\n            lv_name_2_0=ruleEString();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = createModelElementForParent(grammarAccess.getDiamondInheritanceRule());\n            \t        }\n                   \t\tset(\n                   \t\t\tcurrent, \n                   \t\t\t\"name\",\n                    \t\tlv_name_2_0, \n                    \t\t\"EString\");\n            \t        afterParserOrEnumRuleCall();\n            \t    \n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final EObject ruleRoot() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        Token otherlv_3=null;\n        Token otherlv_4=null;\n        Token otherlv_5=null;\n        Token otherlv_7=null;\n        Token otherlv_9=null;\n        Token otherlv_10=null;\n        Token otherlv_12=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n        EObject lv_classes_6_0 = null;\n\n        EObject lv_classes_8_0 = null;\n\n        EObject lv_concrete0_11_0 = null;\n\n\n         EObject temp=null; setCurrentLookahead(); resetLookahead(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:85:6: ( ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:86:1: ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:86:1: ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:86:2: () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}'\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:86:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:87:5: \n            {\n             \n                    temp=factory.create(grammarAccess.getRootAccess().getRootAction_0().getType().getClassifier());\n                    current = temp; \n                    temp = null;\n                    CompositeNode newNode = createCompositeNode(grammarAccess.getRootAccess().getRootAction_0(), currentNode.getParent());\n                newNode.getChildren().add(currentNode);\n                moveLookaheadInfo(currentNode, newNode);\n                currentNode = newNode; \n                    associateNodeWithAstElement(currentNode, current); \n                \n\n            }\n\n            otherlv_1=(Token)match(input,11,FollowSets000.FOLLOW_11_in_ruleRoot131); \n\n                \tcreateLeafNode(otherlv_1, grammarAccess.getRootAccess().getRootKeyword_1(), null);\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:101:1: ( (lv_name_2_0= ruleINT0 ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:102:1: (lv_name_2_0= ruleINT0 )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:102:1: (lv_name_2_0= ruleINT0 )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:103:3: lv_name_2_0= ruleINT0\n            {\n             \n            \t        currentNode=createCompositeNode(grammarAccess.getRootAccess().getNameINT0ParserRuleCall_2_0(), currentNode); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleINT0_in_ruleRoot152);\n            lv_name_2_0=ruleINT0();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = factory.create(grammarAccess.getRootRule().getType().getClassifier());\n            \t            associateNodeWithAstElement(currentNode.getParent(), current);\n            \t        }\n            \t        try {\n            \t       \t\tset(\n            \t       \t\t\tcurrent, \n            \t       \t\t\t\"name\",\n            \t        \t\tlv_name_2_0, \n            \t        \t\t\"INT0\", \n            \t        \t\tcurrentNode);\n            \t        } catch (ValueConverterException vce) {\n            \t\t\t\thandleValueConverterException(vce);\n            \t        }\n            \t        currentNode = currentNode.getParent();\n            \t    \n\n            }\n\n\n            }\n\n            otherlv_3=(Token)match(input,12,FollowSets000.FOLLOW_12_in_ruleRoot164); \n\n                \tcreateLeafNode(otherlv_3, grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_3(), null);\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:129:1: (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )?\n            int alt2=2;\n            int LA2_0 = input.LA(1);\n\n            if ( (LA2_0==13) ) {\n                alt2=1;\n            }\n            switch (alt2) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:129:3: otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}'\n                    {\n                    otherlv_4=(Token)match(input,13,FollowSets000.FOLLOW_13_in_ruleRoot177); \n\n                        \tcreateLeafNode(otherlv_4, grammarAccess.getRootAccess().getClassesKeyword_4_0(), null);\n                        \n                    otherlv_5=(Token)match(input,12,FollowSets000.FOLLOW_12_in_ruleRoot189); \n\n                        \tcreateLeafNode(otherlv_5, grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1(), null);\n                        \n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:137:1: ( (lv_classes_6_0= ruleAbstract ) )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:138:1: (lv_classes_6_0= ruleAbstract )\n                    {\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:138:1: (lv_classes_6_0= ruleAbstract )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:139:3: lv_classes_6_0= ruleAbstract\n                    {\n                     \n                    \t        currentNode=createCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0(), currentNode); \n                    \t    \n                    pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_ruleRoot210);\n                    lv_classes_6_0=ruleAbstract();\n\n                    state._fsp--;\n\n\n                    \t        if (current==null) {\n                    \t            current = factory.create(grammarAccess.getRootRule().getType().getClassifier());\n                    \t            associateNodeWithAstElement(currentNode.getParent(), current);\n                    \t        }\n                    \t        try {\n                    \t       \t\tadd(\n                    \t       \t\t\tcurrent, \n                    \t       \t\t\t\"classes\",\n                    \t        \t\tlv_classes_6_0, \n                    \t        \t\t\"Abstract\", \n                    \t        \t\tcurrentNode);\n                    \t        } catch (ValueConverterException vce) {\n                    \t\t\t\thandleValueConverterException(vce);\n                    \t        }\n                    \t        currentNode = currentNode.getParent();\n                    \t    \n\n                    }\n\n\n                    }\n\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:161:2: (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )*\n                    loop1:\n                    do {\n                        int alt1=2;\n                        int LA1_0 = input.LA(1);\n\n                        if ( (LA1_0==14) ) {\n                            alt1=1;\n                        }\n\n\n                        switch (alt1) {\n                    \tcase 1 :\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:161:4: otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) )\n                    \t    {\n                    \t    otherlv_7=(Token)match(input,14,FollowSets000.FOLLOW_14_in_ruleRoot223); \n\n                    \t        \tcreateLeafNode(otherlv_7, grammarAccess.getRootAccess().getCommaKeyword_4_3_0(), null);\n                    \t        \n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:165:1: ( (lv_classes_8_0= ruleAbstract ) )\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:166:1: (lv_classes_8_0= ruleAbstract )\n                    \t    {\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:166:1: (lv_classes_8_0= ruleAbstract )\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:167:3: lv_classes_8_0= ruleAbstract\n                    \t    {\n                    \t     \n                    \t    \t        currentNode=createCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0(), currentNode); \n                    \t    \t    \n                    \t    pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_ruleRoot244);\n                    \t    lv_classes_8_0=ruleAbstract();\n\n                    \t    state._fsp--;\n\n\n                    \t    \t        if (current==null) {\n                    \t    \t            current = factory.create(grammarAccess.getRootRule().getType().getClassifier());\n                    \t    \t            associateNodeWithAstElement(currentNode.getParent(), current);\n                    \t    \t        }\n                    \t    \t        try {\n                    \t    \t       \t\tadd(\n                    \t    \t       \t\t\tcurrent, \n                    \t    \t       \t\t\t\"classes\",\n                    \t    \t        \t\tlv_classes_8_0, \n                    \t    \t        \t\t\"Abstract\", \n                    \t    \t        \t\tcurrentNode);\n                    \t    \t        } catch (ValueConverterException vce) {\n                    \t    \t\t\t\thandleValueConverterException(vce);\n                    \t    \t        }\n                    \t    \t        currentNode = currentNode.getParent();\n                    \t    \t    \n\n                    \t    }\n\n\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop1;\n                        }\n                    } while (true);\n\n                    otherlv_9=(Token)match(input,15,FollowSets000.FOLLOW_15_in_ruleRoot258); \n\n                        \tcreateLeafNode(otherlv_9, grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4(), null);\n                        \n\n                    }\n                    break;\n\n            }\n\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:193:3: (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )?\n            int alt3=2;\n            int LA3_0 = input.LA(1);\n\n            if ( (LA3_0==16) ) {\n                alt3=1;\n            }\n            switch (alt3) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:193:5: otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) )\n                    {\n                    otherlv_10=(Token)match(input,16,FollowSets000.FOLLOW_16_in_ruleRoot273); \n\n                        \tcreateLeafNode(otherlv_10, grammarAccess.getRootAccess().getConcrete0Keyword_5_0(), null);\n                        \n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:197:1: ( (lv_concrete0_11_0= ruleConcrete0 ) )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:198:1: (lv_concrete0_11_0= ruleConcrete0 )\n                    {\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:198:1: (lv_concrete0_11_0= ruleConcrete0 )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:199:3: lv_concrete0_11_0= ruleConcrete0\n                    {\n                     \n                    \t        currentNode=createCompositeNode(grammarAccess.getRootAccess().getConcrete0Concrete0ParserRuleCall_5_1_0(), currentNode); \n                    \t    \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_in_ruleRoot294);\n                    lv_concrete0_11_0=ruleConcrete0();\n\n                    state._fsp--;\n\n\n                    \t        if (current==null) {\n                    \t            current = factory.create(grammarAccess.getRootRule().getType().getClassifier());\n                    \t            associateNodeWithAstElement(currentNode.getParent(), current);\n                    \t        }\n                    \t        try {\n                    \t       \t\tset(\n                    \t       \t\t\tcurrent, \n                    \t       \t\t\t\"concrete0\",\n                    \t        \t\tlv_concrete0_11_0, \n                    \t        \t\t\"Concrete0\", \n                    \t        \t\tcurrentNode);\n                    \t        } catch (ValueConverterException vce) {\n                    \t\t\t\thandleValueConverterException(vce);\n                    \t        }\n                    \t        currentNode = currentNode.getParent();\n                    \t    \n\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n\n            otherlv_12=(Token)match(input,15,FollowSets000.FOLLOW_15_in_ruleRoot308); \n\n                \tcreateLeafNode(otherlv_12, grammarAccess.getRootAccess().getRightCurlyBracketKeyword_6(), null);\n                \n\n            }\n\n\n            }\n\n             resetLookahead(); \n                \tlastConsumedNode = currentNode;\n                \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21771,"modified_method":"public final EObject ruleRoot() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_1=null;\n        Token otherlv_3=null;\n        Token otherlv_4=null;\n        Token otherlv_5=null;\n        Token otherlv_7=null;\n        Token otherlv_9=null;\n        Token otherlv_10=null;\n        Token otherlv_12=null;\n        AntlrDatatypeRuleToken lv_name_2_0 = null;\n\n        EObject lv_classes_6_0 = null;\n\n        EObject lv_classes_8_0 = null;\n\n        EObject lv_concrete0_11_0 = null;\n\n\n         enterRule(); \n            \n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:82:28: ( ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:83:1: ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:83:1: ( () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}' )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:83:2: () otherlv_1= 'Root' ( (lv_name_2_0= ruleINT0 ) ) otherlv_3= '{' (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )? (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )? otherlv_12= '}'\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:83:2: ()\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:84:5: \n            {\n\n                    current = forceCreateModelElement(\n                        grammarAccess.getRootAccess().getRootAction_0(),\n                        current);\n                \n\n            }\n\n            otherlv_1=(Token)match(input,11,FollowSets000.FOLLOW_11_in_ruleRoot131); \n\n                \tnewLeafNode(otherlv_1, grammarAccess.getRootAccess().getRootKeyword_1());\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:93:1: ( (lv_name_2_0= ruleINT0 ) )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:94:1: (lv_name_2_0= ruleINT0 )\n            {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:94:1: (lv_name_2_0= ruleINT0 )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:95:3: lv_name_2_0= ruleINT0\n            {\n             \n            \t        newCompositeNode(grammarAccess.getRootAccess().getNameINT0ParserRuleCall_2_0()); \n            \t    \n            pushFollow(FollowSets000.FOLLOW_ruleINT0_in_ruleRoot152);\n            lv_name_2_0=ruleINT0();\n\n            state._fsp--;\n\n\n            \t        if (current==null) {\n            \t            current = createModelElementForParent(grammarAccess.getRootRule());\n            \t        }\n                   \t\tset(\n                   \t\t\tcurrent, \n                   \t\t\t\"name\",\n                    \t\tlv_name_2_0, \n                    \t\t\"INT0\");\n            \t        afterParserOrEnumRuleCall();\n            \t    \n\n            }\n\n\n            }\n\n            otherlv_3=(Token)match(input,12,FollowSets000.FOLLOW_12_in_ruleRoot164); \n\n                \tnewLeafNode(otherlv_3, grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_3());\n                \n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:115:1: (otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}' )?\n            int alt2=2;\n            int LA2_0 = input.LA(1);\n\n            if ( (LA2_0==13) ) {\n                alt2=1;\n            }\n            switch (alt2) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:115:3: otherlv_4= 'classes' otherlv_5= '{' ( (lv_classes_6_0= ruleAbstract ) ) (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )* otherlv_9= '}'\n                    {\n                    otherlv_4=(Token)match(input,13,FollowSets000.FOLLOW_13_in_ruleRoot177); \n\n                        \tnewLeafNode(otherlv_4, grammarAccess.getRootAccess().getClassesKeyword_4_0());\n                        \n                    otherlv_5=(Token)match(input,12,FollowSets000.FOLLOW_12_in_ruleRoot189); \n\n                        \tnewLeafNode(otherlv_5, grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1());\n                        \n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:123:1: ( (lv_classes_6_0= ruleAbstract ) )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:124:1: (lv_classes_6_0= ruleAbstract )\n                    {\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:124:1: (lv_classes_6_0= ruleAbstract )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:125:3: lv_classes_6_0= ruleAbstract\n                    {\n                     \n                    \t        newCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0()); \n                    \t    \n                    pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_ruleRoot210);\n                    lv_classes_6_0=ruleAbstract();\n\n                    state._fsp--;\n\n\n                    \t        if (current==null) {\n                    \t            current = createModelElementForParent(grammarAccess.getRootRule());\n                    \t        }\n                           \t\tadd(\n                           \t\t\tcurrent, \n                           \t\t\t\"classes\",\n                            \t\tlv_classes_6_0, \n                            \t\t\"Abstract\");\n                    \t        afterParserOrEnumRuleCall();\n                    \t    \n\n                    }\n\n\n                    }\n\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:141:2: (otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) ) )*\n                    loop1:\n                    do {\n                        int alt1=2;\n                        int LA1_0 = input.LA(1);\n\n                        if ( (LA1_0==14) ) {\n                            alt1=1;\n                        }\n\n\n                        switch (alt1) {\n                    \tcase 1 :\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:141:4: otherlv_7= ',' ( (lv_classes_8_0= ruleAbstract ) )\n                    \t    {\n                    \t    otherlv_7=(Token)match(input,14,FollowSets000.FOLLOW_14_in_ruleRoot223); \n\n                    \t        \tnewLeafNode(otherlv_7, grammarAccess.getRootAccess().getCommaKeyword_4_3_0());\n                    \t        \n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:145:1: ( (lv_classes_8_0= ruleAbstract ) )\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:146:1: (lv_classes_8_0= ruleAbstract )\n                    \t    {\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:146:1: (lv_classes_8_0= ruleAbstract )\n                    \t    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:147:3: lv_classes_8_0= ruleAbstract\n                    \t    {\n                    \t     \n                    \t    \t        newCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0()); \n                    \t    \t    \n                    \t    pushFollow(FollowSets000.FOLLOW_ruleAbstract_in_ruleRoot244);\n                    \t    lv_classes_8_0=ruleAbstract();\n\n                    \t    state._fsp--;\n\n\n                    \t    \t        if (current==null) {\n                    \t    \t            current = createModelElementForParent(grammarAccess.getRootRule());\n                    \t    \t        }\n                    \t           \t\tadd(\n                    \t           \t\t\tcurrent, \n                    \t           \t\t\t\"classes\",\n                    \t            \t\tlv_classes_8_0, \n                    \t            \t\t\"Abstract\");\n                    \t    \t        afterParserOrEnumRuleCall();\n                    \t    \t    \n\n                    \t    }\n\n\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop1;\n                        }\n                    } while (true);\n\n                    otherlv_9=(Token)match(input,15,FollowSets000.FOLLOW_15_in_ruleRoot258); \n\n                        \tnewLeafNode(otherlv_9, grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4());\n                        \n\n                    }\n                    break;\n\n            }\n\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:167:3: (otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) ) )?\n            int alt3=2;\n            int LA3_0 = input.LA(1);\n\n            if ( (LA3_0==16) ) {\n                alt3=1;\n            }\n            switch (alt3) {\n                case 1 :\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:167:5: otherlv_10= 'concrete0' ( (lv_concrete0_11_0= ruleConcrete0 ) )\n                    {\n                    otherlv_10=(Token)match(input,16,FollowSets000.FOLLOW_16_in_ruleRoot273); \n\n                        \tnewLeafNode(otherlv_10, grammarAccess.getRootAccess().getConcrete0Keyword_5_0());\n                        \n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:171:1: ( (lv_concrete0_11_0= ruleConcrete0 ) )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:172:1: (lv_concrete0_11_0= ruleConcrete0 )\n                    {\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:172:1: (lv_concrete0_11_0= ruleConcrete0 )\n                    // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:173:3: lv_concrete0_11_0= ruleConcrete0\n                    {\n                     \n                    \t        newCompositeNode(grammarAccess.getRootAccess().getConcrete0Concrete0ParserRuleCall_5_1_0()); \n                    \t    \n                    pushFollow(FollowSets000.FOLLOW_ruleConcrete0_in_ruleRoot294);\n                    lv_concrete0_11_0=ruleConcrete0();\n\n                    state._fsp--;\n\n\n                    \t        if (current==null) {\n                    \t            current = createModelElementForParent(grammarAccess.getRootRule());\n                    \t        }\n                           \t\tset(\n                           \t\t\tcurrent, \n                           \t\t\t\"concrete0\",\n                            \t\tlv_concrete0_11_0, \n                            \t\t\"Concrete0\");\n                    \t        afterParserOrEnumRuleCall();\n                    \t    \n\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n\n            otherlv_12=(Token)match(input,15,FollowSets000.FOLLOW_15_in_ruleRoot308); \n\n                \tnewLeafNode(otherlv_12, grammarAccess.getRootAccess().getRightCurlyBracketKeyword_6());\n                \n\n            }\n\n\n            }\n\n             leaveRule(); \n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"public final String entryRuleINT0() throws RecognitionException {\n        String current = null;\n\n        AntlrDatatypeRuleToken iv_ruleINT0 = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:328:2: (iv_ruleINT0= ruleINT0 EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:329:2: iv_ruleINT0= ruleINT0 EOF\n            {\n             currentNode = createCompositeNode(grammarAccess.getINT0Rule(), currentNode); \n            pushFollow(FollowSets000.FOLLOW_ruleINT0_in_entryRuleINT0610);\n            iv_ruleINT0=ruleINT0();\n\n            state._fsp--;\n\n             current =iv_ruleINT0.getText(); \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleINT0621); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","id":21772,"modified_method":"public final String entryRuleINT0() throws RecognitionException {\n        String current = null;\n\n        AntlrDatatypeRuleToken iv_ruleINT0 = null;\n\n\n        try {\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:292:2: (iv_ruleINT0= ruleINT0 EOF )\n            // ../org.eclipse.xtext.xtext.ui.tests/src-gen/org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.g:293:2: iv_ruleINT0= ruleINT0 EOF\n            {\n             newCompositeNode(grammarAccess.getINT0Rule()); \n            pushFollow(FollowSets000.FOLLOW_ruleINT0_in_entryRuleINT0610);\n            iv_ruleINT0=ruleINT0();\n\n            state._fsp--;\n\n             current =iv_ruleINT0.getText(); \n            match(input,EOF,FollowSets000.FOLLOW_EOF_in_entryRuleINT0621); \n\n            }\n\n        }\n         \n            catch (RecognitionException re) { \n                recover(input,re); \n                appendSkippedTokens();\n            } \n        finally {\n        }\n        return current;\n    }","commit_id":"b57d8b4ba2d8eb01851be85c67ce43a2d8a2ff24","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean getPropertyInfoMap(String componentName, String propertyId, Map<String, PropertyInfo> propertyInfoMap) {\n    Map<String, PropertyInfo> componentMetricMap = componentMetrics.get(componentName);\n\n    propertyInfoMap.clear();\n\n    if (componentMetricMap == null) {\n      return false;\n    }\n\n    PropertyInfo propertyInfo = componentMetricMap.get(propertyId);\n    if (propertyInfo != null) {\n      propertyInfoMap.put(propertyId, propertyInfo);\n      return false;\n    }\n\n    String regExpKey = getRegExpKey(propertyId);\n\n    if (regExpKey != null) {\n      propertyInfo = componentMetricMap.get(regExpKey);\n      if (propertyInfo != null) {\n        propertyInfoMap.put(regExpKey, propertyInfo);\n        return true;\n      }\n    }\n\n    // TODO : For now, if the property info map contains any metrics with regular expressions then get back all the metrics.\n    boolean requestAllMetrics = false;\n\n    if (!propertyId.endsWith(\"/\")){\n      propertyId += \"/\";\n    }\n\n    for (Map.Entry<String, PropertyInfo> entry : componentMetricMap.entrySet()) {\n      if (entry.getKey().startsWith(propertyId)) {\n        String key = entry.getKey();\n        requestAllMetrics = isPatternKey(key);\n        propertyInfoMap.put(key, entry.getValue());\n      }\n    }\n\n    if (regExpKey != null) {\n      if (!regExpKey.endsWith(\"/\")){\n        regExpKey += \"/\";\n      }\n\n      for (Map.Entry<String, PropertyInfo> entry : componentMetricMap.entrySet()) {\n        if (entry.getKey().startsWith(regExpKey)) {\n          requestAllMetrics = true;\n          propertyInfoMap.put(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n    return requestAllMetrics;\n  }","id":21773,"modified_method":"protected void getPropertyInfoMap(String componentName, String propertyId, Map<String, PropertyInfo> propertyInfoMap) {\n    Map<String, PropertyInfo> componentMetricMap = componentMetrics.get(componentName);\n\n    propertyInfoMap.clear();\n\n    if (componentMetricMap == null) {\n      return;\n    }\n\n    PropertyInfo propertyInfo = componentMetricMap.get(propertyId);\n    if (propertyInfo != null) {\n      propertyInfoMap.put(propertyId, propertyInfo);\n      return;\n    }\n\n    String regExpKey = getRegExpKey(propertyId);\n\n    if (regExpKey != null) {\n      propertyInfo = componentMetricMap.get(regExpKey);\n      if (propertyInfo != null) {\n        propertyInfoMap.put(regExpKey, propertyInfo);\n        return;\n      }\n    }\n\n    if (!propertyId.endsWith(\"/\")){\n      propertyId += \"/\";\n    }\n\n    for (Map.Entry<String, PropertyInfo> entry : componentMetricMap.entrySet()) {\n      if (entry.getKey().startsWith(propertyId)) {\n        String key = entry.getKey();\n        propertyInfoMap.put(key, entry.getValue());\n      }\n    }\n\n    if (regExpKey != null) {\n      if (!regExpKey.endsWith(\"/\")){\n        regExpKey += \"/\";\n      }\n\n      \n      for (Map.Entry<String, PropertyInfo> entry : componentMetricMap.entrySet()) {\n        if (entry.getKey().startsWith(regExpKey)) {\n          propertyInfoMap.put(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n    return;\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Get the request objects containing all the information required to\n   * make single requests to the Ganglia rrd script.\n   * Requests are created per cluster name / temporal information but\n   * can span multiple resources and metrics.\n   *\n   * @param resources  the resources being populated\n   * @param request    the request\n   * @param ids        the relevant property ids\n   *\n   * @return a map of maps of rrd requests keyed by cluster name / temporal info\n   */\n  private Map<String, Map<TemporalInfo, RRDRequest>> getRRDRequests(Set<Resource> resources,\n                                                                    Request request,\n                                                                    Set<String> ids) {\n\n    Map<String, Map<TemporalInfo, RRDRequest>> requestMap =\n        new HashMap<String, Map<TemporalInfo, RRDRequest>>();\n\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(clusterNamePropertyId);\n      Map<TemporalInfo, RRDRequest> requests = requestMap.get(clusterName);\n      if (requests == null) {\n        requests = new HashMap<TemporalInfo, RRDRequest>();\n        requestMap.put(clusterName, requests);\n      }\n\n      Set<String> gangliaClusterNames = getGangliaClusterNames(resource, clusterName);\n\n      for (String gangliaClusterName : gangliaClusterNames) {\n        ResourceKey key =\n            new ResourceKey(getHostName(resource), gangliaClusterName);\n\n        for (String id : ids) {\n          Map<String, PropertyInfo> propertyInfoMap = new HashMap<String, PropertyInfo>();\n\n          Map<String, PropertyInfo> componentMetricMap =\n            getComponentMetrics().get(getComponentName(resource));\n\n          // Not all components have metrics\n          if (componentMetricMap != null &&\n              !componentMetricMap.containsKey(id)) {\n            updateComponentMetricMap(componentMetricMap, id);\n          }\n\n          boolean requestAll = getPropertyInfoMap(getComponentName(resource), id, propertyInfoMap);\n\n          for (Map.Entry<String, PropertyInfo> entry : propertyInfoMap.entrySet()) {\n            String propertyId = entry.getKey();\n            PropertyInfo propertyInfo = entry.getValue();\n\n            TemporalInfo temporalInfo = request.getTemporalInfo(id);\n\n            if ((temporalInfo == null && propertyInfo.isPointInTime()) || (temporalInfo != null && propertyInfo.isTemporal())) {\n              RRDRequest rrdRequest = requests.get(temporalInfo);\n              if (rrdRequest == null) {\n                rrdRequest = new RRDRequest(clusterName, temporalInfo);\n                requests.put(temporalInfo, rrdRequest);\n              }\n              rrdRequest.putResource(key, resource);\n              rrdRequest.putPropertyId(propertyInfo.getPropertyId(), propertyId);\n              rrdRequest.setRequestAllMetrics(requestAll);\n            }\n          }\n        }\n      }\n    }\n    return requestMap;\n  }","id":21774,"modified_method":"/**\n   * Get the request objects containing all the information required to\n   * make single requests to the Ganglia rrd script.\n   * Requests are created per cluster name / temporal information but\n   * can span multiple resources and metrics.\n   *\n   * @param resources  the resources being populated\n   * @param request    the request\n   * @param ids        the relevant property ids\n   *\n   * @return a map of maps of rrd requests keyed by cluster name / temporal info\n   */\n  private Map<String, Map<TemporalInfo, RRDRequest>> getRRDRequests(Set<Resource> resources,\n                                                                    Request request,\n                                                                    Set<String> ids) {\n\n    Map<String, Map<TemporalInfo, RRDRequest>> requestMap =\n        new HashMap<String, Map<TemporalInfo, RRDRequest>>();\n\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(clusterNamePropertyId);\n      Map<TemporalInfo, RRDRequest> requests = requestMap.get(clusterName);\n      if (requests == null) {\n        requests = new HashMap<TemporalInfo, RRDRequest>();\n        requestMap.put(clusterName, requests);\n      }\n\n      Set<String> gangliaClusterNames = getGangliaClusterNames(resource, clusterName);\n\n      for (String gangliaClusterName : gangliaClusterNames) {\n        ResourceKey key =\n            new ResourceKey(getHostName(resource), gangliaClusterName);\n\n        for (String id : ids) {\n          Map<String, PropertyInfo> propertyInfoMap = new HashMap<String, PropertyInfo>();\n\n          Map<String, PropertyInfo> componentMetricMap =\n            getComponentMetrics().get(getComponentName(resource));\n\n          // Not all components have metrics\n          if (componentMetricMap != null &&\n              !componentMetricMap.containsKey(id)) {\n            updateComponentMetricMap(componentMetricMap, id);\n          }\n\n          getPropertyInfoMap(getComponentName(resource), id, propertyInfoMap);\n\n          for (Map.Entry<String, PropertyInfo> entry : propertyInfoMap.entrySet()) {\n            String propertyId = entry.getKey();\n            PropertyInfo propertyInfo = entry.getValue();\n\n            TemporalInfo temporalInfo = request.getTemporalInfo(id);\n\n            if ((temporalInfo == null && propertyInfo.isPointInTime()) || (temporalInfo != null && propertyInfo.isTemporal())) {\n              RRDRequest rrdRequest = requests.get(temporalInfo);\n              if (rrdRequest == null) {\n                rrdRequest = new RRDRequest(clusterName, temporalInfo);\n                requests.put(temporalInfo, rrdRequest);\n              }\n              rrdRequest.putResource(key, resource);              \n              rrdRequest.putPropertyId(propertyInfo.getPropertyId(), propertyId);\n            }\n          }\n        }\n      }\n    }\n    return requestMap;\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Get the spec to locate the Ganglia stream from the given\n   * request info.\n   *\n   * @param clusterName   the cluster name\n   * @param clusterSet    the set of ganglia cluster names\n   * @param hostSet       the set of host names\n   * @param metricSet     the set of metric names\n   * @param temporalInfo  the temporal information\n   *\n   * @return the spec\n   *\n   * @throws SystemException if unable to get the Ganglia Collector host name\n   */\n  private String getSpec(String clusterName,\n                         Set<String> clusterSet,\n                         Set<String> hostSet,\n                         Set<String> metricSet,\n                         TemporalInfo temporalInfo) throws SystemException {\n\n    String clusters = getSetString(clusterSet, -1);\n    String hosts    = getSetString(hostSet, 100);\n    String metrics  = getSetString(metricSet, 50);\n\n    StringBuilder sb = new StringBuilder();\n\n    if (configuration.isGangliaSSL()) {\n      sb.append(\"https://\");\n    } else {\n      sb.append(\"http://\");\n    }\n\n    sb.append(hostProvider.getGangliaCollectorHostName(clusterName)).\n        append(\"/cgi-bin/rrd.py?c=\").\n        append(clusters);\n\n    if (hosts.length() > 0) {\n      sb.append(\"&h=\").append(hosts);\n    }\n\n    if (metrics.length() > 0) {\n      sb.append(\"&m=\").append(metrics);\n    }\n\n    if (temporalInfo != null) {\n      long startTime = temporalInfo.getStartTime();\n      if (startTime != -1) {\n        sb.append(\"&s=\").append(startTime);\n      }\n\n      long endTime = temporalInfo.getEndTime();\n      if (endTime != -1) {\n        sb.append(\"&e=\").append(endTime);\n      }\n\n      long step = temporalInfo.getStep();\n      if (step != -1) {\n        sb.append(\"&r=\").append(step);\n      }\n    }\n    else {\n      sb.append(\"&e=now\");\n      sb.append(\"&pt=true\");\n    }\n\n    return sb.toString();\n  }","id":21775,"modified_method":"/**\n   * Get the spec to locate the Ganglia stream from the given\n   * request info.\n   *\n   * @param clusterName   the cluster name\n   * @param clusterSet    the set of ganglia cluster names\n   * @param hostSet       the set of host names\n   * @param metricSet     the set of metric names\n   * @param temporalInfo  the temporal information\n   *\n   * @return the spec\n   *\n   * @throws SystemException if unable to get the Ganglia Collector host name\n   */\n  private String getSpec(String clusterName,\n                         Set<String> clusterSet,\n                         Set<String> hostSet,\n                         Set<String> metricSet,\n                         TemporalInfo temporalInfo) throws SystemException {\n\n    String clusters = getSetString(clusterSet, -1);\n    String hosts    = getSetString(hostSet, 100);\n    String metrics  = getSetString(metricSet, 50);\n\n    URIBuilder uriBuilder = new URIBuilder();\n\n    if (configuration.isGangliaSSL()) {\n      uriBuilder.setScheme(\"https\");\n    } else {\n      uriBuilder.setScheme(\"http\");\n    }\n\n    \n    uriBuilder.setHost(hostProvider.getGangliaCollectorHostName(clusterName));\n    \n    uriBuilder.setPath(\"/cgi-bin/rrd.py\");\n    \n    uriBuilder.setParameter(\"c\", clusters);\n    \n\n    if (hosts.length() > 0) {\n      uriBuilder.setParameter(\"h\", hosts);\n    }\n\n    if (metrics.length() > 0) {\n      uriBuilder.setParameter(\"m\", metrics);\n    }\n\n    if (temporalInfo != null) {\n      long startTime = temporalInfo.getStartTime();\n      if (startTime != -1) {\n        uriBuilder.setParameter(\"s\", String.valueOf(startTime));\n      }\n\n      long endTime = temporalInfo.getEndTime();\n      if (endTime != -1) {\n        uriBuilder.setParameter(\"e\", String.valueOf(endTime));\n      }\n\n      long step = temporalInfo.getStep();\n      if (step != -1) {\n        uriBuilder.setParameter(\"r\", String.valueOf(step));\n      }\n    }\n    else {\n      uriBuilder.setParameter(\"e\", \"now\");\n      uriBuilder.setParameter(\"pt\", \"true\");\n    }\n\n    return uriBuilder.toString();\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"/**\n     * Populate the associated resources by making the rrd request.\n     *\n     * @return a collection of populated resources\n     *\n     * @throws SystemException if unable to populate the resources\n     */\n    public Collection<Resource> populateResources() throws SystemException {\n\n      String spec = getSpec(clusterName, clusterSet, hostSet,\n          requestAll ? Collections.<String>emptySet() : metrics.keySet(), temporalInfo);\n      BufferedReader reader = null;\n      try {\n        \n        //Check if host is live\n        if (!hostProvider.isGangliaCollectorHostLive(clusterName)) {\n          LOG.info(\"Ganglia host is not live\");\n            return Collections.emptySet();\n        }\n        \n        //Check if Ganglia server component is live\n        if (!hostProvider.isGangliaCollectorComponentLive(clusterName)) {\n          LOG.info(\"Ganglia server component is not live\");\n            return Collections.emptySet();\n        }\n        \n\n        reader = new BufferedReader(new InputStreamReader(\n            getStreamProvider().readFrom(spec)));\n\n        String feedStart = reader.readLine();\n        if (feedStart == null || feedStart.isEmpty()) {\n          LOG.info(\"Empty feed while getting ganglia metrics for spec => \"+\n            spec);\n          return Collections.emptySet();\n        }\n        int startTime = convertToNumber(feedStart).intValue();\n\n        String dsName = reader.readLine();\n        if (dsName == null || dsName.isEmpty()) {\n          LOG.info(\"Feed without body while reading ganglia metrics for spec \" +\n            \"=> \" + spec);\n          return Collections.emptySet();\n        }\n\n        while(!dsName.equals(\"[AMBARI_END]\")) {\n          GangliaMetric metric = new GangliaMetric();\n          List<GangliaMetric.TemporalMetric> listTemporalMetrics =\n              new ArrayList<GangliaMetric.TemporalMetric>();\n\n          metric.setDs_name(dsName);\n          metric.setCluster_name(reader.readLine());\n          metric.setHost_name(reader.readLine());\n          metric.setMetric_name(reader.readLine());\n\n          int time = convertToNumber(reader.readLine()).intValue();\n          int step = convertToNumber(reader.readLine()).intValue();\n\n          String val = reader.readLine();\n          while(! val.equals(\"[AMBARI_DP_END]\")) {\n            GangliaMetric.TemporalMetric tm = new GangliaMetric.TemporalMetric(val, time);\n            if (tm.isValid()) listTemporalMetrics.add(tm);\n            time += step;\n            val = reader.readLine();\n          }\n\n          metric.setDatapointsFromList(listTemporalMetrics);\n\n          ResourceKey key = new ResourceKey(metric.getHost_name(), metric.getCluster_name());\n          Set<Resource> resourceSet = resources.get(key);\n          if (resourceSet != null) {\n            for (Resource resource : resourceSet) {\n              populateResource(resource, metric);\n            }\n          }\n\n          dsName = reader.readLine();\n          if (dsName == null || dsName.isEmpty()) {\n            LOG.info(\"Unexpected end of stream reached while getting ganglia \" +\n              \"metrics for spec => \" + spec);\n            return Collections.emptySet();\n          }\n        }\n        String feedEnd = reader.readLine();\n        if (feedEnd == null || feedEnd.isEmpty()) {\n          LOG.info(\"Error reading end of feed while getting ganglia metrics \" +\n            \"for spec => \" + spec);\n        } else {\n\n          int endTime = convertToNumber(feedEnd).intValue();\n          int totalTime = endTime - startTime;\n          if (LOG.isInfoEnabled() && totalTime > POPULATION_TIME_UPPER_LIMIT) {\n            LOG.info(\"Ganglia resource population time: \" + totalTime);\n          }\n        }\n      } catch (IOException e) {\n        if (LOG.isErrorEnabled()) {\n          LOG.error(\"Caught exception getting Ganglia metrics : spec=\" + spec, e);\n        }\n      } finally {\n        if (reader != null) {\n          try {\n            reader.close();\n          } catch (IOException e) {\n            if (LOG.isWarnEnabled()) {\n              LOG.warn(\"Unable to close http input steam : spec=\" + spec, e);\n            }\n          }\n        }\n      }\n      //todo: filter out resources and return keepers\n      return Collections.emptySet();\n    }","id":21776,"modified_method":"/**\n     * Populate the associated resources by making the rrd request.\n     *\n     * @return a collection of populated resources\n     *\n     * @throws SystemException if unable to populate the resources\n     */\n    public Collection<Resource> populateResources() throws SystemException {\n\n      String spec = getSpec(clusterName, clusterSet, hostSet, metrics.keySet(), temporalInfo);\n\n      BufferedReader reader = null;\n      try {\n        \n        //Check if host is live\n        if (!hostProvider.isGangliaCollectorHostLive(clusterName)) {\n          LOG.info(\"Ganglia host is not live\");\n          return Collections.emptySet();\n        }\n        \n        //Check if Ganglia server component is live\n        if (!hostProvider.isGangliaCollectorComponentLive(clusterName)) {\n          LOG.info(\"Ganglia server component is not live\");\n          return Collections.emptySet();\n        }\n\n        reader = new BufferedReader(new InputStreamReader(\n            getStreamProvider().readFrom(spec)));\n\n        String feedStart = reader.readLine();\n        if (feedStart == null || feedStart.isEmpty()) {\n          LOG.info(\"Empty feed while getting ganglia metrics for spec => \"+\n            spec);\n          return Collections.emptySet();\n        }\n        int startTime = convertToNumber(feedStart).intValue();\n\n        String dsName = reader.readLine();\n        if (dsName == null || dsName.isEmpty()) {\n          LOG.info(\"Feed without body while reading ganglia metrics for spec \" +\n            \"=> \" + spec);\n          return Collections.emptySet();\n        }\n\n        while(!dsName.equals(\"[AMBARI_END]\")) {\n          GangliaMetric metric = new GangliaMetric();\n          List<GangliaMetric.TemporalMetric> listTemporalMetrics =\n              new ArrayList<GangliaMetric.TemporalMetric>();\n\n          metric.setDs_name(dsName);\n          metric.setCluster_name(reader.readLine());\n          metric.setHost_name(reader.readLine());\n          metric.setMetric_name(reader.readLine());\n\n          int time = convertToNumber(reader.readLine()).intValue();\n          int step = convertToNumber(reader.readLine()).intValue();\n\n          String val = reader.readLine();\n          while(! val.equals(\"[AMBARI_DP_END]\")) {\n            GangliaMetric.TemporalMetric tm = new GangliaMetric.TemporalMetric(val, time);\n            if (tm.isValid()) listTemporalMetrics.add(tm);\n            time += step;\n            val = reader.readLine();\n          }\n\n          metric.setDatapointsFromList(listTemporalMetrics);\n\n          ResourceKey key = new ResourceKey(metric.getHost_name(), metric.getCluster_name());\n          Set<Resource> resourceSet = resources.get(key);\n          if (resourceSet != null) {\n            for (Resource resource : resourceSet) {\n              populateResource(resource, metric);\n            }\n          }\n\n          dsName = reader.readLine();\n          if (dsName == null || dsName.isEmpty()) {\n            LOG.info(\"Unexpected end of stream reached while getting ganglia \" +\n              \"metrics for spec => \" + spec);\n            return Collections.emptySet();\n          }\n        }\n        String feedEnd = reader.readLine();\n        if (feedEnd == null || feedEnd.isEmpty()) {\n          LOG.info(\"Error reading end of feed while getting ganglia metrics \" +\n            \"for spec => \" + spec);\n        } else {\n\n          int endTime = convertToNumber(feedEnd).intValue();\n          int totalTime = endTime - startTime;\n          if (LOG.isInfoEnabled() && totalTime > POPULATION_TIME_UPPER_LIMIT) {\n            LOG.info(\"Ganglia resource population time: \" + totalTime);\n          }\n        }\n      } catch (IOException e) {\n        if (LOG.isErrorEnabled()) {\n          LOG.error(\"Caught exception getting Ganglia metrics : spec=\" + spec, e);\n        }\n      } finally {\n        if (reader != null) {\n          try {\n            reader.close();\n          } catch (IOException e) {\n            if (LOG.isWarnEnabled()) {\n              LOG.warn(\"Unable to close http input steam : spec=\" + spec, e);\n            }\n          }\n        }\n      }\n      //todo: filter out resources and return keepers\n      return Collections.emptySet();\n    }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, PropertyHelper.MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // namenode\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=domU-12-31-39-0E-34-E1.compute-1.internal&m=jvm.metrics.gcCount&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID));\n\n\n    // tasktracker\n    resource = new ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"TASKTRACKER\");\n\n    // only ask for one property\n    temporalInfoMap = new HashMap<String, TemporalInfo>();\n\n    //http://ec2-174-129-152-147.compute-1.amazonaws.com/cgi-bin/rrd.py?c=HDPSlaves&m=jvm.metrics.gcCount,mapred.shuffleOutput.shuffle_exceptions_caught,mapred.shuffleOutput.shuffle_failed_outputs,mapred.shuffleOutput.shuffle_output_bytes,mapred.shuffleOutput.shuffle_success_outputs&s=10&e=20&r=1&h=ip-10-85-111-149.ec2.internal\n\n    Set<String> properties = new HashSet<String>();\n    String shuffle_exceptions_caught = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_exceptions_caught\");\n    String shuffle_failed_outputs    = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_failed_outputs\");\n    String shuffle_output_bytes      = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_output_bytes\");\n    String shuffle_success_outputs   = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_success_outputs\");\n\n    properties.add(shuffle_exceptions_caught);\n    properties.add(shuffle_failed_outputs);\n    properties.add(shuffle_output_bytes);\n    properties.add(shuffle_success_outputs);\n    request = PropertyHelper.getReadRequest(properties, temporalInfoMap);\n\n    temporalInfoMap.put(shuffle_exceptions_caught, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_failed_outputs, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_output_bytes, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_success_outputs, new TemporalInfoImpl(10L, 20L, 1L));\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=domU-12-31-39-0E-34-E1.compute-1.internal&m=mapred.shuffleOutput.shuffle_output_bytes,mapred.shuffleOutput.shuffle_success_outputs,mapred.shuffleOutput.shuffle_failed_outputs,mapred.shuffleOutput.shuffle_exceptions_caught&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n\n    Assert.assertEquals(6, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_exceptions_caught));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_failed_outputs));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_output_bytes));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_success_outputs));\n  }","id":21777,"modified_method":"@Test\n  public void testPopulateResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, PropertyHelper.MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // namenode\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"DATANODE\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=domU-12-31-39-0E-34-E1.compute-1.internal&m=jvm.metrics.gcCount&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID));\n\n\n    // tasktracker\n    resource = new ResourceImpl(Resource.Type.HostComponent);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"TASKTRACKER\");\n\n    // only ask for one property\n    temporalInfoMap = new HashMap<String, TemporalInfo>();\n\n    Set<String> properties = new HashSet<String>();\n    String shuffle_exceptions_caught = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_exceptions_caught\");\n    String shuffle_failed_outputs    = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_failed_outputs\");\n    String shuffle_output_bytes      = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_output_bytes\");\n    String shuffle_success_outputs   = PropertyHelper.getPropertyId(\"metrics/mapred/shuffleOutput\", \"shuffle_success_outputs\");\n\n    properties.add(shuffle_exceptions_caught);\n    properties.add(shuffle_failed_outputs);\n    properties.add(shuffle_output_bytes);\n    properties.add(shuffle_success_outputs);\n    request = PropertyHelper.getReadRequest(properties, temporalInfoMap);\n\n    temporalInfoMap.put(shuffle_exceptions_caught, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_failed_outputs, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_output_bytes, new TemporalInfoImpl(10L, 20L, 1L));\n    temporalInfoMap.put(shuffle_success_outputs, new TemporalInfoImpl(10L, 20L, 1L));\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    \n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/mapred/shuffleOutput/shuffle_exceptions_caught\");\n    metricsRegexes.add(\"metrics/mapred/shuffleOutput/shuffle_failed_outputs\");\n    metricsRegexes.add(\"metrics/mapred/shuffleOutput/shuffle_output_bytes\");\n    metricsRegexes.add(\"metrics/mapred/shuffleOutput/shuffle_success_outputs\");\n    \n    \n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"TASKTRACKER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n\n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));\n\n\n    Assert.assertEquals(6, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_exceptions_caught));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_failed_outputs));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_output_bytes));\n    Assert.assertNotNull(resource.getPropertyValue(shuffle_success_outputs));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params_category4() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY4, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY4), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21778,"modified_method":"@Test\n  public void testPopulateResources_params_category4() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY4, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY4), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n    \n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/flume/$1/CHANNEL/$2\");\n    metricsRegexes.add(FLUME_CHANNEL_CAPACITY_PROPERTY);\n\n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    \n    \n    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params_category1() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21779,"modified_method":"@Test\n  public void testPopulateResources_params_category1() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/flume\");\n    \n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    \n\n    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params_category2() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY2, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY2), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21780,"modified_method":"@Test\n  public void testPopulateResources_params_category2() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY2, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY2), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/flume/\");\n    \n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));\n\n    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateManyResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.Host, PropertyHelper.MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID\n    );\n\n    Set<Resource> resources = new HashSet<Resource>();\n\n    // host\n    Resource resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resources.add(resource);\n\n    resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E2.compute-1.internal\");\n    resources.add(resource);\n\n    resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E3.compute-1.internal\");\n    resources.add(resource);\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(3, propertyProvider.populateResources(resources, request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPJobTracker,HDPHBaseMaster,HDPResourceManager,HDPSlaves,HDPHistoryServer,HDPNameNode&h=domU-12-31-39-0E-34-E3.compute-1.internal,domU-12-31-39-0E-34-E1.compute-1.internal,domU-12-31-39-0E-34-E2.compute-1.internal&m=jvm.metrics.gcCount&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    for (Resource res : resources) {\n      Assert.assertEquals(2, PropertyHelper.getProperties(res).size());\n      Assert.assertNotNull(res.getPropertyValue(PROPERTY_ID));\n    }\n  }","id":21781,"modified_method":"@Test\n  public void testPopulateManyResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.Host, PropertyHelper.MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID\n    );\n\n    Set<Resource> resources = new HashSet<Resource>();\n\n    // host\n    Resource resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    resources.add(resource);\n\n    resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E2.compute-1.internal\");\n    resources.add(resource);\n\n    resource = new ResourceImpl(Resource.Type.Host);\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"domU-12-31-39-0E-34-E3.compute-1.internal\");\n    resources.add(resource);\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(3, propertyProvider.populateResources(resources, request, null).size());\n    \n    URIBuilder uriBuilder = new URIBuilder();\n\n    uriBuilder.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    uriBuilder.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    uriBuilder.setPath(\"/cgi-bin/rrd.py\");\n    uriBuilder.setParameter(\"c\", \"HDPJobTracker,HDPHBaseMaster,HDPResourceManager,HDPSlaves,HDPHistoryServer,HDPNameNode\");\n    uriBuilder.setParameter(\"h\", \"domU-12-31-39-0E-34-E3.compute-1.internal,domU-12-31-39-0E-34-E1.compute-1.internal,domU-12-31-39-0E-34-E2.compute-1.internal\");\n    uriBuilder.setParameter(\"m\", \"jvm.metrics.gcCount\");\n    uriBuilder.setParameter(\"s\", \"10\");\n    uriBuilder.setParameter(\"e\", \"20\");\n    uriBuilder.setParameter(\"r\", \"1\");\n\n    String expected = uriBuilder.toString();\n    \n    \n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    for (Resource res : resources) {\n      Assert.assertEquals(2, PropertyHelper.getProperties(res).size());\n      Assert.assertNotNull(res.getPropertyValue(PROPERTY_ID));\n    }\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CHANNEL_CAPACITY_PROPERTY, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CHANNEL_CAPACITY_PROPERTY), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&m=flume.CHANNEL.c1.ChannelCapacity&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21782,"modified_method":"@Test\n  public void testPopulateResources_params() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CHANNEL_CAPACITY_PROPERTY, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CHANNEL_CAPACITY_PROPERTY), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(FLUME_CHANNEL_CAPACITY_PROPERTY);\n\n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n    \n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    \n    \n    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_paramsMixed() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n\n    Set<String> ids = new HashSet<String>();\n    ids.add(FLUME_CATEGORY2);\n    ids.add(PROPERTY_ID2);\n\n    Request  request = PropertyHelper.getReadRequest(ids, temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&e=now&pt=true\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(22, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID2));\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21783,"modified_method":"@Test\n  public void testPopulateResources_paramsMixed() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n    \n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n\n    Set<String> ids = new HashSet<String>();\n    ids.add(FLUME_CATEGORY2);\n    ids.add(PROPERTY_ID2);\n\n    Request request = PropertyHelper.getReadRequest(ids, temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/flume\");\n    metricsRegexes.add(\"metrics/cpu/cpu_wio\");\n    \n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"e\", \"now\");\n    expectedUri.setParameter(\"pt\", \"true\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));\n       \n    Assert.assertEquals(22, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID2));\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources__LargeNumberOfHostResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.Host, PropertyHelper.MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID\n    );\n\n    Set<Resource> resources = new HashSet<Resource>();\n\n    for (int i = 0; i < 150; ++i) {\n      Resource resource = new ResourceImpl(Resource.Type.Host);\n      resource.setProperty(HOST_NAME_PROPERTY_ID, \"host\" + i);\n      resources.add(resource);\n    }\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(150, propertyProvider.populateResources(resources, request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPJobTracker,HDPHBaseMaster,HDPResourceManager,HDPSlaves,HDPHistoryServer,HDPNameNode&m=jvm.metrics.gcCount&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n  }","id":21784,"modified_method":"@Test\n  public void testPopulateResources__LargeNumberOfHostResources() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.Host, PropertyHelper.MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID\n    );\n\n    Set<Resource> resources = new HashSet<Resource>();\n\n    for (int i = 0; i < 150; ++i) {\n      Resource resource = new ResourceImpl(Resource.Type.Host);\n      resource.setProperty(HOST_NAME_PROPERTY_ID, \"host\" + i);\n      resources.add(resource);\n    }\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(PROPERTY_ID, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID), temporalInfoMap);\n\n    Assert.assertEquals(150, propertyProvider.populateResources(resources, request, null).size());\n\n    \n    URIBuilder uriBuilder = new URIBuilder();\n    \n    uriBuilder.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    uriBuilder.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    uriBuilder.setPath(\"/cgi-bin/rrd.py\");\n    uriBuilder.setParameter(\"c\", \"HDPJobTracker,HDPHBaseMaster,HDPResourceManager,HDPSlaves,HDPHistoryServer,HDPNameNode\");\n    uriBuilder.setParameter(\"m\", \"jvm.metrics.gcCount\");\n    uriBuilder.setParameter(\"s\", \"10\");\n    uriBuilder.setParameter(\"e\", \"20\");\n    uriBuilder.setParameter(\"r\", \"1\");\n    \n    String expected = uriBuilder.toString();\n    \n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params_category5() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data_yarn_queues.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP2),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n    \n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"dev01.ambari.apache.org\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"RESOURCEMANAGER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(RM_CATEGORY_1, new TemporalInfoImpl(10L, 20L, 1L));\n    \n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(RM_CATEGORY_1), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPResourceManager&h=dev01.ambari.apache.org&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());    \n    \n    Assert.assertTrue(PropertyHelper.getProperties(resource).size() > 2);\n    Assert.assertNotNull(resource.getPropertyValue(RM_AVAILABLE_MEMORY_PROPERTY));\n  }","id":21785,"modified_method":"@Test\n  public void testPopulateResources_params_category5() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"temporal_ganglia_data_yarn_queues.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP2);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n    \n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"dev01.ambari.apache.org\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"RESOURCEMANAGER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(RM_CATEGORY_1, new TemporalInfoImpl(10L, 20L, 1L));\n    \n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(RM_CATEGORY_1), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n    \n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/yarn/Queue/$1.replaceAll(\\\"([.])\\\",\\\"/\\\")/\");\n\n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"RESOURCEMANAGER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPResourceManager\");\n    expectedUri.setParameter(\"h\", \"dev01.ambari.apache.org\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    \n    \n    \n    Assert.assertTrue(PropertyHelper.getProperties(resource).size() > 2);\n    Assert.assertNotNull(resource.getPropertyValue(RM_AVAILABLE_MEMORY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateResources_params_category3() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1),\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY3, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY3), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n\n    String expected = (configuration.isGangliaSSL() ? \"https\" : \"http\") +\n        \"://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPSlaves&h=ip-10-39-113-33.ec2.internal&s=10&e=20&r=1\";\n    Assert.assertEquals(expected, streamProvider.getLastSpec());\n\n    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","id":21786,"modified_method":"@Test\n  public void testPopulateResources_params_category3() throws Exception {\n    TestStreamProvider streamProvider  = new TestStreamProvider(\"flume_ganglia_data.txt\");\n    TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();\n\n    Map<String, Map<String, PropertyInfo>> gangliaPropertyIds = PropertyHelper.getGangliaPropertyIds(Resource.Type.HostComponent, MetricsVersion.HDP1);\n    GangliaPropertyProvider propertyProvider = new GangliaHostComponentPropertyProvider(\n        gangliaPropertyIds,\n        streamProvider,\n        configuration,\n        hostProvider,\n        CLUSTER_NAME_PROPERTY_ID,\n        HOST_NAME_PROPERTY_ID,\n        COMPONENT_NAME_PROPERTY_ID);\n\n    // flume\n    Resource resource = new ResourceImpl(Resource.Type.HostComponent);\n\n    resource.setProperty(HOST_NAME_PROPERTY_ID, \"ip-10-39-113-33.ec2.internal\");\n    resource.setProperty(COMPONENT_NAME_PROPERTY_ID, \"FLUME_SERVER\");\n\n    // only ask for one property\n    Map<String, TemporalInfo> temporalInfoMap = new HashMap<String, TemporalInfo>();\n    temporalInfoMap.put(FLUME_CATEGORY3, new TemporalInfoImpl(10L, 20L, 1L));\n    Request  request = PropertyHelper.getReadRequest(Collections.singleton(FLUME_CATEGORY3), temporalInfoMap);\n\n    Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());\n    \n    List<String> metricsRegexes = new ArrayList<String>();\n    \n    metricsRegexes.add(\"metrics/flume/$1/CHANNEL/$2/\");\n    metricsRegexes.add(FLUME_CHANNEL_CAPACITY_PROPERTY);\n\n    String metricsList = getMetricsRegexes(metricsRegexes, gangliaPropertyIds, \"FLUME_SERVER\");\n    \n    URIBuilder expectedUri = new URIBuilder();\n\n    expectedUri.setScheme((configuration.isGangliaSSL() ? \"https\" : \"http\"));\n    expectedUri.setHost(\"domU-12-31-39-0E-34-E1.compute-1.internal\");\n    expectedUri.setPath(\"/cgi-bin/rrd.py\");\n    expectedUri.setParameter(\"c\", \"HDPSlaves\");\n    expectedUri.setParameter(\"h\", \"ip-10-39-113-33.ec2.internal\");\n    expectedUri.setParameter(\"m\", metricsList);\n    expectedUri.setParameter(\"s\", \"10\");\n    expectedUri.setParameter(\"e\", \"20\");\n    expectedUri.setParameter(\"r\", \"1\");\n    \n    URIBuilder actualUri = new URIBuilder(streamProvider.getLastSpec());\n\n    Assert.assertEquals(expectedUri.getScheme(), actualUri.getScheme());\n    Assert.assertEquals(expectedUri.getHost(), actualUri.getHost());\n    Assert.assertEquals(expectedUri.getPath(), actualUri.getPath());\n    \n    Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    \n\n    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());\n    Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));\n  }","commit_id":"e29fcae536d827683923b0cc400a5735e22f5cae","url":"https://github.com/apache/ambari"},{"original_method":"@Transactional\n    @Restrict(\"#{s:hasRole('admin')}\")\n    public void joinTribe() {\n        log.debug(\"starting join tribe\");\n        if (authenticatedAccount == null) {\n            log.error(\"failed to load auth person\");\n            return;\n        }\n        try {\n            languageTeamServiceImpl.joinOrUpdateRoleInLanguageTeam(\n                    this.language, authenticatedAccount.getPerson().getId(),\n                    true, true, true);\n            Events.instance().raiseEvent(\"personJoinedTribe\");\n            log.info(\"{} joined tribe {}\",\n                    authenticatedAccount.getUsername(), this.language);\n            // FIXME use localizable string\n            FacesMessages.instance().add(\n                    \"You are now a member of the {0} language team\",\n                    getLocale().retrieveNativeName());\n        } catch (Exception e) {\n            FacesMessages.instance().add(Severity.ERROR, e.getMessage());\n        }\n    }","id":21787,"modified_method":"@Transactional\n    @Restrict(\"#{s:hasRole('admin')}\")\n    public void joinTribe() {\n        log.debug(\"starting join tribe\");\n        if (authenticatedAccount == null) {\n            log.error(\"failed to load auth person\");\n            return;\n        }\n        try {\n            languageTeamServiceImpl.joinOrUpdateRoleInLanguageTeam(\n                    this.language, authenticatedAccount.getPerson().getId(),\n                    true, true, true);\n            log.info(\"{} joined tribe {}\",\n                    authenticatedAccount.getUsername(), this.language);\n            // FIXME use localizable string\n            FacesMessages.instance().add(\n                    \"You are now a member of the {0} language team\",\n                    getLocale().retrieveNativeName());\n        } catch (Exception e) {\n            FacesMessages.instance().add(Severity.ERROR, e.getMessage());\n        }\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamTranslator(HLocaleMember member) {\n        this.localeDAO.makePersistent(getLocale());\n        this.localeDAO.flush();\n        if (member.isReviewer()) {\n            FacesMessages.instance().add(\"{0} has been made a Team Translator\",\n                    member.getPerson().getAccount().getUsername());\n        } else {\n            // TODO i18n\n            FacesMessages.instance().add(\n                    \"{0} has been removed from as Team Translator\",\n                    member.getPerson().getAccount().getUsername());\n        }\n    }","id":21788,"modified_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamTranslator(HLocaleMember member) {\n        savePermission(member, \"Team Translator\", member.isTranslator());\n        if (Events.exists()) {\n            HPerson doneByPerson = authenticatedAccount.getPerson();\n            LanguageTeamPermissionChangedEvent changedEvent =\n                    new LanguageTeamPermissionChangedEvent(\n                            member.getPerson(), getLocale().getLocaleId(),\n                            doneByPerson)\n                            .changedTranslatorPermission(member);\n            Events.instance()\n                    .raiseTransactionSuccessEvent(\n                            LANGUAGE_TEAM_PERMISSION_CHANGED,\n                            changedEvent);\n        }\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Transactional\n    public void leaveTribe() {\n        log.debug(\"starting leave tribe\");\n        if (authenticatedAccount == null) {\n            log.error(\"failed to load auth person\");\n            return;\n        }\n        languageTeamServiceImpl.leaveLanguageTeam(this.language,\n                authenticatedAccount.getPerson().getId());\n        Events.instance().raiseEvent(\"personLeftTribe\");\n        log.info(\"{} left tribe {}\", authenticatedAccount.getUsername(),\n                this.language);\n        // FIXME use localizable string\n        FacesMessages.instance().add(\"You have left the {0} language team\",\n                getLocale().retrieveNativeName());\n    }","id":21789,"modified_method":"@Transactional\n    public void leaveTribe() {\n        log.debug(\"starting leave tribe\");\n        if (authenticatedAccount == null) {\n            log.error(\"failed to load auth person\");\n            return;\n        }\n        languageTeamServiceImpl.leaveLanguageTeam(this.language,\n                authenticatedAccount.getPerson().getId());\n        log.info(\"{} left tribe {}\", authenticatedAccount.getUsername(),\n                this.language);\n        // FIXME use localizable string\n        FacesMessages.instance().add(\"You have left the {0} language team\",\n                getLocale().retrieveNativeName());\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamReviewer(HLocaleMember member) {\n        this.localeDAO.makePersistent(getLocale());\n        this.localeDAO.flush();\n        if (member.isReviewer()) {\n            FacesMessages.instance().add(\"{0} has been made a Team Reviewer\",\n                    member.getPerson().getAccount().getUsername());\n        } else {\n            // TODO i18n\n            FacesMessages.instance().add(\n                    \"{0} has been removed from as Team Reviewer\",\n                    member.getPerson().getAccount().getUsername());\n        }\n    }","id":21790,"modified_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamReviewer(HLocaleMember member) {\n        savePermission(member, \"Team Reviewer\", member.isReviewer());\n        if (Events.exists()) {\n            HPerson doneByPerson = authenticatedAccount.getPerson();\n            LanguageTeamPermissionChangedEvent changedEvent =\n                    new LanguageTeamPermissionChangedEvent(\n                            member.getPerson(), getLocale().getLocaleId(),\n                            doneByPerson)\n                            .changedReviewerPermission(member);\n            Events.instance()\n                    .raiseTransactionSuccessEvent(\n                            LANGUAGE_TEAM_PERMISSION_CHANGED,\n                            changedEvent);\n        }\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamCoordinator(HLocaleMember member) {\n        this.localeDAO.makePersistent(getLocale());\n        this.localeDAO.flush();\n        if (member.isCoordinator()) {\n            FacesMessages.instance().add(\n                    \"{0} has been made a Team Coordinator\",\n                    member.getPerson().getAccount().getUsername());\n        } else {\n            // TODO i18n\n            FacesMessages.instance().add(\n                    \"{0} has been removed as Team Coordinator\",\n                    member.getPerson().getAccount().getUsername());\n        }\n    }","id":21791,"modified_method":"@Restrict(\"#{s:hasPermission(languageTeamAction.locale, 'manage-language-team')}\")\n    public void saveTeamCoordinator(HLocaleMember member) {\n        savePermission(member, \"Team Coordinator\", member.isCoordinator());\n        if (Events.exists()) {\n            HPerson doneByPerson = authenticatedAccount.getPerson();\n            LanguageTeamPermissionChangedEvent changedEvent =\n                    new LanguageTeamPermissionChangedEvent(\n                            member.getPerson(), getLocale().getLocaleId(),\n                            doneByPerson)\n                            .changedCoordinatorPermission(member);\n            Events.instance()\n                    .raiseTransactionSuccessEvent(\n                            LANGUAGE_TEAM_PERMISSION_CHANGED,\n                            changedEvent);\n        }\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"public boolean leaveLanguageTeam(String locale, Long personId) {\n        HLocale lang = localeDAO.findByLocaleId(new LocaleId(locale));\n        HPerson currentPerson = personDAO.findById(personId, false);\n        final HLocaleMember membership =\n                localeMemberDAO.findById(new HLocaleMemberPk(currentPerson,\n                        lang), true);\n\n        if (membership != null) {\n            localeMemberDAO.makeTransient(membership);\n            lang.getMembers().remove(membership);\n            localeMemberDAO.flush();\n            return true;\n        }\n\n        return false;\n    }","id":21792,"modified_method":"public boolean leaveLanguageTeam(String locale, Long personId) {\n        HLocale lang = localeDAO.findByLocaleId(new LocaleId(locale));\n        HPerson currentPerson = personDAO.findById(personId, false);\n        final HLocaleMember membership =\n                localeMemberDAO.findById(new HLocaleMemberPk(currentPerson,\n                        lang), true);\n\n        if (membership != null) {\n            localeMemberDAO.makeTransient(membership);\n            lang.getMembers().remove(membership);\n            localeMemberDAO.flush();\n            if (Events.exists()) {\n                HPerson doneByPerson = authenticatedAccount.getPerson();\n                Events.instance()\n                        .raiseTransactionSuccessEvent(\n                                LanguageTeamPermissionChangedEvent.LANGUAGE_TEAM_PERMISSION_CHANGED,\n                                new LanguageTeamPermissionChangedEvent(\n                                        currentPerson, lang.getLocaleId(),\n                                        doneByPerson)\n                                        .updatingPermissions(membership, false,\n                                                false, false));\n            }\n            return true;\n        }\n\n        return false;\n    }","commit_id":"0c29bca70f01d611048031aa0ebe6a1a8a95518c","url":"https://github.com/zanata/zanata-server"},{"original_method":"private String hostPath(String path) {\n        final URI baseUri = uriInfo.getBaseUri();\n        final int port = baseUri.getPort();\n\n        return baseUri.getScheme() + \"://\" + baseUri.getHost() + (port != 80 ? \":\" + Integer.toString(port) : \"\") + path;\n    }","id":21793,"modified_method":"private String hostPath(String path) {\n\t    return uriInfo.getBaseUriBuilder().replacePath( path ).build( ).toString();\n    }","commit_id":"127ca9a7879970af433eb00f224f669ecb9d3fc6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.data.uri\", \"http://localhost:7474/db/data/\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.management.uri\", \"http://localhost:7474/db/manage/\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":21794,"modified_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"127ca9a7879970af433eb00f224f669ecb9d3fc6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String hostPath(String path) {\n        final URI baseUri = uriInfo.getBaseUri();\n        final int port = baseUri.getPort();\n\n        return baseUri.getScheme() + \"://\" + baseUri.getHost() + (port != 80 ? \":\" + Integer.toString(port) : \"\") + path;\n    }","id":21795,"modified_method":"private String hostPath(String path) {\n\t    return uriInfo.getBaseUriBuilder().replacePath( path ).build( ).toString();\n    }","commit_id":"a2492540136da1436f62392b29f047ecb69eeb81","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.data.uri\", \"http://localhost:7474/db/data/\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.management.uri\", \"http://localhost:7474/db/manage/\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":21796,"modified_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"a2492540136da1436f62392b29f047ecb69eeb81","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String hostPath(String path) {\n        final URI baseUri = uriInfo.getBaseUri();\n        final int port = baseUri.getPort();\n\n        return baseUri.getScheme() + \"://\" + baseUri.getHost() + (port != 80 ? \":\" + Integer.toString(port) : \"\") + path;\n    }","id":21797,"modified_method":"private String hostPath(String path) {\n\t    return uriInfo.getBaseUriBuilder().replacePath( path ).build( ).toString();\n    }","commit_id":"7ee1cafb6d4574854e6b7524f54de741637a09df","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.data.uri\", \"http://localhost:7474/db/data/\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.management.uri\", \"http://localhost:7474/db/manage/\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":21798,"modified_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"7ee1cafb6d4574854e6b7524f54de741637a09df","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String hostPath(String path) {\n        final URI baseUri = uriInfo.getBaseUri();\n        final int port = baseUri.getPort();\n\n        return baseUri.getScheme() + \"://\" + baseUri.getHost() + (port != 80 ? \":\" + Integer.toString(port) : \"\") + path;\n    }","id":21799,"modified_method":"private String hostPath(String path) {\n\t    return uriInfo.getBaseUriBuilder().replacePath( path ).build( ).toString();\n    }","commit_id":"689a3f0eaf8fe5c4295bcb0bff8912d9e28e3630","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.data.uri\", \"http://localhost:7474/db/data/\", temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webadmin.management.uri\", \"http://localhost:7474/db/manage/\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":21800,"modified_method":"private static void writeConfig( String portNo )\n    {\n        try\n        {\n            File temporaryConfigFile = createTempPropertyFile();\n            writePropertyToFile( \"org.neo4j.server.database.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( \"org.neo4j.server.webserver.port\", portNo, temporaryConfigFile );\n            writePropertyToFile( NeoServer.WEBADMIN_NAMESPACE_PROPERTY_KEY + \"rrdb.location\", createTempDir().getAbsolutePath(), temporaryConfigFile );\n            writePropertyToFile( NeoServer.OSGI_BUNDLE_DIR_PROPERTY_KEY, \"../\", temporaryConfigFile );\n\n            System.setProperty( NeoServer.NEO_CONFIG_FILE_KEY, temporaryConfigFile.getAbsolutePath() );\n\n        } catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"689a3f0eaf8fe5c4295bcb0bff8912d9e28e3630","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected PermissionCheckerBag getUserBag(long userId, long groupId)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = PermissionCacheUtil.getBag(userId, groupId);\n\n\t\tif (bag != null) {\n\t\t\treturn bag;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// If we are checking permissions on an object that belongs to a\n\t\t\t// community, then it's only necessary to check the group that\n\t\t\t// represents the community and not all the groups that the user\n\t\t\t// belongs to. This is so because an object cannot belong to\n\t\t\t// more than one community.\n\n\t\t\tList<Group> userGroups = new ArrayList<Group>();\n\t\t\t//List<Group> userGroups = UserUtil.getGroups(userId);\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\t\tuserGroups.add(group);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Organization> userOrgs = getUserOrgs(userId);\n\n\t\t\tList<Group> userOrgGroups =\n\t\t\t\tGroupLocalServiceUtil.getOrganizationsGroups(userOrgs);\n\n\t\t\tList<UserGroup> userUserGroups =\n\t\t\t\tUserGroupLocalServiceUtil.getUserUserGroups(userId);\n\n\t\t\tList<Group> userUserGroupGroups =\n\t\t\t\tGroupLocalServiceUtil.getUserGroupsGroups(userUserGroups);\n\n\t\t\tList<Group> groups = new ArrayList<Group>(\n\t\t\t\tuserGroups.size() + userOrgGroups.size() +\n\t\t\t\t\tuserUserGroupGroups.size());\n\n\t\t\tgroups.addAll(userGroups);\n\t\t\tgroups.addAll(userOrgGroups);\n\t\t\tgroups.addAll(userUserGroupGroups);\n\n\t\t\tList<Role> roles = new UniqueList<Role>();\n\n\t\t\tif ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 3) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 4) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6)) {\n\n\t\t\t\tif (groups.size() > 0) {\n\t\t\t\t\tList<Role> userRelatedRoles=\n\t\t\t\t\t\tRoleLocalServiceUtil.getUserRelatedRoles(\n\t\t\t\t\t\t\tuserId, groups);\n\n\t\t\t\t\troles.addAll(userRelatedRoles);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\troles.addAll(RoleLocalServiceUtil.getUserRoles(userId));\n\t\t\t\t}\n\n\t\t\t\tList<Role> userGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupRoles(userId, groupId);\n\n\t\t\t\troles.addAll(userGroupRoles);\n\n\t\t\t\tList<Role> userGroupGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupGroupRoles(\n\t\t\t\t\t\tuserId, groupId);\n\n\t\t\t\troles.addAll(userGroupGroupRoles);\n\n\t\t\t\tif (!userGroups.isEmpty()) {\n\t\t\t\t\tGroup group = userGroups.get(0);\n\n\t\t\t\t\taddRequiredMemberRole(group, roles);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\troles = new ArrayList<Role>();\n\t\t\t}\n\n\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\tuserId, userGroups, userOrgs, userOrgGroups,\n\t\t\t\tuserUserGroupGroups, groups, roles);\n\n\t\t\treturn bag;\n\t\t}\n\t\tfinally {\n\t\t\tif (bag == null) {\n\t\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\t\tuserId, new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Organization>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Group>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Role>());\n\t\t\t}\n\n\t\t\tPermissionCacheUtil.putBag(userId, groupId, bag);\n\t\t}\n\t}","id":21801,"modified_method":"public static PermissionCheckerBag getUserBag(long userId, long groupId)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = PermissionCacheUtil.getBag(userId, groupId);\n\n\t\tif (bag != null) {\n\t\t\treturn bag;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// If we are checking permissions on an object that belongs to a\n\t\t\t// community, then it's only necessary to check the group that\n\t\t\t// represents the community and not all the groups that the user\n\t\t\t// belongs to. This is so because an object cannot belong to\n\t\t\t// more than one community.\n\n\t\t\tList<Group> userGroups = new ArrayList<Group>();\n\t\t\t//List<Group> userGroups = UserUtil.getGroups(userId);\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\t\tuserGroups.add(group);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Organization> userOrgs = getUserOrgs(userId);\n\n\t\t\tList<Group> userOrgGroups =\n\t\t\t\tGroupLocalServiceUtil.getOrganizationsGroups(userOrgs);\n\n\t\t\tList<UserGroup> userUserGroups =\n\t\t\t\tUserGroupLocalServiceUtil.getUserUserGroups(userId);\n\n\t\t\tList<Group> userUserGroupGroups =\n\t\t\t\tGroupLocalServiceUtil.getUserGroupsGroups(userUserGroups);\n\n\t\t\tList<Group> groups = new ArrayList<Group>(\n\t\t\t\tuserGroups.size() + userOrgGroups.size() +\n\t\t\t\t\tuserUserGroupGroups.size());\n\n\t\t\tgroups.addAll(userGroups);\n\t\t\tgroups.addAll(userOrgGroups);\n\t\t\tgroups.addAll(userUserGroupGroups);\n\n\t\t\tList<Role> roles = new UniqueList<Role>();\n\n\t\t\tif ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 3) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 4) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6)) {\n\n\t\t\t\tif (groups.size() > 0) {\n\t\t\t\t\tList<Role> userRelatedRoles =\n\t\t\t\t\t\tRoleLocalServiceUtil.getUserRelatedRoles(\n\t\t\t\t\t\t\tuserId, groups);\n\n\t\t\t\t\troles.addAll(userRelatedRoles);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\troles.addAll(RoleLocalServiceUtil.getUserRoles(userId));\n\t\t\t\t}\n\n\t\t\t\tList<Role> userGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupRoles(userId, groupId);\n\n\t\t\t\troles.addAll(userGroupRoles);\n\n\t\t\t\tList<Role> userGroupGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupGroupRoles(\n\t\t\t\t\t\tuserId, groupId);\n\n\t\t\t\troles.addAll(userGroupGroupRoles);\n\n\t\t\t\tif (!userGroups.isEmpty()) {\n\t\t\t\t\tGroup group = userGroups.get(0);\n\n\t\t\t\t\taddRequiredMemberRole(group, roles);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\troles = new ArrayList<Role>();\n\t\t\t}\n\n\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\tuserId, userGroups, userOrgs, userOrgGroups,\n\t\t\t\tuserUserGroupGroups, groups, roles);\n\n\t\t\treturn bag;\n\t\t}\n\t\tfinally {\n\t\t\tif (bag == null) {\n\t\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\t\tuserId, new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Organization>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Group>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Role>());\n\t\t\t}\n\n\t\t\tPermissionCacheUtil.putBag(userId, groupId, bag);\n\t\t}\n\t}","commit_id":"32e620be7a8b805c34de08ee8912a8d6d66aed32","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Query doGetPermissionQuery_5(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tList<Role> roles = RoleLocalServiceUtil.getUserRoles(userId);\n\n\t\troles = ListUtil.copy(roles);\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId, groupId);\n\n\t\t\tuserGroupRoles = ListUtil.copy(userGroupRoles);\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tlong companyResourceId = 0;\n\n\t\ttry {\n\t\t\tResource companyResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\tString.valueOf(companyId));\n\n\t\t\tcompanyResourceId = companyResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tlong groupResourceId = 0;\n\n\t\ttry {\n\t\t\tResource groupResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\tString.valueOf(groupId));\n\n\t\t\tgroupResourceId = groupResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (hasPermission(roleId, companyResourceId) ||\n\t\t\t\thasPermission(roleId, groupResourceId)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, role.getRoleId());\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","id":21802,"modified_method":"protected Query doGetPermissionQuery_5(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tPermissionCheckerBag bag = AdvancedPermissionChecker.getUserBag(\n\t\t\tuserId, 0);\n\n\t\tList<Role> roles = bag.getRoles();\n\n\t\tList<Group> userGroups = new ArrayList<Group>();\n\n\t\tList<UserGroupRole> userGroupRoles = new ArrayList<UserGroupRole>();\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroups.addAll(\n\t\t\t\tGroupLocalServiceUtil.getUserGroups(userId, true));\n\t\t\tuserGroups.addAll(bag.getGroups());\n\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\tuserGroups.add(group);\n\t\t\t}\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\t\tuserId, groupId));\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tlong companyResourceId = 0;\n\n\t\ttry {\n\t\t\tResource companyResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\tString.valueOf(companyId));\n\n\t\t\tcompanyResourceId = companyResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tlong groupResourceId = 0;\n\n\t\ttry {\n\t\t\tResource groupResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\tString.valueOf(groupId));\n\n\t\t\tgroupResourceId = groupResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (hasPermission(roleId, companyResourceId) ||\n\t\t\t\thasPermission(roleId, groupResourceId)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, role.getRoleId());\n\t\t}\n\n\t\tfor (Group userGroup : userGroups) {\n\t\t\taddRequiredMemberRole(userGroup, permissionQuery);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","commit_id":"32e620be7a8b805c34de08ee8912a8d6d66aed32","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Query doGetPermissionQuery_6(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tList<Role> roles = RoleLocalServiceUtil.getUserRoles(userId);\n\n\t\troles = ListUtil.copy(roles);\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId, groupId);\n\n\t\t\tuserGroupRoles = ListUtil.copy(userGroupRoles);\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (ResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\t\tString.valueOf(companyId), roleId, ActionKeys.VIEW) ||\n\t\t\t\tResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\t\tString.valueOf(groupId), roleId, ActionKeys.VIEW)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, roleId);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","id":21803,"modified_method":"protected Query doGetPermissionQuery_6(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tPermissionCheckerBag bag = AdvancedPermissionChecker.getUserBag(\n\t\t\tuserId, 0);\n\n\t\tList<Role> roles = bag.getRoles();\n\n\t\tList<Group> userGroups = new ArrayList<Group>();\n\n\t\tList<UserGroupRole> userGroupRoles = new ArrayList<UserGroupRole>();\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroups.addAll(\n\t\t\t\tGroupLocalServiceUtil.getUserGroups(userId, true));\n\t\t\tuserGroups.addAll(bag.getGroups());\n\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\tuserGroups.add(group);\n\t\t\t}\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\t\tuserId, groupId));\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (ResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\t\tString.valueOf(companyId), roleId, ActionKeys.VIEW) ||\n\t\t\t\tResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\t\tString.valueOf(groupId), roleId, ActionKeys.VIEW)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, roleId);\n\t\t}\n\n\t\tfor (Group userGroup : userGroups) {\n\t\t\taddRequiredMemberRole(userGroup, permissionQuery);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","commit_id":"32e620be7a8b805c34de08ee8912a8d6d66aed32","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected PermissionCheckerBag getUserBag(long userId, long groupId)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = PermissionCacheUtil.getBag(userId, groupId);\n\n\t\tif (bag != null) {\n\t\t\treturn bag;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// If we are checking permissions on an object that belongs to a\n\t\t\t// community, then it's only necessary to check the group that\n\t\t\t// represents the community and not all the groups that the user\n\t\t\t// belongs to. This is so because an object cannot belong to\n\t\t\t// more than one community.\n\n\t\t\tList<Group> userGroups = new ArrayList<Group>();\n\t\t\t//List<Group> userGroups = UserUtil.getGroups(userId);\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\t\tuserGroups.add(group);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Organization> userOrgs = getUserOrgs(userId);\n\n\t\t\tList<Group> userOrgGroups =\n\t\t\t\tGroupLocalServiceUtil.getOrganizationsGroups(userOrgs);\n\n\t\t\tList<UserGroup> userUserGroups =\n\t\t\t\tUserGroupLocalServiceUtil.getUserUserGroups(userId);\n\n\t\t\tList<Group> userUserGroupGroups =\n\t\t\t\tGroupLocalServiceUtil.getUserGroupsGroups(userUserGroups);\n\n\t\t\tList<Group> groups = new ArrayList<Group>(\n\t\t\t\tuserGroups.size() + userOrgGroups.size() +\n\t\t\t\t\tuserUserGroupGroups.size());\n\n\t\t\tgroups.addAll(userGroups);\n\t\t\tgroups.addAll(userOrgGroups);\n\t\t\tgroups.addAll(userUserGroupGroups);\n\n\t\t\tList<Role> roles = new UniqueList<Role>();\n\n\t\t\tif ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 3) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 4) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6)) {\n\n\t\t\t\tif (groups.size() > 0) {\n\t\t\t\t\tList<Role> userRelatedRoles=\n\t\t\t\t\t\tRoleLocalServiceUtil.getUserRelatedRoles(\n\t\t\t\t\t\t\tuserId, groups);\n\n\t\t\t\t\troles.addAll(userRelatedRoles);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\troles.addAll(RoleLocalServiceUtil.getUserRoles(userId));\n\t\t\t\t}\n\n\t\t\t\tList<Role> userGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupRoles(userId, groupId);\n\n\t\t\t\troles.addAll(userGroupRoles);\n\n\t\t\t\tList<Role> userGroupGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupGroupRoles(\n\t\t\t\t\t\tuserId, groupId);\n\n\t\t\t\troles.addAll(userGroupGroupRoles);\n\n\t\t\t\tif (!userGroups.isEmpty()) {\n\t\t\t\t\tGroup group = userGroups.get(0);\n\n\t\t\t\t\taddRequiredMemberRole(group, roles);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\troles = new ArrayList<Role>();\n\t\t\t}\n\n\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\tuserId, userGroups, userOrgs, userOrgGroups,\n\t\t\t\tuserUserGroupGroups, groups, roles);\n\n\t\t\treturn bag;\n\t\t}\n\t\tfinally {\n\t\t\tif (bag == null) {\n\t\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\t\tuserId, new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Organization>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Group>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Role>());\n\t\t\t}\n\n\t\t\tPermissionCacheUtil.putBag(userId, groupId, bag);\n\t\t}\n\t}","id":21804,"modified_method":"public PermissionCheckerBag getUserBag(long userId, long groupId)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = PermissionCacheUtil.getBag(userId, groupId);\n\n\t\tif (bag != null) {\n\t\t\treturn bag;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// If we are checking permissions on an object that belongs to a\n\t\t\t// community, then it's only necessary to check the group that\n\t\t\t// represents the community and not all the groups that the user\n\t\t\t// belongs to. This is so because an object cannot belong to\n\t\t\t// more than one community.\n\n\t\t\tList<Group> userGroups = new ArrayList<Group>();\n\t\t\t//List<Group> userGroups = UserUtil.getGroups(userId);\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\t\tuserGroups.add(group);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Organization> userOrgs = getUserOrgs(userId);\n\n\t\t\tList<Group> userOrgGroups =\n\t\t\t\tGroupLocalServiceUtil.getOrganizationsGroups(userOrgs);\n\n\t\t\tList<UserGroup> userUserGroups =\n\t\t\t\tUserGroupLocalServiceUtil.getUserUserGroups(userId);\n\n\t\t\tList<Group> userUserGroupGroups =\n\t\t\t\tGroupLocalServiceUtil.getUserGroupsGroups(userUserGroups);\n\n\t\t\tList<Group> groups = new ArrayList<Group>(\n\t\t\t\tuserGroups.size() + userOrgGroups.size() +\n\t\t\t\t\tuserUserGroupGroups.size());\n\n\t\t\tgroups.addAll(userGroups);\n\t\t\tgroups.addAll(userOrgGroups);\n\t\t\tgroups.addAll(userUserGroupGroups);\n\n\t\t\tList<Role> roles = new UniqueList<Role>();\n\n\t\t\tif ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 3) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 4) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) ||\n\t\t\t\t(PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6)) {\n\n\t\t\t\tif (groups.size() > 0) {\n\t\t\t\t\tList<Role> userRelatedRoles=\n\t\t\t\t\t\tRoleLocalServiceUtil.getUserRelatedRoles(\n\t\t\t\t\t\t\tuserId, groups);\n\n\t\t\t\t\troles.addAll(userRelatedRoles);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\troles.addAll(RoleLocalServiceUtil.getUserRoles(userId));\n\t\t\t\t}\n\n\t\t\t\tList<Role> userGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupRoles(userId, groupId);\n\n\t\t\t\troles.addAll(userGroupRoles);\n\n\t\t\t\tList<Role> userGroupGroupRoles =\n\t\t\t\t\tRoleLocalServiceUtil.getUserGroupGroupRoles(\n\t\t\t\t\t\tuserId, groupId);\n\n\t\t\t\troles.addAll(userGroupGroupRoles);\n\n\t\t\t\tif (!userGroups.isEmpty()) {\n\t\t\t\t\tGroup group = userGroups.get(0);\n\n\t\t\t\t\taddRequiredMemberRole(group, roles);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\troles = new ArrayList<Role>();\n\t\t\t}\n\n\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\tuserId, userGroups, userOrgs, userOrgGroups,\n\t\t\t\tuserUserGroupGroups, groups, roles);\n\n\t\t\treturn bag;\n\t\t}\n\t\tfinally {\n\t\t\tif (bag == null) {\n\t\t\t\tbag = new PermissionCheckerBagImpl(\n\t\t\t\t\tuserId, new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Organization>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Group>(), new ArrayList<Group>(),\n\t\t\t\t\tnew ArrayList<Role>());\n\t\t\t}\n\n\t\t\tPermissionCacheUtil.putBag(userId, groupId, bag);\n\t\t}\n\t}","commit_id":"78014e3ed3ded019ea95d4d8ac8bfebb5f8b04ad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Query doGetPermissionQuery_6(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tList<Role> roles = RoleLocalServiceUtil.getUserRoles(userId);\n\n\t\troles = ListUtil.copy(roles);\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId, groupId);\n\n\t\t\tuserGroupRoles = ListUtil.copy(userGroupRoles);\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (ResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\t\tString.valueOf(companyId), roleId, ActionKeys.VIEW) ||\n\t\t\t\tResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\t\tString.valueOf(groupId), roleId, ActionKeys.VIEW)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, roleId);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","id":21805,"modified_method":"protected Query doGetPermissionQuery_6(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = getUserBag(userId);\n\n\t\tif (bag == null) {\n\t\t\treturn query;\n\t\t}\n\n\t\tList<Group> groups = new ArrayList<Group>();\n\t\tList<Role> roles = bag.getRoles();\n\t\tList<UserGroupRole> userGroupRoles = new ArrayList<UserGroupRole>();\n\n\t\tif (groupId == 0) {\n\t\t\tgroups.addAll(GroupLocalServiceUtil.getUserGroups(userId, true));\n\t\t\tgroups.addAll(bag.getGroups());\n\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\tgroups.add(group);\n\t\t\t}\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\t\tuserId, groupId));\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (ResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\t\tString.valueOf(companyId), roleId, ActionKeys.VIEW) ||\n\t\t\t\tResourcePermissionLocalServiceUtil.hasResourcePermission(\n\t\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\t\tString.valueOf(groupId), roleId, ActionKeys.VIEW)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, roleId);\n\t\t}\n\n\t\tfor (Group group : groups) {\n\t\t\taddRequiredMemberRole(group, permissionQuery);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","commit_id":"78014e3ed3ded019ea95d4d8ac8bfebb5f8b04ad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Query doGetPermissionQuery_5(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tList<Role> roles = RoleLocalServiceUtil.getUserRoles(userId);\n\n\t\troles = ListUtil.copy(roles);\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif (groupId == 0) {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId, groupId);\n\n\t\t\tuserGroupRoles = ListUtil.copy(userGroupRoles);\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tlong companyResourceId = 0;\n\n\t\ttry {\n\t\t\tResource companyResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\tString.valueOf(companyId));\n\n\t\t\tcompanyResourceId = companyResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tlong groupResourceId = 0;\n\n\t\ttry {\n\t\t\tResource groupResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\tString.valueOf(groupId));\n\n\t\t\tgroupResourceId = groupResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (hasPermission(roleId, companyResourceId) ||\n\t\t\t\thasPermission(roleId, groupResourceId)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, role.getRoleId());\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","id":21806,"modified_method":"protected Query doGetPermissionQuery_5(\n\t\t\tlong companyId, long groupId, long userId, String className,\n\t\t\tQuery query)\n\t\tthrows Exception {\n\n\t\tPermissionCheckerBag bag = getUserBag(userId);\n\n\t\tList<Group> groups = new ArrayList<Group>();\n\t\tList<Role> roles = bag.getRoles();\n\t\tList<UserGroupRole> userGroupRoles = new ArrayList<UserGroupRole>();\n\n\t\tif (groupId == 0) {\n\t\t\tgroups.addAll(\n\t\t\t\tGroupLocalServiceUtil.getUserGroups(userId, true));\n\t\t\tgroups.addAll(bag.getGroups());\n\n\t\t\tuserGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\tuserId);\n\t\t}\n\t\telse {\n\t\t\tif (GroupLocalServiceUtil.hasUserGroup(userId, groupId)) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\t\t\tgroups.add(group);\n\t\t\t}\n\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.getUserGroupRoles(\n\t\t\t\t\tuserId, groupId));\n\t\t\tuserGroupRoles.addAll(\n\t\t\t\tUserGroupRoleLocalServiceUtil.\n\t\t\t\t\tgetUserGroupRolesByUserUserGroupAndGroup(userId, groupId));\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tif (defaultUserId != userId) {\n\t\t\troles.add(\n\t\t\t\tRoleLocalServiceUtil.getRole(companyId, RoleConstants.GUEST));\n\t\t}\n\n\t\tlong companyResourceId = 0;\n\n\t\ttry {\n\t\t\tResource companyResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_COMPANY,\n\t\t\t\tString.valueOf(companyId));\n\n\t\t\tcompanyResourceId = companyResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tlong groupResourceId = 0;\n\n\t\ttry {\n\t\t\tResource groupResource = ResourceLocalServiceUtil.getResource(\n\t\t\t\tcompanyId, className, ResourceConstants.SCOPE_GROUP,\n\t\t\t\tString.valueOf(groupId));\n\n\t\t\tgroupResourceId = groupResource.getResourceId();\n\t\t}\n\t\tcatch (NoSuchResourceException nsre) {\n\t\t}\n\n\t\tBooleanQuery permissionQuery = BooleanQueryFactoryUtil.create();\n\n\t\tfor (Role role : roles) {\n\t\t\tif (role.getName().equals(RoleConstants.ADMINISTRATOR)) {\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tlong roleId = role.getRoleId();\n\n\t\t\tif (hasPermission(roleId, companyResourceId) ||\n\t\t\t\thasPermission(roleId, groupResourceId)) {\n\n\t\t\t\treturn query;\n\t\t\t}\n\n\t\t\tpermissionQuery.addTerm(Field.ROLE_ID, role.getRoleId());\n\t\t}\n\n\t\tfor (Group group : groups) {\n\t\t\taddRequiredMemberRole(group, permissionQuery);\n\t\t}\n\n\t\tfor (UserGroupRole userGroupRole : userGroupRoles) {\n\t\t\tpermissionQuery.addTerm(\n\t\t\t\tField.GROUP_ROLE_ID,\n\t\t\t\tuserGroupRole.getGroupId() + StringPool.DASH +\n\t\t\t\t\tuserGroupRole.getRoleId());\n\t\t}\n\n\t\tBooleanQuery fullQuery = BooleanQueryFactoryUtil.create();\n\n\t\tfullQuery.add(query, BooleanClauseOccur.MUST);\n\t\tfullQuery.add(permissionQuery, BooleanClauseOccur.MUST);\n\n\t\treturn fullQuery;\n\t}","commit_id":"78014e3ed3ded019ea95d4d8ac8bfebb5f8b04ad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testGenericQueries() throws Exception {\n\t\tECrossReferenceDescriptor.Query query = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().source(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery.source(eObjectDescriptor).referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().name(EOBJECT_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().fragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass(eClassDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().name(ECLASS_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().ePackage(ePackageDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().ePackage().nsURI(EPACKAGE_NS_URI);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().target(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery.target(eObjectDescriptor).referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().name(EOBJECT_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().fragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass(eClassDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().name(ECLASS_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().ePackage(ePackageDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().ePackage().nsURI(EPACKAGE_NS_URI);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t}","id":21807,"modified_method":"public void testGenericQueries() throws Exception {\n\t\tECrossReferenceDescriptor.Query query = indexStore.eCrossReferenceDAO().createQuery().referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().sourceFragment(eObjectDescriptor.getFragment())\n\t\t\t\t.sourceResource(resourceDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery.sourceFragment(eObjectDescriptor.getFragment()).sourceResource(resourceDescriptor).referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.sourceFragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().targetFragment(eObjectDescriptor.getFragment())\n\t\t\t\t.targetResource(resourceDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery.targetFragment(eObjectDescriptor.getFragment()).targetResource(resourceDescriptor).referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.targetFragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testNonGenericQueries() {\n\t\tIGenericQuery<ECrossReferenceDescriptor> query = indexStore.eCrossReferenceDAO().createQueryCrossReference(eObjectDescriptor, eReference);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesFrom(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObject);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t}","id":21808,"modified_method":"public void testNonGenericQueries() {\n\t\tIGenericQuery<ECrossReferenceDescriptor> query = indexStore.eCrossReferenceDAO()\n\t\t\t\t.createQueryCrossReferencesFrom(eObjectDescriptor.getFragmentURI());\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObjectDescriptor.getFragmentURI());\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObject);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void resourceChanged(URI resourceURI, IIndexStore store, IndexFeeder feeder) {\n\t\tResource resource = loadResource(resourceURI);\n\t\tif (resource != null) {\n\t\t\tfeeder.createResourceDescriptor(resource, getResourceUserData(resource));\n\t\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(resource, false); i.hasNext();) {\n\t\t\t\tEObject element = i.next();\n\t\t\t\tif (isIndexElement(element)) {\n\t\t\t\t\tfeeder.createEObjectDescriptor(element, getEObjectName(element), getEObjectDisplayName(element),\n\t\t\t\t\t\t\tgetEObjectUserData(element));\n\t\t\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\n\t\t\t\t\t\tif (isIndexReference(eReference, element)) {\n\t\t\t\t\t\t\tfeeder.createECrossReferenceDescriptor(element, eReference);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21809,"modified_method":"public void resourceChanged(URI resourceURI, IIndexStore store, IndexFeeder feeder) {\n\t\tResource resource = loadResource(resourceURI);\n\t\tif (resource != null) {\n\t\t\tfeeder.createResourceDescriptor(resource, getResourceUserData(resource));\n\t\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(resource, false); i.hasNext();) {\n\t\t\t\tEObject element = i.next();\n\t\t\t\tif (isIndexElement(element)) {\n\t\t\t\t\tfeeder.createEObjectDescriptor(element, getEObjectName(element), getEObjectDisplayName(element),\n\t\t\t\t\t\t\tgetEObjectUserData(element));\n\t\t\t\t\tURI sourceURI = EcoreUtil.getURI(element);\n\t\t\t\t\tif (sourceURI != null) {\n\t\t\t\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\n\t\t\t\t\t\t\tString eReferenceName = eReference.getName();\n\t\t\t\t\t\t\tif (isIndexReference(eReference, element)) {\n\t\t\t\t\t\t\t\tif (eReference.isMany()) {\n\t\t\t\t\t\t\t\t\tList<?> targets = (List<?>) ((InternalEObject) element).eGet(eReference, false);\n\t\t\t\t\t\t\t\t\tfor (int index = 0; index < targets.size(); ++index) {\n\t\t\t\t\t\t\t\t\t\tObject target = targets.get(index);\n\t\t\t\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName, index,\n\t\t\t\t\t\t\t\t\t\t\t\ttarget);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tObject target = ((InternalEObject) element).eGet(eReference, false);\n\t\t\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName,\n\t\t\t\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX, target);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\tECrossReferenceDescriptor.DAO dao, EObjectDescriptor sourceDescriptor) {\n\t\treturn dao.createQuery().source(sourceDescriptor);\n\t}","id":21810,"modified_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\tECrossReferenceDescriptor.DAO dao, URI sourceURI) {\n\t\tQuery query = dao.createQuery().sourceFragment(sourceURI.fragment());\n\t\tquery.sourceResource().uri(sourceURI.trimFragment().toString());\n\t\treturn query;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public static ECrossReferenceDescriptor.Query createQueryECrossReferencesTo(ECrossReferenceDescriptor.DAO dao,\n\t\t\tEObject target) {\n\t\tResource resource = target.eResource();\n\t\tif (resource != null) {\n\t\t\tURI resourceURI = resource.getURI();\n\t\t\tif (resourceURI != null) {\n\t\t\t\tString fragment = resource.getURIFragment(target);\n\t\t\t\tQuery crossRefQuery = dao.createQuery();\n\t\t\t\tcrossRefQuery.target().fragment(fragment).resource().uri(resourceURI.toString());\n\t\t\t\treturn crossRefQuery;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":21811,"modified_method":"public static ECrossReferenceDescriptor.Query createQueryECrossReferencesTo(ECrossReferenceDescriptor.DAO dao,\n\t\t\tEObject target) {\n\t\tResource resource = target.eResource();\n\t\tif(resource != null) {\n\t\t\tString targetFragment = resource.getURIFragment(target);\n\t\t\tif(targetFragment != null) {\n\t\t\t\tQuery crossRefQuery = dao.createQuery().targetFragment(targetFragment);\n\t\t\t\tcrossRefQuery.targetResource().uri(resource.getURI().toString());\n\t\t\t\treturn crossRefQuery;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\tECrossReferenceDescriptor.DAO dao, EObjectDescriptor targetDescriptor) {\n\t\treturn dao.createQuery().target(targetDescriptor);\n\t}","id":21812,"modified_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\tECrossReferenceDescriptor.DAO dao, URI targetURI) {\n\t\tQuery query = dao.createQuery().targetFragment(targetURI.fragment());\n\t\tquery.targetResource().uri(targetURI.trimFragment().toString());\n\t\treturn query;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDAOImpl(IIndexStore indexStore) {\n\t\tsuper(indexStore);\n\t\tsourceScope = new InverseReferenceCache<EObjectDescriptor, ECrossReferenceDescriptor>() {\n\t\t\t@Override\n\t\t\tprotected List<EObjectDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getSource());\n\t\t\t}\n\t\t};\n\t\ttargetScope = new InverseReferenceCache<EObjectDescriptor, ECrossReferenceDescriptor>() {\n\t\t\t@Override\n\t\t\tprotected List<EObjectDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getTarget());\n\t\t\t}\n\t\t};\n\t}","id":21813,"modified_method":"public ECrossReferenceDAOImpl(IIndexStore indexStore) {\n\t\tsuper(indexStore);\n\t\tsourceResourceScope = new InverseReferenceCache<ResourceDescriptor, ECrossReferenceDescriptor>(){\n\t\t\t@Override\n\t\t\tprotected List<ResourceDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getSourceResourceDescriptor());\n\t\t\t}\n\t\t};\n\t\ttargetResourceScope = new InverseReferenceCache<ResourceDescriptor, ECrossReferenceDescriptor>(){\n\t\t\t@Override\n\t\t\tprotected List<ResourceDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getTargetResourceDescriptor());\n\t\t\t}\n\t\t};\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public CrossRefQuery target(EObjectDescriptor targetDescriptor) {\n\t\t\tif (targetQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"TargetQuery already configured\");\n\t\t\t}\n\t\t\tthis.targetDescriptor = targetDescriptor;\n\t\t\treturn this;\n\t\t}","id":21814,"modified_method":"public CrossRefQuery targetResource(ResourceDescriptor targetResourceDescriptor) {\n\t\t\tif(targetResourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"TargetQuery already configured\");\t\t\t\t\n\t\t\t}\n\t\t\tthis.targetResourceDescriptor = targetResourceDescriptor;\n\t\t\treturn this;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public CrossRefQuery source(EObjectDescriptor sourceDescriptor) {\n\t\t\tif (sourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tthis.sourceDescriptor = sourceDescriptor;\n\t\t\treturn this;\n\t\t}","id":21815,"modified_method":"public CrossRefQuery sourceResource(ResourceDescriptor sourceResourceDescriptor) {\n\t\t\tif(sourceResourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\t\t\t\t\n\t\t\t}\n\t\t\tthis.sourceResourceDescriptor = sourceResourceDescriptor;\n\t\t\treturn this;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void store(ECrossReferenceDescriptor element) {\n\t\tsuper.store(element);\n\t\tsourceScope.put(element);\n\t\ttargetScope.put(element);\n\t}","id":21816,"modified_method":"@Override\n\tpublic void store(ECrossReferenceDescriptor element) {\n\t\tsuper.store(element);\n\t\tsourceResourceScope.put(element);\n\t\ttargetResourceScope.put(element);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void delete(ECrossReferenceDescriptor element) {\n\t\tsuper.delete(element);\n\t\tsourceScope.remove(element);\n\t\ttargetScope.remove(element);\n\t}","id":21817,"modified_method":"@Override\n\tpublic void delete(ECrossReferenceDescriptor element) {\n\t\tsuper.delete(element);\n\t\tsourceResourceScope.remove(element);\n\t\ttargetResourceScope.remove(element);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\treturn DefaultQueryTool.createQueryECrossReferencesTo(this, target);\n\t}","id":21818,"modified_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(URI sourceURI) {\n\t\treturn DefaultQueryTool.createQueryCrossReferencesFrom(this, sourceURI);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean matches(ECrossReferenceDescriptor crossRefDescriptor) {\n\t\t\treturn matchesGlobbing(crossRefDescriptor.getReferenceName(), referenceNamePattern);\n\t\t}","id":21819,"modified_method":"protected boolean matches(ECrossReferenceDescriptor crossRefDescriptor) {\n\t\t\treturn matchesGlobbing(crossRefDescriptor.getReferenceName(), referenceNamePattern)\n\t\t\t\t\t&& matchesGlobbing(crossRefDescriptor.getSourceFragment(), sourceFragmentPattern)\n\t\t\t\t\t&& matchesGlobbing(crossRefDescriptor.getTargetFragment(), targetFragmentPattern)\n\t\t\t\t\t&& (index != ECrossReferenceDescriptor.NO_INDEX && index == crossRefDescriptor.getIndex());\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\t\tprotected Collection<ECrossReferenceDescriptor> scope() {\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesBySource = sourceScope.lookup(sourceDescriptor, sourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesByTarget = targetScope.lookup(targetDescriptor, targetQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> mergedScopes = mergeScopes(eCrossReferencesBySource, eCrossReferencesByTarget);\n\t\t\treturn mergedScopes == null ? super.scope() : mergedScopes;\n\t\t}","id":21820,"modified_method":"@Override\n\t\tprotected Collection<ECrossReferenceDescriptor> scope() {\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesBySourceResource = sourceResourceScope.lookup(sourceResourceDescriptor, sourceResourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesByTargetResource = targetResourceScope.lookup(targetResourceDescriptor, targetResourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> mergedScopes = mergeScopes(eCrossReferencesBySourceResource,\n\t\t\t\t\teCrossReferencesByTargetResource);\n\t\t\treturn mergedScopes == null ? super.scope() : mergedScopes;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor.Query source() {\n\t\t\tif (sourceDescriptor != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tsourceQuery = indexStore.eObjectDAO().createQuery();\n\t\t\treturn sourceQuery;\n\t\t}","id":21821,"modified_method":"public ResourceDescriptor.Query sourceResource() {\n\t\t\tif (sourceResourceDescriptor != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tsourceResourceQuery = indexStore.resourceDAO().createQuery();\n\t\t\treturn sourceResourceQuery;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(EObjectDescriptor sourceDescriptor) {\n\t\treturn sourceScope.createQuery(sourceDescriptor);\n\t}","id":21822,"modified_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(URI targetURI) {\n\t\treturn DefaultQueryTool.createQueryCrossReferencesTo(this, targetURI);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic int hashCode() {\n\t\treturn referenceName.hashCode() + 31 * source.hashCode() + 67 * target.hashCode();\n\t}","id":21823,"modified_method":"@Override\n\tpublic int hashCode() {\n\t\treturn referenceName.hashCode() + 7 * sourceFragment.hashCode() + 31 * targetFragment.hashCode() +\n\t\t\t53 * sourceResourceDescriptor.hashCode() + 89 * targetResourceDescriptor.hashCode();\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ECrossReferenceDescriptor) {\n\t\t\tECrossReferenceDescriptor crossRef = (ECrossReferenceDescriptor) obj;\n\t\t\treturn crossRef.hashCode() == hashCode() && this.source.equals(crossRef.getSource())\n\t\t\t\t\t&& this.referenceName.equals(crossRef.getReferenceName())\n\t\t\t\t\t&& this.target.equals(crossRef.getTarget());\n\t\t}\n\t\treturn false;\n\t}","id":21824,"modified_method":"@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ECrossReferenceDescriptor) {\n\t\t\tECrossReferenceDescriptor crossRef = (ECrossReferenceDescriptor) obj;\n\t\t\treturn crossRef.hashCode() == hashCode() \n\t\t\t\t&& this.sourceFragment.equals(crossRef.getSourceFragment())\n\t\t\t\t&& this.targetFragment.equals(crossRef.getTargetFragment())\n\t\t\t\t&& this.sourceResourceDescriptor.equals(crossRef.getSourceResourceDescriptor())\n\t\t\t\t&& this.targetResourceDescriptor.equals(crossRef.getTargetResourceDescriptor())\n\t\t\t\t&& this.referenceName.equals(crossRef.getReferenceName())\n\t\t\t\t&& this.index == crossRef.getIndex();\n\t\t}\n\t\treturn false;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic String toString() {\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"(\");\n\t\tb.append(source);\n\t\tb.append(\" --\");\n\t\tb.append(referenceName);\n\t\tb.append(\"--> \");\n\t\tb.append(target);\n\t\tb.append(\")\");\n\t\treturn b.toString();\n\t}","id":21825,"modified_method":"@Override\n\tpublic String toString() {\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"(\");\n\t\tb.append(sourceResourceDescriptor.getURI());\n\t\tb.append(\"#\");\n\t\tb.append(sourceFragment);\n\t\tb.append(\" --\");\n\t\tb.append(referenceName);\n\t\tb.append(\"--> \");\n\t\tb.append(targetResourceDescriptor.getURI());\n\t\tb.append(\"#\");\n\t\tb.append(targetFragment);\n\t\tb.append(\")\");\n\t\treturn b.toString();\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptorImpl(EObjectDescriptor source, String referenceName, EObjectDescriptor target, int index) {\n\t\tsuper();\n\t\tthis.source = source;\n\t\tthis.referenceName = referenceName;\n\t\tthis.target = target;\n\t\tthis.index = index;\n\t}","id":21826,"modified_method":"public ECrossReferenceDescriptorImpl(ResourceDescriptor sourceResourceDescriptor, String sourceFragment,\n\t\t\tString referenceName, int index, ResourceDescriptor targetResourceDescriptor, String targetFragment) {\n\t\tsuper();\n\t\tthis.sourceResourceDescriptor = sourceResourceDescriptor;\n\t\tthis.sourceFragment = sourceFragment;\n\t\tthis.referenceName = referenceName;\n\t\tthis.targetResourceDescriptor = targetResourceDescriptor;\n\t\tthis.targetFragment = targetFragment;\n\t\tthis.index = index;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptorImpl(EObjectDescriptor source, String referenceName, EObjectDescriptor target) {\n\t\tthis(source, referenceName, target, NO_INDEX);\n\t}","id":21827,"modified_method":"public ECrossReferenceDescriptorImpl(ResourceDescriptor sourceResourceDescriptor, String sourceFragment,\n\t\t\tString referenceName, ResourceDescriptor targetResourceDescriptor, String targetFragment) {\n\t\tthis(sourceResourceDescriptor, sourceFragment, referenceName, NO_INDEX, targetResourceDescriptor, targetFragment);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor getSource() {\n\t\treturn source;\n\t}","id":21828,"modified_method":"public URI getSourceURI() {\n\t\treturn URI.createURI(sourceResourceDescriptor.getURI() + \"#\" + sourceFragment);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor getTarget() {\n\t\treturn target;\n\t}","id":21829,"modified_method":"public URI getTargetURI() {\n\t\treturn URI.createURI(targetResourceDescriptor.getURI() + \"#\" + targetFragment);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"private void commitECrossReferenceDescriptors() {\n\t\tfor (EObject source : crossRefDataCache.keySet()) {\n\t\t\tEObjectDescriptor sourceDesc = findEObjectDescriptor(source);\n\t\t\tif (sourceDesc != null) {\n\t\t\t\tfor (ECrossReferenceData data : crossRefDataCache.get(source)) {\n\t\t\t\t\tif (data.eReference.isMany()) {\n\t\t\t\t\t\tList<?> targetList = (List<?>) source.eGet(data.eReference);\n\t\t\t\t\t\tfor (int i = 0; i < targetList.size(); ++i) {\n\t\t\t\t\t\t\tindexECrossReference(sourceDesc, data.eReference, targetList.get(i), i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tindexECrossReference(sourceDesc, data.eReference, source.eGet(data.eReference),\n\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21830,"modified_method":"private void commitECrossReferenceDescriptors() {\n\t\tfor (ECrossReferenceData data : crossRefCache) {\n\t\t\tResourceDescriptor sourceResourceDescriptor = findResourceDescriptor(data.sourceURI.trimFragment());\n\t\t\tResourceDescriptor targetResourceDescriptor = findResourceDescriptor(data.targetURI.trimFragment());\n\t\t\tECrossReferenceDescriptor eCrossReferenceDesc = new ECrossReferenceDescriptorImpl(sourceResourceDescriptor,\n\t\t\t\t\tdata.sourceURI.fragment(), data.eReferenceName, data.index, targetResourceDescriptor,\n\t\t\t\t\tdata.targetURI.fragment());\n\t\t\tif (!allExistingECrossRefDescs.remove(eCrossReferenceDesc)) {\n\t\t\t\tindex.eCrossReferenceDAO().store(eCrossReferenceDesc);\n\t\t\t}\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"private void clearAllCaches() {\n\t\tresourceDataCache.clear();\n\t\teObjectDataCache.clear();\n\t\tcrossRefDataCache.clear();\n\n\t\tresourceDescCache.clear();\n\t\tresourceDescCacheUri.clear();\n\t\teObjectDescCache.clear();\n\t\tallExistingEObjectDescs.clear();\n\t\tallExistingECrossRefDescs.clear();\n\t}","id":21831,"modified_method":"private void clearAllCaches() {\n\t\tresourceDataCache.clear();\n\t\teObjectDataCache.clear();\n\t\tcrossRefCache.clear();\n\t\tresourceDescCacheUri.clear();\n\t\teObjectDescCache.clear();\n\t\tallExistingEObjectDescs.clear();\n\t\tallExistingECrossRefDescs.clear();\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"private\tResourceDescriptor findResourceDescriptor(URI uri) {\n\t\t\n\t\treturn resourceDescCacheUri.get(uri);\n\t}","id":21832,"modified_method":"private ResourceDescriptor findResourceDescriptor(URI uri) {\n\t\tResourceDescriptor resourceDescriptor = resourceDescCacheUri.get(uri);\n\t\tif (resourceDescriptor == null) {\n\t\t\tString uriAsString = uri.toString();\n\t\t\tresourceDescriptor = index.resourceDAO().createQuery().uri(uriAsString).executeSingleResult();\n\t\t\tif (resourceDescriptor == null) {\n\t\t\t\tresourceDescriptor = new ResourceDescriptorImpl(uriAsString, ResourceDescriptor.NEVER,\n\t\t\t\t\t\tnull);\n\t\t\t\tindex.resourceDAO().store(resourceDescriptor);\n\t\t\t}\n\t\t}\n\t\treturn resourceDescriptor;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"private void putResourceDescriptor(Resource resource, ResourceDescriptor resourceDescriptor ) {\n\t\tresourceDescCache.put(resource, resourceDescriptor);\n\t\tresourceDescCacheUri.put(resource.getURI(), resourceDescriptor);\n\t}","id":21833,"modified_method":"private void putResourceDescriptor(Resource resource, ResourceDescriptor resourceDescriptor) {\n\t\tresourceDescCacheUri.put(resource.getURI(), resourceDescriptor);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"private void commitEObjectDescriptors() {\n\t\tfor (Entry<EObject, EObjectData> eObjectEntry : eObjectDataCache.entrySet()) {\n\t\t\tEObject eObject = eObjectEntry.getKey();\n\t\t\tEObjectData data = eObjectEntry.getValue();\n\t\t\tResource resource = eObject.eResource();\n\t\t\tResourceDescriptor resourceDesc = null;\n\t\t\t\n\t\t\tif ( /* resource has not been unloaded */ resource != null ) {\n\t\t\t\tresourceDesc = findResourceDescriptor(resource);\n\t\t\t} else /* resource unloaded, use URI */ {\n\t\t\t\tresourceDesc = findResourceDescriptor( EcoreUtil.getURI(eObject).trimFragment());\n\t\t\t}\n\t\t\tEClassDescriptor eClassDescriptor = index.eClassDAO().createQueryEClass(eObject.eClass())\n\t\t\t\t\t.executeSingleResult();\n\t\t\tEObjectDescriptor newEObjectDesc = new EObjectDescriptorImpl(resourceDesc, data.fragment, data.name,\n\t\t\t\t\tdata.displayName, eClassDescriptor, data.userData);\n\t\t\tEObjectDescriptor existingEObjectDesc = findEquivalent(allExistingEObjectDescs, newEObjectDesc);\n\t\t\tif (existingEObjectDesc != null) {\n\t\t\t\tCollection<ECrossReferenceDescriptor> existingECrossRefDescsFrom = toList(index.eCrossReferenceDAO()\n\t\t\t\t\t\t.createQueryCrossReferencesFrom(existingEObjectDesc).executeListResult());\n\t\t\t\taddAllIfNotNull(allExistingECrossRefDescs, existingECrossRefDescsFrom);\n\t\t\t\tindex.eObjectDAO().modify(existingEObjectDesc, newEObjectDesc);\n\t\t\t\tallExistingEObjectDescs.remove(existingEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, existingEObjectDesc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex.eObjectDAO().store(newEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, newEObjectDesc);\n\t\t\t}\n\t\t}\n\t}","id":21834,"modified_method":"private void commitEObjectDescriptors() {\n\t\tfor (Entry<EObject, EObjectData> eObjectEntry : eObjectDataCache.entrySet()) {\n\t\t\tEObject eObject = eObjectEntry.getKey();\n\t\t\tEObjectData data = eObjectEntry.getValue();\n\t\t\tResource resource = eObject.eResource();\n\t\t\tResourceDescriptor resourceDesc = null;\n\n\t\t\tif (resource != null) {\n\t\t\t\tresourceDesc = findResourceDescriptor(resource.getURI());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresourceDesc = findResourceDescriptor(EcoreUtil.getURI(eObject).trimFragment());\n\t\t\t}\n\t\t\tEClassDescriptor eClassDescriptor = index.eClassDAO().createQueryEClass(eObject.eClass())\n\t\t\t\t\t.executeSingleResult();\n\t\t\tEObjectDescriptor newEObjectDesc = new EObjectDescriptorImpl(resourceDesc, data.fragment, data.name,\n\t\t\t\t\tdata.displayName, eClassDescriptor, data.userData);\n\t\t\tEObjectDescriptor existingEObjectDesc = findEquivalent(allExistingEObjectDescs, newEObjectDesc);\n\t\t\tif (existingEObjectDesc != null) {\n\t\t\t\tCollection<ECrossReferenceDescriptor> existingECrossRefDescsFrom = toList(index.eCrossReferenceDAO()\n\t\t\t\t\t\t.createQueryCrossReferencesFrom(existingEObjectDesc.getFragmentURI()).executeListResult());\n\t\t\t\taddAllIfNotNull(allExistingECrossRefDescs, existingECrossRefDescsFrom);\n\t\t\t\tindex.eObjectDAO().modify(existingEObjectDesc, newEObjectDesc);\n\t\t\t\tallExistingEObjectDescs.remove(existingEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, existingEObjectDesc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex.eObjectDAO().store(newEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, newEObjectDesc);\n\t\t\t}\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void createECrossReferenceDescriptor(EObject owner, EReference eReference) {\n\t\tassertTransactionStarted();\n\t\tResource eResource = owner.eResource();\n\t\tif (eResource != null) {\n\t\t\tECrossReferenceData eCrossReferenceData = new ECrossReferenceData();\n\t\t\teCrossReferenceData.eReference = eReference;\n\t\t\tcrossRefDataCache.put(owner, eCrossReferenceData);\n\t\t}\n\t}","id":21835,"modified_method":"public void createECrossReferenceDescriptor(URI sourceURI, String eReferenceName, int index, URI targetURI) {\n\t\tassertTransactionStarted();\n\t\tif (sourceURI != null && eReferenceName != null && targetURI != null) {\n\t\t\tECrossReferenceData eCrossReferenceData = new ECrossReferenceData();\n\t\t\teCrossReferenceData.sourceURI = sourceURI;\n\t\t\teCrossReferenceData.targetURI = targetURI;\n\t\t\teCrossReferenceData.eReferenceName = eReferenceName;\n\t\t\teCrossReferenceData.index = index;\n\t\t\tcrossRefCache.add(eCrossReferenceData);\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testIntegration() throws Exception {\n\t\tecoreFeeder.index(EcorePackage.eINSTANCE, true);\n\t\tindexExampleResource();\n\t\tIterable<EObjectDescriptor> elementResult = index.eObjectDAO().createQuery().name(\"Entity\").executeListResult();\n\t\tassertNotNull(elementResult);\n\t\tIterator<EObjectDescriptor> eObjectIterator = elementResult.iterator();\n\t\tEObjectDescriptor elementDescriptor = eObjectIterator.next();\n\t\tassertFalse(eObjectIterator.hasNext());\n\t\tEObject entityClass = resourceSet.getEObject(elementDescriptor.getFragmentURI(), true);\n\t\tassertNotNull(entityClass);\n\t\tassertTrue(entityClass instanceof EClass);\n\t\tassertEquals(\"Entity\", ((EClass) entityClass).getName());\n\n\t\tEClassDescriptor typeDescriptor = elementDescriptor.getEClassDescriptor();\n\t\tassertNotNull(typeDescriptor);\n\t\tIterable<EClassDescriptor> typeResult = index.eClassDAO().createQuery().name(\"EClass\").executeListResult();\n\t\tassertNotNull(typeResult);\n\t\tIterator<EClassDescriptor> eClassIterator = typeResult.iterator();\n\t\tEClassDescriptor typeDescriptor0 = eClassIterator.next();\n\t\tassertFalse(eClassIterator.hasNext());\n\t\tassertEquals(typeDescriptor, typeDescriptor0);\n\t\tEClassDescriptor[] superClasses = typeDescriptor0.getSuperClasses();\n\t\tassertNotNull(superClasses);\n\t\t// four super classes: EClassifier, ENamedElement, EModelElement and\n\t\t// EObject\n\t\tassertEquals(4, superClasses.length);\n\n\t\tQuery crossRefQuery = index.eCrossReferenceDAO().createQuery();\n\t\tcrossRefQuery.target().name(\"Feature\");\n\t\tIterable<ECrossReferenceDescriptor> crossRefDescriptors = crossRefQuery.executeListResult();\n\t\tassertNotNull(crossRefDescriptors);\n\t\tassertTrue(crossRefDescriptors.iterator().hasNext());\n\t\tfor (ECrossReferenceDescriptor crossRefDescriptor : crossRefDescriptors) {\n\t\t\tEObject source = resourceSet.getEObject(crossRefDescriptor.getSource().getFragmentURI(), false);\n\t\t\tassertNotNull(source);\n\t\t\tEObject target = resourceSet.getEObject(crossRefDescriptor.getTarget().getFragmentURI(), false);\n\t\t\tEStructuralFeature structuralFeature = source.eClass().getEStructuralFeature(\n\t\t\t\t\tcrossRefDescriptor.getReferenceName());\n\t\t\tassertTrue(structuralFeature instanceof EReference);\n\t\t\tif (structuralFeature.isMany()) {\n\t\t\t\tassertTrue(((List<?>) source.eGet(structuralFeature)).contains(target));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tassertEquals(target, source.eGet(structuralFeature));\n\t\t\t}\n\t\t}\n\n\t\torg.eclipse.emf.index.EObjectDescriptor.Query objectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass().name(\"EClassifier\").ePackage().nsURI(EcorePackage.eNS_URI);\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\n\t\tobjectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass(index.eClassDAO().createQueryEClass(EcorePackage.eINSTANCE.getEClassifier()).executeSingleResult());\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\t}","id":21836,"modified_method":"public void testIntegration() throws Exception {\n\t\tecoreFeeder.index(EcorePackage.eINSTANCE, true);\n\t\tindexExampleResource();\n\t\tIterable<EObjectDescriptor> elementResult = index.eObjectDAO().createQuery().name(\"Entity\").executeListResult();\n\t\tassertNotNull(elementResult);\n\t\tIterator<EObjectDescriptor> eObjectIterator = elementResult.iterator();\n\t\tEObjectDescriptor elementDescriptor = eObjectIterator.next();\n\t\tassertFalse(eObjectIterator.hasNext());\n\t\tEObject entityClass = resourceSet.getEObject(elementDescriptor.getFragmentURI(), true);\n\t\tassertNotNull(entityClass);\n\t\tassertTrue(entityClass instanceof EClass);\n\t\tassertEquals(\"Entity\", ((EClass) entityClass).getName());\n\n\t\tEClassDescriptor typeDescriptor = elementDescriptor.getEClassDescriptor();\n\t\tassertNotNull(typeDescriptor);\n\t\tIterable<EClassDescriptor> typeResult = index.eClassDAO().createQuery().name(\"EClass\").executeListResult();\n\t\tassertNotNull(typeResult);\n\t\tIterator<EClassDescriptor> eClassIterator = typeResult.iterator();\n\t\tEClassDescriptor typeDescriptor0 = eClassIterator.next();\n\t\tassertFalse(eClassIterator.hasNext());\n\t\tassertEquals(typeDescriptor, typeDescriptor0);\n\t\tEClassDescriptor[] superClasses = typeDescriptor0.getSuperClasses();\n\t\tassertNotNull(superClasses);\n\t\t// four super classes: EClassifier, ENamedElement, EModelElement and\n\t\t// EObject\n\t\tassertEquals(4, superClasses.length);\n\n\t\tQuery crossRefQuery = index.eCrossReferenceDAO().createQuery();\n\t\tcrossRefQuery.targetFragment(\"//Feature\");\n\t\tIterable<ECrossReferenceDescriptor> crossRefDescriptors = crossRefQuery.executeListResult();\n\t\tassertNotNull(crossRefDescriptors);\n\t\tassertTrue(crossRefDescriptors.iterator().hasNext());\n\t\tfor (ECrossReferenceDescriptor crossRefDescriptor : crossRefDescriptors) {\n\t\t\tEObject source = resourceSet.getEObject(crossRefDescriptor.getSourceURI(), false);\n\t\t\tassertNotNull(source);\n\t\t\tEObject target = resourceSet.getEObject(crossRefDescriptor.getTargetURI(), false);\n\t\t\tEStructuralFeature structuralFeature = source.eClass().getEStructuralFeature(\n\t\t\t\t\tcrossRefDescriptor.getReferenceName());\n\t\t\tassertTrue(structuralFeature instanceof EReference);\n\t\t\tif (structuralFeature.isMany()) {\n\t\t\t\tassertTrue(((List<?>) source.eGet(structuralFeature)).contains(target));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tassertEquals(target, source.eGet(structuralFeature));\n\t\t\t}\n\t\t}\n\n\t\torg.eclipse.emf.index.EObjectDescriptor.Query objectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass().name(\"EClassifier\").ePackage().nsURI(EcorePackage.eNS_URI);\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\n\t\tobjectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass(index.eClassDAO().createQueryEClass(EcorePackage.eINSTANCE.getEClassifier()).executeSingleResult());\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public SourceDesc executeSingleResult() {\n\t\t\tCollection<SourceDesc> result = lookup(target);\n\t\t\tif (result != null && !result.isEmpty()) {\n\t\t\t\treturn result.iterator().next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":21837,"modified_method":"public SourceDescType executeSingleResult() {\n\t\t\tCollection<SourceDescType> result = lookup(target);\n\t\t\tif (result != null && !result.isEmpty()) {\n\t\t\t\treturn result.iterator().next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> lookup(TargetDesc parentScopeDescriptor, IGenericQuery<TargetDesc> parentScopeQuery) {\n\t\tCollection<SourceDesc> queryScope = null;\n\t\tboolean isScopeDefined = false;\n\t\tif (parentScopeDescriptor != null) {\n\t\t\tqueryScope = lookup(parentScopeDescriptor);\n\t\t\tisScopeDefined = true;\n\t\t}\n\t\tif (parentScopeQuery != null) {\n\t\t\tisScopeDefined = true;\n\t\t\tIterable<TargetDesc> parentScopes = parentScopeQuery.executeListResult();\n\t\t\tif (parentScopes != null) {\n\t\t\t\tfor (TargetDesc parentScope : parentScopes) {\n\t\t\t\t\tqueryScope = union(queryScope, lookup(parentScope));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (isScopeDefined && queryScope == null) ? Collections.<SourceDesc> emptyList() : queryScope;\n\t}","id":21838,"modified_method":"public Collection<SourceDescType> lookup(TargetType parentScopeDescriptor, IGenericQuery<TargetType> parentScopeQuery) {\n\t\tCollection<SourceDescType> queryScope = null;\n\t\tboolean isScopeDefined = false;\n\t\tif (parentScopeDescriptor != null) {\n\t\t\tqueryScope = lookup(parentScopeDescriptor);\n\t\t\tisScopeDefined = true;\n\t\t}\n\t\tif (parentScopeQuery != null) {\n\t\t\tisScopeDefined = true;\n\t\t\tIterable<TargetType> parentScopes = parentScopeQuery.executeListResult();\n\t\t\tif (parentScopes != null) {\n\t\t\t\tfor (TargetType parentScope : parentScopes) {\n\t\t\t\t\tqueryScope = union(queryScope, lookup(parentScope));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (isScopeDefined && queryScope == null) ? Collections.<SourceDescType> emptyList() : queryScope;\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> lookup(TargetDesc targetDescriptor) {\n\t\treturn resultMap.get(targetDescriptor);\n\t}","id":21839,"modified_method":"public Collection<SourceDescType> lookup(TargetType targetDescriptor) {\n\t\treturn resultMap.get(targetDescriptor);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"protected Query(TargetDesc target) {\n\t\t\tthis.target = target;\n\t\t}","id":21840,"modified_method":"protected Query(TargetType target) {\n\t\t\tthis.target = target;\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<SourceDesc> createQuery(TargetDesc targetDescriptor) {\n\t\treturn new Query(targetDescriptor);\n\t}","id":21841,"modified_method":"public IGenericQuery<SourceDescType> createQuery(TargetType targetDescriptor) {\n\t\treturn new Query(targetDescriptor);\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"protected abstract List<TargetDesc> targets(SourceDesc source);","id":21842,"modified_method":"protected abstract List<TargetType> targets(SourceDescType source);","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void put(SourceDesc sourceDescriptor) {\n\t\tList<TargetDesc> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetDesc targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDesc> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources == null) {\n\t\t\t\tsources = new HashSet<SourceDesc>();\n\t\t\t\tresultMap.put(targetDescriptor, sources);\n\t\t\t}\n\t\t\tsources.add(sourceDescriptor);\n\t\t}\n\t}","id":21843,"modified_method":"public void put(SourceDescType sourceDescriptor) {\n\t\tList<TargetType> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetType targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDescType> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources == null) {\n\t\t\t\tsources = new HashSet<SourceDescType>();\n\t\t\t\tresultMap.put(targetDescriptor, sources);\n\t\t\t}\n\t\t\tsources.add(sourceDescriptor);\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void remove(SourceDesc sourceDescriptor) {\n\t\tList<TargetDesc> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetDesc targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDesc> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources != null) {\n\t\t\t\tsources.remove(sourceDescriptor);\n\t\t\t\tif (sources.isEmpty()) {\n\t\t\t\t\tresultMap.remove(targetDescriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21844,"modified_method":"public void remove(SourceDescType sourceDescriptor) {\n\t\tList<TargetType> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetType targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDescType> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources != null) {\n\t\t\t\tsources.remove(sourceDescriptor);\n\t\t\t\tif (sources.isEmpty()) {\n\t\t\t\t\tresultMap.remove(targetDescriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> executeListResult() {\n\t\t\treturn CollectionUtils.copyOrNull(lookup(target));\n\t\t}","id":21845,"modified_method":"public Collection<SourceDescType> executeListResult() {\n\t\t\treturn CollectionUtils.copyOrNull(lookup(target));\n\t\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptor.DAO eCrossReferenceDAO() {\n\t\treturn new ECrossReferenceDescriptor.DAO() {\n\n\t\t\tpublic ECrossReferenceDescriptor.Query createQuery() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void store(ECrossReferenceDescriptor descriptor) {\n\t\t\t\taddedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic void modify(ECrossReferenceDescriptor element, ECrossReferenceDescriptor newValues) {\n\t\t\t}\n\n\t\t\tpublic void delete(ECrossReferenceDescriptor descriptor) {\n\t\t\t\tremovedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReference(\n\t\t\t\t\torg.eclipse.emf.index.EObjectDescriptor sourceDescriptor, EReference reference) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\t\t\tEObjectDescriptor sourceDescriptor) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\t\t\tEObjectDescriptor targetDescriptor) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}","id":21846,"modified_method":"public ECrossReferenceDescriptor.DAO eCrossReferenceDAO() {\n\t\treturn new ECrossReferenceDescriptor.DAO() {\n\n\t\t\tpublic ECrossReferenceDescriptor.Query createQuery() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void store(ECrossReferenceDescriptor descriptor) {\n\t\t\t\taddedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic void modify(ECrossReferenceDescriptor element, ECrossReferenceDescriptor newValues) {\n\t\t\t}\n\n\t\t\tpublic void delete(ECrossReferenceDescriptor descriptor) {\n\t\t\t\tremovedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(URI sourceUri) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(URI targetUri) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t};\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testResourceUnloading() throws Exception {\r\n\t\t// 1. create test data\r\n\t\tResourceSet\trs\t=\tnew ResourceSetImpl();\r\n\t\t\r\n\t\tURI uri = URI.createFileURI( testFile.getAbsolutePath() );\r\n\t\tResource r\t=\trs.createResource( uri);\r\n\t\t\r\n\t\tEClass\tc1\t=\tEcoreFactory.eINSTANCE.createEClass();\r\n\t\tc1.setName( \"class1\" );\r\n\t\tr.getContents().add( c1 );\r\n\t\t\r\n\t\t// 2. persist the resource\r\n\t\tr.save(null);\r\n\t\tr = null;\r\n\t\t\r\n\t\tInMemoryIndex index = new InMemoryIndex();\r\n\t\t\r\n\t\tEcoreIndexFeeder indexFeeder = new EcoreIndexFeederImpl(index);\r\n\t\tindexFeeder.index(EcorePackage.eINSTANCE, true);\r\n\r\n\t\tIndexFeederImpl feeder = new IndexFeederImpl(index);\r\n\t\t\r\n\t\tfeeder.begin();\r\n\t\t\r\n\t\t// 3. create a new resource set\r\n\t\trs\t=\tnew ResourceSetImpl();\r\n\t\tr = rs.getResource(uri, true);\r\n\r\n\t\tfeeder.createResourceDescriptor(r, null);\r\n\t\t\r\n\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(r, false); i.hasNext();) {\r\n\t\t\tEObject element = i.next();\r\n\t\t\tfeeder.createEObjectDescriptor(element, this.getEObjectName(element), this.getEObjectDisplayName(element), null);\r\n\t\t\t\r\n\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\r\n\t\t\t\tif (this.isIndexReference(eReference, element)) {\r\n\t\t\t\t\tfeeder.createECrossReferenceDescriptor(element, eReference);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4. unload resource set. this is where the NPE happened\r\n\t\tr.unload();\r\n\t\t\r\n\t\tfeeder.commit();\r\n\r\n\t\t// 5. assert we indexed what was intended\r\n\t\tEObjectDescriptor desc = index.eObjectDAO().createQueryEObjectsByType(EcorePackage.eINSTANCE.getEClass()).executeSingleResult();\r\n\t\t\r\n\t\tassertNotNull(\"Didn't return the object descriptor.\", desc);\r\n\t\tassertEquals(EcoreUtil.getURI(c1),desc.getFragmentURI());\r\n\t}","id":21847,"modified_method":"public void testResourceUnloading() throws Exception {\r\n\t\t// 1. create test data\r\n\t\tResourceSet rs = new ResourceSetImpl();\r\n\r\n\t\tURI uri = URI.createFileURI(testFile.getAbsolutePath());\r\n\t\tResource r = rs.createResource(uri);\r\n\r\n\t\tEClass c1 = EcoreFactory.eINSTANCE.createEClass();\r\n\t\tc1.setName(\"class1\");\r\n\t\tr.getContents().add(c1);\r\n\r\n\t\t// 2. persist the resource\r\n\t\tr.save(null);\r\n\t\tr = null;\r\n\r\n\t\tInMemoryIndex index = new InMemoryIndex();\r\n\r\n\t\tEcoreIndexFeeder indexFeeder = new EcoreIndexFeederImpl(index);\r\n\t\tindexFeeder.index(EcorePackage.eINSTANCE, true);\r\n\r\n\t\tIndexFeederImpl feeder = new IndexFeederImpl(index);\r\n\r\n\t\tfeeder.begin();\r\n\r\n\t\t// 3. create a new resource set\r\n\t\trs = new ResourceSetImpl();\r\n\t\tr = rs.getResource(uri, true);\r\n\r\n\t\tfeeder.createResourceDescriptor(r, null);\r\n\r\n\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(r, false); i.hasNext();) {\r\n\t\t\tEObject element = i.next();\r\n\t\t\tfeeder.createEObjectDescriptor(element, this.getEObjectName(element), this.getEObjectDisplayName(element),\r\n\t\t\t\t\tnull);\r\n\r\n\t\t\tURI sourceURI = EcoreUtil.getURI(element);\r\n\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\r\n\t\t\t\tString eReferenceName = eReference.getName();\r\n\t\t\t\tif (isIndexReference(eReference, element)) {\r\n\t\t\t\t\tif (eReference.isMany()) {\r\n\t\t\t\t\t\tList<?> targets = (List<?>) ((InternalEObject) element).eGet(eReference, false);\r\n\t\t\t\t\t\tfor (int j = 0; j < targets.size(); ++j) {\r\n\t\t\t\t\t\t\tObject target = targets.get(j);\r\n\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName, j, target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tObject target = ((InternalEObject) element).eGet(eReference, false);\r\n\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName,\r\n\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX, target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4. unload resource set. this is where the NPE happened\r\n\t\tr.unload();\r\n\r\n\t\tfeeder.commit();\r\n\r\n\t\t// 5. assert we indexed what was intended\r\n\t\tEObjectDescriptor desc = index.eObjectDAO().createQueryEObjectsByType(EcorePackage.eINSTANCE.getEClass())\r\n\t\t\t\t.executeSingleResult();\r\n\r\n\t\tassertNotNull(\"Didn't return the object descriptor.\", desc);\r\n\t\tassertEquals(EcoreUtil.getURI(c1), desc.getFragmentURI());\r\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setUp() throws Exception {\r\n\t\ttestFile\t=\tFile.createTempFile(\"resourceUnloadingTest\", \"xmi\");\r\n\t}","id":21848,"modified_method":"public void setUp() throws Exception {\r\n\t\tResource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(\"xmi\", new XMIResourceFactoryImpl());\r\n\t\ttestFile = File.createTempFile(\"resourceUnloadingTest\", \".xmi\");\r\n\t}","commit_id":"97c40893a481a3f0f0716b3925852ede6d7a8844","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testNonGenericQueries() {\n\t\tIGenericQuery<ECrossReferenceDescriptor> query = indexStore.eCrossReferenceDAO().createQueryCrossReference(eObjectDescriptor, eReference);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesFrom(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObject);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t}","id":21849,"modified_method":"public void testNonGenericQueries() {\n\t\tIGenericQuery<ECrossReferenceDescriptor> query = indexStore.eCrossReferenceDAO()\n\t\t\t\t.createQueryCrossReferencesFrom(eObjectDescriptor.getFragmentURI());\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObjectDescriptor.getFragmentURI());\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQueryCrossReferencesTo(eObject);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testGenericQueries() throws Exception {\n\t\tECrossReferenceDescriptor.Query query = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().source(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery.source(eObjectDescriptor).referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().name(EOBJECT_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().fragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass(eClassDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().name(ECLASS_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().ePackage(ePackageDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.source().eClass().ePackage().nsURI(EPACKAGE_NS_URI);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().target(eObjectDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery.target(eObjectDescriptor).referenceName(ECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().name(EOBJECT_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().fragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass(eClassDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().name(ECLASS_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().ePackage(ePackageDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.target().eClass().ePackage().nsURI(EPACKAGE_NS_URI);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\t\t\n\t}","id":21850,"modified_method":"public void testGenericQueries() throws Exception {\n\t\tECrossReferenceDescriptor.Query query = indexStore.eCrossReferenceDAO().createQuery().referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().sourceFragment(eObjectDescriptor.getFragment())\n\t\t\t\t.sourceResource(resourceDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery.sourceFragment(eObjectDescriptor.getFragment()).sourceResource(resourceDescriptor).referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.sourceFragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().targetFragment(eObjectDescriptor.getFragment())\n\t\t\t\t.targetResource(resourceDescriptor);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery.targetFragment(eObjectDescriptor.getFragment()).targetResource(resourceDescriptor).referenceName(\n\t\t\t\tECROSS_REFERENCE_NAME);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t\tquery = indexStore.eCrossReferenceDAO().createQuery().referenceName(ECROSS_REFERENCE_NAME);\n\t\tquery.targetFragment(EOBJECT_FRAGMENT);\n\t\tgenericQuerySingleResultTest(indexStore.eCrossReferenceDAO(), eCrossReferenceDescriptor, query);\n\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void resourceChanged(URI resourceURI, IIndexStore store, IndexFeeder feeder) {\n\t\tResource resource = loadResource(resourceURI);\n\t\tif (resource != null) {\n\t\t\tfeeder.createResourceDescriptor(resource, getResourceUserData(resource));\n\t\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(resource, false); i.hasNext();) {\n\t\t\t\tEObject element = i.next();\n\t\t\t\tif (isIndexElement(element)) {\n\t\t\t\t\tfeeder.createEObjectDescriptor(element, getEObjectName(element), getEObjectDisplayName(element),\n\t\t\t\t\t\t\tgetEObjectUserData(element));\n\t\t\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\n\t\t\t\t\t\tif (isIndexReference(eReference, element)) {\n\t\t\t\t\t\t\tfeeder.createECrossReferenceDescriptor(element, eReference);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21851,"modified_method":"public void resourceChanged(URI resourceURI, IIndexStore store, IndexFeeder feeder) {\n\t\tResource resource = loadResource(resourceURI);\n\t\tif (resource != null) {\n\t\t\tfeeder.createResourceDescriptor(resource, getResourceUserData(resource));\n\t\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(resource, false); i.hasNext();) {\n\t\t\t\tEObject element = i.next();\n\t\t\t\tif (isIndexElement(element)) {\n\t\t\t\t\tfeeder.createEObjectDescriptor(element, getEObjectName(element), getEObjectDisplayName(element),\n\t\t\t\t\t\t\tgetEObjectUserData(element));\n\t\t\t\t\tURI sourceURI = EcoreUtil.getURI(element);\n\t\t\t\t\tif (sourceURI != null) {\n\t\t\t\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\n\t\t\t\t\t\t\tString eReferenceName = eReference.getName();\n\t\t\t\t\t\t\tif (isIndexReference(eReference, element)) {\n\t\t\t\t\t\t\t\tif (eReference.isMany()) {\n\t\t\t\t\t\t\t\t\tList<?> targets = (List<?>) ((InternalEObject) element).eGet(eReference, false);\n\t\t\t\t\t\t\t\t\tfor (int index = 0; index < targets.size(); ++index) {\n\t\t\t\t\t\t\t\t\t\tObject target = targets.get(index);\n\t\t\t\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName, index,\n\t\t\t\t\t\t\t\t\t\t\t\ttarget);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tObject target = ((InternalEObject) element).eGet(eReference, false);\n\t\t\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName,\n\t\t\t\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX, target);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\tECrossReferenceDescriptor.DAO dao, EObjectDescriptor targetDescriptor) {\n\t\treturn dao.createQuery().target(targetDescriptor);\n\t}","id":21852,"modified_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\tECrossReferenceDescriptor.DAO dao, URI targetURI) {\n\t\tQuery query = dao.createQuery().targetFragment(targetURI.fragment());\n\t\tquery.targetResource().uri(targetURI.trimFragment().toString());\n\t\treturn query;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public static ECrossReferenceDescriptor.Query createQueryECrossReferencesTo(ECrossReferenceDescriptor.DAO dao,\n\t\t\tEObject target) {\n\t\tResource resource = target.eResource();\n\t\tif (resource != null) {\n\t\t\tURI resourceURI = resource.getURI();\n\t\t\tif (resourceURI != null) {\n\t\t\t\tString fragment = resource.getURIFragment(target);\n\t\t\t\tQuery crossRefQuery = dao.createQuery();\n\t\t\t\tcrossRefQuery.target().fragment(fragment).resource().uri(resourceURI.toString());\n\t\t\t\treturn crossRefQuery;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":21853,"modified_method":"public static ECrossReferenceDescriptor.Query createQueryECrossReferencesTo(ECrossReferenceDescriptor.DAO dao,\n\t\t\tEObject target) {\n\t\tResource resource = target.eResource();\n\t\tif(resource != null) {\n\t\t\tString targetFragment = resource.getURIFragment(target);\n\t\t\tif(targetFragment != null) {\n\t\t\t\tQuery crossRefQuery = dao.createQuery().targetFragment(targetFragment);\n\t\t\t\tcrossRefQuery.targetResource().uri(resource.getURI().toString());\n\t\t\t\treturn crossRefQuery;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\tECrossReferenceDescriptor.DAO dao, EObjectDescriptor sourceDescriptor) {\n\t\treturn dao.createQuery().source(sourceDescriptor);\n\t}","id":21854,"modified_method":"public static IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\tECrossReferenceDescriptor.DAO dao, URI sourceURI) {\n\t\tQuery query = dao.createQuery().sourceFragment(sourceURI.fragment());\n\t\tquery.sourceResource().uri(sourceURI.trimFragment().toString());\n\t\treturn query;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\treturn DefaultQueryTool.createQueryECrossReferencesTo(this, target);\n\t}","id":21855,"modified_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(URI sourceURI) {\n\t\treturn DefaultQueryTool.createQueryCrossReferencesFrom(this, sourceURI);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(EObjectDescriptor sourceDescriptor) {\n\t\treturn sourceScope.createQuery(sourceDescriptor);\n\t}","id":21856,"modified_method":"public IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(URI targetURI) {\n\t\treturn DefaultQueryTool.createQueryCrossReferencesTo(this, targetURI);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean matches(ECrossReferenceDescriptor crossRefDescriptor) {\n\t\t\treturn matchesGlobbing(crossRefDescriptor.getReferenceName(), referenceNamePattern);\n\t\t}","id":21857,"modified_method":"protected boolean matches(ECrossReferenceDescriptor crossRefDescriptor) {\n\t\t\treturn matchesGlobbing(crossRefDescriptor.getReferenceName(), referenceNamePattern)\n\t\t\t\t\t&& matchesGlobbing(crossRefDescriptor.getSourceFragment(), sourceFragmentPattern)\n\t\t\t\t\t&& matchesGlobbing(crossRefDescriptor.getTargetFragment(), targetFragmentPattern)\n\t\t\t\t\t&& (index != ECrossReferenceDescriptor.NO_INDEX && index == crossRefDescriptor.getIndex());\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor.Query source() {\n\t\t\tif (sourceDescriptor != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tsourceQuery = indexStore.eObjectDAO().createQuery();\n\t\t\treturn sourceQuery;\n\t\t}","id":21858,"modified_method":"public ResourceDescriptor.Query sourceResource() {\n\t\t\tif (sourceResourceDescriptor != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tsourceResourceQuery = indexStore.resourceDAO().createQuery();\n\t\t\treturn sourceResourceQuery;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void delete(ECrossReferenceDescriptor element) {\n\t\tsuper.delete(element);\n\t\tsourceScope.remove(element);\n\t\ttargetScope.remove(element);\n\t}","id":21859,"modified_method":"@Override\n\tpublic void delete(ECrossReferenceDescriptor element) {\n\t\tsuper.delete(element);\n\t\tsourceResourceScope.remove(element);\n\t\ttargetResourceScope.remove(element);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void store(ECrossReferenceDescriptor element) {\n\t\tsuper.store(element);\n\t\tsourceScope.put(element);\n\t\ttargetScope.put(element);\n\t}","id":21860,"modified_method":"@Override\n\tpublic void store(ECrossReferenceDescriptor element) {\n\t\tsuper.store(element);\n\t\tsourceResourceScope.put(element);\n\t\ttargetResourceScope.put(element);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\t\tprotected Collection<ECrossReferenceDescriptor> scope() {\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesBySource = sourceScope.lookup(sourceDescriptor, sourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesByTarget = targetScope.lookup(targetDescriptor, targetQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> mergedScopes = mergeScopes(eCrossReferencesBySource, eCrossReferencesByTarget);\n\t\t\treturn mergedScopes == null ? super.scope() : mergedScopes;\n\t\t}","id":21861,"modified_method":"@Override\n\t\tprotected Collection<ECrossReferenceDescriptor> scope() {\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesBySourceResource = sourceResourceScope.lookup(sourceResourceDescriptor, sourceResourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> eCrossReferencesByTargetResource = targetResourceScope.lookup(targetResourceDescriptor, targetResourceQuery);\n\t\t\tCollection<ECrossReferenceDescriptor> mergedScopes = mergeScopes(eCrossReferencesBySourceResource,\n\t\t\t\t\teCrossReferencesByTargetResource);\n\t\t\treturn mergedScopes == null ? super.scope() : mergedScopes;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public CrossRefQuery source(EObjectDescriptor sourceDescriptor) {\n\t\t\tif (sourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\n\t\t\t}\n\t\t\tthis.sourceDescriptor = sourceDescriptor;\n\t\t\treturn this;\n\t\t}","id":21862,"modified_method":"public CrossRefQuery sourceResource(ResourceDescriptor sourceResourceDescriptor) {\n\t\t\tif(sourceResourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"SourceQuery already configured\");\t\t\t\t\n\t\t\t}\n\t\t\tthis.sourceResourceDescriptor = sourceResourceDescriptor;\n\t\t\treturn this;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public CrossRefQuery target(EObjectDescriptor targetDescriptor) {\n\t\t\tif (targetQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"TargetQuery already configured\");\n\t\t\t}\n\t\t\tthis.targetDescriptor = targetDescriptor;\n\t\t\treturn this;\n\t\t}","id":21863,"modified_method":"public CrossRefQuery targetResource(ResourceDescriptor targetResourceDescriptor) {\n\t\t\tif(targetResourceQuery != null) {\n\t\t\t\tthrow new IllegalStateException(\"TargetQuery already configured\");\t\t\t\t\n\t\t\t}\n\t\t\tthis.targetResourceDescriptor = targetResourceDescriptor;\n\t\t\treturn this;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDAOImpl(IIndexStore indexStore) {\n\t\tsuper(indexStore);\n\t\tsourceScope = new InverseReferenceCache<EObjectDescriptor, ECrossReferenceDescriptor>() {\n\t\t\t@Override\n\t\t\tprotected List<EObjectDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getSource());\n\t\t\t}\n\t\t};\n\t\ttargetScope = new InverseReferenceCache<EObjectDescriptor, ECrossReferenceDescriptor>() {\n\t\t\t@Override\n\t\t\tprotected List<EObjectDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getTarget());\n\t\t\t}\n\t\t};\n\t}","id":21864,"modified_method":"public ECrossReferenceDAOImpl(IIndexStore indexStore) {\n\t\tsuper(indexStore);\n\t\tsourceResourceScope = new InverseReferenceCache<ResourceDescriptor, ECrossReferenceDescriptor>(){\n\t\t\t@Override\n\t\t\tprotected List<ResourceDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getSourceResourceDescriptor());\n\t\t\t}\n\t\t};\n\t\ttargetResourceScope = new InverseReferenceCache<ResourceDescriptor, ECrossReferenceDescriptor>(){\n\t\t\t@Override\n\t\t\tprotected List<ResourceDescriptor> targets(ECrossReferenceDescriptor source) {\n\t\t\t\treturn Collections.singletonList(source.getTargetResourceDescriptor());\n\t\t\t}\n\t\t};\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptorImpl(EObjectDescriptor source, String referenceName, EObjectDescriptor target) {\n\t\tthis(source, referenceName, target, NO_INDEX);\n\t}","id":21865,"modified_method":"public ECrossReferenceDescriptorImpl(ResourceDescriptor sourceResourceDescriptor, String sourceFragment,\n\t\t\tString referenceName, ResourceDescriptor targetResourceDescriptor, String targetFragment) {\n\t\tthis(sourceResourceDescriptor, sourceFragment, referenceName, NO_INDEX, targetResourceDescriptor, targetFragment);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic String toString() {\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"(\");\n\t\tb.append(source);\n\t\tb.append(\" --\");\n\t\tb.append(referenceName);\n\t\tb.append(\"--> \");\n\t\tb.append(target);\n\t\tb.append(\")\");\n\t\treturn b.toString();\n\t}","id":21866,"modified_method":"@Override\n\tpublic String toString() {\n\t\tStringBuilder b = new StringBuilder();\n\t\tb.append(\"(\");\n\t\tb.append(sourceResourceDescriptor.getURI());\n\t\tb.append(\"#\");\n\t\tb.append(sourceFragment);\n\t\tb.append(\" --\");\n\t\tb.append(referenceName);\n\t\tb.append(\"--> \");\n\t\tb.append(targetResourceDescriptor.getURI());\n\t\tb.append(\"#\");\n\t\tb.append(targetFragment);\n\t\tb.append(\")\");\n\t\treturn b.toString();\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ECrossReferenceDescriptor) {\n\t\t\tECrossReferenceDescriptor crossRef = (ECrossReferenceDescriptor) obj;\n\t\t\treturn crossRef.hashCode() == hashCode() && this.source.equals(crossRef.getSource())\n\t\t\t\t\t&& this.referenceName.equals(crossRef.getReferenceName())\n\t\t\t\t\t&& this.target.equals(crossRef.getTarget());\n\t\t}\n\t\treturn false;\n\t}","id":21867,"modified_method":"@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ECrossReferenceDescriptor) {\n\t\t\tECrossReferenceDescriptor crossRef = (ECrossReferenceDescriptor) obj;\n\t\t\treturn crossRef.hashCode() == hashCode() \n\t\t\t\t&& this.sourceFragment.equals(crossRef.getSourceFragment())\n\t\t\t\t&& this.targetFragment.equals(crossRef.getTargetFragment())\n\t\t\t\t&& this.sourceResourceDescriptor.equals(crossRef.getSourceResourceDescriptor())\n\t\t\t\t&& this.targetResourceDescriptor.equals(crossRef.getTargetResourceDescriptor())\n\t\t\t\t&& this.referenceName.equals(crossRef.getReferenceName())\n\t\t\t\t&& this.index == crossRef.getIndex();\n\t\t}\n\t\treturn false;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor getTarget() {\n\t\treturn target;\n\t}","id":21868,"modified_method":"public URI getTargetURI() {\n\t\treturn URI.createURI(targetResourceDescriptor.getURI() + \"#\" + targetFragment);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptorImpl(EObjectDescriptor source, String referenceName, EObjectDescriptor target, int index) {\n\t\tsuper();\n\t\tthis.source = source;\n\t\tthis.referenceName = referenceName;\n\t\tthis.target = target;\n\t\tthis.index = index;\n\t}","id":21869,"modified_method":"public ECrossReferenceDescriptorImpl(ResourceDescriptor sourceResourceDescriptor, String sourceFragment,\n\t\t\tString referenceName, int index, ResourceDescriptor targetResourceDescriptor, String targetFragment) {\n\t\tsuper();\n\t\tthis.sourceResourceDescriptor = sourceResourceDescriptor;\n\t\tthis.sourceFragment = sourceFragment;\n\t\tthis.referenceName = referenceName;\n\t\tthis.targetResourceDescriptor = targetResourceDescriptor;\n\t\tthis.targetFragment = targetFragment;\n\t\tthis.index = index;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public EObjectDescriptor getSource() {\n\t\treturn source;\n\t}","id":21870,"modified_method":"public URI getSourceURI() {\n\t\treturn URI.createURI(sourceResourceDescriptor.getURI() + \"#\" + sourceFragment);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic int hashCode() {\n\t\treturn referenceName.hashCode() + 31 * source.hashCode() + 67 * target.hashCode();\n\t}","id":21871,"modified_method":"@Override\n\tpublic int hashCode() {\n\t\treturn referenceName.hashCode() + 7 * sourceFragment.hashCode() + 31 * targetFragment.hashCode() +\n\t\t\t53 * sourceResourceDescriptor.hashCode() + 89 * targetResourceDescriptor.hashCode();\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"private void commitEObjectDescriptors() {\n\t\tfor (Entry<EObject, EObjectData> eObjectEntry : eObjectDataCache.entrySet()) {\n\t\t\tEObject eObject = eObjectEntry.getKey();\n\t\t\tEObjectData data = eObjectEntry.getValue();\n\t\t\tResource resource = eObject.eResource();\n\t\t\tResourceDescriptor resourceDesc = null;\n\t\t\t\n\t\t\tif ( /* resource has not been unloaded */ resource != null ) {\n\t\t\t\tresourceDesc = findResourceDescriptor(resource);\n\t\t\t} else /* resource unloaded, use URI */ {\n\t\t\t\tresourceDesc = findResourceDescriptor( EcoreUtil.getURI(eObject).trimFragment());\n\t\t\t}\n\t\t\tEClassDescriptor eClassDescriptor = index.eClassDAO().createQueryEClass(eObject.eClass())\n\t\t\t\t\t.executeSingleResult();\n\t\t\tEObjectDescriptor newEObjectDesc = new EObjectDescriptorImpl(resourceDesc, data.fragment, data.name,\n\t\t\t\t\tdata.displayName, eClassDescriptor, data.userData);\n\t\t\tEObjectDescriptor existingEObjectDesc = findEquivalent(allExistingEObjectDescs, newEObjectDesc);\n\t\t\tif (existingEObjectDesc != null) {\n\t\t\t\tCollection<ECrossReferenceDescriptor> existingECrossRefDescsFrom = toList(index.eCrossReferenceDAO()\n\t\t\t\t\t\t.createQueryCrossReferencesFrom(existingEObjectDesc).executeListResult());\n\t\t\t\taddAllIfNotNull(allExistingECrossRefDescs, existingECrossRefDescsFrom);\n\t\t\t\tindex.eObjectDAO().modify(existingEObjectDesc, newEObjectDesc);\n\t\t\t\tallExistingEObjectDescs.remove(existingEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, existingEObjectDesc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex.eObjectDAO().store(newEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, newEObjectDesc);\n\t\t\t}\n\t\t}\n\t}","id":21872,"modified_method":"private void commitEObjectDescriptors() {\n\t\tfor (Entry<EObject, EObjectData> eObjectEntry : eObjectDataCache.entrySet()) {\n\t\t\tEObject eObject = eObjectEntry.getKey();\n\t\t\tEObjectData data = eObjectEntry.getValue();\n\t\t\tResource resource = eObject.eResource();\n\t\t\tResourceDescriptor resourceDesc = null;\n\n\t\t\tif (resource != null) {\n\t\t\t\tresourceDesc = findResourceDescriptor(resource.getURI());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresourceDesc = findResourceDescriptor(EcoreUtil.getURI(eObject).trimFragment());\n\t\t\t}\n\t\t\tEClassDescriptor eClassDescriptor = index.eClassDAO().createQueryEClass(eObject.eClass())\n\t\t\t\t\t.executeSingleResult();\n\t\t\tEObjectDescriptor newEObjectDesc = new EObjectDescriptorImpl(resourceDesc, data.fragment, data.name,\n\t\t\t\t\tdata.displayName, eClassDescriptor, data.userData);\n\t\t\tEObjectDescriptor existingEObjectDesc = findEquivalent(allExistingEObjectDescs, newEObjectDesc);\n\t\t\tif (existingEObjectDesc != null) {\n\t\t\t\tCollection<ECrossReferenceDescriptor> existingECrossRefDescsFrom = toList(index.eCrossReferenceDAO()\n\t\t\t\t\t\t.createQueryCrossReferencesFrom(existingEObjectDesc.getFragmentURI()).executeListResult());\n\t\t\t\taddAllIfNotNull(allExistingECrossRefDescs, existingECrossRefDescsFrom);\n\t\t\t\tindex.eObjectDAO().modify(existingEObjectDesc, newEObjectDesc);\n\t\t\t\tallExistingEObjectDescs.remove(existingEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, existingEObjectDesc);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex.eObjectDAO().store(newEObjectDesc);\n\t\t\t\teObjectDescCache.put(eObject, newEObjectDesc);\n\t\t\t}\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"private void putResourceDescriptor(Resource resource, ResourceDescriptor resourceDescriptor ) {\n\t\tresourceDescCache.put(resource, resourceDescriptor);\n\t\tresourceDescCacheUri.put(resource.getURI(), resourceDescriptor);\n\t}","id":21873,"modified_method":"private void putResourceDescriptor(Resource resource, ResourceDescriptor resourceDescriptor) {\n\t\tresourceDescCacheUri.put(resource.getURI(), resourceDescriptor);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"private void clearAllCaches() {\n\t\tresourceDataCache.clear();\n\t\teObjectDataCache.clear();\n\t\tcrossRefDataCache.clear();\n\n\t\tresourceDescCache.clear();\n\t\tresourceDescCacheUri.clear();\n\t\teObjectDescCache.clear();\n\t\tallExistingEObjectDescs.clear();\n\t\tallExistingECrossRefDescs.clear();\n\t}","id":21874,"modified_method":"private void clearAllCaches() {\n\t\tresourceDataCache.clear();\n\t\teObjectDataCache.clear();\n\t\tcrossRefCache.clear();\n\t\tresourceDescCacheUri.clear();\n\t\teObjectDescCache.clear();\n\t\tallExistingEObjectDescs.clear();\n\t\tallExistingECrossRefDescs.clear();\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"private void commitECrossReferenceDescriptors() {\n\t\tfor (EObject source : crossRefDataCache.keySet()) {\n\t\t\tEObjectDescriptor sourceDesc = findEObjectDescriptor(source);\n\t\t\tif (sourceDesc != null) {\n\t\t\t\tfor (ECrossReferenceData data : crossRefDataCache.get(source)) {\n\t\t\t\t\tif (data.eReference.isMany()) {\n\t\t\t\t\t\tList<?> targetList = (List<?>) source.eGet(data.eReference);\n\t\t\t\t\t\tfor (int i = 0; i < targetList.size(); ++i) {\n\t\t\t\t\t\t\tindexECrossReference(sourceDesc, data.eReference, targetList.get(i), i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tindexECrossReference(sourceDesc, data.eReference, source.eGet(data.eReference),\n\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21875,"modified_method":"private void commitECrossReferenceDescriptors() {\n\t\tfor (ECrossReferenceData data : crossRefCache) {\n\t\t\tResourceDescriptor sourceResourceDescriptor = findResourceDescriptor(data.sourceURI.trimFragment());\n\t\t\tResourceDescriptor targetResourceDescriptor = findResourceDescriptor(data.targetURI.trimFragment());\n\t\t\tECrossReferenceDescriptor eCrossReferenceDesc = new ECrossReferenceDescriptorImpl(sourceResourceDescriptor,\n\t\t\t\t\tdata.sourceURI.fragment(), data.eReferenceName, data.index, targetResourceDescriptor,\n\t\t\t\t\tdata.targetURI.fragment());\n\t\t\tif (!allExistingECrossRefDescs.remove(eCrossReferenceDesc)) {\n\t\t\t\tindex.eCrossReferenceDAO().store(eCrossReferenceDesc);\n\t\t\t}\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void createECrossReferenceDescriptor(EObject owner, EReference eReference) {\n\t\tassertTransactionStarted();\n\t\tResource eResource = owner.eResource();\n\t\tif (eResource != null) {\n\t\t\tECrossReferenceData eCrossReferenceData = new ECrossReferenceData();\n\t\t\teCrossReferenceData.eReference = eReference;\n\t\t\tcrossRefDataCache.put(owner, eCrossReferenceData);\n\t\t}\n\t}","id":21876,"modified_method":"public void createECrossReferenceDescriptor(URI sourceURI, String eReferenceName, int index, URI targetURI) {\n\t\tassertTransactionStarted();\n\t\tif (sourceURI != null && eReferenceName != null && targetURI != null) {\n\t\t\tECrossReferenceData eCrossReferenceData = new ECrossReferenceData();\n\t\t\teCrossReferenceData.sourceURI = sourceURI;\n\t\t\teCrossReferenceData.targetURI = targetURI;\n\t\t\teCrossReferenceData.eReferenceName = eReferenceName;\n\t\t\teCrossReferenceData.index = index;\n\t\t\tcrossRefCache.add(eCrossReferenceData);\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"private\tResourceDescriptor findResourceDescriptor(URI uri) {\n\t\t\n\t\treturn resourceDescCacheUri.get(uri);\n\t}","id":21877,"modified_method":"private ResourceDescriptor findResourceDescriptor(URI uri) {\n\t\tResourceDescriptor resourceDescriptor = resourceDescCacheUri.get(uri);\n\t\tif (resourceDescriptor == null) {\n\t\t\tString uriAsString = uri.toString();\n\t\t\tresourceDescriptor = index.resourceDAO().createQuery().uri(uriAsString).executeSingleResult();\n\t\t\tif (resourceDescriptor == null) {\n\t\t\t\tresourceDescriptor = new ResourceDescriptorImpl(uriAsString, ResourceDescriptor.NEVER,\n\t\t\t\t\t\tnull);\n\t\t\t\tindex.resourceDAO().store(resourceDescriptor);\n\t\t\t}\n\t\t}\n\t\treturn resourceDescriptor;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testIntegration() throws Exception {\n\t\tecoreFeeder.index(EcorePackage.eINSTANCE, true);\n\t\tindexExampleResource();\n\t\tIterable<EObjectDescriptor> elementResult = index.eObjectDAO().createQuery().name(\"Entity\").executeListResult();\n\t\tassertNotNull(elementResult);\n\t\tIterator<EObjectDescriptor> eObjectIterator = elementResult.iterator();\n\t\tEObjectDescriptor elementDescriptor = eObjectIterator.next();\n\t\tassertFalse(eObjectIterator.hasNext());\n\t\tEObject entityClass = resourceSet.getEObject(elementDescriptor.getFragmentURI(), true);\n\t\tassertNotNull(entityClass);\n\t\tassertTrue(entityClass instanceof EClass);\n\t\tassertEquals(\"Entity\", ((EClass) entityClass).getName());\n\n\t\tEClassDescriptor typeDescriptor = elementDescriptor.getEClassDescriptor();\n\t\tassertNotNull(typeDescriptor);\n\t\tIterable<EClassDescriptor> typeResult = index.eClassDAO().createQuery().name(\"EClass\").executeListResult();\n\t\tassertNotNull(typeResult);\n\t\tIterator<EClassDescriptor> eClassIterator = typeResult.iterator();\n\t\tEClassDescriptor typeDescriptor0 = eClassIterator.next();\n\t\tassertFalse(eClassIterator.hasNext());\n\t\tassertEquals(typeDescriptor, typeDescriptor0);\n\t\tEClassDescriptor[] superClasses = typeDescriptor0.getSuperClasses();\n\t\tassertNotNull(superClasses);\n\t\t// four super classes: EClassifier, ENamedElement, EModelElement and\n\t\t// EObject\n\t\tassertEquals(4, superClasses.length);\n\n\t\tQuery crossRefQuery = index.eCrossReferenceDAO().createQuery();\n\t\tcrossRefQuery.target().name(\"Feature\");\n\t\tIterable<ECrossReferenceDescriptor> crossRefDescriptors = crossRefQuery.executeListResult();\n\t\tassertNotNull(crossRefDescriptors);\n\t\tassertTrue(crossRefDescriptors.iterator().hasNext());\n\t\tfor (ECrossReferenceDescriptor crossRefDescriptor : crossRefDescriptors) {\n\t\t\tEObject source = resourceSet.getEObject(crossRefDescriptor.getSource().getFragmentURI(), false);\n\t\t\tassertNotNull(source);\n\t\t\tEObject target = resourceSet.getEObject(crossRefDescriptor.getTarget().getFragmentURI(), false);\n\t\t\tEStructuralFeature structuralFeature = source.eClass().getEStructuralFeature(\n\t\t\t\t\tcrossRefDescriptor.getReferenceName());\n\t\t\tassertTrue(structuralFeature instanceof EReference);\n\t\t\tif (structuralFeature.isMany()) {\n\t\t\t\tassertTrue(((List<?>) source.eGet(structuralFeature)).contains(target));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tassertEquals(target, source.eGet(structuralFeature));\n\t\t\t}\n\t\t}\n\n\t\torg.eclipse.emf.index.EObjectDescriptor.Query objectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass().name(\"EClassifier\").ePackage().nsURI(EcorePackage.eNS_URI);\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\n\t\tobjectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass(index.eClassDAO().createQueryEClass(EcorePackage.eINSTANCE.getEClassifier()).executeSingleResult());\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\t}","id":21878,"modified_method":"public void testIntegration() throws Exception {\n\t\tecoreFeeder.index(EcorePackage.eINSTANCE, true);\n\t\tindexExampleResource();\n\t\tIterable<EObjectDescriptor> elementResult = index.eObjectDAO().createQuery().name(\"Entity\").executeListResult();\n\t\tassertNotNull(elementResult);\n\t\tIterator<EObjectDescriptor> eObjectIterator = elementResult.iterator();\n\t\tEObjectDescriptor elementDescriptor = eObjectIterator.next();\n\t\tassertFalse(eObjectIterator.hasNext());\n\t\tEObject entityClass = resourceSet.getEObject(elementDescriptor.getFragmentURI(), true);\n\t\tassertNotNull(entityClass);\n\t\tassertTrue(entityClass instanceof EClass);\n\t\tassertEquals(\"Entity\", ((EClass) entityClass).getName());\n\n\t\tEClassDescriptor typeDescriptor = elementDescriptor.getEClassDescriptor();\n\t\tassertNotNull(typeDescriptor);\n\t\tIterable<EClassDescriptor> typeResult = index.eClassDAO().createQuery().name(\"EClass\").executeListResult();\n\t\tassertNotNull(typeResult);\n\t\tIterator<EClassDescriptor> eClassIterator = typeResult.iterator();\n\t\tEClassDescriptor typeDescriptor0 = eClassIterator.next();\n\t\tassertFalse(eClassIterator.hasNext());\n\t\tassertEquals(typeDescriptor, typeDescriptor0);\n\t\tEClassDescriptor[] superClasses = typeDescriptor0.getSuperClasses();\n\t\tassertNotNull(superClasses);\n\t\t// four super classes: EClassifier, ENamedElement, EModelElement and\n\t\t// EObject\n\t\tassertEquals(4, superClasses.length);\n\n\t\tQuery crossRefQuery = index.eCrossReferenceDAO().createQuery();\n\t\tcrossRefQuery.targetFragment(\"//Feature\");\n\t\tIterable<ECrossReferenceDescriptor> crossRefDescriptors = crossRefQuery.executeListResult();\n\t\tassertNotNull(crossRefDescriptors);\n\t\tassertTrue(crossRefDescriptors.iterator().hasNext());\n\t\tfor (ECrossReferenceDescriptor crossRefDescriptor : crossRefDescriptors) {\n\t\t\tEObject source = resourceSet.getEObject(crossRefDescriptor.getSourceURI(), false);\n\t\t\tassertNotNull(source);\n\t\t\tEObject target = resourceSet.getEObject(crossRefDescriptor.getTargetURI(), false);\n\t\t\tEStructuralFeature structuralFeature = source.eClass().getEStructuralFeature(\n\t\t\t\t\tcrossRefDescriptor.getReferenceName());\n\t\t\tassertTrue(structuralFeature instanceof EReference);\n\t\t\tif (structuralFeature.isMany()) {\n\t\t\t\tassertTrue(((List<?>) source.eGet(structuralFeature)).contains(target));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tassertEquals(target, source.eGet(structuralFeature));\n\t\t\t}\n\t\t}\n\n\t\torg.eclipse.emf.index.EObjectDescriptor.Query objectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass().name(\"EClassifier\").ePackage().nsURI(EcorePackage.eNS_URI);\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\n\t\tobjectQuery = index.eObjectDAO().createQuery();\n\t\tobjectQuery.eClass(index.eClassDAO().createQueryEClass(EcorePackage.eINSTANCE.getEClassifier()).executeSingleResult());\n\t\tassertEquals(15, CollectionUtils.toList(objectQuery.executeListResult()).size());\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> lookup(TargetDesc parentScopeDescriptor, IGenericQuery<TargetDesc> parentScopeQuery) {\n\t\tCollection<SourceDesc> queryScope = null;\n\t\tboolean isScopeDefined = false;\n\t\tif (parentScopeDescriptor != null) {\n\t\t\tqueryScope = lookup(parentScopeDescriptor);\n\t\t\tisScopeDefined = true;\n\t\t}\n\t\tif (parentScopeQuery != null) {\n\t\t\tisScopeDefined = true;\n\t\t\tIterable<TargetDesc> parentScopes = parentScopeQuery.executeListResult();\n\t\t\tif (parentScopes != null) {\n\t\t\t\tfor (TargetDesc parentScope : parentScopes) {\n\t\t\t\t\tqueryScope = union(queryScope, lookup(parentScope));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (isScopeDefined && queryScope == null) ? Collections.<SourceDesc> emptyList() : queryScope;\n\t}","id":21879,"modified_method":"public Collection<SourceDescType> lookup(TargetType parentScopeDescriptor, IGenericQuery<TargetType> parentScopeQuery) {\n\t\tCollection<SourceDescType> queryScope = null;\n\t\tboolean isScopeDefined = false;\n\t\tif (parentScopeDescriptor != null) {\n\t\t\tqueryScope = lookup(parentScopeDescriptor);\n\t\t\tisScopeDefined = true;\n\t\t}\n\t\tif (parentScopeQuery != null) {\n\t\t\tisScopeDefined = true;\n\t\t\tIterable<TargetType> parentScopes = parentScopeQuery.executeListResult();\n\t\t\tif (parentScopes != null) {\n\t\t\t\tfor (TargetType parentScope : parentScopes) {\n\t\t\t\t\tqueryScope = union(queryScope, lookup(parentScope));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (isScopeDefined && queryScope == null) ? Collections.<SourceDescType> emptyList() : queryScope;\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public IGenericQuery<SourceDesc> createQuery(TargetDesc targetDescriptor) {\n\t\treturn new Query(targetDescriptor);\n\t}","id":21880,"modified_method":"public IGenericQuery<SourceDescType> createQuery(TargetType targetDescriptor) {\n\t\treturn new Query(targetDescriptor);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> lookup(TargetDesc targetDescriptor) {\n\t\treturn resultMap.get(targetDescriptor);\n\t}","id":21881,"modified_method":"public Collection<SourceDescType> lookup(TargetType targetDescriptor) {\n\t\treturn resultMap.get(targetDescriptor);\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public SourceDesc executeSingleResult() {\n\t\t\tCollection<SourceDesc> result = lookup(target);\n\t\t\tif (result != null && !result.isEmpty()) {\n\t\t\t\treturn result.iterator().next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":21882,"modified_method":"public SourceDescType executeSingleResult() {\n\t\t\tCollection<SourceDescType> result = lookup(target);\n\t\t\tif (result != null && !result.isEmpty()) {\n\t\t\t\treturn result.iterator().next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void remove(SourceDesc sourceDescriptor) {\n\t\tList<TargetDesc> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetDesc targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDesc> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources != null) {\n\t\t\t\tsources.remove(sourceDescriptor);\n\t\t\t\tif (sources.isEmpty()) {\n\t\t\t\t\tresultMap.remove(targetDescriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":21883,"modified_method":"public void remove(SourceDescType sourceDescriptor) {\n\t\tList<TargetType> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetType targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDescType> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources != null) {\n\t\t\t\tsources.remove(sourceDescriptor);\n\t\t\t\tif (sources.isEmpty()) {\n\t\t\t\t\tresultMap.remove(targetDescriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void put(SourceDesc sourceDescriptor) {\n\t\tList<TargetDesc> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetDesc targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDesc> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources == null) {\n\t\t\t\tsources = new HashSet<SourceDesc>();\n\t\t\t\tresultMap.put(targetDescriptor, sources);\n\t\t\t}\n\t\t\tsources.add(sourceDescriptor);\n\t\t}\n\t}","id":21884,"modified_method":"public void put(SourceDescType sourceDescriptor) {\n\t\tList<TargetType> targetDescriptors = targets(sourceDescriptor);\n\t\tfor (TargetType targetDescriptor : targetDescriptors) {\n\t\t\tSet<SourceDescType> sources = resultMap.get(targetDescriptor);\n\t\t\tif (sources == null) {\n\t\t\t\tsources = new HashSet<SourceDescType>();\n\t\t\t\tresultMap.put(targetDescriptor, sources);\n\t\t\t}\n\t\t\tsources.add(sourceDescriptor);\n\t\t}\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"protected Query(TargetDesc target) {\n\t\t\tthis.target = target;\n\t\t}","id":21885,"modified_method":"protected Query(TargetType target) {\n\t\t\tthis.target = target;\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"protected abstract List<TargetDesc> targets(SourceDesc source);","id":21886,"modified_method":"protected abstract List<TargetType> targets(SourceDescType source);","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<SourceDesc> executeListResult() {\n\t\t\treturn CollectionUtils.copyOrNull(lookup(target));\n\t\t}","id":21887,"modified_method":"public Collection<SourceDescType> executeListResult() {\n\t\t\treturn CollectionUtils.copyOrNull(lookup(target));\n\t\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public ECrossReferenceDescriptor.DAO eCrossReferenceDAO() {\n\t\treturn new ECrossReferenceDescriptor.DAO() {\n\n\t\t\tpublic ECrossReferenceDescriptor.Query createQuery() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void store(ECrossReferenceDescriptor descriptor) {\n\t\t\t\taddedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic void modify(ECrossReferenceDescriptor element, ECrossReferenceDescriptor newValues) {\n\t\t\t}\n\n\t\t\tpublic void delete(ECrossReferenceDescriptor descriptor) {\n\t\t\t\tremovedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReference(\n\t\t\t\t\torg.eclipse.emf.index.EObjectDescriptor sourceDescriptor, EReference reference) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(\n\t\t\t\t\tEObjectDescriptor sourceDescriptor) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(\n\t\t\t\t\tEObjectDescriptor targetDescriptor) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}","id":21888,"modified_method":"public ECrossReferenceDescriptor.DAO eCrossReferenceDAO() {\n\t\treturn new ECrossReferenceDescriptor.DAO() {\n\n\t\t\tpublic ECrossReferenceDescriptor.Query createQuery() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void store(ECrossReferenceDescriptor descriptor) {\n\t\t\t\taddedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic void modify(ECrossReferenceDescriptor element, ECrossReferenceDescriptor newValues) {\n\t\t\t}\n\n\t\t\tpublic void delete(ECrossReferenceDescriptor descriptor) {\n\t\t\t\tremovedCrossRefDescriptors.add(descriptor);\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(EObject target) {\n\t\t\t\treturn new MockQuery<ECrossReferenceDescriptor>();\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesFrom(URI sourceUri) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic IGenericQuery<ECrossReferenceDescriptor> createQueryCrossReferencesTo(URI targetUri) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t};\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testResourceUnloading() throws Exception {\r\n\t\t// 1. create test data\r\n\t\tResourceSet\trs\t=\tnew ResourceSetImpl();\r\n\t\t\r\n\t\tURI uri = URI.createFileURI( testFile.getAbsolutePath() );\r\n\t\tResource r\t=\trs.createResource( uri);\r\n\t\t\r\n\t\tEClass\tc1\t=\tEcoreFactory.eINSTANCE.createEClass();\r\n\t\tc1.setName( \"class1\" );\r\n\t\tr.getContents().add( c1 );\r\n\t\t\r\n\t\t// 2. persist the resource\r\n\t\tr.save(null);\r\n\t\tr = null;\r\n\t\t\r\n\t\tInMemoryIndex index = new InMemoryIndex();\r\n\t\t\r\n\t\tEcoreIndexFeeder indexFeeder = new EcoreIndexFeederImpl(index);\r\n\t\tindexFeeder.index(EcorePackage.eINSTANCE, true);\r\n\r\n\t\tIndexFeederImpl feeder = new IndexFeederImpl(index);\r\n\t\t\r\n\t\tfeeder.begin();\r\n\t\t\r\n\t\t// 3. create a new resource set\r\n\t\trs\t=\tnew ResourceSetImpl();\r\n\t\tr = rs.getResource(uri, true);\r\n\r\n\t\tfeeder.createResourceDescriptor(r, null);\r\n\t\t\r\n\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(r, false); i.hasNext();) {\r\n\t\t\tEObject element = i.next();\r\n\t\t\tfeeder.createEObjectDescriptor(element, this.getEObjectName(element), this.getEObjectDisplayName(element), null);\r\n\t\t\t\r\n\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\r\n\t\t\t\tif (this.isIndexReference(eReference, element)) {\r\n\t\t\t\t\tfeeder.createECrossReferenceDescriptor(element, eReference);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4. unload resource set. this is where the NPE happened\r\n\t\tr.unload();\r\n\t\t\r\n\t\tfeeder.commit();\r\n\r\n\t\t// 5. assert we indexed what was intended\r\n\t\tEObjectDescriptor desc = index.eObjectDAO().createQueryEObjectsByType(EcorePackage.eINSTANCE.getEClass()).executeSingleResult();\r\n\t\t\r\n\t\tassertNotNull(\"Didn't return the object descriptor.\", desc);\r\n\t\tassertEquals(EcoreUtil.getURI(c1),desc.getFragmentURI());\r\n\t}","id":21889,"modified_method":"public void testResourceUnloading() throws Exception {\r\n\t\t// 1. create test data\r\n\t\tResourceSet rs = new ResourceSetImpl();\r\n\r\n\t\tURI uri = URI.createFileURI(testFile.getAbsolutePath());\r\n\t\tResource r = rs.createResource(uri);\r\n\r\n\t\tEClass c1 = EcoreFactory.eINSTANCE.createEClass();\r\n\t\tc1.setName(\"class1\");\r\n\t\tr.getContents().add(c1);\r\n\r\n\t\t// 2. persist the resource\r\n\t\tr.save(null);\r\n\t\tr = null;\r\n\r\n\t\tInMemoryIndex index = new InMemoryIndex();\r\n\r\n\t\tEcoreIndexFeeder indexFeeder = new EcoreIndexFeederImpl(index);\r\n\t\tindexFeeder.index(EcorePackage.eINSTANCE, true);\r\n\r\n\t\tIndexFeederImpl feeder = new IndexFeederImpl(index);\r\n\r\n\t\tfeeder.begin();\r\n\r\n\t\t// 3. create a new resource set\r\n\t\trs = new ResourceSetImpl();\r\n\t\tr = rs.getResource(uri, true);\r\n\r\n\t\tfeeder.createResourceDescriptor(r, null);\r\n\r\n\t\tfor (Iterator<EObject> i = EcoreUtil.getAllProperContents(r, false); i.hasNext();) {\r\n\t\t\tEObject element = i.next();\r\n\t\t\tfeeder.createEObjectDescriptor(element, this.getEObjectName(element), this.getEObjectDisplayName(element),\r\n\t\t\t\t\tnull);\r\n\r\n\t\t\tURI sourceURI = EcoreUtil.getURI(element);\r\n\t\t\tfor (EReference eReference : element.eClass().getEAllReferences()) {\r\n\t\t\t\tString eReferenceName = eReference.getName();\r\n\t\t\t\tif (isIndexReference(eReference, element)) {\r\n\t\t\t\t\tif (eReference.isMany()) {\r\n\t\t\t\t\t\tList<?> targets = (List<?>) ((InternalEObject) element).eGet(eReference, false);\r\n\t\t\t\t\t\tfor (int j = 0; j < targets.size(); ++j) {\r\n\t\t\t\t\t\t\tObject target = targets.get(j);\r\n\t\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName, j, target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tObject target = ((InternalEObject) element).eGet(eReference, false);\r\n\t\t\t\t\t\tcreateECrossReferenceDescriptor(feeder, sourceURI, eReferenceName,\r\n\t\t\t\t\t\t\t\tECrossReferenceDescriptor.NO_INDEX, target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4. unload resource set. this is where the NPE happened\r\n\t\tr.unload();\r\n\r\n\t\tfeeder.commit();\r\n\r\n\t\t// 5. assert we indexed what was intended\r\n\t\tEObjectDescriptor desc = index.eObjectDAO().createQueryEObjectsByType(EcorePackage.eINSTANCE.getEClass())\r\n\t\t\t\t.executeSingleResult();\r\n\r\n\t\tassertNotNull(\"Didn't return the object descriptor.\", desc);\r\n\t\tassertEquals(EcoreUtil.getURI(c1), desc.getFragmentURI());\r\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setUp() throws Exception {\r\n\t\ttestFile\t=\tFile.createTempFile(\"resourceUnloadingTest\", \"xmi\");\r\n\t}","id":21890,"modified_method":"public void setUp() throws Exception {\r\n\t\tResource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(\"xmi\", new XMIResourceFactoryImpl());\r\n\t\ttestFile = File.createTempFile(\"resourceUnloadingTest\", \".xmi\");\r\n\t}","commit_id":"0c842708c0fa1ea64e810dfe599b8ccfc8215626","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n   * Constructor used when processing Views (ie. no {@link BatchReportReader} instance is available in the container)\n   */\n  public NewCoverageMeasuresStep(TreeRootHolder treeRootHolder, PeriodsHolder periodsHolder,\n    MeasureRepository measureRepository, final MetricRepository metricRepository) {\n    this.treeRootHolder = treeRootHolder;\n    this.periodsHolder = periodsHolder;\n    this.batchReportReader = null;\n    this.metricRepository = metricRepository;\n    this.measureRepository = measureRepository;\n  }","id":21891,"modified_method":"/**\n   * Constructor used when processing Views (ie. no {@link BatchReportReader} instance is available in the container)\n   */\n  public NewCoverageMeasuresStep(TreeRootHolder treeRootHolder, PeriodsHolder periodsHolder,\n    MeasureRepository measureRepository, final MetricRepository metricRepository) {\n    this.treeRootHolder = treeRootHolder;\n    this.periodsHolder = periodsHolder;\n    this.metricRepository = metricRepository;\n    this.measureRepository = measureRepository;\n    this.scmInfoRepository = null;\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public NewCoverageCounter createNewCounter() {\n      return new NewCoverageCounter(batchReportReader, inputMetricKeys);\n    }","id":21892,"modified_method":"@Override\n    public NewCoverageCounter createNewCounter() {\n      return new NewCoverageCounter(scmInfoRepository, inputMetricKeys);\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public void initialize(CounterInitializationContext context) {\n      Component fileComponent = context.getLeaf();\n      BatchReport.Changesets componentScm = batchReportReader.readChangesets(fileComponent.getReportAttributes().getRef());\n      if (componentScm == null) {\n        return;\n      }\n\n      Optional<Measure> hitsByLineMeasure = context.getMeasure(metricKeys.getCoverageLineHitsData());\n      if (!hitsByLineMeasure.isPresent() || hitsByLineMeasure.get().getValueType() == Measure.ValueType.NO_VALUE) {\n        return;\n      }\n\n      Map<Integer, Integer> hitsByLine = parseCountByLine(hitsByLineMeasure);\n      Map<Integer, Integer> conditionsByLine = parseCountByLine(context.getMeasure(metricKeys.getConditionsByLine()));\n      Map<Integer, Integer> coveredConditionsByLine = parseCountByLine(context.getMeasure(metricKeys.getCoveredConditionsByLine()));\n\n      for (Map.Entry<Integer, Integer> entry : hitsByLine.entrySet()) {\n        int lineId = entry.getKey();\n        int hits = entry.getValue();\n        int conditions = (Integer) ObjectUtils.defaultIfNull(conditionsByLine.get(lineId), 0);\n        int coveredConditions = (Integer) ObjectUtils.defaultIfNull(coveredConditionsByLine.get(lineId), 0);\n        BatchReport.Changesets.Changeset changeset = componentScm.getChangeset(componentScm.getChangesetIndexByLine(lineId - 1));\n        Long date = changeset.hasDate() ? changeset.getDate() : null;\n\n        analyze(context.getPeriods(), date, hits, conditions, coveredConditions);\n      }\n    }","id":21893,"modified_method":"@Override\n    public void initialize(CounterInitializationContext context) {\n      Component fileComponent = context.getLeaf();\n      Optional<ScmInfo> scmInfoOptional = scmInfoRepository.getScmInfo(fileComponent);\n      if (!scmInfoOptional.isPresent()) {\n        return;\n      }\n      ScmInfo componentScm = scmInfoOptional.get();\n\n      Optional<Measure> hitsByLineMeasure = context.getMeasure(metricKeys.getCoverageLineHitsData());\n      if (!hitsByLineMeasure.isPresent() || hitsByLineMeasure.get().getValueType() == Measure.ValueType.NO_VALUE) {\n        return;\n      }\n\n      Map<Integer, Integer> hitsByLine = parseCountByLine(hitsByLineMeasure);\n      Map<Integer, Integer> conditionsByLine = parseCountByLine(context.getMeasure(metricKeys.getConditionsByLine()));\n      Map<Integer, Integer> coveredConditionsByLine = parseCountByLine(context.getMeasure(metricKeys.getCoveredConditionsByLine()));\n\n      for (Map.Entry<Integer, Integer> entry : hitsByLine.entrySet()) {\n        int lineId = entry.getKey();\n        int hits = entry.getValue();\n        int conditions = (Integer) ObjectUtils.defaultIfNull(conditionsByLine.get(lineId), 0);\n        int coveredConditions = (Integer) ObjectUtils.defaultIfNull(coveredConditionsByLine.get(lineId), 0);\n        long date = componentScm.getChangesetForLine(lineId).getDate();\n        analyze(context.getPeriods(), date, hits, conditions, coveredConditions);\n      }\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void execute() {\n    new PathAwareCrawler<>(\n      FormulaExecutorComponentVisitor.newBuilder(metricRepository, measureRepository)\n        .withVariationSupport(periodsHolder)\n        .buildFor(\n          Iterables.concat(\n            NewLinesAndConditionsCoverageFormula.from(batchReportReader),\n            NewItLinesAndConditionsCoverageFormula.from(batchReportReader),\n            NewOverallLinesAndConditionsCoverageFormula.from(batchReportReader),\n            FORMULAS)))\n              .visit(treeRootHolder.getRoot());\n  }","id":21894,"modified_method":"@Override\n  public void execute() {\n    new PathAwareCrawler<>(\n      FormulaExecutorComponentVisitor.newBuilder(metricRepository, measureRepository)\n        .withVariationSupport(periodsHolder)\n        .buildFor(\n          Iterables.concat(\n            NewLinesAndConditionsCoverageFormula.from(scmInfoRepository),\n            NewItLinesAndConditionsCoverageFormula.from(scmInfoRepository),\n            NewOverallLinesAndConditionsCoverageFormula.from(scmInfoRepository),\n            FORMULAS)))\n      .visit(treeRootHolder.getRoot());\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public NewCoverageCounter(BatchReportReader batchReportReader, NewCoverageInputMetricKeys metricKeys) {\n      this.batchReportReader = batchReportReader;\n      this.metricKeys = metricKeys;\n    }","id":21895,"modified_method":"public NewCoverageCounter(ScmInfoRepository scmInfoRepository, NewCoverageInputMetricKeys metricKeys) {\n      this.scmInfoRepository = scmInfoRepository;\n      this.metricKeys = metricKeys;\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Constructor used when processing a Report (ie. a {@link BatchReportReader} instance is available in the container)\n   */\n  public NewCoverageMeasuresStep(TreeRootHolder treeRootHolder, PeriodsHolder periodsHolder, BatchReportReader batchReportReader,\n    MeasureRepository measureRepository, final MetricRepository metricRepository) {\n    this.treeRootHolder = treeRootHolder;\n    this.periodsHolder = periodsHolder;\n    this.batchReportReader = batchReportReader;\n    this.metricRepository = metricRepository;\n    this.measureRepository = measureRepository;\n  }","id":21896,"modified_method":"/**\n   * Constructor used when processing a Report (ie. a {@link BatchReportReader} instance is available in the container)\n   */\n  public NewCoverageMeasuresStep(TreeRootHolder treeRootHolder, PeriodsHolder periodsHolder,\n    MeasureRepository measureRepository, final MetricRepository metricRepository, ScmInfoRepository scmInfoRepository) {\n    this.treeRootHolder = treeRootHolder;\n    this.periodsHolder = periodsHolder;\n    this.metricRepository = metricRepository;\n    this.measureRepository = measureRepository;\n    this.scmInfoRepository = scmInfoRepository;\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private NewItLinesAndConditionsCoverageFormula(BatchReportReader batchReportReader) {\n      super(batchReportReader,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.IT_COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.IT_CONDITIONS_BY_LINE_KEY, CoreMetrics.IT_COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","id":21897,"modified_method":"private NewItLinesAndConditionsCoverageFormula(ScmInfoRepository scmInfoRepository) {\n      super(scmInfoRepository,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.IT_COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.IT_CONDITIONS_BY_LINE_KEY, CoreMetrics.IT_COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public NewLinesAndConditionsFormula(BatchReportReader batchReportReader, NewCoverageInputMetricKeys inputMetricKeys, NewCoverageOutputMetricKeys outputMetricKeys) {\n      this.batchReportReader = batchReportReader;\n      this.inputMetricKeys = inputMetricKeys;\n      this.outputMetricKeys = outputMetricKeys;\n    }","id":21898,"modified_method":"public NewLinesAndConditionsFormula(ScmInfoRepository scmInfoRepository, NewCoverageInputMetricKeys inputMetricKeys, NewCoverageOutputMetricKeys outputMetricKeys) {\n      this.scmInfoRepository = scmInfoRepository;\n      this.inputMetricKeys = inputMetricKeys;\n      this.outputMetricKeys = outputMetricKeys;\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private NewOverallLinesAndConditionsCoverageFormula(BatchReportReader batchReportReader) {\n      super(batchReportReader,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.OVERALL_COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.OVERALL_CONDITIONS_BY_LINE_KEY, CoreMetrics.OVERALL_COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","id":21899,"modified_method":"private NewOverallLinesAndConditionsCoverageFormula(ScmInfoRepository scmInfoRepository) {\n      super(scmInfoRepository,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.OVERALL_COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.OVERALL_CONDITIONS_BY_LINE_KEY, CoreMetrics.OVERALL_COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private NewLinesAndConditionsCoverageFormula(BatchReportReader batchReportReader) {\n      super(batchReportReader,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.CONDITIONS_BY_LINE_KEY, CoreMetrics.COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","id":21900,"modified_method":"private NewLinesAndConditionsCoverageFormula(ScmInfoRepository scmInfoRepository) {\n      super(scmInfoRepository,\n        new NewCoverageInputMetricKeys(\n          CoreMetrics.COVERAGE_LINE_HITS_DATA_KEY, CoreMetrics.CONDITIONS_BY_LINE_KEY, CoreMetrics.COVERED_CONDITIONS_BY_LINE_KEY),\n        OUTPUT_METRIC_KEYS);\n    }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void no_measures_for_FILE_component_without_CoverageData() {\n    ReportComponent fileComponent = ReportComponent.builder(Component.Type.FILE, FILE_1_REF).setFileAttributes(new FileAttributes(false, null)).build();\n\n    treeRootHolder.setRoot(fileComponent);\n    reportReader.putChangesets(Changesets.newBuilder()\n      .setComponentRef(fileComponent.getReportAttributes().getRef())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2008-05-18\").getTime())\n        .build())\n      .addChangesetIndexByLine(0)\n      .build());\n\n    underTest.execute();\n\n    assertThat(measureRepository.isEmpty()).isTrue();\n  }","id":21901,"modified_method":"@Test\n  public void no_measures_for_FILE_component_without_CoverageData() {\n    ReportComponent fileComponent = ReportComponent.builder(Component.Type.FILE, FILE_1_REF).setFileAttributes(new FileAttributes(false, null)).build();\n\n    treeRootHolder.setRoot(fileComponent);\n    scmInfoRepository.setScmInfo(FILE_1_REF,\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-05-18\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-05-18\").getTime()).setRevision(\"rev-1\").build()\n      );\n\n    underTest.execute();\n\n    assertThat(measureRepository.isEmpty()).isTrue();\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void verify_no_measure_when_nothing_has_changed() {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    reportReader.putChangesets(BatchReport.Changesets.newBuilder()\n      .setComponentRef(FILE_COMPONENT.getReportAttributes().getRef())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2008-08-02\").getTime())\n        .build())\n      .addChangesetIndexByLine(0)\n      .addChangesetIndexByLine(0)\n      .addChangesetIndexByLine(0)\n      .addChangesetIndexByLine(0)\n      .build());\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), COVERAGE_LINE_HITS_DATA_KEY, newMeasureBuilder().create(\"2=1;3=1\"));\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), CONDITIONS_BY_LINE_KEY, newMeasureBuilder().create(\"2=1\"));\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), COVERED_CONDITIONS_BY_LINE_KEY, newMeasureBuilder().create(\"2=1\"));\n\n    underTest.execute();\n\n    assertThat(measureRepository.getAddedRawMeasures(FILE_COMPONENT.getReportAttributes().getRef())).isEmpty();\n  }","id":21902,"modified_method":"@Test\n  public void verify_no_measure_when_nothing_has_changed() {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    scmInfoRepository.setScmInfo(FILE_1_REF,\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build()\n      );\n\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), COVERAGE_LINE_HITS_DATA_KEY, newMeasureBuilder().create(\"2=1;3=1\"));\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), CONDITIONS_BY_LINE_KEY, newMeasureBuilder().create(\"2=1\"));\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), COVERED_CONDITIONS_BY_LINE_KEY, newMeasureBuilder().create(\"2=1\"));\n\n    underTest.execute();\n\n    assertThat(measureRepository.getAddedRawMeasures(FILE_COMPONENT.getReportAttributes().getRef())).isEmpty();\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void verify_measure_of_condition_not_computed_if_there_is_none() {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    reportReader.putChangesets(Changesets.newBuilder()\n        .setComponentRef(FILE_COMPONENT.getReportAttributes().getRef())\n        .addChangeset(Changesets.Changeset.newBuilder().build())\n        .addChangeset(Changesets.Changeset.newBuilder()\n          .setDate(parseDate(\"2007-01-15\").getTime())\n          .build())\n        .addChangeset(Changesets.Changeset.newBuilder()\n          .setDate(parseDate(\"2011-01-01\").getTime())\n          .build())\n        .addChangesetIndexByLine(0)\n        .addChangesetIndexByLine(1)\n        .addChangesetIndexByLine(2)\n        .build()\n    );\n\n    underTest.execute();\n\n    assertThat(measureRepository.isEmpty()).isTrue();\n  }","id":21903,"modified_method":"@Test\n  public void verify_measure_of_condition_not_computed_if_there_is_none() {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    scmInfoRepository.setScmInfo(FILE_1_REF,\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-2\").build()\n      );\n\n    underTest.execute();\n\n    assertThat(measureRepository.isEmpty()).isTrue();\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void verify_computation_of_measures_for_new_lines(String coverageLineHitsData,\n                                                            String newLinesToCover, String newUncoveredLines, String newConditionsToCover, String newUncoveredConditions) {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    reportReader.putChangesets(Changesets.newBuilder()\n      .setComponentRef(FILE_COMPONENT.getReportAttributes().getRef())\n      .addChangeset(Changesets.Changeset.newBuilder().build())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2007-01-15\").getTime())\n        .build())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2011-01-01\").getTime())\n        .build())\n      .addChangesetIndexByLine(0)\n      .addChangesetIndexByLine(2) // line 2\n      .addChangesetIndexByLine(1) // line 3\n      .addChangesetIndexByLine(2) // line 4\n      .build());\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), coverageLineHitsData, newMeasureBuilder().create(\"2=0;3=2;4=3\"));\n\n    underTest.execute();\n\n    assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_COMPONENT.getReportAttributes().getRef()))).contains(\n      entryOf(newLinesToCover, createMeasure(2d, null)),\n      entryOf(newUncoveredLines, createMeasure(1d, null)),\n      entryOf(newConditionsToCover, createMeasure(0d, null)),\n      entryOf(newUncoveredConditions, createMeasure(0d, null))\n    );\n  }","id":21904,"modified_method":"private void verify_computation_of_measures_for_new_lines(String coverageLineHitsData,\n    String newLinesToCover, String newUncoveredLines, String newConditionsToCover, String newUncoveredConditions) {\n    treeRootHolder.setRoot(FILE_COMPONENT);\n    scmInfoRepository.setScmInfo(FILE_1_REF,\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-2\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build()\n      );\n\n    measureRepository.addRawMeasure(FILE_COMPONENT.getReportAttributes().getRef(), coverageLineHitsData, newMeasureBuilder().create(\"2=0;3=2;4=3\"));\n\n    underTest.execute();\n\n    assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_COMPONENT.getReportAttributes().getRef()))).contains(\n      entryOf(newLinesToCover, createMeasure(2d, null)),\n      entryOf(newUncoveredLines, createMeasure(1d, null)),\n      entryOf(newConditionsToCover, createMeasure(0d, null)),\n      entryOf(newUncoveredConditions, createMeasure(0d, null))\n      );\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void defineChangeSetsAndMeasures(int componentRef, MetricKeys metricKeys, MeasureValues line4, MeasureValues line6) {\n    reportReader.putChangesets(Changesets.newBuilder()\n      .setComponentRef(componentRef)\n      .addChangeset(Changesets.Changeset.newBuilder().build())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2007-01-15\").getTime())\n        .build())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2011-01-01\").getTime())\n        .build())\n      .addChangeset(Changesets.Changeset.newBuilder()\n        .setDate(parseDate(\"2012-02-23\").getTime())\n        .build())\n      .addChangesetIndexByLine(0)\n      .addChangesetIndexByLine(2) // line 2\n      .addChangesetIndexByLine(1) // line 3\n      .addChangesetIndexByLine(2) // line 4\n      .addChangesetIndexByLine(3) // line 5\n      .addChangesetIndexByLine(3) // line 6\n      .addChangesetIndexByLine(3) // line 7\n      .build());\n    measureRepository.addRawMeasure(componentRef, metricKeys.coverageLineHitsData, newMeasureBuilder().create(\"2=0;3=2;4=\" + line4.lineHits + \";5=1;6=\" + line6.lineHits + \";7=0\"));\n    measureRepository.addRawMeasure(componentRef, metricKeys.conditionsByLine, newMeasureBuilder().create(\"4=\" + line4.coveredConditions + \";6=\" + line6.coveredConditions));\n    measureRepository.addRawMeasure(componentRef, metricKeys.coveredConditionsByLine,\n      newMeasureBuilder().create(\"4=\" + line4.uncoveredConditions + \";6=\" + line6.uncoveredConditions));\n  }","id":21905,"modified_method":"private void defineChangeSetsAndMeasures(int componentRef, MetricKeys metricKeys, MeasureValues line4, MeasureValues line6) {\n    scmInfoRepository.setScmInfo(componentRef,\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-2\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2012-02-23\").getTime()).setRevision(\"rev-3\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2012-02-23\").getTime()).setRevision(\"rev-3\").build(),\n      Changeset.newChangesetBuilder().setDate(parseDate(\"2012-02-23\").getTime()).setRevision(\"rev-3\").build()\n      );\n\n    measureRepository.addRawMeasure(componentRef, metricKeys.coverageLineHitsData, newMeasureBuilder().create(\"2=0;3=2;4=\" + line4.lineHits + \";5=1;6=\" + line6.lineHits + \";7=0\"));\n    measureRepository.addRawMeasure(componentRef, metricKeys.conditionsByLine, newMeasureBuilder().create(\"4=\" + line4.coveredConditions + \";6=\" + line6.coveredConditions));\n    measureRepository.addRawMeasure(componentRef, metricKeys.coveredConditionsByLine,\n      newMeasureBuilder().create(\"4=\" + line4.uncoveredConditions + \";6=\" + line6.uncoveredConditions));\n  }","commit_id":"9b8a443e7b842ad4fb115e8eea2c1ac222da3bb2","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    EditorCell propertyCell = this.createVarNameCellinternal(context, node);\n    PropertyAttributeConcept propertyAttributeConcept = node.getPropertyAttribute(propertyName);\n    if(propertyAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createPropertyAttributeCell(context, propertyAttributeConcept, propertyCell);\n    } else \n    return propertyCell;\n  }","id":21906,"modified_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"varName\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createVarNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createAttributedNodeCellinternal(EditorContext context, SNode node) {\n    SNode referencedNode = null;\n    referencedNode = node.getReferent(\"attributedNode\");\n    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, \"attributedNode\", context.getOperationContext().getScope());\n    SReference reference = node.getReference(\"attributedNode\");\n    if(reference != null && !(reference.isResolved())) {\n      EditorCell_Error noRefCell = EditorCell_Error.create(context, node, null);\n      noRefCell.setText(BadReferenceTextProvider.getBadReferenceText(reference));\n      noRefCell.setEditable(true);\n      noRefCell.setSelectable(true);\n      noRefCell.setDrawBorder(false);\n      noRefCell.setDrawBrackets(true);\n      noRefCell.setBracketsColor(Color.black);\n      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n      noRefCell.putUserObject(EditorCell.CELL_ID, \"1136720096747\");\n      noRefCell.setLayoutConstraint(\"\");\n      noRefCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n      noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n      return noRefCell;\n    }\n    if(referencedNode == null) {\n      {\n        EditorCell_Constant noRefCell = EditorCell_Constant.create(context, node, null, true);\n        noRefCell.setDefaultText(\"\");\n        noRefCell.setEditable(true);\n        noRefCell.setSelectable(true);\n        noRefCell.setDrawBorder(false);\n        noRefCell.setDrawBrackets(true);\n        noRefCell.setBracketsColor(Color.black);\n        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n        noRefCell.putUserObject(EditorCell.CELL_ID, \"1136720096747\");\n        noRefCell.setLayoutConstraint(\"\");\n        noRefCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n        noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n        return noRefCell;\n      }\n    }\n    EditorCell editorCell = context.createNodeCell(referencedNode);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n    editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n    editorCell.setLayoutConstraint(\"\");\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteReferenceToNode(node, \"attributedNode\", referencedNode));\n    return editorCell;\n  }","id":21907,"modified_method":"public EditorCell createAttributedNodeCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.setBracketsColor(Color.black);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096747\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"@\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096745\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21908,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"@\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096745\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createAttributedNodeCell(EditorContext context, SNode node) {\n    String linkRole = \"attributedNode\";\n    EditorCell refCell = this.createAttributedNodeCellinternal(context, node);\n    LinkAttributeConcept linkAttributeConcept = node.getLinkAttribute(linkRole);\n    if(linkAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createLinkAttributeCell(context, linkAttributeConcept, refCell);\n    } else \n    return refCell;\n  }","id":21909,"modified_method":"public EditorCell createAttributedNodeCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, context);\n    provider.setRole(\"attributedNode\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createAttributedNodeCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, propertyName, false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"varName\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136728380327\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21910,"modified_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n      editorCellLabel.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136728380327\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, propertyName, false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"varName\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1137418665045\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21911,"modified_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n      editorCellLabel.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1137418665045\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    EditorCell propertyCell = this.createVarNameCellinternal(context, node);\n    PropertyAttributeConcept propertyAttributeConcept = node.getPropertyAttribute(propertyName);\n    if(propertyAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createPropertyAttributeCell(context, propertyAttributeConcept, propertyCell);\n    } else \n    return propertyCell;\n  }","id":21912,"modified_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"varName\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createVarNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1137418661903\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21913,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"#\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1137418661903\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createAttributedNodeCell(EditorContext context, SNode node) {\n    String linkRole = \"attributedNode\";\n    EditorCell refCell = this.createAttributedNodeCellinternal(context, node);\n    LinkAttributeConcept linkAttributeConcept = node.getLinkAttribute(linkRole);\n    if(linkAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createLinkAttributeCell(context, linkAttributeConcept, refCell);\n    } else \n    return refCell;\n  }","id":21914,"modified_method":"public EditorCell createAttributedNodeCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, context);\n    provider.setRole(\"attributedNode\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createAttributedNodeCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, propertyName, false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"varName\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136728429078\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21915,"modified_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n      editorCellLabel.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136728429078\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createAttributedNodeCellinternal(EditorContext context, SNode node) {\n    SNode referencedNode = null;\n    referencedNode = node.getReferent(\"attributedNode\");\n    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, \"attributedNode\", context.getOperationContext().getScope());\n    SReference reference = node.getReference(\"attributedNode\");\n    if(reference != null && !(reference.isResolved())) {\n      EditorCell_Error noRefCell = EditorCell_Error.create(context, node, null);\n      noRefCell.setText(BadReferenceTextProvider.getBadReferenceText(reference));\n      noRefCell.setEditable(true);\n      noRefCell.setSelectable(true);\n      noRefCell.setDrawBorder(false);\n      noRefCell.setDrawBrackets(true);\n      noRefCell.setBracketsColor(Color.black);\n      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n      noRefCell.putUserObject(EditorCell.CELL_ID, \"1136727263717\");\n      noRefCell.setLayoutConstraint(\"\");\n      noRefCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n      noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n      return noRefCell;\n    }\n    if(referencedNode == null) {\n      {\n        EditorCell_Constant noRefCell = EditorCell_Constant.create(context, node, null, true);\n        noRefCell.setDefaultText(\"\");\n        noRefCell.setEditable(true);\n        noRefCell.setSelectable(true);\n        noRefCell.setDrawBorder(false);\n        noRefCell.setDrawBrackets(true);\n        noRefCell.setBracketsColor(Color.black);\n        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n        noRefCell.putUserObject(EditorCell.CELL_ID, \"1136727263717\");\n        noRefCell.setLayoutConstraint(\"\");\n        noRefCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n        noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n        return noRefCell;\n      }\n    }\n    EditorCell editorCell = context.createNodeCell(referencedNode);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.putUserObject(EditorCell.ROLE, \"attributedNode\");\n    editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n    editorCell.setLayoutConstraint(\"\");\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteReferenceToNode(node, \"attributedNode\", referencedNode));\n    return editorCell;\n  }","id":21916,"modified_method":"public EditorCell createAttributedNodeCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.setBracketsColor(Color.black);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136727263717\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    EditorCell propertyCell = this.createVarNameCellinternal(context, node);\n    PropertyAttributeConcept propertyAttributeConcept = node.getPropertyAttribute(propertyName);\n    if(propertyAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createPropertyAttributeCell(context, propertyAttributeConcept, propertyCell);\n    } else \n    return propertyCell;\n  }","id":21917,"modified_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"varName\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createVarNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"*\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136727263715\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21918,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"*\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136727263715\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String convertToMetaString(String s) {\n    String s1 = s.replace('\\\\', File.separatorChar);\n    return s1.replace(\"\\\\\", \"\\\\\\\\\");\n  }","id":21919,"modified_method":"public static String convertToMetaString(String s) {\n    if (s == null) return null;\n    return s.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\");\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addKeyMap(new _PatternExpression_KeyMap());\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"[P>\"));\n    editorCell.addEditorCell(this.createPatternNodeCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"<P]\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096749\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21920,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addKeyMap(new _PatternExpression_KeyMap());\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"[P>\"));\n    editorCell.addEditorCell(this.createPatternNodeCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"<P]\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096749\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createPatternNodeCell(EditorContext context, SNode node) {\n    String linkRole = \"patternNode\";\n    EditorCell refCell = this.createPatternNodeCellinternal(context, node);\n    LinkAttributeConcept linkAttributeConcept = node.getLinkAttribute(linkRole);\n    if(linkAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createLinkAttributeCell(context, linkAttributeConcept, refCell);\n    } else \n    return refCell;\n  }","id":21921,"modified_method":"public EditorCell createPatternNodeCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, context);\n    provider.setRole(\"patternNode\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createPatternNodeCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createPatternNodeCellinternal(EditorContext context, SNode node) {\n    SNode referencedNode = null;\n    referencedNode = node.getChild(\"patternNode\");\n    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, \"patternNode\", context.getOperationContext().getScope());\n    if(referencedNode == null) {\n      {\n        EditorCell_Constant noRefCell = EditorCell_Constant.create(context, node, null, true);\n        noRefCell.setDefaultText(\"\");\n        noRefCell.setEditable(true);\n        noRefCell.setSelectable(true);\n        noRefCell.setDrawBorder(false);\n        noRefCell.setDrawBrackets(true);\n        noRefCell.setBracketsColor(Color.black);\n        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n        noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration, context));\n        noRefCell.putUserObject(EditorCell.CELL_ID, \"1136720096751\");\n        noRefCell.setLayoutConstraint(\"\");\n        noRefCell.putUserObject(EditorCell.ROLE, \"patternNode\");\n        noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n        return noRefCell;\n      }\n    }\n    EditorCell editorCell = context.createNodeCell(referencedNode);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.putUserObject(EditorCell.ROLE, \"patternNode\");\n    editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);\n    editorCell.setLayoutConstraint(\"\");\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteNode(referencedNode));\n    editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration, context));\n    return editorCell;\n  }","id":21922,"modified_method":"public EditorCell createPatternNodeCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(true);\n    editorCell.setBracketsColor(Color.black);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096751\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    EditorCell propertyCell = this.createVarNameCellinternal(context, node);\n    PropertyAttributeConcept propertyAttributeConcept = node.getPropertyAttribute(propertyName);\n    if(propertyAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createPropertyAttributeCell(context, propertyAttributeConcept, propertyCell);\n    } else \n    return propertyCell;\n  }","id":21923,"modified_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"varName\");\n    provider.setNoTargetText(\"<var>\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createVarNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, propertyName, false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"varName\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096755\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21924,"modified_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n      editorCellLabel.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096755\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"#\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096754\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21925,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"#\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096754\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"$\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096759\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21926,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"$\"));\n    editorCell.addEditorCell(this.createVarNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096759\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    EditorCell propertyCell = this.createVarNameCellinternal(context, node);\n    PropertyAttributeConcept propertyAttributeConcept = node.getPropertyAttribute(propertyName);\n    if(propertyAttributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createPropertyAttributeCell(context, propertyAttributeConcept, propertyCell);\n    } else \n    return propertyCell;\n  }","id":21927,"modified_method":"public EditorCell createVarNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"varName\");\n    provider.setNoTargetText(\"<property var>\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createVarNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node) {\n    String propertyName = \"varName\";\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, propertyName, false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD_ITALIC);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"varName\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096760\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21928,"modified_method":"public EditorCell createVarNameCellinternal(EditorContext context, SNode node, CellProviderWithRole aProvider) {\n    CellProviderWithRole provider = aProvider;\n    provider.setAuxiliaryCellProvider(null);\n    EditorCell editorCell = provider.createEditorCell(context);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD_ITALIC);\n    if(editorCell instanceof EditorCell_Label) {\n      EditorCell_Label editorCellLabel = (EditorCell_Label)editorCell;\n      editorCellLabel.setEditable(true);\n      editorCellLabel.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096760\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"_\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096762\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","id":21929,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"_\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1136720096762\");\n    editorCell.setLayoutConstraint(\"\");\n    return editorCell;\n  }","commit_id":"4a64fdbf967e7500573f681bdfcf8dc5704006da","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static CephInfo getStorageInfo() {\n\t\tCephInfo info = null;\n\n\t\ttry {\n\t\t\tinfo = Transactions.find(new CephInfo());\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Failed to get Ceph storage info for: \" + StorageProperties.NAME + \". Loading defaults.\");\n\t\t\ttry {\n\t\t\t\tinfo = Transactions.saveDirect(generateDefault());\n\t\t\t} catch (Exception e1) {\n\t\t\t\ttry {\n\t\t\t\t\tinfo = Transactions.find(new CephInfo());\n\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\tLOG.warn(\"Failed to retrieve->persist->retrieve storage info (CephInfo entity)\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (info == null) {\n\t\t\tinfo = generateDefault();\n\t\t}\n\n\t\treturn info;\n\t}","id":21930,"modified_method":"public static CephInfo getStorageInfo() {\n\t\tCephInfo info = null;\n\n\t\ttry {\n\t\t\tinfo = Transactions.find(new CephInfo());\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Ceph-RBD information for \" + StorageProperties.NAME + \" not found. Loading defaults.\");\n\t\t\ttry {\n\t\t\t\tinfo = Transactions.saveDirect(generateDefault());\n\t\t\t} catch (Exception e1) {\n\t\t\t\ttry {\n\t\t\t\t\tinfo = Transactions.find(new CephInfo());\n\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\tLOG.warn(\"Failed to persist and retrieve CephInfo entity\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (info == null) {\n\t\t\tinfo = generateDefault();\n\t\t}\n\n\t\treturn info;\n\t}","commit_id":"c813771cf735e6cb59701516f391b5bf2c39e52c","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static SANInfo getStorageInfo() {\n\t\tTransactionResource tran = Entities.transactionFor(SANInfo.class);\n        SANInfo conf = null;\n\t\ttry {\n\t\t\tconf = Entities.uniqueResult(new SANInfo(StorageProperties.NAME));\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch ( NoSuchElementException e ) {\n\t\t\tLOG.warn(\"Failed to get storage info for: \" + StorageProperties.NAME + \". Loading defaults.\");\n\t\t\tconf = newDefault();\n\t\t\tEntities.persist(conf);\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch (Exception t) {\n\t\t\tLOG.error(\"Unable to get storage info for: \" + StorageProperties.NAME);\n\t\t\ttran.rollback();\n\t\t\tconf = newDefault();\n\t\t}\n\t\treturn conf;\n\t}","id":21931,"modified_method":"public static SANInfo getStorageInfo() {\n\t\tSANInfo conf = null;\n\n\t\ttry {\n\t\t\tconf = Transactions.find(new SANInfo());\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Storage information for \" + StorageProperties.NAME + \" not found. Loading defaults.\");\n\t\t\ttry {\n\t\t\t\tconf = Transactions.saveDirect(newDefault());\n\t\t\t} catch (Exception e1) {\n\t\t\t\ttry {\n\t\t\t\t\tconf = Transactions.find(new SANInfo());\n\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\tLOG.warn(\"Failed to persist and retrieve SANInfo entity\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (conf == null) {\n\t\t\tconf = newDefault();\n\t\t}\n\n\t\treturn conf;\n\t}","commit_id":"c813771cf735e6cb59701516f391b5bf2c39e52c","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static DASInfo getStorageInfo() {\n\t\tDASInfo conf = null;\n        TransactionResource tran = Entities.transactionFor(DASInfo.class);\n\t\ttry {\n\t\t\tconf = Entities.uniqueResult(new DASInfo(StorageProperties.NAME));\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch ( NoSuchElementException e ) {\n\t\t\tLOG.warn(\"Failed to get storage info for: \" + StorageProperties.NAME + \". Loading defaults.\");\n\t\t\tconf =  new DASInfo(StorageProperties.NAME, \n\t\t\t\t\tStorageProperties.DAS_DEVICE);\n\t\t\tEntities.persist(conf);\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch (Exception t) {\n\t\t\tLOG.error(\"Unable to get storage info for: \" + StorageProperties.NAME);\n\t\t\ttran.rollback();\n            return new DASInfo(StorageProperties.NAME,\n\t\t\t\t\tStorageProperties.DAS_DEVICE);\n\t\t}\n\t\treturn conf;\n\t}","id":21932,"modified_method":"public static DASInfo getStorageInfo() {\n\t\tDASInfo conf = null;\n\n\t\ttry {\n\t\t\tconf = Transactions.find(new DASInfo());\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"DAS information for \" + StorageProperties.NAME + \" not found. Loading defaults.\");\n\t\t\ttry {\n\t\t\t\tconf = Transactions.saveDirect(new DASInfo(StorageProperties.NAME, StorageProperties.DAS_DEVICE));\n\t\t\t} catch (Exception e1) {\n\t\t\t\ttry {\n\t\t\t\t\tconf = Transactions.find(new DASInfo());\n\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\tLOG.warn(\"Failed to persist and retrieve DASInfo entity\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (conf == null) {\n\t\t\tconf = new DASInfo(StorageProperties.NAME, StorageProperties.DAS_DEVICE);\n\t\t}\n\n\t\treturn conf;\n\t}","commit_id":"314001c5b782293db5e9c35e99afb688ced2a54f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static DirectStorageInfo getStorageInfo() {\n\t\tDirectStorageInfo conf = null;\n        TransactionResource tran = Entities.transactionFor(DirectStorageInfo.class);\n\t\ttry {\n\t\t\tconf = Entities.uniqueResult(new DirectStorageInfo(StorageProperties.NAME));\n\t\t\t// EUCA-3597 Introduced a new column for timeout. Ensure that its populated in the DB the first time\n\t\t\tif (null == conf.getTimeoutInMillis()) {\n\t\t\t\tconf.setTimeoutInMillis(StorageProperties.timeoutInMillis);\n\t\t\t\tEntities.merge(conf);\n\t\t\t}\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch ( NoSuchElementException e ) {\n\t\t\tLOG.warn(\"Failed to get storage info for: \" + StorageProperties.NAME + \". Loading defaults.\");\n\t\t\tconf =  new DirectStorageInfo(StorageProperties.NAME, \n\t\t\t\t\tStorageProperties.iface, \n\t\t\t\t\tStorageProperties.storageRootDirectory,\n\t\t\t\t\tStorageProperties.zeroFillVolumes, \n\t\t\t\t\tStorageProperties.timeoutInMillis);\n\t\t\tEntities.persist(conf);\n\t\t\ttran.commit();\n\t\t}\n\t\tcatch (Exception t) {\n\t\t\tLOG.error(\"Unable to get storage info for: \" + StorageProperties.NAME);\n\t\t\ttran.rollback();\n\t\t\treturn new DirectStorageInfo(StorageProperties.NAME, \n\t\t\t\t\tStorageProperties.iface, \n\t\t\t\t\tStorageProperties.storageRootDirectory,\n\t\t\t\t\tStorageProperties.zeroFillVolumes, \n\t\t\t\t\tStorageProperties.timeoutInMillis);\n\t\t}\n\t\treturn conf;\n\t}","id":21933,"modified_method":"public static DirectStorageInfo getStorageInfo() {\n\t\tDirectStorageInfo conf = null;\n\n\t\ttry {\n\t\t\tconf = Transactions.find(new DirectStorageInfo());\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Direct storage information for \" + StorageProperties.NAME + \" not found. Loading defaults.\");\n\t\t\ttry {\n\t\t\t\tconf = Transactions.saveDirect(new DirectStorageInfo(StorageProperties.NAME, StorageProperties.iface, StorageProperties.storageRootDirectory,\n\t\t\t\t\t\tStorageProperties.zeroFillVolumes, StorageProperties.timeoutInMillis));\n\t\t\t} catch (Exception e1) {\n\t\t\t\ttry {\n\t\t\t\t\tconf = Transactions.find(new DirectStorageInfo());\n\t\t\t\t} catch (Exception e2) {\n\t\t\t\t\tLOG.warn(\"Failed to persist and retrieve DirectStorageInfo entity\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (conf == null) {\n\t\t\tconf = new DirectStorageInfo(StorageProperties.NAME, StorageProperties.iface, StorageProperties.storageRootDirectory,\n\t\t\t\t\tStorageProperties.zeroFillVolumes, StorageProperties.timeoutInMillis);\n\t\t}\n\n\t\treturn conf;\n\t}","commit_id":"314001c5b782293db5e9c35e99afb688ced2a54f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void checkAndAddUser() {\n        TransactionResource outter = Entities.transactionFor(CHAPUserInfo.class);\n\t\ttry {\n\t\t\tCHAPUserInfo userInfo = Entities.uniqueResult(new CHAPUserInfo(\"eucalyptus\"));\n            outter.commit();\n\t\t\t//check if account actually exists, if not create it.\n\t\t\tif(!checkUser(\"eucalyptus\")) {\n\t\t\t\ttry {\n\t\t\t\t\taddUser(\"eucalyptus\", blockStorageUtilSvc.decryptSCTargetPassword(userInfo.getEncryptedPassword()));\n\t\t\t\t} catch (EucalyptusCloudException e1) {\n\t\t\t\t\tLOG.error(e1);\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(NoSuchElementException ex) {\n            outter.rollback();\n\t\t\tboolean addUser = true;\n\t\t\tString encryptedPassword = null; \n            try (TransactionResource inner = Entities.transactionFor(CHAPUserInfo.class)) {\n                if (checkUser(\"eucalyptus\")) {\n                    try {\n                        LOG.debug(\"No DB record found for chapuser although a eucalyptus account exists on SC. Looking for all records with chapuser eucalyptus\");\n                        CHAPUserInfo userInfo = new CHAPUserInfo(\"eucalyptus\");\n                        userInfo.setScName(null);\n                        CHAPUserInfo currentUserInfo = Entities.uniqueResult(userInfo);\n                        if (null != currentUserInfo && null != currentUserInfo.getEncryptedPassword()) {\n                            LOG.debug(\"Found a DB record, copying the password to the new record\");\n                            addUser = false;\n                            encryptedPassword = currentUserInfo.getEncryptedPassword();\n                        }\n                    } catch (Exception e1) {\n                        LOG.debug(\"No old DB records found. The only way is to delete the chapuser and create a fresh account\");\n                        try {\n                            deleteUser(\"eucalyptus\");\n                        } catch (Exception e) {\n                            LOG.error(\"Failed to delete chapuser\", e);\n                        }\n                    }\n                }\n\n                if (addUser) {\n                    // Windows iscsi initiator requires the password length to be 12-16 bytes\n                    String password = Hashes.getRandom(16);\n                    password = password.substring(0, 16);\n                    try {\n                        addUser(\"eucalyptus\", password);\n                        encryptedPassword = blockStorageUtilSvc.encryptSCTargetPassword(password);\n                    } catch (Exception e) {\n                        LOG.error(\"Failed to add chapuser to SC\", e);\n                        return;\n                    }\n                }\n\n                try {\n                    Entities.persist(new CHAPUserInfo(\"eucalyptus\", encryptedPassword));\n                } catch (Exception e) {\n                    LOG.error(e);\n                }\n                inner.commit();\n            }\n\t\t} catch (TransactionException e) {\n            LOG.error(e);\n        }\n    }","id":21934,"modified_method":"private void checkAndAddUser() {\n\t\ttry (TransactionResource outter = Entities.transactionFor(CHAPUserInfo.class)) {\n\t\t\tCHAPUserInfo userInfo = Entities.uniqueResult(new CHAPUserInfo(\"eucalyptus\"));\n            outter.commit();\n\t\t\t//check if account actually exists, if not create it.\n\t\t\tif(!checkUser(\"eucalyptus\")) {\n\t\t\t\ttry {\n\t\t\t\t\taddUser(\"eucalyptus\", blockStorageUtilSvc.decryptSCTargetPassword(userInfo.getEncryptedPassword()));\n\t\t\t\t} catch (EucalyptusCloudException e1) {\n\t\t\t\t\tLOG.error(e1);\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(NoSuchElementException ex) {\n\t\t\tboolean addUser = true;\n\t\t\tString encryptedPassword = null; \n            try (TransactionResource inner = Entities.transactionFor(CHAPUserInfo.class)) {\n                if (checkUser(\"eucalyptus\")) {\n                    try {\n                        LOG.debug(\"No DB record found for chapuser although a eucalyptus account exists on SC. Looking for all records with chapuser eucalyptus\");\n                        CHAPUserInfo userInfo = new CHAPUserInfo(\"eucalyptus\");\n                        userInfo.setScName(null);\n                        CHAPUserInfo currentUserInfo = Entities.uniqueResult(userInfo);\n                        if (null != currentUserInfo && null != currentUserInfo.getEncryptedPassword()) {\n                            LOG.debug(\"Found a DB record, copying the password to the new record\");\n                            addUser = false;\n                            encryptedPassword = currentUserInfo.getEncryptedPassword();\n                        }\n                    } catch (Exception e1) {\n                        LOG.debug(\"No old DB records found. The only way is to delete the chapuser and create a fresh account\");\n                        try {\n                            deleteUser(\"eucalyptus\");\n                        } catch (Exception e) {\n                            LOG.error(\"Failed to delete chapuser\", e);\n                        }\n                    }\n                }\n\n                if (addUser) {\n                    // Windows iscsi initiator requires the password length to be 12-16 bytes\n                    String password = Hashes.getRandom(16);\n                    password = password.substring(0, 16);\n                    try {\n                        addUser(\"eucalyptus\", password);\n                        encryptedPassword = blockStorageUtilSvc.encryptSCTargetPassword(password);\n                    } catch (Exception e) {\n                        LOG.error(\"Failed to add chapuser to SC\", e);\n                        return;\n                    }\n                }\n\n                try {\n                    Entities.persist(new CHAPUserInfo(\"eucalyptus\", encryptedPassword));\n                } catch (Exception e) {\n                    LOG.error(e);\n                }\n                inner.commit();\n            }\n\t\t} catch (TransactionException e) {\n            LOG.error(e);\n        }\n    }","commit_id":"314001c5b782293db5e9c35e99afb688ced2a54f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlElement_6666499814681529662(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlBaseAttribute\");\n      Iterable<SNode> concepts;\n      concepts = SConceptOperations.getAllSubConcepts(concept, _context.getModel(), operationContext.getScope());\n      for (final SNode subconcept : concepts) {\n        if (!(SNodeOperations.isInstanceOf(subconcept, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"))) {\n          continue;\n        }\n        if (SConceptPropertyOperations.getBoolean(subconcept, \"abstract\")) {\n          continue;\n        }\n        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept, _context.getSourceNode()) {\n          public SNode doSubstitute(String pattern) {\n            SNode result = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept), null);\n            return ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(), \"attributes\", true)).insertElement(0, result);\n          }\n        });\n      }\n    }\n    return result;\n  }","id":21935,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlElement_6666499814681529662(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      final String[] lastPattern = new String[1];\n      List<INodeSubstituteAction> list = ModelActions.createChildSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlBaseAttribute\"), new AbstractChildNodeSetter() {\n        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, IScope p3) {\n          return substitute(newChild, lastPattern[0]);\n        }\n\n        private SNode substitute(SNode result, String pattern) {\n          return ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(), \"attributes\", true)).insertElement(0, result);\n        }\n      }, operationContext);\n      for (final INodeSubstituteAction action : list) {\n        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {\n          @Override\n          public SNode substitute(@Nullable EditorContext context, String pattern) {\n            lastPattern[0] = pattern;\n            return super.substitute(context, pattern);\n          }\n        });\n      }\n    }\n    return result;\n  }","commit_id":"c2981d2fd8c13f8ce5ab96bca1247daecf34ca05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlContent_6999033275467483657(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlContent\");\n      Iterable<SNode> concepts;\n      concepts = SConceptOperations.getAllSubConcepts(concept, _context.getModel(), operationContext.getScope());\n      for (final SNode subconcept : concepts) {\n        if (!(SNodeOperations.isInstanceOf(subconcept, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"))) {\n          continue;\n        }\n        if (SConceptPropertyOperations.getBoolean(subconcept, \"abstract\")) {\n          continue;\n        }\n        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept, _context.getSourceNode()) {\n          public SNode doSubstitute(String pattern) {\n            SNode result = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept), null);\n            return SNodeOperations.insertNextSiblingChild(_context.getSourceNode(), result);\n          }\n        });\n      }\n    }\n    return result;\n  }","id":21936,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlContent_6999033275467483657(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      final String[] lastPattern = new String[1];\n      List<INodeSubstituteAction> list = ModelActions.createChildSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlContent\"), new AbstractChildNodeSetter() {\n        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, IScope p3) {\n          return substitute(newChild, lastPattern[0]);\n        }\n\n        private SNode substitute(SNode result, String pattern) {\n          return SNodeOperations.insertNextSiblingChild(_context.getSourceNode(), result);\n        }\n      }, operationContext);\n      for (final INodeSubstituteAction action : list) {\n        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {\n          @Override\n          public SNode substitute(@Nullable EditorContext context, String pattern) {\n            lastPattern[0] = pattern;\n            return super.substitute(context, pattern);\n          }\n        });\n      }\n    }\n    return result;\n  }","commit_id":"c2981d2fd8c13f8ce5ab96bca1247daecf34ca05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlValuePart_3080189811177408103(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlValuePart\");\n      Iterable<SNode> concepts;\n      concepts = SConceptOperations.getAllSubConcepts(concept, _context.getModel(), operationContext.getScope());\n      for (final SNode subconcept : concepts) {\n        if (!(SNodeOperations.isInstanceOf(subconcept, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"))) {\n          continue;\n        }\n        if (SConceptPropertyOperations.getBoolean(subconcept, \"abstract\")) {\n          continue;\n        }\n        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept, _context.getSourceNode()) {\n          public SNode doSubstitute(String pattern) {\n            SNode result = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept), null);\n            return SNodeOperations.insertNextSiblingChild(_context.getSourceNode(), result);\n          }\n        });\n      }\n    }\n    return result;\n  }","id":21937,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlValuePart_3080189811177408103(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      final String[] lastPattern = new String[1];\n      List<INodeSubstituteAction> list = ModelActions.createChildSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlValuePart\"), new AbstractChildNodeSetter() {\n        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, IScope p3) {\n          return substitute(newChild, lastPattern[0]);\n        }\n\n        private SNode substitute(SNode result, String pattern) {\n          return SNodeOperations.insertNextSiblingChild(_context.getSourceNode(), result);\n        }\n      }, operationContext);\n      for (final INodeSubstituteAction action : list) {\n        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {\n          @Override\n          public SNode substitute(@Nullable EditorContext context, String pattern) {\n            lastPattern[0] = pattern;\n            return super.substitute(context, pattern);\n          }\n        });\n      }\n    }\n    return result;\n  }","commit_id":"c2981d2fd8c13f8ce5ab96bca1247daecf34ca05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlBaseAttribute_6666499814681619356(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlBaseAttribute\");\n      Iterable<SNode> concepts;\n      concepts = SConceptOperations.getAllSubConcepts(concept, _context.getModel(), operationContext.getScope());\n      for (final SNode subconcept : concepts) {\n        if (!(SNodeOperations.isInstanceOf(subconcept, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"))) {\n          continue;\n        }\n        if (SConceptPropertyOperations.getBoolean(subconcept, \"abstract\")) {\n          continue;\n        }\n        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept, _context.getSourceNode()) {\n          public SNode doSubstitute(String pattern) {\n            SNode result = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept), null);\n            {\n              SNode element = SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()), \"jetbrains.mps.core.xml.structure.XmlElement\");\n              int index = ListSequence.fromList(SLinkOperations.getTargets(element, \"attributes\", true)).indexOf(_context.getSourceNode());\n              return ListSequence.fromList(SLinkOperations.getTargets(element, \"attributes\", true)).insertElement(index + 1, result);\n            }\n          }\n        });\n      }\n    }\n    return result;\n  }","id":21938,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_XmlBaseAttribute_6666499814681619356(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      final String[] lastPattern = new String[1];\n      List<INodeSubstituteAction> list = ModelActions.createChildSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.xml.structure.XmlBaseAttribute\"), new AbstractChildNodeSetter() {\n        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, IScope p3) {\n          return substitute(newChild, lastPattern[0]);\n        }\n\n        private SNode substitute(SNode result, String pattern) {\n          SNode element = SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()), \"jetbrains.mps.core.xml.structure.XmlElement\");\n          int index = ListSequence.fromList(SLinkOperations.getTargets(element, \"attributes\", true)).indexOf(_context.getSourceNode());\n          return ListSequence.fromList(SLinkOperations.getTargets(element, \"attributes\", true)).insertElement(index + 1, result);\n        }\n      }, operationContext);\n      for (final INodeSubstituteAction action : list) {\n        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {\n          @Override\n          public SNode substitute(@Nullable EditorContext context, String pattern) {\n            lastPattern[0] = pattern;\n            return super.substitute(context, pattern);\n          }\n        });\n      }\n    }\n    return result;\n  }","commit_id":"c2981d2fd8c13f8ce5ab96bca1247daecf34ca05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean virtual_isMultiline_3080189811177259788(SNode thisNode) {\n    boolean result = false;\n    for (SNode part : SLinkOperations.getTargets(thisNode, \"value\", true)) {\n      if (SNodeOperations.isInstanceOf(part, \"jetbrains.mps.core.xml.structure.XmlTextValue\") && SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(part), \"jetbrains.mps.core.xml.structure.XmlTextValue\")) {\n        result = true;\n      }\n    }\n    return result;\n  }","id":21939,"modified_method":"public static boolean virtual_isMultiline_3080189811177259788(SNode thisNode) {\n    boolean result = false;\n    for (SNode part : SLinkOperations.getTargets(thisNode, \"value\", true)) {\n      if (XmlValuePart_Behavior.call_onNewLine_3080189811177340422(part) || XmlValuePart_Behavior.call_hasNewLineAfter_3080189811177340429(part)) {\n        result = true;\n      }\n    }\n    return result;\n  }","commit_id":"c2981d2fd8c13f8ce5ab96bca1247daecf34ca05","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n\n    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_END)) return new GrImportEndImpl(node);\n    if (elem.equals(IDENITFIER_STAR)) return new GrImportQualIdImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBlockImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBlockImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBlockImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBlockImpl(node);\n\n    //fields\n    if (elem.equals(CLASS_FIELD)) return new GrClassFieldImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceFieldImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumFieldImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationFieldImpl(node);\n\n    //expressions\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":21940,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n\n    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_END)) return new GrImportEndImpl(node);\n    if (elem.equals(IDENITFIER_STAR)) return new GrImportQualIdImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBlockImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBlockImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBlockImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBlockImpl(node);\n\n    //fields\n    if (elem.equals(CLASS_FIELD)) return new GrClassFieldImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceFieldImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumFieldImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationFieldImpl(node);\n\n    //expressions\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"442326454505627e20e6069f759a73a35202e116","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    return  PowerExpressionNotPlusMinus.parse(builder);\n\n    // TODO realize me!\n\n  }","id":21941,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = (PREFIXES.contains(builder.getTokenType())) ?\n            PowerExpression.parse(builder) : PowerExpressionNotPlusMinus.parse(builder);\n\n    if (!result.equals(WRONGWAY)) {\n      if (ParserUtils.getToken(builder, MULT_DIV)) {\n        ParserUtils.getToken(builder, mNLS);\n        result = PowerExpression.parse(builder);\n        if (result.equals(WRONGWAY)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(MULTIPLICATIVE_EXPRESSION);\n        result = MULTIPLICATIVE_EXPRESSION;\n        if (MULT_DIV.contains(builder.getTokenType())) {\n          subParse(builder, newMarker);\n        } else {\n          newMarker.drop();\n        }\n      } else {\n        marker.drop();\n      }\n    } else {\n      marker.drop();\n    }\n    return result;\n  }","commit_id":"442326454505627e20e6069f759a73a35202e116","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = LogicalOrExpression.parse(builder);\n    if (ParserUtils.getToken(builder, mQUESTION)) {\n      ParserUtils.getToken(builder, mNLS);\n      AssignmentExpression.parse(builder);\n      if (ParserUtils.getToken(builder, mCOLON, GroovyBundle.message(\"colon.expected\"))){\n        ParserUtils.getToken(builder, mNLS);\n        parse(builder);\n      }\n      marker.done(CONDITIONAL_EXPRESSION);\n    } else {\n      marker.drop();\n    }\n    return result;\n    \n\n  }","id":21942,"modified_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = LogicalOrExpression.parse(builder);\n    if (ParserUtils.getToken(builder, mQUESTION)) {\n      result = CONDITIONAL_EXPRESSION;\n      ParserUtils.getToken(builder, mNLS);\n      AssignmentExpression.parse(builder);\n      if (ParserUtils.getToken(builder, mCOLON, GroovyBundle.message(\"colon.expected\"))){\n        ParserUtils.getToken(builder, mNLS);\n        parse(builder);\n      }\n      marker.done(CONDITIONAL_EXPRESSION);\n    } else {\n      marker.drop();\n    }\n    return result;\n    \n\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_END)) return new GrImportEndImpl(node);\n    if (elem.equals(IDENITFIER_STAR)) return new GrImportQualIdImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //expressions\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(ADDITIVE_EXXPRESSION)) return new GrAdditiveExpressionImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":21943,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_END)) return new GrImportEndImpl(node);\n    if (elem.equals(IDENITFIER_STAR)) return new GrImportQualIdImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationDefinitionImpl(node);\n\n    //expressions\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    return  UnaryExpressionNotPlusMinus.parse(builder);\n\n    // TODO realize me!\n  }","id":21944,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = UnaryExpressionNotPlusMinus.parse(builder);\n\n    if (!result.equals(WRONGWAY)) {\n      if (ParserUtils.getToken(builder, mSTAR_STAR)) {\n        ParserUtils.getToken(builder, mNLS);\n        result = UnaryExpression.parse(builder);\n        if (result.equals(WRONGWAY)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(POWER_EXPRESSION_SIMPLE);\n        result = POWER_EXPRESSION_SIMPLE;\n        if (mSTAR_STAR.equals(builder.getTokenType())) {\n          subParse(builder, newMarker);\n        } else {\n          newMarker.drop();\n        }\n      } else {\n        marker.drop();\n      }\n    } else {\n      marker.drop();\n    }\n    return result;\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = EqualityExpression.parse(builder);\n    boolean flag = false;\n\n    if (!result.equals(WRONGWAY)) {\n      while (ParserUtils.getToken(builder, REGEX_DO) && !result.equals(WRONGWAY)) {\n        flag = true;\n        ParserUtils.getToken(builder, mNLS);\n        result = EqualityExpression.parse(builder);\n        if (result.equals(WRONGWAY)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n      }\n    }\n\n    if (flag) {\n      marker.done(REGEX_EXPRESSION);\n      return REGEX_EXPRESSION;\n    } else {\n      marker.drop();\n    }\n\n    return result;\n\n  }","id":21945,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = EqualityExpression.parse(builder);\n\n    if (!result.equals(WRONGWAY)) {\n      if (ParserUtils.getToken(builder, REGEX_DO)) {\n        ParserUtils.getToken(builder, mNLS);\n        result = EqualityExpression.parse(builder);\n        if (result.equals(WRONGWAY)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(REGEX_EXPRESSION);\n        result = REGEX_EXPRESSION;\n        if (REGEX_DO.contains(builder.getTokenType())) {\n          subParse(builder, newMarker);\n        } else {\n          newMarker.drop();\n        }\n      } else {\n        marker.drop();\n      }\n    } else {\n      marker.drop();\n    }\n    return result;\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    return ShiftExpression.parse(builder);\n\n    // TODO realize me!\n\n  }","id":21946,"modified_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    GroovyElementType result = ShiftExpression.parse(builder);\n    if (ParserUtils.getToken(builder, RELATIONS)){\n      result = RELATIONAL_EXPRESSION;\n      ParserUtils.getToken(builder, mNLS);\n      ShiftExpression.parse(builder);\n      marker.done(RELATIONAL_EXPRESSION);\n\n      // TODO add \"instanceof\" and \"as\" parsing\n\n    } else {\n      marker.drop();\n    }\n\n    return result;\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    return AdditiveExpression.parse(builder);\n\n    // TODO realize me!\n\n  }","id":21947,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    GroovyElementType result = AdditiveExpression.parse(builder);\n\n    if (!result.equals(WRONGWAY)) {\n      if (ParserUtils.getToken(builder, SHIFTS)) {\n        ParserUtils.getToken(builder, mNLS);\n        result = AdditiveExpression.parse(builder);\n        if (result.equals(WRONGWAY)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(SHIFT_EXPRESSION);\n        result = SHIFT_EXPRESSION;\n        if (SHIFTS.contains(builder.getTokenType())) {\n          subParse(builder, newMarker);\n        } else {\n          newMarker.drop();\n        }\n      } else {\n        marker.drop();\n      }\n    } else {\n      marker.drop();\n    }\n    return result;\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder){\n    // TODO realize me!\n    return WRONGWAY;\n  }","id":21948,"modified_method":"public static GroovyElementType parse(PsiBuilder builder){\n\n    PsiBuilder.Marker marker = builder.mark();\n    if (ParserUtils.getToken(builder, PREFIXES)){\n      ParserUtils.getToken(builder, mNLS);\n      parse(builder);\n      marker.done(UNARY_EXPRESSION);\n      return UNARY_EXPRESSION;\n    } else {\n      marker.drop();\n      return UnaryExpressionNotPlusMinus.parse(builder);\n    }\n  }","commit_id":"4a687d4eddf9e24f4452ea5d0a6c69c605dc2073","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void encodeValue( PropertyBlock block, int keyId, Object value )\n    {\n//        try\n//        {\n        if ( value instanceof String )\n        {\n            String string = (String) value;\n            if ( LongerShortString.encode( keyId, string, block,\n                    PropertyType.getPayloadSize() ) ) return;\n\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.STRING );\n            long stringBlockId = nextStringBlockId();\n            bits.put( stringBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            byte[] encodedString = getBestSuitedEncoding( string );\n            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );\n            for ( DynamicRecord valueRecord : valueRecords )\n            {\n                valueRecord.setType( PropertyType.STRING.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else if ( value instanceof Integer ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.INT ).put( ((Integer)value).intValue() ).getLongs()[0] );\n        else if ( value instanceof Boolean ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.BOOL ).put( ((Boolean)value).booleanValue() ? 1 : 0 ).getLongs()[0] );\n        else if ( value instanceof Float ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.FLOAT ).put( Float.floatToRawIntBits( ((Float) value).floatValue() ) ).getLongs()[0] );\n        else if ( value instanceof Long )\n        {\n            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n            {   // We only need one block for this value\n                block.setValueBlocks( bits32WithKeyAndType( keyId, PropertyType.LONG ).put( (byte)1, 1 ).put( ((Long)value).longValue(), 35 ).getLongs() );\n            }\n            else\n            {   // We need two blocks for this value\n                block.setValueBlocks( bits64WithKeyAndType( keyId, PropertyType.LONG ).put( ((Long)value).longValue() ).getLongs() );\n            }\n        }\n        else if ( value instanceof Double ) block.setValueBlocks( bits64WithKeyAndType( keyId, PropertyType.DOUBLE ).put( Double.doubleToRawLongBits( ((Double)value).doubleValue() ) ).getLongs() );\n        else if ( value instanceof Byte ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.BYTE ).put( ((Byte)value).byteValue() ).getLongs()[0] );\n        else if ( value instanceof Character ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.CHAR ).put( ((Character)value).charValue() ).getLongs()[0] );\n        else if ( value instanceof Short ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.SHORT ).put( ((Short)value).shortValue() ).getLongs()[0] );\n        else if ( value.getClass().isArray() )\n        {\n            if ( ShortArray.encode( keyId, value, block, DEFAULT_PAYLOAD_SIZE ) ) return;\n            long arrayBlockId = nextArrayBlockId();\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.ARRAY );\n            bits.put( arrayBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            Collection<DynamicRecord> arrayRecords = allocateArrayRecords( arrayBlockId, value );\n            for ( DynamicRecord valueRecord : arrayRecords )\n            {\n                valueRecord.setType( PropertyType.ARRAY.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else\n        {\n            throw new IllegalArgumentException( \"Unknown property type on: \"\n                + value + \", \" + value.getClass() );\n        }\n//        }\n//        finally\n//        {\n//            verifySame( block, value );\n//        }\n    }","id":21949,"modified_method":"public void encodeValue( PropertyBlock block, int keyId, Object value )\n    {\n//        try\n//        {\n        if ( value instanceof String )\n        {\n            String string = (String) value;\n            if ( LongerShortString.encode( keyId, string, block,\n                    PropertyType.getPayloadSize() ) ) return;\n\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.STRING );\n            long stringBlockId = nextStringBlockId();\n            bits.put( stringBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            byte[] encodedString = getBestSuitedEncoding( string );\n            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );\n            for ( DynamicRecord valueRecord : valueRecords )\n            {\n                valueRecord.setType( PropertyType.STRING.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else if ( value instanceof Integer ) setSingleBlockValue( block, keyId, PropertyType.INT, ((Integer)value).longValue() );\n        else if ( value instanceof Boolean ) setSingleBlockValue( block, keyId, PropertyType.BOOL, (((Boolean)value).booleanValue()?1L:0L) );\n        else if ( value instanceof Float ) setSingleBlockValue( block, keyId, PropertyType.FLOAT, (long)Float.floatToRawIntBits( ((Float) value).floatValue() ) );\n        else if ( value instanceof Long )\n        {\n            long keyAndType = keyId | (((long)PropertyType.LONG.intValue()) << 24);\n            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n            {   // We only need one block for this value, special layout compared to, say, an integer\n                block.setSingleBlock( keyAndType | (1L << 28) |  (((Long)value).longValue() << 29) );\n            }\n            else\n            {   // We need two blocks for this value\n                block.setValueBlocks( new long[] {keyAndType, ((Long)value).longValue()} );\n            }\n        }\n        else if ( value instanceof Double ) block.setValueBlocks( new long[] { keyId | (((long)PropertyType.DOUBLE.intValue()) << 24), Double.doubleToRawLongBits( ((Double)value).doubleValue() ) } );\n        else if ( value instanceof Byte ) setSingleBlockValue( block, keyId, PropertyType.BYTE, ((Byte)value).longValue() );\n        else if ( value instanceof Character ) setSingleBlockValue( block, keyId, PropertyType.CHAR, (long)((Character)value).charValue() );\n        else if ( value instanceof Short ) setSingleBlockValue( block, keyId, PropertyType.SHORT, ((Short)value).longValue() );\n        else if ( value.getClass().isArray() )\n        {\n            if ( ShortArray.encode( keyId, value, block, DEFAULT_PAYLOAD_SIZE ) ) return;\n            long arrayBlockId = nextArrayBlockId();\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.ARRAY );\n            bits.put( arrayBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            Collection<DynamicRecord> arrayRecords = allocateArrayRecords( arrayBlockId, value );\n            for ( DynamicRecord valueRecord : arrayRecords )\n            {\n                valueRecord.setType( PropertyType.ARRAY.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else\n        {\n            throw new IllegalArgumentException( \"Unknown property type on: \"\n                + value + \", \" + value.getClass() );\n        }\n//        }\n//        finally\n//        {\n//            verifySame( block, value );\n//        }\n    }","commit_id":"e50444c5ec473120e15845f735e5391323f99e6a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void encodeValue( PropertyBlock block, int keyId, Object value )\n    {\n//        try\n//        {\n        if ( value instanceof String )\n        {\n            String string = (String) value;\n            if ( LongerShortString.encode( keyId, string, block,\n                    PropertyType.getPayloadSize() ) ) return;\n\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.STRING );\n            long stringBlockId = nextStringBlockId();\n            bits.put( stringBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            byte[] encodedString = getBestSuitedEncoding( string );\n            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );\n            for ( DynamicRecord valueRecord : valueRecords )\n            {\n                valueRecord.setType( PropertyType.STRING.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else if ( value instanceof Integer ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.INT ).put( ((Integer)value).intValue() ).getLongs()[0] );\n        else if ( value instanceof Boolean ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.BOOL ).put( ((Boolean)value).booleanValue() ? 1 : 0 ).getLongs()[0] );\n        else if ( value instanceof Float ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.FLOAT ).put( Float.floatToRawIntBits( ((Float) value).floatValue() ) ).getLongs()[0] );\n        else if ( value instanceof Long )\n        {\n            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n            {   // We only need one block for this value\n                block.setValueBlocks( bits32WithKeyAndType( keyId, PropertyType.LONG ).put( (byte)1, 1 ).put( ((Long)value).longValue(), 35 ).getLongs() );\n            }\n            else\n            {   // We need two blocks for this value\n                block.setValueBlocks( bits64WithKeyAndType( keyId, PropertyType.LONG ).put( ((Long)value).longValue() ).getLongs() );\n            }\n        }\n        else if ( value instanceof Double ) block.setValueBlocks( bits64WithKeyAndType( keyId, PropertyType.DOUBLE ).put( Double.doubleToRawLongBits( ((Double)value).doubleValue() ) ).getLongs() );\n        else if ( value instanceof Byte ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.BYTE ).put( ((Byte)value).byteValue() ).getLongs()[0] );\n        else if ( value instanceof Character ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.CHAR ).put( ((Character)value).charValue() ).getLongs()[0] );\n        else if ( value instanceof Short ) block.setSingleBlock( bits32WithKeyAndType( keyId, PropertyType.SHORT ).put( ((Short)value).shortValue() ).getLongs()[0] );\n        else if ( value.getClass().isArray() )\n        {\n            if ( ShortArray.encode( keyId, value, block, DEFAULT_PAYLOAD_SIZE ) ) return;\n            long arrayBlockId = nextArrayBlockId();\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.ARRAY );\n            bits.put( arrayBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            Collection<DynamicRecord> arrayRecords = allocateArrayRecords( arrayBlockId, value );\n            for ( DynamicRecord valueRecord : arrayRecords )\n            {\n                valueRecord.setType( PropertyType.ARRAY.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else\n        {\n            throw new IllegalArgumentException( \"Unknown property type on: \"\n                + value + \", \" + value.getClass() );\n        }\n//        }\n//        finally\n//        {\n//            verifySame( block, value );\n//        }\n    }","id":21950,"modified_method":"public void encodeValue( PropertyBlock block, int keyId, Object value )\n    {\n//        try\n//        {\n        if ( value instanceof String )\n        {\n            String string = (String) value;\n            if ( LongerShortString.encode( keyId, string, block,\n                    PropertyType.getPayloadSize() ) ) return;\n\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.STRING );\n            long stringBlockId = nextStringBlockId();\n            bits.put( stringBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            byte[] encodedString = getBestSuitedEncoding( string );\n            Collection<DynamicRecord> valueRecords = allocateStringRecords( stringBlockId, encodedString );\n            for ( DynamicRecord valueRecord : valueRecords )\n            {\n                valueRecord.setType( PropertyType.STRING.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else if ( value instanceof Integer ) setSingleBlockValue( block, keyId, PropertyType.INT, ((Integer)value).longValue() );\n        else if ( value instanceof Boolean ) setSingleBlockValue( block, keyId, PropertyType.BOOL, (((Boolean)value).booleanValue()?1L:0L) );\n        else if ( value instanceof Float ) setSingleBlockValue( block, keyId, PropertyType.FLOAT, (long)Float.floatToRawIntBits( ((Float) value).floatValue() ) );\n        else if ( value instanceof Long )\n        {\n            long keyAndType = keyId | (((long)PropertyType.LONG.intValue()) << 24);\n            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n            {   // We only need one block for this value, special layout compared to, say, an integer\n                block.setSingleBlock( keyAndType | (1L << 28) |  (((Long)value).longValue() << 29) );\n            }\n            else\n            {   // We need two blocks for this value\n                block.setValueBlocks( new long[] {keyAndType, ((Long)value).longValue()} );\n            }\n        }\n        else if ( value instanceof Double ) block.setValueBlocks( new long[] { keyId | (((long)PropertyType.DOUBLE.intValue()) << 24), Double.doubleToRawLongBits( ((Double)value).doubleValue() ) } );\n        else if ( value instanceof Byte ) setSingleBlockValue( block, keyId, PropertyType.BYTE, ((Byte)value).longValue() );\n        else if ( value instanceof Character ) setSingleBlockValue( block, keyId, PropertyType.CHAR, (long)((Character)value).charValue() );\n        else if ( value instanceof Short ) setSingleBlockValue( block, keyId, PropertyType.SHORT, ((Short)value).longValue() );\n        else if ( value.getClass().isArray() )\n        {\n            if ( ShortArray.encode( keyId, value, block, DEFAULT_PAYLOAD_SIZE ) ) return;\n            long arrayBlockId = nextArrayBlockId();\n            Bits bits = bits32WithKeyAndType( keyId, PropertyType.ARRAY );\n            bits.put( arrayBlockId, 36 );\n            block.setSingleBlock( bits.getLongs()[0] );\n            Collection<DynamicRecord> arrayRecords = allocateArrayRecords( arrayBlockId, value );\n            for ( DynamicRecord valueRecord : arrayRecords )\n            {\n                valueRecord.setType( PropertyType.ARRAY.intValue() );\n                block.addValueRecord( valueRecord );\n            }\n        }\n        else\n        {\n            throw new IllegalArgumentException( \"Unknown property type on: \"\n                + value + \", \" + value.getClass() );\n        }\n//        }\n//        finally\n//        {\n//            verifySame( block, value );\n//        }\n    }","commit_id":"33e7d09f5fd508343dd75aae6c3e14ad11c3b15a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static void prepYieldStatement(SNode ystmt, PrepStatementUtil.Context ctx, ITemplateGenerator generator) {\n    ctx.incrementLabel();\n    int beginLabel = ctx.label;\n    ctx.incrementLabel();\n    int endLabel = ctx.label + 1;\n    if((SNodeOperations.getNextSibling(ystmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(ystmt)))) {\n      ctx.incrementLabel();\n    }\n    PrepStatementUtil.putPrepData(ystmt, new Integer[]{beginLabel,endLabel}, generator);\n  }","id":21951,"modified_method":"public void prepYieldStatement(SNode ystmt) {\n    this.ctx.incrementLabel();\n    int beginLabel = this.ctx.label;\n    this.ctx.incrementLabel();\n    int endLabel = this.ctx.label + 1;\n    if((SNodeOperations.getNextSibling(ystmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(ystmt)))) {\n      this.ctx.incrementLabel();\n    }\n    PrepStatementUtil.putPrepData(ystmt, new Integer[]{beginLabel,endLabel}, this.generator);\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void prepWhileStatement(SNode wstmt, PrepStatementUtil.Context ctx, ITemplateGenerator generator) {\n    ctx.incrementLabel();\n    int beginLabel = ctx.label;\n    PrepStatementUtil.prepStatementList(SLinkOperations.getTarget(wstmt, \"body\", true), ctx, generator);\n    int endLabel = ctx.label + 1;\n    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(wstmt, \"body\", true), new Integer[]{beginLabel,endLabel}, generator);\n    PrepStatementUtil.putPrepData(wstmt, new Integer[]{beginLabel,endLabel}, generator);\n  }","id":21952,"modified_method":"private void prepWhileStatement(SNode wstmt) {\n    this.ctx.incrementLabel();\n    int beginLabel = this.ctx.label;\n    this.ctx.incrementLabel();\n    int blockLabel = this.ctx.label;\n    this.prepStatementList(SLinkOperations.getTarget(wstmt, \"body\", true));\n    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(wstmt, \"body\", true), new Integer[]{blockLabel,beginLabel}, this.generator);\n    int endLabel = this.ctx.label + 1;\n    if((SNodeOperations.getNextSibling(wstmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(wstmt)))) {\n      this.ctx.incrementLabel();\n    }\n    PrepStatementUtil.putPrepData(wstmt, new Integer[]{beginLabel,blockLabel,endLabel}, this.generator);\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void prepStatementList(SNode slist, ITemplateGenerator generator) {\n    PrepStatementUtil.Context ctx = new PrepStatementUtil.Context();\n    int beginLabel = ctx.label;\n    PrepStatementUtil.prepStatementList(slist, ctx, generator);\n    int endLabel = ctx.label + 1;\n    PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, generator);\n  }","id":21953,"modified_method":"public static void prepStatementList(SNode slist, ITemplateGenerator generator) {\n    PrepStatementUtil psu = new PrepStatementUtil(generator);\n    psu.prepTopStatementList(slist);\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void prepStatementList(SNode slist, PrepStatementUtil.Context ctx, ITemplateGenerator generator) {\n    for(SNode stmt : SLinkOperations.getTargets(slist, \"statement\", true)) {\n      if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.WhileStatement\")) {\n        PrepStatementUtil.prepWhileStatement(stmt, ctx, generator);\n      } else\n      if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.ForStatement\")) {\n        PrepStatementUtil.prepForStatement(stmt, ctx, generator);\n      } else\n      if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")) {\n        PrepStatementUtil.prepLocalvariableDeclarationStatement(stmt, ctx, generator);\n      } else\n      if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.closures.structure.YieldStatement\")) {\n        PrepStatementUtil.prepYieldStatement(stmt, ctx, generator);\n      }\n    }\n  }","id":21954,"modified_method":"private void prepStatementList(SNode slist) {\n    for(SNode stmt : SLinkOperations.getTargets(slist, \"statement\", true)) {\n      this.prepStatement(stmt);\n    }\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void prepLocalvariableDeclarationStatement(SNode lstmt, PrepStatementUtil.Context ctx, ITemplateGenerator generator) {\n    ctx.incrementLabel();\n    PrepStatementUtil.putPrepData(lstmt, ctx.label, generator);\n    PrepStatementUtil.prepLocalVariableDeclaration(SLinkOperations.getTarget(lstmt, \"localVariableDeclaration\", true), ctx, generator);\n  }","id":21955,"modified_method":"private void prepLocalvariableDeclarationStatement(SNode lstmt) {\n    this.ctx.incrementLabel();\n    PrepStatementUtil.putPrepData(lstmt, this.ctx.label, this.generator);\n    this.prepLocalVariableDeclaration(SLinkOperations.getTarget(lstmt, \"localVariableDeclaration\", true));\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void prepLocalVariableDeclaration(SNode lvd, PrepStatementUtil.Context ctx, ITemplateGenerator generator) {\n    String name = \"_\" + ctx.label + \"_\" + SPropertyOperations.getString(lvd, \"name\");\n    PrepStatementUtil.putPrepData(lvd, name, generator);\n  }","id":21956,"modified_method":"private void prepLocalVariableDeclaration(SNode lvd) {\n    String name = \"_\" + this.ctx.label + \"_\" + SPropertyOperations.getString(lvd, \"name\");\n    PrepStatementUtil.putPrepData(lvd, name, this.generator);\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void mappingScript_CodeBlock_1201011417446(final IOperationContext operationContext, final MappingScriptContext _context) {\n    final zClosureContext5 _zClosureContext5 = new zClosureContext5();\n    Iterable<SNode> closures = SequenceOperations.where(SModelOperations.getNodes(_context.getModel(), \"jetbrains.mps.closures.structure.ClosureLiteral\"), new zPredicate16(null, _zClosureContext5));\n    boolean found = false;\n    for(SNode cl : closures) {\n      PrepStatementUtil.prepStatementList(SLinkOperations.getTarget(cl, \"body\", true), _context.getGenerator());\n      found = true;\n    }\n    if(found) {\n      _context.getGenerator().getGeneratorSessionContext().putSessionObject(\"foundClosureLiteralsWithYield\", Boolean.TRUE);\n    }\n  }","id":21957,"modified_method":"public static void mappingScript_CodeBlock_1201011417446(final IOperationContext operationContext, final MappingScriptContext _context) {\n    final zClosureContext5 _zClosureContext5 = new zClosureContext5();\n    Iterable<SNode> closures = SequenceOperations.where(SModelOperations.getNodes(_context.getModel(), \"jetbrains.mps.closures.structure.ClosureLiteral\"), new zPredicate7(null, _zClosureContext5));\n    boolean found = false;\n    for(SNode cl : closures) {\n      PrepStatementUtil.prepStatementList(SLinkOperations.getTarget(cl, \"body\", true), _context.getGenerator());\n      found = true;\n    }\n    if(found) {\n      _context.getGenerator().getGeneratorSessionContext().putSessionObject(\"foundClosureLiteralsWithYield\", Boolean.TRUE);\n    }\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode sourceNodeQuery_1201045061496(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {\n    {\n      IMatchingPattern pattern_1201204929337 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201204929321 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201204929337);\n      if(coercedNode_1201204929321 != null) {\n        return SLinkOperations.getTarget(coercedNode_1201204929321, \"elementType\", true);\n      }\n    }\n    return null;\n  }","id":21958,"modified_method":"public static SNode sourceNodeQuery_1201045061496(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {\n    {\n      IMatchingPattern pattern_1201294019589 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201294019573 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201294019589);\n      if(coercedNode_1201294019573 != null) {\n        return SLinkOperations.getTarget(coercedNode_1201294019573, \"elementType\", true);\n      }\n    }\n    return null;\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object propertyMacro_GetPropertyValue_1201048260874(final IOperationContext operationContext, final PropertyMacroContext _context) {\n    {\n      IMatchingPattern pattern_1201204928512 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201204928494 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201204928512);\n      if(coercedNode_1201204928494 != null) {\n        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201204928494, \"elementType\", true));\n      }\n    }\n    return null;\n  }","id":21959,"modified_method":"public static Object propertyMacro_GetPropertyValue_1201048260874(final IOperationContext operationContext, final PropertyMacroContext _context) {\n    {\n      IMatchingPattern pattern_1201294018425 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201294018407 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201294018425);\n      if(coercedNode_1201294018407 != null) {\n        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201294018407, \"elementType\", true));\n      }\n    }\n    return null;\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List sourceNodesQuery_1201187449746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {\n    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());\n    int BEGIN = labels[0];\n    int END = labels[1];\n    List<SNode> results = new ArrayList<SNode>();\n    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());\n    do {\n      int beginLabel = BEGIN;\n      int endLabel = END;\n      SNode lastStmt = null;\n      SNode slist = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StatementList\", null);\n      for(SNode stmt : stmts) {\n        SNode tmp = SNodeOperations.copyNode(stmt);\n        SLinkOperations.addChild(slist, \"statement\", tmp);\n        PrepStatementUtil.putPrepData(tmp, PrepStatementUtil.getPrepData(stmt, _context.getGenerator()), _context.getGenerator());\n        if(SNodeOperations.isInstanceOf(tmp, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")) {\n          SNode lvd = SLinkOperations.getTarget(tmp, \"localVariableDeclaration\", true);\n          PrepStatementUtil.putPrepData(lvd, PrepStatementUtil.getPrepData(SLinkOperations.getTarget(stmt, \"localVariableDeclaration\", true), _context.getGenerator()), _context.getGenerator());\n        }\n        lastStmt = stmt;\n      }\n      SNode cstmt = null;\n      if((lastStmt != null)) {\n        cstmt = SNodeOperations.getNextSibling(lastStmt);\n      } else\n      {\n        List<SNode> allstmts = (List<SNode>)SLinkOperations.getTargets(_context.getNode(), \"statement\", true);\n        cstmt = (allstmts.size() > 0 ?\n          allstmts.get(0) :\n          null\n        );\n      }\n      if((cstmt != null)) {\n        labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());\n        endLabel = (labels != null ?\n          labels[0] :\n          -1\n        );\n        lastStmt = SNodeOperations.getNextSibling(cstmt);\n        while((lastStmt != null)) {\n          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);\n          if(stmts.size() == 0) {\n            cstmt = lastStmt;\n            lastStmt = SNodeOperations.getNextSibling(lastStmt);\n          } else\n          {\n            labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());\n            BEGIN = (labels != null ?\n              labels[labels.length - 1] :\n              -1\n            );\n            break;\n          }\n        }\n      } else\n      {\n        stmts = null;\n      }\n      results.add(slist);\n      PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, _context.getGenerator());\n    } while(stmts != null && stmts.size() > 0);\n    return results;\n  }","id":21960,"modified_method":"public static List sourceNodesQuery_1201187449746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {\n    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());\n    int BEGIN = labels[0];\n    int END = labels[1];\n    List<SNode> results = new ArrayList<SNode>();\n    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());\n    do {\n      int beginLabel = BEGIN;\n      int endLabel = END;\n      SNode lastStmt = null;\n      SNode slist = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StatementList\", null);\n      for(SNode stmt : stmts) {\n        SNode tmp = SNodeOperations.copyNode(stmt);\n        SLinkOperations.addChild(slist, \"statement\", tmp);\n        PrepStatementUtil.putPrepData(tmp, PrepStatementUtil.getPrepData(stmt, _context.getGenerator()), _context.getGenerator());\n        if(SNodeOperations.isInstanceOf(tmp, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")) {\n          SNode lvd = SLinkOperations.getTarget(tmp, \"localVariableDeclaration\", true);\n          PrepStatementUtil.putPrepData(lvd, PrepStatementUtil.getPrepData(SLinkOperations.getTarget(stmt, \"localVariableDeclaration\", true), _context.getGenerator()), _context.getGenerator());\n        }\n        lastStmt = stmt;\n      }\n      SNode cstmt = null;\n      if((lastStmt != null)) {\n        cstmt = SNodeOperations.getNextSibling(lastStmt);\n      } else\n      {\n        List<SNode> allstmts = (List<SNode>)SLinkOperations.getTargets(_context.getNode(), \"statement\", true);\n        cstmt = (allstmts.size() > 0 ?\n          allstmts.get(0) :\n          null\n        );\n      }\n      stmts = null;\n      if((cstmt != null)) {\n        labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());\n        endLabel = (labels != null ?\n          labels[0] :\n          -1\n        );\n        lastStmt = SNodeOperations.getNextSibling(cstmt);\n        while((lastStmt != null)) {\n          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);\n          if(stmts.size() == 0) {\n            cstmt = lastStmt;\n            lastStmt = SNodeOperations.getNextSibling(lastStmt);\n          } else\n          {\n            labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());\n            BEGIN = (labels != null ?\n              labels[labels.length - 1] :\n              -1\n            );\n            break;\n          }\n        }\n      }\n      results.add(slist);\n      PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, _context.getGenerator());\n    } while(stmts != null && stmts.size() > 0);\n    return results;\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201026203690(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    SNode gne = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_class\");\n    SNode md = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(gne, null, false), new zPredicate9(null, null)));\n    SNode dostmt = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(md, \"body\", true)), new zPredicate10(null, null)));\n    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(dostmt, \"body\", true)), new zPredicate11(null, null)));\n  }","id":21961,"modified_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201026203690(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_switch\");\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201023865086(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    SNode gne = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_class\");\n    SNode md = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(gne, null, false), new zPredicate6(null, null)));\n    SNode dostmt = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(md, \"body\", true)), new zPredicate7(null, null)));\n    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(dostmt, \"body\", true)), new zPredicate8(null, null)));\n  }","id":21962,"modified_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201023865086(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_switch\");\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201193348813(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    SNode gne = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_class\");\n    SNode md = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(gne, null, false), new zPredicate12(null, null)));\n    SNode dostmt = SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(md, \"body\", true)), new zPredicate13(null, null)));\n    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(dostmt, \"body\", true)), new zPredicate14(null, null)));\n  }","id":21963,"modified_method":"public static SNode weaving_MappingRule_ContextNodeQuery_1201193348813(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {\n    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.closures.structure.ClosureLiteral\", false, false), \"closure_switch\");\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object propertyMacro_GetPropertyValue_1201048297671(final IOperationContext operationContext, final PropertyMacroContext _context) {\n    {\n      IMatchingPattern pattern_1201204928478 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201204928460 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201204928478);\n      if(coercedNode_1201204928460 != null) {\n        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201204928460, \"elementType\", true));\n      }\n    }\n    return null;\n  }","id":21964,"modified_method":"public static Object propertyMacro_GetPropertyValue_1201048297671(final IOperationContext operationContext, final PropertyMacroContext _context) {\n    {\n      IMatchingPattern pattern_1201294018392 = HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\");\n      SNode coercedNode_1201294018374 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), \"resultType\", true), pattern_1201294018392);\n      if(coercedNode_1201294018374 != null) {\n        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201294018374, \"elementType\", true));\n      }\n    }\n    return null;\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isControlStatement(SNode stmt) {\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.WhileStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.ForStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.closures.structure.YieldStatement\")) {\n      return true;\n    }\n    return false;\n  }","id":21965,"modified_method":"public static boolean isControlStatement(SNode stmt) {\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.WhileStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.DoWhileStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.ForStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.baseLanguage.structure.IfStatement\")) {\n      return true;\n    }\n    if(SNodeOperations.isInstanceOf(stmt, \"jetbrains.mps.closures.structure.YieldStatement\")) {\n      return true;\n    }\n    return false;\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void main(String[] args) {\n    _void closure;\n    _int_int fib = new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        return (n <= 1 ?\n          n :\n          this.invoke(n - 1) + this.invoke(n - 2)\n        );\n      }\n\n    };\n    System.out.println(\"fib(8)=\" + fib.invoke(8));\n    System.out.println(\"fib(9)=\" + new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        return (n <= 1 ?\n          n :\n          this.invoke(n - 1) + this.invoke(n - 2)\n        );\n      }\n\n    }.invoke(9));\n    int calc = new _FunctionTypes._int() {\n\n      public int invoke() {\n        return 2 + 2;\n      }\n\n    }.invoke();\n    System.out.println(\"2+2=\" + calc);\n    System.out.println(\"fact(5)=\" + new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        int res = 1;\n        while(n > 1) {\n          res = res * n;\n          n = n - 1;\n        }\n        return res;\n      }\n\n    }.invoke(5));\n    _sequence1_Integer fun = new _FunctionTypes._sequence1_Integer() {\n\n      public Iterable<Integer> invoke() {\n        return new Iterable <Integer>() {\n\n          public Iterator<Integer> iterator() {\n            return new _FunctionTypes.YieldingIterator <Integer>() {\n\n              private int __CP__ = 0;\n              private int _1_foo;\n              private int _5_bar;\n              private int _14_bar;\n              private int _24_bar;\n\n              protected boolean moveToNext() {\n__loop__:\n                do {\n                  switch (this.__CP__) {\n                    case 5:\n                      this._5_bar = 0;\n                    case 6:\n                      if(!(this._5_bar < 5)) {\n                        this.__CP__ = 13;\n                        break;\n                      }\n                      this.__CP__ = 7;\n                      break;\n                    case 12:\n                      this._5_bar = this._5_bar + 2;\n                      this.__CP__ = 6;\n                      break;\n                    case 14:\n                      this._14_bar = 6;\n                    case 15:\n                      if(!(this._14_bar < 13)) {\n                        this.__CP__ = 24;\n                        break;\n                      }\n                      this.__CP__ = 16;\n                      break;\n                    case 23:\n                      this._14_bar = this._14_bar + 3;\n                      this.__CP__ = 15;\n                      break;\n                    case 24:\n                      this._24_bar = 13;\n                    case 25:\n                      if(!(this._24_bar < 20)) {\n                        this.__CP__ = 30;\n                        break;\n                      }\n                      this.__CP__ = 26;\n                      break;\n                    case 29:\n                      this._24_bar = this._24_bar + 1;\n                      this.__CP__ = 25;\n                      break;\n                    case 2:\n                      this.__CP__ = 4;\n                      this.yield((Integer)this._1_foo);\n                      return true;\n                    case 8:\n                      this.__CP__ = 10;\n                      this.yield((Integer)this._5_bar);\n                      return true;\n                    case 10:\n                      this.__CP__ = 12;\n                      this.yield((Integer)this._5_bar + this._1_foo);\n                      return true;\n                    case 17:\n                      this.__CP__ = 19;\n                      this.yield((Integer)this._14_bar);\n                      return true;\n                    case 19:\n                      this.__CP__ = 21;\n                      this.yield((Integer)this._14_bar + 1);\n                      return true;\n                    case 21:\n                      this.__CP__ = 23;\n                      this.yield((Integer)this._14_bar + this._1_foo);\n                      return true;\n                    case 27:\n                      this.__CP__ = 29;\n                      this.yield((Integer)this._24_bar);\n                      return true;\n                    case 7:\n                      this.__CP__ = 8;\n                      break;\n                    case 16:\n                      this.__CP__ = 17;\n                      break;\n                    case 26:\n                      this.__CP__ = 27;\n                      break;\n                    case 0:\n                      this._1_foo = -1;\n                      this.__CP__ = 2;\n                      break;\n                    case 4:\n                      this._1_foo = 1;\n                      this.__CP__ = 5;\n                      break;\n                    case 13:\n                      this._1_foo = 2;\n                      this.__CP__ = 14;\n                      break;\n                    default:\n                      break __loop__;\n                  }\n                } while(true);\n                return false;\n              }\n\n            };\n          }\n\n        };\n      }\n\n    };\n    Iterable<Integer> seq = fun.invoke();\n    for(int i : seq) {\n      System.out.println(\"yielded: \" + i);\n    }\n  }","id":21966,"modified_method":"public static void main(String[] args) {\n    _void closure;\n    _int_int fib = new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        return (n <= 1 ?\n          n :\n          this.invoke(n - 1) + this.invoke(n - 2)\n        );\n      }\n\n    };\n    System.out.println(\"fib(8)=\" + fib.invoke(8));\n    System.out.println(\"fib(9)=\" + new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        return (n <= 1 ?\n          n :\n          this.invoke(n - 1) + this.invoke(n - 2)\n        );\n      }\n\n    }.invoke(9));\n    int calc = new _FunctionTypes._int() {\n\n      public int invoke() {\n        return 2 + 2;\n      }\n\n    }.invoke();\n    System.out.println(\"2+2=\" + calc);\n    System.out.println(\"fact(5)=\" + new _FunctionTypes._int_int() {\n\n      public int invoke(int n) {\n        int res = 1;\n        while(n > 1) {\n          res = res * n;\n          n = n - 1;\n        }\n        return res;\n      }\n\n    }.invoke(5));\n    _sequence1_Integer fun = new _FunctionTypes._sequence1_Integer() {\n\n      public Iterable<Integer> invoke() {\n        return new Iterable <Integer>() {\n\n          public Iterator<Integer> iterator() {\n            return new _FunctionTypes.YieldingIterator <Integer>() {\n\n              private int __CP__ = 0;\n              private int _1_foo;\n              private int _5_bar;\n              private int _14_bar;\n              private int _24_bar;\n\n              protected boolean moveToNext() {\n__loop__:\n                do {\n                  switch (this.__CP__) {\n                    case 5:\n                      this._5_bar = 0;\n                    case 6:\n                      if(!(this._5_bar < 5)) {\n                        this.__CP__ = 13;\n                        break;\n                      }\n                      this.__CP__ = 7;\n                      break;\n                    case 12:\n                      this._5_bar = this._5_bar + 2;\n                      this.__CP__ = 6;\n                      break;\n                    case 14:\n                      this._14_bar = 6;\n                    case 15:\n                      if(!(this._14_bar < 13)) {\n                        this.__CP__ = 24;\n                        break;\n                      }\n                      this.__CP__ = 16;\n                      break;\n                    case 23:\n                      this._14_bar = this._14_bar + 3;\n                      this.__CP__ = 15;\n                      break;\n                    case 24:\n                      this._24_bar = 13;\n                    case 25:\n                      if(!(this._24_bar < 20)) {\n                        this.__CP__ = 30;\n                        break;\n                      }\n                      this.__CP__ = 26;\n                      break;\n                    case 29:\n                      this._24_bar = this._24_bar + 1;\n                      this.__CP__ = 25;\n                      break;\n                    case 2:\n                      this.__CP__ = 4;\n                      this.yield((Integer)this._1_foo);\n                      return true;\n                    case 8:\n                      this.__CP__ = 10;\n                      this.yield((Integer)this._5_bar);\n                      return true;\n                    case 10:\n                      this.__CP__ = 12;\n                      this.yield((Integer)this._5_bar + this._1_foo);\n                      return true;\n                    case 17:\n                      this.__CP__ = 19;\n                      this.yield((Integer)this._14_bar);\n                      return true;\n                    case 19:\n                      this.__CP__ = 21;\n                      this.yield((Integer)this._14_bar + 1);\n                      return true;\n                    case 21:\n                      this.__CP__ = 23;\n                      this.yield((Integer)this._14_bar + this._1_foo);\n                      return true;\n                    case 27:\n                      this.__CP__ = 29;\n                      this.yield((Integer)this._24_bar);\n                      return true;\n                    case 7:\n                      this.__CP__ = 8;\n                      break;\n                    case 16:\n                      this.__CP__ = 17;\n                      break;\n                    case 26:\n                      this.__CP__ = 27;\n                      break;\n                    case 0:\n                      this._1_foo = -1;\n                      this.__CP__ = 2;\n                      break;\n                    case 4:\n                      this._1_foo = 1;\n                      this.__CP__ = 5;\n                      break;\n                    case 13:\n                      this._1_foo = 2;\n                      this.__CP__ = 14;\n                      break;\n                    default:\n                      break __loop__;\n                  }\n                } while(true);\n                return false;\n              }\n\n            };\n          }\n\n        };\n      }\n\n    };\n    Iterable<Integer> seq = fun.invoke();\n    for(int i : seq) {\n      System.out.println(\"yielded: \" + i);\n    }\n    seq = new _FunctionTypes._sequence1_Integer() {\n\n      public Iterable<Integer> invoke() {\n        return new Iterable <Integer>() {\n\n          public Iterator<Integer> iterator() {\n            return new _FunctionTypes.YieldingIterator <Integer>() {\n\n              private int __CP__ = 0;\n              private int _1_i;\n              private int _4_j;\n\n              protected boolean moveToNext() {\n__loop__:\n                do {\n                  switch (this.__CP__) {\n                    case 4:\n                      this._4_j = 2;\n                    case 5:\n                      if(!(this._4_j < 5)) {\n                        this.__CP__ = 12;\n                        break;\n                      }\n                      this.__CP__ = 6;\n                      break;\n                    case 11:\n                      this._4_j = this._4_j + 1;\n                      this.__CP__ = 5;\n                      break;\n                    case 1:\n                      this._1_i = 1;\n                    case 2:\n                      if(!(this._1_i < 10)) {\n                        this.__CP__ = 13;\n                        break;\n                      }\n                      this.__CP__ = 3;\n                      break;\n                    case 12:\n                      this._1_i = this._1_i + 1;\n                      this.__CP__ = 2;\n                      break;\n                    case 7:\n                      if(this._1_i % this._4_j == 0) {\n                        this.__CP__ = 8;\n                        break;\n                      }\n                      this.__CP__ = 11;\n                      break;\n                    case 9:\n                      this.__CP__ = 11;\n                      this.yield((Integer)this._1_i * this._4_j);\n                      return true;\n                    case 8:\n                      this.__CP__ = 9;\n                      break;\n                    case 6:\n                      this.__CP__ = 7;\n                      break;\n                    case 3:\n                      this.__CP__ = 4;\n                      break;\n                    case 0:\n                      this.__CP__ = 1;\n                      break;\n                    default:\n                      break __loop__;\n                  }\n                } while(true);\n                return false;\n              }\n\n            };\n          }\n\n        };\n      }\n\n    }.invoke();\n    for(int i : seq) {\n      System.out.println(\"yielded: \" + i);\n    }\n    seq = new _FunctionTypes._sequence1_Integer() {\n\n      public Iterable<Integer> invoke() {\n        return new Iterable <Integer>() {\n\n          public Iterator<Integer> iterator() {\n            return new _FunctionTypes.YieldingIterator <Integer>() {\n\n              private int __CP__ = 0;\n              private int _1_i;\n              private int _4_j;\n\n              protected boolean moveToNext() {\n__loop__:\n                do {\n                  switch (this.__CP__) {\n                    case 2:\n                      if(this._1_i > 0) {\n                        this.__CP__ = 3;\n                        break;\n                      }\n                      this.__CP__ = 11;\n                      break;\n                    case 9:\n                      if(this._4_j > 0) {\n                        this.__CP__ = 5;\n                        break;\n                      }\n                      this.__CP__ = 10;\n                      break;\n                    case 6:\n                      this.__CP__ = 8;\n                      this.yield((Integer)this._1_i * this._4_j);\n                      return true;\n                    case 5:\n                      this.__CP__ = 6;\n                      break;\n                    case 8:\n                      this._4_j = this._4_j - 1;\n                      this.__CP__ = 9;\n                      break;\n                    case 3:\n                      this._4_j = 3;\n                      this.__CP__ = 5;\n                      break;\n                    case 10:\n                      this._1_i = this._1_i - 1;\n                      this.__CP__ = 2;\n                      break;\n                    case 0:\n                      this._1_i = 3;\n                      this.__CP__ = 2;\n                      break;\n                    default:\n                      break __loop__;\n                  }\n                } while(true);\n                return false;\n              }\n\n            };\n          }\n\n        };\n      }\n\n    }.invoke();\n    for(int i : seq) {\n      System.out.println(\"yielded: \" + i);\n    }\n  }","commit_id":"2ddbbe0577a5fedaa65377046d09e6738dfb1aaf","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size())).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","id":21967,"modified_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size()), BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the percentage of null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNull(list)).divide(new BigDecimal(list.size())).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","id":21968,"modified_method":"/**\n\t * Get the percentage of null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNull(list)).divide(new BigDecimal(list.size()), BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the average of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the average of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal average(List<BigDecimal> list) {\n\t\tBigDecimal total = new BigDecimal(0);\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tif (notNullEntries.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tfor (BigDecimal entry : notNullEntries) {\n\t\t\ttotal = total.add(entry);\n\t\t}\n\t\t\n\t\treturn total.divide(new BigDecimal(notNullEntries.size()));\n\t}","id":21969,"modified_method":"/**\n\t * Get the average of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the average of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal average(List<BigDecimal> list) {\n\t\tBigDecimal total = new BigDecimal(0);\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tif (notNullEntries.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tfor (BigDecimal entry : notNullEntries) {\n\t\t\ttotal = total.add(entry);\n\t\t}\n\t\t\n\t\treturn total.divide(new BigDecimal(notNullEntries.size()), BigDecimal.ROUND_HALF_UP);\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the median of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the median of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal median(List<BigDecimal> list) {\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tCollections.sort(notNullEntries);\n\t\t\n\t\tif (notNullEntries.size() % 2 == 0) {\n\t\t\t// even number of entries, take the mean of the 2 center ones\n\t\t\tBigDecimal value1, value2;\n\t\t\tvalue1 = notNullEntries.get(notNullEntries.size() / 2);\n\t\t\tvalue2 = notNullEntries.get((notNullEntries.size() / 2) - 1);\n\t\t\treturn value1.add(value2).divide(new BigDecimal(2));\n\t\t} else {\n\t\t\treturn notNullEntries.get(notNullEntries.size() / 2);\n\t\t}\n\t}","id":21970,"modified_method":"/**\n\t * Get the median of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the median of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal median(List<BigDecimal> list) {\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tCollections.sort(notNullEntries);\n\t\t\n\t\tif (notNullEntries.size() % 2 == 0) {\n\t\t\t// even number of entries, take the mean of the 2 center ones\n\t\t\tBigDecimal value1, value2;\n\t\t\tvalue1 = notNullEntries.get(notNullEntries.size() / 2);\n\t\t\tvalue2 = notNullEntries.get((notNullEntries.size() / 2) - 1);\n\t\t\treturn value1.add(value2).divide(new BigDecimal(2), BigDecimal.ROUND_HALF_UP);\n\t\t} else {\n\t\t\treturn notNullEntries.get(notNullEntries.size() / 2);\n\t\t}\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Send this PingRequest through the given icmpSocket\n     * @param icmpSocket\n     */\n    public void sendRequest(IcmpSocket icmpSocket) {\n        try {\n            m_expiration = System.currentTimeMillis() + m_timeout;\n            icmpSocket.send(getDatagram());\n        } catch (Throwable t) {\n            m_callback.handleError(this, t);\n        }\n    }","id":21971,"modified_method":"/**\n     * Send this PingRequest through the given icmpSocket\n     * @param icmpSocket\n     */\n    public void sendRequest(IcmpSocket icmpSocket) {\n        try {\n            m_expiration = System.currentTimeMillis() + m_timeout;\n            ICMPEchoPacket iPkt = new ICMPEchoPacket(getTid());\n            iPkt.setIdentity(FILTER_ID);\n            iPkt.setSequenceId(getSequenceId());\n            iPkt.computeChecksum();\n            m_request = iPkt;\n\n            byte[] data = iPkt.toBytes();\n            DatagramPacket packet = new DatagramPacket(data, data.length, getAddress(), 0);\n            icmpSocket.send(packet);\n        } catch (Throwable t) {\n            m_callback.handleError(this, t);\n        }\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public PingRequest processTimeout() {\n        PingRequest returnval = null;\n        if (isExpired()) {\n            if (getRetries() > 0) {\n                returnval = new PingRequest(getAddress(), getTimeout(), getRetries() - 1, getSequenceId(), m_callback);\n            } else {\n                m_callback.handleTimeout(getRequest());\n            }\n        }\n        return returnval;\n    }","id":21972,"modified_method":"public PingRequest processTimeout() {\n        PingRequest returnval = null;\n        if (this.isExpired()) {\n            if (this.getRetries() > 0) {\n                returnval = new PingRequest(getAddress(), getTimeout(), getRetries() - 1, getSequenceId(), m_callback);\n            } else {\n                m_callback.handleTimeout(getRequest());\n            }\n        }\n        return returnval;\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testSinglePingFailure() throws Exception {\n        assertNull(m_pinger.ping(m_badHost));\n        Thread.sleep(1000);\n    }","id":21973,"modified_method":"public void testSinglePingFailure() throws Exception {\n        assertNull(m_pinger.ping(m_badHost));\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testParallelPing() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        Thread.sleep(1000);\n        assertTrue(CollectionMath.countNotNull(items) > 0);\n    }","id":21974,"modified_method":"public void testParallelPing() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        assertTrue(CollectionMath.countNotNull(items) > 0);\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testParallelPingFailure() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        Thread.sleep(1000);\n        assertTrue(CollectionMath.countNotNull(items) == 0);\n    }","id":21975,"modified_method":"public void testParallelPingFailure() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_badHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        assertTrue(CollectionMath.countNotNull(items) == 0);\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testSinglePing() throws Exception {\n        assertTrue(m_pinger.ping(m_goodHost) > 0);\n        Thread.sleep(1000);\n    }","id":21976,"modified_method":"public void testSinglePing() throws Exception {\n        assertTrue(m_pinger.ping(m_goodHost) > 0);\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initialize a Pinger object, specifying the timeout and retries.\n     * @param defaultTimeout the timeout, in milliseconds, to wait for returned packets.\n     * @param defaultRetries the number of times to retry a given ping packet\n     * @throws IOException\n     */\n\tpublic Pinger() throws IOException {\n\t\tsynchronized (Pinger.class) {\n\t\t\tif (worker == null) {\n\t\t\t    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();\n\t\t\t\ticmpSocket = new IcmpSocket();\n                receiver = new ReplyReceiver(icmpSocket, queue, PingRequest.FILTER_ID);\n                receiver.start();\n\t\t\t\t\n                worker = new Thread(new Runnable() {\n                    public void run() {\n                        for (;;) {\n                        \tlong waitTime = minimumWaitTime();\n                        \tif (waitTime > 0) {\n                        \t    try {\n                                    Reply pong = queue.remove(waitTime);\n                                    processReply(pong);\n                        \t    } catch (InterruptedException ie) {\n                        \t        break;\n                        \t    } catch (FifoQueueException fqe) {\n                        \t        ThreadCategory.getInstance(this.getClass()).error(\"Error processing response queue\", fqe);\n                        \t    }\n                        \t} else {\n                        \t    processTimeouts();\n                        \t}\n                        }\n                    }\n                });\n                worker.setDaemon(true);\n                worker.start();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}","id":21977,"modified_method":"/**\n     * Initialize a Pinger object, specifying the timeout and retries.\n     * @param defaultTimeout the timeout, in milliseconds, to wait for returned packets.\n     * @param defaultRetries the number of times to retry a given ping packet\n     * @throws IOException\n     */\n\tpublic Pinger() throws IOException {\n\t\tsynchronized (Pinger.class) {\n\t\t\tif (worker == null) {\n\t\t\t    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();\n\t\t\t\ticmpSocket = new IcmpSocket();\n                receiver = new ReplyReceiver(icmpSocket, queue, PingRequest.FILTER_ID);\n                receiver.start();\n\t\t\t\t\n                worker = new Thread(new Runnable() {\n                    public void run() {\n                        for (;;) {\n                        \tlong waitTime = minimumWaitTime();\n                        \tThreadCategory.getInstance(this.getClass()).info(\"minimum wait time: \" + waitTime);\n                        \tif (waitTime > 0) {\n                        \t    try {\n                                    Reply pong = queue.remove(waitTime);\n                                    if (pong != null) {\n                                        processReply(pong);\n                                    }\n                        \t    } catch (InterruptedException ie) {\n                        \t        break;\n                        \t    } catch (FifoQueueException fqe) {\n                        \t        ThreadCategory.getInstance(this.getClass()).error(\"Error processing response queue\", fqe);\n                        \t    }\n                        \t} else if (waitTime == -1L) {\n                        \t    try {\n                                    Thread.sleep(DEFAULT_WAIT_TIME);\n                                } catch (InterruptedException e) {\n                                    ThreadCategory.getInstance(this.getClass()).info(\"interrupted while waiting for new packets to handle\", e);\n                                }\n                        \t} else {\n                        \t    processTimeouts();\n                        \t}\n                        }\n                    }\n                });\n                worker.setDaemon(true);\n                worker.start();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static long minimumWaitTime() {\n    \tlong now = System.currentTimeMillis();\n    \tlong waitTime = Long.MAX_VALUE;\n    \tsynchronized(waiting) {\n            for (Long tidKey : waiting.keySet()) {\n                long myWait = waiting.get(tidKey).getExpiration() - now;\n                waitTime = Math.min(waitTime, myWait);\n            }\n    \t}\n    \treturn waitTime;\n    }","id":21978,"modified_method":"public long minimumWaitTime() {\n    \tArrayList<PingRequest> pr = null;\n    \tsynchronized(waiting) {\n    \t    if (waiting.size() == 0) {\n    \t        return -1L;\n    \t    }\n    \t    \n            pr = new ArrayList<PingRequest>(waiting.values());\n    \t}\n        Collections.sort(pr, new Comparator<PingRequest>() {\n            public int compare(PingRequest arg0, PingRequest arg1) {\n                if (arg0 == null) {\n                    return -1;\n                } else if (arg1 == null) {\n                    return 1;\n                } else if (arg0.getExpiration() == arg0.getExpiration()) {\n                    return 0;\n                } else {\n                    return (arg1.getExpiration() > arg0.getExpiration()? 1 : -1);\n                }\n            }\n        });\n        ThreadCategory.getInstance(this.getClass()).info(System.currentTimeMillis() + \": \" + pr.size() + \" packets in the queue, lowest is \" + pr.get(0));\n        long waitTime = pr.get(0).getExpiration() - System.currentTimeMillis();\n        if (waitTime < 0) {\n            return 0;\n        } else {\n            return waitTime;\n        }\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processTimeouts() {\n\t    synchronized(waiting) {\n\t        for (PingRequest request : waiting.values()) {\n\t            request.processTimeout();\n\t        }\n\t    }\n    }","id":21979,"modified_method":"protected void processTimeouts() {\n        synchronized(waiting) {\n            for (Iterator<Entry<Long, PingRequest>> it = waiting.entrySet().iterator(); it.hasNext(); ) {\n                PingRequest request = it.next().getValue();\n                ThreadCategory.getInstance(this.getClass()).debug(\"checking request \" + request);\n                if (request.isExpired()) {\n                    it.remove();\n                    PingRequest retry = request.processTimeout();\n                    if (retry != null) {\n                        waiting.put(retry.getTid(), retry);\n                        retry.sendRequest(icmpSocket);\n                    }\n                }\n            }\n        }\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void handleTimeout(ICMPEchoPacket packet) {\n\t    bs.signalAll();\n\t}","id":21980,"modified_method":"public void handleTimeout(ICMPEchoPacket packet) {\n\t    ThreadCategory.getInstance(this.getClass()).info(\"timed out pinging \" + packet.getTID() + \"/\" + packet.getSequenceId());\n\t    bs.signalAll();\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void waitFor() throws InterruptedException {\n        bs.waitFor();\n    }","id":21981,"modified_method":"public void waitFor() throws InterruptedException {\n        ThreadCategory.getInstance(this.getClass()).info(\"waiting to finish\");\n        bs.waitFor();\n    }","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void handleResponse(ICMPEchoPacket packet) {\n\t    responseTime = packet.getPingRTT();\n\t    bs.signalAll();\n\t}","id":21982,"modified_method":"public void handleResponse(ICMPEchoPacket packet) {\n\t    ThreadCategory.getInstance(this.getClass()).info(\"got response for \" + packet.getTID() + \"/\" + packet.getSequenceId());\n\t    responseTime = packet.getPingRTT();\n\t    bs.signalAll();\n\t}","commit_id":"7056ef0b16f15ce28816e30493e28148d9122b30","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the percentage of null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNull(list)).divide(new BigDecimal(list.size())).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","id":21983,"modified_method":"/**\n\t * Get the percentage of null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNull(list)).divide(new BigDecimal(list.size()), BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size())).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","id":21984,"modified_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size()), BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the median of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the median of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal median(List<BigDecimal> list) {\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tCollections.sort(notNullEntries);\n\t\t\n\t\tif (notNullEntries.size() % 2 == 0) {\n\t\t\t// even number of entries, take the mean of the 2 center ones\n\t\t\tBigDecimal value1, value2;\n\t\t\tvalue1 = notNullEntries.get(notNullEntries.size() / 2);\n\t\t\tvalue2 = notNullEntries.get((notNullEntries.size() / 2) - 1);\n\t\t\treturn value1.add(value2).divide(new BigDecimal(2));\n\t\t} else {\n\t\t\treturn notNullEntries.get(notNullEntries.size() / 2);\n\t\t}\n\t}","id":21985,"modified_method":"/**\n\t * Get the median of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the median of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal median(List<BigDecimal> list) {\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tCollections.sort(notNullEntries);\n\t\t\n\t\tif (notNullEntries.size() % 2 == 0) {\n\t\t\t// even number of entries, take the mean of the 2 center ones\n\t\t\tBigDecimal value1, value2;\n\t\t\tvalue1 = notNullEntries.get(notNullEntries.size() / 2);\n\t\t\tvalue2 = notNullEntries.get((notNullEntries.size() / 2) - 1);\n\t\t\treturn value1.add(value2).divide(new BigDecimal(2), BigDecimal.ROUND_HALF_UP);\n\t\t} else {\n\t\t\treturn notNullEntries.get(notNullEntries.size() / 2);\n\t\t}\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the average of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the average of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal average(List<BigDecimal> list) {\n\t\tBigDecimal total = new BigDecimal(0);\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tif (notNullEntries.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tfor (BigDecimal entry : notNullEntries) {\n\t\t\ttotal = total.add(entry);\n\t\t}\n\t\t\n\t\treturn total.divide(new BigDecimal(notNullEntries.size()));\n\t}","id":21986,"modified_method":"/**\n\t * Get the average of the contents of a {@link List} of {@link BigDecimal} values, excluding null entries\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the average of the not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal average(List<BigDecimal> list) {\n\t\tBigDecimal total = new BigDecimal(0);\n\t\tList<BigDecimal> notNullEntries = getNotNullEntries(list);\n\t\tif (notNullEntries.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tfor (BigDecimal entry : notNullEntries) {\n\t\t\ttotal = total.add(entry);\n\t\t}\n\t\t\n\t\treturn total.divide(new BigDecimal(notNullEntries.size()), BigDecimal.ROUND_HALF_UP);\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Send this PingRequest through the given icmpSocket\n     * @param icmpSocket\n     */\n    public void sendRequest(IcmpSocket icmpSocket) {\n        try {\n            m_expiration = System.currentTimeMillis() + m_timeout;\n            icmpSocket.send(getDatagram());\n        } catch (Throwable t) {\n            m_callback.handleError(this, t);\n        }\n    }","id":21987,"modified_method":"/**\n     * Send this PingRequest through the given icmpSocket\n     * @param icmpSocket\n     */\n    public void sendRequest(IcmpSocket icmpSocket) {\n        try {\n            m_expiration = System.currentTimeMillis() + m_timeout;\n            ICMPEchoPacket iPkt = new ICMPEchoPacket(getTid());\n            iPkt.setIdentity(FILTER_ID);\n            iPkt.setSequenceId(getSequenceId());\n            iPkt.computeChecksum();\n            m_request = iPkt;\n\n            byte[] data = iPkt.toBytes();\n            DatagramPacket packet = new DatagramPacket(data, data.length, getAddress(), 0);\n            icmpSocket.send(packet);\n        } catch (Throwable t) {\n            m_callback.handleError(this, t);\n        }\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public PingRequest processTimeout() {\n        PingRequest returnval = null;\n        if (isExpired()) {\n            if (getRetries() > 0) {\n                returnval = new PingRequest(getAddress(), getTimeout(), getRetries() - 1, getSequenceId(), m_callback);\n            } else {\n                m_callback.handleTimeout(getRequest());\n            }\n        }\n        return returnval;\n    }","id":21988,"modified_method":"public PingRequest processTimeout() {\n        PingRequest returnval = null;\n        if (this.isExpired()) {\n            if (this.getRetries() > 0) {\n                returnval = new PingRequest(getAddress(), getTimeout(), getRetries() - 1, getSequenceId(), m_callback);\n            } else {\n                m_callback.handleTimeout(getRequest());\n            }\n        }\n        return returnval;\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testSinglePingFailure() throws Exception {\n        assertNull(m_pinger.ping(m_badHost));\n        Thread.sleep(1000);\n    }","id":21989,"modified_method":"public void testSinglePingFailure() throws Exception {\n        assertNull(m_pinger.ping(m_badHost));\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testParallelPingFailure() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        Thread.sleep(1000);\n        assertTrue(CollectionMath.countNotNull(items) == 0);\n    }","id":21990,"modified_method":"public void testParallelPingFailure() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_badHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        assertTrue(CollectionMath.countNotNull(items) == 0);\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testParallelPing() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        Thread.sleep(1000);\n        assertTrue(CollectionMath.countNotNull(items) > 0);\n    }","id":21991,"modified_method":"public void testParallelPing() throws Exception {\n        List<Number> items = m_pinger.parallelPing(m_goodHost, 10, Pinger.DEFAULT_TIMEOUT, 50);\n        System.out.println(\"response times = \" + items);\n        System.out.println(\"pings = \" + items.size() + \", passed = \" + CollectionMath.countNotNull(items) + \" (\" + CollectionMath.percentNotNull(items) + \"%), failed = \" + CollectionMath.countNull(items) + \" (\" + CollectionMath.percentNull(items) + \"%), average = \" + (CollectionMath.average(items).floatValue() / 1000F) + \"ms\");\n        assertTrue(CollectionMath.countNotNull(items) > 0);\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testSinglePing() throws Exception {\n        assertTrue(m_pinger.ping(m_goodHost) > 0);\n        Thread.sleep(1000);\n    }","id":21992,"modified_method":"public void testSinglePing() throws Exception {\n        assertTrue(m_pinger.ping(m_goodHost) > 0);\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initialize a Pinger object, specifying the timeout and retries.\n     * @param defaultTimeout the timeout, in milliseconds, to wait for returned packets.\n     * @param defaultRetries the number of times to retry a given ping packet\n     * @throws IOException\n     */\n\tpublic Pinger() throws IOException {\n\t\tsynchronized (Pinger.class) {\n\t\t\tif (worker == null) {\n\t\t\t    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();\n\t\t\t\ticmpSocket = new IcmpSocket();\n                receiver = new ReplyReceiver(icmpSocket, queue, PingRequest.FILTER_ID);\n                receiver.start();\n\t\t\t\t\n                worker = new Thread(new Runnable() {\n                    public void run() {\n                        for (;;) {\n                        \tlong waitTime = minimumWaitTime();\n                        \tif (waitTime > 0) {\n                        \t    try {\n                                    Reply pong = queue.remove(waitTime);\n                                    processReply(pong);\n                        \t    } catch (InterruptedException ie) {\n                        \t        break;\n                        \t    } catch (FifoQueueException fqe) {\n                        \t        ThreadCategory.getInstance(this.getClass()).error(\"Error processing response queue\", fqe);\n                        \t    }\n                        \t} else {\n                        \t    processTimeouts();\n                        \t}\n                        }\n                    }\n                });\n                worker.setDaemon(true);\n                worker.start();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}","id":21993,"modified_method":"/**\n     * Initialize a Pinger object, specifying the timeout and retries.\n     * @param defaultTimeout the timeout, in milliseconds, to wait for returned packets.\n     * @param defaultRetries the number of times to retry a given ping packet\n     * @throws IOException\n     */\n\tpublic Pinger() throws IOException {\n\t\tsynchronized (Pinger.class) {\n\t\t\tif (worker == null) {\n\t\t\t    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();\n\t\t\t\ticmpSocket = new IcmpSocket();\n                receiver = new ReplyReceiver(icmpSocket, queue, PingRequest.FILTER_ID);\n                receiver.start();\n\t\t\t\t\n                worker = new Thread(new Runnable() {\n                    public void run() {\n                        for (;;) {\n                        \tlong waitTime = minimumWaitTime();\n                        \tThreadCategory.getInstance(this.getClass()).info(\"minimum wait time: \" + waitTime);\n                        \tif (waitTime > 0) {\n                        \t    try {\n                                    Reply pong = queue.remove(waitTime);\n                                    if (pong != null) {\n                                        processReply(pong);\n                                    }\n                        \t    } catch (InterruptedException ie) {\n                        \t        break;\n                        \t    } catch (FifoQueueException fqe) {\n                        \t        ThreadCategory.getInstance(this.getClass()).error(\"Error processing response queue\", fqe);\n                        \t    }\n                        \t} else if (waitTime == -1L) {\n                        \t    try {\n                                    Thread.sleep(DEFAULT_WAIT_TIME);\n                                } catch (InterruptedException e) {\n                                    ThreadCategory.getInstance(this.getClass()).info(\"interrupted while waiting for new packets to handle\", e);\n                                }\n                        \t} else {\n                        \t    processTimeouts();\n                        \t}\n                        }\n                    }\n                });\n                worker.setDaemon(true);\n                worker.start();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static long minimumWaitTime() {\n    \tlong now = System.currentTimeMillis();\n    \tlong waitTime = Long.MAX_VALUE;\n    \tsynchronized(waiting) {\n            for (Long tidKey : waiting.keySet()) {\n                long myWait = waiting.get(tidKey).getExpiration() - now;\n                waitTime = Math.min(waitTime, myWait);\n            }\n    \t}\n    \treturn waitTime;\n    }","id":21994,"modified_method":"public long minimumWaitTime() {\n    \tArrayList<PingRequest> pr = null;\n    \tsynchronized(waiting) {\n    \t    if (waiting.size() == 0) {\n    \t        return -1L;\n    \t    }\n    \t    \n            pr = new ArrayList<PingRequest>(waiting.values());\n    \t}\n        Collections.sort(pr, new Comparator<PingRequest>() {\n            public int compare(PingRequest arg0, PingRequest arg1) {\n                if (arg0 == null) {\n                    return -1;\n                } else if (arg1 == null) {\n                    return 1;\n                } else if (arg0.getExpiration() == arg0.getExpiration()) {\n                    return 0;\n                } else {\n                    return (arg1.getExpiration() > arg0.getExpiration()? 1 : -1);\n                }\n            }\n        });\n        ThreadCategory.getInstance(this.getClass()).info(System.currentTimeMillis() + \": \" + pr.size() + \" packets in the queue, lowest is \" + pr.get(0));\n        long waitTime = pr.get(0).getExpiration() - System.currentTimeMillis();\n        if (waitTime < 0) {\n            return 0;\n        } else {\n            return waitTime;\n        }\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processTimeouts() {\n\t    synchronized(waiting) {\n\t        for (PingRequest request : waiting.values()) {\n\t            request.processTimeout();\n\t        }\n\t    }\n    }","id":21995,"modified_method":"protected void processTimeouts() {\n        synchronized(waiting) {\n            for (Iterator<Entry<Long, PingRequest>> it = waiting.entrySet().iterator(); it.hasNext(); ) {\n                PingRequest request = it.next().getValue();\n                ThreadCategory.getInstance(this.getClass()).debug(\"checking request \" + request);\n                if (request.isExpired()) {\n                    it.remove();\n                    PingRequest retry = request.processTimeout();\n                    if (retry != null) {\n                        waiting.put(retry.getTid(), retry);\n                        retry.sendRequest(icmpSocket);\n                    }\n                }\n            }\n        }\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void handleTimeout(ICMPEchoPacket packet) {\n\t    bs.signalAll();\n\t}","id":21996,"modified_method":"public void handleTimeout(ICMPEchoPacket packet) {\n\t    ThreadCategory.getInstance(this.getClass()).info(\"timed out pinging \" + packet.getTID() + \"/\" + packet.getSequenceId());\n\t    bs.signalAll();\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void waitFor() throws InterruptedException {\n        bs.waitFor();\n    }","id":21997,"modified_method":"public void waitFor() throws InterruptedException {\n        ThreadCategory.getInstance(this.getClass()).info(\"waiting to finish\");\n        bs.waitFor();\n    }","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void handleResponse(ICMPEchoPacket packet) {\n\t    responseTime = packet.getPingRTT();\n\t    bs.signalAll();\n\t}","id":21998,"modified_method":"public void handleResponse(ICMPEchoPacket packet) {\n\t    ThreadCategory.getInstance(this.getClass()).info(\"got response for \" + packet.getTID() + \"/\" + packet.getSequenceId());\n\t    responseTime = packet.getPingRTT();\n\t    bs.signalAll();\n\t}","commit_id":"6c9c612bf5b3efc0ae42b10493894b4a643757b3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size())).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","id":21999,"modified_method":"/**\n\t * Get the percentage of not-null entries in a {@link List} of {@link BigDecimal} values\n\t * @param list the {@link List} of {@link BigDecimal} values\n\t * @return the percentage of not-null values as a {@link BigDecimal} value\n\t */\n\tpublic static BigDecimal percentNotNull(List<BigDecimal> list) {\n\t\tif (list.size() > 0) {\n\t\t\treturn new BigDecimal(countNotNull(list)).divide(new BigDecimal(list.size()), BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"c48a1002197f9c91ba7772ae86bae0d73684359f","url":"https://github.com/OpenNMS/opennms"}]