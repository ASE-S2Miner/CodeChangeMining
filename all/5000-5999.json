[{"original_method":"public int getTotalObsoleteProjectCount()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HProject p where p.status = :status\").setParameter(\"status\", EntityStatus.OBSOLETE).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5000,"modified_method":"public int getTotalObsoleteProjectCount()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HProject p where p.status = :status\");\n      q.setParameter(\"status\", EntityStatus.OBSOLETE);\n      q.setCacheable(true).setComment(\"ProjectDAO.getTotalObsoleteProjectCount\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getObsoleteIterations(String slug)\n   {\n      return getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\").setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.OBSOLETE).list();\n   }","id":5001,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getObsoleteIterations(String slug)\n   {\n      Query q = getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\");\n      q.setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.OBSOLETE);\n      q.setCacheable(true).setComment(\"ProjectDAO.getObsoleteIterations\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HProject getBySlug(String slug)\n   {\n      return (HProject) getSession().createCriteria(HProject.class).add(Restrictions.naturalId().set(\"slug\", slug)).setCacheable(true).setComment(\"ProjectDAO.getBySlug\").uniqueResult();\n   }","id":5002,"modified_method":"public HProject getBySlug(String slug)\n   {\n      Criteria crit = getSession().createCriteria(HProject.class);\n      crit.add(Restrictions.naturalId().set(\"slug\", slug));\n      crit.setCacheable(true).setComment(\"ProjectDAO.getBySlug\");\n      return (HProject) crit.uniqueResult();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalProjectCount()\n   {\n      String query = \"select count(*) from HProject\";\n      Long totalCount = (Long) getSession().createQuery(query.toString()).uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5003,"modified_method":"public int getTotalProjectCount()\n   {\n      String query = \"select count(*) from HProject\";\n      Query q = getSession().createQuery(query.toString());\n      q.setCacheable(true).setComment(\"ProjectDAO.getTotalProjectCount\");\n      Long totalCount = (Long) q.uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalReadOnlyProjectCount()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HProject p where p.status = :status\").setParameter(\"status\", EntityStatus.READONLY).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5004,"modified_method":"public int getTotalReadOnlyProjectCount()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HProject p where p.status = :status\");\n      q.setParameter(\"status\", EntityStatus.READONLY);\n      q.setCacheable(true).setComment(\"ProjectDAO.getTotalReadOnlyProjectCount\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProject> getOffsetListByCreateDate(int offset, int count, boolean filterActive, boolean filterReadOnly, boolean filterObsolete)\n   {\n      String condition = constructFilterCondition(filterActive, filterReadOnly, filterObsolete);\n      return getSession().createQuery(\"from HProject p \" + condition + \"order by p.creationDate desc\").setMaxResults(count).setFirstResult(offset).setComment(\"ProjectDAO.getAllProjectOffsetListByCreateDate\").list();\n   }","id":5005,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProject> getOffsetListByCreateDate(int offset, int count, boolean filterActive, boolean filterReadOnly, boolean filterObsolete)\n   {\n      String condition = constructFilterCondition(filterActive, filterReadOnly, filterObsolete);\n      Query q = getSession().createQuery(\"from HProject p \" + condition + \"order by p.creationDate desc\");\n      q.setMaxResults(count).setFirstResult(offset);\n      q.setCacheable(true).setComment(\"ProjectDAO.getOffsetListByCreateDate\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getFilterProjectSize(boolean filterActive, boolean filterReadOnly, boolean filterObsolete)\n   {\n      String query = \"select count(*) from HProject p \" + constructFilterCondition(filterActive, filterReadOnly, filterObsolete);\n      Long totalCount = (Long) getSession().createQuery(query.toString()).uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5006,"modified_method":"public int getFilterProjectSize(boolean filterActive, boolean filterReadOnly, boolean filterObsolete)\n   {\n      String query = \"select count(*) from HProject p \" + constructFilterCondition(filterActive, filterReadOnly, filterObsolete);\n      Query q = getSession().createQuery(query.toString());\n      q.setCacheable(true).setComment(\"ProjectDAO.getFilterProjectSize\");\n      Long totalCount = (Long) q.uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getActiveIterations(String slug)\n   {\n      return getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\").setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.ACTIVE).list();\n   }","id":5007,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getActiveIterations(String slug)\n   {\n      Query q = getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\");\n      q.setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.ACTIVE);\n      q.setCacheable(true).setComment(\"ProjectDAO.getActiveIterations\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HPerson> getProjectMaintainerBySlug(String slug)\n   {\n      Query query = getSession().createQuery(\"select p.maintainers from HProject as p where p.slug = :slug\").setParameter(\"slug\", slug);\n      return query.list();\n   }","id":5008,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HPerson> getProjectMaintainerBySlug(String slug)\n   {\n      Query q = getSession().createQuery(\"select p.maintainers from HProject as p where p.slug = :slug\");\n      q.setParameter(\"slug\", slug);\n      q.setCacheable(true).setComment(\"ProjectDAO.getProjectMaintainerBySlug\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getReadOnlyIterations(String slug)\n   {\n      return getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\").setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.READONLY).list();\n   }","id":5009,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProjectIteration> getReadOnlyIterations(String slug)\n   {\n      Query q = getSession().createQuery(\"from HProjectIteration t where t.project.slug = :projectSlug and t.status = :status\");\n      q.setParameter(\"projectSlug\", slug).setParameter(\"status\", EntityStatus.READONLY);\n      q.setCacheable(true).setComment(\"ProjectDAO.getReadOnlyIterations\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public Map<String, TransUnitWords> getAllWordStatsStatistics(Long iterationId)\n   {\n      // @formatter:off\n      @SuppressWarnings(\"unchecked\")\n      List< Object[]> stats = getSession().createQuery(\"select tft.state, sum(tft.textFlow.wordCount), tft.locale.localeId \" +\n      \t\t\"from HTextFlowTarget tft where tft.textFlow.document.projectIteration.id = :id  and tft.textFlow.obsolete = false\" +\n      \t\t\" and tft.textFlow.document.obsolete = false group by tft.state, tft.locale.localeId\").setParameter(\"id\", iterationId).setCacheable(true).list();\n      // @formatter:on\n\n      Map<String, TransUnitWords> result = new HashMap<String, TransUnitWords>();\n\n      for (Object[] count : stats)\n      {\n         TransUnitWords stat;\n         ContentState state = (ContentState) count[0];\n         Long word = (Long) count[1];\n         LocaleId locale = (LocaleId) count[2];\n         if (!result.containsKey(locale.getId()))\n         {\n            stat = new TransUnitWords();\n            result.put(locale.getId(), stat);\n         }\n         else\n         {\n            stat = result.get(locale.getId());\n         }\n\n         stat.set(state, word.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n      for (TransUnitWords count : result.values())\n      {\n         count.set(ContentState.New, totalCount.intValue() - (count.getApproved() + count.getNeedReview()));\n      }\n      return result;\n   }","id":5010,"modified_method":"/**\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public Map<String, TransUnitWords> getAllWordStatsStatistics(Long iterationId)\n   {\n      // @formatter:off\n      Query q = getSession().createQuery(\"select tft.state, sum(tft.textFlow.wordCount), tft.locale.localeId \" +\n      \t\t\"from HTextFlowTarget tft where tft.textFlow.document.projectIteration.id = :id  and tft.textFlow.obsolete = false\" +\n      \t\t\" and tft.textFlow.document.obsolete = false group by tft.state, tft.locale.localeId\");\n      // @formatter:on\n      q.setParameter(\"id\", iterationId);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getAllWordStatsStatistics\");\n      @SuppressWarnings(\"unchecked\")\n      List<Object[]> stats = q.list();\n\n      Map<String, TransUnitWords> result = new HashMap<String, TransUnitWords>();\n\n      for (Object[] count : stats)\n      {\n         TransUnitWords stat;\n         ContentState state = (ContentState) count[0];\n         Long word = (Long) count[1];\n         LocaleId locale = (LocaleId) count[2];\n         if (!result.containsKey(locale.getId()))\n         {\n            stat = new TransUnitWords();\n            result.put(locale.getId(), stat);\n         }\n         else\n         {\n            stat = result.get(locale.getId());\n         }\n\n         stat.set(state, word.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n      for (TransUnitWords count : result.values())\n      {\n         count.set(ContentState.New, totalCount.intValue() - (count.getApproved() + count.getNeedReview()));\n      }\n      return result;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalActiveProjectIterCount()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\").setParameter(\"status\", EntityStatus.ACTIVE).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5011,"modified_method":"public int getTotalActiveProjectIterCount()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\");\n      q.setParameter(\"status\", EntityStatus.ACTIVE);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getTotalActiveProjectIterCount\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HProjectIteration getBySlug(HIterationProject project, String iterationSlug)\n   {\n      return (HProjectIteration) getSession().createCriteria(HProjectIteration.class).add(Restrictions.naturalId().set(\"project\", project).set(\"slug\", iterationSlug)).setCacheable(true).uniqueResult();\n   }","id":5012,"modified_method":"public HProjectIteration getBySlug(HIterationProject project, String iterationSlug)\n   {\n      Criteria crit = getSession().createCriteria(HProjectIteration.class);\n      crit.add(Restrictions.naturalId().set(\"project\", project).set(\"slug\", iterationSlug));\n      crit.setCacheable(true).setComment(\"ProjectIterationDAO.getBySlug\");\n      return (HProjectIteration) crit.uniqueResult();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public EntityTag getResourcesETag(HProjectIteration projectIteration)\n   {\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      List<Integer> revisions = getSession().createQuery(\n         \"select d.revision from HDocument d \" +\n         \"where d.projectIteration =:iteration \" + \n         \"and d.obsolete = false\")\n            .setParameter(\"iteration\", projectIteration)\n            .list();\n      // @formatter:on\n\n      int hashCode = 1;\n      for (int revision : revisions)\n      {\n         hashCode = 31 * hashCode + revision;\n      }\n\n      String hash = HashUtil.generateHash(String.valueOf(hashCode));\n\n      return EntityTag.valueOf(hash);\n   }","id":5013,"modified_method":"public EntityTag getResourcesETag(HProjectIteration projectIteration)\n   {\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      Query q = getSession().createQuery(\n         \"select d.revision from HDocument d \" +\n         \"where d.projectIteration =:iteration \" + \n         \"and d.obsolete = false\")\n            .setParameter(\"iteration\", projectIteration);\n      // @formatter:on\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getResourcesETag\");\n      List<Integer> revisions = q.list();\n\n      int hashCode = 1;\n      for (int revision : revisions)\n      {\n         hashCode = 31 * hashCode + revision;\n      }\n\n      String hash = HashUtil.generateHash(String.valueOf(hashCode));\n\n      return EntityTag.valueOf(hash);\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * @see DocumentDAO#getStatistics(long, LocaleId)\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public TransUnitCount getStatisticsForContainer(Long iterationId, LocaleId localeId)\n   {\n\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      List<StatusCount> stats = getSession().createQuery(\"select new org.zanata.model.StatusCount(tft.state, count(tft)) \" +\n         \"from HTextFlowTarget tft \" + \n         \"where tft.textFlow.document.projectIteration.id = :id \" + \n         \"  and tft.locale.localeId = :locale\" +\n         \" and tft.textFlow.obsolete = false\" + \n         \" and tft.textFlow.document.obsolete = false\" + \n         \" group by tft.state\")\n         .setParameter(\"id\", iterationId)\n         .setParameter(\"locale\", localeId)\n         .setCacheable(true).list();\n\n      // @formatter:on\n\n      TransUnitCount stat = new TransUnitCount();\n\n      for (StatusCount count : stats)\n      {\n         stat.set(count.status, count.count.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n\n      stat.set(ContentState.New, totalCount.intValue() - (stat.getApproved() + stat.getNeedReview()));\n\n      return stat;\n   }","id":5014,"modified_method":"/**\n    * @see DocumentDAO#getStatistics(long, LocaleId)\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public TransUnitCount getStatisticsForContainer(Long iterationId, LocaleId localeId)\n   {\n\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      Query q = getSession().createQuery(\"select new org.zanata.model.StatusCount(tft.state, count(tft)) \" +\n         \"from HTextFlowTarget tft \" + \n         \"where tft.textFlow.document.projectIteration.id = :id \" + \n         \"  and tft.locale.localeId = :locale\" +\n         \" and tft.textFlow.obsolete = false\" + \n         \" and tft.textFlow.document.obsolete = false\" + \n         \" group by tft.state\");\n      // @formatter:on\n      q.setParameter(\"id\", iterationId)\n            .setParameter(\"locale\", localeId);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getStatisticsForContainer\");\n      List<StatusCount> stats = q.list();\n\n      TransUnitCount stat = new TransUnitCount();\n\n      for (StatusCount count : stats)\n      {\n         stat.set(count.status, count.count.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n\n      stat.set(ContentState.New, totalCount.intValue() - (stat.getApproved() + stat.getNeedReview()));\n\n      return stat;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalProjectIterCount()\n   {\n      String query = \"select count(*) from HProjectIteration\";\n      Long totalCount = (Long) getSession().createQuery(query.toString()).uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5015,"modified_method":"public int getTotalProjectIterCount()\n   {\n      String query = \"select count(*) from HProjectIteration\";\n      Query q = getSession().createQuery(query.toString());\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getTotalProjectIterCount\");\n      Long totalCount = (Long) q.uniqueResult();\n\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * @see DocumentDAO#getStatistics(long, LocaleId)\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public TransUnitWords getWordStatsForContainer(Long iterationId, LocaleId localeId)\n   {\n\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      List<StatusCount> stats = getSession().createQuery(\"select new org.zanata.model.StatusCount(tft.state, sum(tft.textFlow.wordCount)) \" +\n         \"from HTextFlowTarget tft \" + \n         \"where tft.textFlow.document.projectIteration.id = :id \" + \n         \"  and tft.locale.localeId = :locale\" +\n         \" and tft.textFlow.obsolete = false\" + \n         \" and tft.textFlow.document.obsolete = false\" + \n         \" group by tft.state\")\n         .setParameter(\"id\", iterationId)\n         .setParameter(\"locale\", localeId)\n         .setCacheable(true).list();\n\n      // @formatter:on\n\n      TransUnitWords stat = new TransUnitWords();\n\n      for (StatusCount count : stats)\n      {\n         stat.set(count.status, count.count.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n\n      stat.set(ContentState.New, totalCount.intValue() - (stat.getApproved() + stat.getNeedReview()));\n\n      return stat;\n   }","id":5016,"modified_method":"/**\n    * @see DocumentDAO#getStatistics(long, LocaleId)\n    * @param iterationId\n    * @param localeId\n    * @return\n    */\n   public TransUnitWords getWordStatsForContainer(Long iterationId, LocaleId localeId)\n   {\n\n      @SuppressWarnings(\"unchecked\")\n      // @formatter:off\n      Query q = getSession().createQuery(\"select new org.zanata.model.StatusCount(tft.state, sum(tft.textFlow.wordCount)) \" +\n         \"from HTextFlowTarget tft \" + \n         \"where tft.textFlow.document.projectIteration.id = :id \" + \n         \"  and tft.locale.localeId = :locale\" +\n         \" and tft.textFlow.obsolete = false\" + \n         \" and tft.textFlow.document.obsolete = false\" + \n         \" group by tft.state\");\n         // @formatter:on\n      q.setParameter(\"id\", iterationId)\n            .setParameter(\"locale\", localeId);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getWordStatsForContainer\");\n      List<StatusCount> stats = q.list();\n\n\n      TransUnitWords stat = new TransUnitWords();\n\n      for (StatusCount count : stats)\n      {\n         stat.set(count.status, count.count.intValue());\n      }\n\n      Long totalCount = getTotalCountForIteration(iterationId);\n\n      stat.set(ContentState.New, totalCount.intValue() - (stat.getApproved() + stat.getNeedReview()));\n\n      return stat;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HProjectIteration getBySlug(String projectSlug, String iterationSlug)\n   {\n      HIterationProject project = (HIterationProject) getSession().createCriteria(HProject.class).add(Restrictions.naturalId().set(\"slug\", projectSlug)).setCacheable(true).uniqueResult();\n\n      return getBySlug(project, iterationSlug);\n   }","id":5017,"modified_method":"public HProjectIteration getBySlug(String projectSlug, String iterationSlug)\n   {\n      Criteria crit = getSession().createCriteria(HProject.class);\n      crit.add(Restrictions.naturalId().set(\"slug\", projectSlug));\n      crit.setCacheable(true).setComment(\"ProjectIterationDAO.getBySlugs\");\n      HIterationProject project = (HIterationProject) crit.uniqueResult();\n\n      return getBySlug(project, iterationSlug);\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public Long getTotalCountForIteration(Long iterationId)\n   {\n      // @formatter:off\n      Long totalCount = (Long) getSession().createQuery(\n            \"select sum(tf.wordCount) from HTextFlow tf \" +\n            \"where tf.document.projectIteration.id = :id\" +\n            \" and tf.obsolete = false\" +\n            \" and tf.document.obsolete = false\")\n               .setParameter(\"id\", iterationId)\n               .setCacheable(true).uniqueResult();\n      // @formatter:on\n      if (totalCount == null)\n      {\n         totalCount = 0L;\n      }\n      return totalCount;\n   }","id":5018,"modified_method":"public Long getTotalCountForIteration(Long iterationId)\n   {\n      // @formatter:off\n      Query q = getSession().createQuery(\n            \"select sum(tf.wordCount) from HTextFlow tf \" +\n            \"where tf.document.projectIteration.id = :id\" +\n            \" and tf.obsolete = false\" +\n            \" and tf.document.obsolete = false\");\n      // @formatter:on\n      q.setParameter(\"id\", iterationId);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getTotalCountForIteration\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n      {\n         totalCount = 0L;\n      }\n      return totalCount;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalObsoleteProjectIterCount()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\").setParameter(\"status\", EntityStatus.OBSOLETE).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5019,"modified_method":"public int getTotalObsoleteProjectIterCount()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\");\n      q.setParameter(\"status\", EntityStatus.OBSOLETE);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getTotalObsoleteProjectIterCount\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalReadOnlyProjectIterCount()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\").setParameter(\"status\", EntityStatus.READONLY).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5020,"modified_method":"public int getTotalReadOnlyProjectIterCount()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HProjectIteration t where t.status = :status\");\n      q.setParameter(\"status\", EntityStatus.READONLY);\n      q.setCacheable(true).setComment(\"ProjectIterationDAO.getTotalReadOnlyProjectIterCount\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getCountByDocument(Long documentId)\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\").setParameter(\"id\", documentId).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5021,"modified_method":"public int getCountByDocument(Long documentId)\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\");\n      q.setParameter(\"id\", documentId);\n      q.setCacheable(true).setComment(\"TextFlowDAO.getCountByDocument\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalWords()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select sum(tf.wordCount) from HTextFlow tf where tf.obsolete=0\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5022,"modified_method":"public int getTotalWords()\n   {\n      Query q = getSession().createQuery(\"select sum(tf.wordCount) from HTextFlow tf where tf.obsolete=0\");\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTotalWords\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> findByIdList(List<Long> idList)\n   {\n      if (idList == null || idList.isEmpty())\n      {\n         return new ArrayList<HTextFlow>();\n      }\n      Query query = getSession().createQuery(\"FROM HTextFlow WHERE id in (:idList)\");\n      query.setParameterList(\"idList\", idList);\n      query.setComment(\"TextFlowDAO.getByIdList\");\n      return query.list();\n   }","id":5023,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> findByIdList(List<Long> idList)\n   {\n      if (idList == null || idList.isEmpty())\n      {\n         return new ArrayList<HTextFlow>();\n      }\n      Query query = getSession().createQuery(\"FROM HTextFlow WHERE id in (:idList)\");\n      query.setParameterList(\"idList\", idList);\n      // caching could be expensive for long idLists\n      query.setCacheable(false).setComment(\"TextFlowDAO.getByIdList\");\n      return query.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalActiveTextFlows()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=0\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5024,"modified_method":"public int getTotalActiveTextFlows()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=0\");\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTotalActiveTextFlows\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalObsoleteTextFlows()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=1\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5025,"modified_method":"public int getTotalObsoleteTextFlows()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlow tf where tf.obsolete=1\");\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTotalObsoleteTextFlows\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getTransUnitList(Long documentId)\n   {\n      Query query = getSession().createQuery(\"from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\").setParameter(\"id\", documentId);\n      return query.list();\n   }","id":5026,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getTransUnitList(Long documentId)\n   {\n      Query q = getSession().createQuery(\"from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\");\n      q.setParameter(\"id\", documentId);\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTransUnitList\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getTransUnitList(Long documentId, int offset, int count)\n   {\n      Query query = getSession().createQuery(\"from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\").setParameter(\"id\", documentId);\n      return query.setFirstResult(offset).setMaxResults(count).list();\n   }","id":5027,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getTransUnitList(Long documentId, int offset, int count)\n   {\n      Query q = getSession().createQuery(\"from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\");\n      q.setParameter(\"id\", documentId);\n      q.setFirstResult(offset).setMaxResults(count);\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTransUnitList\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalTextFlows()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlow\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5028,"modified_method":"public int getTotalTextFlows()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlow\");\n      q.setCacheable(true).setComment(\"TextFlowDAO.getTotalTextFlows\");\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getNavigationByDocumentId(Long documentId, int offset, boolean reverse)\n   {\n      Criteria c = getSession().createCriteria(HTextFlow.class).add(Restrictions.eq(\"document.id\", documentId)).add(Restrictions.eq(\"obsolete\", false)).setComment(\"TextFlowDAO.getNavigationByDocumentId\");\n\n      if (reverse)\n      {\n         c.add(Restrictions.lt(\"pos\", offset)).addOrder(Order.desc(\"pos\"));\n      }\n      else\n      {\n         c.add(Restrictions.gt(\"pos\", offset)).addOrder(Order.asc(\"pos\"));\n      }\n\n      return c.list();\n\n   }","id":5029,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlow> getNavigationByDocumentId(Long documentId, int offset, boolean reverse)\n   {\n      Criteria c = getSession().createCriteria(HTextFlow.class);\n      c.add(Restrictions.eq(\"document.id\", documentId)).add(Restrictions.eq(\"obsolete\", false));\n      c.setCacheable(true).setComment(\"TextFlowDAO.getNavigationByDocumentId\");\n\n      if (reverse)\n      {\n         c.add(Restrictions.lt(\"pos\", offset)).addOrder(Order.desc(\"pos\"));\n      }\n      else\n      {\n         c.add(Restrictions.gt(\"pos\", offset)).addOrder(Order.asc(\"pos\"));\n      }\n\n      return c.list();\n\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<Long> findIdsWithTranslations(LocaleId locale)\n   {\n      Query q = getSession().getNamedQuery(\"HTextFlow.findIdsWithTranslations\");\n      q.setCacheable(true).setParameter(\"locale\", locale);\n      return q.list();\n   }","id":5030,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<Long> findIdsWithTranslations(LocaleId locale)\n   {\n      Query q = getSession().getNamedQuery(\"HTextFlow.findIdsWithTranslations\");\n      q.setParameter(\"locale\", locale);\n      // TextFlowFilter does its own caching, no need for double caching\n      q.setCacheable(false).setComment(\"TextFlowDAO.findIdsWithTranslations\");\n      return q.list();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public Set<Object[]> getNavigationBy(Long documentId, String search, int offset, LocaleId localeId, boolean reverse)\n   {\n      Query textFlowQuery;\n      Query textFlowTargetQuery;\n      Set<Object[]> idSet;\n      if (reverse)\n      {\n         textFlowQuery = getSession().createQuery(\"select tf.id, tf.pos from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id and lower(tf.content) like :content and tf.pos < :offset  order by tf.pos desc\");\n         textFlowQuery.setParameter(\"id\", documentId);\n         textFlowQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery = getSession().createQuery(\"select tft.textFlow.id, tft.textFlow.pos from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.document.id = :id and lower(tft.content) like :content and tft.locale.localeId = :localeId and tft.textFlow.pos < :offset order by tft.textFlow.pos desc\");\n         textFlowTargetQuery.setParameter(\"id\", documentId);\n         textFlowTargetQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery.setParameter(\"localeId\", localeId);\n         idSet = new TreeSet<Object[]>(new Comparator<Object[]>()\n         {\n            @Override\n            public int compare(Object[] arg0, Object[] arg1)\n            {\n               return ((Integer) arg1[1]).compareTo((Integer) arg0[1]);\n            }\n         });\n      }\n      else\n      {\n         textFlowQuery = getSession().createQuery(\"select tf.id, tf.pos from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id and lower(tf.content) like :content and tf.pos > :offset  order by tf.pos\");\n         textFlowQuery.setParameter(\"id\", documentId);\n         textFlowQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery = getSession().createQuery(\"select tft.textFlow.id, tft.textFlow.pos from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.document.id = :id and lower(tft.content) like :content and tft.locale.localeId = :localeId and tft.textFlow.pos > :offset order by tft.textFlow.pos\");\n         textFlowTargetQuery.setParameter(\"id\", documentId);\n         textFlowTargetQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery.setParameter(\"localeId\", localeId);\n         idSet = new TreeSet<Object[]>(new Comparator<Object[]>()\n         {\n            @Override\n            public int compare(Object[] arg0, Object[] arg1)\n            {\n               return ((Integer) arg0[1]).compareTo((Integer) arg1[1]);\n            }\n         });\n      }\n      textFlowQuery.setParameter(\"offset\", offset);\n      textFlowTargetQuery.setParameter(\"offset\", offset);\n\n      List<Object[]> ids1 = textFlowQuery.list();\n      List<Object[]> ids2 = textFlowTargetQuery.list();\n      idSet.addAll(ids1);\n      idSet.addAll(ids2);\n      return idSet;\n   }","id":5031,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public Set<Object[]> getNavigationBy(Long documentId, String search, int offset, LocaleId localeId, boolean reverse)\n   {\n      Query textFlowQuery;\n      Query textFlowTargetQuery;\n      Set<Object[]> idSet;\n      // TODO look at using Hibernate Search, because this is *expensive*\n      if (reverse)\n      {\n         textFlowQuery = getSession().createQuery(\"select tf.id, tf.pos from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id and lower(tf.content) like :content and tf.pos < :offset  order by tf.pos desc\");\n         textFlowQuery.setParameter(\"id\", documentId);\n         textFlowQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getNavigationByTF-fwd\");\n         textFlowTargetQuery = getSession().createQuery(\"select tft.textFlow.id, tft.textFlow.pos from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.document.id = :id and lower(tft.content) like :content and tft.locale.localeId = :localeId and tft.textFlow.pos < :offset order by tft.textFlow.pos desc\");\n         textFlowTargetQuery.setParameter(\"id\", documentId);\n         textFlowTargetQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery.setParameter(\"localeId\", localeId);\n         textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getNavigationByTFT-fwd\");\n         idSet = new TreeSet<Object[]>(new Comparator<Object[]>()\n         {\n            @Override\n            public int compare(Object[] arg0, Object[] arg1)\n            {\n               return ((Integer) arg1[1]).compareTo((Integer) arg0[1]);\n            }\n         });\n      }\n      else\n      {\n         textFlowQuery = getSession().createQuery(\"select tf.id, tf.pos from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id and lower(tf.content) like :content and tf.pos > :offset  order by tf.pos\");\n         textFlowQuery.setParameter(\"id\", documentId);\n         textFlowQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getNavigationByTF-rev\");\n         textFlowTargetQuery = getSession().createQuery(\"select tft.textFlow.id, tft.textFlow.pos from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.document.id = :id and lower(tft.content) like :content and tft.locale.localeId = :localeId and tft.textFlow.pos > :offset order by tft.textFlow.pos\");\n         textFlowTargetQuery.setParameter(\"id\", documentId);\n         textFlowTargetQuery.setParameter(\"content\", \"%\" + search + \"%\");\n         textFlowTargetQuery.setParameter(\"localeId\", localeId);\n         textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getNavigationByTFT-rev\");\n         idSet = new TreeSet<Object[]>(new Comparator<Object[]>()\n         {\n            @Override\n            public int compare(Object[] arg0, Object[] arg1)\n            {\n               return ((Integer) arg0[1]).compareTo((Integer) arg1[1]);\n            }\n         });\n      }\n      textFlowQuery.setParameter(\"offset\", offset);\n      textFlowTargetQuery.setParameter(\"offset\", offset);\n\n      List<Object[]> ids1 = textFlowQuery.list();\n      List<Object[]> ids2 = textFlowTargetQuery.list();\n      idSet.addAll(ids1);\n      idSet.addAll(ids2);\n      return idSet;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HTextFlow getById(HDocument document, String id)\n   {\n      return (HTextFlow) getSession().createCriteria(HTextFlow.class).add(Restrictions.naturalId().set(\"resId\", id).set(\"document\", document)).setCacheable(true).setComment(\"TextFlowDAO.getById\").uniqueResult();\n   }","id":5032,"modified_method":"public HTextFlow getById(HDocument document, String id)\n   {\n      Criteria cr = getSession().createCriteria(HTextFlow.class);\n      cr.add(Restrictions.naturalId().set(\"resId\", id).set(\"document\", document));\n      cr.setCacheable(true).setComment(\"TextFlowDAO.getById\");\n      return (HTextFlow) cr.uniqueResult();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HTextFlow getObsoleteById(HDocument document, String id)\n   {\n      return (HTextFlow) getSession().createCriteria(HTextFlow.class).add(Restrictions.naturalId().set(\"resId\", id).set(\"document\", document)).add(Restrictions.eq(\"obsolete\", true)).setCacheable(true).setComment(\"TextFlowDAO.getObsoleteById\").uniqueResult();\n   }","id":5033,"modified_method":"public HTextFlow getObsoleteById(HDocument document, String id)\n   {\n      Criteria cr = getSession().createCriteria(HTextFlow.class);\n      cr.add(Restrictions.naturalId().set(\"resId\", id).set(\"document\", document)).add(Restrictions.eq(\"obsolete\", true));\n      cr.setCacheable(true).setComment(\"TextFlowDAO.getObsoleteById\");\n      return (HTextFlow) cr.uniqueResult();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   protected DocIdSet fetchDocIdSet(IndexReader reader) throws IOException\n   {\n      OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      Session session = (Session) Component.getInstance(\"session\");\n      // TODO move DAOs into zanata-model, and use TextFlowDAO.findIdsWithTranslations(LocaleId)\n      log.debug(\"fetching DocIdSet for locale {0}\", locale);\n      Query q = session.getNamedQuery(\"HTextFlow.findIdsWithTranslations\");\n      q.setCacheable(true).setParameter(\"locale\", locale);\n      List<Long> ids = q.list();\n      for (Long id : ids)\n      {\n         Term term = new Term(\"id\", id.toString());\n         TermDocs termDocs = reader.termDocs(term);\n         while (termDocs.next())\n            bitSet.set(termDocs.doc());\n      }\n      return bitSet;\n   }","id":5034,"modified_method":"@Override\n   protected DocIdSet fetchDocIdSet(IndexReader reader) throws IOException\n   {\n      OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      Session session = (Session) Component.getInstance(\"session\");\n      // TODO move DAOs into zanata-model, and use TextFlowDAO.findIdsWithTranslations(LocaleId)\n      log.debug(\"fetching DocIdSet for locale {0}\", locale);\n      Query q = session.getNamedQuery(\"HTextFlow.findIdsWithTranslations\");\n      // we do our own caching, no need for double caching\n      q.setCacheable(false).setParameter(\"locale\", locale);\n      List<Long> ids = q.list();\n      for (Long id : ids)\n      {\n         Term term = new Term(\"id\", id.toString());\n         TermDocs termDocs = reader.termDocs(term);\n         while (termDocs.next())\n            bitSet.set(termDocs.doc());\n      }\n      return bitSet;\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalApprovedWords()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select sum(t.textFlow.wordCount) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\").setParameter(\"state\", ContentState.Approved).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5035,"modified_method":"public int getTotalApprovedWords()\n   {\n      Query q = getSession().createQuery(\"select sum(t.textFlow.wordCount) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.setParameter(\"state\", ContentState.Approved).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalNewTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\").setParameter(\"state\", ContentState.New).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5036,"modified_method":"public int getTotalNewTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.setParameter(\"state\", ContentState.New).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalApprovedTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\").setParameter(\"state\", ContentState.Approved).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5037,"modified_method":"public int getTotalApprovedTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.setParameter(\"state\", ContentState.Approved).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalActiveTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=0\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5038,"modified_method":"public int getTotalActiveTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * @param textFlow\n    * @param localeId\n    * @return\n    */\n   public HTextFlowTarget getByNaturalId(HTextFlow textFlow, HLocale locale)\n   {\n      return (HTextFlowTarget) getSession().createCriteria(HTextFlowTarget.class).add(Restrictions.naturalId().set(\"textFlow\", textFlow).set(\"locale\", locale)).setCacheable(true).setComment(\"TextFlowTargetDAO.getByNaturalId\").uniqueResult();\n   }","id":5039,"modified_method":"/**\n    * @param textFlow\n    * @param localeId\n    * @return\n    */\n   public HTextFlowTarget getByNaturalId(HTextFlow textFlow, HLocale locale)\n   {\n      Criteria cr = getSession().createCriteria(HTextFlowTarget.class);\n      cr.add(Restrictions.naturalId().set(\"textFlow\", textFlow).set(\"locale\", locale));\n      cr.setCacheable(true).setComment(\"TextFlowTargetDAO.getByNaturalId\");\n      return (HTextFlowTarget) cr.uniqueResult();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlowTarget> findAllTranslations(HDocument document, LocaleId localeId)\n   {\n      // @formatter:off\n      return getSession().createQuery(\n         \"select t from HTextFlowTarget t where \" + \n         \"t.textFlow.document =:document \" +\n         \"and t.locale.localeId =:localeId \" + \n         \"and t.state !=:state \" + \n         \"order by t.textFlow.pos\")\n            .setParameter(\"document\", document)\n            .setParameter(\"localeId\", localeId)\n            .setParameter(\"state\", ContentState.New)\n            .list();\n      // @formatter:on\n   }","id":5040,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlowTarget> findAllTranslations(HDocument document, LocaleId localeId)\n   {\n      // @formatter:off\n      Query q = getSession().createQuery(\n            \"select t from HTextFlowTarget t where \" + \n            \"t.textFlow.document =:document \" +\n            \"and t.locale.localeId =:localeId \" + \n            \"and t.state !=:state \" + \n            \"order by t.textFlow.pos\");\n      q.setParameter(\"document\", document);\n      q.setParameter(\"localeId\", localeId);\n      q.setParameter(\"state\", ContentState.New);\n      q.setCacheable(true);\n      return q.list();\n      // @formatter:on\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlowTarget> findTranslations(HDocument document, HLocale locale)\n   {\n      // @formatter:off\n      return getSession().createQuery(\n         \"select t \" +\n         \"from HTextFlowTarget t where \" + \n         \"t.textFlow.document =:document \" +\n         \"and t.locale =:locale \" + \n         \"and t.state !=:state \" +\n         \"and t.textFlow.obsolete=false \" + \n         \"order by t.textFlow.pos\")\n            .setParameter(\"document\", document)\n            .setParameter(\"locale\", locale)\n            .setParameter(\"state\", ContentState.New)\n            .list();      \n      // @formatter:on\n   }","id":5041,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlowTarget> findTranslations(HDocument document, HLocale locale)\n   {\n      // @formatter:off\n      Query q = getSession().createQuery(\n            \"select t \" +\n                  \"from HTextFlowTarget t where \" +\n                  \"t.textFlow.document =:document \" +\n                  \"and t.locale =:locale \" +\n                  \"and t.state !=:state \" +\n                  \"and t.textFlow.obsolete=false \" +\n                  \"order by t.textFlow.pos\");\n      q.setParameter(\"document\", document);\n      q.setParameter(\"locale\", locale);\n      q.setParameter(\"state\", ContentState.New);\n      q.setCacheable(true);\n      return q.list();\n      // @formatter:on\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalObsoleteTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=1\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5042,"modified_method":"public int getTotalObsoleteTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=1\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalNeedReviewTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\").setParameter(\"state\", ContentState.NeedReview).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5043,"modified_method":"public int getTotalNeedReviewTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.setParameter(\"state\", ContentState.NeedReview).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * Fetches a set of equivalent translations for a given document on a given locale.\n    * \n    * @param document The document for which to find equivalent translations.\n    * @param locale The locale. Only translations for this locale are fetched.\n    * @return A scrollable result set (in case there is a large result set). Position 0 of the \n    * result set is the matching translation (HTextFlowTarget) and position 1 is the HTextFlow \n    * in the document that it matches against. \n    */\n   public ScrollableResults findLatestEquivalentTranslations(HDocument document, HLocale locale)\n   {\n      // @formatter:off\n      return getSession().getNamedQuery(\"HTextFlowTarget.findLatestEquivalentTranslations\")\n               .setParameter(\"document\", document)\n               .setParameter(\"docId\", document.getDocId())\n               .setParameter(\"locale\", locale)\n               .setParameter(\"state\", ContentState.Approved)\n               .scroll(ScrollMode.FORWARD_ONLY); // Not Scrollable, only allows forward scrolling\n      // @formatter:on\n   }","id":5044,"modified_method":"/**\n    * Fetches a set of equivalent translations for a given document on a given locale.\n    * \n    * @param document The document for which to find equivalent translations.\n    * @param locale The locale. Only translations for this locale are fetched.\n    * @return A scrollable result set (in case there is a large result set). Position 0 of the \n    * result set is the matching translation (HTextFlowTarget) and position 1 is the HTextFlow \n    * in the document that it matches against. \n    */\n   public ScrollableResults findLatestEquivalentTranslations(HDocument document, HLocale locale)\n   {\n      // @formatter:off\n      Query q = getSession().getNamedQuery(\"HTextFlowTarget.findLatestEquivalentTranslations\");\n      q.setParameter(\"document\", document)\n      .setParameter(\"docId\", document.getDocId())\n      .setParameter(\"locale\", locale)\n      .setParameter(\"state\", ContentState.Approved);\n      q.setCacheable(false); // TODO does it make sense to cache scrollable results?\n      return q.scroll(ScrollMode.FORWARD_ONLY); // Not Scrollable, only allows forward scrolling\n      // @formatter:on\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalTextFlowTargets()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select count(*) from HTextFlowTarget\").uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5045,"modified_method":"public int getTotalTextFlowTargets()\n   {\n      Query q = getSession().createQuery(\"select count(*) from HTextFlowTarget\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public int getTotalNeedReviewWords()\n   {\n      Long totalCount = (Long) getSession().createQuery(\"select sum(t.textFlow.wordCount) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\").setParameter(\"state\", ContentState.NeedReview).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","id":5046,"modified_method":"public int getTotalNeedReviewWords()\n   {\n      Query q = getSession().createQuery(\"select sum(t.textFlow.wordCount) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n      q.setCacheable(true);\n      Long totalCount = (Long) q.setParameter(\"state\", ContentState.NeedReview).uniqueResult();\n      if (totalCount == null)\n         return 0;\n      return totalCount.intValue();\n   }","commit_id":"5260221af67826a5848111dadafd1ebdc86aa01e","url":"https://github.com/zanata/zanata-server"},{"original_method":"public List<DataSet> getDataSets() {\n    return new ArrayList<DataSet>(myDataSets.values());\n  }","id":5047,"modified_method":"public List<DataSet> getDataSets() {\n    synchronized (myDataSets) {\n      return new ArrayList<DataSet>(myDataSets.values());\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addDataSet(DataSet dataSet) {\n    String dataSetId = dataSet.getId();\n    if (myDataSets.containsKey(dataSetId)) {\n      throw new RuntimeException(\"couldn't put another data set by key \" + dataSetId);\n    }\n    LOG.assertLog(!myInitializingDataSetKeys.contains(dataSetId), \"cache data set initialization re-enter : \" + dataSetId);\n    myInitializingDataSetKeys.add(dataSetId);\n    try {\n      dataSet.init();\n      myDataSets.put(dataSetId, dataSet);\n    } finally {\n      myInitializingDataSetKeys.remove(dataSetId);\n    }\n  }","id":5048,"modified_method":"private void addDataSet(DataSet dataSet) {\n    String dataSetId = dataSet.getId();\n    if (myDataSets.containsKey(dataSetId)) {\n      throw new RuntimeException(\"couldn't put another data set by key \" + dataSetId);\n    }\n    LOG.assertLog(!myInitializingDataSetKeys.contains(dataSetId), \"cache data set initialization re-enter : \" + dataSetId);\n    myInitializingDataSetKeys.add(dataSetId);\n    try {\n      dataSet.init();\n      myDataSets.put(dataSetId, dataSet);\n    } finally {\n      myInitializingDataSetKeys.remove(dataSetId);\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public DataSet getDataSet(String dataSetId) {\n    return myDataSets.get(dataSetId);\n  }","id":5049,"modified_method":"protected DataSet getDataSet(String dataSetId, DataSetCreator creator) {\n    synchronized (myDataSets) {\n      DataSet result = myDataSets.get(dataSetId);\n      if(result != null || creator == null) {\n        return result;\n      }\n      result = creator.create(this);\n      addDataSet(result);\n      return result;\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void cacheRemoved() {\n    myDataSets.clear();\n  }","id":5050,"modified_method":"protected void cacheRemoved() {\n    synchronized (myDataSets) {\n      myDataSets.clear();\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isAttached() {\n    return CachesManager.getInstance().getCache(myKey) == this;\n  }","id":5051,"modified_method":"public boolean isAttached() {\n    return CachesManager.getInstance().getCache(myKey, null, null) == this;\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void cacheAttached() {\n  }","id":5052,"modified_method":"protected void cacheAttached() {\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void removeDataSet(DataSet dataSet) {\n    myDataSets.remove(dataSet.getId());\n  }","id":5053,"modified_method":"public void removeDataSet(DataSet dataSet) {\n    synchronized (myDataSets) {\n      myDataSets.remove(dataSet.getId());\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeAllCaches() {\n    List keys = new ArrayList(myCaches.keySet());\n    for (Object key : keys) {\n      removeCache(key);\n    }\n  }","id":5054,"modified_method":"private void removeAllCaches() {\n    synchronized (myLock) {\n      List keys = new ArrayList(myCaches.keySet());\n      for (Object key : keys) {\n        removeCache(key);\n      }\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void putCache(Object key, AbstractCache cache, List<SModelDescriptor> dependsOnModels) {\n    if (myCaches.containsKey(key)) {\n      throw new RuntimeException(\"can't put another cache by key \" + key);\n    }\n    myCaches.put(key, cache);\n    myDependsOnModels.put(key, new ArrayList<SModelDescriptor>(dependsOnModels));\n    ModelEventRouter eventRouter = new ModelEventRouter(cache);\n    myModelEventRouters.put(cache, eventRouter);\n\n    for (SModelDescriptor dependsOnModel : dependsOnModels) {\n      dependsOnModel.addModelListener(eventRouter);\n    }\n    cache.cacheAttached();\n  }","id":5055,"modified_method":"private void putCache(Object key, AbstractCache cache, List<SModelDescriptor> dependsOnModels) {\n    if (myCaches.containsKey(key)) {\n      throw new RuntimeException(\"can't put another cache by key \" + key);\n    }\n    myCaches.put(key, cache);\n    myDependsOnModels.put(key, dependsOnModels);\n    ModelEventRouter eventRouter = new ModelEventRouter(cache);\n    myModelEventRouters.put(cache, eventRouter);\n\n    for (SModelDescriptor dependsOnModel : dependsOnModels) {\n      dependsOnModel.addModelListener(eventRouter);\n    }\n    cache.cacheAttached();\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void initComponent() {\n    mySModelRepository.addModelRepositoryListener(new SModelRepositoryAdapter() {\n      public void modelRemoved(SModelDescriptor modelDescriptor) {\n        List keysToRemove = new ArrayList();\n        SModelReference reference = modelDescriptor.getSModelReference();\n        for (Object key : myDependsOnModels.keySet()) {\n          List<SModelDescriptor> dependsOnModels = myDependsOnModels.get(key);\n          for (SModelDescriptor dependsOnModel : dependsOnModels) {\n            if (dependsOnModel.getSModelReference().equals(reference)) {\n              keysToRemove.add(key);\n            }\n          }\n        }\n\n        for (Object key : keysToRemove) {\n          removeCache(key);\n        }\n      }\n    });\n\n    myClassLoaderManager.addReloadHandler(new ReloadAdapter() {\n      public void onReload() {\n        removeAllCaches();\n      }\n    });\n  }","id":5056,"modified_method":"public void initComponent() {\n    mySModelRepository.addModelRepositoryListener(new SModelRepositoryAdapter() {\n      public void modelRemoved(SModelDescriptor modelDescriptor) {\n        List<Object> keysToRemove = new ArrayList<Object>();\n        SModelReference reference = modelDescriptor.getSModelReference();\n        for (Object key : myDependsOnModels.keySet()) {\n          List<SModelDescriptor> dependsOnModels = myDependsOnModels.get(key);\n          for (SModelDescriptor dependsOnModel : dependsOnModels) {\n            if (dependsOnModel.getSModelReference().equals(reference)) {\n              keysToRemove.add(key);\n            }\n          }\n        }\n\n        for (Object key : keysToRemove) {\n          removeCache(key);\n        }\n      }\n    });\n\n    myClassLoaderManager.addReloadHandler(new ReloadAdapter() {\n      public void onReload() {\n        removeAllCaches();\n      }\n    });\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void removeCache(Object key) {\n    if (!myCaches.containsKey(key)) {\n      return;\n    }\n    AbstractCache cache = myCaches.remove(key);\n    ModelEventRouter eventRouter = myModelEventRouters.remove(cache);\n    List<SModelDescriptor> dependsOnModels = myDependsOnModels.remove(key);\n    for (SModelDescriptor dependsOnModel : dependsOnModels) {\n      dependsOnModel.removeModelListener(eventRouter);\n    }\n\n    cache.cacheRemoved();\n  }","id":5057,"modified_method":"public void removeCache(Object key) {\n    synchronized (myLock) {\n      if (!myCaches.containsKey(key)) {\n        return;\n      }\n      AbstractCache cache = myCaches.remove(key);\n      ModelEventRouter eventRouter = myModelEventRouters.remove(cache);\n      List<SModelDescriptor> dependsOnModels = myDependsOnModels.remove(key);\n      for (SModelDescriptor dependsOnModel : dependsOnModels) {\n        dependsOnModel.removeModelListener(eventRouter);\n      }\n\n      cache.cacheRemoved();\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public AbstractCache getCache(Object key) {\n    return myCaches.get(key);\n  }","id":5058,"modified_method":"public <T> AbstractCache getCache(Object key, T element, CacheCreator<T> creator) {\n    synchronized (myLock) {\n      AbstractCache result = myCaches.get(key);\n      if(result != null || element == null || creator == null) {\n        return result;\n      }\n      result = creator.create(key, element);\n      putCache(key, result, new ArrayList<SModelDescriptor>(result.getDependsOnModels(element)));\n      return result;\n    }\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<PropertyDeclaration> getPropertyDeclarations() {\n    if (!containsDataSet(PropertyDeclarationsDataSet.ID)) {\n      addDataSet(new PropertyDeclarationsDataSet(this));\n    }\n    PropertyDeclarationsDataSet dataSet = (PropertyDeclarationsDataSet) getDataSet(PropertyDeclarationsDataSet.ID);\n    return dataSet.getPropertyDeclarations();\n  }","id":5059,"modified_method":"public List<PropertyDeclaration> getPropertyDeclarations() {\n    PropertyDeclarationsDataSet dataSet = (PropertyDeclarationsDataSet) getDataSet(PropertyDeclarationsDataSet.ID, PROPDECL_CACHE_CREATOR);\n    return dataSet.getPropertyDeclarations();\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LinkDeclaration getMostSpecificLinkDeclarationByRole(String role) {\n    if (!containsDataSet(LinkDeclarationsDataSet.ID)) {\n      addDataSet(new LinkDeclarationsDataSet(this));\n    }\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID);\n    return dataSet.getMostSpecificLinkDeclarationByRole(role);\n  }","id":5060,"modified_method":"public LinkDeclaration getMostSpecificLinkDeclarationByRole(String role) {\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID, LINKDECL_CACHE_CREATOR);\n    return dataSet.getMostSpecificLinkDeclarationByRole(role);\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<LinkDeclaration> getLinkDeclarationsExcludingOverridden() {\n    if (!containsDataSet(LinkDeclarationsDataSet.ID)) {\n      addDataSet(new LinkDeclarationsDataSet(this));\n    }\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID);\n    return dataSet.getLinkDeclarationsExcludingOverridden();\n  }","id":5061,"modified_method":"public List<LinkDeclaration> getLinkDeclarationsExcludingOverridden() {\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID, LINKDECL_CACHE_CREATOR);\n    return dataSet.getLinkDeclarationsExcludingOverridden();\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LinkDeclaration getLinkDeclarationByRole(String role) {\n    if (!containsDataSet(LinkDeclarationsDataSet.ID)) {\n      addDataSet(new LinkDeclarationsDataSet(this));\n    }\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID);\n    return dataSet.getLinkDeclarationByRole(role);\n  }","id":5062,"modified_method":"public LinkDeclaration getLinkDeclarationByRole(String role) {\n    LinkDeclarationsDataSet dataSet = (LinkDeclarationsDataSet) getDataSet(LinkDeclarationsDataSet.ID, LINKDECL_CACHE_CREATOR);\n    return dataSet.getLinkDeclarationByRole(role);\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public PropertyDeclaration getPropertyDeclarationByName(String name) {\n    if (!containsDataSet(PropertyDeclarationsDataSet.ID)) {\n      addDataSet(new PropertyDeclarationsDataSet(this));\n    }\n    PropertyDeclarationsDataSet dataSet = (PropertyDeclarationsDataSet) getDataSet(PropertyDeclarationsDataSet.ID);\n    return dataSet.getPropertyDeclarationByName(name);\n  }","id":5063,"modified_method":"public PropertyDeclaration getPropertyDeclarationByName(String name) {\n    PropertyDeclarationsDataSet dataSet = (PropertyDeclarationsDataSet) getDataSet(PropertyDeclarationsDataSet.ID, PROPDECL_CACHE_CREATOR);\n    return dataSet.getPropertyDeclarationByName(name);\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<AbstractConceptDeclaration> getConcepts() {\n    if (!containsDataSet(ConceptsDataSet.ID)) {\n      addDataSet(new ConceptsDataSet(myTopConcept, this));\n    }\n    ConceptsDataSet dataSet = (ConceptsDataSet) getDataSet(ConceptsDataSet.ID);\n    return dataSet.getConcepts();\n\n  }","id":5064,"modified_method":"public List<AbstractConceptDeclaration> getConcepts() {\n    ConceptsDataSet dataSet = (ConceptsDataSet) getDataSet(ConceptsDataSet.ID, CONCEPTS_CACHE_CREATOR);\n    return dataSet.getConcepts();\n\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptProperty getConceptPropertyByName(String name) {\n    if (!containsDataSet(ConceptPropertiesDataSet.ID)) {\n      addDataSet(new ConceptPropertiesDataSet(this));\n    }\n    ConceptPropertiesDataSet dataSet = (ConceptPropertiesDataSet) getDataSet(ConceptPropertiesDataSet.ID);\n    return dataSet.getConceptPropertyByName(name);\n  }","id":5065,"modified_method":"public ConceptProperty getConceptPropertyByName(String name) {\n    ConceptPropertiesDataSet dataSet = (ConceptPropertiesDataSet) getDataSet(ConceptPropertiesDataSet.ID, CONCEPTPROPS_CACHE_CREATOR);\n    return dataSet.getConceptPropertyByName(name);\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static ConceptAndSuperConceptsCache getInstance(AbstractConceptDeclaration topConcept) {\n    SNode node = topConcept.getNode();\n    Object key = keyProducer.createKey(node);\n    CachesManager cachesManager = CachesManager.getInstance();\n    ConceptAndSuperConceptsCache cache;\n    synchronized (cachesManager) {\n      cache = (ConceptAndSuperConceptsCache) cachesManager.getCache(key);\n      if (cache == null) {\n        cache = new ConceptAndSuperConceptsCache(key, topConcept);\n        Set<SModelDescriptor> dependsOnModel = new HashSet<SModelDescriptor>();\n        for (AbstractConceptDeclaration concept : cache.getConcepts()) {\n          dependsOnModel.add(concept.getModel().getModelDescriptor());\n        }\n        CachesManager.getInstance().putCache(key, cache, dependsOnModel);\n      }\n    }\n    return cache;\n  }","id":5066,"modified_method":"public static ConceptAndSuperConceptsCache getInstance(AbstractConceptDeclaration topConcept) {\n    SNode node = topConcept.getNode();\n    Object key = keyProducer.createKey(node);\n    return (ConceptAndSuperConceptsCache) CachesManager.getInstance().getCache(key, topConcept, new CacheCreator<AbstractConceptDeclaration>() {\n      public AbstractCache create(Object key, AbstractConceptDeclaration element) {\n        return new ConceptAndSuperConceptsCache(key, element);\n      }\n    });\n  }","commit_id":"bc1e0c71d3fec4da98a47e04a49e8e32cc121919","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n\t * Create the mock http application that can be used for testing.\n\t * \n\t * @param path\n\t *            The absolute path on disk to the web application contents\n\t *            (e.g. war root) - may be null\n\t * @see wicket.protocol.http.MockServletContext\n\t */\n\tpublic MockWebApplication(final String path)\n\t{\n\t\tApplication.set(this);\n\n\t\tcontext = new MockServletContext(this, path);\n\n\t\tsetWicketServlet(new WicketServlet()\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic ServletContext getServletContext()\n\t\t\t{\n\t\t\t\treturn context;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @see javax.servlet.GenericServlet#getInitParameter(java.lang.String)\n\t\t\t */\n\t\t\tpublic String getInitParameter(String name)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @see javax.servlet.GenericServlet#getServletName()\n\t\t\t */\n\t\t\tpublic String getServletName()\n\t\t\t{\n\t\t\t\treturn \"WicketMockServlet\";\n\t\t\t}\n\t\t});\n\t\tinternalInit();\n\n\t\tservletSession = new MockHttpSession(context);\n\t\tservletRequest = new MockHttpServletRequest(this, servletSession, context);\n\t\tservletResponse = new MockHttpServletResponse();\n\t\twicketRequest = newWebRequest(servletRequest);\n\t\twicketSession = getSession(wicketRequest);\n\n\t\t// set the default context path\n\t\tgetApplicationSettings().setContextPath(context.getServletContextName());\n\n\t\tgetRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);\n\t\tgetResourceSettings().setResourceFinder(new WebApplicationPath(context));\n\t}","id":5067,"modified_method":"/**\n\t * Create the mock http application that can be used for testing.\n\t * \n\t * @param path\n\t *            The absolute path on disk to the web application contents\n\t *            (e.g. war root) - may be null\n\t * @see wicket.protocol.http.MockServletContext\n\t */\n\tpublic MockWebApplication(final String path)\n\t{\n\t\tApplication.set(this);\n\n\t\tcontext = new MockServletContext(this, path);\n\n\t\tsetWicketServlet(new WicketServlet()\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic ServletContext getServletContext()\n\t\t\t{\n\t\t\t\treturn context;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @see javax.servlet.GenericServlet#getInitParameter(java.lang.String)\n\t\t\t */\n\t\t\tpublic String getInitParameter(String name)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @see javax.servlet.GenericServlet#getServletName()\n\t\t\t */\n\t\t\tpublic String getServletName()\n\t\t\t{\n\t\t\t\treturn \"WicketMockServlet\";\n\t\t\t}\n\t\t});\n\t\tinternalInit();\n\n\t\tservletSession = new MockHttpSession(context);\n\t\tservletRequest = new MockHttpServletRequest(this, servletSession, context);\n\t\tservletResponse = new MockHttpServletResponse();\n\t\twicketRequest = newWebRequest(servletRequest);\n\t\twicketSession = getSession(wicketRequest);\n\n\t\t// set the default context path\n\t\tgetApplicationSettings().setContextPath(context.getServletContextName());\n\n\t\tgetRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);\n\t\tgetResourceSettings().setResourceFinder(new WebApplicationPath(context));\n\t\t\n\t\tcreateRequestCycle();\n\t}","commit_id":"7e2b92ff6cdc839832d514c3a41e716051e558cf","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Gets the attribute value with the given name\n\t * \n\t * @param name\n\t *            The name of the attribute to store\n\t * @return The value of the attribute\n\t */\n\tprotected final Object getAttribute(final String name)\n\t{\n\t\treturn getSessionStore().getAttribute(RequestCycle.get().getRequest(), name);\n\t}","id":5068,"modified_method":"/**\n\t * Gets the attribute value with the given name\n\t * \n\t * @param name\n\t *            The name of the attribute to store\n\t * @return The value of the attribute\n\t */\n\tprotected final Object getAttribute(final String name)\n\t{\n\t\tRequestCycle cycle = RequestCycle.get();\n\t\tif (cycle != null)\n\t\t{\n\t\t\treturn getSessionStore().getAttribute(cycle.getRequest(), name);\n\t\t}\n\t\treturn null;\n\t}","commit_id":"7e2b92ff6cdc839832d514c3a41e716051e558cf","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Removes the attribute with the given name.\n\t * \n\t * @param name\n\t *            the name of the attribute to remove\n\t */\n\tprotected final void removeAttribute(String name)\n\t{\n\t\tgetSessionStore().removeAttribute(RequestCycle.get().getRequest(), name);\n\t}","id":5069,"modified_method":"/**\n\t * Removes the attribute with the given name.\n\t * \n\t * @param name\n\t *            the name of the attribute to remove\n\t */\n\tprotected final void removeAttribute(String name)\n\t{\n\t\tRequestCycle cycle = RequestCycle.get();\n\t\tif (cycle != null)\n\t\t{\n\t\t\tgetSessionStore().removeAttribute(cycle.getRequest(), name);\n\t\t}\n\t}","commit_id":"7e2b92ff6cdc839832d514c3a41e716051e558cf","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Adds or replaces the attribute with the given name and value.\n\t * \n\t * @param name\n\t *            The name of the attribute\n\t * @param value\n\t *            The value of the attribute\n\t */\n\tprotected final void setAttribute(String name, Object value)\n\t{\n\t\t// Set the actual attribute\n\t\tgetSessionStore().setAttribute(RequestCycle.get().getRequest(), name, value);\n\t}","id":5070,"modified_method":"/**\n\t * Adds or replaces the attribute with the given name and value.\n\t * \n\t * @param name\n\t *            The name of the attribute\n\t * @param value\n\t *            The value of the attribute\n\t */\n\tprotected final void setAttribute(String name, Object value)\n\t{\n\t\tRequestCycle cycle = RequestCycle.get();\n\t\tif (cycle != null)\n\t\t{\n\t\t\t// Set the actual attribute\n\t\t\tgetSessionStore().setAttribute(cycle.getRequest(), name, value);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthrow new WicketRuntimeException(\"Can not set the attribute. No RequestCycle available\");\n\t}","commit_id":"7e2b92ff6cdc839832d514c3a41e716051e558cf","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return List of attributes for this session\n\t */\n\tprotected final List getAttributeNames()\n\t{\n\t\treturn getSessionStore().getAttributeNames(RequestCycle.get().getRequest());\n\t}","id":5071,"modified_method":"/**\n\t * @return List of attributes for this session\n\t */\n\tprotected final List getAttributeNames()\n\t{\n\t\tRequestCycle cycle = RequestCycle.get();\n\t\tif (cycle != null)\n\t\t{\n\t\t\treturn getSessionStore().getAttributeNames(cycle.getRequest());\n\t\t}\n\t\treturn null;\n\t}","commit_id":"7e2b92ff6cdc839832d514c3a41e716051e558cf","url":"https://github.com/apache/wicket"},{"original_method":"@PerformanceTest\n  public void testApp() throws IOException, TimeoutException, InterruptedException {\n    final int numEvents = 2000;\n\n    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(LoggingApp.class);\n\n    try {\n\n      FlowManager flowManager = applicationManager.startFlow(\"LoggingFlow\");\n\n      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"LoggingApp\", \"LoggingFlow\",\n                                                                                             \"source\");\n\n      System.out.println(\"Number of events generated by source flowlet = \" + sourceFlowletMetrics.getProcessed());\n\n      sourceFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(\"Number of events generated by source flowlet = \" + sourceFlowletMetrics.getProcessed());\n\n      BenchmarkRuntimeMetrics loggerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"LoggingApp\", \"LoggingFlow\",\n                                                                                             \"logger\");\n\n      System.out.println(\"Number of events processed by logger flowlet = \" + loggerFlowletMetrics.getProcessed());\n\n      loggerFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(\"Number of events processed by logger flowlet = \" + loggerFlowletMetrics.getProcessed());\n\n    } finally {\n      applicationManager.stopAll();\n    }\n  }","id":5072,"modified_method":"@PerformanceTest\n  public void testApp() throws IOException, TimeoutException, InterruptedException {\n    final int numEvents = 2000;\n\n    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(LoggingApp.class);\n\n    try {\n\n      applicationManager.startFlow(\"LoggingFlow\");\n\n      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"LoggingApp\",\n                                                                                             \"LoggingFlow\", \"source\");\n\n      System.out.println(String.format(\"Number of events generated by source flowlet = %d\",\n                                       sourceFlowletMetrics.getProcessed()));\n\n      sourceFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(String.format(\"Number of events generated by source flowlet = %d\",\n                                       sourceFlowletMetrics.getProcessed()));\n\n      BenchmarkRuntimeMetrics loggerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"LoggingApp\",\n                                                                                             \"LoggingFlow\", \"logger\");\n\n      System.out.println(String.format(\"Number of events processed by logger flowlet = %d\",\n                                       loggerFlowletMetrics.getProcessed()));\n\n      loggerFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(String.format(\"Number of events processed by logger flowlet = %d\",\n                                       loggerFlowletMetrics.getProcessed()));\n\n    } finally {\n      applicationManager.stopAll();\n    }\n  }","commit_id":"dd3006686fb35721e494fc9d9a21371cb7547cea","url":"https://github.com/caskdata/cdap"},{"original_method":"private void init() {\n    LOG.debug(\"Initializing Continuuity Reactor for a performance test.\");\n    File testAppDir = Files.createTempDir();\n\n    File outputDir = new File(testAppDir, \"app\");\n    File tmpDir = new File(testAppDir, \"tmp\");\n    outputDir.mkdirs();\n    tmpDir.mkdirs();\n\n    config.set(\"app.output.dir\", outputDir.getAbsolutePath());\n    config.set(\"app.tmp.dir\", tmpDir.getAbsolutePath());\n\n    try {\n      LOG.debug(\"Connecting with remote AppFabric server\");\n      appFabricServer = getAppFabricClient();\n    } catch (TTransportException e) {\n      LOG.error(\"Error when trying to open connection with remote AppFabric.\");\n      Throwables.propagate(e);\n    }\n\n    Module dataFabricModule;\n    if (config.get(\"perf.datafabric.mode\") != null\n      && config.get(\"perf.datafabric.mode\").equals(\"distributed\")) {\n      dataFabricModule = new DataFabricModules().getDistributedModules();\n    } else {\n      dataFabricModule = new DataFabricModules().getSingleNodeModules();\n    }\n\n    injector = Guice\n      .createInjector(dataFabricModule,\n                      new ConfigModule(config),\n                      new IOModule(),\n                      new LocationRuntimeModule().getInMemoryModules(),\n                      new DiscoveryRuntimeModule().getInMemoryModules(),\n                      new ProgramRunnerRuntimeModule().getInMemoryModules(), new AbstractModule() {\n          @Override\n          protected void configure() {\n            install(new FactoryModuleBuilder().implement(ApplicationManager.class,\n                                                         DefaultBenchmarkManager.class).build\n              (BenchmarkManagerFactory.class));\n            install(new FactoryModuleBuilder().implement(StreamWriter.class,\n                                                         MultiThreadedStreamWriter.class).build\n              (BenchmarkStreamWriterFactory.class));\n            install(new FactoryModuleBuilder().implement(ProcedureClient.class,\n                                                         DefaultProcedureClient.class).build\n              (ProcedureClientFactory.class));\n          }\n        }, new Module() {\n          @Override\n          public void configure(Binder binder) {\n            binder.bind(new TypeLiteral<PipelineFactory<?>>() {\n            }).to(new TypeLiteral<SynchronousPipelineFactory<?>>() {\n            });\n            binder.bind(ManagerFactory.class).to(SyncManagerFactory.class);\n\n            binder.bind(AuthorizationFactory.class).to(PassportAuthorizationFactory.class);\n            binder.bind(MetadataService.Iface.class).to(com.continuuity.metadata.MetadataService.class);\n            binder.bind(AppFabricService.Iface.class).toInstance(appFabricServer);\n            binder.bind(MetaDataStore.class).to(SerializingMetaDataStore.class);\n            binder.bind(StoreFactory.class).to(MDSStoreFactory.class);\n            binder.bind(AuthToken.class).toInstance(TestHelper.DUMMY_AUTH_TOKEN);\n          }\n        }\n      );\n\n    locationFactory = injector.getInstance(LocationFactory.class);\n  }","id":5073,"modified_method":"private void init() {\n    LOG.debug(\"Initializing Continuuity Reactor for a performance test.\");\n    File testAppDir = Files.createTempDir();\n\n    File outputDir = new File(testAppDir, \"app\");\n    File tmpDir = new File(testAppDir, \"tmp\");\n    tmpDir.deleteOnExit();\n    outputDir.mkdirs();\n    tmpDir.mkdirs();\n\n    config.set(\"app.output.dir\", outputDir.getAbsolutePath());\n    config.set(\"app.tmp.dir\", tmpDir.getAbsolutePath());\n\n    try {\n      LOG.debug(\"Connecting with remote AppFabric server\");\n      appFabricServer = getAppFabricClient();\n    } catch (TTransportException e) {\n      LOG.error(\"Error when trying to open connection with remote AppFabric.\");\n      Throwables.propagate(e);\n    }\n\n    Module dataFabricModule;\n    if (config.get(\"perf.datafabric.mode\") != null\n      && config.get(\"perf.datafabric.mode\").equals(\"distributed\")) {\n      dataFabricModule = new DataFabricModules().getDistributedModules();\n    } else {\n      dataFabricModule = new DataFabricModules().getSingleNodeModules();\n    }\n\n    injector = Guice\n      .createInjector(dataFabricModule,\n                      new ConfigModule(config),\n                      new IOModule(),\n                      new LocationRuntimeModule().getInMemoryModules(),\n                      new DiscoveryRuntimeModule().getInMemoryModules(),\n                      new ProgramRunnerRuntimeModule().getInMemoryModules(), new AbstractModule() {\n          @Override\n          protected void configure() {\n            install(new FactoryModuleBuilder().implement(ApplicationManager.class,\n                                                         DefaultBenchmarkManager.class).build\n              (BenchmarkManagerFactory.class));\n            install(new FactoryModuleBuilder().implement(StreamWriter.class,\n                                                         MultiThreadedStreamWriter.class).build\n              (BenchmarkStreamWriterFactory.class));\n            install(new FactoryModuleBuilder().implement(ProcedureClient.class,\n                                                         DefaultProcedureClient.class).build\n              (ProcedureClientFactory.class));\n          }\n        }, new Module() {\n          @Override\n          public void configure(Binder binder) {\n            binder.bind(new TypeLiteral<PipelineFactory<?>>() {\n            }).to(new TypeLiteral<SynchronousPipelineFactory<?>>() {\n            });\n            binder.bind(ManagerFactory.class).to(SyncManagerFactory.class);\n\n            binder.bind(AuthorizationFactory.class).to(PassportAuthorizationFactory.class);\n            binder.bind(MetadataService.Iface.class).to(com.continuuity.metadata.MetadataService.class);\n            binder.bind(AppFabricService.Iface.class).toInstance(appFabricServer);\n            binder.bind(MetaDataStore.class).to(SerializingMetaDataStore.class);\n            binder.bind(StoreFactory.class).to(MDSStoreFactory.class);\n            binder.bind(AuthToken.class).toInstance(TestHelper.DUMMY_AUTH_TOKEN);\n          }\n        }\n      );\n\n    locationFactory = injector.getInstance(LocationFactory.class);\n  }","commit_id":"dd3006686fb35721e494fc9d9a21371cb7547cea","url":"https://github.com/caskdata/cdap"},{"original_method":"@PerformanceTest\n  public void testApp() throws IOException, TimeoutException, InterruptedException {\n    final int numStreamEvents = 10000;\n\n    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(SimpleApp.class);\n\n    try {\n\n      FlowManager flowManager = applicationManager.startFlow(\"SimpleFlow\");\n\n      flowManager.setFlowletInstances(\"source\", 2);\n\n      StreamWriter kvStream = applicationManager.getStreamWriter(\"SimpleStream\");\n\n      for (int i = 0; i < numStreamEvents; i++) {\n        kvStream.send(\"key\" + i + \"=\" + \"val\" + i);\n      }\n\n      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"SimpleApp\", \"SimpleFlow\",\n                                                                                             \"source\");\n\n      System.out.println(\"Number of events processed by source flowlet = \" + sourceFlowletMetrics.getProcessed());\n\n      sourceFlowletMetrics.waitForProcessed(numStreamEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(\"Number of events processed by source flowlet = \" + sourceFlowletMetrics.getProcessed());\n\n      BenchmarkRuntimeMetrics readerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"SimpleApp\", \"SimpleFlow\",\n                                                                                             \"reader\");\n\n      System.out.println(\"Number of events processed by reader flowlet = \" + readerFlowletMetrics.getProcessed());\n\n      readerFlowletMetrics.waitForProcessed(numStreamEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(\"Number of events processed by reader flowlet = \" + readerFlowletMetrics.getProcessed());\n\n    } finally {\n      applicationManager.stopAll();\n    }\n  }","id":5074,"modified_method":"@PerformanceTest\n  public void testApp() throws IOException, TimeoutException, InterruptedException {\n    final int numStreamEvents = 10000;\n\n    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(SimpleApp.class);\n\n    try {\n\n      FlowManager flowManager = applicationManager.startFlow(\"SimpleFlow\");\n\n      flowManager.setFlowletInstances(\"source\", 2);\n\n      StreamWriter kvStream = applicationManager.getStreamWriter(\"SimpleStream\");\n\n      for (int i = 0; i < numStreamEvents; i++) {\n        kvStream.send(\"key\" + i + \"=\" + \"val\" + i);\n      }\n\n      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"SimpleApp\", \"SimpleFlow\",\n                                                                                             \"source\");\n\n      System.out.println(String.format(\"Number of events processed by source flowlet = %d\",\n                                       sourceFlowletMetrics.getProcessed()));\n\n      sourceFlowletMetrics.waitForProcessed(numStreamEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(String.format(\"Number of events processed by source flowlet = %d\",\n                                       sourceFlowletMetrics.getProcessed()));\n\n      BenchmarkRuntimeMetrics readerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics(\"SimpleApp\", \"SimpleFlow\",\n                                                                                             \"reader\");\n\n      System.out.println(String.format(\"Number of events processed by reader flowlet = %d\",\n                                       readerFlowletMetrics.getProcessed()));\n\n      readerFlowletMetrics.waitForProcessed(numStreamEvents, 120, TimeUnit.SECONDS);\n\n      System.out.println(String.format(\"Number of events processed by reader flowlet = %d\",\n                                       readerFlowletMetrics.getProcessed()));\n\n    } finally {\n      applicationManager.stopAll();\n    }\n  }","commit_id":"dd3006686fb35721e494fc9d9a21371cb7547cea","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n  * Gets the content of a given template file.\n  * <P>\n  *\n  * @param cms A_CmsObject Object for accessing system resources\n  * @param templateFile Filename of the template file\n  * @param elementName not used here\n  * @param parameters get the parameters action for the button activity\n  * and id for the used content definition instance object\n  * and the author, title, text content for setting the new/changed data\n  * @param templateSelector template section that should be processed.\n  * @return Processed content of the given template file.\n  * @exception CmsException\n  */\n\n  private byte[] getContentHead(CmsObject cms, CmsXmlWpTemplateFile template, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\n    //return var\n    byte[] processResult = null;\n    //get the class of the content definition\n    Class cdClass = getContentDefinitionClass();\n\n    //init vars\n    String singleSelection = \"\";\n    String allSelections = \"\";\n\n    //create new or fetch existing session\n    CmsSession session = (CmsSession) cms.getRequestContext().getSession(true);\n    String uri = cms.getRequestContext().getUri();\n    String sessionSelectBoxValue = uri+\"selectBoxValue\";\n    //get filter method from session\n    String selectBoxValue = (String) parameters.get(\"selectbox\");\n    if(selectBoxValue == null) {\n      // set default value\n      if((String)session.getValue(sessionSelectBoxValue) != null) {\n        // came back from edit or something ... redisplay last filter\n          selectBoxValue = (String)session.getValue(sessionSelectBoxValue);\n      } else {\n        // the very first time here...\n         selectBoxValue = \"0\";\n      }\n    }\n    boolean filterChanged = true;\n    if( selectBoxValue.equals((String)session.getValue(sessionSelectBoxValue)) ) {\n        filterChanged = false;\n    }else {\n        filterChanged = true;\n    }\n\n    //get vector of filter names from the content definition\n    Vector filterMethods = getFilterMethods(cms);\n\n    if( Integer.parseInt(selectBoxValue) >=  filterMethods.size() ) {\n        // the stored seclectBoxValue is does not exist any more, ...\n        selectBoxValue = \"0\";\n    }\n\n    session.putValue(sessionSelectBoxValue, selectBoxValue); // store in session for Selectbox!\n    session.putValue(\"filter\",selectBoxValue);  // store filter in session for getContentList!\n\n    String filterParam = (String) parameters.get(\"filterparameter\");\n    String action = (String) parameters.get(\"action\");\n    String setaction = (String) parameters.get(\"setaction\");\n    // create the key for the filterparameter in the session ... should be unique to avoid problems...\n    String sessionFilterParam = uri+selectBoxValue+\"filterparameter\";\n    //store filterparameter in the session, new enty for every filter of every url ...\n    if (filterParam != null) {\n      session.putValue(sessionFilterParam, filterParam);\n    }\n\n    //create appropriate class name with underscores for labels\n    String moduleName = \"\";\n    moduleName = (String) getClass().toString(); //get name\n    moduleName = moduleName.substring(5); //remove 'class' substring at the beginning\n    moduleName = moduleName.trim();\n    moduleName = moduleName.replace('.', '_'); //replace dots with underscores\n\n    //create new language file object\n    CmsXmlLanguageFile lang = new CmsXmlLanguageFile(cms);\n    //set labels in the template\n    template.setData(\"filterlabel\", lang.getLanguageValue(moduleName + \".label.filter\"));\n    template.setData(\"filterparameterlabel\", lang.getLanguageValue(moduleName + \".label.filterparameter\"));\n\n    //no filter selected so far, store a default filter in the session\n    CmsFilterMethod filterMethod = null;\n    if (selectBoxValue == null) {\n      CmsFilterMethod defaultFilter = (CmsFilterMethod) filterMethods.firstElement();\n      session.putValue(\"selectbox\", defaultFilter.getFilterName());\n    }\n\n    // show param box ?\n    CmsFilterMethod currentFilter = (CmsFilterMethod) filterMethods.elementAt(Integer.parseInt(selectBoxValue));\n    if(currentFilter.hasUserParameter()) {\n        if(filterChanged) {\n            template.setData(\"filterparameter\", currentFilter.getDefaultFilterParam());\n            // access default in getContentList() ....\n            session.putValue(sessionFilterParam, currentFilter.getDefaultFilterParam());\n        } else if(filterParam!= null) {\n            template.setData(\"filterparameter\", filterParam);\n        } else {\n            // redisplay after edit or something like this ...\n            template.setData(\"filterparameter\", (String)session.getValue(sessionFilterParam));\n        }\n        template.setData(\"insertFilter\", template.getProcessedDataValue(\"selectboxWithParam\", this, parameters));\n        template.setData(\"setfocus\", template.getDataValue(\"focus\"));\n    }else{\n        template.setData(\"insertFilter\", template.getProcessedDataValue(\"singleSelectbox\", this, parameters));\n    }\n\n    //if getCreateUrl equals null, the \"create new entry\" button\n    //will not be displayed in the template\n    String createButton = null;\n    try {\n      createButton = (String) getCreateUrl(cms, null, null, null);\n    } catch (Exception e) {\n    }\n    if (createButton == null) {\n      String cb = template.getDataValue(\"nowand\");\n      template.setData(\"createbutton\", cb);\n    } else {\n      String cb = template.getProcessedDataValue(\"wand\", this, parameters);\n      template.setData(\"createbutton\", cb);\n    }\n\n    //if getSetupUrl is empty, the module setup button will not be displayed in the template.\n    String setupButton = null;\n    try {\n      setupButton = (String) getSetupUrl(cms, null, null, null);\n    } catch (Exception e) {\n    }\n    if ((setupButton == null) || (setupButton.equals(\"\"))){\n      String sb = template.getDataValue(\"nosetup\");\n      template.setData(\"setupbutton\", sb);\n    } else {\n      String sb= template.getProcessedDataValue(\"setup\", this, parameters);\n      template.setData(\"setupbutton\",sb);\n    }\n\n    //finally start the processing\n    processResult = startProcessing(cms, template, elementName, parameters, templateSelector);\n    return processResult;\n  }","id":5075,"modified_method":"/**\n  * Gets the content of a given template file.\n  * <P>\n  *\n  * @param cms A_CmsObject Object for accessing system resources\n  * @param templateFile Filename of the template file\n  * @param elementName not used here\n  * @param parameters get the parameters action for the button activity\n  * and id for the used content definition instance object\n  * and the author, title, text content for setting the new/changed data\n  * @param templateSelector template section that should be processed.\n  * @return Processed content of the given template file.\n  * @exception CmsException\n  */\n\n  private byte[] getContentHead(CmsObject cms, CmsXmlWpTemplateFile template, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\n    //return var\n    byte[] processResult = null;\n    //get the class of the content definition\n    Class cdClass = getContentDefinitionClass();\n\n    //init vars\n    String singleSelection = \"\";\n    String allSelections = \"\";\n\n    //create new or fetch existing session\n    CmsSession session = (CmsSession) cms.getRequestContext().getSession(true);\n    String uri = cms.getRequestContext().getUri();\n    String sessionSelectBoxValue = uri+\"selectBoxValue\";\n    //get filter method from session\n    String selectBoxValue = (String) parameters.get(\"selectbox\");\n    if(selectBoxValue == null) {\n      // set default value\n      if((String)session.getValue(sessionSelectBoxValue) != null) {\n        // came back from edit or something ... redisplay last filter\n          selectBoxValue = (String)session.getValue(sessionSelectBoxValue);\n      } else {\n        // the very first time here...\n         selectBoxValue = \"0\";\n      }\n    }\n    boolean filterChanged = true;\n    if( selectBoxValue.equals((String)session.getValue(sessionSelectBoxValue)) ) {\n        filterChanged = false;\n    }else {\n        filterChanged = true;\n    }\n\n    //get vector of filter names from the content definition\n    Vector filterMethods = getFilterMethods(cms);\n\n    if( Integer.parseInt(selectBoxValue) >=  filterMethods.size() ) {\n        // the stored seclectBoxValue is does not exist any more, ...\n        selectBoxValue = \"0\";\n    }\n\n    session.putValue(sessionSelectBoxValue, selectBoxValue); // store in session for Selectbox!\n    session.putValue(\"filter\",selectBoxValue);  // store filter in session for getContentList!\n\n    String filterParam = (String) parameters.get(\"filterparameter\");\n    String action = (String) parameters.get(\"action\");\n    String setaction = (String) parameters.get(\"setaction\");\n    // create the key for the filterparameter in the session ... should be unique to avoid problems...\n    String sessionFilterParam = uri+selectBoxValue+\"filterparameter\";\n    //store filterparameter in the session, new enty for every filter of every url ...\n    if (filterParam != null) {\n      session.putValue(sessionFilterParam, filterParam);\n    }\n\n    //create appropriate class name with underscores for labels\n    String moduleName = \"\";\n    moduleName = (String) getClass().toString(); //get name\n    moduleName = moduleName.substring(5); //remove 'class' substring at the beginning\n    moduleName = moduleName.trim();\n    moduleName = moduleName.replace('.', '_'); //replace dots with underscores\n\n    //create new language file object\n    CmsXmlLanguageFile lang = new CmsXmlLanguageFile(cms);\n    //set labels in the template\n    template.setData(\"filterlabel\", lang.getLanguageValue(moduleName + \".label.filter\"));\n    template.setData(\"filterparameterlabel\", lang.getLanguageValue(moduleName + \".label.filterparameter\"));\n\n    //no filter selected so far, store a default filter in the session\n    CmsFilterMethod filterMethod = null;\n    if (selectBoxValue == null) {\n      CmsFilterMethod defaultFilter = (CmsFilterMethod) filterMethods.firstElement();\n      session.putValue(\"selectbox\", defaultFilter.getFilterName());\n    }\n\n    // show param box ?\n    CmsFilterMethod currentFilter = (CmsFilterMethod) filterMethods.elementAt(Integer.parseInt(selectBoxValue));\n    if(currentFilter.hasUserParameter()) {\n        if(filterChanged) {\n            template.setData(\"filterparameter\", currentFilter.getDefaultFilterParam());\n            // access default in getContentList() ....\n            session.putValue(sessionFilterParam, currentFilter.getDefaultFilterParam());\n        } else if(filterParam!= null) {\n            template.setData(\"filterparameter\", filterParam);\n        } else {\n            // redisplay after edit or something like this ...\n            template.setData(\"filterparameter\", (String)session.getValue(sessionFilterParam));\n        }\n        // check if there is only one filtermethod, do not show the selectbox then\n        if (filterMethods.size()<2) {\n          // replace the selectbox with a simple text output\n          CmsFilterMethod defaultFilter = (CmsFilterMethod) filterMethods.firstElement();\n          template.setData(\"filtername\",defaultFilter.getFilterName());\n          template.setData(\"insertFilter\", template.getProcessedDataValue(\"noSelectboxWithParam\", this, parameters));\n        } else {\n          template.setData(\"insertFilter\", template.getProcessedDataValue(\"selectboxWithParam\", this, parameters));\n          }\n        template.setData(\"setfocus\", template.getDataValue(\"focus\"));\n    }else{\n        // check if there is only one filtermethod, do not show the selectbox then\n        if (filterMethods.size()<2) {\n          // replace the selectbox with a simple text output\n          CmsFilterMethod defaultFilter = (CmsFilterMethod) filterMethods.firstElement();\n          template.setData(\"filtername\",defaultFilter.getFilterName());\n          template.setData(\"insertFilter\", template.getProcessedDataValue(\"noSelectbox\", this, parameters));\n        } else {\n          template.setData(\"insertFilter\", template.getProcessedDataValue(\"singleSelectbox\", this, parameters));\n        }\n    }\n\n    //if getCreateUrl equals null, the \"create new entry\" button\n    //will not be displayed in the template\n    String createButton = null;\n    try {\n      createButton = (String) getCreateUrl(cms, null, null, null);\n    } catch (Exception e) {\n    }\n    if (createButton == null) {\n      String cb = template.getDataValue(\"nowand\");\n      template.setData(\"createbutton\", cb);\n    } else {\n      String cb = template.getProcessedDataValue(\"wand\", this, parameters);\n      template.setData(\"createbutton\", cb);\n    }\n\n    //if getSetupUrl is empty, the module setup button will not be displayed in the template.\n    String setupButton = null;\n    try {\n      setupButton = (String) getSetupUrl(cms, null, null, null);\n    } catch (Exception e) {\n    }\n    if ((setupButton == null) || (setupButton.equals(\"\"))){\n      String sb = template.getDataValue(\"nosetup\");\n      template.setData(\"setupbutton\", sb);\n    } else {\n      String sb= template.getProcessedDataValue(\"setup\", this, parameters);\n      template.setData(\"setupbutton\",sb);\n    }\n\n    //finally start the processing\n    processResult = startProcessing(cms, template, elementName, parameters, templateSelector);\n    return processResult;\n  }","commit_id":"92888c66132f3580806ed33361e59c2beac8fab2","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public byte[] getContentNew(CmsObject cms,\n\t\t\t\t\t\t\t\tCmsXmlWpTemplateFile template,\n\t\t\t\t\t\t\t\tString elementName,\n\t\t\t\t\t\t\t\tHashtable parameters,\n\t\t\t\t\t\t\t\tString templateSelector)\n\t\t\t\t\t\t\t\tthrows CmsException {\n\t\t// session will be created or fetched\n\n\t\tI_CmsSession session = (CmsSession) cms.getRequestContext().getSession(true);\n\t\t// get value of hidden input field action\n\t\tString action = (String) parameters.get(\"action\");\n    if ( action == null) action = \"\";\n\t\tGregorianCalendar actDate = new GregorianCalendar();  // the actual Date\n\t\tboolean dateError = false;   // could the date-string be parsed?\n\t\tboolean channelError = false;\n\t\tint channelId = 0;\n    String error = \"\";\n\n\t\t//get value of id and the marker parameters.get(\"id\");\n\t\tString id = (String) parameters.get(\"id\");\n\n\t\tif (id == null) id = \"\";\n\n\t\t//no button pressed: go to the default section!\n\t\tif (action == null || action.equals(\"\")) {\n\t\t\ttemplateSelector = \"default\";\n\t\t\ttemplate.setData(\"setaction\", \"default\");\n\t\t\ttemplate.setData(\"date\", NewsContentDefinition.date2string(actDate)); // set actual Date\n\t\t\ttemplate.setData(\"link\", \"http://\");\n\t\t\t//store marker in the session\n\t\t\t//confirmation button pressed, process data!\n\t\t} else {\n\t\t\t//create new data, therefore create new content definition instance\n\t\t\t//& go to the done section of the template\n\t\t\ttemplateSelector = \"done\";\n\n\t\t\t//read value of the inputfields\n\t\t\tString headline = (String) parameters.get(\"headline\");\n\t\t\tString description = (String) parameters.get(\"description\");\n\t\t\tString text = (String) parameters.get(\"text\");\n\t\t\tString author = (String) parameters.get(\"author\");\n\t\t\tString link = (String) parameters.get(\"link\");\n\t\t\tString linkText = (String) parameters.get(\"linkText\");\n\t\t\tString sDate = (String) parameters.get(\"date\");\n\t\t\tString channelName = (String)parameters.get(\"channel\");\n\t\t\tString a_info1 = (String)parameters.get(\"a_info1\");\n\t\t\tString a_info2 = (String)parameters.get(\"a_info2\");\n\t\t\tString a_info3 = (String)parameters.get(\"a_info3\");\n\t\t\tif(channelName == null || channelName.equals(\" \") || channelName.equals(\"\") ) {\n\t\t\t\tchannelError = true;\n\t\t\t}else {\n\t\t\t\t// create an ChannelObject to access the Id\n\t\t\t\tNewsChannelContentDefinition temp = new NewsChannelContentDefinition(channelName);\n\t\t\t\tchannelId = temp.getIntId();\n\t\t\t}\n\t\t\tGregorianCalendar date = null;\n\t\t\theadline.trim();\n\t\t\ttry{\n\t\t\t\tdate = NewsContentDefinition.string2date(sDate);\n\t\t\t}catch(ParseException e) {\n\t\t\t\tSystem.err.println(\"getContentNew: ParseException\");\n\t\t\t\tSystem.err.println(\"[\" + this.getClass().getName() + \"] \" + e.getMessage());\n\t\t\t\tdateError = true;\n\t\t\t}\n\t\t\t// ensure something was filled in!\n\t\t\tif(headline.equals(\"\") || headline == null || dateError == true || channelError == true) {\n\t\t\t\t\ttemplateSelector = \"default\";\n\t\t\t\t\ttemplate.setData(\"headline\", headline);\n\t\t\t\t\ttemplate.setData(\"descript\", description);\n\t\t\t\t\ttemplate.setData(\"text\", text);\n\t\t\t\t\ttemplate.setData(\"link\", link);\n\t\t\t\t\ttemplate.setData(\"linkText\", linkText);\n\t\t\t\t\ttemplate.setData(\"author\", author);\n\t\t\t\t\ttemplate.setData(\"date\", NewsContentDefinition.date2string(actDate));\n\t\t\t\t\ttemplate.setData(\"a_info1\", a_info1);\n\t\t\t\t\ttemplate.setData(\"a_info2\", a_info2);\n\t\t\t\t\ttemplate.setData(\"a_info3\", a_info3);\n\t\t\t\t\t// re-display data in selectbox\n          session.putValue(\"checkSelectChannel\", \"\"+channelId);\n\t\t\t\t\tif( headline.equals(\"\") || headline == null) {\n            error += template.getProcessedDataValue(\"missing\", this, parameters) + \"<br>\";\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n            template.setData(\"headlineHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"headlineHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t}\n\t\t\t\t\tif(dateError == true) {\n            error += template.getProcessedDataValue(\"dateError\", this, parameters) +\"<br>\";\n            template.setData(\"dateHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"dateHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n\t\t\t\t\t}\n\t\t\t\t\tif(channelError == true) {\n            error += template.getProcessedDataValue(\"channelError\", this, parameters) +\"<br>\";\n            template.setData(\"channelHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"channelHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n\t\t\t\t\t}\n\t\t\t\t\ttemplate.setData(\"setaction\", \"save\");   // still not first time shown\n\t\t\t\t\treturn startProcessing(cms, template, elementName, parameters, templateSelector);\n\t\t\t}\n\n\t\t\t//create new cd object with the fetched values of the inputfields\n\t\t\tNewsContentDefinition newCD = new NewsContentDefinition(headline,description, text, author, link, linkText, date, channelId, a_info1, a_info2, a_info3);\n\t\t\ttry {\n\t\t\t\tnewCD.write(cms);\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.err.println(\"NewsEditBackoffice: couldn�t write!\");\n\t\t\t\tSystem.err.println(\"[\" + this.getClass().getName() + \"] \" + e.getMessage());\n\t\t\t\ttemplate.setData(\"error\", e.toString());\n\t\t\t\ttemplate.setData(\"headline\", \"headline\");\n\t\t\t\ttemplate.setData(\"descript\", description);\n                template.setData(\"text\", text);\n                template.setData(\"link\", link);\n                template.setData(\"linkText\", linkText);\n                template.setData(\"author\", author);\n                template.setData(\"date\", NewsContentDefinition.date2string(actDate));\n\t\t\t\ttemplate.setData(\"a_info1\", a_info1);\n\t\t\t\ttemplate.setData(\"a_info2\", a_info2);\n\t\t\t\ttemplate.setData(\"a_info3\", a_info3);\n\t\t\t\ttemplate.setData(\"setaction\", \"save\");\n\t\t\t\ttemplateSelector = \"default\";\n\t\t\t}\n\t\t}\n\n\t\t//finally start the processing\n\t\treturn startProcessing(cms, template, elementName, parameters, templateSelector);\n\t}","id":5076,"modified_method":"public byte[] getContentNew(CmsObject cms,\n\t\t\t\t\t\t\t\tCmsXmlWpTemplateFile template,\n\t\t\t\t\t\t\t\tString elementName,\n\t\t\t\t\t\t\t\tHashtable parameters,\n\t\t\t\t\t\t\t\tString templateSelector)\n\t\t\t\t\t\t\t\tthrows CmsException {\n\t\t// session will be created or fetched\n\n\t\tI_CmsSession session = (CmsSession) cms.getRequestContext().getSession(true);\n\t\t// get value of hidden input field action\n\t\tString action = (String) parameters.get(\"action\");\n    if ( action == null) action = \"\";\n\t\tGregorianCalendar actDate = new GregorianCalendar();  // the actual Date\n\t\tboolean dateError = false;   // could the date-string be parsed?\n\t\tboolean channelError = false;\n\t\tint channelId = 0;\n        String error = \"\";\n\n\t\t//get value of id and the marker parameters.get(\"id\");\n\t\tString id = (String) parameters.get(\"id\");\n\n\t\tif (id == null) id = \"\";\n\n\t\t//no button pressed: go to the default section!\n\t\tif (action == null || action.equals(\"\")) {\n\t\t\ttemplateSelector = \"default\";\n\t\t\ttemplate.setData(\"setaction\", \"default\");\n            // set actual Date\n\t\t\ttemplate.setData(\"date\", NewsContentDefinition.date2string(actDate));\n\t\t\ttemplate.setData(\"link\", \"http://\");\n            String firstname = cms.getRequestContext().currentUser().getFirstname();\n            String lastname = cms.getRequestContext().currentUser().getLastname();\n            String name = cms.getRequestContext().currentUser().getName();\n            if( (firstname != null && !firstname.equals(\"\"))  &&\n                (lastname != null && !lastname.equals(\"\") ))  {\n                template.setData(\"author\", firstname + \" \" + lastname);\n            } else if(lastname != null && !lastname.equals(\"\") ) {\n                template.setData(\"author\", lastname);\n            } else {\n                template.setData(\"author\", name);\n            }\n\n\t\t\t//store marker in the session\n\t\t\t//confirmation button pressed, process data!\n\t\t} else {\n\t\t\t//create new data, therefore create new content definition instance\n\t\t\t//& go to the done section of the template\n\t\t\ttemplateSelector = \"done\";\n\n\t\t\t//read value of the inputfields\n\t\t\tString headline = (String) parameters.get(\"headline\");\n\t\t\tString description = (String) parameters.get(\"description\");\n\t\t\tString text = (String) parameters.get(\"text\");\n\t\t\tString author = (String) parameters.get(\"author\");\n\t\t\tString link = (String) parameters.get(\"link\");\n\t\t\tString linkText = (String) parameters.get(\"linkText\");\n\t\t\tString sDate = (String) parameters.get(\"date\");\n\t\t\tString channelName = (String)parameters.get(\"channel\");\n\t\t\tString a_info1 = (String)parameters.get(\"a_info1\");\n\t\t\tString a_info2 = (String)parameters.get(\"a_info2\");\n\t\t\tString a_info3 = (String)parameters.get(\"a_info3\");\n\t\t\tif(channelName == null || channelName.equals(\" \") || channelName.equals(\"\") ) {\n\t\t\t\tchannelError = true;\n\t\t\t}else {\n\t\t\t\t// create an ChannelObject to access the Id\n\t\t\t\tNewsChannelContentDefinition temp = new NewsChannelContentDefinition(channelName);\n\t\t\t\tchannelId = temp.getIntId();\n\t\t\t}\n\t\t\tGregorianCalendar date = null;\n\t\t\theadline.trim();\n\t\t\ttry{\n\t\t\t\tdate = NewsContentDefinition.string2date(sDate);\n\t\t\t}catch(ParseException e) {\n\t\t\t\tSystem.err.println(\"getContentNew: ParseException\");\n\t\t\t\tSystem.err.println(\"[\" + this.getClass().getName() + \"] \" + e.getMessage());\n\t\t\t\tdateError = true;\n\t\t\t}\n\t\t\t// ensure something was filled in!\n\t\t\tif(headline.equals(\"\") || headline == null || dateError == true || channelError == true) {\n\t\t\t\t\ttemplateSelector = \"default\";\n\t\t\t\t\ttemplate.setData(\"headline\", headline);\n\t\t\t\t\ttemplate.setData(\"descript\", description);\n\t\t\t\t\ttemplate.setData(\"text\", text);\n\t\t\t\t\ttemplate.setData(\"link\", link);\n\t\t\t\t\ttemplate.setData(\"linkText\", linkText);\n\t\t\t\t\ttemplate.setData(\"author\", author);\n\t\t\t\t\ttemplate.setData(\"date\", NewsContentDefinition.date2string(actDate));\n\t\t\t\t\ttemplate.setData(\"a_info1\", a_info1);\n\t\t\t\t\ttemplate.setData(\"a_info2\", a_info2);\n\t\t\t\t\ttemplate.setData(\"a_info3\", a_info3);\n\t\t\t\t\t// re-display data in selectbox\n          session.putValue(\"checkSelectChannel\", \"\"+channelId);\n\t\t\t\t\tif( headline.equals(\"\") || headline == null) {\n            error += template.getProcessedDataValue(\"missing\", this, parameters) + \"<br>\";\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n            template.setData(\"headlineHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"headlineHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t}\n\t\t\t\t\tif(dateError == true) {\n            error += template.getProcessedDataValue(\"dateError\", this, parameters) +\"<br>\";\n            template.setData(\"dateHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"dateHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n\t\t\t\t\t}\n\t\t\t\t\tif(channelError == true) {\n            error += template.getProcessedDataValue(\"channelError\", this, parameters) +\"<br>\";\n            template.setData(\"channelHighlightStart\", template.getData(\"redStart\"));\n            template.setData(\"channelHighlightEnd\", template.getData(\"redEnd\"));\n\t\t\t\t\t\ttemplate.setData(\"error\", error);\n\t\t\t\t\t}\n\t\t\t\t\ttemplate.setData(\"setaction\", \"save\");   // still not first time shown\n\t\t\t\t\treturn startProcessing(cms, template, elementName, parameters, templateSelector);\n\t\t\t}\n\n\t\t\t//create new cd object with the fetched values of the inputfields\n\t\t\tNewsContentDefinition newCD = new NewsContentDefinition(headline,description, text, author, link, linkText, date, channelId, a_info1, a_info2, a_info3);\n\t\t\ttry {\n\t\t\t\tnewCD.write(cms);\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.err.println(\"NewsEditBackoffice: couldn�t write!\");\n\t\t\t\tSystem.err.println(\"[\" + this.getClass().getName() + \"] \" + e.getMessage());\n\t\t\t\ttemplate.setData(\"error\", e.toString());\n\t\t\t\ttemplate.setData(\"headline\", \"headline\");\n\t\t\t\ttemplate.setData(\"descript\", description);\n                template.setData(\"text\", text);\n                template.setData(\"link\", link);\n                template.setData(\"linkText\", linkText);\n                template.setData(\"author\", author);\n                template.setData(\"date\", NewsContentDefinition.date2string(actDate));\n\t\t\t\ttemplate.setData(\"a_info1\", a_info1);\n\t\t\t\ttemplate.setData(\"a_info2\", a_info2);\n\t\t\t\ttemplate.setData(\"a_info3\", a_info3);\n\t\t\t\ttemplate.setData(\"setaction\", \"save\");\n\t\t\t\ttemplateSelector = \"default\";\n\t\t\t}\n\t\t}\n\n\t\t//finally start the processing\n\t\treturn startProcessing(cms, template, elementName, parameters, templateSelector);\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * declare the Names of the fields\n\t * @return a Vector\n\t */\n\tpublic static Vector getFieldNames(CmsObject cms) {\n\t\tVector names = new Vector();\n\t\tnames.addElement(\"Headline\");\n\t\tnames.addElement(\"Description\");\n\t\tnames.addElement(\"Author\");\n\t\tnames.addElement(\"Link\");\n\t\tnames.addElement(\"Date\");\n\t\tnames.addElement(\"Channel\");\n\t\treturn names;\n\t}","id":5077,"modified_method":"/**\n\t * declare the Names of the fields\n\t * @return a Vector\n\t */\n\tpublic static Vector getFieldNames(CmsObject cms) {\n\t\tVector names = new Vector();\n\t\tnames.addElement(\"Headline\");\n\t\t//names.addElement(\"Description\");\n\t\tnames.addElement(\"Author\");\n\t\t//names.addElement(\"Link\");\n\t\tnames.addElement(\"Date\");\n\t\tnames.addElement(\"Channel\");\n\t\treturn names;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getSortedList2() {\n\n        String str = \"\";\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tif(str == null || str == \" \") { str = \"\"; }\n\t\tstr.trim();\n\t\tstr.toLowerCase();\n\t\t//System.err.println(\"[NewsContentDefinition.getSortedList()] Start - str: \" +str);\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_ORDER);\n\t\t\tif( str.equals(\"\") ) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if( str.equals(\"id\") ) {\n\t\t\t\tstatement.setString(1, \"id\");\n\t\t\t}\n\t\t\telse if(str.equals(\"headline\") || str.equals(\"schlagzeile\") ) {\n\t\t\t\tstatement.setString(1, \"headline\");\n\t\t\t}\n\t\t\telse if(str.equals(\"description\") || str.equals(\"beschreibung\")) {\n\t\t\t\tstatement.setString(1, \"description\");\n\t\t\t}\n\t\t\telse if(str.equals(\"text\") || str.equals(\"inhalt\")) {\n\t\t\t\tstatement.setString(1, \"text\");\n\t\t\t}\n\t\t\telse if(str.equals(\"author\")) {\n\t\t\t\tstatement.setString(1, \"author\");\n\t\t\t}\n\t\t\telse if(str.equals(\"link\")) {\n\t\t\t\tstatement.setString(1, \"link\");\n\t\t\t}\n\t\t\telse if(str.equals(\"date\") || str.equals(\"Datum\")) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if(str.equals(\"channel\") || str.equals(\"kanal\")) {\n\t\t\t\tstatement.setString(1, \"channel\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatement.setString(1, \"date\");\t// all other inputs!\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getDate(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9), // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"[NewsContentDefinition.getSortedList() Exception1:]\" + e.getMessage());\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":5078,"modified_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getSortedList2() {\n\n        String str = \"\";\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tif(str == null || str == \" \") { str = \"\"; }\n\t\tstr.trim();\n\t\tstr.toLowerCase();\n\t\t//System.err.println(\"[NewsContentDefinition.getSortedList()] Start - str: \" +str);\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_ORDER);\n\t\t\tif( str.equals(\"\") ) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if( str.equals(\"id\") ) {\n\t\t\t\tstatement.setString(1, \"id\");\n\t\t\t}\n\t\t\telse if(str.equals(\"headline\") || str.equals(\"schlagzeile\") ) {\n\t\t\t\tstatement.setString(1, \"headline\");\n\t\t\t}\n\t\t\telse if(str.equals(\"description\") || str.equals(\"beschreibung\")) {\n\t\t\t\tstatement.setString(1, \"description\");\n\t\t\t}\n\t\t\telse if(str.equals(\"text\") || str.equals(\"inhalt\")) {\n\t\t\t\tstatement.setString(1, \"text\");\n\t\t\t}\n\t\t\telse if(str.equals(\"author\")) {\n\t\t\t\tstatement.setString(1, \"author\");\n\t\t\t}\n\t\t\telse if(str.equals(\"link\")) {\n\t\t\t\tstatement.setString(1, \"link\");\n\t\t\t}\n\t\t\telse if(str.equals(\"date\") || str.equals(\"Datum\")) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if(str.equals(\"channel\") || str.equals(\"kanal\")) {\n\t\t\t\tstatement.setString(1, \"channel\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatement.setString(1, \"date\");\t// all other inputs!\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getTimestamp(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9), // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"[NewsContentDefinition.getSortedList() Exception1:]\" + e.getMessage());\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * method to updata an existing entry.\n\t * This method is only called by the write()-method.\n\t * @param CmsObject\n\t * @param the new date (java.sql.Date)\n\t */\n\tprivate void update(CmsObject cms, java.sql.Date sqlDate) throws CmsException {\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\ttry {\n\t\t\t// write the data to database\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_UPDATE_ENTRY);\n\t\t\tstatement.setString(1, m_headline);\n\t\t\tstatement.setString(2, m_description);\n\t\t\tstatement.setString(3, m_text);\n\t\t\tstatement.setString(4, m_author);\n\t\t\tstatement.setString(5, m_link);\n\t\t\tstatement.setString(6, m_linkText);\n\t\t\tstatement.setDate(7, sqlDate);\n\t\t\tstatement.setInt(8, m_lockstate);\n\t\t\tstatement.setInt(9, m_channel);\n\t\t\tstatement.setString(10, m_a_info1);\n\t\t\tstatement.setString(11, m_a_info2);\n\t\t\tstatement.setString(12, m_a_info3);\n\t\t\tstatement.setInt(13, m_id);\n\t\t\tstatement.execute();\n\t\t}catch(Exception e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","id":5079,"modified_method":"/**\n\t * method to updata an existing entry.\n\t * This method is only called by the write()-method.\n\t * @param CmsObject\n\t * @param the new date (java.sql.Date)\n\t */\n\tprivate void update(CmsObject cms, java.sql.Timestamp sqlDate) throws CmsException {\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\ttry {\n\t\t\t// write the data to database\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_UPDATE_ENTRY);\n\t\t\tstatement.setString(1, m_headline);\n\t\t\tstatement.setString(2, m_description);\n\t\t\tstatement.setString(3, m_text);\n\t\t\tstatement.setString(4, m_author);\n\t\t\tstatement.setString(5, m_link);\n\t\t\tstatement.setString(6, m_linkText);\n\t\t\t//statement.setDate(7, sqlDate);\n\t\t\tstatement.setTimestamp(7, sqlDate);\n            statement.setInt(8, m_lockstate);\n\t\t\tstatement.setInt(9, m_channel);\n\t\t\tstatement.setString(10, m_a_info1);\n\t\t\tstatement.setString(11, m_a_info2);\n\t\t\tstatement.setString(12, m_a_info3);\n\t\t\tstatement.setInt(13, m_id);\n\t\t\tstatement.execute();\n\t\t}catch(Exception e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * one filter method\n\t * @return a Vector with all selected Elementes\n\t */\n\tpublic static Vector getDynamicList(Integer channelId, Integer flag, String str) throws CmsException {\n\t\tVector list = new Vector();\n\t\tjava.sql.Date day = null;\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tint month = 1;\n\t\t//System.err.println(\"[NewsContentDefinition.getDynamicList()] Start - channelId:\" +\"\"+channelId.intValue() + \"flag: \" + \"\"+flag.intValue() +\"str: \" + str);\n\t\tif(flag.equals(C_FLAG_MONTH)) {\n\t\t\ttry{\n\t\t\t\tmonth = Integer.parseInt(str);\n\t\t\t}catch(NumberFormatException e) {\n\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the month: \"+e.getMessage());\n\t\t\t}\n\t\t\tif(month <1 || month >12) month = 1;\n\t\t    }else {\n\t\t\t    // \"day\"\n\t\t\tif( (str == null) || (str.equals(\"\")) || (str.equals(\" \"))) {\n\t\t\t\ttry{\n\t\t\t\t\tday = string2sqlDate(\"01.01.2000\"); // this default value seems to be needed by A_Backoffice\n\t\t\t\t}catch(ParseException e) {\n\t\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the date: \"+e.getMessage());\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\ttry{;\n\t\t\t\t\tday = string2sqlDate(str);  // now a real date is parsed\n\t\t\t\t}catch(ParseException e) {\n\t\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the date: \"+e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry{\n            con = DriverManager.getConnection(c_pool);\n\t\t\tif(flag.equals(C_FLAG_MONTH)){\n\t\t\t\tstatement = con.prepareStatement(C_SELECT_MONTH);\n\t\t\t\tstatement.setInt(1, month);\n\t\t\t\tstatement.setInt(2, channelId.intValue());\n\t\t\t}else{\n\t\t\t\t// \"day\"\n\t\t\t\tstatement = con.prepareStatement(C_SELECT_DAY);\n\t\t\t\tstatement.setDate(1, day);\n\t\t\t\tstatement.setInt(2, channelId.intValue());\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getDate(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),    // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n      throw new CmsException(e.getMessage());\n\t\t\t//System.err.println(\"[NewsContentDefinition.getDynamicList() Exception while trying to execute the statement:]\" + e.getMessage());\n\t\t}finally{\n            try{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t\ttry{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":5080,"modified_method":"/**\n\t * one filter method\n\t * @return a Vector with all selected Elementes\n\t */\n\tpublic static Vector getDynamicList(Integer channelId, Integer flag, String str) throws CmsException {\n\t\tVector list = new Vector();\n\t\tjava.sql.Timestamp day = null;\n        GregorianCalendar dayEnd = new GregorianCalendar();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tint month = 1;\n\t\t//System.err.println(\"[NewsContentDefinition.getDynamicList()] Start - channelId:\" +\"\"+channelId.intValue() + \"flag: \" + \"\"+flag.intValue() +\"str: \" + str);\n\t\tif(flag.equals(C_FLAG_MONTH)) {\n\t\t\ttry{\n\t\t\t\tmonth = Integer.parseInt(str);\n\t\t\t}catch(NumberFormatException e) {\n\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the month: \"+e.getMessage());\n\t\t\t}\n\t\t\tif(month <1 || month >12) month = 1;\n\t\t    }else {\n\t\t\t    // \"day\"\n\t\t\tif( (str == null) || (str.equals(\"\")) || (str.equals(\" \"))) {\n\t\t\t\ttry{\n\t\t\t\t\t//day = shortString2sqlTimestamp(\"01.01.2000\"); // this default value seems to be needed by A_Backoffice\n\t\t\t\t    day = date2Timestamp(dayEnd);\n                    dayEnd.set(Calendar.HOUR, 23);\n                    dayEnd.set(Calendar.MINUTE, 59);\n                    dayEnd.set(Calendar.SECOND, 59);\n                }catch(Exception e) {\n\t\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the date: \"+e.getMessage());\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\ttry{;\n\t\t\t\t\tday = shortString2sqlTimestamp(str);  // now a real date is parsed\n                    dayEnd = shortString2date(str);\n                    dayEnd.set(Calendar.HOUR, 23);\n                    dayEnd.set(Calendar.MINUTE, 59);\n                    dayEnd.set(Calendar.SECOND, 59);\n\t\t\t\t}catch(ParseException e) {\n\t\t\t\t\tSystem.err.println(\"[NewsContentDefinition.getDynamicList()] Exception while trying to parse the date: \"+e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry{\n            con = DriverManager.getConnection(c_pool);\n\t\t\tif(flag.equals(C_FLAG_MONTH)){\n\t\t\t\tstatement = con.prepareStatement(C_SELECT_MONTH);\n\t\t\t\tstatement.setInt(1, month);\n\t\t\t\tstatement.setInt(2, channelId.intValue());\n\t\t\t}else{\n\t\t\t\t// \"day\"\n\t\t\t\tstatement = con.prepareStatement(C_SELECT_DAY);\n\t\t\t\tstatement.setTimestamp(1, day);\n                statement.setTimestamp(2, date2Timestamp(dayEnd) );\n\t\t\t\tstatement.setInt(3, channelId.intValue());\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getTimestamp(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),    // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n      throw new CmsException(e.getMessage());\n\t\t\t//System.err.println(\"[NewsContentDefinition.getDynamicList() Exception while trying to execute the statement:]\" + e.getMessage());\n\t\t}finally{\n            try{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t\ttry{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getNewsList(Integer channel, String stringN) {\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tint i =  0;\n\t\tint n = -1;\n\t\t//System.err.println(\"[NewsContentDefinition.getNewsList] Start - channel: \"+ \"\"+channel.intValue() + \"stringN: \" + stringN);\n\t\ttry{\n\t\t\tn = Integer.parseInt(stringN);\n\t\t}catch(NumberFormatException e) {\n\t\t\t//System.err.println(\"Exception in NewsContentDefinition.getNewsList()!\"+e.getMessage());\n\t\t\tn = -1;\n\t\t}\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_SELECT_FIRST_N_OF_CHANNEL);\n\t\t\tstatement.setInt(1, channel.intValue());\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next() && (i != n)){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2),  // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3),  // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4),  // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5),  // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6),  // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7),  // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getDate(8),    // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),  // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),    // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11), // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12), // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13)  // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t\ti++;\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getNewsList()!\");\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":5081,"modified_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getNewsList(Integer channel, String stringN) {\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tint i =  0;\n\t\tint n = -1;\n\t\t//System.err.println(\"[NewsContentDefinition.getNewsList] Start - channel: \"+ \"\"+channel.intValue() + \"stringN: \" + stringN);\n\t\ttry{\n\t\t\tn = Integer.parseInt(stringN);\n\t\t}catch(NumberFormatException e) {\n\t\t\t//System.err.println(\"Exception in NewsContentDefinition.getNewsList()!\"+e.getMessage());\n\t\t\tn = -1;\n\t\t}\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_SELECT_FIRST_N_OF_CHANNEL);\n\t\t\tstatement.setInt(1, channel.intValue());\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next() && (i != n)){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2),  // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3),  // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4),  // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5),  // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6),  // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7),  // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getTimestamp(8),    // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),  // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),    // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11), // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12), // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13)  // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t\ti++;\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getNewsList()!\");\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * method to convert a GregrianCalendar date to a String\n\t * @parame the GregrianCalendar date\n\t * @return the date as a String\n\t */\n\tpublic static String date2string(GregorianCalendar cal) {\n\t\tDateFormat df;\n\t\tdf = DateFormat.getDateInstance(DateFormat.MEDIUM);\n\t\treturn df.format(cal.getTime());\n\t}","id":5082,"modified_method":"/**\n\t * method to convert a GregrianCalendar date to a String\n\t * @parame the GregrianCalendar date\n\t * @return the date as a String\n\t */\n\tpublic static String date2string(GregorianCalendar cal) {\n\t\tDateFormat df;\n\t\tdf = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,\n                                            DateFormat.MEDIUM, m_locale);\n\t\treturn df.format(cal.getTime());\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * method to convert a string date to a GregorianCalendar date.\n\t * The method throws a ParseException if the string cannot be converted.\n\t * @param the date as a String\n\t * @return the date as a GregorianCalendar\n\t */\n\tpublic static GregorianCalendar string2date(String sDate) throws ParseException {\n\t\tDateFormat df;\n\t\tGregorianCalendar ret = new GregorianCalendar();\n\t\tdf = DateFormat.getDateInstance(DateFormat.MEDIUM);\n\t\tjava.util.Date date = df.parse(sDate);\n\t\t//System.err.println(\"string2date \" + date.toString());\n\t\tret.setTime(date);\n\t\t//System.err.println(\"string2date \" + ret.get(Calendar.DATE)+\".\" + ret.get(Calendar.MONTH)+\".\" + ret.get(Calendar.YEAR) );\n\t\treturn ret;\n\t}","id":5083,"modified_method":"/**\n\t * method to convert a string date to a GregorianCalendar date.\n\t * The method throws a ParseException if the string cannot be converted.\n\t * @param the date as a String\n\t * @return the date as a GregorianCalendar\n\t */\n\tpublic static GregorianCalendar string2date(String sDate) throws ParseException {\n\t\tDateFormat df;\n\t\tGregorianCalendar ret = new GregorianCalendar();\n\t\tdf = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,\n                                            DateFormat.MEDIUM, m_locale);\n\t\tjava.util.Date date = df.parse(sDate);\n\t\t//System.err.println(\"string2date \" + date.toString());\n\t\tret.setTime(date);\n\t\t//System.err.println(\"string2date \" + ret.get(Calendar.DATE)+\".\" + ret.get(Calendar.MONTH)+\".\" + ret.get(Calendar.YEAR) );\n\t\treturn ret;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * declare the methods to filter the list entries\n\t * @return A Vector\n\t */\n\tpublic static Vector getFilterMethods(CmsObject cms) {\n\t\tVector filterMethods = new Vector();\n    String showText = \"\";\n\t\tInteger actChannelId = null;  // has to be Integer because of Reflection!\n    Vector channels = null;\n    try {\n\t  \tchannels = NewsChannelContentDefinition.getChannelList(); // get all actual channels\n    }\n    catch(CmsException e) {\n      return null;\n    }\n\t  // add the always shown first filterMethod...\n\t\ttry {\n\t\t\tfilterMethods.addElement(new CmsFilterMethod(\"Sort all by ...\", NewsContentDefinition.class.getMethod(\"getSortedList\", new Class[] {String.class}), new Object[] {}));\n\t\t}catch(NoSuchMethodException e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFilterMethods(CmsObject)!\"+ e.getMessage());\n\t\t}\n\t\t// try to add some filters dynamically\n\t\tfor(int i=0; i< channels.size(); i++) {\n\t\t\tshowText = ((NewsChannelContentDefinition)channels.elementAt(i)).getName();\n\t\t\tactChannelId = new Integer(((NewsChannelContentDefinition)channels.elementAt(i)).getIntId());\n\t\t\ttry {\n\t\t\t\tfilterMethods.addElement(new CmsFilterMethod(showText +\": list first ...\", NewsContentDefinition.class.getMethod(\"getNewsList\", new Class[] {Integer.class, String.class}), new Object[] {actChannelId}, \"2\"));\n\t\t\t\tfilterMethods.addElement(new CmsFilterMethod(showText +\": get day ...\", NewsContentDefinition.class.getMethod(\"getDynamicList\", new Class[] {Integer.class, Integer.class, String.class}), new Object[] {actChannelId, C_FLAG_DAY}));\n\t\t\t\tfilterMethods.addElement(new CmsFilterMethod(showText +\": get month ...\" ,  NewsContentDefinition.class.getMethod(\"getDynamicList\", new Class[] {Integer.class, Integer.class, String.class}), new Object[] {actChannelId, C_FLAG_MONTH}));\n\t\t\t}catch(NoSuchMethodException e) {\n\t\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFilterMethods(CmsObject)!\"+ e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\treturn filterMethods;\n\t}","id":5084,"modified_method":"/**\n\t * declare the methods to filter the list entries\n\t * @return A Vector\n\t */\n\tpublic static Vector getFilterMethods(CmsObject cms) {\n\t\tVector filterMethods = new Vector();\n        String showText = \"\";\n\t\tInteger actChannelId = null;  // has to be Integer because of Reflection!\n        Vector channels = null;\n        GregorianCalendar actDate = new GregorianCalendar();\n        int actMonth = actDate.get(Calendar.MONTH) + 1;\n    try {\n\t  \tchannels = NewsChannelContentDefinition.getChannelList(); // get all actual channels\n    }\n    catch(CmsException e) {\n      return null;\n    }\n\t  // add the always shown first filterMethod...\n\t\ttry {\n\t\t\tfilterMethods.addElement(new CmsFilterMethod(\"Sort all by ...\", NewsContentDefinition.class.getMethod(\"getSortedList\", new Class[] {String.class}), new Object[] {}));\n\t\t}catch(NoSuchMethodException e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFilterMethods(CmsObject)!\"+ e.getMessage());\n\t\t}\n\t\t// try to add some filters dynamically\n\t\tfor(int i=0; i< channels.size(); i++) {\n\t\t\tshowText = ((NewsChannelContentDefinition)channels.elementAt(i)).getName();\n\t\t\tactChannelId = new Integer(((NewsChannelContentDefinition)channels.elementAt(i)).getIntId());\n\t\t\ttry {\n\t\t\t\tfilterMethods.addElement(new CmsFilterMethod(showText +\": list first ...\", NewsContentDefinition.class.getMethod(\"getNewsList\", new Class[] {Integer.class, String.class}), new Object[] {actChannelId}, \"15\"));\n\t\t\t\t//filterMethods.addElement(new CmsFilterMethod(showText +\": get day ...\", NewsContentDefinition.class.getMethod(\"getDynamicList\", new Class[] {Integer.class, Integer.class, String.class}), new Object[] {actChannelId, C_FLAG_DAY}, date2shortString(actDate) ));\n\t\t\t\tfilterMethods.addElement(new CmsFilterMethod(showText +\": get month ...\" ,  NewsContentDefinition.class.getMethod(\"getDynamicList\", new Class[] {Integer.class, Integer.class, String.class}), new Object[] {actChannelId, C_FLAG_MONTH}, \"\"+actMonth));\n\t\t\t}catch(NoSuchMethodException e) {\n\t\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFilterMethods(CmsObject)!\"+ e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\treturn filterMethods;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getSortedList(String str) {\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tif(str == null || str == \" \") { str = \"\"; }\n\t\tstr.trim();\n\t\tstr.toLowerCase();\n\t\t//System.err.println(\"[NewsContentDefinition.getSortedList()] Start - str: \" +str);\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_ORDER);\n\t\t\tif( str.equals(\"\") ) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if( str.equals(\"id\") ) {\n\t\t\t\tstatement.setString(1, \"id\");\n\t\t\t}\n\t\t\telse if(str.equals(\"headline\") || str.equals(\"schlagzeile\") ) {\n\t\t\t\tstatement.setString(1, \"headline\");\n\t\t\t}\n\t\t\telse if(str.equals(\"description\") || str.equals(\"beschreibung\")) {\n\t\t\t\tstatement.setString(1, \"description\");\n\t\t\t}\n\t\t\telse if(str.equals(\"text\") || str.equals(\"inhalt\")) {\n\t\t\t\tstatement.setString(1, \"text\");\n\t\t\t}\n\t\t\telse if(str.equals(\"author\")) {\n\t\t\t\tstatement.setString(1, \"author\");\n\t\t\t}\n\t\t\telse if(str.equals(\"link\")) {\n\t\t\t\tstatement.setString(1, \"link\");\n\t\t\t}\n\t\t\telse if(str.equals(\"date\") || str.equals(\"Datum\")) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if(str.equals(\"channel\") || str.equals(\"kanal\")) {\n\t\t\t\tstatement.setString(1, \"channel\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatement.setString(1, \"date\");\t// all other inputs!\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getDate(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),    // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"[NewsContentDefinition.getSortedList() Exception1:]\" + e.getMessage());\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":5085,"modified_method":"/**\n\t * one filter method\n\t * this method creates a list of all enties\n\t *\n\t * @return a Vector with all Elementes\n\t */\n\tpublic static Vector getSortedList(String str) {\n\t\tVector list = new Vector();\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tif(str == null || str == \" \") { str = \"\"; }\n\t\tstr.trim();\n\t\tstr.toLowerCase();\n\t\t//System.err.println(\"[NewsContentDefinition.getSortedList()] Start - str: \" +str);\n\t\ttry {\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_ORDER);\n\t\t\tif( str.equals(\"\") ) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if( str.equals(\"id\") ) {\n\t\t\t\tstatement.setString(1, \"id\");\n\t\t\t}\n\t\t\telse if(str.equals(\"headline\") || str.equals(\"schlagzeile\") ) {\n\t\t\t\tstatement.setString(1, \"headline\");\n\t\t\t}\n\t\t\telse if(str.equals(\"description\") || str.equals(\"beschreibung\")) {\n\t\t\t\tstatement.setString(1, \"description\");\n\t\t\t}\n\t\t\telse if(str.equals(\"text\") || str.equals(\"inhalt\")) {\n\t\t\t\tstatement.setString(1, \"text\");\n\t\t\t}\n\t\t\telse if(str.equals(\"author\")) {\n\t\t\t\tstatement.setString(1, \"author\");\n\t\t\t}\n\t\t\telse if(str.equals(\"link\")) {\n\t\t\t\tstatement.setString(1, \"link\");\n\t\t\t}\n\t\t\telse if(str.equals(\"date\") || str.equals(\"Datum\")) {\n\t\t\t\tstatement.setString(1, \"date\");\n\t\t\t}\n\t\t\telse if(str.equals(\"channel\") || str.equals(\"kanal\")) {\n\t\t\t\tstatement.setString(1, \"channel\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatement.setString(1, \"date\");\t// all other inputs!\n\t\t\t}\n\t\t\tres = statement.executeQuery();\n\t\t\twhile(res.next()){\n\t\t\t\t// read the item from the resultset\n\t\t\t\t// insert Element into list\n\t\t\t\tlist.addElement(new NewsContentDefinition(res.getInt(1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(2), // Headline\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(3), // Descr.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(4), // Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(5), // Author\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(6), // link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(7), // linkText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getTimestamp(8),   // Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(9),    // Lockstate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getInt(10),   // Channel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(11),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(12),// a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  res.getString(13) // a_info\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\tSystem.err.println(\"[NewsContentDefinition.getSortedList() Exception1:]\" + e.getMessage());\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * method to convert a string date to a sqlDate date.\n\t * The method throws a ParseException if the string cannot be converted.\n\t * @param the date as a String\n\t * @return the date as a sqlDate\n\t */\n\tpublic static java.sql.Date string2sqlDate(String sDate) throws ParseException {\n\t\tDateFormat df;\n\t\tdf = DateFormat.getDateInstance(DateFormat.MEDIUM);\n\t\tjava.util.Date uDate = df.parse(sDate);\n\t\t//System.err.println(\"string2sqlDate \" + uDate.toString());\n\t\tjava.sql.Date sqlDate = new java.sql.Date(uDate.getTime());  // Date to SQLDate\n\t\treturn sqlDate;\n\t}","id":5086,"modified_method":"/**\n\t * method to convert a string date to a sqlDate date.\n\t * The method throws a ParseException if the string cannot be converted.\n\t * @param the date as a String\n\t * @return the date as a sqlDate\n\t */\n\tpublic static java.sql.Timestamp string2sqlTimestamp(String sDate) throws ParseException {\n\t\tDateFormat df;\n\t\t//df = DateFormat.getDateInstance(DateFormat.MEDIUM);\n        df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, m_locale);\n\t\tjava.util.Date uDate = df.parse(sDate);\n\t\t//System.err.println(\"string2sqlDate \" + uDate.toString());\n\t\tjava.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(uDate.getTime());  // Date to SQLDate\n\t\treturn sqlTimestamp;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Constructor to create an Element with a certain ID\n\t * needed to create a list of Elementes\n\t *\n\t * @param id    The unique id\n\t * @param name  The name\n\t * @param descr The descr\n\t */\n\tprivate NewsContentDefinition(int id,\n\t\t\t\t\t\t\t\t  String headline,\n\t\t\t\t\t\t\t\t  String descr,\n\t\t\t\t\t\t\t\t  String text,\n\t\t\t\t\t\t\t\t  String author,\n\t\t\t\t\t\t\t\t  String link,\n\t\t\t\t\t\t\t\t  String linkText,\n\t\t\t\t\t\t\t\t  java.sql.Date date,\n\t\t\t\t\t\t\t\t  int lockstate,\n\t\t\t\t\t\t\t\t  int channel,\n\t\t\t\t\t\t\t\t  String a_info1,\n\t\t\t\t\t\t\t\t  String a_info2,\n\t\t\t\t\t\t\t\t  String a_info3) {\n\t\tm_id = id;\n\t\tm_headline = headline;\n\t\tm_description = descr;\n\t\tm_text = text;\n\t\tm_author = author;\n\t\tm_link = link;\n\t\tm_linkText = linkText;\n\t\tm_date = new GregorianCalendar();\n\t\tm_date.setTime( (java.util.Date)date ); // SQLDate to Date to GregorianCalendar\n\t\tm_channel = channel;\n\t\tm_a_info1 = a_info1;\n\t\tm_a_info2 = a_info2;\n\t\tm_a_info3 = a_info3;\n\t\tm_lockstate = lockstate;\n\t}","id":5087,"modified_method":"/**\n\t * Constructor to create an Element with a certain ID\n\t * needed to create a list of Elementes\n\t *\n\t * @param id    The unique id\n\t * @param name  The name\n\t * @param descr The descr\n\t */\n\tprivate NewsContentDefinition(int id,\n\t\t\t\t\t\t\t\t  String headline,\n\t\t\t\t\t\t\t\t  String descr,\n\t\t\t\t\t\t\t\t  String text,\n\t\t\t\t\t\t\t\t  String author,\n\t\t\t\t\t\t\t\t  String link,\n\t\t\t\t\t\t\t\t  String linkText,\n\t\t\t\t\t\t\t\t  java.sql.Timestamp date,\n\t\t\t\t\t\t\t\t  int lockstate,\n\t\t\t\t\t\t\t\t  int channel,\n\t\t\t\t\t\t\t\t  String a_info1,\n\t\t\t\t\t\t\t\t  String a_info2,\n\t\t\t\t\t\t\t\t  String a_info3) {\n\t\tm_id = id;\n\t\tm_headline = headline;\n\t\tm_description = descr;\n\t\tm_text = text;\n\t\tm_author = author;\n\t\tm_link = link;\n\t\tm_linkText = linkText;\n\t\tm_date = new GregorianCalendar();\n        java.util.Date tmpDate = new java.util.Date(date.getTime());\n\t\t//m_date.setTime( (java.util.Date)date ); // SQLDate to Date to GregorianCalendar\n        m_date.setTime(tmpDate);\n\t\tm_channel = channel;\n\t\tm_a_info1 = a_info1;\n\t\tm_a_info2 = a_info2;\n\t\tm_a_info3 = a_info3;\n\t\tm_lockstate = lockstate;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * declare the entries that should be displayed in the Backoffice list\n\t * @return a Vector\n\t */\n\tpublic static Vector getFieldMethods(CmsObject cms) {\n\t\tVector methods = new Vector();\n\t\ttry {\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getHeadline\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getDescription\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getAuthor\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getLink\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getDate\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getChannel\", new Class[0]));\n\t\t}catch(NoSuchMethodException e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFieldMethods(CmsObject)!\"+ e.getMessage());\n\t\t}\n\t\treturn methods;\n\t}","id":5088,"modified_method":"/**\n\t * declare the entries that should be displayed in the Backoffice list\n\t * @return a Vector\n\t */\n\tpublic static Vector getFieldMethods(CmsObject cms) {\n\t\tVector methods = new Vector();\n\t\ttry {\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getHeadline\", new Class[0]));\n\t\t\t//methods.addElement(NewsContentDefinition.class.getMethod(\"getDescription\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getAuthor\", new Class[0]));\n\t\t\t//methods.addElement(NewsContentDefinition.class.getMethod(\"getLink\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getDate\", new Class[0]));\n\t\t\tmethods.addElement(NewsContentDefinition.class.getMethod(\"getChannel\", new Class[0]));\n\t\t}catch(NoSuchMethodException e) {\n\t\t\tSystem.err.println(\"Exception in NewsContentDefinition.getFieldMethods(CmsObject)!\"+ e.getMessage());\n\t\t}\n\t\treturn methods;\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * write an Element to the database\n\t * @param cms An instance of CmsObject\n\t */\n\tpublic void write(CmsObject cms) throws Exception{\n    Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tjava.util.Date uDate = m_date.getTime();  \t// GregorianCalendar to Date\n\t\tjava.sql.Date sqlDate = new java.sql.Date(uDate.getTime());  // Date to SQLDate\n\t\tif(newElement == true) {\n\t\t\t// Element not jet in Database -> insert Statement\n\t\t\ttry {\n\t\t\t\t// write the data to database\n                con = DriverManager.getConnection(c_pool);\n\t\t \t\tstatement = con.prepareStatement(C_INSERT_ENTRY);\n\t\t\t\tstatement.setInt(1, m_id);\n\t\t\t\tstatement.setString(2, m_headline);\n\t\t\t\tstatement.setString(3, m_description);\n\t\t\t\tstatement.setString(4, m_text);\n\t\t\t\tstatement.setString(5, m_author);\n\t\t\t\tstatement.setString(6, m_link);\n\t\t\t\tstatement.setString(7, m_linkText);\n\t\t\t\tstatement.setDate(8, sqlDate);\n\t\t\t\tstatement.setInt(9, m_lockstate);\n\t\t\t\tstatement.setInt(10, m_channel);\n\t\t\t\tstatement.setString(11, m_a_info1);\n\t\t\t\tstatement.setString(12, m_a_info2);\n\t\t\t\tstatement.setString(13, m_a_info3);\n\t\t\t\tstatement.execute();\n\t\t\t\tnewElement = false; // element is no longer new!\n\t\t\t}catch(Exception e) {\n\t\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t\t}finally{\n                try{\n\t\t\t\t    statement.close();\n\t\t\t    }catch (Exception e) {\n                    // ignore the exception\n\t\t\t    }\n                try{\n                    con.close();\n\t\t\t    }catch (Exception e) {\n\t\t\t\t    // ignore the exception\n\t\t\t    }\n\t\t\t}\n\t\t}else {\n\t\t\t// Element is already in Database -> update statement\n\t\t\tupdate(cms, sqlDate);\n\t\t}\n\t}","id":5089,"modified_method":"/**\n\t * write an Element to the database\n\t * @param cms An instance of CmsObject\n\t */\n\tpublic void write(CmsObject cms) throws Exception{\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\tjava.util.Date uDate = m_date.getTime();  \t// GregorianCalendar to Date\n        clearcache(cms); // clear the cache to make changes visible\n\t\t//java.sql.Date sqlDate = new java.sql.Date(uDate.getTime());  // Date to SQLDate\n        java.sql.Timestamp sqlDate = new java.sql.Timestamp(uDate.getTime());\n        //sqlDate.setTime(uDate.getTime());\n\t\tif(newElement == true) {\n\t\t\t// Element not jet in Database -> insert Statement\n\t\t\ttry {\n\t\t\t\t// write the data to database\n                con = DriverManager.getConnection(c_pool);\n\t\t \t\tstatement = con.prepareStatement(C_INSERT_ENTRY);\n\t\t\t\tstatement.setInt(1, m_id);\n\t\t\t\tstatement.setString(2, m_headline);\n\t\t\t\tstatement.setString(3, m_description);\n\t\t\t\tstatement.setString(4, m_text);\n\t\t\t\tstatement.setString(5, m_author);\n\t\t\t\tstatement.setString(6, m_link);\n\t\t\t\tstatement.setString(7, m_linkText);\n\t\t\t\t//statement.setDate(8, sqlDate);\n\t\t\t\tstatement.setTimestamp(8, sqlDate);\n                statement.setInt(9, m_lockstate);\n\t\t\t\tstatement.setInt(10, m_channel);\n\t\t\t\tstatement.setString(11, m_a_info1);\n\t\t\t\tstatement.setString(12, m_a_info2);\n\t\t\t\tstatement.setString(13, m_a_info3);\n\t\t\t\tstatement.execute();\n\t\t\t\tnewElement = false; // element is no longer new!\n\t\t\t}catch(Exception e) {\n\t\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t\t}finally{\n                try{\n\t\t\t\t    statement.close();\n\t\t\t    }catch (Exception e) {\n                    // ignore the exception\n\t\t\t    }\n                try{\n                    con.close();\n\t\t\t    }catch (Exception e) {\n\t\t\t\t    // ignore the exception\n\t\t\t    }\n\t\t\t}\n\t\t}else {\n\t\t\t// Element is already in Database -> update statement\n\t\t\tupdate(cms, sqlDate);\n\t\t}\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Constructor to read an Element from the database\n\t * is needed by A_Backoffice like this!\n\t */\n\tpublic NewsContentDefinition(CmsObject cms, Integer ID) throws CmsException {\n\t\tjava.util.Date date = null;\n\t\tm_date = new GregorianCalendar();\n\t\t//System.err.println(\"NewsContentDefinition: will lesen, ID= \"+ID);\n    Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\ttry {\n      con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_SELECT_ID);\n\t\t\tstatement.setInt(1, ID.intValue());  // choose id of the Element  \"where id == \"\n\t\t\tres = statement.executeQuery();\n\t\t\tif(res.next()){\n\t\t\t\t// read the items from the resultset\n\t\t\t\tm_id = res.getInt(1);\n\t\t\t\tm_headline = res.getString(2);\n\t\t\t\tm_description = res.getString(3);\n\t\t\t\tm_text = res.getString(4);\n\t\t\t\tm_author = res.getString(5);\n\t\t\t\tm_link = res.getString(6);\n\t\t\t\tm_linkText = res.getString(7);\n\t\t\t\tjava.util.Date tempDate = ((java.util.Date)res.getDate(8));\n\t\t\t\tm_date.setTime( tempDate ); // SQLDate to Date to GregorianCalendar\n\t\t\t\t//System.err.println(\"NewsContentDefinition\" + m_date.get(Calendar.DATE)+\".\" + m_date.get(Calendar.MONTH)+\".\" + m_date.get(Calendar.YEAR) );\n\t\t\t\tm_lockstate = res.getInt(9);\n\t\t\t\tm_channel = res.getInt(10);\n\t\t\t\tm_a_info1 = res.getString(11);\n\t\t\t\tm_a_info2 = res.getString(12);\n\t\t\t\tm_a_info3 = res.getString(13);\n\t\t\t}\n\t\t}catch(SQLException e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","id":5090,"modified_method":"/**\n\t * Constructor to read an Element from the database\n\t * is needed by A_Backoffice like this!\n\t */\n\tpublic NewsContentDefinition(CmsObject cms, Integer ID) throws CmsException {\n\t\tjava.util.Date date = null;\n\t\tm_date = new GregorianCalendar();\n\t\t//System.err.println(\"NewsContentDefinition: will lesen, ID= \"+ID);\n    Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\ttry {\n      con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_SELECT_ID);\n\t\t\tstatement.setInt(1, ID.intValue());  // choose id of the Element  \"where id == \"\n\t\t\tres = statement.executeQuery();\n\t\t\tif(res.next()){\n\t\t\t\t// read the items from the resultset\n\t\t\t\tm_id = res.getInt(1);\n\t\t\t\tm_headline = res.getString(2);\n\t\t\t\tm_description = res.getString(3);\n\t\t\t\tm_text = res.getString(4);\n\t\t\t\tm_author = res.getString(5);\n\t\t\t\tm_link = res.getString(6);\n\t\t\t\tm_linkText = res.getString(7);\n                java.sql.Timestamp timestamp = res.getTimestamp(8);\n\t\t\t\tjava.util.Date tempDate = (java.util.Date)timestamp;\n\t\t\t\tm_date.setTime( tempDate ); // SQLDate to Date to GregorianCalendar\n\t\t\t\t//System.err.println(\"NewsContentDefinition\" + m_date.get(Calendar.DATE)+\".\" + m_date.get(Calendar.MONTH)+\".\" + m_date.get(Calendar.YEAR) );\n\t\t\t\tm_lockstate = res.getInt(9);\n\t\t\t\tm_channel = res.getInt(10);\n\t\t\t\tm_a_info1 = res.getString(11);\n\t\t\t\tm_a_info2 = res.getString(12);\n\t\t\t\tm_a_info3 = res.getString(13);\n\t\t\t}\n\t\t}catch(SQLException e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tres.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * delete an Element from the database\n\t * @param cms An instance of CmsObject\n\t */\n\tpublic void delete(CmsObject cms) throws CmsException {\n    Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n\t\ttry {\n\t\t\t// delet data from database\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_DELETE_ENTRY);\n\t\t\tstatement.setInt(1, m_id);\n\t\t\tstatement.execute();\n\t\t}catch(Exception e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n\t\t\t try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","id":5091,"modified_method":"/**\n\t * delete an Element from the database\n\t * @param cms An instance of CmsObject\n\t */\n\tpublic void delete(CmsObject cms) throws CmsException {\n        Connection con = null;\n\t\tPreparedStatement statement = null;\n\t\tResultSet res = null;\n        clearcache(cms); // clear the cache to make changes visible\n\t\ttry {\n\t\t\t// delet data from database\n            con = DriverManager.getConnection(c_pool);\n\t\t \tstatement = con.prepareStatement(C_DELETE_ENTRY);\n\t\t\tstatement.setInt(1, m_id);\n\t\t\tstatement.execute();\n\t\t}catch(Exception e) {\n\t\t\tthrow new CmsException(\"[\" + this.getClass().getName() + \"] \" + e.getMessage(),\n\t\t\tCmsException.C_SQL_ERROR, e);\n\t\t}finally{\n\t\t\t try{\n\t\t\t\tstatement.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n            try{\n\t\t\t\tcon.close();\n\t\t\t}catch (Exception e) {\n\t\t\t\t// ignore the exception\n\t\t\t}\n\t\t}\n\t}","commit_id":"8e7f3094a8d5c37d5836cb2a1d4698d46b40db2d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile xmlTemplateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\t\n\t\t// I_CmsSession session = cms.getRequestContext().getSession(true);\n\t\t\n\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n\t}","id":5092,"modified_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile xmlTemplateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\t\n\t\t\n\t\t// Set the New Module Icon  \n\t\tCmsRequestContext reqCont = cms.getRequestContext();\n\t\tif(reqCont.currentProject().equals(cms.onlineProject())){\n\t\t\txmlTemplateDocument.setData(\"activeIcon\",\"online\");\n\t\t}else{\n\t\t\txmlTemplateDocument.setData(\"activeIcon\",\"\");\n\t\t}\n\n\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n\t}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n * fills the data from the hashtable in the module.\n * Creation date: (30.10.00 14:22:22)\n * @return java.util.Hashtable\n * @param param java.lang.String\n */\nprivate void updateTheModule(CmsObject cms, I_CmsRegistry reg, Hashtable table, String module) {\n\n\tSimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"MM.dd.yyyy\");\n\tString name = (String)table.get(C_MODULE_PACKETNAME);\n\tString modulePath = \"/system/modules/\"+name+\"/\";\n\tString version = (String)table.get(C_VERSION);\n\ttry{\n\t\tint v = Integer.parseInt(version);\n\t\treg.setModuleVersion(name, v);\n\t}catch(Exception e){\n\t}\n\ttry{\n\t\treg.setModuleNiceName(name, (String)table.get(C_MODULENAME));\n\t\treg.setModuleDescription(name, (String)table.get(C_DESCRIPTION));\n\t\t// the view\n\t\tif (\"\".equals( (String)table.get(C_VIEW) )){ \n\t\t\tif ( !\"\".equals( getStringValue(reg.getModuleViewName(name)) ) ){\n\t\t\t\ttry{\n\t\t\t\t\tcms.deleteFolder(modulePath + \"view/\");\n\t\t\t\t}catch(Exception e){}\n\t\t\t\treg.deleteModuleView(name);\n\t\t\t}\n\t\t}else{\n\t\t\tif (\"\".equals( getStringValue(reg.getModuleViewName(name)) ) ){\n\t\t\t\treg.setModuleView(name, name.replace('.','_'), modulePath+\"view/index.html\");\n\t\t\t\ttryToCreateFolder(cms, modulePath, \"view\");\t\n\t\t\t}\n\t\t}\n\t\t// the adminpoint\n\t\tif (\"\".equals( (String)table.get(C_ADMINPOINT) )){\n\t\t\ttry{ // does not work when folder is not empty\n\t\t\t\tcms.deleteFolder(modulePath + \"administration/\");\n\t\t\t}catch(Exception e){}\n\t\t}else{\n\t\t\ttryToCreateFolder(cms, modulePath, \"administration\");\n\t\t}\n\t\t// the easy values\n\t\treg.setModuleMaintenanceEventClass(name, (String)table.get(C_MAINTENANCE));\n\t\treg.setModuleAuthor(name, (String)table.get(C_AUTHOR));\n\t\treg.setModuleAuthorEmail(name, (String)table.get(C_EMAIL));\n\t\t// set the date\n\t\tString date = (String)table.get(C_DATE);\n\t\tlong dateLong = 0;\n\t\ttry{\n\t\t\tdateLong = dateFormat.parse(date).getTime();\n\t\t}catch(Exception exc){\n\t\t\tdateLong = (new Date()).getTime();\n\t\t}\t\n\t\treg.setModuleCreateDate(name, dateLong);\n\t\t// now the dependnecies\n\t\tVector depNames = new Vector();\n\t\tVector minVersion = new Vector();\n\t\tVector maxVersion = new Vector();\n\t\tVector stringDeps = (Vector) table.get(C_DEPENDENCY);\n\t\tfor ( int i=0; i<stringDeps.size(); i++){\n\t\t\tString complString = (String)stringDeps.elementAt(i);\n\t\t\tString max = complString.substring(complString.lastIndexOf(\"-\")+2);\n\t\t\tcomplString = complString.substring(0, complString.lastIndexOf(\"-\")-1);\n\t\t\tString min = complString.substring(complString.lastIndexOf(\":\")+1);\n\t\t\tdepNames.addElement((complString.substring(0, complString.lastIndexOf(\"Version:\")-1)).trim());\n\t\t\tint minInt = 1;\n\t\t\tint maxInt = -1;\n\t\t\ttry{\n\t\t\t\tminInt = Integer.parseInt(min);\n\t\t\t}catch(Exception e){}\n\t\t\ttry{\n\t\t\t\tif(!\"*\".equals(max)){\n\t\t\t\t\tmaxInt = Integer.parseInt(max);\n\t\t\t\t}\n\t\t\t}catch(Exception e){\n\t\t\t} \n\t\t\tminVersion.addElement(new Integer(minInt));\n\t\t\tmaxVersion.addElement(new Integer(maxInt));\n\t\t}\n\t\treg.setModuleDependencies(name, depNames, minVersion, maxVersion);\n\n\t\t// last not least: the properties\n\t\tVector paraNames = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_NAMES);\n\t\tVector paraDesc = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_DESCR);\n\t\tVector paraTyp = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_TYP);\n\t\tVector paraVal = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_VAL);\n\t\treg.setModuleParameterdef(name, paraNames, paraDesc, paraTyp, paraVal);\n\t\t\t\n\t}catch(CmsException e){\n\t\tSystem.err.println(\"Error while module administrating: \"+e.toString());\n\t}\n\n}","id":5093,"modified_method":"/**\n * fills the data from the hashtable in the module.\n * Creation date: (30.10.00 14:22:22)\n * @return java.util.Hashtable\n * @param param java.lang.String\n */\nprivate void updateTheModule(CmsObject cms, I_CmsRegistry reg, Hashtable table, String module) {\n\n\tSimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"dd.MM.yyyy\");\n\tString name = (String)table.get(C_MODULE_PACKETNAME);\n\tString modulePath = \"/system/modules/\"+name+\"/\";\n\tString version = (String)table.get(C_VERSION);\n\ttry{\n\t\tint v = Integer.parseInt(version);\n\t\treg.setModuleVersion(name, v);\n\t}catch(Exception e){\n\t}\n\ttry{\n\t\treg.setModuleNiceName(name, (String)table.get(C_MODULENAME));\n\t\treg.setModuleDescription(name, (String)table.get(C_DESCRIPTION));\n\t\t// the view\n\t\tif (\"\".equals( (String)table.get(C_VIEW) )){ \n\t\t\tif ( !\"\".equals( getStringValue(reg.getModuleViewName(name)) ) ){\n\t\t\t\ttry{\n\t\t\t\t\tcms.deleteFolder(modulePath + \"view/\");\n\t\t\t\t}catch(Exception e){}\n\t\t\t\treg.deleteModuleView(name);\n\t\t\t}\n\t\t}else{\n\t\t\tif (\"\".equals( getStringValue(reg.getModuleViewName(name)) ) ){\n\t\t\t\treg.setModuleView(name, name.replace('.','_'), modulePath+\"view/index.html\");\n\t\t\t\ttryToCreateFolder(cms, modulePath, \"view\");\t\n\t\t\t}\n\t\t}\n\t\t// the adminpoint\n\t\tif (\"\".equals( (String)table.get(C_ADMINPOINT) )){\n\t\t\ttry{ // does not work when folder is not empty\n\t\t\t\tcms.deleteFolder(modulePath + \"administration/\");\n\t\t\t}catch(Exception e){}\n\t\t}else{\n\t\t\ttryToCreateFolder(cms, modulePath, \"administration\");\n\t\t}\n\t\t// the easy values\n\t\treg.setModuleMaintenanceEventClass(name, (String)table.get(C_MAINTENANCE));\n\t\treg.setModuleAuthor(name, (String)table.get(C_AUTHOR));\n\t\treg.setModuleAuthorEmail(name, (String)table.get(C_EMAIL));\n\t\t// set the date\n\t\tString date = (String)table.get(C_DATE);\n\t\tlong dateLong = 0;\n\t\ttry{\n\t\t\tdateLong = dateFormat.parse(date).getTime();\n\t\t}catch(Exception exc){\n\t\t\tdateLong = (new Date()).getTime();\n\t\t}\t\n\t\treg.setModuleCreateDate(name, dateLong);\n\t\t// now the dependnecies\n\t\tVector depNames = new Vector();\n\t\tVector minVersion = new Vector();\n\t\tVector maxVersion = new Vector();\n\t\tVector stringDeps = (Vector) table.get(C_DEPENDENCY);\n\t\tfor ( int i=0; i<stringDeps.size(); i++){\n\t\t\tString complString = (String)stringDeps.elementAt(i);\n\t\t\tString max = complString.substring(complString.lastIndexOf(\"-\")+2);\n\t\t\tcomplString = complString.substring(0, complString.lastIndexOf(\"-\")-1);\n\t\t\tString min = complString.substring(complString.lastIndexOf(\":\")+1);\n\t\t\tdepNames.addElement((complString.substring(0, complString.lastIndexOf(\"Version:\")-1)).trim());\n\t\t\tint minInt = 1;\n\t\t\tint maxInt = -1;\n\t\t\ttry{\n\t\t\t\tminInt = Integer.parseInt(min);\n\t\t\t}catch(Exception e){}\n\t\t\ttry{\n\t\t\t\tif(!\"*\".equals(max)){\n\t\t\t\t\tmaxInt = Integer.parseInt(max);\n\t\t\t\t}\n\t\t\t}catch(Exception e){\n\t\t\t} \n\t\t\tminVersion.addElement(new Integer(minInt));\n\t\t\tmaxVersion.addElement(new Integer(maxInt));\n\t\t}\n\t\treg.setModuleDependencies(name, depNames, minVersion, maxVersion);\n\n\t\t// last not least: the properties\n\t\tVector paraNames = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_NAMES);\n\t\tVector paraDesc = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_DESCR);\n\t\tVector paraTyp = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_TYP);\n\t\tVector paraVal = (Vector)table.get(C_SESSION_MODULE_ADMIN_PROP_VAL);\n\t\treg.setModuleParameterdef(name, paraNames, paraDesc, paraTyp, paraVal);\n\t\t\t\n\t}catch(CmsException e){\n\t\tSystem.err.println(\"Error while module administrating: \"+e.toString());\n\t}\n\n}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n * fills the data from the module in the hashtable.\n * Creation date: (30.10.00 14:22:22)\n * @return java.util.Hashtable\n * @param param java.lang.String\n */\nprivate void fillHashtable(CmsObject cms, I_CmsRegistry reg, Hashtable table, String module) {\n\n\ttable.put(C_MODULE_PACKETNAME, module);\n\ttable.put(C_VERSION, getStringValue(\"\" + reg.getModuleVersion(module)));\n\ttable.put(C_MODULENAME, getStringValue(reg.getModuleNiceName(module)));\n\ttable.put(C_DESCRIPTION, getStringValue(reg.getModuleDescription(module)));\n\tString check = getStringValue(reg.getModuleViewName(module));\n\tif(!check.equals(\"\")){\n\t\tcheck = \"checked\";\n\t}\n\ttable.put(C_VIEW, check);\t\t\t\n\ttry{\n\t\tcms.readFolder(\"/system/modules/\"+module+\"/administration/\");\n\t\tcheck = \"checked\";\n\t} catch (Exception exc) {\n\t\tcheck = \"\";\n\t}\n\ttable.put(C_ADMINPOINT, check);\n\ttable.put(C_MAINTENANCE, getStringValue(reg.getModuleMaintenanceEventName(module)));\n\ttable.put(C_AUTHOR, getStringValue(reg.getModuleAuthor(module)));\n\ttable.put(C_EMAIL, getStringValue(reg.getModuleAuthorEmail(module)));\n\ttable.put(C_DATE, getStringValue(Utils.getNiceDate(reg.getModuleCreateDate(module))));\n\t// get the dependencies\n\tVector depNames = new Vector();\n\tVector minVersion = new Vector();\n\tVector maxVersion = new Vector();\n\tint deps = reg.getModuleDependencies(module, depNames, minVersion, maxVersion);\n\tVector stringDeps = new Vector();\n\tfor (int i=0; i < deps; i++){\n\t\tString max = (String)maxVersion.elementAt(i);\n\t\tif (\"-1\".equals(max)){\n\t\t\tmax = \"*\";\n\t\t}\n\t\tstringDeps.addElement((String)depNames.elementAt(i)+\"  Version:\"+(String)minVersion.elementAt(i)+\" - \"+max);\n\t}\n\ttable.put(C_DEPENDENCY, stringDeps);\n\n\t// handle the properties\n\tVector paraNames\t= new Vector();\n\tVector paraDescr \t= new Vector();\n\tVector paraTyp\t\t= new Vector();\n\tVector paraVal\t\t= new Vector();\n\t\n\tString[] allParas = reg.getModuleParameterNames(module);\n\tfor (int i=0; i<allParas.length; i++){\n\t\tparaNames.addElement(allParas[i]);\n\t\tparaDescr.addElement(reg.getModuleParameterDescription(module, allParas[i]));\n\t\tparaVal.addElement(reg.getModuleParameterString(module, allParas[i]));\n\t\tparaTyp.addElement(reg.getModuleParameterType(module, allParas[i]));\n\t}\n\t\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_NAMES, paraNames);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_DESCR, paraDescr);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_TYP, paraTyp);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_VAL, paraVal);\n\t\n\t\n\t \n\t\n}","id":5094,"modified_method":"/**\n * fills the data from the module in the hashtable.\n * Creation date: (30.10.00 14:22:22)\n * @return java.util.Hashtable\n * @param param java.lang.String\n */\nprivate void fillHashtable(CmsObject cms, I_CmsRegistry reg, Hashtable table, String module) {\n\n\ttable.put(C_MODULE_PACKETNAME, module);\n\ttable.put(C_VERSION, getStringValue(\"\" + reg.getModuleVersion(module)));\n\ttable.put(C_MODULENAME, getStringValue(reg.getModuleNiceName(module)));\n\ttable.put(C_DESCRIPTION, getStringValue(reg.getModuleDescription(module)));\n\tString check = getStringValue(reg.getModuleViewName(module));\n\tif(!check.equals(\"\")){\n\t\tcheck = \"checked\";\n\t}\n\ttable.put(C_VIEW, check);\t\t\t\n\ttry{\n\t\tcms.readFolder(\"/system/modules/\"+module+\"/administration/\");\n\t\tcheck = \"checked\";\n\t} catch (Exception exc) {\n\t\tcheck = \"\";\n\t}\n\ttable.put(C_ADMINPOINT, check);\n\ttable.put(C_MAINTENANCE, getStringValue(reg.getModuleMaintenanceEventName(module)));\n\ttable.put(C_AUTHOR, getStringValue(reg.getModuleAuthor(module)));\n\ttable.put(C_EMAIL, getStringValue(reg.getModuleAuthorEmail(module)));\n\ttable.put(C_DATE, getStringValue(Utils.getNiceShortDate(reg.getModuleCreateDate(module))));\n\t// get the dependencies\n\tVector depNames = new Vector();\n\tVector minVersion = new Vector();\n\tVector maxVersion = new Vector();\n\tint deps = reg.getModuleDependencies(module, depNames, minVersion, maxVersion);\n\tVector stringDeps = new Vector();\n\tfor (int i=0; i < deps; i++){\n\t\tString max = (String)maxVersion.elementAt(i);\n\t\tif (\"-1\".equals(max)){\n\t\t\tmax = \"*\";\n\t\t}\n\t\tstringDeps.addElement((String)depNames.elementAt(i)+\"  Version:\"+(String)minVersion.elementAt(i)+\" - \"+max);\n\t}\n\ttable.put(C_DEPENDENCY, stringDeps);\n\n\t// handle the properties\n\tVector paraNames\t= new Vector();\n\tVector paraDescr \t= new Vector();\n\tVector paraTyp\t\t= new Vector();\n\tVector paraVal\t\t= new Vector();\n\t\n\tString[] allParas = reg.getModuleParameterNames(module);\n\tfor (int i=0; i<allParas.length; i++){\n\t\tparaNames.addElement(allParas[i]);\n\t\tparaDescr.addElement(reg.getModuleParameterDescription(module, allParas[i]));\n\t\tparaVal.addElement(reg.getModuleParameterString(module, allParas[i]));\n\t\tparaTyp.addElement(reg.getModuleParameterType(module, allParas[i]));\n\t}\n\t\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_NAMES, paraNames);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_DESCR, paraDescr);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_TYP, paraTyp);\n\ttable.put(C_SESSION_MODULE_ADMIN_PROP_VAL, paraVal);\n\t\n\t\n\t \n\t\n}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile xmlTemplateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\tI_CmsSession session = cms.getRequestContext().getSession(true);\n\t\tI_CmsRegistry reg = cms.getRegistry();\t\n\t\tHashtable sessionData = (Hashtable)session.getValue(C_SESSION_MODULE_ADMIN_DATA);\n\t\tString module = (String) sessionData.get(C_MODULE_PACKETNAME);\n\t\txmlTemplateDocument.setData(\"packetname\", module);\n\t\t\n\t\tVector paraNames\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_NAMES);\n\t\tVector paraDescr \t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_DESCR);\n\t\tVector paraTyp\t\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_TYP);\n\t\tVector paraVal\t\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_VAL);\n\n\t\tString prop \t= (String)parameters.get(\"prop\");\n\t\tString delete \t= (String)parameters.get(\"delete\");\n\t\tString ok\t\t= (String)parameters.get(\"ok\");\n\t\tString step\t\t= (String)parameters.get(\"step\");\n\t\t\n\t\tif ((prop == null)|| (\"\".equals(prop))){\n\t\t\t// new property\n\t\t\tif ((ok != null) && (! \"\".equals(ok))){\n\t\t\t\t// read new prop\n\t\t\t\tString name = getStringValue((String)parameters.get(\"NAME\"));\n\t\t\t\tString description = getStringValue((String)parameters.get(\"BESCHREIBUNG\"));\n\t\t\t\tString type = (String)parameters.get(\"TYP\");\n\t\t\t\tString value = (String)parameters.get(\"WERT\");\n\t\t\t\t// TODO: errror handling: check if all fields are filled out and if the value is correct\n\t\t\t\tif ((! \"\".equals(name)) && (checkType(type, value))){\n\t\t\t\t\tparaNames.addElement(name);\n\t\t\t\t\tparaDescr.addElement(description);\n\t\t\t\t\tparaTyp.addElement(type);\n\t\t\t\t\tparaVal.addElement(value);\n\t\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t}else{\n\t\t\t\t\tsession.putValue(\"parametername\", name);\n\t\t\t\t\tsession.putValue(\"description\", description);\n\t\t\t\t\tsession.putValue(\"parametertype\", type);\n\t\t\t\t\tsession.putValue(\"parametervalue\", value);\n\t\t\t\t\ttemplateSelector = \"errornew\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tif ((step == null) || (\"\".equals(step))){\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paranameok\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",\" \");\n\t\t\t\t}else{\n\t\t\t\t\t// from Errorpage\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paranameok\", (String)session.getValue(\"parametername\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)session.getValue(\"parametervalue\"));\n\t\t\t\t\txmlTemplateDocument.setData((String)session.getValue(\"parametertype\"), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)session.getValue(\"description\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",\" \");\n\t\t\t\t\tsession.removeValue(\"packagename\");\n\t\t\t\t\tsession.removeValue(\"parametervalue\");\n\t\t\t\t\tsession.removeValue(\"parametertype\");\n\t\t\t\t\tsession.removeValue(\"description\");\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tif ((ok != null) && (! \"\".equals(ok))){\n\t\t\t\t// set property\n\t\t\t\tString type = getStringValue((String)parameters.get(\"TYP\"));\n\t\t\t\tString value = getStringValue((String)parameters.get(\"WERT\"));\n\t\t\t\tif (checkType(type, value)){\n\t\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\t\tparaNames.removeElementAt(i);\n\t\t\t\t\tparaDescr.removeElementAt(i);\n\t\t\t\t\tparaTyp.removeElementAt(i);\n\t\t\t\t\tparaVal.removeElementAt(i);\n\t\t\t\t\tparaNames.addElement(prop);\n\t\t\t\t\tparaDescr.addElement(getStringValue((String)parameters.get(\"BESCHREIBUNG\")));\n\t\t\t\t\tparaTyp.addElement(type);\n\t\t\t\t\tparaVal.addElement(value);\n\t\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t}else{\n\t\t\t\t\tsession.putValue(\"parametername\", prop);\n\t\t\t\t\tsession.putValue(\"description\", getStringValue((String)parameters.get(\"BESCHREIBUNG\")));\n\t\t\t\t\tsession.putValue(\"parametertype\", type);\n\t\t\t\t\tsession.putValue(\"parametervalue\", value);\n\t\t\t\t\ttemplateSelector = \"errorold\";\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else if ((delete != null) && (! \"\".equals(delete))){\n\t\t\t\t// delete property\n\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\tparaNames.removeElementAt(i);\n\t\t\t\tparaDescr.removeElementAt(i);\n\t\t\t\tparaTyp.removeElementAt(i);\n\t\t\t\tparaVal.removeElementAt(i);\n\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t// prepare for change property\n\t\t\t\tif ((step == null)|| (\"\".equals(step))){\n\t\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"nameentry\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)paraVal.elementAt(i));\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)paraDescr.elementAt(i));\n\t\t\t\t\txmlTemplateDocument.setData((String)paraTyp.elementAt(i), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",xmlTemplateDocument.getProcessedDataValue(\"deletebutton\"));\n\t\t\t\t}else{\n\t\t\t\t\t// from errorpage errorold\n\t\t\t\t\tprop = (String) session.getValue(\"parametername\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"nameentry\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)session.getValue(\"parametervalue\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)session.getValue(\"description\"));\n\t\t\t\t\txmlTemplateDocument.setData((String)session.getValue(\"parametertype\"), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",xmlTemplateDocument.getProcessedDataValue(\"deletebutton\"));\n\t\t\t\t\tsession.removeValue(\"packagename\");\n\t\t\t\t\tsession.removeValue(\"parametervalue\");\n\t\t\t\t\tsession.removeValue(\"parametertype\");\n\t\t\t\t\tsession.removeValue(\"description\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\t\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n\t}","id":5095,"modified_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile xmlTemplateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\tI_CmsSession session = cms.getRequestContext().getSession(true);\n\t\tI_CmsRegistry reg = cms.getRegistry();\t\n\t\tHashtable sessionData = (Hashtable)session.getValue(C_SESSION_MODULE_ADMIN_DATA);\n\t\tString module = (String) sessionData.get(C_MODULE_PACKETNAME);\n\t\txmlTemplateDocument.setData(\"packetname\", module);\n\t\t\n\t\tVector paraNames\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_NAMES);\n\t\tVector paraDescr \t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_DESCR);\n\t\tVector paraTyp\t\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_TYP);\n\t\tVector paraVal\t\t= (Vector)sessionData.get(C_SESSION_MODULE_ADMIN_PROP_VAL);\n\n\t\tString prop \t= (String)parameters.get(\"prop\");\n\t\tString delete \t= (String)parameters.get(\"delete\");\n\t\tString ok\t\t= (String)parameters.get(\"ok\");\n\t\tString step\t\t= (String)parameters.get(\"step\");\n\t\t\n\t\tif ((prop == null)|| (\"\".equals(prop))){\n\t\t\t// new property\n\t\t\tif ((ok != null) && (! \"\".equals(ok))){\n\t\t\t\t// read new prop\n\t\t\t\tString name = getStringValue((String)parameters.get(\"NAME\"));\n\t\t\t\tString description = getStringValue((String)parameters.get(\"BESCHREIBUNG\"));\n\t\t\t\tString type = (String)parameters.get(\"TYP\");\n\t\t\t\tString value = (String)parameters.get(\"WERT\");\n\t\t\t\t//  check if all fields are filled out and if the value is correct\n\t\t\t\tif ((checkName(name)) && (checkType(type, value))){\n\t\t\t\t\tparaNames.addElement(name);\n\t\t\t\t\tparaDescr.addElement(description);\n\t\t\t\t\tparaTyp.addElement(type);\n\t\t\t\t\tparaVal.addElement(value);\n\t\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t}else{\n\t\t\t\t\tsession.putValue(\"parametername\", name);\n\t\t\t\t\tsession.putValue(\"description\", description);\n\t\t\t\t\tsession.putValue(\"parametertype\", type);\n\t\t\t\t\tsession.putValue(\"parametervalue\", value);\n\t\t\t\t\ttemplateSelector = \"errornew\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tif ((step == null) || (\"\".equals(step))){\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paranameok\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",\" \");\n\t\t\t\t}else{\n\t\t\t\t\t// from Errorpage\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", \"\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paranameok\", (String)session.getValue(\"parametername\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)session.getValue(\"parametervalue\"));\n\t\t\t\t\txmlTemplateDocument.setData((String)session.getValue(\"parametertype\"), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)session.getValue(\"description\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",\" \");\n\t\t\t\t\tsession.removeValue(\"packagename\");\n\t\t\t\t\tsession.removeValue(\"parametervalue\");\n\t\t\t\t\tsession.removeValue(\"parametertype\");\n\t\t\t\t\tsession.removeValue(\"description\");\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tif ((ok != null) && (! \"\".equals(ok))){\n\t\t\t\t// set property\n\t\t\t\tString type = getStringValue((String)parameters.get(\"TYP\"));\n\t\t\t\tString value = getStringValue((String)parameters.get(\"WERT\"));\n\t\t\t\tif (checkType(type, value)){\n\t\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\t\tparaNames.removeElementAt(i);\n\t\t\t\t\tparaDescr.removeElementAt(i);\n\t\t\t\t\tparaTyp.removeElementAt(i);\n\t\t\t\t\tparaVal.removeElementAt(i);\n\t\t\t\t\tparaNames.addElement(prop);\n\t\t\t\t\tparaDescr.addElement(getStringValue((String)parameters.get(\"BESCHREIBUNG\")));\n\t\t\t\t\tparaTyp.addElement(type);\n\t\t\t\t\tparaVal.addElement(value);\n\t\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t}else{\n\t\t\t\t\tsession.putValue(\"parametername\", prop);\n\t\t\t\t\tsession.putValue(\"description\", getStringValue((String)parameters.get(\"BESCHREIBUNG\")));\n\t\t\t\t\tsession.putValue(\"parametertype\", type);\n\t\t\t\t\tsession.putValue(\"parametervalue\", value);\n\t\t\t\t\ttemplateSelector = \"errorold\";\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else if ((delete != null) && (! \"\".equals(delete))){\n\t\t\t\t// delete property\n\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\tparaNames.removeElementAt(i);\n\t\t\t\tparaDescr.removeElementAt(i);\n\t\t\t\tparaTyp.removeElementAt(i);\n\t\t\t\tparaVal.removeElementAt(i);\n\t\t\t\ttemplateSelector = \"done\";\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t// prepare for change property\n\t\t\t\tif ((step == null)|| (\"\".equals(step))){\n\t\t\t\t\tint i = paraNames.indexOf(prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"nameentry\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)paraVal.elementAt(i));\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)paraDescr.elementAt(i));\n\t\t\t\t\txmlTemplateDocument.setData((String)paraTyp.elementAt(i), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",xmlTemplateDocument.getProcessedDataValue(\"deletebutton\"));\n\t\t\t\t}else{\n\t\t\t\t\t// from errorpage errorold\n\t\t\t\t\tprop = (String) session.getValue(\"parametername\");\n\t\t\t\t\txmlTemplateDocument.setData(\"paraname\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"nameentry\", prop);\n\t\t\t\t\txmlTemplateDocument.setData(\"value\", (String)session.getValue(\"parametervalue\"));\n\t\t\t\t\txmlTemplateDocument.setData(\"description\", (String)session.getValue(\"description\"));\n\t\t\t\t\txmlTemplateDocument.setData((String)session.getValue(\"parametertype\"), \"selected\");\n\t\t\t\t\txmlTemplateDocument.setData(\"delybutton\",xmlTemplateDocument.getProcessedDataValue(\"deletebutton\"));\n\t\t\t\t\tsession.removeValue(\"packagename\");\n\t\t\t\t\tsession.removeValue(\"parametervalue\");\n\t\t\t\t\tsession.removeValue(\"parametertype\");\n\t\t\t\t\tsession.removeValue(\"description\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\t\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, xmlTemplateDocument, elementName, parameters, templateSelector);\n\t}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile templateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\tCmsRequestContext reqCont = cms.getRequestContext();   \n\t\tI_CmsRegistry reg = cms.getRegistry();\t\n\t\tI_CmsSession session = cms.getRequestContext().getSession(true);\n\t\tString step = (String)parameters.get(C_STEP);\n \t\tSimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"MM.dd.yyyy\");\n\n\t\tif ((step == null) || \"\".equals(step)){\n\t \t\ttemplateDocument.setData(C_PACKETNAME, \"\");\n\t \t\ttemplateDocument.setData(C_VERSION, \"1\");\n\t \t\ttemplateDocument.setData(C_MODULENAME, \"\");\n\t \t\ttemplateDocument.setData(C_DESCRIPTION, \"\");\n\t \t\ttemplateDocument.setData(C_VIEW, \"\");\n\t \t\ttemplateDocument.setData(C_ADMINPOINT, \"\");\n\t \t\ttemplateDocument.setData(C_MAINTENANCE, \"\");\n\t \t\ttemplateDocument.setData(C_AUTHOR, \"\");\n\t \t\ttemplateDocument.setData(C_EMAIL, \"\");\n\t \t\t//  set the current date:\n\t \t\ttemplateDocument.setData(C_DATE, dateFormat.format(new Date()));\n\n \t\t}else{\n\t \t\tif (\"OK\".equals(step)){\t\n\t\t\t\tString packetname \t= (String)parameters.get(C_PACKETNAME);\t\n\t\t\t\tString modulename \t= (String)parameters.get(C_MODULENAME);\t\n\t\t\t\tString version \t\t= (String)parameters.get(C_VERSION);\t\n\t\t\t\tString description \t= (String)parameters.get(C_DESCRIPTION);\t\n\t\t\t\tString view \t\t= (String)parameters.get(C_VIEW);\t\n\t\t\t\tString adminpoint\t= (String)parameters.get(C_ADMINPOINT);\t\n\t\t\t\tString maintenance\t= (String)parameters.get(C_MAINTENANCE);\t\n\t\t\t\tString author\t\t= (String)parameters.get(C_AUTHOR);\t\n\t\t\t\tString email\t\t= (String)parameters.get(C_EMAIL);\t\n\t\t\t\tString createDate\t= (String)parameters.get(C_DATE);\n\t\t\t\tboolean moduleExists = reg.moduleExists(packetname);\n\t\t\t\tint v = -1;\n\t\t\t\ttry{\n\t\t\t\t\tv=Integer.parseInt(version);\n\t\t\t\t}catch(Exception e){}\n\t\t\t\tif ((packetname == null) || (\"\".equals(packetname)) ||(version == null)||(\"\".equals(version))|| moduleExists || (v <0)){\n\t\t\t\t\tHashtable sessionData = new Hashtable();\n\t\t\t\t\tsessionData.put(C_MODULENAME, getStringValue(modulename));\n\t\t\t\t\tsessionData.put(C_VERSION, getStringValue(version));\n\t\t\t\t\tsessionData.put(C_DESCRIPTION, getStringValue(description));\n\t\t\t\t\tsessionData.put(C_VIEW, getStringValue(view));\n\t\t\t\t\tsessionData.put(C_ADMINPOINT, getStringValue(adminpoint));\n\t\t\t\t\tsessionData.put(C_MAINTENANCE, getStringValue(maintenance));\n\t\t\t\t\tsessionData.put(C_AUTHOR, getStringValue(author));\n\t\t\t\t\tsessionData.put(C_EMAIL, getStringValue(email));\n\t\t\t\t\tsessionData.put(C_DATE, getStringValue(createDate));\n\t\t\t\t\tsession.putValue(C_SESSION_DATA, sessionData);\n\t\t\t\t\tif (moduleExists){\n\t\t\t\t\t\ttemplateSelector = \"errorexists\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\ttemplateSelector = \"errornoname\";\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t// create the module (first test if we are in a project including /system/\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/\", \"modules\");\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcms.createFolder(\"/system/modules/\", packetname);\n\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\t//throw new CmsException(\"couldn't create Module, sorry \", e);\n\t\t\t\t\t\ttemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n\t\t\t\t\t\treturn startProcessing(cms, templateDocument, elementName, parameters, \"errorProject\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlong createDateLong = 0;\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcreateDateLong = dateFormat.parse(createDate).getTime();\n\t\t\t\t\t}catch(Exception exc){\n\t\t\t\t\t\t\tcreateDateLong = (new Date()).getTime();\n\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\treg.createModule(packetname, getStringValue(modulename), \n\t\t\t\t\t\t\t\t\t\t\t\tgetStringValue(description),\n\t\t\t\t\t\t\t\t\t\t\t\tgetStringValue(author), createDateLong, v);\n\t\t\t\t\treg.setModuleAuthorEmail(packetname, getStringValue(email));\n\t\t\t\t\treg.setModuleMaintenanceEventClass(packetname, getStringValue(maintenance));\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/\", \"classes\");\n\t\t\t\t\ttryToCreateFolder(cms, \"/\", \"moduledemos\");\n\t\t\t\t\ttryToCreateFolder(cms, \"/moduledemos/\", packetname );\n\t\t\t\t\t\n\t\t\t\t\t// create the class folder:\n\t\t\t\t\tVector cFolders = new Vector();\n\t\t\t\t\tString workString = packetname;\n\t\t\t\t\twhile(workString.lastIndexOf('.') >-1){\n\t\t\t\t\t\tcFolders.addElement(workString.substring(workString.lastIndexOf('.')+1));\n\t\t\t\t\t\tworkString = workString.substring(0, workString.lastIndexOf('.'));\n\t\t\t\t\t}\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/classes/\", workString);\n\t\t\t\t\tworkString = \"/system/classes/\" + workString +\"/\";\n\t\t\t\t\tfor (int i = cFolders.size()-1; i>= 0; i--){\n\t\t\t\t\t\ttryToCreateFolder(cms, workString, (String)cFolders.elementAt(i));\n\t\t\t\t\t\tworkString = workString + (String)cFolders.elementAt(i) + \"/\";\n\t\t\t\t\t}\n\t\t\t\t\tString modulePath = \"/system/modules/\"+ packetname+\"/\";\n\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"templates\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"language\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath + \"language/\", \"de\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath + \"language/\", \"uk\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath , \"doc\");\n\t\t\t\t\treg.setModuleDocumentPath(packetname, modulePath +\"doc/index.html\");\n\t\t\t\t\tif (\"checked\".equals(view)){\n\t\t\t\t\t\treg.setModuleView(packetname, packetname.replace('.','_')+\".view\", modulePath+\"view/index.html\");\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"view\");\n\t\t\t\t\t}\n\t\t\t\t\tif (\"checked\".equals(adminpoint)){\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"administration\");\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"pics\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceAdministrationPath() +\"module/index.html\");\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new CmsException(\"Redirect fails :system/workplace/administration/module/index.html\",CmsException.C_UNKNOWN_EXCEPTION,e);\n\t\t\t\t\t} \n\t\t\t\t\treturn null; \n\t\t\t\t\t\t\n\t\t\t\t}\n\t \t\t}else if (\"fromerrorpage\".equals(step)){\n\t\t \t\tHashtable sessionData = (Hashtable)session.getValue(C_SESSION_DATA);\n\t\t \t\tsession.removeValue(C_SESSION_DATA);\n\t\t \t\ttemplateDocument.setData(C_PACKETNAME, \"\");\n\t\t \t\ttemplateDocument.setData(C_VERSION, (String)sessionData.get(C_VERSION));\n\t \t\t\ttemplateDocument.setData(C_MODULENAME, (String)sessionData.get(C_MODULENAME));\n\t \t\t\ttemplateDocument.setData(C_DESCRIPTION, (String)sessionData.get(C_DESCRIPTION));\n\t\t \t\ttemplateDocument.setData(C_VIEW, (String)sessionData.get(C_VIEW));\n\t\t \t\ttemplateDocument.setData(C_ADMINPOINT, (String)sessionData.get(C_ADMINPOINT));\n\t \t\t\ttemplateDocument.setData(C_MAINTENANCE, (String)sessionData.get(C_MAINTENANCE));\n\t \t\t\ttemplateDocument.setData(C_AUTHOR, (String)sessionData.get(C_AUTHOR));\n\t \t\t\ttemplateDocument.setData(C_EMAIL, (String)sessionData.get(C_EMAIL));\n\t\t \t\ttemplateDocument.setData(C_DATE, (String)sessionData.get(C_DATE));\n\t\t \t\ttemplateSelector = \"\";\n\t \t\t}\n \t\t}\t\n \t\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, templateDocument, elementName, parameters, templateSelector);\n\t}","id":5096,"modified_method":"/**\n\t * Gets the content of a defined section in a given template file and its subtemplates\n\t * with the given parameters. \n\t * \n\t * @see getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters)\n\t * @param cms CmsObject Object for accessing system resources.\n\t * @param templateFile Filename of the template file.\n\t * @param elementName Element name of this template in our parent template.\n\t * @param parameters Hashtable with all template class parameters.\n\t * @param templateSelector template section that should be processed.\n\t */\n\tpublic byte[] getContent(CmsObject cms, String templateFile, String elementName, Hashtable parameters, String templateSelector) throws CmsException {\n\t\tif(C_DEBUG && A_OpenCms.isLogging()) {\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"getting content of element \" + ((elementName==null)?\"<root>\":elementName));\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"template file is: \" + templateFile);\n\t\t\tA_OpenCms.log(C_OPENCMS_DEBUG, this.getClassName() + \"selected template section is: \" + ((templateSelector==null)?\"<default>\":templateSelector));\n\t\t}\n\t\t\n\t\tCmsXmlTemplateFile templateDocument = getOwnTemplateFile(cms, templateFile, elementName, parameters, templateSelector);\n\t\tCmsRequestContext reqCont = cms.getRequestContext();   \n\t\tI_CmsRegistry reg = cms.getRegistry();\t\n\t\tI_CmsSession session = cms.getRequestContext().getSession(true);\n\t\tString step = (String)parameters.get(C_STEP);\n \t\tSimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"dd.MM.yyyy\");\n\n\t\tif ((step == null) || \"\".equals(step)){\n\t \t\ttemplateDocument.setData(C_PACKETNAME, \"\");\n\t \t\ttemplateDocument.setData(C_VERSION, \"1\");\n\t \t\ttemplateDocument.setData(C_MODULENAME, \"\");\n\t \t\ttemplateDocument.setData(C_DESCRIPTION, \"\");\n\t \t\ttemplateDocument.setData(C_VIEW, \"\");\n\t \t\ttemplateDocument.setData(C_ADMINPOINT, \"\");\n\t \t\ttemplateDocument.setData(C_MAINTENANCE, \"\");\n\t \t\ttemplateDocument.setData(C_AUTHOR, \"\");\n\t \t\ttemplateDocument.setData(C_EMAIL, \"\");\n\t \t\t//  set the current date:\n\t \t\ttemplateDocument.setData(C_DATE, dateFormat.format(new Date()));\n\n \t\t}else{\n\t \t\tif (\"OK\".equals(step)){\t\n\t\t\t\tString packetname \t= (String)parameters.get(C_PACKETNAME);\t\n\t\t\t\tString modulename \t= (String)parameters.get(C_MODULENAME);\t\n\t\t\t\tString version \t\t= (String)parameters.get(C_VERSION);\t\n\t\t\t\tString description \t= (String)parameters.get(C_DESCRIPTION);\t\n\t\t\t\tString view \t\t= (String)parameters.get(C_VIEW);\t\n\t\t\t\tString adminpoint\t= (String)parameters.get(C_ADMINPOINT);\t\n\t\t\t\tString maintenance\t= (String)parameters.get(C_MAINTENANCE);\t\n\t\t\t\tString author\t\t= (String)parameters.get(C_AUTHOR);\t\n\t\t\t\tString email\t\t= (String)parameters.get(C_EMAIL);\t\n\t\t\t\tString createDate\t= (String)parameters.get(C_DATE);\n\t\t\t\tboolean moduleExists = reg.moduleExists(packetname);\n\t\t\t\tint v = -1;\n\t\t\t\ttry{\n\t\t\t\t\tv=Integer.parseInt(version);\n\t\t\t\t}catch(Exception e){}\n\t\t\t\tif ((!checkName(packetname)) ||(version == null)||(\"\".equals(version))|| moduleExists || (v <0)){\n\t\t\t\t\tHashtable sessionData = new Hashtable();\n\t\t\t\t\tsessionData.put(C_MODULENAME, getStringValue(modulename));\n\t\t\t\t\tsessionData.put(C_VERSION, getStringValue(version));\n\t\t\t\t\tsessionData.put(C_DESCRIPTION, getStringValue(description));\n\t\t\t\t\tsessionData.put(C_VIEW, getStringValue(view));\n\t\t\t\t\tsessionData.put(C_ADMINPOINT, getStringValue(adminpoint));\n\t\t\t\t\tsessionData.put(C_MAINTENANCE, getStringValue(maintenance));\n\t\t\t\t\tsessionData.put(C_AUTHOR, getStringValue(author));\n\t\t\t\t\tsessionData.put(C_EMAIL, getStringValue(email));\n\t\t\t\t\tsessionData.put(C_DATE, getStringValue(createDate));\n\t\t\t\t\tsession.putValue(C_SESSION_DATA, sessionData);\n\t\t\t\t\tif (moduleExists){\n\t\t\t\t\t\ttemplateSelector = \"errorexists\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\ttemplateSelector = \"errornoname\";\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t// create the module (first test if we are in a project including /system/\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/\", \"modules\");\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcms.createFolder(\"/system/modules/\", packetname);\n\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\t//couldn't create Module \n\t\t\t\t\t\ttemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n\t\t\t\t\t\treturn startProcessing(cms, templateDocument, elementName, parameters, \"errorProject\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlong createDateLong = 0;\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcreateDateLong = dateFormat.parse(createDate).getTime();\n\t\t\t\t\t}catch(Exception exc){\n\t\t\t\t\t\t\tcreateDateLong = (new Date()).getTime();\n\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\treg.createModule(packetname, getStringValue(modulename), \n\t\t\t\t\t\t\t\t\t\t\t\tgetStringValue(description),\n\t\t\t\t\t\t\t\t\t\t\t\tgetStringValue(author), createDateLong, v);\n\t\t\t\t\treg.setModuleAuthorEmail(packetname, getStringValue(email));\n\t\t\t\t\treg.setModuleMaintenanceEventClass(packetname, getStringValue(maintenance));\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/\", \"classes\");\n\t\t\t\t\ttryToCreateFolder(cms, \"/\", \"moduledemos\");\n\t\t\t\t\ttryToCreateFolder(cms, \"/moduledemos/\", packetname );\n\t\t\t\t\t\n\t\t\t\t\t// create the class folder:\n\t\t\t\t\tVector cFolders = new Vector();\n\t\t\t\t\tString workString = packetname;\n\t\t\t\t\twhile(workString.lastIndexOf('.') >-1){\n\t\t\t\t\t\tcFolders.addElement(workString.substring(workString.lastIndexOf('.')+1));\n\t\t\t\t\t\tworkString = workString.substring(0, workString.lastIndexOf('.'));\n\t\t\t\t\t}\n\t\t\t\t\ttryToCreateFolder(cms, \"/system/classes/\", workString);\n\t\t\t\t\tworkString = \"/system/classes/\" + workString +\"/\";\n\t\t\t\t\tfor (int i = cFolders.size()-1; i>= 0; i--){\n\t\t\t\t\t\ttryToCreateFolder(cms, workString, (String)cFolders.elementAt(i));\n\t\t\t\t\t\tworkString = workString + (String)cFolders.elementAt(i) + \"/\";\n\t\t\t\t\t}\n\t\t\t\t\tString modulePath = \"/system/modules/\"+ packetname+\"/\";\n\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"templates\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"language\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath + \"language/\", \"de\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath + \"language/\", \"uk\");\n\t\t\t\t\ttryToCreateFolder(cms, modulePath , \"doc\");\n\t\t\t\t\treg.setModuleDocumentPath(packetname, modulePath +\"doc/index.html\");\n\t\t\t\t\tif (\"checked\".equals(view)){\n\t\t\t\t\t\treg.setModuleView(packetname, packetname.replace('.','_')+\".view\", modulePath+\"view/index.html\");\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"view\");\n\t\t\t\t\t}\n\t\t\t\t\tif (\"checked\".equals(adminpoint)){\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"administration\");\n\t\t\t\t\t\ttryToCreateFolder(cms, modulePath, \"pics\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\ttry{\n\t\t\t\t\t\tcms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceAdministrationPath() +\"module/index.html\");\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new CmsException(\"Redirect fails :system/workplace/administration/module/index.html\",CmsException.C_UNKNOWN_EXCEPTION,e);\n\t\t\t\t\t} \n\t\t\t\t\treturn null; \n\t\t\t\t\t\t\n\t\t\t\t}\n\t \t\t}else if (\"fromerrorpage\".equals(step)){\n\t\t \t\tHashtable sessionData = (Hashtable)session.getValue(C_SESSION_DATA);\n\t\t \t\tsession.removeValue(C_SESSION_DATA);\n\t\t \t\ttemplateDocument.setData(C_PACKETNAME, \"\");\n\t\t \t\ttemplateDocument.setData(C_VERSION, (String)sessionData.get(C_VERSION));\n\t \t\t\ttemplateDocument.setData(C_MODULENAME, (String)sessionData.get(C_MODULENAME));\n\t \t\t\ttemplateDocument.setData(C_DESCRIPTION, (String)sessionData.get(C_DESCRIPTION));\n\t\t \t\ttemplateDocument.setData(C_VIEW, (String)sessionData.get(C_VIEW));\n\t\t \t\ttemplateDocument.setData(C_ADMINPOINT, (String)sessionData.get(C_ADMINPOINT));\n\t \t\t\ttemplateDocument.setData(C_MAINTENANCE, (String)sessionData.get(C_MAINTENANCE));\n\t \t\t\ttemplateDocument.setData(C_AUTHOR, (String)sessionData.get(C_AUTHOR));\n\t \t\t\ttemplateDocument.setData(C_EMAIL, (String)sessionData.get(C_EMAIL));\n\t\t \t\ttemplateDocument.setData(C_DATE, (String)sessionData.get(C_DATE));\n\t\t \t\ttemplateSelector = \"\";\n\t \t\t}\n \t\t}\t\n \t\n\t\t// Now load the template file and start the processing\n\t\treturn startProcessing(cms, templateDocument, elementName, parameters, templateSelector);\n\t}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Handling of the special workplace <CODE>&lt;MODULELIST&gt;<\/CODE> tags.\n\t * <P>\n\t * Returns the processed code with the actual elements.\n\t * <P>\n\t * Projectlists can be referenced in any workplace template by <br>\n\t * // TODO: insert correct syntax here!\n\t * <CODE>&lt;MODULELIST /&gt;<\/CODE>\n\t * \n\t * @param cms CmsObject Object for accessing resources.\n\t * @param n XML element containing the <code>&lt;MODULELIST&gt;<\/code> tag.\n\t * @param doc Reference to the A_CmsXmlContent object of the initiating XLM document.  \n\t * @param callingObject reference to the calling object <em>(not used here)<\/em>.\n\t * @param parameters Hashtable containing all user parameters <em>(not used here)<\/em>.\n\t * @param lang CmsXmlLanguageFile conataining the currently valid language file.\n\t * @return Processed button.\n\t * @exception CmsException\n\t */    \n\tpublic Object handleSpecialWorkplaceTag(CmsObject cms, Element n, A_CmsXmlContent doc, Object callingObject, Hashtable parameters, CmsXmlLanguageFile lang) throws CmsException {\n\t\t// Read projectlist parameters\n\t\tString listMethod = n.getAttribute(C_MODULELIST_METHOD);\n\n\t\t//Get the registry\n\t\tI_CmsRegistry reg = cms.getRegistry();\n\t\t\n\t\t// Get list definition and language values\n\t\tCmsXmlWpTemplateFile listdef = getModulelistDefinitions(cms);\n\n\t\t// call the method for generating projectlist elements\n\t\tMethod callingMethod = null;\n\t\tVector list = new Vector();\n\t\ttry {\n\t\t\tcallingMethod = callingObject.getClass().getMethod(listMethod, new Class[] {CmsObject.class, CmsXmlLanguageFile.class});\n\t\t\tlist = (Vector)callingMethod.invoke(callingObject, new Object[] {cms, lang});\n\t\t} catch(NoSuchMethodException exc) {\n\t\t\t// The requested method was not found.\n\t\t\tthrowException(\"Could not find method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" for generating projectlist content.\", CmsException.C_NOT_FOUND);\n\t\t} catch(InvocationTargetException targetEx) {\n\t\t\t// the method could be invoked, but throwed a exception\n\t\t\t// itself. Get this exception and throw it again.              \n\t\t\tThrowable e = targetEx.getTargetException();\n\t\t\tif(!(e instanceof CmsException)) {\n\t\t\t\t// Only print an error if this is NO CmsException\n\t\t\t\tthrowException(\"User method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" throwed an exception. \" + e, CmsException.C_UNKNOWN_EXCEPTION);\n\t\t\t} else {\n\t\t\t\t// This is a CmsException\n\t\t\t\t// Error printing should be done previously.\n\t\t\t\tthrow (CmsException)e;\n\t\t\t}\n\t\t} catch(Exception exc2) {\n\t\t\tthrowException(\"User method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" was found but could not be invoked. \" + exc2, CmsException.C_XML_NO_USER_METHOD);\n\t\t}\n\t\t\n\t\t// StringBuffer for the generated output\n\t\tStringBuffer result = new StringBuffer();\n\t\t\n\t\tfor(int i = 0; i < list.size(); i++) \n\t\t{\n\t\t\tString currentModule = (String)list.elementAt(i);\n\t\t\tlistdef.setData(C_MODULELIST_NAME, currentModule);\n\t\t\tlistdef.setData(C_MODULELIST_NICE_NAME, reg.getModuleNiceName(currentModule));\n\t\t\tlistdef.setData(C_MODULELIST_VERSION, reg.getModuleVersion(currentModule)+\"\");\n\t\t\tlistdef.setData(C_MODULELIST_AUTHOR, reg.getModuleAuthor(currentModule));\n\t\t\tlistdef.setData(C_MODULELIST_DATECREATED, Utils.getNiceDate(reg.getModuleCreateDate(currentModule)));\n\t\t\tlistdef.setData(C_MODULELIST_DATEUPLOADED, Utils.getNiceDate(reg.getModuleUploadDate(currentModule)));\n\t\t\tlistdef.setData(C_MODULELIST_IDX, new Integer(i).toString());\n\t\t\tresult.append(listdef.getProcessedDataValue(C_TAG_MODULELIST_DEFAULT, callingObject, parameters));\n\t\t}\t\t\n\t\treturn result.toString();\n\t}","id":5097,"modified_method":"/**\n\t * Handling of the special workplace <CODE>&lt;MODULELIST&gt;<\/CODE> tags.\n\t * <P>\n\t * Returns the processed code with the actual elements.\n\t * <P>\n\t * Projectlists can be referenced in any workplace template by <br>\n\t * // TODO: insert correct syntax here!\n\t * <CODE>&lt;MODULELIST /&gt;<\/CODE>\n\t * \n\t * @param cms CmsObject Object for accessing resources.\n\t * @param n XML element containing the <code>&lt;MODULELIST&gt;<\/code> tag.\n\t * @param doc Reference to the A_CmsXmlContent object of the initiating XLM document.  \n\t * @param callingObject reference to the calling object <em>(not used here)<\/em>.\n\t * @param parameters Hashtable containing all user parameters <em>(not used here)<\/em>.\n\t * @param lang CmsXmlLanguageFile conataining the currently valid language file.\n\t * @return Processed button.\n\t * @exception CmsException\n\t */    \n\tpublic Object handleSpecialWorkplaceTag(CmsObject cms, Element n, A_CmsXmlContent doc, Object callingObject, Hashtable parameters, CmsXmlLanguageFile lang) throws CmsException {\n\t\t// Read projectlist parameters\n\t\tString listMethod = n.getAttribute(C_MODULELIST_METHOD);\n\n\t\t//Get the registry\n\t\tI_CmsRegistry reg = cms.getRegistry();\n\t\t\n\t\t// Get list definition and language values\n\t\tCmsXmlWpTemplateFile listdef = getModulelistDefinitions(cms);\n\n\t\t// call the method for generating projectlist elements\n\t\tMethod callingMethod = null;\n\t\tVector list = new Vector();\n\t\ttry {\n\t\t\tcallingMethod = callingObject.getClass().getMethod(listMethod, new Class[] {CmsObject.class, CmsXmlLanguageFile.class});\n\t\t\tlist = (Vector)callingMethod.invoke(callingObject, new Object[] {cms, lang});\n\t\t} catch(NoSuchMethodException exc) {\n\t\t\t// The requested method was not found.\n\t\t\tthrowException(\"Could not find method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" for generating projectlist content.\", CmsException.C_NOT_FOUND);\n\t\t} catch(InvocationTargetException targetEx) {\n\t\t\t// the method could be invoked, but throwed a exception\n\t\t\t// itself. Get this exception and throw it again.              \n\t\t\tThrowable e = targetEx.getTargetException();\n\t\t\tif(!(e instanceof CmsException)) {\n\t\t\t\t// Only print an error if this is NO CmsException\n\t\t\t\tthrowException(\"User method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" throwed an exception. \" + e, CmsException.C_UNKNOWN_EXCEPTION);\n\t\t\t} else {\n\t\t\t\t// This is a CmsException\n\t\t\t\t// Error printing should be done previously.\n\t\t\t\tthrow (CmsException)e;\n\t\t\t}\n\t\t} catch(Exception exc2) {\n\t\t\tthrowException(\"User method \" + listMethod + \" in calling class \" + callingObject.getClass().getName() + \" was found but could not be invoked. \" + exc2, CmsException.C_XML_NO_USER_METHOD);\n\t\t}\n\n\t\t// check if we are in the onlineProject\n\t\tCmsRequestContext reqCont = cms.getRequestContext();\n\t\tif(reqCont.currentProject().equals(cms.onlineProject())){\n\t\t\tlistdef.setData(\"menue\",\"menueonline\");\n\t\t}else{\n\t\t\tlistdef.setData(\"menue\",\"modulemenue\");\n\t\t}\n\n\t\t\n\t\t// StringBuffer for the generated output\n\t\tStringBuffer result = new StringBuffer();\n\t\t\n\t\tfor(int i = 0; i < list.size(); i++) \n\t\t{\n\t\t\tString currentModule = (String)list.elementAt(i);\n\t\t\tlistdef.setData(C_MODULELIST_NAME, currentModule);\n\t\t\tlistdef.setData(C_MODULELIST_NICE_NAME, reg.getModuleNiceName(currentModule));\n\t\t\tlistdef.setData(C_MODULELIST_VERSION, reg.getModuleVersion(currentModule)+\"\");\n\t\t\tlistdef.setData(C_MODULELIST_AUTHOR, reg.getModuleAuthor(currentModule));\n\t\t\tlistdef.setData(C_MODULELIST_DATECREATED, Utils.getNiceShortDate(reg.getModuleCreateDate(currentModule)));\n\t\t\tif (reg.getModuleUploadDate(currentModule)== -1){\n\t\t\t\tlistdef.setData(C_MODULELIST_DATEUPLOADED, \"   -   \");\n\t\t\t}else{\n\t\t\t\tlistdef.setData(C_MODULELIST_DATEUPLOADED, Utils.getNiceShortDate(reg.getModuleUploadDate(currentModule)));\n\t\t\t}\n\t\t\tlistdef.setData(C_MODULELIST_IDX, new Integer(i).toString());\n\t\t\tresult.append(listdef.getProcessedDataValue(C_TAG_MODULELIST_DEFAULT, callingObject, parameters));\n\t\t}\t\t\n\t\treturn result.toString();\n\t}","commit_id":"ed24e92caeb8c155ed4ce1023a481cb994b48604","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public static int showAlertDialog(final String title,\n                                    final String defaultText,\n                                    @Nullable final String alternateText,\n                                    @Nullable final String otherText,\n                                    final String message,\n                                    @Nullable Window window ,\n                                    final boolean errorStyle,\n                                    @Nullable final DialogWrapper.DoNotAskOption doNotAskDialogOption) {\n\n    Window foremostWindow = getForemostWindow(window);\n    String foremostWindowTitle = getWindowTitle(foremostWindow);\n\n    Window documentRoot = getDocumentRootFromWindow(foremostWindow);\n\n    final ID nativeFocusedWindow = MacUtil.findWindowForTitle(foremostWindowTitle);\n\n    ID pool = invoke(\"NSAutoreleasePool\", \"new\");\n    try {\n\n      final ID delegate = invoke(getObjcClass(\"NSAlertDelegate_\"), \"new\");\n      cfRetain(delegate);\n\n      final ID paramsArray = invoke(\"NSArray\", \"arrayWithObjects:\", nsString(title), nsString(UIUtil.removeMnemonic(defaultText)),\n                                    nsString(otherText == null ? \"-1\" : UIUtil.removeMnemonic(otherText)),\n                                    nsString(alternateText == null ? \"-1\" : UIUtil.removeMnemonic(alternateText)),\n                                    // replace % -> %% to avoid formatted parameters (causes SIGTERM)\n                                    nsString(StringUtil.stripHtml(message == null ? \"\" : message, true).replace(\"%\", \"%%\")),\n                                    nativeFocusedWindow, nsString(\"\"), nsString(errorStyle ? \"error\" : \"-1\"),\n                                    nsString(doNotAskDialogOption == null || !doNotAskDialogOption.canBeHidden()\n                                             // TODO: state=!doNotAsk.shouldBeShown()\n                                             ? \"-1\"\n                                             : doNotAskDialogOption.getDoNotShowMessage()),\n                                    nsString(doNotAskDialogOption != null && !doNotAskDialogOption.isToBeShown() ? \"checked\" : \"-1\"), null);\n\n\n\n      IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(false);\n\n      runOrPostponeForWindow(documentRoot, new Runnable() {\n        @Override\n        public void run() {\n          invoke(delegate, \"performSelectorOnMainThread:withObject:waitUntilDone:\",\n                 createSelector(\"showSheet:\"), paramsArray, false);\n        }\n      });\n      startModal(documentRoot, nativeFocusedWindow);\n      IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(true);\n\n    }\n    finally {\n      invoke(pool, \"release\");\n    }\n    return convertRetunCodeFromNativeAlertDialog(documentRoot, alternateText);\n\n  }","id":5098,"modified_method":"public static int showAlertDialog(final String title,\n                                    final String defaultText,\n                                    @Nullable final String alternateText,\n                                    @Nullable final String otherText,\n                                    final String message,\n                                    @Nullable Window window ,\n                                    final boolean errorStyle,\n                                    @Nullable final DialogWrapper.DoNotAskOption doNotAskDialogOption) {\n\n    HashMap params  = new HashMap ();\n\n    ID pool = invoke(invoke(\"NSAutoreleasePool\", \"alloc\"), \"init\");\n    try {\n\n      params.put(COMMON_DIALOG_PARAM_TYPE.title, nsString(title));\n      params.put(ALERT_DIALOG_PARAM_TYPE.defaultText, nsString(UIUtil.removeMnemonic(defaultText)));\n      params.put(ALERT_DIALOG_PARAM_TYPE.alternateText, nsString(otherText == null ? \"-1\" : UIUtil.removeMnemonic(otherText)));\n      params.put(ALERT_DIALOG_PARAM_TYPE.otherText, nsString(alternateText == null ? \"-1\" : UIUtil.removeMnemonic(alternateText)));\n      // replace % -> %% to avoid formatted parameters (causes SIGTERM)\n      params.put(COMMON_DIALOG_PARAM_TYPE.message, nsString(StringUtil.stripHtml(message == null ? \"\" : message, true).replace(\"%\", \"%%\")));\n      params.put(COMMON_DIALOG_PARAM_TYPE.errorStyle, nsString(errorStyle ? \"error\" : \"-1\"));\n      params.put(COMMON_DIALOG_PARAM_TYPE.doNotAskDialogOption1, nsString(doNotAskDialogOption == null || !doNotAskDialogOption.canBeHidden()\n                                                                          // TODO: state=!doNotAsk.shouldBeShown()\n                                                                          ? \"-1\"\n                                                                          : doNotAskDialogOption.getDoNotShowMessage()));\n      params.put(COMMON_DIALOG_PARAM_TYPE.doNotAskDialogOption2, nsString(doNotAskDialogOption != null && !doNotAskDialogOption.isToBeShown() ? \"checked\" : \"-1\"));\n\n\n      return convertRetunCodeFromNativeAlertDialog(showDialog(window, \"showSheet:\",\n                                                              new DialogParamsWrapper(DialogParamsWrapper.DialogType.alert, params)), alternateText);\n    }\n    finally {\n      invoke(pool, \"release\");\n    }\n  }","commit_id":"4856789e79b831d78efb2db793cf1aadf5efa7e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Window getForemostWindow(final Window window) {\n    Window _window = null;\n\n    Component focusOwner = IdeFocusManager.findInstance().getFocusOwner();\n    if (focusOwner != null) {\n      _window = SwingUtilities.getWindowAncestor(focusOwner);\n    }\n\n    if (_window == null && window != null) {\n      focusOwner = window.getMostRecentFocusOwner();\n      if (focusOwner != null) {\n        _window = SwingUtilities.getWindowAncestor(focusOwner);\n      }\n    }\n\n    if (_window == null) {\n      focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();\n      if (focusOwner != null) {\n        _window = SwingUtilities.getWindowAncestor(focusOwner);\n      }\n    }\n\n    if (_window == null) {\n      _window = WindowManager.getInstance().findVisibleFrame();\n    }\n\n    if (_window != null) {\n      synchronized (_window.getTreeLock()) {\n        try {\n          isModalBlockedMethod.setAccessible(true);\n          if ((Boolean)isModalBlockedMethod.invoke(_window, null)) {\n\n            getModalBlockerMethod.setAccessible(true);\n            _window = (Dialog)getModalBlockerMethod.invoke(_window, null);\n          }\n        }\n        catch (InvocationTargetException e) {\n          LOG.error(e);\n        }\n        catch (IllegalAccessException e) {\n          LOG.error(e);\n        }\n      }\n    }\n\n    return _window;\n  }","id":5099,"modified_method":"@NotNull\n  private static Window getForemostWindow(final Window window) {\n    Window _window = null;\n\n    Component focusOwner = IdeFocusManager.findInstance().getFocusOwner();\n    if (focusOwner != null) {\n      _window = SwingUtilities.getWindowAncestor(focusOwner);\n    }\n\n    if (_window == null && window != null) {\n      focusOwner = window.getMostRecentFocusOwner();\n      if (focusOwner != null) {\n        _window = SwingUtilities.getWindowAncestor(focusOwner);\n      }\n    }\n\n    if (_window == null) {\n      focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();\n      if (focusOwner != null) {\n        _window = SwingUtilities.getWindowAncestor(focusOwner);\n      }\n    }\n\n    if (_window == null) {\n      _window = WindowManager.getInstance().findVisibleFrame();\n    }\n\n    if (_window != null) {\n      synchronized (_window.getTreeLock()) {\n        try {\n          isModalBlockedMethod.setAccessible(true);\n          if ((Boolean)isModalBlockedMethod.invoke(_window, null)) {\n\n            getModalBlockerMethod.setAccessible(true);\n            _window = (Dialog)getModalBlockerMethod.invoke(_window, null);\n          }\n        }\n        catch (InvocationTargetException e) {\n          LOG.error(e);\n        }\n        catch (IllegalAccessException e) {\n          LOG.error(e);\n        }\n      }\n    }\n\n    while (getWindowTitle(_window) == null) {\n      _window = _window.getOwner();\n      //At least our frame should have a title\n    }\n\n    return _window;\n  }","commit_id":"4856789e79b831d78efb2db793cf1aadf5efa7e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int showMessageDialog(final String title, final String message, final String[] buttons, final boolean errorStyle,\n                               @Nullable Window window, final int defaultOptionIndex,\n                               final int focusedOptionIndex, @Nullable final DialogWrapper.DoNotAskOption doNotAskDialogOption) {\n\n\n    Window foremostWindow = getForemostWindow(window);\n    String foremostWindowTitle = getWindowTitle(foremostWindow);\n\n    Window documentRoot = getDocumentRootFromWindow(foremostWindow);\n\n    final ID nativeFocusedWindow = MacUtil.findWindowForTitle(foremostWindowTitle);\n\n    if (foremostWindow != null) {\n\n      final FocusTrackback[] focusTrackback = {new FocusTrackback(new Object(), documentRoot, true)};\n\n      final ID delegate = invoke(Foundation.getObjcClass(\"NSAlertDelegate_\"), \"new\");\n      invoke(delegate, \"autorelease\");\n      cfRetain(delegate);\n\n      final ID buttonsArray = invoke(\"NSMutableArray\", \"array\");\n      for (String s : buttons) {\n        ID s1 = nsString(UIUtil.removeMnemonic(s));\n        invoke(buttonsArray, \"addObject:\", s1);\n        cfRelease(s1);\n      }\n\n      final ID paramsArray = invoke(\"NSArray\", \"arrayWithObjects:\", nsString(title),\n                                    // replace % -> %% to avoid formatted parameters (causes SIGTERM)\n                                    nsString(StringUtil.stripHtml(message == null ? \"\" : message, true).replace(\"%\", \"%%\")),\n                                    nativeFocusedWindow, nsString(\"\"), nsString(errorStyle ? \"error\" : \"-1\"),\n                                    nsString(doNotAskDialogOption == null || !doNotAskDialogOption.canBeHidden()\n                                             // TODO: state=!doNotAsk.shouldBeShown()\n                                             ? \"-1\"\n                                             : doNotAskDialogOption.getDoNotShowMessage()),\n                                    nsString(Integer.toString(defaultOptionIndex)),\n                                    nsString(Integer.toString(focusedOptionIndex)), buttonsArray,\n                                    nsString(doNotAskDialogOption != null && !doNotAskDialogOption.isToBeShown() ? \"checked\" : \"-1\"), null);\n\n      IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(false);\n\n      runOrPostponeForWindow(documentRoot, new Runnable() {\n        @Override\n        public void run() {\n          invoke(delegate, \"performSelectorOnMainThread:withObject:waitUntilDone:\",\n                 createSelector(\"showVariableButtonsSheet:\"), paramsArray, false);\n        }\n      });\n\n      startModal(documentRoot, nativeFocusedWindow);\n\n      IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(true);\n\n\n      if (focusTrackback[0] != null &&\n          !(focusTrackback[0].isSheduledForRestore() || focusTrackback[0].isWillBeSheduledForRestore())) {\n        focusTrackback[0].setWillBeSheduledForRestore();\n\n        IdeFocusManager mgr = IdeFocusManager.findInstanceByComponent(documentRoot);\n        Runnable r = new Runnable() {\n          public void run() {\n            if (focusTrackback[0] != null) focusTrackback[0].restoreFocus();\n            focusTrackback[0] = null;\n          }\n        };\n        mgr.doWhenFocusSettlesDown(r);\n      }\n      return convertReturnCodeFromNativeMessageDialog(documentRoot);\n    }\n    return -1;\n  }","id":5100,"modified_method":"public int showMessageDialog(final String title,\n                               final String message,\n                               final String[] buttons,\n                               final boolean errorStyle,\n                               @Nullable Window window,\n                               final int defaultOptionIndex,\n                               final int focusedOptionIndex,\n                               @Nullable final DialogWrapper.DoNotAskOption doNotAskDialogOption)\n  {\n\n    ID pool = invoke(invoke(\"NSAutoreleasePool\", \"alloc\"), \"init\");\n    try {\n      final ID buttonsArray = invoke(\"NSMutableArray\", \"array\");\n      for (String s : buttons) {\n        ID s1 = nsString(UIUtil.removeMnemonic(s));\n        invoke(buttonsArray, \"addObject:\", s1);\n      }\n\n      HashMap params  = new HashMap ();\n\n      params.put(COMMON_DIALOG_PARAM_TYPE.title, nsString(title));\n      // replace % -> %% to avoid formatted parameters (causes SIGTERM)\n      params.put(COMMON_DIALOG_PARAM_TYPE.message, nsString(StringUtil.stripHtml(message == null ? \"\" : message, true).replace(\"%\", \"%%\")));\n\n      params.put(MESSAGE_DIALOG_PARAM_TYPE.errorStyle, nsString(errorStyle ? \"error\" : \"-1\"));\n      params.put(COMMON_DIALOG_PARAM_TYPE.doNotAskDialogOption1, nsString(doNotAskDialogOption == null || !doNotAskDialogOption.canBeHidden()\n                                                                          // TODO: state=!doNotAsk.shouldBeShown()\n                                                                          ? \"-1\"\n                                                                          : doNotAskDialogOption.getDoNotShowMessage()));\n      params.put(COMMON_DIALOG_PARAM_TYPE.doNotAskDialogOption2, nsString(doNotAskDialogOption != null && !doNotAskDialogOption.isToBeShown() ? \"checked\" : \"-1\"));\n      params.put(MESSAGE_DIALOG_PARAM_TYPE.defaultOptionIndex, Integer.toString(defaultOptionIndex));\n      params.put(MESSAGE_DIALOG_PARAM_TYPE.focusedOptionIndex, Integer.toString(focusedOptionIndex));\n      params.put(MESSAGE_DIALOG_PARAM_TYPE.buttonsArray, buttonsArray);\n\n\n      return convertReturnCodeFromNativeMessageDialog(showDialog(window, \"showVariableButtonsSheet:\",\n                                                                 new DialogParamsWrapper(DialogParamsWrapper.DialogType.message, params)));\n    }\n    finally {\n      invoke(pool, \"release\");\n    }\n  }","commit_id":"4856789e79b831d78efb2db793cf1aadf5efa7e6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addInterceptor(HandlerInterceptor interceptor) {\n\t\tinitInterceptorList();\n\t\tthis.interceptorList.add(interceptor);\n\t}","id":5101,"modified_method":"public void addInterceptor(HandlerInterceptor interceptor) {\n\t\tinitInterceptorList().add(interceptor);\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Create a new HandlerExecutionChain.\n\t * @param handler the handler object to execute\n\t */\n\tpublic HandlerExecutionChain(Object handler) {\n\t\tthis(handler, null);\n\t}","id":5102,"modified_method":"/**\n\t * Create a new HandlerExecutionChain.\n\t * @param handler the handler object to execute\n\t */\n\tpublic HandlerExecutionChain(Object handler) {\n\t\tthis(handler, (HandlerInterceptor[]) null);\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private void initInterceptorList() {\n\t\tif (this.interceptorList == null) {\n\t\t\tthis.interceptorList = new ArrayList<HandlerInterceptor>();\n\t\t}\n\t\tif (this.interceptors != null) {\n\t\t\tthis.interceptorList.addAll(Arrays.asList(this.interceptors));\n\t\t\tthis.interceptors = null;\n\t\t}\n\t}","id":5103,"modified_method":"private List<HandlerInterceptor> initInterceptorList() {\n\t\tif (this.interceptorList == null) {\n\t\t\tthis.interceptorList = new ArrayList<HandlerInterceptor>();\n\t\t\tif (this.interceptors != null) {\n\t\t\t\t// An interceptor array specified through the constructor\n\t\t\t\tthis.interceptorList.addAll(Arrays.asList(this.interceptors));\n\t\t\t}\n\t\t}\n\t\tthis.interceptors = null;\n\t\treturn this.interceptorList;\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void addInterceptors(HandlerInterceptor[] interceptors) {\n\t\tif (interceptors != null) {\n\t\t\tinitInterceptorList();\n\t\t\tthis.interceptorList.addAll(Arrays.asList(interceptors));\n\t\t}\n\t}","id":5104,"modified_method":"public void addInterceptors(HandlerInterceptor... interceptors) {\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tinitInterceptorList().addAll(Arrays.asList(interceptors));\n\t\t}\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Create a new HandlerExecutionChain.\n\t * @param handler the handler object to execute\n\t */\n\tpublic HandlerExecutionChain(Object handler) {\n\t\tthis(handler, null);\n\t}","id":5105,"modified_method":"/**\n\t * Create a new HandlerExecutionChain.\n\t * @param handler the handler object to execute\n\t */\n\tpublic HandlerExecutionChain(Object handler) {\n\t\tthis(handler, (HandlerInterceptor[]) null);\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void addInterceptor(HandlerInterceptor interceptor) {\n\t\tinitInterceptorList();\n\t\tthis.interceptorList.add(interceptor);\n\t}","id":5106,"modified_method":"public void addInterceptor(HandlerInterceptor interceptor) {\n\t\tinitInterceptorList().add(interceptor);\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (getInterceptors() != null) {\n\t\t\tfor (int i = 0; i < getInterceptors().length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = getInterceptors()[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","id":5107,"modified_method":"/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private void initInterceptorList() {\n\t\tif (this.interceptorList == null) {\n\t\t\tthis.interceptorList = new ArrayList<HandlerInterceptor>();\n\t\t}\n\t\tif (this.interceptors != null) {\n\t\t\tthis.interceptorList.addAll(Arrays.asList(this.interceptors));\n\t\t\tthis.interceptors = null;\n\t\t}\n\t}","id":5108,"modified_method":"private List<HandlerInterceptor> initInterceptorList() {\n\t\tif (this.interceptorList == null) {\n\t\t\tthis.interceptorList = new ArrayList<HandlerInterceptor>();\n\t\t\tif (this.interceptors != null) {\n\t\t\t\t// An interceptor array specified through the constructor\n\t\t\t\tthis.interceptorList.addAll(Arrays.asList(this.interceptors));\n\t\t\t}\n\t\t}\n\t\tthis.interceptors = null;\n\t\treturn this.interceptorList;\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.\n\t * Will just invoke afterCompletion for all interceptors whose preHandle invocation\n\t * has successfully completed and returned true.\n\t */\n\tvoid triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)\n\t\t\tthrows Exception {\n\n\t\tif (getInterceptors() == null) {\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = this.interceptorIndex; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = getInterceptors()[i];\n\t\t\ttry {\n\t\t\t\tinterceptor.afterCompletion(request, response, this.handler, ex);\n\t\t\t}\n\t\t\tcatch (Throwable ex2) {\n\t\t\t\tlogger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n\t\t\t}\n\t\t}\n\t}","id":5109,"modified_method":"/**\n\t * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.\n\t * Will just invoke afterCompletion for all interceptors whose preHandle invocation\n\t * has successfully completed and returned true.\n\t */\n\tvoid triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)\n\t\t\tthrows Exception {\n\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = this.interceptorIndex; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\ttry {\n\t\t\t\t\tinterceptor.afterCompletion(request, response, this.handler, ex);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex2) {\n\t\t\t\t\tlogger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Apply postHandle methods of registered interceptors.\n\t */\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\t\tif (getInterceptors() == null) {\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = getInterceptors().length - 1; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = getInterceptors()[i];\n\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t}\n\t}","id":5110,"modified_method":"/**\n\t * Apply postHandle methods of registered interceptors.\n\t */\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t\t}\n\t\t}\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.\n\t */\n\tvoid applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (getInterceptors() == null) {\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = getInterceptors().length - 1; i >= 0; i--) {\n\t\t\tif (interceptors[i] instanceof AsyncHandlerInterceptor) {\n\t\t\t\ttry {\n\t\t\t\t\tAsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) this.interceptors[i];\n\t\t\t\t\tasyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tlogger.error(\"Interceptor [\" + interceptors[i] + \"] failed in afterConcurrentHandlingStarted\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5111,"modified_method":"/**\n\t * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.\n\t */\n\tvoid applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\t\tif (interceptors[i] instanceof AsyncHandlerInterceptor) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tAsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i];\n\t\t\t\t\t\tasyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t\tlogger.error(\"Interceptor [\" + interceptors[i] + \"] failed in afterConcurrentHandlingStarted\", ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void addInterceptors(HandlerInterceptor[] interceptors) {\n\t\tif (interceptors != null) {\n\t\t\tinitInterceptorList();\n\t\t\tthis.interceptorList.addAll(Arrays.asList(interceptors));\n\t\t}\n\t}","id":5112,"modified_method":"public void addInterceptors(HandlerInterceptor... interceptors) {\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tinitInterceptorList().addAll(Arrays.asList(interceptors));\n\t\t}\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Before\n\tpublic void setup() {\n\t\tthis.request = new MockHttpServletRequest();\n\t\tthis.response= new MockHttpServletResponse() ;\n\n\t\tthis.handler = new Object();\n\t\tthis.chain = new HandlerExecutionChain(this.handler);\n\n\t\tthis.interceptor1 = mock(AsyncHandlerInterceptor.class);\n\t\tthis.interceptor2 = mock(AsyncHandlerInterceptor.class);\n\t\tthis.interceptor3 = mock(AsyncHandlerInterceptor.class);\n\n\t\tthis.chain.addInterceptor(this.interceptor1);\n\t\tthis.chain.addInterceptor(this.interceptor2);\n\t\tthis.chain.addInterceptor(this.interceptor3);\n\t}","id":5113,"modified_method":"@Before\n\tpublic void setup() {\n\t\tthis.request = new MockHttpServletRequest();\n\t\tthis.response= new MockHttpServletResponse() ;\n\n\t\tthis.handler = new Object();\n\t\tthis.chain = new HandlerExecutionChain(this.handler);\n\n\t\tthis.interceptor1 = mock(AsyncHandlerInterceptor.class);\n\t\tthis.interceptor2 = mock(AsyncHandlerInterceptor.class);\n\t\tthis.interceptor3 = mock(AsyncHandlerInterceptor.class);\n\n\t\tthis.chain.addInterceptor(this.interceptor1);\n\t\tthis.chain.addInterceptor(this.interceptor2);\n\t\tassertEquals(2, this.chain.getInterceptors().length);\n\t\tthis.chain.addInterceptor(this.interceptor3);\n\t\tassertEquals(3, this.chain.getInterceptors().length);\n\t}","commit_id":"6b3023c2aa76386a0d3b437d593bfd65697dc169","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public static SAbstractConcept getConcept(SNode c) {\n    if (c.getConcept().equals(SNodeUtil.concept_ConceptDeclaration)) {\n      return new SConceptAdapterById(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    if (c.getConcept().equals(SNodeUtil.concept_InterfaceConceptDeclaration)) {\n      return new SInterfaceConceptAdapterById(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    return null;\n  }","id":5114,"modified_method":"public static SAbstractConcept getConcept(SNode c) {\n    if (c.getConcept().equals(SNodeUtil.concept_ConceptDeclaration)) {\n      return MetaAdapterFactory.getConcept(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    if (c.getConcept().equals(SNodeUtil.concept_InterfaceConceptDeclaration)) {\n      return MetaAdapterFactory.getInterfaceConcept(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    return null;\n  }","commit_id":"f7181ce40f0c8a9edbc777ce8c334fd28efdf9a5","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SAbstractConcept getContainingConcept() {\n    SConceptId id = getId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","id":5115,"modified_method":"@Override\n  public SAbstractConcept getContainingConcept() {\n    SConceptId id = getId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ?\n        MetaAdapterFactory.getInterfaceConcept(id, concept.getConceptFqName()) :\n        MetaAdapterFactory.getConcept(id, concept.getConceptFqName());\n  }","commit_id":"f7181ce40f0c8a9edbc777ce8c334fd28efdf9a5","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SAbstractConcept getTargetConcept() {\n    ReferenceDescriptor rd = getReferenceDescriptor();\n    if (rd == null) return new SConceptAdapterById(SNodeUtil.conceptId_BaseConcept,SNodeUtil.conceptName_BaseConcept);\n\n    SConceptId id = rd.getTargetConcept();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","id":5116,"modified_method":"@Override\n  public SAbstractConcept getTargetConcept() {\n    ReferenceDescriptor rd = getReferenceDescriptor();\n    if (rd == null) return MetaAdapterFactory.getConcept(SNodeUtil.conceptId_BaseConcept,SNodeUtil.conceptName_BaseConcept);\n\n    SConceptId id = rd.getTargetConcept();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ?\n        MetaAdapterFactory.getInterfaceConcept(id, concept.getConceptFqName()) :\n        MetaAdapterFactory.getConcept(id, concept.getConceptFqName());\n  }","commit_id":"f7181ce40f0c8a9edbc777ce8c334fd28efdf9a5","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    SConceptId id = getRoleId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","id":5117,"modified_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    SConceptId id = getRoleId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ?\n        MetaAdapterFactory.getInterfaceConcept(id, concept.getConceptFqName()) :\n        MetaAdapterFactory.getConcept(id, concept.getConceptFqName());\n  }","commit_id":"f7181ce40f0c8a9edbc777ce8c334fd28efdf9a5","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public Iterable<SInterfaceConcept> getSuperInterfaces() {\n    ConceptDescriptor d = getConceptDescriptor();\n    if (d == null) return Collections.emptyList();\n\n    List<SInterfaceConcept> res = new ArrayList<SInterfaceConcept>();\n    for (SConceptId id : d.getParentsIds()) {\n      if (id.equals(d.getSuperConceptId())) continue;\n      res.add(new SInterfaceConceptAdapterById(id, ConceptRegistry.getInstance().getConceptDescriptor(id).getConceptFqName()));\n    }\n    return res;\n  }","id":5118,"modified_method":"@Override\n  public Iterable<SInterfaceConcept> getSuperInterfaces() {\n    ConceptDescriptor d = getConceptDescriptor();\n    if (d == null) return Collections.emptyList();\n\n    List<SInterfaceConcept> res = new ArrayList<SInterfaceConcept>();\n    for (SConceptId id : d.getParentsIds()) {\n      if (id.equals(d.getSuperConceptId())) continue;\n      String name = ConceptRegistry.getInstance().getConceptDescriptor(id).getConceptFqName();\n      res.add(MetaAdapterFactory.getInterfaceConcept(id, name));\n    }\n    return res;\n  }","commit_id":"86747ab9a154ef3206e0670d54a6ef29c96ec8df","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SConcept getSuperConcept() {\n    ConceptDescriptor d = getConceptDescriptor();\n    if (d == null) {\n      return MetaAdapterFactory.getConcept(SNodeUtil.conceptId_BaseConcept, SNodeUtil.conceptName_BaseConcept);\n    }\n\n    SConceptId superConcept = d.getSuperConceptId();\n    if (superConcept == null) return null;\n\n    return new SConceptAdapterById(superConcept, d.getSuperConcept());\n  }","id":5119,"modified_method":"@Override\n  public SConcept getSuperConcept() {\n    ConceptDescriptor d = getConceptDescriptor();\n    if (d == null) {\n      return MetaAdapterFactory.getConcept(SNodeUtil.conceptId_BaseConcept, SNodeUtil.conceptName_BaseConcept);\n    }\n\n    SConceptId superConcept = d.getSuperConceptId();\n    if (superConcept == null) return null;\n\n    return MetaAdapterFactory.getConcept(superConcept, d.getSuperConcept());\n  }","commit_id":"86747ab9a154ef3206e0670d54a6ef29c96ec8df","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SAbstractConcept getTargetConcept() {\n    LinkDescriptor ld = getLinkDescriptor();\n    if (ld == null) return new SConceptAdapterById(SNodeUtil.conceptId_BaseConcept, SNodeUtil.conceptName_BaseConcept);\n\n    SConceptId id = ld.getTargetConcept();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","id":5120,"modified_method":"@Override\n  public SAbstractConcept getTargetConcept() {\n    LinkDescriptor ld = getLinkDescriptor();\n    if (ld == null) return MetaAdapterFactory.getConcept(SNodeUtil.conceptId_BaseConcept, SNodeUtil.conceptName_BaseConcept);\n\n    SConceptId id = ld.getTargetConcept();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ?\n        MetaAdapterFactory.getInterfaceConcept(id, concept.getConceptFqName()) :\n        MetaAdapterFactory.getConcept(id, concept.getConceptFqName());\n  }","commit_id":"86747ab9a154ef3206e0670d54a6ef29c96ec8df","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    SConceptId id = getRoleId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","id":5121,"modified_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    SConceptId id = getRoleId().getConceptId();\n    ConceptDescriptor concept = ConceptRegistry.getInstance().getConceptDescriptor(id);\n    String fqName = concept.getConceptFqName();\n    return concept.isInterfaceConcept() ?\n        MetaAdapterFactory.getInterfaceConcept(id, fqName) :\n        MetaAdapterFactory.getConcept(id, fqName);\n  }","commit_id":"86747ab9a154ef3206e0670d54a6ef29c96ec8df","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n    public void shouldEncodeProperlyWithMultipleThreadsRacing() throws Throwable\n    {\n        // given\n        String[] INPUT = {\n                \"These strings need to be longer than 57 bytes, because that is the line wrapping length of BASE64.\",\n                \"This next line is also long. The number of strings in this array is the number of threads to use.\",\n                \"Each thread will get a different string as input to encode, and ensure the result is always the same.\",\n                \"Should the result of an encoding differ even once, the thread will yield a negative overall result.\",\n                \"If any of the threads yields a negative result, the test will fail, since that should not happen.\",\n                \"All threads are allowed to run together for a predetermined amount of time, to try to get contention.\",\n                \"This predetermined time is the minimum runtime of the test, since the timer starts after all threads.\",\n                \"The idea to use the input data as documentation for the test was just a cute thing I came up with.\",\n                \"Since my imagination for coming up with test data is usually poor, I figured I'd do something useful.\",\n                \"Hopefully this isn't just nonsensical drivel, and maybe, just maybe someone might actually read it.\"};\n\n        Race race = new Race( false );\n        for ( String input : INPUT )\n        {\n            final String[] inputArray = new String[] {input};\n            race.addContestant( () -> {\n                String first = ArrayEncoder.encode( inputArray );\n                for ( int i = 0; i < 1000; i++ )\n                {\n                    String encoded = ArrayEncoder.encode( inputArray );\n                    assertEquals( \"Each attempt at encoding should yield the same result. Turns out that first one was '\"\n                            + first + \"', yet another one was '\" + encoded + \"'\", first, encoded );\n                }\n            } );\n        }\n        race.go();\n    }","id":5122,"modified_method":"@Test\n    public void shouldEncodeProperlyWithMultipleThreadsRacing() throws Throwable\n    {\n        // given\n        String[] INPUT = {\n                \"These strings need to be longer than 57 bytes, because that is the line wrapping length of BASE64.\",\n                \"This next line is also long. The number of strings in this array is the number of threads to use.\",\n                \"Each thread will get a different string as input to encode, and ensure the result is always the same.\",\n                \"Should the result of an encoding differ even once, the thread will yield a negative overall result.\",\n                \"If any of the threads yields a negative result, the test will fail, since that should not happen.\",\n                \"All threads are allowed to run together for a predetermined amount of time, to try to get contention.\",\n                \"This predetermined time is the minimum runtime of the test, since the timer starts after all threads.\",\n                \"The idea to use the input data as documentation for the test was just a cute thing I came up with.\",\n                \"Since my imagination for coming up with test data is usually poor, I figured I'd do something useful.\",\n                \"Hopefully this isn't just nonsensical drivel, and maybe, just maybe someone might actually read it.\"};\n\n        Race race = new Race();\n        for ( String input : INPUT )\n        {\n            final String[] inputArray = new String[] {input};\n            race.addContestant( () -> {\n                String first = ArrayEncoder.encode( inputArray );\n                for ( int i = 0; i < 1000; i++ )\n                {\n                    String encoded = ArrayEncoder.encode( inputArray );\n                    assertEquals( \"Each attempt at encoding should yield the same result. Turns out that first one was '\"\n                            + first + \"', yet another one was '\" + encoded + \"'\", first, encoded );\n                }\n            } );\n        }\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Repeat( times = 100 )\n    @Test\n    public void shouldCopeWithConcurrentIncrementOfProcessorsAndShutdown() throws Throwable\n    {\n        // GIVEN\n        TaskExecutor<Void> executor = new DynamicTaskExecutor<>( 1, 2, 2, PARK, \"test\" );\n        Race race = new Race( true );\n        race.addContestant( () -> executor.shutdown( SF_AWAIT_ALL_COMPLETED ) );\n        race.addContestant( () -> executor.processors( 1 ) );\n\n        // WHEN\n        race.go( 10, SECONDS );\n\n        // THEN we should be able to do so, there was a recent fix here and before that fix\n        // shutdown() would hang, that's why we wait for 10 seconds here to cap it if there's an issue.\n    }","id":5123,"modified_method":"@Repeat( times = 100 )\n    @Test\n    public void shouldCopeWithConcurrentIncrementOfProcessorsAndShutdown() throws Throwable\n    {\n        // GIVEN\n        TaskExecutor<Void> executor = new DynamicTaskExecutor<>( 1, 2, 2, PARK, \"test\" );\n        Race race = new Race().withRandomStartDelays();\n        race.addContestant( () -> executor.shutdown( SF_AWAIT_ALL_COMPLETED ) );\n        race.addContestant( () -> executor.processors( 1 ) );\n\n        // WHEN\n        race.go( 10, SECONDS );\n\n        // THEN we should be able to do so, there was a recent fix here and before that fix\n        // shutdown() would hang, that's why we wait for 10 seconds here to cap it if there's an issue.\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void runTwoThreads( Consumer<TestKernelTransaction> thread1Action,\n            Consumer<TestKernelTransaction> thread2Action ) throws Throwable\n    {\n        TestKernelTransaction tx = TestKernelTransaction.create().initialize();\n        AtomicLong t1Count = new AtomicLong();\n        AtomicLong t2Count = new AtomicLong();\n        long endTime = currentTimeMillis() + TEST_RUN_TIME_MS;\n        int limit = 20_000;\n\n        Race race = new Race();\n        BooleanSupplier end = () -> ((t1Count.get() >= limit && t2Count.get() >= limit) || currentTimeMillis() >= endTime);\n        race.addContestant( until( end, () -> {\n            thread1Action.accept( tx );\n            t1Count.incrementAndGet();\n        } ) );\n        race.addContestant( until( end, () -> {\n            thread2Action.accept( tx );\n            t2Count.incrementAndGet();\n        } ) );\n        race.go();\n    }","id":5124,"modified_method":"private void runTwoThreads( Consumer<TestKernelTransaction> thread1Action,\n            Consumer<TestKernelTransaction> thread2Action ) throws Throwable\n    {\n        TestKernelTransaction tx = TestKernelTransaction.create().initialize();\n        AtomicLong t1Count = new AtomicLong();\n        AtomicLong t2Count = new AtomicLong();\n        long endTime = currentTimeMillis() + TEST_RUN_TIME_MS;\n        int limit = 20_000;\n\n        Race race = new Race();\n        race.withEndCondition(\n                () -> ((t1Count.get() >= limit && t2Count.get() >= limit) || currentTimeMillis() >= endTime) );\n        race.addContestant( () -> {\n            thread1Action.accept( tx );\n            t1Count.incrementAndGet();\n        } );\n        race.addContestant( () -> {\n            thread2Action.accept( tx );\n            t2Count.incrementAndGet();\n        } );\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void setUpgradeTransactionMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            store.setUpgradeTransaction( 0, 0, 0 );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            Race race = new Race();\n            BooleanSupplier end = () ->\n            {\n                boolean upperBoundReached = writeCount.get() >= upperLimit &&\n                        fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit;\n                boolean lowerBoundReached = writeCount.get() >= lowerLimit &&\n                        fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit;\n                return !upperBoundReached || (currentTimeMillis() >= endTime && lowerBoundReached);\n            };\n            // writers\n            race.addContestants( 3, until( end, () -> {\n                long count = writeCount.incrementAndGet();\n                store.setUpgradeTransaction( count, count, count );\n            } ) );\n\n            // file readers\n            race.addContestants( 3, until( end, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long id, checksum;\n                    do\n                    {\n                        id = store.getRecordValue( cursor, MetaDataStore.Position.UPGRADE_TRANSACTION_ID );\n                        checksum = store.getRecordValue( cursor, MetaDataStore.Position.UPGRADE_TRANSACTION_CHECKSUM );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertIdEqualsChecksum( id, checksum, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) ) );\n\n            race.addContestants( 3, until( end, () -> {\n                TransactionId transaction = store.getUpgradeTransaction();\n                assertIdEqualsChecksum( transaction.transactionId(), transaction.checksum(), \"API\" );\n                apiReadCount.incrementAndGet();\n            } ) );\n            race.go();\n        }\n    }","id":5125,"modified_method":"@Test\n    public void setUpgradeTransactionMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            store.setUpgradeTransaction( 0, 0, 0 );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            Race race = new Race();\n            race.withEndCondition( () -> writeCount.get() >= upperLimit &&\n                    fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit );\n            race.withEndCondition( () -> writeCount.get() >= lowerLimit &&\n                    fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit &&\n                    currentTimeMillis() >= endTime );\n            // writers\n            race.addContestants( 3, () -> {\n                long count = writeCount.incrementAndGet();\n                store.setUpgradeTransaction( count, count, count );\n            } );\n\n            // file readers\n            race.addContestants( 3, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long id, checksum;\n                    do\n                    {\n                        id = store.getRecordValue( cursor, MetaDataStore.Position.UPGRADE_TRANSACTION_ID );\n                        checksum = store.getRecordValue( cursor, MetaDataStore.Position.UPGRADE_TRANSACTION_CHECKSUM );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertIdEqualsChecksum( id, checksum, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) );\n\n            race.addContestants( 3, () -> {\n                TransactionId transaction = store.getUpgradeTransaction();\n                assertIdEqualsChecksum( transaction.transactionId(), transaction.checksum(), \"API\" );\n                apiReadCount.incrementAndGet();\n            } );\n            race.go();\n        }\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void transactionCommittedMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            store.transactionCommitted( 2, 2, 2 );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            BooleanSupplier end = () ->\n            {\n                boolean upperBoundReached = writeCount.get() >= upperLimit &&\n                        fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit;\n                boolean lowerBoundReached = writeCount.get() >= lowerLimit &&\n                        fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit;\n                return !upperBoundReached || (currentTimeMillis() >= endTime && lowerBoundReached);\n            };\n            Race race = new Race();\n            race.addContestants( 3, until( end, () ->\n            {\n                long count = writeCount.incrementAndGet();\n                store.transactionCommitted( count, count, count );\n            } ) );\n\n            race.addContestants( 3, until( end, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long id, checksum;\n                    do\n                    {\n                        id = store.getRecordValue( cursor, MetaDataStore.Position.LAST_TRANSACTION_ID );\n                        checksum = store.getRecordValue( cursor, MetaDataStore.Position.LAST_TRANSACTION_CHECKSUM );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertIdEqualsChecksum( id, checksum, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) ) );\n\n            race.addContestants( 3, until( end, () ->\n            {\n                TransactionId transaction = store.getLastCommittedTransaction();\n                assertIdEqualsChecksum( transaction.transactionId(), transaction.checksum(), \"API\" );\n                apiReadCount.incrementAndGet();\n            } ) );\n\n            race.go();\n        }\n    }","id":5126,"modified_method":"@Test\n    public void transactionCommittedMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            store.transactionCommitted( 2, 2, 2 );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            Race race = new Race();\n            race.withEndCondition( () -> writeCount.get() >= upperLimit &&\n                    fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit );\n            race.withEndCondition( () -> writeCount.get() >= lowerLimit &&\n                    fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit &&\n                    currentTimeMillis() >= endTime );\n            race.addContestants( 3, () ->\n            {\n                long count = writeCount.incrementAndGet();\n                store.transactionCommitted( count, count, count );\n            } );\n\n            race.addContestants( 3, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long id, checksum;\n                    do\n                    {\n                        id = store.getRecordValue( cursor, MetaDataStore.Position.LAST_TRANSACTION_ID );\n                        checksum = store.getRecordValue( cursor, MetaDataStore.Position.LAST_TRANSACTION_CHECKSUM );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertIdEqualsChecksum( id, checksum, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) );\n\n            race.addContestants( 3, () ->\n            {\n                TransactionId transaction = store.getLastCommittedTransaction();\n                assertIdEqualsChecksum( transaction.transactionId(), transaction.checksum(), \"API\" );\n                apiReadCount.incrementAndGet();\n            } );\n\n            race.go();\n        }\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void transactionClosedMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            int initialValue = 2;\n            store.transactionClosed( initialValue, initialValue, initialValue );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            BooleanSupplier end = () ->\n            {\n                boolean upperBoundReached = writeCount.get() >= upperLimit &&\n                        fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit;\n                boolean lowerBoundReached = writeCount.get() >= lowerLimit &&\n                        fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit;\n                return !upperBoundReached || (currentTimeMillis() >= endTime && lowerBoundReached);\n            };\n            Race race = new Race();\n            race.addContestants( 3, until( end, () -> {\n                long count = writeCount.incrementAndGet();\n                store.transactionCommitted( count, count, count );\n            } ) );\n\n            race.addContestants( 3, until( end, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long logVersion, byteOffset;\n                    do\n                    {\n                        logVersion = store.getRecordValue( cursor,\n                                MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n                        byteOffset = store.getRecordValue( cursor,\n                                MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertLogVersionEqualsByteOffset( logVersion, byteOffset, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) ) );\n\n            race.addContestants( 3, until( end, () -> {\n                long[] transaction = store.getLastClosedTransaction();\n                assertLogVersionEqualsByteOffset( transaction[0], transaction[1], \"API\" );\n                apiReadCount.incrementAndGet();\n            } ) );\n            race.go();\n        }\n    }","id":5127,"modified_method":"@Test\n    public void transactionClosedMustBeAtomic() throws Throwable\n    {\n        try ( MetaDataStore store = newMetaDataStore() )\n        {\n            PagedFile pf = store.storeFile;\n            int initialValue = 2;\n            store.transactionClosed( initialValue, initialValue, initialValue );\n            AtomicLong writeCount = new AtomicLong();\n            AtomicLong fileReadCount = new AtomicLong();\n            AtomicLong apiReadCount = new AtomicLong();\n            int upperLimit = 10_000;\n            int lowerLimit = 100;\n            long endTime = currentTimeMillis() + SECONDS.toMillis( 10 );\n\n            Race race = new Race();\n            race.withEndCondition( () -> writeCount.get() >= upperLimit &&\n                    fileReadCount.get() >= upperLimit && apiReadCount.get() >= upperLimit );\n            race.withEndCondition( () -> writeCount.get() >= lowerLimit &&\n                    fileReadCount.get() >= lowerLimit && apiReadCount.get() >= lowerLimit &&\n                    currentTimeMillis() >= endTime );\n            race.addContestants( 3, () -> {\n                long count = writeCount.incrementAndGet();\n                store.transactionCommitted( count, count, count );\n            } );\n\n            race.addContestants( 3, throwing( () -> {\n                try ( PageCursor cursor = pf.io( 0, PagedFile.PF_SHARED_READ_LOCK ) )\n                {\n                    assertTrue( cursor.next() );\n                    long logVersion, byteOffset;\n                    do\n                    {\n                        logVersion = store.getRecordValue( cursor,\n                                MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n                        byteOffset = store.getRecordValue( cursor,\n                                MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n                    }\n                    while ( cursor.shouldRetry() );\n                    assertLogVersionEqualsByteOffset( logVersion, byteOffset, \"file\" );\n                    fileReadCount.incrementAndGet();\n                }\n            } ) );\n\n            race.addContestants( 3, () -> {\n                long[] transaction = store.getLastClosedTransaction();\n                assertLogVersionEqualsByteOffset( transaction[0], transaction[1], \"API\" );\n                apiReadCount.incrementAndGet();\n            } );\n            race.go();\n        }\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldWriteOutThePropertyRecordBeforeReferencingItFromARelationshipRecord()\n            throws Throwable\n    {\n        final long node1Id;\n        final long node2Id;\n        try ( Transaction tx = db.beginTx() )\n        {\n            Node node1 = db.createNode();\n            node1Id = node1.getId();\n\n            Node node2 = db.createNode();\n            node2Id = node2.getId();\n\n            tx.success();\n        }\n\n        Race race = new Race();\n        final long[] latestRelationshipId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        BooleanSupplier end = () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime;\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node1 = db.getGraphDatabaseAPI().getNodeById( node1Id );\n                Node node2 = db.getGraphDatabaseAPI().getNodeById( node2Id );\n\n                Relationship rel = node1.createRelationshipTo( node2, FRIEND );\n                latestRelationshipId[0] = rel.getId();\n                rel.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } ) );\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Relationship rel = db.getGraphDatabaseAPI().getRelationshipById( latestRelationshipId[0] );\n\n                for ( String propertyKey : rel.getPropertyKeys() )\n                {\n                    rel.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                if ( Exceptions.contains( e, InvalidRecordException.class ) )\n                {\n                    throw e;\n                }\n            }\n            reads.incrementAndGet();\n        } ) );\n        race.go();\n    }","id":5128,"modified_method":"@Test\n    public void shouldWriteOutThePropertyRecordBeforeReferencingItFromARelationshipRecord()\n            throws Throwable\n    {\n        final long node1Id;\n        final long node2Id;\n        try ( Transaction tx = db.beginTx() )\n        {\n            Node node1 = db.createNode();\n            node1Id = node1.getId();\n\n            Node node2 = db.createNode();\n            node2Id = node2.getId();\n\n            tx.success();\n        }\n\n        Race race = new Race();\n        final long[] latestRelationshipId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        race.withEndCondition( () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node1 = db.getGraphDatabaseAPI().getNodeById( node1Id );\n                Node node2 = db.getGraphDatabaseAPI().getNodeById( node2Id );\n\n                Relationship rel = node1.createRelationshipTo( node2, FRIEND );\n                latestRelationshipId[0] = rel.getId();\n                rel.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Relationship rel = db.getGraphDatabaseAPI().getRelationshipById( latestRelationshipId[0] );\n\n                for ( String propertyKey : rel.getPropertyKeys() )\n                {\n                    rel.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                if ( Exceptions.contains( e, InvalidRecordException.class ) )\n                {\n                    throw e;\n                }\n            }\n            reads.incrementAndGet();\n        } );\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldWriteOutThePropertyRecordBeforeReferencingItFromANodeRecord()\n            throws Throwable\n    {\n        Race race = new Race();\n        long[] latestNodeId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        BooleanSupplier end = () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime;\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node = db.createNode();\n                latestNodeId[0] = node.getId();\n                node.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } ) );\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Node node = db.getGraphDatabaseAPI().getNodeById( latestNodeId[0] );\n\n                for ( String propertyKey : node.getPropertyKeys() )\n                {\n                    node.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                if ( Exceptions.contains( e, InvalidRecordException.class ) )\n                {\n                    throw e;\n                }\n            }\n            reads.incrementAndGet();\n        } ) );\n        race.go();\n    }","id":5129,"modified_method":"@Test\n    public void shouldWriteOutThePropertyRecordBeforeReferencingItFromANodeRecord()\n            throws Throwable\n    {\n        Race race = new Race();\n        long[] latestNodeId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        race.withEndCondition( () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node = db.createNode();\n                latestNodeId[0] = node.getId();\n                node.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Node node = db.getGraphDatabaseAPI().getNodeById( latestNodeId[0] );\n\n                for ( String propertyKey : node.getPropertyKeys() )\n                {\n                    node.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                if ( Exceptions.contains( e, InvalidRecordException.class ) )\n                {\n                    throw e;\n                }\n            }\n            reads.incrementAndGet();\n        } );\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldWriteOutTheDynamicChainBeforeUpdatingThePropertyRecord()\n            throws Throwable\n    {\n        Race race = new Race();\n        long[] latestNodeId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        BooleanSupplier end = () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime;\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node = db.createNode();\n                latestNodeId[0] = node.getId();\n                node.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } ) );\n        race.addContestant( until( end, () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Node node = db.getGraphDatabaseAPI().getNodeById( latestNodeId[0] );\n                for ( String propertyKey : node.getPropertyKeys() )\n                {\n                    node.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                // This will catch nodes not found (expected) and also PropertyRecords not found (shouldn't happen\n                // but handled in shouldWriteOutThePropertyRecordBeforeReferencingItFromANodeRecord)\n            }\n            reads.incrementAndGet();\n        } ) );\n        race.go();\n    }","id":5130,"modified_method":"@Test\n    public void shouldWriteOutTheDynamicChainBeforeUpdatingThePropertyRecord()\n            throws Throwable\n    {\n        Race race = new Race();\n        long[] latestNodeId = new long[1];\n        AtomicLong writes = new AtomicLong();\n        AtomicLong reads = new AtomicLong();\n        long endTime = currentTimeMillis() + SECONDS.toMillis( 2 );\n        race.withEndCondition( () -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.beginTx() )\n            {\n                Node node = db.createNode();\n                latestNodeId[0] = node.getId();\n                node.setProperty( \"largeProperty\", LONG_STRING_VALUE );\n                tx.success();\n            }\n            writes.incrementAndGet();\n        } );\n        race.addContestant( () ->\n        {\n            try ( Transaction tx = db.getGraphDatabaseAPI().beginTx() )\n            {\n                Node node = db.getGraphDatabaseAPI().getNodeById( latestNodeId[0] );\n                for ( String propertyKey : node.getPropertyKeys() )\n                {\n                    node.getProperty( propertyKey );\n                }\n                tx.success();\n            }\n            catch ( NotFoundException e )\n            {\n                // This will catch nodes not found (expected) and also PropertyRecords not found (shouldn't happen\n                // but handled in shouldWriteOutThePropertyRecordBeforeReferencingItFromANodeRecord)\n            }\n            reads.incrementAndGet();\n        } );\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Starts the race and waits {@code maxWaitTime} for all contestants to either fail or succeed.\n     *\n     * @param maxWaitTime max time to wait for all contestants, 0 means indefinite wait.\n     * @param unit {@link TimeUnit} that {£{@code maxWaitTime} is given in.\n     * @throws TimeoutException if all contestants haven't either succeeded or failed within the given time.\n     * @throws Throwable on any exception thrown from any contestant.\n     */\n    public void go( long maxWaitTime, TimeUnit unit ) throws Throwable\n    {\n        readySet = new CountDownLatch( contestants.size() );\n        for ( Contestant contestant : contestants )\n        {\n            contestant.start();\n        }\n        readySet.await();\n        go.countDown();\n\n        int errorCount = 0;\n        long maxWaitTimeMillis = MILLISECONDS.convert( maxWaitTime, unit );\n        long waitedSoFar = 0;\n        for ( Contestant contestant : contestants )\n        {\n            if ( maxWaitTime == 0 )\n            {\n                contestant.join();\n            }\n            else\n            {\n                if ( waitedSoFar >= maxWaitTimeMillis )\n                {\n                    throw new TimeoutException( \"Didn't complete after \" + maxWaitTime + \" \" + unit );\n                }\n                long time = currentTimeMillis();\n                contestant.join( maxWaitTimeMillis - waitedSoFar );\n                waitedSoFar += (currentTimeMillis() - time);\n            }\n            if ( contestant.error != null )\n            {\n                errorCount++;\n            }\n        }\n\n        if ( errorCount > 1 )\n        {\n            Throwable errors = new Throwable( \"Multiple errors found\" );\n            for ( Contestant contestant : contestants )\n            {\n                if ( contestant.error != null )\n                {\n                    errors.addSuppressed( contestant.error );\n                }\n            }\n            throw errors;\n        }\n        if ( errorCount == 1 )\n        {\n            for ( Contestant contestant : contestants )\n            {\n                if ( contestant.error != null )\n                {\n                    throw contestant.error;\n                }\n            }\n        }\n    }","id":5131,"modified_method":"/**\n     * Starts the race and waits {@code maxWaitTime} for all contestants to either fail or succeed.\n     *\n     * @param maxWaitTime max time to wait for all contestants, 0 means indefinite wait.\n     * @param unit {@link TimeUnit} that {£{@code maxWaitTime} is given in.\n     * @throws TimeoutException if all contestants haven't either succeeded or failed within the given time.\n     * @throws Throwable on any exception thrown from any contestant.\n     */\n    public void go( long maxWaitTime, TimeUnit unit ) throws Throwable\n    {\n        if ( endCondition == null )\n        {\n            endCondition = () -> true;\n        }\n\n        readySet = new CountDownLatch( contestants.size() );\n        for ( Contestant contestant : contestants )\n        {\n            contestant.start();\n        }\n        readySet.await();\n        go.countDown();\n\n        int errorCount = 0;\n        long maxWaitTimeMillis = MILLISECONDS.convert( maxWaitTime, unit );\n        long waitedSoFar = 0;\n        for ( Contestant contestant : contestants )\n        {\n            if ( maxWaitTime == 0 )\n            {\n                contestant.join();\n            }\n            else\n            {\n                if ( waitedSoFar >= maxWaitTimeMillis )\n                {\n                    throw new TimeoutException( \"Didn't complete after \" + maxWaitTime + \" \" + unit );\n                }\n                long time = currentTimeMillis();\n                contestant.join( maxWaitTimeMillis - waitedSoFar );\n                waitedSoFar += (currentTimeMillis() - time);\n            }\n            if ( contestant.error != null )\n            {\n                errorCount++;\n            }\n        }\n\n        if ( errorCount > 1 )\n        {\n            Throwable errors = new Throwable( \"Multiple errors found\" );\n            for ( Contestant contestant : contestants )\n            {\n                if ( contestant.error != null )\n                {\n                    errors.addSuppressed( contestant.error );\n                }\n            }\n            throw errors;\n        }\n        if ( errorCount == 1 )\n        {\n            for ( Contestant contestant : contestants )\n            {\n                if ( contestant.error != null )\n                {\n                    throw contestant.error;\n                }\n            }\n        }\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        public void run()\n        {\n            readySet.countDown();\n            try\n            {\n                go.await();\n            }\n            catch ( InterruptedException e )\n            {\n                error = e;\n                interrupt();\n                return;\n            }\n\n            if ( addSomeMinorRandomStartDelays )\n            {\n                randomlyDelaySlightly();\n            }\n\n            try\n            {\n                super.run();\n            }\n            catch ( Throwable e )\n            {\n                error = e;\n                throw e;\n            }\n        }","id":5132,"modified_method":"@Override\n        public void run()\n        {\n            readySet.countDown();\n            try\n            {\n                go.await();\n            }\n            catch ( InterruptedException e )\n            {\n                error = e;\n                interrupt();\n                return;\n            }\n\n            if ( addSomeMinorRandomStartDelays )\n            {\n                randomlyDelaySlightly();\n            }\n\n            try\n            {\n                while ( !failure )\n                {\n                    super.run();\n                    if ( endCondition.getAsBoolean() )\n                    {\n                        break;\n                    }\n                }\n            }\n            catch ( Throwable e )\n            {\n                error = e;\n                failure = true; // <-- global flag\n                throw e;\n            }\n        }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static Runnable throwing( ThrowingRunnable runnable )\n    {\n        return () ->\n        {\n            try\n            {\n                runnable.run();\n            }\n            catch ( Throwable e )\n            {\n                throw Exceptions.launderedException( e );\n            }\n        };\n    }","id":5133,"modified_method":"/**\n     * Convenience for wrapping contestants, especially for lambdas, which throws any sort of\n     * checked exception.\n     *\n     * @param runnable actual contestant.\n     * @return contestant wrapped in a try-catch (and re-throw as unchecked exception).\n     */\n    public static Runnable throwing( ThrowingRunnable runnable )\n    {\n        return () ->\n        {\n            try\n            {\n                runnable.run();\n            }\n            catch ( Throwable e )\n            {\n                throw Exceptions.launderedException( e );\n            }\n        };\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"Contestant( Runnable code, int nr )\n        {\n            super( code, \"Contestant#\" + nr );\n        }","id":5134,"modified_method":"Contestant( Runnable code, int nr )\n        {\n            super( code, \"Contestant#\" + nr );\n            this.setUncaughtExceptionHandler( (thread,error) -> {} );\n        }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void tryOnce( final GraphDatabaseAPI db, final Node node ) throws Throwable\n    {\n        Race race = new Race( true );\n        race.addContestants( Runtime.getRuntime().availableProcessors(), () -> {\n            try ( Transaction ignored = db.beginTx() )\n            {\n                assertEquals( relCount, count( node.getRelationships() ) );\n            }\n        } );\n        race.go();\n    }","id":5135,"modified_method":"private void tryOnce( final GraphDatabaseAPI db, final Node node ) throws Throwable\n    {\n        Race race = new Race().withRandomStartDelays();\n        race.addContestants( Runtime.getRuntime().availableProcessors(), () -> {\n            try ( Transaction ignored = db.beginTx() )\n            {\n                assertEquals( relCount, count( node.getRelationships() ) );\n            }\n        } );\n        race.go();\n    }","commit_id":"321846e9c1416ab29b7d37dcb7024f2ebd2a8562","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n  public int getVersion() {\n    return 0;\n  }","id":5136,"modified_method":"@Override\n  public int getVersion() {\n    return 1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_yxkngc_b0a0a5a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9b63680L, \"jetbrains.mps.lang.smodel.structure.SConceptType\"), null, null, false);\n    return quotedNode_1;\n  }","id":5137,"modified_method":"private static SNode _quotation_createNode_yxkngc_b0a0a5a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d94c0cdL, \"jetbrains.mps.lang.smodel.structure.SModelType\"), null, null, false);\n    return quotedNode_1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@CheckingMethod\n  public static void checkAppliedCorrectly_generic(final TypeCheckingContext typeCheckingContext, final SNode op) {\n    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, \"jetbrains.mps.lang.smodel.structure.SNodeOperation\"))) {\n      // don't check - it is red anyway \n      return;\n    }\n    final SNode leftExpression = SNodeOperation_Behavior.call_getLeftExpression_1213877508894(op);\n    SNode LeftType = TypeChecker.getInstance().getTypeOf(leftExpression);\n    boolean isGood = false;\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToModel_1262430001741492322\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a4a0(), false)) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToConcept_1262430001741498358\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a5a0())) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToSConcept_8828148184963745087\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a6a0())) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToNode_1262430001741498076\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a7a0(), false)) {\n        isGood = true;\n      }\n    }\n    // =========== \n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToLink_1262430001741498352\", new Object[]{})) {\n      SNode linkAccess = SNodeOperations.as(SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x37d97a5712d396cbL, \"jetbrains.mps.lang.smodel.structure.ILinkAccess\"));\n      if (linkAccess != null) {\n        isGood = BehaviorReflection.invokeVirtual(Boolean.TYPE, linkAccess, \"virtual_isSingularCardinality_4024382256428848847\", new Object[]{});\n        if (isGood) {\n          // some of ops applicable to 'link' require left-expr to be a concept \n          if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToConcept_1262430001741498358\", new Object[]{}) && !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToNode_1262430001741498076\", new Object[]{}))) {\n            isGood = TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a0b0b0b0j0a());\n          }\n        }\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToLinkList_1262430001741498382\", new Object[]{})) {\n      SNode linkAccess = SNodeOperations.as(SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x37d97a5712d396cbL, \"jetbrains.mps.lang.smodel.structure.ILinkAccess\"));\n      if (linkAccess != null) {\n        isGood = !(BehaviorReflection.invokeVirtual(Boolean.TYPE, linkAccess, \"virtual_isSingularCardinality_4024382256428848847\", new Object[]{}));\n      }\n    }\n    // =========== \n    SNode leftOperation = SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op);\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToSimpleProperty_1262430001741498100\", new Object[]{})) {\n      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(leftOperation)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\"))) {\n        SNode propertyDecl = SLinkOperations.getTarget(SNodeOperations.cast(leftOperation, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\")), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, 0x108f9727bcdL, \"property\"));\n        if (DataTypeDeclaration_Behavior.call_isSimple_1220268671473(SLinkOperations.getTarget(propertyDecl, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, \"dataType\")))) {\n          isGood = true;\n        }\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToEnumProperty_1262430001741498259\", new Object[]{})) {\n      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(leftOperation)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\"))) {\n        SNode propertyDecl = SLinkOperations.getTarget(SNodeOperations.cast(leftOperation, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\")), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, 0x108f9727bcdL, \"property\"));\n        if (DataTypeDeclaration_Behavior.call_isEnum_1220268692373(SLinkOperations.getTarget(propertyDecl, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, \"dataType\")))) {\n          isGood = true;\n        }\n      }\n    }\n    if (!(isGood)) {\n      MessageTarget errorTarget = new NodeMessageTarget();\n      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(op, \"operation is not applicable to \" + LeftType, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"1186067417054\", null, errorTarget);\n    }\n  }","id":5138,"modified_method":"@CheckingMethod\n  public static void checkAppliedCorrectly_generic(final TypeCheckingContext typeCheckingContext, final SNode op) {\n    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, \"jetbrains.mps.lang.smodel.structure.SNodeOperation\"))) {\n      // don't check - it is red anyway \n      return;\n    }\n    if (!(SNodeOperations.hasRole(op, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\")))) {\n      // don't check - is may be quotation \n      return;\n    }\n    final SNode leftExpression = SNodeOperation_Behavior.call_getLeftExpression_1213877508894(op);\n    SNode LeftType = TypeChecker.getInstance().getTypeOf(leftExpression);\n    boolean isGood = false;\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToModel_1262430001741492322\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a5a0(), false)) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToConcept_1262430001741498358\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a6a0())) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToSConcept_8828148184963745087\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a7a0())) {\n        isGood = true;\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToNode_1262430001741498076\", new Object[]{})) {\n      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a8a0(), false)) {\n        isGood = true;\n      }\n    }\n    // =========== \n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToLink_1262430001741498352\", new Object[]{})) {\n      SNode linkAccess = SNodeOperations.as(SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x37d97a5712d396cbL, \"jetbrains.mps.lang.smodel.structure.ILinkAccess\"));\n      if (linkAccess != null) {\n        isGood = BehaviorReflection.invokeVirtual(Boolean.TYPE, linkAccess, \"virtual_isSingularCardinality_4024382256428848847\", new Object[]{});\n        if (isGood) {\n          // some of ops applicable to 'link' require left-expr to be a concept \n          if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToConcept_1262430001741498358\", new Object[]{}) && !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_applicableToNode_1262430001741498076\", new Object[]{}))) {\n            isGood = TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType, _quotation_createNode_yxkngc_b0a0a0b0b0b0k0a());\n          }\n        }\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToLinkList_1262430001741498382\", new Object[]{})) {\n      SNode linkAccess = SNodeOperations.as(SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x37d97a5712d396cbL, \"jetbrains.mps.lang.smodel.structure.ILinkAccess\"));\n      if (linkAccess != null) {\n        isGood = !(BehaviorReflection.invokeVirtual(Boolean.TYPE, linkAccess, \"virtual_isSingularCardinality_4024382256428848847\", new Object[]{}));\n      }\n    }\n    // =========== \n    SNode leftOperation = SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op);\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToSimpleProperty_1262430001741498100\", new Object[]{})) {\n      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(leftOperation)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\"))) {\n        SNode propertyDecl = SLinkOperations.getTarget(SNodeOperations.cast(leftOperation, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\")), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, 0x108f9727bcdL, \"property\"));\n        if (DataTypeDeclaration_Behavior.call_isSimple_1220268671473(SLinkOperations.getTarget(propertyDecl, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, \"dataType\")))) {\n          isGood = true;\n        }\n      }\n    }\n    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_applicableToEnumProperty_1262430001741498259\", new Object[]{})) {\n      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(leftOperation)), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\"))) {\n        SNode propertyDecl = SLinkOperations.getTarget(SNodeOperations.cast(leftOperation, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, \"jetbrains.mps.lang.smodel.structure.SPropertyAccess\")), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, 0x108f9727bcdL, \"property\"));\n        if (DataTypeDeclaration_Behavior.call_isEnum_1220268692373(SLinkOperations.getTarget(propertyDecl, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, \"dataType\")))) {\n          isGood = true;\n        }\n      }\n    }\n    if (!(isGood)) {\n      MessageTarget errorTarget = new NodeMessageTarget();\n      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(op, \"operation is not applicable to \" + LeftType, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"1186067417054\", null, errorTarget);\n    }\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@CheckingMethod\n  public static boolean checkOpParameters_generic(final TypeCheckingContext typeCheckingContext, SNode op) {\n    boolean noProblem = true;\n    List<SNode> applicableParmConcepts = BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(op)), \"virtual_getApplicableParameter_3044950653914717056\", new Object[]{});\n    for (SNode parm : ListSequence.fromList(SLinkOperations.getChildren(op, MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, 0x10a61ef5a56L, \"parameter\")))) {\n      if (!(ListSequence.fromList(applicableParmConcepts).contains(SNodeOperations.getConceptDeclaration(parm)))) {\n        {\n          MessageTarget errorTarget = new NodeMessageTarget();\n          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parm, \"not applicable here\", \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"1178302007667\", null, errorTarget);\n        }\n        noProblem = false;\n      }\n    }\n    return noProblem;\n  }","id":5139,"modified_method":"@CheckingMethod\n  public static boolean checkOpParameters_generic(final TypeCheckingContext typeCheckingContext, SNode op) {\n    boolean noProblem = true;\n    List<SNode> applicableParmConcepts = BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.asSConcept(SNodeOperations.getConcept(op)), \"virtual_getApplicableParameter_3044950653914717056\", new Object[]{});\n    for (SNode parm : ListSequence.fromList(SLinkOperations.getChildren(op, MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, 0x10a61ef5a56L, \"parameter\")))) {\n      if (!(ListSequence.fromList(applicableParmConcepts).contains(SNodeOperations.getConceptDeclaration(parm)))) {\n        {\n          MessageTarget errorTarget = new NodeMessageTarget();\n          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(parm, \"not applicable here\", \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"1178302007667\", null, errorTarget);\n        }\n        noProblem = false;\n      }\n    }\n    return noProblem;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_yxkngc_b0a0a7a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f968b3caL, \"jetbrains.mps.lang.smodel.structure.SNodeType\"), null, null, false);\n    return quotedNode_1;\n  }","id":5140,"modified_method":"private static SNode _quotation_createNode_yxkngc_b0a0a7a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, \"jetbrains.mps.lang.smodel.structure.SConceptTypeSConcept\"), null, null, false);\n    return quotedNode_1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_yxkngc_b0a0a0b0b0b0j0a() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, \"jetbrains.mps.lang.smodel.structure.SConceptTypeSConcept\"), null, null, false);\n    return quotedNode_1;\n  }","id":5141,"modified_method":"private static SNode _quotation_createNode_yxkngc_b0a0a0b0b0b0k0a() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, \"jetbrains.mps.lang.smodel.structure.SConceptTypeSConcept\"), null, null, false);\n    return quotedNode_1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_yxkngc_b0a0a6a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, \"jetbrains.mps.lang.smodel.structure.SConceptTypeSConcept\"), null, null, false);\n    return quotedNode_1;\n  }","id":5142,"modified_method":"private static SNode _quotation_createNode_yxkngc_b0a0a6a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9b63680L, \"jetbrains.mps.lang.smodel.structure.SConceptType\"), null, null, false);\n    return quotedNode_1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_yxkngc_b0a0a4a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d94c0cdL, \"jetbrains.mps.lang.smodel.structure.SModelType\"), null, null, false);\n    return quotedNode_1;\n  }","id":5143,"modified_method":"private static SNode _quotation_createNode_yxkngc_b0a0a8a0() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f968b3caL, \"jetbrains.mps.lang.smodel.structure.SNodeType\"), null, null, false);\n    return quotedNode_1;\n  }","commit_id":"d54c9adeeb8ba40f84e6cd9c9847283a27abbc1a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void readExternal(Element parentNode) throws InvalidDataException {\n    myOrder.clear();\n    for (Iterator iterator = parentNode.getChildren(ELEMENT_TARGET).iterator(); iterator.hasNext();) {\n      Element element = (Element)iterator.next();\n      myOrder.add(element.getAttributeValue(ATTRIBUTE_NAME));\n    }\n  }","id":5144,"modified_method":"public void readExternal(Element parentNode) throws InvalidDataException {\n    myOrder.clear();\n    for (Element element : (List<Element>)parentNode.getChildren(ELEMENT_TARGET)) {\n      myOrder.add(element.getAttributeValue(ATTRIBUTE_NAME));\n    }\n  }","commit_id":"85e6a67a68b84e25edc96184cee72bf10fe7535d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void writeExternal(Element parentNode) throws WriteExternalException {\n    for (Iterator iterator = myOrder.iterator(); iterator.hasNext();) {\n      String targetName = (String)iterator.next();\n      Element e = new Element(ELEMENT_TARGET);\n      e.setAttribute(ATTRIBUTE_NAME, targetName);\n      parentNode.addContent(e);\n    }\n  }","id":5145,"modified_method":"public void writeExternal(Element parentNode) throws WriteExternalException {\n    for (String targetName : myOrder) {\n      Element e = new Element(ELEMENT_TARGET);\n      e.setAttribute(ATTRIBUTE_NAME, targetName);\n      parentNode.addContent(e);\n    }\n  }","commit_id":"85e6a67a68b84e25edc96184cee72bf10fe7535d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void readExternal(Element element) throws InvalidDataException{\n    mySelectedIndex=0;\n    try{\n      mySelectedIndex=Integer.parseInt(element.getAttributeValue(ATTRIBUTE_SELECTED_INDEX));\n    }catch(NumberFormatException ignored){}\n\n    for(Iterator i=element.getChildren().iterator();i.hasNext();){\n      Element child=(Element)i.next();\n      if(ELEMENT_TODO_PANEL.equals(child.getName())){\n        String id=child.getAttributeValue(ATTRIBUTE_ID);\n        if(VALUE_SELECTED_FILE.equals(id)){\n          myCurrentPanelSettings.readExternal(child);\n        }\n        else if(VALUE_ALL.equals(id)){\n          myAllPanelSettings.readExternal(child);\n        }\n        else{\n          throw new IllegalArgumentException(\"unknown id: \"+id);\n        }\n      }\n    }\n  }","id":5146,"modified_method":"public void readExternal(Element element) throws InvalidDataException{\n    mySelectedIndex=0;\n    try{\n      mySelectedIndex=Integer.parseInt(element.getAttributeValue(ATTRIBUTE_SELECTED_INDEX));\n    }catch(NumberFormatException ignored){\n      //nothing to be done\n    }\n\n    //noinspection unchecked\n    for (Element child : (Iterable<Element>)element.getChildren()) {\n      if (ELEMENT_TODO_PANEL.equals(child.getName())) {\n        String id = child.getAttributeValue(ATTRIBUTE_ID);\n        if (VALUE_SELECTED_FILE.equals(id)) {\n          myCurrentPanelSettings.readExternal(child);\n        }\n        else if (VALUE_ALL.equals(id)) {\n          myAllPanelSettings.readExternal(child);\n        }\n        else {\n          throw new IllegalArgumentException(\"unknown id: \" + id);\n        }\n      }\n    }\n  }","commit_id":"f1b41892e688f15e4f2450bf48784bc3975b30ff","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void fileTypesChanged(FileTypeEvent e){\n      // this invokeLater guaranties that this code will be invoked after\n      // PSI gets the same event.\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        public void run() {\n          ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){\n            public void run(){\n              if (myAllTodos == null) return;\n\n              ApplicationManager.getApplication().runReadAction(\n                new Runnable(){\n                  public void run(){\n                    myAllTodos.rebuildCache();\n                    myCurrentFileTodos.rebuildCache();\n                  }\n                }\n              );\n              ApplicationManager.getApplication().invokeLater(new Runnable(){\n                public void run(){\n                  myAllTodos.updateTree();\n                  myCurrentFileTodos.updateTree();\n                }\n              }, ModalityState.NON_MMODAL);\n            }\n          }, IdeBundle.message(\"progress.looking.for.todos\"), false, myProject);\n        }\n      });\n    }","id":5147,"modified_method":"public void fileTypesChanged(FileTypeEvent e){\n      // this invokeLater guaranties that this code will be invoked after\n      // PSI gets the same event.\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        public void run() {\n          if (myProject.isDisposed()) return;\n\n          ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){\n            public void run(){\n              if (myAllTodos == null) return;\n\n              ApplicationManager.getApplication().runReadAction(\n                new Runnable(){\n                  public void run(){\n                    myAllTodos.rebuildCache();\n                    myCurrentFileTodos.rebuildCache();\n                  }\n                }\n              );\n              ApplicationManager.getApplication().invokeLater(new Runnable(){\n                public void run(){\n                  myAllTodos.updateTree();\n                  myCurrentFileTodos.updateTree();\n                }\n              }, ModalityState.NON_MMODAL);\n            }\n          }, IdeBundle.message(\"progress.looking.for.todos\"), false, myProject);\n        }\n      });\n    }","commit_id":"f1b41892e688f15e4f2450bf48784bc3975b30ff","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void writeExternal(Element element) throws WriteExternalException {\n    DefaultJDOMExternalizer.writeExternal(this, element);\n    for (Iterator each = CONFIGURATIONS.iterator(); each.hasNext();) {\n      createConfigurationElement((CvsRootConfiguration)each.next(), element);\n    }\n  }","id":5148,"modified_method":"public void writeExternal(Element element) throws WriteExternalException {\n    DefaultJDOMExternalizer.writeExternal(this, element);\n    for (CvsRootConfiguration configuration : CONFIGURATIONS) {\n      createConfigurationElement(configuration, element);\n    }\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getPathToPassFile() {\n    return convertToIOFilePath(getPathToPassFilePresentation());\n  }","id":5149,"modified_method":"public File getPassFile() {\n    return new File(convertToIOFilePath(getPathToPassFilePresentation()));\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void updateConfigurations() {\n    final File passFile = new File(getPathToPassFile());\n    if (passFile.isFile()) {\n      try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(passFile)));\n        try {\n          String line;\n          while ((line = reader.readLine()) != null) {\n            if (line.startsWith(\"/1 \")) {\n              line = line.substring(3);\n            }\n            final int sepPosition = line.indexOf(' ');\n            if (sepPosition > 0) {\n              final String cvsRoot = line.substring(0, sepPosition);\n              tryToAddNewRoot(cvsRoot);\n            }\n          }\n\n        } finally {\n          reader.close();\n        }\n      } catch (IOException e) {\n        //ignore\n      }\n\n    }\n  }","id":5150,"modified_method":"private void updateConfigurations() {\n    final File passFile = getPassFile();\n    if (!passFile.isFile()) {\n      return;\n    }\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(passFile)));\n      try {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"/1 \")) {\n            line = line.substring(3);\n          }\n          final int sepPosition = line.indexOf(' ');\n          if (sepPosition > 0) {\n            final String cvsRoot = line.substring(0, sepPosition);\n            tryToAddNewRoot(cvsRoot);\n          }\n        }\n      } finally {\n        reader.close();\n      }\n    } catch (IOException e) {\n      //ignore\n    }\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void readExternal(Element element) throws InvalidDataException {\n    DefaultJDOMExternalizer.readExternal(this, element);\n    for (Iterator each = element.getChildren(CONFIGURATION_ELEMENT_NAME).iterator(); each.hasNext();) {\n      Element child = (Element)each.next();\n      CONFIGURATIONS.add(createConfigurationOn(child));\n    }\n\n    if (!encodingExists(ENCODING)) {\n      ENCODING = DEFAULT;\n    }\n\n    updateConfigurations();\n\n  }","id":5151,"modified_method":"public void readExternal(Element element) throws InvalidDataException {\n    DefaultJDOMExternalizer.readExternal(this, element);\n    for (Element child : (Iterable<Element>)element.getChildren(CONFIGURATION_ELEMENT_NAME)) {\n      CONFIGURATIONS.add(createConfigurationOn(child));\n    }\n\n    if (!encodingExists(ENCODING)) {\n      ENCODING = DEFAULT;\n    }\n\n    updateConfigurations();\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CvsRootConfiguration getConfigurationForCvsRoot(String root) {\n    for (Iterator each = CONFIGURATIONS.iterator(); each.hasNext();) {\n      CvsRootConfiguration cvsRootConfiguration = (CvsRootConfiguration)each.next();\n      if (cvsRootConfiguration.getCvsRootAsString().equals(root)) {\n        return cvsRootConfiguration;\n      }\n    }\n    CvsRootConfiguration newConfig = createNewConfiguration(this);\n    newConfig.CVS_ROOT = root;\n    CONFIGURATIONS.add(newConfig);\n    return newConfig;\n\n  }","id":5152,"modified_method":"public CvsRootConfiguration getConfigurationForCvsRoot(String root) {\n    for (CvsRootConfiguration cvsRootConfiguration : CONFIGURATIONS) {\n      if (cvsRootConfiguration.getCvsRootAsString().equals(root)) {\n        return cvsRootConfiguration;\n      }\n    }\n    CvsRootConfiguration newConfig = createNewConfiguration(this);\n    newConfig.CVS_ROOT = root;\n    CONFIGURATIONS.add(newConfig);\n    return newConfig;\n\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean encodingExists(String encoding) {\n    final Charset[] availableCharsets = CharsetToolkit.getAvailableCharsets();\n    for (int i = 0; i < availableCharsets.length; i++) {\n      Charset availableCharset = availableCharsets[i];\n      if (availableCharset.name().equals(encoding)) {\n        return true;\n      }\n    }\n    return false;\n  }","id":5153,"modified_method":"private static boolean encodingExists(String encoding) {\n    final Charset[] availableCharsets = CharsetToolkit.getAvailableCharsets();\n    for (Charset availableCharset : availableCharsets) {\n      if (availableCharset.name().equals(encoding)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getPathToPassFilePresentation() {\n    if (!passFileExists()) {\n      PATH_TO_PASSWORD_FILE = defaultPathToPassFile();\n    }\n    return PATH_TO_PASSWORD_FILE;\n  }","id":5154,"modified_method":"public String getPathToPassFilePresentation() {\n    if (!passFileExists()) {\n      PATH_TO_PASSWORD_FILE = \"$userdir\" + \"/.cvspass\";\n    }\n    return PATH_TO_PASSWORD_FILE;\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static String convertToIOFilePath(String presentation) {\n    String userHome = System.getProperty(USER_HOME_PROPERTY);\n    userHome = userHome.replace(File.separatorChar, '/');\n    presentation = presentation.replace(File.separatorChar, '/');\n    try {\n      String result = StringUtil.replace(presentation, \"$userdir\", userHome);\n      result = result.replace('/', File.separatorChar);\n      return result;\n    }\n    catch (Exception ex) {\n      LOG.error(\"userHome = \" + userHome + \", presenation = \" + presentation);\n      return \"\";\n    }\n  }","id":5155,"modified_method":"public static String convertToIOFilePath(String presentation) {\n    String userHome = SystemProperties.getUserHome().replace(File.separatorChar, '/');\n    presentation = presentation.replace(File.separatorChar, '/');\n    try {\n      String result = StringUtil.replace(presentation, \"$userdir\", userHome);\n      result = result.replace('/', File.separatorChar);\n      return result;\n    }\n    catch (Exception ex) {\n      LOG.error(\"userHome = \" + userHome + \", presentation = \" + presentation);\n      return \"\";\n    }\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void tryConnection() throws AuthenticationException {\n      IConnection connection = mySettings.createConnection(new ReadWriteStatistics());\n      try {\n        connection.open(new StreamLogger());\n        mySettings.setOffline(false);\n      } catch (AuthenticationException e) {\n        if (e instanceof UnknownUserException) {\n          throw new SolveableAuthenticationException(e.getMessage(), e);\n        } else {\n          throw e;\n        }\n      } finally {\n        try {\n          connection.close();\n        }\n        catch (IOException e) {\n          // ignore\n        }\n      }\n    }","id":5156,"modified_method":"private void tryConnection() throws AuthenticationException {\n      IConnection connection = mySettings.createConnection(new ReadWriteStatistics());\n      try {\n        connection.open(new StreamLogger());\n        mySettings.setOffline(false);\n      }\n      catch (UnknownUserException e) {\n        throw new SolveableAuthenticationException(e.getMessage(), e);\n      }\n      finally {\n        try {\n          connection.close();\n        }\n        catch (IOException e) {\n          // ignore\n        }\n      }\n    }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public boolean promptForPassword() {\n      final String cvsRoot = mySettings.getCvsRootAsString();\n      final String password = requestForPassword(cvsRoot);\n      if (password == null) return false;\n      removeAllPasswordsForThisCvsRootFromPasswordFile(cvsRoot);\n      try {\n        storePassword(cvsRoot, password);\n      } catch (IOException e) {\n        showConnectionErrorMessage(myProject, CvsBundle.message(\"error.message.cannot.store.password\", e.getLocalizedMessage()));\n        return false;\n      }\n      mySettings.storePassword(password);\n      return true;\n    }","id":5157,"modified_method":"@Override\n    public boolean promptForPassword() {\n      final String cvsRoot = mySettings.getCvsRootAsString();\n      final String password = requestForPassword(cvsRoot);\n      if (password == null) return false;\n      try {\n        removeAllPasswordsForThisCvsRootFromPasswordFile(cvsRoot);\n        storePassword(cvsRoot, password);\n      }\n      catch (IOException e) {\n        showConnectionErrorMessage(myProject, CvsBundle.message(\"error.message.cannot.store.password\", e.getLocalizedMessage()));\n        return false;\n      }\n      mySettings.storePassword(password);\n      return true;\n    }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static String getPassword(String config) {\n    File passFile = getPassFile();\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(passFile)));\n      try {\n        return findPasswordIn(reader, config);\n      } finally {\n        reader.close();\n      }\n    } catch (IOException e) {\n      return null;\n    }\n  }","id":5158,"modified_method":"@Nullable\n  private static String getPassword(String config) {\n    File passFile = getPassFile();\n    try {\n      BufferedReader reader =\n        new BufferedReader(new InputStreamReader(new FileInputStream(passFile), CvsApplicationLevelConfiguration.getCharset()));\n      try {\n        return findPasswordIn(reader, config);\n      }\n      finally {\n        reader.close();\n      }\n    }\n    catch (IOException e) {\n      return null;\n    }\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static File getPassFile() {\n    return new File(CvsApplicationLevelConfiguration.getInstance().getPathToPassFile());\n  }","id":5159,"modified_method":"private static File getPassFile() {\n    return CvsApplicationLevelConfiguration.getInstance().getPassFile();\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void removeAllPasswordsForThisCvsRootFromPasswordFile(String cvsRoot) {\n    File passFile = getPassFile();\n    if (passFile == null) return;\n    if (!passFile.isFile()) return;\n\n    ArrayList<String> lines = readConfigurationNotMatchedWith(cvsRoot, passFile);\n\n    try {\n      CvsFileUtil.storeLines(lines, passFile);\n    } catch (IOException e) {\n      LOG.error(e);\n    }\n  }","id":5160,"modified_method":"private static void removeAllPasswordsForThisCvsRootFromPasswordFile(String cvsRoot) throws IOException {\n    File passFile = getPassFile();\n    if (!passFile.isFile()) return;\n\n    List<String> lines = CvsFileUtil.readLinesFrom(passFile, cvsRoot);\n    try {\n      CvsFileUtil.storeLines(lines, passFile);\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"ace95c3b5a50816f15e1175c9585975ccbbf38ec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void loadKeymapsFromElement(final Element element) throws InvalidDataException {\n    for (Iterator i = element.getChildren().iterator(); i.hasNext();) {\n      Element child=(Element)i.next();\n      if (KEY_MAP.equals(child.getName())) {\n        String keymapName = child.getAttributeValue(NAME_ATTRIBUTE);\n        DefaultKeymapImpl keymap = KeymapManager.MAC_OS_X_KEYMAP.equals(keymapName)\n                                   ? new MacOSDefaultKeymap()\n                                   : new DefaultKeymapImpl();\n        keymap.readExternal(child, myKeymaps.toArray(new Keymap[myKeymaps.size()]));\n        keymap.setName(keymapName);\n        myKeymaps.add(keymap);\n      }\n    }\n  }","id":5161,"modified_method":"private void loadKeymapsFromElement(final Element element) throws InvalidDataException {\n    for (Element child : (List<Element>)element.getChildren()) {\n      if (KEY_MAP.equals(child.getName())) {\n        String keymapName = child.getAttributeValue(NAME_ATTRIBUTE);\n        DefaultKeymapImpl keymap = KeymapManager.MAC_OS_X_KEYMAP.equals(keymapName) ? new MacOSDefaultKeymap() : new DefaultKeymapImpl();\n        keymap.readExternal(child, myKeymaps.toArray(new Keymap[myKeymaps.size()]));\n        keymap.setName(keymapName);\n        myKeymaps.add(keymap);\n      }\n    }\n  }","commit_id":"87fcdcd37f8885076bbb4e8de1fa8cec87cf8993","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static DefaultKeymap getInstance() {\n    return ApplicationManager.getApplication().getComponent(DefaultKeymap.class);\n  }","id":5162,"modified_method":"public static DefaultKeymap getInstance() {\n    return ServiceManager.getService(DefaultKeymap.class);\n  }","commit_id":"87fcdcd37f8885076bbb4e8de1fa8cec87cf8993","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String adjustRepository(CvsRootData root) {\n    if (root.REPOSITORY != null) {\n      return root.REPOSITORY.replace('\\\\', '/');\n    } else {\n      return null;\n    }\n  }","id":5163,"modified_method":"private static String adjustRepository(CvsRootData root) {\n    return (root.REPOSITORY != null) ? root.REPOSITORY.replace('\\\\', '/') : null;\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String getUserName(CvsRootData settings) {\n    final String login;\n    if (settings.USER.isEmpty()) {\n      login = SystemProperties.getUserName();\n    } else {\n      login = settings.USER;\n    }\n    return login;\n  }","id":5164,"modified_method":"private static String getUserName(CvsRootData settings) {\n    return settings.USER.isEmpty() ? SystemProperties.getUserName() : settings.USER;\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IConnection createSshConnection(final CvsRootData settings,\n                                                final SshSettings sshConfiguration,\n                                                final ProxySettings proxySettings,\n                                                final SSHPasswordProvider sshPasswordProvider,\n                                                final int timeout) {\n    ConnectionSettingsImpl connectionSettings = new ConnectionSettingsImpl(settings.HOST,\n                                                                           settings.PORT,\n                                                                           proxySettings.USE_PROXY,\n                                                                           proxySettings.PROXY_HOST,\n                                                                           proxySettings.PROXY_PORT,\n                                                                           timeout,\n                                                                           proxySettings.getType(),\n                                                                           proxySettings.getLogin(),\n                                                                           proxySettings.getPassword());\n    final ConnectionPoolI pool = SshConnectionPool.getInstance();\n    final SshAuthentication authentication;\n    if (sshConfiguration.USE_PPK) {\n      authentication = new SshPublicKeyAuthentication(new File(sshConfiguration.PATH_TO_PPK), getUserName(settings), sshPasswordProvider,\n                                                      settings.getCvsRootAsString());\n    }\n    else {\n      authentication = new SshPasswordAuthentication(getUserName(settings), sshPasswordProvider, settings.getCvsRootAsString());\n    }\n    return pool.getConnection(settings.REPOSITORY, connectionSettings, authentication);\n  }","id":5165,"modified_method":"public static IConnection createSshConnection(final CvsRootData settings,\n                                                final SshSettings sshConfiguration,\n                                                final ProxySettings proxySettings,\n                                                final SSHPasswordProvider sshPasswordProvider,\n                                                final int timeout) {\n    ConnectionSettingsImpl connectionSettings = new ConnectionSettingsImpl(settings.HOST,\n                                                                           settings.PORT,\n                                                                           proxySettings.USE_PROXY,\n                                                                           proxySettings.PROXY_HOST,\n                                                                           proxySettings.PROXY_PORT,\n                                                                           timeout,\n                                                                           proxySettings.getType(),\n                                                                           proxySettings.getLogin(),\n                                                                           proxySettings.getPassword());\n    final SshAuthentication authentication;\n    if (sshConfiguration.USE_PPK) {\n      authentication = new SshPublicKeyAuthentication(new File(sshConfiguration.PATH_TO_PPK), getUserName(settings), sshPasswordProvider,\n                                                      settings.getCvsRootAsString());\n    }\n    else {\n      authentication = new SshPasswordAuthentication(getUserName(settings), sshPasswordProvider, settings.getCvsRootAsString());\n    }\n    return SshConnectionPool.getInstance().getConnection(settings.REPOSITORY, connectionSettings, authentication);\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n  private void check(ICvsCommandStopper stopper, String expectedResult) throws IOException, AuthenticationException {\n    InputStreamWrapper streamWrapper = new InputStreamWrapper(myInputStream, stopper, new ReadWriteStatistics());\n    try {\n      int i;\n      StringBuffer buffer = new StringBuffer();\n      while (true) {\n        i = streamWrapper.read();\n        if (i == -1 || i == '\\n' || i == ' ' || i == '\\r') break;\n        buffer.append((char)i);\n      }\n      String read = buffer.toString().trim();\n      if (!expectedResult.equals(read)) {\n        if (StringUtil.startsWithConcatenationOf(read, myUserName + \"@\", myHost)) {\n          throw new AuthenticationException(CvsBundle.message(\"exception.text.ext.server.rejected.access\"), null);\n        }\n        else {\n          if (myErrorText.length() > 0) {\n            throw new AuthenticationException(myErrorText.toString(), null);\n          }\n          else {\n            throw new AuthenticationException(CvsBundle.message(\"exception.text.ext.cannot.establish.external.connection\"), null);\n          }\n        }\n      }\n    }\n    finally {\n      streamWrapper.close();\n    }\n  }","id":5166,"modified_method":"@SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n  private void check(ICvsCommandStopper stopper, String expectedResult) throws IOException, AuthenticationException {\n    InputStreamWrapper streamWrapper = new InputStreamWrapper(myInputStream, stopper, new ReadWriteStatistics());\n    try {\n      int i;\n      StringBuilder buffer = new StringBuilder();\n      while (true) {\n        i = streamWrapper.read();\n        if (i == -1 || i == '\\n' || i == ' ' || i == '\\r') break;\n        buffer.append((char)i);\n      }\n      String read = buffer.toString().trim();\n      if (!expectedResult.equals(read)) {\n        if (StringUtil.startsWithConcatenationOf(read, myUserName + \"@\", myHost)) {\n          throw new AuthenticationException(CvsBundle.message(\"exception.text.ext.server.rejected.access\"), null);\n        }\n        else {\n          if (myErrorText.length() > 0) {\n            throw new AuthenticationException(myErrorText.toString(), null);\n          }\n          else {\n            throw new AuthenticationException(CvsBundle.message(\"exception.text.ext.cannot.establish.external.connection\"), null);\n          }\n        }\n      }\n    }\n    finally {\n      streamWrapper.close();\n    }\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int getDefaultPort() {\n    return ExtConnection.DEFAULT_PORT;\n  }","id":5167,"modified_method":"public int getDefaultPort() {\n    return 22;\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int getDefaultPort() {\n    return CvsConnectionUtil.DEFAULT_PSERVER_PORT;\n  }","id":5168,"modified_method":"public int getDefaultPort() {\n    return 2401;\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PServerCvsSettings(CvsRootConfiguration cvsRootConfiguration) {\n    super(cvsRootConfiguration);\n    PORT = CvsConnectionUtil.DEFAULT_PSERVER_PORT;\n  }","id":5169,"modified_method":"public PServerCvsSettings(CvsRootConfiguration cvsRootConfiguration) {\n    super(cvsRootConfiguration);\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static String requestForPassword(String cvsroot) {\n    PasswordPromptDialog passwordDialog = new PasswordPromptDialog(CvsBundle.message(\"propmt.text.enter.password.for.cvs.root\", cvsroot),\n                                                                   CvsBundle.message(\"propmt.title.enter.password.for.cvs.root\"), null);\n    passwordDialog.show();\n    if (!passwordDialog.isOK()) return null;\n    return PServerPasswordScrambler.getInstance().scramble(passwordDialog.getPassword());\n  }","id":5170,"modified_method":"@Nullable\n  private static String requestForPassword(String cvsroot) {\n    PasswordPromptDialog passwordDialog = new PasswordPromptDialog(CvsBundle.message(\"prompt.text.enter.password.for.cvs.root\", cvsroot),\n                                                                   CvsBundle.message(\"prompt.title.enter.password.for.cvs.root\"), null);\n    passwordDialog.show();\n    if (!passwordDialog.isOK()) return null;\n    return PServerPasswordScrambler.getInstance().scramble(passwordDialog.getPassword());\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CvsLoginWorker getLoginWorker(final ModalityContext executor, final Project project, final PServerCvsSettings pServerCvsSettings) {\n    return new MyLoginWorker(project, pServerCvsSettings, executor);\n  }","id":5171,"modified_method":"public CvsLoginWorker getLoginWorker(final ModalityContext executor, final Project project, final PServerCvsSettings pServerCvsSettings) {\n    return new PServerLoginWorker(project, pServerCvsSettings, executor);\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void removePPKPasswordFor(String stringRepsentation) {\n    synchronized (myLock) {\n      myCvsRootToPPKPasswordMap.remove(stringRepsentation);\n      myCvsRootToStoringPPKPasswordMap.remove(stringRepsentation);\n    }\n  }","id":5172,"modified_method":"public void removePPKPasswordFor(String stringRepresentation) {\n    synchronized (myLock) {\n      myCvsRootToPPKPasswordMap.remove(stringRepresentation);\n      myCvsRootToStoringPPKPasswordMap.remove(stringRepresentation);\n    }\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void writeExternal(Element element) throws WriteExternalException {\n    Element passwords = new Element(PASSWORDS);\n    for (final String cvsRoot : myCvsRootToStoringPasswordMap.keySet()) {\n      Element password = new Element(PASSWORD);\n      password.setAttribute(CVSROOT_ATTR, cvsRoot);\n      password.setAttribute(PASSWORD_ATTR, PServerPasswordScrambler.getInstance().scramble(myCvsRootToStoringPasswordMap.get(cvsRoot)));\n      passwords.addContent(password);\n    }\n    element.addContent(passwords);\n\n    passwords = new Element(PPKPASSWORDS);\n    for (final String cvsRoot : myCvsRootToStoringPPKPasswordMap.keySet()) {\n      Element password = new Element(PASSWORD);\n      password.setAttribute(CVSROOT_ATTR, cvsRoot);\n      password.setAttribute(PASSWORD_ATTR, PServerPasswordScrambler.getInstance().scramble(myCvsRootToStoringPPKPasswordMap.get(cvsRoot)));\n      passwords.addContent(password);\n    }\n    element.addContent(passwords);\n\n  }","id":5173,"modified_method":"public void writeExternal(Element element) throws WriteExternalException {\n    Element passwords = new Element(PASSWORDS);\n    for (final String cvsRoot : myCvsRootToStoringPasswordMap.keySet()) {\n      Element password = new Element(PASSWORD);\n      password.setAttribute(CVSROOT_ATTR, cvsRoot);\n      password.setAttribute(PASSWORD_ATTR, PServerPasswordScrambler.getInstance().scramble(myCvsRootToStoringPasswordMap.get(cvsRoot)));\n      passwords.addContent(password);\n    }\n    element.addContent(passwords);\n\n    Element ppkPasswords = new Element(PPKPASSWORDS);\n    for (final String cvsRoot : myCvsRootToStoringPPKPasswordMap.keySet()) {\n      Element password = new Element(PASSWORD);\n      password.setAttribute(CVSROOT_ATTR, cvsRoot);\n      password.setAttribute(PASSWORD_ATTR, PServerPasswordScrambler.getInstance().scramble(myCvsRootToStoringPPKPasswordMap.get(cvsRoot)));\n      ppkPasswords.addContent(password);\n    }\n    element.addContent(ppkPasswords);\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void removePasswordFor(String stringRepsentation) {\n    synchronized (myLock) {\n      myCvsRootToPasswordMap.remove(stringRepsentation);\n      myCvsRootToStoringPasswordMap.remove(stringRepsentation);\n    }\n  }","id":5174,"modified_method":"public void removePasswordFor(String stringRepresentation) {\n    synchronized (myLock) {\n      myCvsRootToPasswordMap.remove(stringRepresentation);\n      myCvsRootToStoringPasswordMap.remove(stringRepresentation);\n    }\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void readExternal(Element element) throws InvalidDataException {\n    Element passwords = element.getChild(PASSWORDS);\n    if (passwords != null) {\n      for (Iterator eachPasswordElement = passwords.getChildren(PASSWORD).iterator(); eachPasswordElement.hasNext();){\n        Element passElement = (Element)eachPasswordElement.next();\n        String cvsRoot = passElement.getAttributeValue(CVSROOT_ATTR);\n        String password = passElement.getAttributeValue(PASSWORD_ATTR);\n        if ((cvsRoot != null) && (password != null))\n          myCvsRootToStoringPasswordMap.put(cvsRoot, PServerPasswordScrambler.getInstance().unscramble(password));\n      }\n    }\n    passwords = element.getChild(PPKPASSWORDS);\n    if (passwords != null) {\n      for (Iterator eachPasswordElement = passwords.getChildren(PASSWORD).iterator(); eachPasswordElement.hasNext();){\n        Element passElement = (Element)eachPasswordElement.next();\n        String cvsRoot = passElement.getAttributeValue(CVSROOT_ATTR);\n        String password = passElement.getAttributeValue(PASSWORD_ATTR);\n        if ((cvsRoot != null) && (password != null))\n          myCvsRootToStoringPPKPasswordMap.put(cvsRoot, PServerPasswordScrambler.getInstance().unscramble(password));\n      }\n    }\n\n  }","id":5175,"modified_method":"public void readExternal(Element element) throws InvalidDataException {\n    Element passwords = element.getChild(PASSWORDS);\n    if (passwords != null) {\n      for (Element passElement : (List<Element>)passwords.getChildren(PASSWORD)) {\n        String cvsRoot = passElement.getAttributeValue(CVSROOT_ATTR);\n        String password = passElement.getAttributeValue(PASSWORD_ATTR);\n        if ((cvsRoot != null) && (password != null)) {\n          myCvsRootToStoringPasswordMap.put(cvsRoot, PServerPasswordScrambler.getInstance().unscramble(password));\n        }\n      }\n    }\n\n    Element ppkPasswords = element.getChild(PPKPASSWORDS);\n    if (ppkPasswords != null) {\n      for (Element passElement : (List<Element>)ppkPasswords.getChildren(PASSWORD)) {\n        String cvsRoot = passElement.getAttributeValue(CVSROOT_ATTR);\n        String password = passElement.getAttributeValue(PASSWORD_ATTR);\n        if ((cvsRoot != null) && (password != null)) {\n          myCvsRootToStoringPPKPasswordMap.put(cvsRoot, PServerPasswordScrambler.getInstance().unscramble(password));\n        }\n      }\n    }\n\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CvsLoginWorkerImpl getLoginWorker(ModalityContext executor, Project project) {\n    return new MyLoginWorker(project, executor, getCvsRootAsString(), this);\n  }","id":5176,"modified_method":"public CvsLoginWorkerImpl getLoginWorker(ModalityContext executor, Project project) {\n    return new SshLoginWorker(project, executor, getCvsRootAsString(), this);\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean promptForPassword(final SshSettings settings, final String cvsRoot) {\n    if (! settings.USE_PPK) {\n      SSHPasswordProviderImpl sshPasswordProvider = SSHPasswordProviderImpl.getInstance();\n      String password = sshPasswordProvider.getPasswordForCvsRoot(cvsRoot);\n\n      if (password == null) {\n        SshPasswordDialog sshPasswordDialog = new SshPasswordDialog(CvsBundle.message(\"propmt.text.enter.password.for\", cvsRoot));\n        sshPasswordDialog.show();\n        if (!sshPasswordDialog.isOK()) return false;\n        password = sshPasswordDialog.getPassword();\n        sshPasswordProvider.storePasswordForCvsRoot(cvsRoot, password, sshPasswordDialog.saveThisPassword());\n      }\n\n      if (password == null) return false;\n    } else {\n      SSHPasswordProviderImpl sshPasswordProvider = SSHPasswordProviderImpl.getInstance();\n      String password = sshPasswordProvider.getPPKPasswordForCvsRoot(cvsRoot);\n\n      if (password == null) {\n        SshPasswordDialog sshPasswordDialog = new SshPasswordDialog(CvsBundle.message(\"propmt.text.enter.private.key.password.for\", cvsRoot));\n        sshPasswordDialog.setAdditionalText(CvsBundle.message(\"prompt.path.to.private.key\", settings.PATH_TO_PPK));\n        sshPasswordDialog.show();\n        if (!sshPasswordDialog.isOK()) return false;\n        password = sshPasswordDialog.getPassword();\n        sshPasswordProvider.storePPKPasswordForCvsRoot(cvsRoot, password, sshPasswordDialog.saveThisPassword());\n      }\n\n      if (password == null) return false;\n    }\n    return true;\n  }","id":5177,"modified_method":"public static boolean promptForPassword(final SshSettings settings, final String cvsRoot) {\n    if (! settings.USE_PPK) {\n      SSHPasswordProviderImpl sshPasswordProvider = SSHPasswordProviderImpl.getInstance();\n      String password = sshPasswordProvider.getPasswordForCvsRoot(cvsRoot);\n\n      if (password == null) {\n        SshPasswordDialog sshPasswordDialog = new SshPasswordDialog(CvsBundle.message(\"prompt.text.enter.password.for.cvs.root\", cvsRoot));\n        sshPasswordDialog.show();\n        if (!sshPasswordDialog.isOK()) return false;\n        password = sshPasswordDialog.getPassword();\n        sshPasswordProvider.storePasswordForCvsRoot(cvsRoot, password, sshPasswordDialog.saveThisPassword());\n      }\n\n      if (password == null) return false;\n    } else {\n      SSHPasswordProviderImpl sshPasswordProvider = SSHPasswordProviderImpl.getInstance();\n      String password = sshPasswordProvider.getPPKPasswordForCvsRoot(cvsRoot);\n\n      if (password == null) {\n        SshPasswordDialog sshPasswordDialog = new SshPasswordDialog(CvsBundle.message(\"prompt.text.enter.private.key.password.for\", cvsRoot));\n        sshPasswordDialog.setAdditionalText(CvsBundle.message(\"prompt.path.to.private.key\", settings.PATH_TO_PPK));\n        sshPasswordDialog.show();\n        if (!sshPasswordDialog.isOK()) return false;\n        password = sshPasswordDialog.getPassword();\n        sshPasswordProvider.storePPKPasswordForCvsRoot(cvsRoot, password, sshPasswordDialog.saveThisPassword());\n      }\n\n      if (password == null) return false;\n    }\n    return true;\n  }","commit_id":"ef5b7e1443a7d6c1ccd86f32766e4ccb445ea7ed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Creates a new result list item with a main widget.<p>\n     * \n     * @param resultItem the result item\n     * @param dndHandler the drag and drop handler\n     */\n    public CmsResultListItem(CmsResultItemBean resultItem, CmsDNDHandler dndHandler) {\n\n        resultItem.addAdditionalInfo(Messages.get().key(Messages.GUI_PREVIEW_LABEL_PATH_0), resultItem.getPath());\n        CmsResultItemWidget resultItemWidget = new CmsResultItemWidget(resultItem);\n        initContent(resultItemWidget);\n        if (dndHandler != null) {\n            setId(resultItem.getClientId());\n            if (resultItem.getTitle() != null) {\n                setName(resultItem.getTitle().toLowerCase().replace(\"/\", \"-\").replace(\" \", \"_\"));\n            } else {\n                // TODO: check if another name makes more sense\n                setName(resultItem.getClientId());\n            }\n            initMoveHandle(dndHandler);\n        } else {\n            if (resultItemWidget.hasTileView()) {\n                addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().tilingItem());\n            }\n        }\n        // add delete button\n        m_deleteButton = createDeleteButton();\n        if (!resultItem.isEditable()) {\n            m_deleteButton.disable(resultItem.getNoEditReson());\n        }\n        resultItemWidget.addButton(m_deleteButton);\n\n        // add  preview button\n        m_previewButton = new CmsPushButton();\n        m_previewButton.setImageClass(I_CmsImageBundle.INSTANCE.style().searchIcon());\n        m_previewButton.setButtonStyle(ButtonStyle.TRANSPARENT, null);\n        m_previewButton.setTitle(Messages.get().key(Messages.GUI_PREVIEW_BUTTON_SHOW_0));\n        resultItemWidget.addButton(m_previewButton);\n\n        m_selectButton = new CmsPushButton();\n        // TODO: use different icon\n        m_selectButton.setImageClass(I_CmsImageBundle.INSTANCE.style().addIcon());\n        m_selectButton.setButtonStyle(ButtonStyle.TRANSPARENT, null);\n        m_selectButton.setTitle(Messages.get().key(Messages.GUI_PREVIEW_BUTTON_SELECT_0));\n        m_selectButton.setVisible(false);\n        resultItemWidget.addButton(m_selectButton);\n\n        // add file icon\n        resultItemWidget.setIcon(CmsIconUtil.getResourceIconClasses(resultItem.getType(), resultItem.getPath(), false));\n        if (!resultItem.isReleasedAndNotExpired()) {\n            addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().expired());\n        }\n    }","id":5178,"modified_method":"/**\n     * Creates a new result list item with a main widget.<p>\n     * \n     * @param resultItem the result item\n     * @param dndHandler the drag and drop handler\n     */\n    public CmsResultListItem(CmsResultItemBean resultItem, CmsDNDHandler dndHandler) {\n\n        resultItem.addAdditionalInfo(Messages.get().key(Messages.GUI_PREVIEW_LABEL_PATH_0), resultItem.getPath());\n        CmsResultItemWidget resultItemWidget = new CmsResultItemWidget(resultItem);\n        initContent(resultItemWidget);\n        if (dndHandler != null) {\n            setId(resultItem.getClientId());\n            if (resultItem.getTitle() != null) {\n                setName(resultItem.getTitle().toLowerCase().replace(\"/\", \"-\").replace(\" \", \"_\"));\n            } else {\n                // TODO: check if another name makes more sense\n                setName(resultItem.getClientId());\n            }\n            initMoveHandle(dndHandler);\n        } else {\n            if (resultItemWidget.hasTileView()) {\n                addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().tilingItem());\n            }\n        }\n        // add delete button\n        m_deleteButton = createDeleteButton();\n        if (!resultItem.isEditable()) {\n            m_deleteButton.disable(resultItem.getNoEditReson());\n        }\n        resultItemWidget.addButton(m_deleteButton);\n\n        // add  preview button\n        m_previewButton = createButton(\n            I_CmsImageBundle.INSTANCE.style().searchIcon(),\n            Messages.get().key(Messages.GUI_PREVIEW_BUTTON_SHOW_0));\n        resultItemWidget.addButton(m_previewButton);\n\n        m_selectButton = createButton(\n            I_CmsImageBundle.INSTANCE.style().addIcon(),\n            Messages.get().key(Messages.GUI_PREVIEW_BUTTON_SELECT_0));\n        m_selectButton.setVisible(false);\n        resultItemWidget.addButton(m_selectButton);\n\n        // add file icon\n        resultItemWidget.setIcon(CmsIconUtil.getResourceIconClasses(resultItem.getType(), resultItem.getPath(), false));\n        if (!resultItem.isReleasedAndNotExpired()) {\n            addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().expired());\n        }\n    }","commit_id":"2614485d15430b4a23142a7e2cd36d3016cc4b4b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates the delete button for this item.<p>\n     * \n     * @return the delete button\n     */\n    public static CmsPushButton createDeleteButton() {\n\n        CmsPushButton result = new CmsPushButton();\n        result.setImageClass(I_CmsImageBundle.INSTANCE.style().deleteIcon());\n        result.setButtonStyle(ButtonStyle.TRANSPARENT, null);\n        result.setTitle(Messages.get().key(Messages.GUI_RESULT_BUTTON_DELETE_0));\n        return result;\n    }","id":5179,"modified_method":"/**\n     * Creates the delete button for this item.<p>\n     * \n     * @return the delete button\n     */\n    public static CmsPushButton createDeleteButton() {\n\n        return createButton(\n            I_CmsImageBundle.INSTANCE.style().deleteIcon(),\n            Messages.get().key(Messages.GUI_RESULT_BUTTON_DELETE_0));\n    }","commit_id":"2614485d15430b4a23142a7e2cd36d3016cc4b4b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * The constructor.<p>\n     * \n     * @param tabHandler the tab handler \n     * @param dndHandler the dnd manager\n     */\n    public CmsResultsTab(CmsResultsTabHandler tabHandler, CmsDNDHandler dndHandler) {\n\n        super(GalleryTabId.cms_tab_results);\n        m_types = new HashSet<String>();\n        m_hasMoreResults = false;\n        m_dndHandler = dndHandler;\n        m_tabHandler = tabHandler;\n        m_scrollList.truncate(TM_RESULT_TAB, CmsGalleryDialog.DIALOG_WIDTH);\n        m_params = new FlowPanel();\n        m_params.setStyleName(I_CmsLayoutBundle.INSTANCE.galleryDialogCss().tabParamsPanel());\n        m_tab.insert(m_params, 0);\n        getList().addScrollHandler(new CmsAsynchronousScrollToBottomHandler());\n        getList().addScrollHandler(m_backwardScrollHandler);\n    }","id":5180,"modified_method":"/**\n     * The constructor.<p>\n     * \n     * @param tabHandler the tab handler \n     * @param dndHandler the dnd manager\n     */\n    public CmsResultsTab(CmsResultsTabHandler tabHandler, CmsDNDHandler dndHandler) {\n\n        super(GalleryTabId.cms_tab_results);\n        m_contextMenuHandler = new CmsContextMenuHandler(tabHandler);\n        m_types = new HashSet<String>();\n        m_hasMoreResults = false;\n        m_dndHandler = dndHandler;\n        m_tabHandler = tabHandler;\n        m_scrollList.truncate(TM_RESULT_TAB, CmsGalleryDialog.DIALOG_WIDTH);\n        m_params = new FlowPanel();\n        m_params.setStyleName(I_CmsLayoutBundle.INSTANCE.galleryDialogCss().tabParamsPanel());\n        m_tab.insert(m_params, 0);\n        getList().addScrollHandler(new CmsAsynchronousScrollToBottomHandler());\n        getList().addScrollHandler(m_backwardScrollHandler);\n    }","commit_id":"2614485d15430b4a23142a7e2cd36d3016cc4b4b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Adds a list item for a single search result.<p>\n     * \n     * @param resultItem the search result \n     * @param front if true, adds the list item to the front of the list, else at the back \n     */\n    protected void addSingleResult(CmsResultItemBean resultItem, boolean front) {\n\n        m_types.add(resultItem.getType());\n        CmsResultListItem listItem = new CmsResultListItem(resultItem, m_dndHandler);\n        if (resultItem.isPreset()) {\n            m_preset = listItem;\n        }\n        listItem.addPreviewClickHandler(new PreviewHandler(resultItem.getPath(), resultItem.getType()));\n        listItem.addDeleteClickHandler(new DeleteHandler(resultItem.getPath()));\n        if (m_tabHandler.hasSelectResource()) {\n            SelectHandler selectHandler = new SelectHandler(\n                resultItem.getPath(),\n                resultItem.getTitle(),\n                resultItem.getType());\n            listItem.addSelectClickHandler(selectHandler);\n\n            // this affects both tiled and non-tiled result lists. \n            listItem.addDoubleClickHandler(selectHandler);\n        }\n        if (front) {\n            addWidgetToFrontOfList(listItem);\n        } else {\n            addWidgetToList(listItem);\n        }\n    }","id":5181,"modified_method":"/**\n     * Adds a list item for a single search result.<p>\n     * \n     * @param resultItem the search result \n     * @param front if true, adds the list item to the front of the list, else at the back \n     */\n    protected void addSingleResult(CmsResultItemBean resultItem, boolean front) {\n\n        m_types.add(resultItem.getType());\n        CmsResultListItem listItem = new CmsResultListItem(resultItem, m_dndHandler);\n        if (resultItem.isPreset()) {\n            m_preset = listItem;\n        }\n        listItem.addPreviewClickHandler(new PreviewHandler(resultItem.getPath(), resultItem.getType()));\n        listItem.addDeleteClickHandler(new DeleteHandler(resultItem.getPath()));\n        listItem.getListItemWidget().addButton(\n            new CmsContextMenuButton(new CmsUUID(resultItem.getClientId()), m_contextMenuHandler));\n        if (m_tabHandler.hasSelectResource()) {\n            SelectHandler selectHandler = new SelectHandler(\n                resultItem.getPath(),\n                resultItem.getTitle(),\n                resultItem.getType());\n            listItem.addSelectClickHandler(selectHandler);\n\n            // this affects both tiled and non-tiled result lists. \n            listItem.addDoubleClickHandler(selectHandler);\n        }\n        if (front) {\n            addWidgetToFrontOfList(listItem);\n        } else {\n            addWidgetToList(listItem);\n        }\n    }","commit_id":"2614485d15430b4a23142a7e2cd36d3016cc4b4b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Test\n\tpublic void testPortalAuthenticationToken() throws Exception {\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = resourceResponse.createActionURL();\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portalAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_auth\");\n\n\t\t\t\tprintWriter.write(portalAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tsetUpPortlet(\n\t\t\ttestPortlet, new HashMapDictionary<String, Object>(),\n\t\t\tTEST_PORTLET_ID);\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tResponse response = PortletContainerTestUtil.getPortalAuthentication(\n\t\t\thttpServletRequest, layout, TEST_PORTLET_ID);\n\n\t\ttestPortlet.reset();\n\n\t\t// Make an action request using the portal authentication token\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.ACTION_PHASE);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_auth\", response.getBody());\n\n\t\tMap<String, List<String>> headers = new HashMap<>();\n\n\t\theaders.put(\"Cookie\", response.getCookies());\n\n\t\tresponse = PortletContainerTestUtil.request(url, headers);\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testPortlet.isActionCalled());\n\t}","id":5182,"modified_method":"@Test\n\tpublic void testPortalAuthenticationToken() throws Exception {\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = resourceResponse.createActionURL();\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portalAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_auth\");\n\n\t\t\t\tprintWriter.write(portalAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tsetUpPortlet(\n\t\t\ttestPortlet, new HashMapDictionary<String, Object>(),\n\t\t\tTEST_PORTLET_ID);\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tResponse response = PortletContainerTestUtil.getPortalAuthentication(\n\t\t\thttpServletRequest, layout, TEST_PORTLET_ID);\n\n\t\ttestPortlet.reset();\n\n\t\t// Make an action request using the portal authentication token\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.ACTION_PHASE);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_auth\", response.getBody());\n\n\t\tresponse = PortletContainerTestUtil.request(\n\t\t\turl, Collections.singletonMap(\"Cookie\", response.getCookies()));\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testPortlet.isActionCalled());\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Response request(String url) throws IOException {\n\t\treturn request(url, null);\n\t}","id":5183,"modified_method":"public static Response request(String url) throws IOException {\n\t\treturn request(url, Collections.<String, List<String>>emptyMap());\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Response request(\n\t\t\tString url, Map<String, List<String>> headers)\n\t\tthrows IOException {\n\n\t\tURL urlObject = new URL(url);\n\n\t\tHttpURLConnection httpURLConnection =\n\t\t\t(HttpURLConnection)urlObject.openConnection();\n\n\t\thttpURLConnection.setInstanceFollowRedirects(true);\n\t\thttpURLConnection.setConnectTimeout(1500 * 1000);\n\t\thttpURLConnection.setReadTimeout(1500 * 1000);\n\n\t\tif (headers != null) {\n\t\t\tfor (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n\t\t\t\tString key = entry.getKey();\n\n\t\t\t\tfor (String value : entry.getValue()) {\n\t\t\t\t\tif (key.equals(\"Cookie\")) {\n\t\t\t\t\t\thttpURLConnection.addRequestProperty(\n\t\t\t\t\t\t\tkey, value.split(\";\", 2)[0]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thttpURLConnection.setRequestProperty(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tInputStream inputStream = null;\n\n\t\ttry {\n\t\t\tinputStream = httpURLConnection.getInputStream();\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tinputStream = httpURLConnection.getErrorStream();\n\t\t}\n\n\t\ttry {\n\t\t\tMap<String, List<String>> headerFields =\n\t\t\t\thttpURLConnection.getHeaderFields();\n\n\t\t\treturn new Response(\n\t\t\t\thttpURLConnection.getResponseCode(), read(inputStream),\n\t\t\t\theaderFields.get(\"Set-Cookie\"));\n\t\t}\n\t\tfinally {\n\t\t\tif (inputStream != null) {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t}\n\t}","id":5184,"modified_method":"public static Response request(\n\t\t\tString url, Map<String, List<String>> headers)\n\t\tthrows IOException {\n\n\t\tURL urlObject = new URL(url);\n\n\t\tHttpURLConnection httpURLConnection =\n\t\t\t(HttpURLConnection)urlObject.openConnection();\n\n\t\thttpURLConnection.setInstanceFollowRedirects(true);\n\t\thttpURLConnection.setConnectTimeout(1500 * 1000);\n\t\thttpURLConnection.setReadTimeout(1500 * 1000);\n\n\t\tfor (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n\t\t\tString key = entry.getKey();\n\n\t\t\tfor (String value : entry.getValue()) {\n\t\t\t\tif (key.equals(\"Cookie\")) {\n\t\t\t\t\thttpURLConnection.addRequestProperty(\n\t\t\t\t\t\tkey, value.split(\";\", 2)[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\thttpURLConnection.setRequestProperty(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tInputStream inputStream = null;\n\n\t\ttry {\n\t\t\tinputStream = httpURLConnection.getInputStream();\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tinputStream = httpURLConnection.getErrorStream();\n\t\t}\n\n\t\ttry {\n\t\t\tMap<String, List<String>> headerFields =\n\t\t\t\thttpURLConnection.getHeaderFields();\n\n\t\t\treturn new Response(\n\t\t\t\thttpURLConnection.getResponseCode(), read(inputStream),\n\t\t\t\theaderFields.get(\"Set-Cookie\"));\n\t\t}\n\t\tfinally {\n\t\t\tif (inputStream != null) {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t}\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testRequestFromValidURLWithHeaders() throws Exception {\n\t\tMap<String, List<String>> headers = new HashMap<>();\n\n\t\tList<String> values = new ArrayList<>();\n\n\t\tvalues.add(\"value1\");\n\n\t\theaders.put(\"key1\", values);\n\n\t\tList<String> cookieValues = new ArrayList<>();\n\n\t\tcookieValues.add(\"JSSESSIONID=1234567890\");\n\n\t\theaders.put(\"Cookie\", cookieValues);\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\t\"http://www.google.com\", headers);\n\n\t\tAssert.assertNotNull(response.getBody());\n\t\tAssert.assertEquals(200, response.getCode());\n\t}","id":5185,"modified_method":"@Test\n\tpublic void testRequestFromValidURLWithHeaders() throws Exception {\n\t\tMap<String, List<String>> headers = new HashMap<>();\n\n\t\theaders.put(\"key1\", Collections.singletonList(\"value1\"));\n\t\theaders.put(\n\t\t\t\"Cookie\", Collections.singletonList(\"JSSESSIONID=1234567890\"));\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\t\"http://www.google.com\", headers);\n\n\t\tAssert.assertNotNull(response.getBody());\n\t\tAssert.assertEquals(200, response.getCode());\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testIsAccessGrantedByPortletAuthenticationToken()\n\t\tthrows Exception {\n\n\t\tfinal String testTargetPortletId = \"testTargetPortletId\";\n\n\t\tDictionary<String, Object> properties = new HashMapDictionary<>();\n\n\t\tproperties.put(\n\t\t\t\"com.liferay.portlet.add-default-resource\", Boolean.TRUE);\n\t\tproperties.put(\"com.liferay.portlet.system\", Boolean.TRUE);\n\n\t\tTestPortlet testTargetPortlet = new TestPortlet();\n\n\t\tsetUpPortlet(testTargetPortlet, properties, testTargetPortletId, false);\n\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = PortletURLFactoryUtil.create(\n\t\t\t\t\tresourceRequest, testTargetPortletId, layout.getPlid(),\n\t\t\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portletAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_p_auth\");\n\n\t\t\t\tprintWriter.write(portletAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tproperties = new HashMapDictionary<>();\n\n\t\tsetUpPortlet(testPortlet, properties, TEST_PORTLET_ID);\n\n\t\t// Get the portlet authentication token by making a resource request\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\tportletURL.toString());\n\n\t\ttestTargetPortlet.reset();\n\n\t\t// Make a render request to the target portlet using the portlet\n\t\t// authentication token\n\n\t\tportletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, testTargetPortletId, layout.getPlid(),\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tportletURL.setWindowState(WindowState.MAXIMIZED);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_p_auth\", response.getBody());\n\n\t\tMap<String, List<String>> headers = new HashMap<>();\n\n\t\theaders.put(\"Cookie\", response.getCookies());\n\n\t\tresponse = PortletContainerTestUtil.request(url, headers);\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testTargetPortlet.isRenderCalled());\n\t}","id":5186,"modified_method":"@Test\n\tpublic void testIsAccessGrantedByPortletAuthenticationToken()\n\t\tthrows Exception {\n\n\t\tfinal String testTargetPortletId = \"testTargetPortletId\";\n\n\t\tDictionary<String, Object> properties = new HashMapDictionary<>();\n\n\t\tproperties.put(\n\t\t\t\"com.liferay.portlet.add-default-resource\", Boolean.TRUE);\n\t\tproperties.put(\"com.liferay.portlet.system\", Boolean.TRUE);\n\n\t\tTestPortlet testTargetPortlet = new TestPortlet();\n\n\t\tsetUpPortlet(testTargetPortlet, properties, testTargetPortletId, false);\n\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = PortletURLFactoryUtil.create(\n\t\t\t\t\tresourceRequest, testTargetPortletId, layout.getPlid(),\n\t\t\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portletAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_p_auth\");\n\n\t\t\t\tprintWriter.write(portletAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tproperties = new HashMapDictionary<>();\n\n\t\tsetUpPortlet(testPortlet, properties, TEST_PORTLET_ID);\n\n\t\t// Get the portlet authentication token by making a resource request\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\tportletURL.toString());\n\n\t\ttestTargetPortlet.reset();\n\n\t\t// Make a render request to the target portlet using the portlet\n\t\t// authentication token\n\n\t\tportletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, testTargetPortletId, layout.getPlid(),\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tportletURL.setWindowState(WindowState.MAXIMIZED);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_p_auth\", response.getBody());\n\n\t\tresponse = PortletContainerTestUtil.request(\n\t\t\turl, Collections.singletonMap(\"Cookie\", response.getCookies()));\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testTargetPortlet.isRenderCalled());\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testIsAccessGrantedByPortletAuthenticationToken()\n\t\tthrows Exception {\n\n\t\tfinal String testTargetPortletId = \"testTargetPortletId\";\n\n\t\tDictionary<String, Object> properties = new HashMapDictionary<>();\n\n\t\tproperties.put(\n\t\t\t\"com.liferay.portlet.add-default-resource\", Boolean.TRUE);\n\t\tproperties.put(\"com.liferay.portlet.system\", Boolean.TRUE);\n\n\t\tTestPortlet testTargetPortlet = new TestPortlet();\n\n\t\tsetUpPortlet(testTargetPortlet, properties, testTargetPortletId, false);\n\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = PortletURLFactoryUtil.create(\n\t\t\t\t\tresourceRequest, testTargetPortletId, layout.getPlid(),\n\t\t\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portletAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_p_auth\");\n\n\t\t\t\tprintWriter.write(portletAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tproperties = new HashMapDictionary<>();\n\n\t\tsetUpPortlet(testPortlet, properties, TEST_PORTLET_ID);\n\n\t\t// Get the portlet authentication token by making a resource request\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\tportletURL.toString());\n\n\t\ttestTargetPortlet.reset();\n\n\t\t// Make a resource request to the target portlet using the portlet\n\t\t// authentication token\n\n\t\tportletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, testTargetPortletId, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tportletURL.setWindowState(WindowState.MAXIMIZED);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_p_auth\", response.getBody());\n\n\t\tMap<String, List<String>> headers = new HashMap<>();\n\n\t\theaders.put(\"Cookie\", response.getCookies());\n\n\t\tresponse = PortletContainerTestUtil.request(url, headers);\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testTargetPortlet.isResourceCalled());\n\t}","id":5187,"modified_method":"@Test\n\tpublic void testIsAccessGrantedByPortletAuthenticationToken()\n\t\tthrows Exception {\n\n\t\tfinal String testTargetPortletId = \"testTargetPortletId\";\n\n\t\tDictionary<String, Object> properties = new HashMapDictionary<>();\n\n\t\tproperties.put(\n\t\t\t\"com.liferay.portlet.add-default-resource\", Boolean.TRUE);\n\t\tproperties.put(\"com.liferay.portlet.system\", Boolean.TRUE);\n\n\t\tTestPortlet testTargetPortlet = new TestPortlet();\n\n\t\tsetUpPortlet(testTargetPortlet, properties, testTargetPortletId, false);\n\n\t\ttestPortlet = new TestPortlet() {\n\n\t\t\t@Override\n\t\t\tpublic void serveResource(\n\t\t\t\t\tResourceRequest resourceRequest,\n\t\t\t\t\tResourceResponse resourceResponse)\n\t\t\t\tthrows IOException {\n\n\t\t\t\tPrintWriter printWriter = resourceResponse.getWriter();\n\n\t\t\t\tPortletURL portletURL = PortletURLFactoryUtil.create(\n\t\t\t\t\tresourceRequest, testTargetPortletId, layout.getPlid(),\n\t\t\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\t\t\tString queryString = HttpUtil.getQueryString(\n\t\t\t\t\tportletURL.toString());\n\n\t\t\t\tMap<String, String[]> parameterMap = HttpUtil.getParameterMap(\n\t\t\t\t\tqueryString);\n\n\t\t\t\tString portletAuthenticationToken = MapUtil.getString(\n\t\t\t\t\tparameterMap, \"p_p_auth\");\n\n\t\t\t\tprintWriter.write(portletAuthenticationToken);\n\t\t\t}\n\n\t\t};\n\n\t\tproperties = new HashMapDictionary<>();\n\n\t\tsetUpPortlet(testPortlet, properties, TEST_PORTLET_ID);\n\n\t\t// Get the portlet authentication token by making a resource request\n\n\t\tHttpServletRequest httpServletRequest =\n\t\t\tPortletContainerTestUtil.getHttpServletRequest(group, layout);\n\n\t\tPortletURL portletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, TEST_PORTLET_ID, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tResponse response = PortletContainerTestUtil.request(\n\t\t\tportletURL.toString());\n\n\t\ttestTargetPortlet.reset();\n\n\t\t// Make a resource request to the target portlet using the portlet\n\t\t// authentication token\n\n\t\tportletURL = new PortletURLImpl(\n\t\t\thttpServletRequest, testTargetPortletId, layout.getPlid(),\n\t\t\tPortletRequest.RESOURCE_PHASE);\n\n\t\tportletURL.setWindowState(WindowState.MAXIMIZED);\n\n\t\tString url = portletURL.toString();\n\n\t\turl = HttpUtil.setParameter(url, \"p_p_auth\", response.getBody());\n\n\t\tresponse = PortletContainerTestUtil.request(\n\t\t\turl, Collections.singletonMap(\"Cookie\", response.getCookies()));\n\n\t\tAssert.assertEquals(200, response.getCode());\n\t\tAssert.assertTrue(testTargetPortlet.isResourceCalled());\n\t}","commit_id":"15c306ec0633d2c35887f333ac6b21d15689d403","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void write(long companyId) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tIndexWriterData writerData = _writerLookup.get(companyId);\n\n\t\tif (writerData != null) {\n\t\t\tdecrement(writerData);\n\t\t}\n\t\telse {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"IndexWriterData not found for \" + companyId);\n\t\t\t}\n\t\t}\n\t}","id":5188,"modified_method":"public void write(long companyId, Document doc) throws IOException {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized(this) {\n\t\t\tIndexWriter writer = null;\n\n\t\t\ttry {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tLuceneUtil.getLuceneDir(companyId),\n\t\t\t\t\tLuceneUtil.getAnalyzer(),\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\n\t\t\t\tif (doc != null) {\n\t\t\t\t\twriter.setMergeFactor(_MERGE_FACTOR);\n\t\t\t\t\twriter.addDocument(doc);\n\n\t\t\t\t\t_optimizeCount++;\n\n\t\t\t\t\tif ((_OPTIMIZE_INTERVAL == 0) ||\n\t\t\t\t\t\t(_optimizeCount >= _OPTIMIZE_INTERVAL)) {\n\n\t\t\t\t\t\twriter.optimize();\n\n\t\t\t\t\t\t_optimizeCount = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (writer != null) {\n\t\t\t\t\twriter.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteDocuments(long companyId, Term term)\n\t\tthrows InterruptedException, IOException {\n\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tacquireLock(companyId, true);\n\n\t\t\tIndexReader reader = null;\n\n\t\t\ttry {\n\t\t\t\treader = LuceneUtil.getReader(companyId, false);\n\n\t\t\t\treader.deleteDocuments(term);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\treleaseLock(companyId);\n\t\t}\n\t}","id":5189,"modified_method":"public void deleteDocuments(long companyId, Term term)\n\t\tthrows InterruptedException, IOException {\n\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized(this) {\n\t\t\tIndexReader reader = null;\n\n\t\t\ttry {\n\t\t\t\treader =\n\t\t\t\t\tIndexReader.open(LuceneUtil.getLuceneDir(companyId), false);\n\n\t\t\t\treader.deleteDocuments(term);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Directory getReadOnlyLuceneDir() throws IOException {\n\t\tif (_readOnlyLuceneDir == null) {\n\t\t\tString tmpDir = SystemProperties.get(SystemProperties.TMP_DIR);\n\n\t\t\tFile dir = new File(tmpDir + \"/liferay/lucene/empty\");\n\n\t\t\tdir.mkdir();\n\n\t\t\t_readOnlyLuceneDir = LuceneUtil.getDirectory(dir.getPath(), false);\n\t\t}\n\n\t\treturn _readOnlyLuceneDir;\n\t}","id":5190,"modified_method":"protected Directory getReadOnlyLuceneDir() throws IOException {\n\t\tif (_readOnlyLuceneDir == null) {\n\t\t\tString tmpDir = SystemProperties.get(SystemProperties.TMP_DIR);\n\n\t\t\tFile dir = new File(tmpDir + \"/liferay/lucene/empty\");\n\n\t\t\tdir.mkdir();\n\n\t\t\t_readOnlyLuceneDir = LuceneUtil.getDirectory(dir.getPath());\n\t\t}\n\n\t\treturn _readOnlyLuceneDir;\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\torg.apache.lucene.index.IndexWriter writer = null;\n\n\t\ttry {\n\t\t\twriter = LuceneUtil.getWriter(companyId);\n\n\t\t\twriter.addDocument(_getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t\tfinally {\n\t\t\tif (writer != null) {\n\t\t\t\tLuceneUtil.write(companyId);\n\t\t\t}\n\t\t}\n\t}","id":5191,"modified_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneUtil.write(companyId, _getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\tLuceneUtil.delete(_companyId);\n\n\t\ttry {\n\t\t\tIndexWriter writer = LuceneUtil.getWriter(_companyId, true);\n\n\t\t\tLuceneUtil.write(writer);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(ioe.getMessage(), ioe);\n\t\t}\n\n\t\tString[] indexIds = new String[] {String.valueOf(_companyId)};\n\n\t\ttry {\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(indexIds);\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","id":5192,"modified_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\tString[] indexIds = new String[] {String.valueOf(_companyId)};\n\n\t\ttry {\n\t\t\tLuceneUtil.delete(_companyId);\n\t\t\tLuceneUtil.checkLuceneDir(_companyId);\n\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(indexIds);\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void checkLuceneDir(long companyId) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tDirectory luceneDir = LuceneUtil.getLuceneDir(companyId);\n\n\t\ttry {\n\n\t\t\t// LEP-6078\n\n\t\t\tif (luceneDir.fileExists(\"write.lock\")) {\n\t\t\t\tluceneDir.deleteFile(\"write.lock\");\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(\"Unable to clear write lock\", ioe);\n\t\t}\n\n\t\tIndexWriter writer = null;\n\n\t\t// Lucene does not properly release its lock on the index when\n\t\t// IndexWriter throws an exception\n\n\t\ttry {\n\t\t\tif (luceneDir.fileExists(\"segments.gen\")) {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tluceneDir, LuceneUtil.getAnalyzer(), false,\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tluceneDir, LuceneUtil.getAnalyzer(), true,\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(\"Check Lucene directory failed for \" + companyId, ioe);\n\t\t}\n\t\tfinally {\n\t\t\tif (writer != null) {\n\t\t\t\ttry {\n\t\t\t\t\twriter.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ioe) {\n\t\t\t\t\t_log.error(ioe);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5193,"modified_method":"public static void checkLuceneDir(long companyId) {\n\t\t_instance._sharedWriter.checkLuceneDir(companyId);\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static FSDirectory getDirectory(String path, boolean create)\n\t\tthrows IOException {\n\n\t\treturn FSDirectory.getDirectory(path, false);\n\t}","id":5194,"modified_method":"public static FSDirectory getDirectory(String path)\n\t\tthrows IOException {\n\n\t\treturn FSDirectory.open(new File(path));\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _deleteFile(long companyId) {\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tDirectory directory = getDirectory(path, false);\n\n\t\t\tdirectory.close();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Could not close directory \" + path);\n\t\t\t}\n\t\t}\n\n\t\tFileUtil.deltree(path);\n\t}","id":5195,"modified_method":"private void _deleteFile(long companyId) {\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tDirectory directory = getDirectory(path);\n\n\t\t\tdirectory.close();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Could not close directory \" + path);\n\t\t\t}\n\t\t}\n\n\t\tFileUtil.deltree(path);\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private Directory _getLuceneDirFile(long companyId) {\n\t\tDirectory directory = null;\n\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tdirectory = getDirectory(path, false);\n\t\t}\n\t\tcatch (IOException ioe1) {\n\t\t\ttry {\n\t\t\t\tif (directory != null) {\n\t\t\t\t\tdirectory.close();\n\t\t\t\t}\n\n\t\t\t\tdirectory = getDirectory(path, true);\n\t\t\t}\n\t\t\tcatch (IOException ioe2) {\n\t\t\t\tthrow new RuntimeException(ioe2);\n\t\t\t}\n\t\t}\n\n\t\treturn directory;\n\t}","id":5196,"modified_method":"private Directory _getLuceneDirFile(long companyId) {\n\t\tDirectory directory = null;\n\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tdirectory = getDirectory(path);\n\t\t}\n\t\tcatch (IOException ioe1) {\n\t\t\tif (directory != null) {\n\t\t\t\ttry {\n\t\t\t\t\tdirectory.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn directory;\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void write(long companyId) {\n\t\t_instance._sharedWriter.write(companyId);\n\t}","id":5197,"modified_method":"public static void write(long companyId, Document doc) throws IOException {\n\t\t_instance._sharedWriter.write(companyId, doc);\n\t}","commit_id":"c78fffd7744b50b09eeb4a533022173806ba277a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void write(long companyId, Document doc) throws IOException {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized(this) {\n\t\t\tIndexWriter writer = null;\n\n\t\t\ttry {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tLuceneUtil.getLuceneDir(companyId),\n\t\t\t\t\tLuceneUtil.getAnalyzer(),\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\n\t\t\t\tif (doc != null) {\n\t\t\t\t\twriter.setMergeFactor(_MERGE_FACTOR);\n\t\t\t\t\twriter.addDocument(doc);\n\n\t\t\t\t\t_optimizeCount++;\n\n\t\t\t\t\tif ((_OPTIMIZE_INTERVAL == 0) ||\n\t\t\t\t\t\t(_optimizeCount >= _OPTIMIZE_INTERVAL)) {\n\n\t\t\t\t\t\twriter.optimize();\n\n\t\t\t\t\t\t_optimizeCount = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (writer != null) {\n\t\t\t\t\twriter.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5198,"modified_method":"public void write(long companyId) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tIndexWriterData writerData = _writerLookup.get(companyId);\n\n\t\tif (writerData != null) {\n\t\t\tdecrement(writerData);\n\t\t}\n\t\telse {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"IndexWriterData not found for \" + companyId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteDocuments(long companyId, Term term)\n\t\tthrows InterruptedException, IOException {\n\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized(this) {\n\t\t\tIndexReader reader = null;\n\n\t\t\ttry {\n\t\t\t\treader =\n\t\t\t\t\tIndexReader.open(LuceneUtil.getLuceneDir(companyId), false);\n\n\t\t\t\treader.deleteDocuments(term);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5199,"modified_method":"public void deleteDocuments(long companyId, Term term)\n\t\tthrows InterruptedException, IOException {\n\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tacquireLock(companyId, true);\n\n\t\t\tIndexReader reader = null;\n\n\t\t\ttry {\n\t\t\t\treader = LuceneUtil.getReader(companyId, false);\n\n\t\t\t\treader.deleteDocuments(term);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\treleaseLock(companyId);\n\t\t}\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneUtil.write(companyId, _getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","id":5200,"modified_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\torg.apache.lucene.index.IndexWriter writer = null;\n\n\t\ttry {\n\t\t\twriter = LuceneUtil.getWriter(companyId);\n\n\t\t\twriter.addDocument(_getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t\tfinally {\n\t\t\tif (writer != null) {\n\t\t\t\tLuceneUtil.write(companyId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\tString[] indexIds = new String[] {String.valueOf(_companyId)};\n\n\t\ttry {\n\t\t\tLuceneUtil.delete(_companyId);\n\t\t\tLuceneUtil.checkLuceneDir(_companyId);\n\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(indexIds);\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","id":5201,"modified_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\tLuceneUtil.delete(_companyId);\n\n\t\ttry {\n\t\t\tIndexWriter writer = LuceneUtil.getWriter(_companyId, true);\n\n\t\t\tLuceneUtil.write(writer);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(ioe.getMessage(), ioe);\n\t\t}\n\n\t\tString[] indexIds = new String[] {String.valueOf(_companyId)};\n\n\t\ttry {\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(indexIds);\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static FSDirectory getDirectory(String path)\n\t\tthrows IOException {\n\n\t\treturn FSDirectory.open(new File(path));\n\t}","id":5202,"modified_method":"public static FSDirectory getDirectory(String path, boolean create)\n\t\tthrows IOException {\n\n\t\treturn FSDirectory.getDirectory(path, false);\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void write(long companyId, Document doc) throws IOException {\n\t\t_instance._sharedWriter.write(companyId, doc);\n\t}","id":5203,"modified_method":"public static void write(long companyId) {\n\t\t_instance._sharedWriter.write(companyId);\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void checkLuceneDir(long companyId) {\n\t\t_instance._sharedWriter.checkLuceneDir(companyId);\n\t}","id":5204,"modified_method":"public static void checkLuceneDir(long companyId) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tDirectory luceneDir = LuceneUtil.getLuceneDir(companyId);\n\n\t\ttry {\n\n\t\t\t// LEP-6078\n\n\t\t\tif (luceneDir.fileExists(\"write.lock\")) {\n\t\t\t\tluceneDir.deleteFile(\"write.lock\");\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(\"Unable to clear write lock\", ioe);\n\t\t}\n\n\t\tIndexWriter writer = null;\n\n\t\t// Lucene does not properly release its lock on the index when\n\t\t// IndexWriter throws an exception\n\n\t\ttry {\n\t\t\tif (luceneDir.fileExists(\"segments.gen\")) {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tluceneDir, LuceneUtil.getAnalyzer(), false,\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twriter = new IndexWriter(\n\t\t\t\t\tluceneDir, LuceneUtil.getAnalyzer(), true,\n\t\t\t\t\tIndexWriter.MaxFieldLength.LIMITED);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(\"Check Lucene directory failed for \" + companyId, ioe);\n\t\t}\n\t\tfinally {\n\t\t\tif (writer != null) {\n\t\t\t\ttry {\n\t\t\t\t\twriter.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ioe) {\n\t\t\t\t\t_log.error(ioe);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private Directory _getLuceneDirFile(long companyId) {\n\t\tDirectory directory = null;\n\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tdirectory = getDirectory(path);\n\t\t}\n\t\tcatch (IOException ioe1) {\n\t\t\tif (directory != null) {\n\t\t\t\ttry {\n\t\t\t\t\tdirectory.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn directory;\n\t}","id":5205,"modified_method":"private Directory _getLuceneDirFile(long companyId) {\n\t\tDirectory directory = null;\n\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tdirectory = getDirectory(path, false);\n\t\t}\n\t\tcatch (IOException ioe1) {\n\t\t\ttry {\n\t\t\t\tif (directory != null) {\n\t\t\t\t\tdirectory.close();\n\t\t\t\t}\n\n\t\t\t\tdirectory = getDirectory(path, true);\n\t\t\t}\n\t\t\tcatch (IOException ioe2) {\n\t\t\t\tthrow new RuntimeException(ioe2);\n\t\t\t}\n\t\t}\n\n\t\treturn directory;\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _deleteFile(long companyId) {\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tDirectory directory = getDirectory(path);\n\n\t\t\tdirectory.close();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Could not close directory \" + path);\n\t\t\t}\n\t\t}\n\n\t\tFileUtil.deltree(path);\n\t}","id":5206,"modified_method":"private void _deleteFile(long companyId) {\n\t\tString path = _getPath(companyId);\n\n\t\ttry {\n\t\t\tDirectory directory = getDirectory(path, false);\n\n\t\t\tdirectory.close();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Could not close directory \" + path);\n\t\t\t}\n\t\t}\n\n\t\tFileUtil.deltree(path);\n\t}","commit_id":"353e18d91756f2b6146bc97f6b4fc3015e52a988","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\torg.apache.lucene.index.IndexWriter writer = null;\n\n\t\ttry {\n\t\t\twriter = LuceneUtil.getWriter(companyId);\n\n\t\t\twriter.addDocument(_getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t\tfinally {\n\t\t\tif (writer != null) {\n\t\t\t\tLuceneUtil.write(companyId);\n\t\t\t}\n\t\t}\n\t}","id":5207,"modified_method":"public void addDocument(long companyId, Document doc)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneHelperUtil.write(companyId, _getLuceneDocument(doc));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Wrote document \" + doc.get(Field.UID));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","commit_id":"d10a7d0afefe34b875268dc97597fb8238252319","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteDocument(long companyId, String uid)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneUtil.deleteDocuments(companyId, new Term(Field.UID, uid));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Deleted document \" + uid);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","id":5208,"modified_method":"public void deleteDocument(long companyId, String uid)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneHelperUtil.deleteDocuments(\n\t\t\t\tcompanyId, new Term(Field.UID, uid));\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Deleted document \" + uid);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","commit_id":"d10a7d0afefe34b875268dc97597fb8238252319","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deletePortletDocuments(long companyId, String portletId)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneUtil.deleteDocuments(\n\t\t\t\tcompanyId, new Term(Field.PORTLET_ID, portletId));\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","id":5209,"modified_method":"public void deletePortletDocuments(long companyId, String portletId)\n\t\tthrows SearchException {\n\n\t\ttry {\n\t\t\tLuceneHelperUtil.deleteDocuments(\n\t\t\t\tcompanyId, new Term(Field.PORTLET_ID, portletId));\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SearchException(ioe);\n\t\t}\n\t}","commit_id":"d10a7d0afefe34b875268dc97597fb8238252319","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\tLuceneUtil.delete(_companyId);\n\n\t\ttry {\n\t\t\tIndexWriter writer = LuceneUtil.getWriter(_companyId, true);\n\n\t\t\tLuceneUtil.write(writer);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t_log.error(ioe.getMessage(), ioe);\n\t\t}\n\n\t\tString[] indexIds = new String[] {String.valueOf(_companyId)};\n\n\t\ttry {\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(indexIds);\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","id":5210,"modified_method":"protected void doReIndex(int delay) {\n\t\tif (SearchEngineUtil.isIndexReadOnly()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Reindexing Lucene started\");\n\t\t}\n\n\t\tif (delay < 0) {\n\t\t\tdelay = 0;\n\t\t}\n\n\t\ttry {\n\t\t\tif (delay > 0) {\n\t\t\t\tThread.sleep(Time.SECOND * delay);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ie) {\n\t\t}\n\n\t\tStopWatch stopWatch1 = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch1 = new StopWatch();\n\n\t\t\tstopWatch1.start();\n\t\t}\n\n\t\ttry {\n\t\t\tLuceneHelperUtil.delete(_companyId);\n\t\t\tLuceneHelperUtil.checkLuceneDir(_companyId);\n\n\t\t\tList<Portlet> portlets = PortletLocalServiceUtil.getPortlets(\n\t\t\t\t_companyId);\n\n\t\t\tportlets = ListUtil.sort(portlets, new PortletLuceneComparator());\n\n\t\t\tfor (Portlet portlet : portlets) {\n\t\t\t\tif (!portlet.isActive()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tIndexer indexer = portlet.getIndexerInstance();\n\n\t\t\t\tif (indexer == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString indexerClass = portlet.getIndexerClass();\n\n\t\t\t\tStopWatch stopWatch2 = null;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstopWatch2 = new StopWatch();\n\n\t\t\t\t\tstopWatch2.start();\n\t\t\t\t}\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Reindexing with \" + indexerClass + \" started\");\n\t\t\t\t}\n\n\t\t\t\tindexer.reIndex(new String[] {String.valueOf(_companyId)});\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Reindexing with \" + indexerClass + \" completed in \" +\n\t\t\t\t\t\t\t(stopWatch2.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reindexing Lucene completed in \" +\n\t\t\t\t\t\t(stopWatch1.getTime() / Time.SECOND) + \" seconds\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Error encountered while reindexing\", e);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Reindexing Lucene failed\");\n\t\t\t}\n\t\t}\n\n\t\t_finished = true;\n\t}","commit_id":"d10a7d0afefe34b875268dc97597fb8238252319","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Check out.\n     *\n     * @param lengthToWrite\n     *            the length\n     * @throws IOException\n     *             Signals that an I/O exception has occurred.\n     */\n    private void checkOut(int lengthToWrite) throws IOException\n    {\n        if (_closed)\n            throw new IOException(\"CLOSED\");\n\n        if (_out == null)\n        {\n            long length=_wrapper.getContentLength();\n            if (_response.isCommitted() || (length >= 0 && length < _wrapper.getMinCompressSize()))\n                doNotCompress(false);\n            else if (lengthToWrite > _wrapper.getMinCompressSize())\n                doCompress();\n            else\n                _out = _bOut = new ByteArrayOutputStream2(_wrapper.getBufferSize());\n        }\n        else if (_bOut != null)\n        {\n            long length=_wrapper.getContentLength();\n            if (_response.isCommitted() || (length >= 0 && length < _wrapper.getMinCompressSize()))\n                doNotCompress(false);\n            else if (lengthToWrite >= (_bOut.getBuf().length - _bOut.getCount()))\n                doCompress();\n        }\n    }","id":5211,"modified_method":"/**\n     * Check out.\n     *\n     * @param lengthToWrite\n     *            the length\n     * @throws IOException\n     *             Signals that an I/O exception has occurred.\n     */\n    private void checkOut(int lengthToWrite) throws IOException\n    {\n        if (_closed)\n            throw new IOException(\"CLOSED\");\n\n        if (_out == null)\n        {            \n            // If this first write is larger than buffer size, then we are committing now\n            if (lengthToWrite>_wrapper.getBufferSize())\n            {\n                // if we know this is all the content and it is less than minimum, then do not compress, otherwise do compress\n                long length=_wrapper.getContentLength();\n                if (length>=0 && length<_wrapper.getMinCompressSize())\n                    doNotCompress(false);  // Not compressing by size, so no vary on request headers\n                else\n                    doCompress();\n            }\n            else\n            {\n                // start aggregating writes into a buffered output stream\n                _out = _bOut = new ByteArrayOutputStream2(_wrapper.getBufferSize());\n            }\n        }\n        // else are we aggregating writes?\n        else if (_bOut !=null)\n        {\n            // We are aggregating into the buffered output stream.  \n\n            // If this write fills the buffer, then we are committing\n            if (lengthToWrite>=(_bOut.getBuf().length - _bOut.getCount()))\n            {\n                // if we know this is all the content and it is less than minimum, then do not compress, otherwise do compress\n                long length=_wrapper.getContentLength();\n                if (length>=0 && length<_wrapper.getMinCompressSize())\n                    doNotCompress(false);  // Not compressing by size, so no vary on request headers\n                else\n                    doCompress();\n            }\n        }\n    }","commit_id":"3a46498a27e249e3674a0f7d3441362221c27034","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * @see org.eclipse.jetty.http.gzip.CompressedStream#createOutputStream()\n     */\n    public OutputStream getOutputStream()\n    {\n        return _out;\n    }","id":5212,"modified_method":"/**\n     * @see org.eclipse.jetty.servlets.gzip.CompressedStream#getOutputStream()\n     */\n    public OutputStream getOutputStream()\n    {\n        return _out;\n    }","commit_id":"3a46498a27e249e3674a0f7d3441362221c27034","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Check out.\n     * \n     * @param lengthToWrite\n     *            the length\n     * @throws IOException\n     *             Signals that an I/O exception has occurred.\n     */\n    private void checkOut(int lengthToWrite) throws IOException\n    {\n        if (_closed)\n            throw new IOException(\"CLOSED\");\n\n        if (_out == null)\n        {\n            long length=_wrapper.getContentLength();\n            if (_response.isCommitted() || (length >= 0 && length < _wrapper.getMinCompressSize()))\n                doNotCompress(false);\n            else if (lengthToWrite > _wrapper.getMinCompressSize())\n                doCompress();\n            else\n                _out = _bOut = new ByteArrayOutputStream2(_wrapper.getBufferSize());\n        }\n        else if (_bOut != null)\n        {\n            long length=_wrapper.getContentLength();\n            if (_response.isCommitted() || (length >= 0 && length < _wrapper.getMinCompressSize()))\n                doNotCompress(false);\n            else if (lengthToWrite >= (_bOut.getBuf().length - _bOut.getCount()))\n                doCompress();\n        }\n    }","id":5213,"modified_method":"/**\n     * Check out.\n     * \n     * @param lengthToWrite\n     *            the length\n     * @throws IOException\n     *             Signals that an I/O exception has occurred.\n     */\n    private void checkOut(int lengthToWrite) throws IOException\n    {\n        if (_closed)\n            throw new IOException(\"CLOSED\");\n\n        if (_out == null)\n        {            \n            // If this first write is larger than buffer size, then we are committing now\n            if (lengthToWrite>_wrapper.getBufferSize())\n            {\n                // if we know this is all the content and it is less than minimum, then do not compress, otherwise do compress\n                long length=_wrapper.getContentLength();\n                if (length>=0 && length<_wrapper.getMinCompressSize())\n                    doNotCompress(false);  // Not compressing by size, so no vary on request headers\n                else\n                    doCompress();\n            }\n            else\n            {\n                // start aggregating writes into a buffered output stream\n                _out = _bOut = new ByteArrayOutputStream2(_wrapper.getBufferSize());\n            }\n        }\n        // else are we aggregating writes?\n        else if (_bOut !=null)\n        {\n            // We are aggregating into the buffered output stream.  \n\n            // If this write fills the buffer, then we are committing\n            if (lengthToWrite>=(_bOut.getBuf().length - _bOut.getCount()))\n            {\n                // if we know this is all the content and it is less than minimum, then do not compress, otherwise do compress\n                long length=_wrapper.getContentLength();\n                if (length>=0 && length<_wrapper.getMinCompressSize())\n                    doNotCompress(false);  // Not compressing by size, so no vary on request headers\n                else\n                    doCompress();\n            }\n        }\n    }","commit_id":"ecbb5328972b68da4a16c9af5650bb53adf726b9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@ExposedCommand\n\tpublic static void generateInstanceHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.INSTANCE, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5214,"modified_method":"@ExposedCommand\n\tpublic static void generateInstanceHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.INSTANCE, null, fos );\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateInstanceCsvReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE CSV REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.csv\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.CSV,\n\t\t\t\t\tReportType.INSTANCE, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5215,"modified_method":"@ExposedCommand\n\tpublic static void generateInstanceCsvReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE CSV REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.csv\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.CSV,\n\t\t\t\t\tReportType.INSTANCE, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateElasticIpHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING ELASTIC IP HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_elastic_ip.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.ELASTIC_IP, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5216,"modified_method":"@ExposedCommand\n\tpublic static void generateElasticIpHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING ELASTIC IP HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_elastic_ip.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.ELASTIC_IP, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateSnapshotHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING Snapshot HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_snapshot.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.SNAPSHOT, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5217,"modified_method":"@ExposedCommand\n\tpublic static void generateSnapshotHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING Snapshot HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_snapshot.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.SNAPSHOT, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateVolumeHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING VOLUME HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_volume.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.VOLUME, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5218,"modified_method":"@ExposedCommand\n\tpublic static void generateVolumeHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING VOLUME HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_volume.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.VOLUME, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateS3HtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING S3 HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_s3.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.S3, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5219,"modified_method":"@ExposedCommand\n\tpublic static void generateS3HtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING S3 HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_s3.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.S3, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static Renderer getRenderer(ReportType type, ReportFormat format)\n\t{\n\t\tfinal Document document;\n\t\tif (format.equals(ReportFormat.CSV)) {\n\t\t\tdocument = new CsvDocument();\n\t\t} else if (format.equals(ReportFormat.HTML)) {\n\t\t\tdocument = new HtmlDocument();\t\t\t\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported format:\" + format);\n\t\t}\n\t\t\n\t\tif (type.equals(ReportType.INSTANCE)) {\n\t\t\treturn new InstanceRenderer(document);\n\t\t} else if (type.equals(ReportType.VOLUME)) {\n\t\t\treturn new VolumeRenderer(document);\t\t\t\n\t\t} else if (type.equals(ReportType.SNAPSHOT)) {\n\t\t\treturn new VolumeSnapshotRenderer(document);\n\t\t} else if (type.equals(ReportType.ELASTIC_IP)) {\n\t\t\treturn new ElasticIpRenderer(document);\n\t\t} else if (type.equals(ReportType.S3)) {\n\t\t\treturn new S3Renderer(document);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported type:\" + type);\t\t\t\n\t\t}\n\t\t\n\t}","id":5220,"modified_method":"public static Renderer getRenderer(ReportType type, ReportFormat format)\n\t{\n\t\tfinal Document document;\n\t\tif (format.equals(ReportFormat.CSV)) {\n\t\t\tdocument = new CsvDocument();\n\t\t} else if (format.equals(ReportFormat.HTML)) {\n\t\t\tdocument = new HtmlDocument();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported format:\" + format);\n\t\t}\n\t\t\n\t\tif (type.equals(ReportType.INSTANCE)) {\n\t\t\treturn new InstanceRenderer(document);\n\t\t} else if (type.equals(ReportType.VOLUME)) {\n\t\t\treturn new VolumeRenderer(document);\n\t\t} else if (type.equals(ReportType.SNAPSHOT)) {\n\t\t\treturn new VolumeSnapshotRenderer(document);\n\t\t} else if (type.equals(ReportType.ELASTIC_IP)) {\n\t\t\treturn new ElasticIpRenderer(document);\n\t\t} else if (type.equals(ReportType.S3)) {\n\t\t\treturn new S3Renderer(document);\n\t\t} else if (type.equals(ReportType.COMPUTE)) {\n\t\t\treturn new ComputeCapacityRenderer(document);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported type:\" + type);\n\t\t}\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static String generateReport( @Nonnull  final String type,\n                                         @Nonnull  final String format,\n                                                   final long start,\n                                                   final long end ) throws ReportGenerationException {\n      final ReportGenerator generator = ReportGenerator.getInstance();\n      final ByteArrayOutputStream reportOutput = new ByteArrayOutputStream(10240);\n      try {\n        generator.generateReport(\n            new Period( start, end ),\n            ReportFormat.valueOf(format.toUpperCase()),\n            ReportType.valueOf(type.toUpperCase().replace('-','_')),\n            null,\n            reportOutput,\n            null );\n      } catch ( final Exception e ) {\n        throw new ReportGenerationException( \"Error generating report\", e );\n\n      }\n\n      return new String( reportOutput.toByteArray(), Charsets.UTF_8 );\n    }","id":5221,"modified_method":"public static String generateReport( @Nonnull  final String type,\n                                         @Nonnull  final String format,\n                                                   final long start,\n                                                   final long end ) throws ReportGenerationException {\n      final ReportGenerator generator = ReportGenerator.getInstance();\n      final ByteArrayOutputStream reportOutput = new ByteArrayOutputStream(10240);\n      try {\n        generator.generateReport(\n            new Period( start, end ),\n            ReportFormat.valueOf(format.toUpperCase()),\n            ReportType.valueOf(type.toUpperCase().replace('-','_')),\n            null,\n            reportOutput );\n      } catch ( final Exception e ) {\n        throw new ReportGenerationException( \"Error generating report\", e );\n      }\n\n      return new String( reportOutput.toByteArray(), Charsets.UTF_8 );\n    }","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static ReportGenerator getInstance()\n\t{\n\t\tif (instance == null) {\n\t\t\tinstance = new ReportGenerator();\n\t\t}\n\t\treturn instance;\n\t}","id":5222,"modified_method":"public static ReportGenerator getInstance()\n\t{\n\t\treturn instance;\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n\t * STEVE: This is the method to use.\n\t * \n\t * @param displayUnits Can be null if you just want the default units.\n\t * @param type The type of report, which is INSTANCE for the time being regardless of what you specify\n\t * @param format The report format, which must be HTML at the moment.\n\t * @param period The period for which you wish to generate a report\n\t * @param out Where to send the generated report\n\t * @param accountId The account to generate the report as, which is ignored at present.\n\t * \n\t * @throws IOException If it cannot write to the stream you passed.\n\t */\n\tpublic void generateReport(Period period, ReportFormat format, ReportType type,\n\t\t\tUnits displayUnits, OutputStream out, String accountId)\n\t\tthrows IOException\n\t{\n\t\tif (period==null) {\n\t\t\tthrow new IllegalArgumentException(\"Period can't be null\");\n\t\t}\n\t\tif (type==null) {\n\t\t\tthrow new IllegalArgumentException(\"type can't be null\");\n\t\t}\n\t\tif (out==null) {\n\t\t\tthrow new IllegalArgumentException(\"out can't be null\");\n\t\t}\n\t\tif (format==null) format=ReportFormat.HTML;\n\t\t\n\t\tReportArtEntity report = new ReportArtEntity(period.getBeginningMs(), period.getEndingMs());\n\t\tif (displayUnits==null) displayUnits=Units.getDefaultDisplayUnits();\n\t\ttype.getGenerator().generateReportArt(report);\n\t\tRendererFactory.getRenderer(type, format).render(report, out, displayUnits);\n\t\t\n\t\treturn;\n\t}","id":5223,"modified_method":"/**\n\t * Generate a report.\n\t * \n\t * @param displayUnits Can be null if you just want the default units.\n\t * @param type The type of report, which is INSTANCE for the time being regardless of what you specify\n\t * @param format The report format, which must be HTML at the moment.\n\t * @param period The period for which you wish to generate a report\n\t * @param out Where to send the generated report\n\t *\n\t * @throws IOException If it cannot write to the stream you passed.\n\t */\n\tpublic void generateReport(Period period, ReportFormat format, ReportType type,\n\t\t\tUnits displayUnits, OutputStream out)\n\t\tthrows IOException\n\t{\n\t\tif (period==null) {\n\t\t\tthrow new IllegalArgumentException(\"Period can't be null\");\n\t\t}\n\t\tif (type==null) {\n\t\t\tthrow new IllegalArgumentException(\"type can't be null\");\n\t\t}\n\t\tif (out==null) {\n\t\t\tthrow new IllegalArgumentException(\"out can't be null\");\n\t\t}\n\t\tif (format==null) format=ReportFormat.HTML;\n\t\t\n\t\tReportArtEntity report = new ReportArtEntity(period.getBeginningMs(), period.getEndingMs());\n\t\tif (displayUnits==null) displayUnits=Units.getDefaultDisplayUnits();\n\t\ttype.getGenerator().generateReportArt(report);\n\t\tRendererFactory.getRenderer(type, format).render(report, out, displayUnits);\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n\t\t * <p>The total number of instances which can be created, based upon the amount of\n\t\t * \tcompute resources available in the cloud. This value is a <i>multiplier<\/i>, and you\n\t\t *  can determine how many instances of various types you can create by dividing it by some\n\t\t *  number, as follows:\n\t\t *\n\t\t *  <p>number of m1.small  instances : divide by 1.\n\t\t *  <p>number of m1.medium instances : divide by 2.\n\t\t *  <p>number of c1.medium instances : divide by 5.\n\t\t *  <p>number of m1.large  instances : divide by 4.\n\t\t *  <p>number of m1.xlarge instances : divide by 8.\n\t\t *  <p>number of c1.xlarge instances : divide by 20.\n\t\t *\n\t\t * See: http://aws.amazon.com/ec2/instance-types/\n\t\t */\n\t\tpublic void setEc2ComputeUnitsAvailable( final Integer numM1SmallInstancesAvailable )\n\t\t{\n\t\t\tthis.ec2ComputeUnitsAvailable.set( numM1SmallInstancesAvailable );\n\t\t}","id":5224,"modified_method":"/**\n\t\t * <p>The total number of instances which can be created, based upon the amount of\n\t\t * \tcompute resources available in the cloud. This value is a <i>multiplier<\/i>, and you\n\t\t *  can determine how many instances of various types you can create by dividing it by some\n\t\t *  number, as follows:\n\t\t *\n\t\t *  <p>number of m1.small  instances : divide by 1.\n\t\t *  <p>number of m1.medium instances : divide by 2.\n\t\t *  <p>number of c1.medium instances : divide by 5.\n\t\t *  <p>number of m1.large  instances : divide by 4.\n\t\t *  <p>number of m1.xlarge instances : divide by 8.\n\t\t *  <p>number of c1.xlarge instances : divide by 20.\n\t\t *\n\t\t * See: http://aws.amazon.com/ec2/instance-types/\n\t\t */\n\t\tpublic void setEc2ComputeUnitsAvailable( final Integer available )\n\t\t{\n\t\t\tthis.ec2ComputeUnitsAvailable.set( available );\n\t\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static String dump() {\n\t\tfinal StringBuilder builder = new StringBuilder( 512 );\n\t\tbuilder.append(\"Compute capacity:\\n\");\n\n\t\t// global compute\n\t\tbuilder.append(\"IP Addresses: \").append(globalModel.getNumPublicIpsAvailable()).append(\"\\n\");\n\t\tbuilder.append(\"S3 Storage  : \").append(globalModel.getSizeS3ObjectAvailableGB()).append(\" GiB\\n\");\n\n\t\t// zone compute\n\t\tfor ( final Map.Entry<String,ReportingComputeZoneDomainModel> modelEntry : zoneModels.entrySet() ) {\n\t\t\tbuilder.append(modelEntry.getKey()).append(\":\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Cores      : \").append(modelEntry.getValue().getEc2ComputeUnitsAvailable()).append(\"\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Disk       : \").append(modelEntry.getValue().getEc2DiskUnitsAvailable()).append(\" GiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Memory     : \").append(modelEntry.getValue().getEc2MemoryUnitsAvailable()).append(\" MiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"EBS Storage: \").append(modelEntry.getValue().getSizeEbsAvailableGB()).append(\" GiB\\n\");\n\t\t}\n\n\t\treturn builder.toString();\n\t}","id":5225,"modified_method":"public static String dump() {\n\t\tfinal StringBuilder builder = new StringBuilder( 512 );\n\t\tbuilder.append(\"Compute capacity:\\n\");\n\n\t\t// global compute\n\t\tbuilder.append(\"IP Addresses: \").append(globalModel.getNumPublicIpsAvailable()).append( \"/\" ).append(globalModel.getNumPublicIpsTotal()).append(\"\\n\");\n\t\tbuilder.append(\"S3 Storage  : \").append(globalModel.getSizeS3ObjectAvailableGB()).append( \"/\" ).append(globalModel.getSizeS3ObjectTotalGB()).append(\" GiB\\n\");\n\n\t\t// zone compute\n\t\tfor ( final Map.Entry<String,ReportingComputeZoneDomainModel> modelEntry : zoneModels.entrySet() ) {\n\t\t\tbuilder.append(modelEntry.getKey()).append(\":\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Cores      : \").append( modelEntry.getValue().getEc2ComputeUnitsAvailable() ).append(\"/\").append(modelEntry.getValue().getEc2ComputeUnitsTotal()).append(\"\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Disk       : \").append( modelEntry.getValue().getEc2DiskUnitsAvailable() ).append(\"/\").append(modelEntry.getValue().getEc2DiskUnitsTotal()).append(\" GiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Memory     : \").append( modelEntry.getValue().getEc2MemoryUnitsAvailable() ).append(\"/\").append(modelEntry.getValue().getEc2MemoryUnitsTotal()).append(\" MiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"EBS Storage: \").append( modelEntry.getValue().getSizeEbsAvailableGB() ).append(\"/\").append(modelEntry.getValue().getSizeEbsTotalGB()).append(\" GiB\\n\");\n\t\t}\n\n\t\treturn builder.toString();\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Nullable\n  private ReportingComputeZoneDomainModel getZoneModelForTags( @Nonnull final Set<Tag> tags ) {\n    ReportingComputeZoneDomainModel model = null;\n    for ( final Tag tag : tags ) {\n      if ( tag instanceof Dimension && \"availabilityZone\".equals(tag.getType()) ) {\n        model = getReportingComputeDomainModelForZone( tag.getValue() );\n      } else if ( tag instanceof Type ) {\n        return null;\n      }\n    }\n    return model;\n  }","id":5226,"modified_method":"@Nullable\n  private ReportingComputeZoneDomainModel getZoneModelForTags( @Nonnull final Set<Tag> tags ) {\n    ReportingComputeZoneDomainModel model = null;\n    for ( final Tag tag : tags ) {\n      if ( tag instanceof Dimension && \"availabilityZone\".equals(tag.getType()) ) {\n        model = getReportingComputeDomainModelForZone( tag.getValue() );\n      } else if ( tag instanceof Type && !tag.getType().equals(\"vm-type\")) {\n        return null;\n      }\n    }\n    return model;\n  }","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void fireEvent( @Nonnull final ResourceAvailabilityEvent event ) {\n    Preconditions.checkNotNull(event, \"Event is required\");\n\n    final Function<ReportingComputeZoneDomainModel,Function<Long,Void>> zoneSetter = zoneSetters.get( event.getType() );\n    final Function<ReportingComputeDomainModel,Function<Long,Void>> globalSetter = globalSetters.get( event.getType() );\n    for ( final Availability availability : event.getAvailability() ) {\n      if ( zoneSetter != null ) {\n        final ReportingComputeZoneDomainModel zoneModel = getZoneModelForTags( availability.getTags() );\n        if ( zoneModel == null ) continue;\n        zoneSetter.apply( zoneModel ).apply( availability.getAvailable() );\n      }\n      if ( globalSetter != null ) {\n        final ReportingComputeDomainModel globalModel = getReportingComputeDomainModel();\n        globalSetter.apply( globalModel ).apply( availability.getAvailable() );\n      }\n    }\n  }","id":5227,"modified_method":"@Override\n  public void fireEvent( @Nonnull final ResourceAvailabilityEvent event ) {\n    Preconditions.checkNotNull(event, \"Event is required\");\n\n    final ModelComputeUpdater<ReportingComputeZoneDomainModel> zoneSetter = zoneSetters.get( event.getType() );\n    final ModelComputeUpdater<ReportingComputeDomainModel> globalSetter = globalSetters.get( event.getType() );\n    for ( final Availability availability : event.getAvailability() ) {\n      if ( zoneSetter != null ) {\n        final ReportingComputeZoneDomainModel zoneModel = getZoneModelForTags( availability.getTags() );\n        if ( zoneModel == null ) continue;\n        zoneSetter.update( zoneModel, availability.getTags(), availability.getAvailable(), availability.getTotal() );\n      }\n      if ( globalSetter != null ) {\n        final ReportingComputeDomainModel globalModel = getReportingComputeDomainModel();\n        globalSetter.update( globalModel, availability.getTags(), availability.getAvailable(), availability.getTotal() );\n      }\n    }\n  }","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public UsageTotalsArtEntity()\n\t{\n\t\tthis.instanceTotals = new InstanceUsageArtEntity();\n\t\tthis.volumeTotals = new VolumeUsageArtEntity();\n\t\tthis.bucketTotals = new BucketUsageArtEntity();\n\t\tthis.volumeSnapshotTotals = new VolumeSnapshotUsageArtEntity();\n\t\tthis.elasticIpTotals = new ElasticIpUsageArtEntity();\n\t\tthis.typeTotals = new HashMap<String,InstanceUsageArtEntity>();\n\t}","id":5228,"modified_method":"public UsageTotalsArtEntity()\n\t{\n\t\tthis.instanceTotals = new InstanceUsageArtEntity();\n\t\tthis.volumeTotals = new VolumeUsageArtEntity();\n\t\tthis.bucketTotals = new BucketUsageArtEntity();\n\t\tthis.volumeSnapshotTotals = new VolumeSnapshotUsageArtEntity();\n\t\tthis.elasticIpTotals = new ElasticIpUsageArtEntity();\n\t\tthis.computeCapacityArtEntity = new ComputeCapacityArtEntity();\n\t\tthis.typeTotals = new HashMap<String,InstanceUsageArtEntity>();\n\t}","commit_id":"f8ffadfa95438384e6f152dc7331141ca15d191e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateS3HtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING S3 HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_s3.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.S3, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5229,"modified_method":"@ExposedCommand\n\tpublic static void generateS3HtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING S3 HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_s3.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.S3, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateElasticIpHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING ELASTIC IP HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_elastic_ip.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.ELASTIC_IP, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5230,"modified_method":"@ExposedCommand\n\tpublic static void generateElasticIpHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING ELASTIC IP HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_elastic_ip.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.ELASTIC_IP, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateInstanceHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.INSTANCE, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5231,"modified_method":"@ExposedCommand\n\tpublic static void generateInstanceHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.INSTANCE, null, fos );\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateVolumeHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING VOLUME HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_volume.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.VOLUME, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5232,"modified_method":"@ExposedCommand\n\tpublic static void generateVolumeHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING VOLUME HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_volume.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.VOLUME, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateSnapshotHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING Snapshot HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_snapshot.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.SNAPSHOT, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5233,"modified_method":"@ExposedCommand\n\tpublic static void generateSnapshotHtmlReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING Snapshot HTML REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_snapshot.html\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.HTML,\n\t\t\t\t\tReportType.SNAPSHOT, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@ExposedCommand\n\tpublic static void generateInstanceCsvReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE CSV REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.csv\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.CSV,\n\t\t\t\t\tReportType.INSTANCE, null, fos, null);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":5234,"modified_method":"@ExposedCommand\n\tpublic static void generateInstanceCsvReport()\n\t{\n\t\tlog.debug(\" ----> GENERATING INSTANCE CSV REPORT\");\n\n\t\tPeriod period = new Period(START_TIME + (PERIOD_DURATION*3), START_TIME + (PERIOD_DURATION * 200));\n\t\t\n\t\tFile file = new File(\"/tmp/report_instance.csv\");\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tReportGenerator.getInstance().generateReport(period, ReportFormat.CSV,\n\t\t\t\t\tReportType.INSTANCE, null, fos);\n\t\t} catch (IOException iox) {\n\t\t\tlog.error(\"Error generating report\", iox);\n\t\t} finally {\n\t\t\tif (fos!=null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlog.error(\"Error closing stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static Renderer getRenderer(ReportType type, ReportFormat format)\n\t{\n\t\tfinal Document document;\n\t\tif (format.equals(ReportFormat.CSV)) {\n\t\t\tdocument = new CsvDocument();\n\t\t} else if (format.equals(ReportFormat.HTML)) {\n\t\t\tdocument = new HtmlDocument();\t\t\t\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported format:\" + format);\n\t\t}\n\t\t\n\t\tif (type.equals(ReportType.INSTANCE)) {\n\t\t\treturn new InstanceRenderer(document);\n\t\t} else if (type.equals(ReportType.VOLUME)) {\n\t\t\treturn new VolumeRenderer(document);\t\t\t\n\t\t} else if (type.equals(ReportType.SNAPSHOT)) {\n\t\t\treturn new VolumeSnapshotRenderer(document);\n\t\t} else if (type.equals(ReportType.ELASTIC_IP)) {\n\t\t\treturn new ElasticIpRenderer(document);\n\t\t} else if (type.equals(ReportType.S3)) {\n\t\t\treturn new S3Renderer(document);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported type:\" + type);\t\t\t\n\t\t}\n\t\t\n\t}","id":5235,"modified_method":"public static Renderer getRenderer(ReportType type, ReportFormat format)\n\t{\n\t\tfinal Document document;\n\t\tif (format.equals(ReportFormat.CSV)) {\n\t\t\tdocument = new CsvDocument();\n\t\t} else if (format.equals(ReportFormat.HTML)) {\n\t\t\tdocument = new HtmlDocument();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported format:\" + format);\n\t\t}\n\t\t\n\t\tif (type.equals(ReportType.INSTANCE)) {\n\t\t\treturn new InstanceRenderer(document);\n\t\t} else if (type.equals(ReportType.VOLUME)) {\n\t\t\treturn new VolumeRenderer(document);\n\t\t} else if (type.equals(ReportType.SNAPSHOT)) {\n\t\t\treturn new VolumeSnapshotRenderer(document);\n\t\t} else if (type.equals(ReportType.ELASTIC_IP)) {\n\t\t\treturn new ElasticIpRenderer(document);\n\t\t} else if (type.equals(ReportType.S3)) {\n\t\t\treturn new S3Renderer(document);\n\t\t} else if (type.equals(ReportType.CAPACITY)) {\n\t\t\treturn new ComputeCapacityRenderer(document);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupported type:\" + type);\n\t\t}\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static String generateReport( @Nonnull  final String type,\n                                         @Nonnull  final String format,\n                                                   final long start,\n                                                   final long end ) throws ReportGenerationException {\n      final ReportGenerator generator = ReportGenerator.getInstance();\n      final ByteArrayOutputStream reportOutput = new ByteArrayOutputStream(10240);\n      try {\n        generator.generateReport(\n            new Period( start, end ),\n            ReportFormat.valueOf(format.toUpperCase()),\n            ReportType.valueOf(type.toUpperCase().replace('-','_')),\n            null,\n            reportOutput,\n            null );\n      } catch ( final Exception e ) {\n        throw new ReportGenerationException( \"Error generating report\", e );\n      }\n\n      return new String( reportOutput.toByteArray(), Charsets.UTF_8 );\n    }","id":5236,"modified_method":"public static String generateReport( @Nonnull  final String type,\n                                         @Nonnull  final String format,\n                                                   final long start,\n                                                   final long end ) throws ReportGenerationException {\n      final ReportGenerator generator = ReportGenerator.getInstance();\n      final ByteArrayOutputStream reportOutput = new ByteArrayOutputStream(10240);\n      try {\n        generator.generateReport(\n            new Period( start, end ),\n            ReportFormat.valueOf(format.toUpperCase()),\n            ReportType.valueOf(type.toUpperCase().replace('-','_')),\n            null,\n            reportOutput );\n      } catch ( final Exception e ) {\n        throw new ReportGenerationException( \"Error generating report\", e );\n      }\n\n      return new String( reportOutput.toByteArray(), Charsets.UTF_8 );\n    }","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static ReportGenerator getInstance()\n\t{\n\t\tif (instance == null) {\n\t\t\tinstance = new ReportGenerator();\n\t\t}\n\t\treturn instance;\n\t}","id":5237,"modified_method":"public static ReportGenerator getInstance()\n\t{\n\t\treturn instance;\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n\t * STEVE: This is the method to use.\n\t * \n\t * @param displayUnits Can be null if you just want the default units.\n\t * @param type The type of report, which is INSTANCE for the time being regardless of what you specify\n\t * @param format The report format, which must be HTML at the moment.\n\t * @param period The period for which you wish to generate a report\n\t * @param out Where to send the generated report\n\t * @param accountId The account to generate the report as, which is ignored at present.\n\t * \n\t * @throws IOException If it cannot write to the stream you passed.\n\t */\n\tpublic void generateReport(Period period, ReportFormat format, ReportType type,\n\t\t\tUnits displayUnits, OutputStream out, String accountId)\n\t\tthrows IOException\n\t{\n\t\tif (period==null) {\n\t\t\tthrow new IllegalArgumentException(\"Period can't be null\");\n\t\t}\n\t\tif (type==null) {\n\t\t\tthrow new IllegalArgumentException(\"type can't be null\");\n\t\t}\n\t\tif (out==null) {\n\t\t\tthrow new IllegalArgumentException(\"out can't be null\");\n\t\t}\n\t\tif (format==null) format=ReportFormat.HTML;\n\t\t\n\t\tReportArtEntity report = new ReportArtEntity(period.getBeginningMs(), period.getEndingMs());\n\t\tif (displayUnits==null) displayUnits=Units.getDefaultDisplayUnits();\n\t\ttype.getGenerator().generateReportArt(report);\n\t\tRendererFactory.getRenderer(type, format).render(report, out, displayUnits);\n\t\t\n\t\treturn;\n\t}","id":5238,"modified_method":"/**\n\t * Generate a report.\n\t * \n\t * @param displayUnits Can be null if you just want the default units.\n\t * @param type The type of report, which is INSTANCE for the time being regardless of what you specify\n\t * @param format The report format, which must be HTML at the moment.\n\t * @param period The period for which you wish to generate a report\n\t * @param out Where to send the generated report\n\t *\n\t * @throws IOException If it cannot write to the stream you passed.\n\t */\n\tpublic void generateReport(Period period, ReportFormat format, ReportType type,\n\t\t\tUnits displayUnits, OutputStream out)\n\t\tthrows IOException\n\t{\n\t\tif (period==null) {\n\t\t\tthrow new IllegalArgumentException(\"Period can't be null\");\n\t\t}\n\t\tif (type==null) {\n\t\t\tthrow new IllegalArgumentException(\"type can't be null\");\n\t\t}\n\t\tif (out==null) {\n\t\t\tthrow new IllegalArgumentException(\"out can't be null\");\n\t\t}\n\t\tif (format==null) format=ReportFormat.HTML;\n\t\t\n\t\tReportArtEntity report = new ReportArtEntity(period.getBeginningMs(), period.getEndingMs());\n\t\tif (displayUnits==null) displayUnits=Units.getDefaultDisplayUnits();\n\t\ttype.getGenerator().generateReportArt(report);\n\t\tRendererFactory.getRenderer(type, format).render(report, out, displayUnits);\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static String dump() {\n\t\tfinal StringBuilder builder = new StringBuilder( 512 );\n\t\tbuilder.append(\"Compute capacity:\\n\");\n\n\t\t// global compute\n\t\tbuilder.append(\"IP Addresses: \").append(globalModel.getNumPublicIpsAvailable()).append(\"\\n\");\n\t\tbuilder.append(\"S3 Storage  : \").append(globalModel.getSizeS3ObjectAvailableGB()).append(\" GiB\\n\");\n\n\t\t// zone compute\n\t\tfor ( final Map.Entry<String,ReportingComputeZoneDomainModel> modelEntry : zoneModels.entrySet() ) {\n\t\t\tbuilder.append(modelEntry.getKey()).append(\":\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Cores      : \").append(modelEntry.getValue().getEc2ComputeUnitsAvailable()).append(\"\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Disk       : \").append(modelEntry.getValue().getEc2DiskUnitsAvailable()).append(\" GiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Memory     : \").append(modelEntry.getValue().getEc2MemoryUnitsAvailable()).append(\" MiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"EBS Storage: \").append(modelEntry.getValue().getSizeEbsAvailableGB()).append(\" GiB\\n\");\n\t\t}\n\n\t\treturn builder.toString();\n\t}","id":5239,"modified_method":"public static String dump() {\n\t\tfinal StringBuilder builder = new StringBuilder( 512 );\n\t\tbuilder.append(\"Compute capacity:\\n\");\n\n\t\t// global compute\n\t\tbuilder.append(\"IP Addresses: \").append(globalModel.getNumPublicIpsAvailable()).append(\"/\").append(globalModel.getNumPublicIpsTotal()).append(\"\\n\");\n\t\tbuilder.append(\"S3 Storage  : \").append(globalModel.getSizeS3ObjectAvailableGB()).append(\"/\").append(globalModel.getSizeS3ObjectTotalGB()).append(\" GiB\\n\");\n\n\t\t// zone compute\n\t\tfor ( final Map.Entry<String,ReportingComputeZoneDomainModel> modelEntry : zoneModels.entrySet() ) {\n\t\t\tbuilder.append(modelEntry.getKey()).append(\":\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Cores      : \").append(modelEntry.getValue().getEc2ComputeUnitsAvailable()).append(\"/\").append(modelEntry.getValue().getEc2ComputeUnitsTotal()).append(\"\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Disk       : \").append(modelEntry.getValue().getEc2DiskUnitsAvailable()).append(\"/\").append(modelEntry.getValue().getEc2DiskUnitsTotal()).append(\" GiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"Memory     : \").append(modelEntry.getValue().getEc2MemoryUnitsAvailable()).append(\"/\").append(modelEntry.getValue().getEc2MemoryUnitsTotal()).append(\" MiB\\n\");\n\t\t\tbuilder.append(\"\\t\").append(\"EBS Storage: \").append(modelEntry.getValue().getSizeEbsAvailableGB()).append(\"/\").append(modelEntry.getValue().getSizeEbsTotalGB()).append(\" GiB\\n\");\n\t\t}\n\n\t\treturn builder.toString();\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n\t\t * <p>The total number of instances which can be created, based upon the amount of\n\t\t * \tcompute resources available in the cloud. This value is a <i>multiplier<\/i>, and you\n\t\t *  can determine how many instances of various types you can create by dividing it by some\n\t\t *  number, as follows:\n\t\t *\n\t\t *  <p>number of m1.small  instances : divide by 1.\n\t\t *  <p>number of m1.medium instances : divide by 2.\n\t\t *  <p>number of c1.medium instances : divide by 5.\n\t\t *  <p>number of m1.large  instances : divide by 4.\n\t\t *  <p>number of m1.xlarge instances : divide by 8.\n\t\t *  <p>number of c1.xlarge instances : divide by 20.\n\t\t *\n\t\t * See: http://aws.amazon.com/ec2/instance-types/\n\t\t */\n\t\tpublic void setEc2ComputeUnitsAvailable( final Integer numM1SmallInstancesAvailable )\n\t\t{\n\t\t\tthis.ec2ComputeUnitsAvailable.set( numM1SmallInstancesAvailable );\n\t\t}","id":5240,"modified_method":"/**\n\t\t * <p>The total number of instances which can be created, based upon the amount of\n\t\t * \tcompute resources available in the cloud. This value is a <i>multiplier<\/i>, and you\n\t\t *  can determine how many instances of various types you can create by dividing it by some\n\t\t *  number, as follows:\n\t\t *\n\t\t *  <p>number of m1.small  instances : divide by 1.\n\t\t *  <p>number of m1.medium instances : divide by 2.\n\t\t *  <p>number of c1.medium instances : divide by 5.\n\t\t *  <p>number of m1.large  instances : divide by 4.\n\t\t *  <p>number of m1.xlarge instances : divide by 8.\n\t\t *  <p>number of c1.xlarge instances : divide by 20.\n\t\t *\n\t\t * See: http://aws.amazon.com/ec2/instance-types/\n\t\t */\n\t\tpublic void setEc2ComputeUnitsAvailable( final Integer available )\n\t\t{\n\t\t\tthis.ec2ComputeUnitsAvailable.set( available );\n\t\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void fireEvent( @Nonnull final ResourceAvailabilityEvent event ) {\n    Preconditions.checkNotNull(event, \"Event is required\");\n\n    final Function<ReportingComputeZoneDomainModel,Function<Long,Void>> zoneSetter = zoneSetters.get( event.getType() );\n    final Function<ReportingComputeDomainModel,Function<Long,Void>> globalSetter = globalSetters.get( event.getType() );\n    for ( final Availability availability : event.getAvailability() ) {\n      if ( zoneSetter != null ) {\n        final ReportingComputeZoneDomainModel zoneModel = getZoneModelForTags( availability.getTags() );\n        if ( zoneModel == null ) continue;\n        zoneSetter.apply( zoneModel ).apply( availability.getAvailable() );\n      }\n      if ( globalSetter != null ) {\n        final ReportingComputeDomainModel globalModel = getReportingComputeDomainModel();\n        globalSetter.apply( globalModel ).apply( availability.getAvailable() );\n      }\n    }\n  }","id":5241,"modified_method":"@Override\n  public void fireEvent( @Nonnull final ResourceAvailabilityEvent event ) {\n    Preconditions.checkNotNull(event, \"Event is required\");\n\n    final ModelComputeUpdater<ReportingComputeZoneDomainModel> zoneSetter = zoneSetters.get( event.getType() );\n    final ModelComputeUpdater<ReportingComputeDomainModel> globalSetter = globalSetters.get( event.getType() );\n    for ( final Availability availability : event.getAvailability() ) {\n      if ( zoneSetter != null ) {\n        final ReportingComputeZoneDomainModel zoneModel = getZoneModelForTags( availability.getTags() );\n        if ( zoneModel == null ) continue;\n        zoneSetter.update( zoneModel, availability.getAvailable(), availability.getTotal() );\n      }\n      if ( globalSetter != null ) {\n        final ReportingComputeDomainModel globalModel = getReportingComputeDomainModel();\n        globalSetter.update( globalModel, availability.getAvailable(), availability.getTotal() );\n      }\n    }\n  }","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public UsageTotalsArtEntity()\n\t{\n\t\tthis.instanceTotals = new InstanceUsageArtEntity();\n\t\tthis.volumeTotals = new VolumeUsageArtEntity();\n\t\tthis.bucketTotals = new BucketUsageArtEntity();\n\t\tthis.volumeSnapshotTotals = new VolumeSnapshotUsageArtEntity();\n\t\tthis.elasticIpTotals = new ElasticIpUsageArtEntity();\n\t\tthis.typeTotals = new HashMap<String,InstanceUsageArtEntity>();\n\t}","id":5242,"modified_method":"public UsageTotalsArtEntity()\n\t{\n\t\tthis.instanceTotals = new InstanceUsageArtEntity();\n\t\tthis.volumeTotals = new VolumeUsageArtEntity();\n\t\tthis.bucketTotals = new BucketUsageArtEntity();\n\t\tthis.volumeSnapshotTotals = new VolumeSnapshotUsageArtEntity();\n\t\tthis.elasticIpTotals = new ElasticIpUsageArtEntity();\n\t\tthis.computeCapacityArtEntity = new ComputeCapacityArtEntity();\n\t\tthis.typeTotals = new HashMap<String,InstanceUsageArtEntity>();\n\t}","commit_id":"c7f2ccdadbfe4d2b4aef5578d186c68b6e6860ad","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@SuppressWarnings(\"unused\")\r\n\t@Test\r\n\tpublic void populate() {\r\n\t\tdatabase.open(\"admin\", \"admin\");\r\n\r\n\t\tOClass vehicleClass = database.getMetadata().getSchema().createClass(\"GraphVehicle\")\r\n\t\t\t\t.setSuperClass(database.getMetadata().getSchema().getClass(OGraphVertex.class));\r\n\r\n\t\tdatabase.getMetadata().getSchema().createClass(\"GraphCar\").setSuperClass(vehicleClass);\r\n\t\tdatabase.getMetadata().getSchema().createClass(\"GraphMotocycle\").setSuperClass(vehicleClass);\r\n\t\tdatabase.getMetadata().getSchema().save();\r\n\r\n\t\tOGraphVertex carNode = database.createVertex(\"GraphCar\").set(\"brand\", \"Hyundai\").set(\"model\", \"Coupe\").set(\"year\", 2003).save();\r\n\t\tOGraphVertex motoNode = database.createVertex(\"GraphMotocycle\").set(\"brand\", \"Yamaha\").set(\"model\", \"X-City 250\")\r\n\t\t\t\t.set(\"year\", 2009).save();\r\n\r\n\t\tList<OGraphVertex> result = database.query(new OSQLSynchQuery<OGraphVertex>(\"select from GraphVehicle\"));\r\n\t\tAssert.assertEquals(result.size(), 2);\r\n\t\tfor (OGraphVertex v : result) {\r\n\t\t\tAssert.assertTrue(v.getDocument().getSchemaClass().isSubClassOf(vehicleClass));\r\n\t\t}\r\n\r\n\t\tdatabase.close();\r\n\t}","id":5243,"modified_method":"@SuppressWarnings(\"unused\")\r\n\t@Test\r\n\tpublic void populate() {\r\n\t\tdatabase.open(\"admin\", \"admin\");\r\n\r\n\t\tOClass vehicleClass = database.getMetadata().getSchema().getClass(\"GraphVehicle\");\r\n\t\tif (vehicleClass != null) {\r\n\t\t\tdatabase.getMetadata().getSchema().removeClass(\"GraphVehicle\");\r\n\t\t\tdatabase.getMetadata().getSchema().removeClass(\"GraphCar\");\r\n\t\t\tdatabase.getMetadata().getSchema().removeClass(\"GraphMotocycle\");\r\n\r\n\t\t\tvehicleClass = database.getMetadata().getSchema().createClass(\"GraphVehicle\")\r\n\t\t\t\t\t.setSuperClass(database.getMetadata().getSchema().getClass(OGraphVertex.class));\r\n\r\n\t\t\tdatabase.getMetadata().getSchema().createClass(\"GraphCar\").setSuperClass(vehicleClass);\r\n\t\t\tdatabase.getMetadata().getSchema().createClass(\"GraphMotocycle\").setSuperClass(vehicleClass);\r\n\t\t\tdatabase.getMetadata().getSchema().save();\r\n\t\t}\r\n\r\n\t\tint existants = database.query(new OSQLSynchQuery<OGraphVertex>(\"select from GraphVehicle\")).size();\r\n\r\n\t\tOGraphVertex carNode = database.createVertex(\"GraphCar\").set(\"brand\", \"Hyundai\").set(\"model\", \"Coupe\").set(\"year\", 2003).save();\r\n\t\tOGraphVertex motoNode = database.createVertex(\"GraphMotocycle\").set(\"brand\", \"Yamaha\").set(\"model\", \"X-City 250\")\r\n\t\t\t\t.set(\"year\", 2009).save();\r\n\r\n\t\tList<OGraphVertex> result = database.query(new OSQLSynchQuery<OGraphVertex>(\"select from GraphVehicle\"));\r\n\t\tAssert.assertEquals(result.size(), 2 + existants);\r\n\t\tfor (OGraphVertex v : result) {\r\n\t\t\tAssert.assertTrue(v.getDocument().getSchemaClass().isSubClassOf(vehicleClass));\r\n\t\t}\r\n\r\n\t\tdatabase.close();\r\n\t}","commit_id":"669f3aaf43c7818db50c19d82fa3bedf45e30c4c","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n\t * Returns true if the current instance extends the passed schema class (iClass).\r\n\t * \r\n\t * @param iClass\r\n\t * @return\r\n\t * @see #isSuperClassOf(OClass)\r\n\t */\r\n\tpublic boolean isSubClassOf(final OClass iClass) {\r\n\t\tOClass cls = this;\r\n\t\twhile (cls != null) {\r\n\t\t\tif (cls.equals(iClass))\r\n\t\t\t\treturn true;\r\n\t\t\tcls = cls.getSuperClass();\r\n\t\t}\r\n\t\treturn false;\r\n\t}","id":5244,"modified_method":"/**\r\n\t * Returns true if the current instance extends the passed schema class (iClass).\r\n\t * \r\n\t * @param iClass\r\n\t * @return\r\n\t * @see #isSuperClassOf(OClass)\r\n\t */\r\n\tpublic boolean isSubClassOf(final OClass iClass) {\r\n\t\tif( iClass == null )\r\n\t\t\treturn false;\r\n\t\t\r\n\t\tOClass cls = this;\r\n\t\twhile (cls != null) {\r\n\t\t\tif (cls.equals(iClass))\r\n\t\t\t\treturn true;\r\n\t\t\tcls = cls.getSuperClass();\r\n\t\t}\r\n\t\treturn false;\r\n\t}","commit_id":"669f3aaf43c7818db50c19d82fa3bedf45e30c4c","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        out.writeByte(searchType.id());\n\n        out.writeVInt(indices.length);\n        for (String index : indices) {\n            out.writeString(index);\n        }\n\n        out.writeOptionalString(routing);\n        out.writeOptionalString(preference);\n\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        source.writeTo(out);\n        out.writeStringArray(types);\n        indicesOptions.writeIndicesOptions(out);\n        out.writeOptionalBoolean(requestCache);\n        out.writeOptionalStreamable(template);\n    }","id":5245,"modified_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        out.writeByte(searchType.id());\n\n        out.writeVInt(indices.length);\n        for (String index : indices) {\n            out.writeString(index);\n        }\n\n        out.writeOptionalString(routing);\n        out.writeOptionalString(preference);\n\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        if (source == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            source.writeTo(out);\n        }\n        out.writeStringArray(types);\n        indicesOptions.writeIndicesOptions(out);\n        out.writeOptionalBoolean(requestCache);\n        out.writeOptionalStreamable(template);\n    }","commit_id":"ef5fc721e53da3e6ac69e9ae8160b13a4ebf5787","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Constructs a new search request against the provided indices with the given search source.\n     */\n    public SearchRequest(String[] indices, SearchSourceBuilder source) {\n        indices(indices);\n        this.source = source;\n    }","id":5246,"modified_method":"/**\n     * Constructs a new search request against the provided indices with the given search source.\n     */\n    public SearchRequest(String[] indices, SearchSourceBuilder source) {\n        if (source == null) {\n            throw new IllegalArgumentException(\"source must not be null\");\n        }\n        indices(indices);\n        this.source = source;\n    }","commit_id":"ef5fc721e53da3e6ac69e9ae8160b13a4ebf5787","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        super.readFrom(in);\n        searchType = SearchType.fromId(in.readByte());\n\n        indices = new String[in.readVInt()];\n        for (int i = 0; i < indices.length; i++) {\n            indices[i] = in.readString();\n        }\n\n        routing = in.readOptionalString();\n        preference = in.readOptionalString();\n\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n        source = SearchSourceBuilder.readSearchSourceFrom(in);\n\n        types = in.readStringArray();\n        indicesOptions = IndicesOptions.readIndicesOptions(in);\n\n        requestCache = in.readOptionalBoolean();\n        template = in.readOptionalStreamable(new Template());\n    }","id":5247,"modified_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        super.readFrom(in);\n        searchType = SearchType.fromId(in.readByte());\n\n        indices = new String[in.readVInt()];\n        for (int i = 0; i < indices.length; i++) {\n            indices[i] = in.readString();\n        }\n\n        routing = in.readOptionalString();\n        preference = in.readOptionalString();\n\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n        if (in.readBoolean()) {\n            source = SearchSourceBuilder.readSearchSourceFrom(in);\n        }\n\n        types = in.readStringArray();\n        indicesOptions = IndicesOptions.readIndicesOptions(in);\n\n        requestCache = in.readOptionalBoolean();\n        template = in.readOptionalStreamable(new Template());\n    }","commit_id":"ef5fc721e53da3e6ac69e9ae8160b13a4ebf5787","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * The source of the search request.\n     */\n    public SearchRequest source(SearchSourceBuilder sourceBuilder) {\n        this.source = sourceBuilder;\n        return this;\n    }","id":5248,"modified_method":"/**\n     * The source of the search request.\n     */\n    public SearchRequest source(SearchSourceBuilder sourceBuilder) {\n        if (sourceBuilder == null) {\n            throw new IllegalArgumentException(\"source must not be null\");\n        }\n        this.source = sourceBuilder;\n        return this;\n    }","commit_id":"ef5fc721e53da3e6ac69e9ae8160b13a4ebf5787","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void doWriteTo(StreamOutput out) throws IOException {\n        out.writeString(fieldName);\n        boolean hasShapeBytes = shapeBytes != null;\n        out.writeBoolean(hasShapeBytes);\n        if (hasShapeBytes) {\n            out.writeBytesReference(shapeBytes);\n        } else {\n            out.writeOptionalString(indexedShapeId);\n            out.writeOptionalString(indexedShapeType);\n            out.writeOptionalString(indexedShapeIndex);\n            out.writeOptionalString(indexedShapePath);\n        }\n        relation.writeTo(out);\n        strategy.writeTo(out);\n    }","id":5249,"modified_method":"@Override\n    protected void doWriteTo(StreamOutput out) throws IOException {\n        out.writeString(fieldName);\n        boolean hasShapeBytes = shapeBytes != null;\n        out.writeBoolean(hasShapeBytes);\n        if (hasShapeBytes) {\n            out.writeBytesReference(shapeBytes);\n        } else {\n            out.writeOptionalString(indexedShapeId);\n            out.writeOptionalString(indexedShapeType);\n            out.writeOptionalString(indexedShapeIndex);\n            out.writeOptionalString(indexedShapePath);\n        }\n        relation.writeTo(out);\n        boolean hasStrategy = strategy != null;\n        out.writeBoolean(hasStrategy);\n        if (hasStrategy) {\n            strategy.writeTo(out);\n        }\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected GeoShapeQueryBuilder doReadFrom(StreamInput in) throws IOException {\n        String fieldName = in.readString();\n        GeoShapeQueryBuilder builder;\n        if (in.readBoolean()) {\n            BytesReference shapeBytes = in.readBytesReference();\n            builder = new GeoShapeQueryBuilder(fieldName, shapeBytes);\n        } else {\n            String indexedShapeId = in.readOptionalString();\n            String indexedShapeType = in.readOptionalString();\n            String indexedShapeIndex = in.readOptionalString();\n            String indexedShapePath = in.readOptionalString();\n            builder = new GeoShapeQueryBuilder(fieldName, indexedShapeId, indexedShapeType);\n            if (indexedShapeIndex != null) {\n                builder.indexedShapeIndex = indexedShapeIndex;\n            }\n            if (indexedShapePath != null) {\n                builder.indexedShapePath = indexedShapePath;\n            }\n        }\n        builder.relation = ShapeRelation.DISJOINT.readFrom(in);\n        builder.strategy = SpatialStrategy.RECURSIVE.readFrom(in);\n        return builder;\n    }","id":5250,"modified_method":"@Override\n    protected GeoShapeQueryBuilder doReadFrom(StreamInput in) throws IOException {\n        String fieldName = in.readString();\n        GeoShapeQueryBuilder builder;\n        if (in.readBoolean()) {\n            BytesReference shapeBytes = in.readBytesReference();\n            builder = new GeoShapeQueryBuilder(fieldName, shapeBytes);\n        } else {\n            String indexedShapeId = in.readOptionalString();\n            String indexedShapeType = in.readOptionalString();\n            String indexedShapeIndex = in.readOptionalString();\n            String indexedShapePath = in.readOptionalString();\n            builder = new GeoShapeQueryBuilder(fieldName, indexedShapeId, indexedShapeType);\n            if (indexedShapeIndex != null) {\n                builder.indexedShapeIndex = indexedShapeIndex;\n            }\n            if (indexedShapePath != null) {\n                builder.indexedShapePath = indexedShapePath;\n            }\n        }\n        builder.relation = ShapeRelation.DISJOINT.readFrom(in);\n        if (in.readBoolean()) {\n            builder.strategy = SpatialStrategy.RECURSIVE.readFrom(in);\n        }\n        return builder;\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        super.readFrom(in);\n        searchType = SearchType.fromId(in.readByte());\n\n        indices = new String[in.readVInt()];\n        for (int i = 0; i < indices.length; i++) {\n            indices[i] = in.readString();\n        }\n\n        routing = in.readOptionalString();\n        preference = in.readOptionalString();\n\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n\n        source = SearchSourceBuilder.PROTOTYPE.readFrom(in);\n\n        types = in.readStringArray();\n        indicesOptions = IndicesOptions.readIndicesOptions(in);\n\n        requestCache = in.readOptionalBoolean();\n        template = in.readOptionalStreamable(new Template());\n    }","id":5251,"modified_method":"@Override\n    public void readFrom(StreamInput in) throws IOException {\n        super.readFrom(in);\n        searchType = SearchType.fromId(in.readByte());\n\n        indices = new String[in.readVInt()];\n        for (int i = 0; i < indices.length; i++) {\n            indices[i] = in.readString();\n        }\n\n        routing = in.readOptionalString();\n        preference = in.readOptionalString();\n\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n        if (in.readBoolean()) {\n            source = SearchSourceBuilder.PROTOTYPE.readFrom(in);\n        }\n\n        types = in.readStringArray();\n        indicesOptions = IndicesOptions.readIndicesOptions(in);\n\n        requestCache = in.readOptionalBoolean();\n        template = in.readOptionalStreamable(new Template());\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        out.writeByte(searchType.id());\n\n        out.writeVInt(indices.length);\n        for (String index : indices) {\n            out.writeString(index);\n        }\n\n        out.writeOptionalString(routing);\n        out.writeOptionalString(preference);\n\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        source.writeTo(out);\n        out.writeStringArray(types);\n        indicesOptions.writeIndicesOptions(out);\n        out.writeOptionalBoolean(requestCache);\n        out.writeOptionalStreamable(template);\n    }","id":5252,"modified_method":"@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        out.writeByte(searchType.id());\n\n        out.writeVInt(indices.length);\n        for (String index : indices) {\n            out.writeString(index);\n        }\n\n        out.writeOptionalString(routing);\n        out.writeOptionalString(preference);\n\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        if (source == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            source.writeTo(out);\n        }\n        out.writeStringArray(types);\n        indicesOptions.writeIndicesOptions(out);\n        out.writeOptionalBoolean(requestCache);\n        out.writeOptionalStreamable(template);\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchParseException {\n        // nothing to parse...\n        if (source == null) {\n            return;\n        }\n\n        context.from(source.from());\n        context.size(source.size());\n        ObjectFloatHashMap<String> indexBoostMap = source.indexBoost();\n        if (indexBoostMap != null) {\n            Float indexBoost = indexBoostMap.get(context.shardTarget().index());\n            if (indexBoost != null) {\n                context.queryBoost(indexBoost);\n            }\n        }\n        if (source.query() != null) {\n            context.parsedQuery(context.queryParserService().parse(source.query()));\n        }\n        if (source.postFilter() != null) {\n            context.parsedPostFilter(context.queryParserService().parse(source.postFilter()));\n        }\n        if (source.sorts() != null) {\n            XContentParser completeSortParser = null;\n            try {\n                XContentBuilder completeSortBuilder = XContentFactory.jsonBuilder();\n                completeSortBuilder.startObject();\n                completeSortBuilder.startArray(\"sort\");\n                for (BytesReference sort : source.sorts()) {\n                    XContentParser parser = XContentFactory.xContent(sort).createParser(sort);\n                    parser.nextToken();\n                    completeSortBuilder.copyCurrentStructure(parser);\n                }\n                completeSortBuilder.endArray();\n                completeSortBuilder.endObject();\n                BytesReference completeSortBytes = completeSortBuilder.bytes();\n                completeSortParser = XContentFactory.xContent(completeSortBytes).createParser(completeSortBytes);\n                completeSortParser.nextToken();\n                completeSortParser.nextToken();\n                completeSortParser.nextToken();\n                this.elementParsers.get(\"sort\").parse(completeSortParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeSortParser != null ? completeSortParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse sort source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        context.trackScores(source.trackScores());\n        if (source.minScore() != null) {\n            context.minimumScore(source.minScore());\n        }\n        context.timeoutInMillis(source.timeoutInMillis());\n        context.terminateAfter(source.terminateAfter());\n        if (source.aggregations() != null) {\n            XContentParser completeAggregationsParser = null;\n            try {\n                XContentBuilder completeAggregationsBuilder = XContentFactory.jsonBuilder();\n                completeAggregationsBuilder.startObject();\n                for (BytesReference agg : source.aggregations()) {\n                    XContentParser parser = XContentFactory.xContent(agg).createParser(agg);\n                    parser.nextToken();\n                    parser.nextToken();\n                    completeAggregationsBuilder.field(parser.currentName());\n                    parser.nextToken();\n                    completeAggregationsBuilder.copyCurrentStructure(parser);\n                }\n                completeAggregationsBuilder.endObject();\n                BytesReference completeAggregationsBytes = completeAggregationsBuilder.bytes();\n                completeAggregationsParser = XContentFactory.xContent(completeAggregationsBytes).createParser(completeAggregationsBytes);\n                completeAggregationsParser.nextToken();\n                this.elementParsers.get(\"aggregations\").parse(completeAggregationsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeAggregationsParser != null ? completeAggregationsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.suggest() != null) {\n            XContentParser suggestParser = null;\n            try {\n                suggestParser = XContentFactory.xContent(source.suggest()).createParser(source.suggest());\n                this.elementParsers.get(\"suggest\").parse(suggestParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = suggestParser != null ? suggestParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.rescores() != null) {\n            XContentParser completeRescoreParser = null;\n            try {\n                XContentBuilder completeRescoreBuilder = XContentFactory.jsonBuilder();\n                completeRescoreBuilder.startArray();\n                for (BytesReference rescore : source.rescores()) {\n                    XContentParser parser = XContentFactory.xContent(rescore).createParser(rescore);\n                    parser.nextToken();\n                    completeRescoreBuilder.copyCurrentStructure(parser);\n                }\n                completeRescoreBuilder.endArray();\n                BytesReference completeRescoreBytes = completeRescoreBuilder.bytes();\n                completeRescoreParser = XContentFactory.xContent(completeRescoreBytes).createParser(completeRescoreBytes);\n                completeRescoreParser.nextToken();\n                this.elementParsers.get(\"rescore\").parse(completeRescoreParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeRescoreParser != null ? completeRescoreParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.fields() != null) {\n            context.fieldNames().addAll(source.fields());\n        }\n        if (source.explain() != null) {\n            context.explain(source.explain());\n        }\n        if (source.fetchSource() != null) {\n            context.fetchSourceContext(source.fetchSource());\n        }\n        if (source.fieldDataFields() != null) {\n            FieldDataFieldsContext fieldDataFieldsContext = context.getFetchSubPhaseContext(FieldDataFieldsFetchSubPhase.CONTEXT_FACTORY);\n            for (String field : source.fieldDataFields()) {\n                fieldDataFieldsContext.add(new FieldDataField(field));\n            }\n        }\n        if (source.highlighter() != null) {\n            XContentParser highlighterParser = null;\n            try {\n                highlighterParser = XContentFactory.xContent(source.highlighter()).createParser(source.highlighter());\n                this.elementParsers.get(\"highlight\").parse(highlighterParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = highlighterParser != null ? highlighterParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.innerHits() != null) {\n            XContentParser innerHitsParser = null;\n            try {\n                innerHitsParser = XContentFactory.xContent(source.innerHits()).createParser(source.innerHits());\n                this.elementParsers.get(\"highlight\").parse(innerHitsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = innerHitsParser != null ? innerHitsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.scriptFields() != null) {\n            for (org.elasticsearch.search.builder.SearchSourceBuilder.ScriptField field : source.scriptFields()) {\n                SearchScript searchScript = context.scriptService().search(context.lookup(), field.script(), ScriptContext.Standard.SEARCH);\n                context.scriptFields().add(new ScriptField(field.fieldName(), searchScript, false)); // NORELEASE need to have ignore_exception parsed somewhere\n            }\n        }\n        // NOCOMMIT need to work out what to do about term_vectors_fetch (previously handled by TermVectorsFetchParseElement) as this is not available as an option in SearchSourceBuilder\n        if (source.version() != null) {\n            context.version(source.version());\n        }\n        if (source.stats() != null) {\n            context.groupStats(Arrays.asList(source.stats())); // NORELEASE stats should be a list in SearchSourceBuilder\n        }\n    }","id":5253,"modified_method":"private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchParseException {\n        // nothing to parse...\n        if (source == null) {\n            return;\n        }\n\n        context.from(source.from());\n        context.size(source.size());\n        ObjectFloatHashMap<String> indexBoostMap = source.indexBoost();\n        if (indexBoostMap != null) {\n            Float indexBoost = indexBoostMap.get(context.shardTarget().index());\n            if (indexBoost != null) {\n                context.queryBoost(indexBoost);\n            }\n        }\n        if (source.query() != null) {\n            context.parsedQuery(context.queryParserService().parse(source.query()));\n        }\n        if (source.postFilter() != null) {\n            context.parsedPostFilter(context.queryParserService().parse(source.postFilter()));\n        }\n        if (source.sorts() != null) {\n            XContentParser completeSortParser = null;\n            try {\n                XContentBuilder completeSortBuilder = XContentFactory.jsonBuilder();\n                completeSortBuilder.startObject();\n                completeSortBuilder.startArray(\"sort\");\n                for (BytesReference sort : source.sorts()) {\n                    XContentParser parser = XContentFactory.xContent(sort).createParser(sort);\n                    parser.nextToken();\n                    completeSortBuilder.copyCurrentStructure(parser);\n                }\n                completeSortBuilder.endArray();\n                completeSortBuilder.endObject();\n                BytesReference completeSortBytes = completeSortBuilder.bytes();\n                completeSortParser = XContentFactory.xContent(completeSortBytes).createParser(completeSortBytes);\n                completeSortParser.nextToken();\n                completeSortParser.nextToken();\n                completeSortParser.nextToken();\n                this.elementParsers.get(\"sort\").parse(completeSortParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeSortParser != null ? completeSortParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse sort source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        context.trackScores(source.trackScores());\n        if (source.minScore() != null) {\n            context.minimumScore(source.minScore());\n        }\n        context.timeoutInMillis(source.timeoutInMillis());\n        context.terminateAfter(source.terminateAfter());\n        if (source.aggregations() != null) {\n            XContentParser completeAggregationsParser = null;\n            try {\n                XContentBuilder completeAggregationsBuilder = XContentFactory.jsonBuilder();\n                completeAggregationsBuilder.startObject();\n                for (BytesReference agg : source.aggregations()) {\n                    XContentParser parser = XContentFactory.xContent(agg).createParser(agg);\n                    parser.nextToken();\n                    parser.nextToken();\n                    completeAggregationsBuilder.field(parser.currentName());\n                    parser.nextToken();\n                    completeAggregationsBuilder.copyCurrentStructure(parser);\n                }\n                completeAggregationsBuilder.endObject();\n                BytesReference completeAggregationsBytes = completeAggregationsBuilder.bytes();\n                completeAggregationsParser = XContentFactory.xContent(completeAggregationsBytes).createParser(completeAggregationsBytes);\n                completeAggregationsParser.nextToken();\n                this.elementParsers.get(\"aggregations\").parse(completeAggregationsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeAggregationsParser != null ? completeAggregationsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.suggest() != null) {\n            XContentParser suggestParser = null;\n            try {\n                suggestParser = XContentFactory.xContent(source.suggest()).createParser(source.suggest());\n                this.elementParsers.get(\"suggest\").parse(suggestParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = suggestParser != null ? suggestParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.rescores() != null) {\n            XContentParser completeRescoreParser = null;\n            try {\n                XContentBuilder completeRescoreBuilder = XContentFactory.jsonBuilder();\n                completeRescoreBuilder.startObject();\n                completeRescoreBuilder.startArray(\"rescore\");\n                for (BytesReference rescore : source.rescores()) {\n                    XContentParser parser = XContentFactory.xContent(rescore).createParser(rescore);\n                    parser.nextToken();\n                    completeRescoreBuilder.copyCurrentStructure(parser);\n                }\n                completeRescoreBuilder.endArray();\n                completeRescoreBuilder.endObject();\n                BytesReference completeRescoreBytes = completeRescoreBuilder.bytes();\n                completeRescoreParser = XContentFactory.xContent(completeRescoreBytes).createParser(completeRescoreBytes);\n                completeRescoreParser.nextToken();\n                completeRescoreParser.nextToken();\n                completeRescoreParser.nextToken();\n                this.elementParsers.get(\"rescore\").parse(completeRescoreParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeRescoreParser != null ? completeRescoreParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.fields() != null) {\n            context.fieldNames().addAll(source.fields());\n        }\n        if (source.explain() != null) {\n            context.explain(source.explain());\n        }\n        if (source.fetchSource() != null) {\n            context.fetchSourceContext(source.fetchSource());\n        }\n        if (source.fieldDataFields() != null) {\n            FieldDataFieldsContext fieldDataFieldsContext = context.getFetchSubPhaseContext(FieldDataFieldsFetchSubPhase.CONTEXT_FACTORY);\n            for (String field : source.fieldDataFields()) {\n                fieldDataFieldsContext.add(new FieldDataField(field));\n            }\n        }\n        if (source.highlighter() != null) {\n            XContentParser highlighterParser = null;\n            try {\n                highlighterParser = XContentFactory.xContent(source.highlighter()).createParser(source.highlighter());\n                this.elementParsers.get(\"highlight\").parse(highlighterParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = highlighterParser != null ? highlighterParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.innerHits() != null) {\n            XContentParser innerHitsParser = null;\n            try {\n                innerHitsParser = XContentFactory.xContent(source.innerHits()).createParser(source.innerHits());\n                this.elementParsers.get(\"highlight\").parse(innerHitsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = innerHitsParser != null ? innerHitsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.scriptFields() != null) {\n            for (org.elasticsearch.search.builder.SearchSourceBuilder.ScriptField field : source.scriptFields()) {\n                SearchScript searchScript = context.scriptService().search(context.lookup(), field.script(), ScriptContext.Standard.SEARCH);\n                context.scriptFields().add(new ScriptField(field.fieldName(), searchScript, false)); // NORELEASE need to have ignore_exception parsed somewhere\n            }\n        }\n        // NOCOMMIT need to work out what to do about term_vectors_fetch (previously handled by TermVectorsFetchParseElement) as this is not available as an option in SearchSourceBuilder\n        if (source.version() != null) {\n            context.version(source.version());\n        }\n        if (source.stats() != null) {\n            context.groupStats(Arrays.asList(source.stats())); // NORELEASE stats should be a list in SearchSourceBuilder\n        }\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"final SearchContext createContext(ShardSearchRequest request, @Nullable Engine.Searcher searcher) {\n        IndexService indexService = indicesService.indexServiceSafe(request.index());\n        IndexShard indexShard = indexService.shardSafe(request.shardId());\n\n        SearchShardTarget shardTarget = new SearchShardTarget(clusterService.localNode().id(), request.index(), request.shardId());\n\n        Engine.Searcher engineSearcher = searcher == null ? indexShard.acquireSearcher(\"search\") : searcher;\n\n        SearchContext context = new DefaultSearchContext(idGenerator.incrementAndGet(), request, shardTarget, engineSearcher, indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(), parseFieldMatcher, defaultSearchTimeout);\n        SearchContext.setCurrent(context);\n        try {\n            if (request.scroll() != null) {\n                context.scrollContext(new ScrollContext());\n                context.scrollContext().scroll = request.scroll();\n            }\n            if (request.template() != null) {\n                ExecutableScript executable = this.scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, context);\n                BytesReference run = (BytesReference) executable.run();\n                try (XContentParser parser = XContentFactory.xContent(run).createParser(run)) {\n                    // NOCOMMIT this override the source entirely\n                    request.source(SearchSourceBuilder.PROTOTYPE.fromXContent(parser, new QueryParseContext(indexService.queryParserService().indicesQueriesRegistry())));\n                }\n            }\n            parseSource(context, request.source());\n\n            // if the from and size are still not set, default them\n            if (context.from() == -1) {\n                context.from(0);\n            }\n            if (context.size() == -1) {\n                context.size(10);\n            }\n\n            // pre process\n            dfsPhase.preProcess(context);\n            queryPhase.preProcess(context);\n            fetchPhase.preProcess(context);\n\n            // compute the context keep alive\n            long keepAlive = defaultKeepAlive;\n            if (request.scroll() != null && request.scroll().keepAlive() != null) {\n                keepAlive = request.scroll().keepAlive().millis();\n            }\n            context.keepAlive(keepAlive);\n        } catch (Throwable e) {\n            context.close();\n            throw ExceptionsHelper.convertToRuntime(e);\n        }\n\n        return context;\n    }","id":5254,"modified_method":"final SearchContext createContext(ShardSearchRequest request, @Nullable Engine.Searcher searcher) {\n        IndexService indexService = indicesService.indexServiceSafe(request.index());\n        IndexShard indexShard = indexService.shardSafe(request.shardId());\n\n        SearchShardTarget shardTarget = new SearchShardTarget(clusterService.localNode().id(), request.index(), request.shardId());\n\n        Engine.Searcher engineSearcher = searcher == null ? indexShard.acquireSearcher(\"search\") : searcher;\n\n        SearchContext context = new DefaultSearchContext(idGenerator.incrementAndGet(), request, shardTarget, engineSearcher, indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(), parseFieldMatcher, defaultSearchTimeout);\n        SearchContext.setCurrent(context);\n        try {\n            if (request.scroll() != null) {\n                context.scrollContext(new ScrollContext());\n                context.scrollContext().scroll = request.scroll();\n            }\n            if (request.template() != null) {\n                ExecutableScript executable = this.scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, context);\n                BytesReference run = (BytesReference) executable.run();\n                try (XContentParser parser = XContentFactory.xContent(run).createParser(run)) {\n                    // NOCOMMIT this override the source entirely\n                    QueryParseContext queryParseContext = new QueryParseContext(indexService.queryParserService().indicesQueriesRegistry());\n                    queryParseContext.reset(parser);\n                    request.source(SearchSourceBuilder.PROTOTYPE.fromXContent(parser, queryParseContext));\n                }\n            }\n            parseSource(context, request.source());\n\n            // if the from and size are still not set, default them\n            if (context.from() == -1) {\n                context.from(0);\n            }\n            if (context.size() == -1) {\n                context.size(10);\n            }\n\n            // pre process\n            dfsPhase.preProcess(context);\n            queryPhase.preProcess(context);\n            fetchPhase.preProcess(context);\n\n            // compute the context keep alive\n            long keepAlive = defaultKeepAlive;\n            if (request.scroll() != null && request.scroll().keepAlive() != null) {\n                keepAlive = request.scroll().keepAlive().millis();\n            }\n            context.keepAlive(keepAlive);\n        } catch (Throwable e) {\n            context.close();\n            throw ExceptionsHelper.convertToRuntime(e);\n        }\n\n        return context;\n    }","commit_id":"63da68e48067dc0388414deed1be4f78ddcc0f69","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void doWriteTo(StreamOutput out) throws IOException {\n        out.writeString(fieldName);\n        boolean hasShapeBytes = shapeBytes != null;\n        out.writeBoolean(hasShapeBytes);\n        if (hasShapeBytes) {\n            out.writeBytesReference(shapeBytes);\n        } else {\n            out.writeOptionalString(indexedShapeId);\n            out.writeOptionalString(indexedShapeType);\n            out.writeOptionalString(indexedShapeIndex);\n            out.writeOptionalString(indexedShapePath);\n        }\n        relation.writeTo(out);\n        strategy.writeTo(out);\n    }","id":5255,"modified_method":"@Override\n    protected void doWriteTo(StreamOutput out) throws IOException {\n        out.writeString(fieldName);\n        boolean hasShapeBytes = shapeBytes != null;\n        out.writeBoolean(hasShapeBytes);\n        if (hasShapeBytes) {\n            out.writeBytesReference(shapeBytes);\n        } else {\n            out.writeOptionalString(indexedShapeId);\n            out.writeOptionalString(indexedShapeType);\n            out.writeOptionalString(indexedShapeIndex);\n            out.writeOptionalString(indexedShapePath);\n        }\n        relation.writeTo(out);\n        if (strategy == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            strategy.writeTo(out);\n        }\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected GeoShapeQueryBuilder doReadFrom(StreamInput in) throws IOException {\n        String fieldName = in.readString();\n        GeoShapeQueryBuilder builder;\n        if (in.readBoolean()) {\n            BytesReference shapeBytes = in.readBytesReference();\n            builder = new GeoShapeQueryBuilder(fieldName, shapeBytes);\n        } else {\n            String indexedShapeId = in.readOptionalString();\n            String indexedShapeType = in.readOptionalString();\n            String indexedShapeIndex = in.readOptionalString();\n            String indexedShapePath = in.readOptionalString();\n            builder = new GeoShapeQueryBuilder(fieldName, indexedShapeId, indexedShapeType);\n            if (indexedShapeIndex != null) {\n                builder.indexedShapeIndex = indexedShapeIndex;\n            }\n            if (indexedShapePath != null) {\n                builder.indexedShapePath = indexedShapePath;\n            }\n        }\n        builder.relation = ShapeRelation.DISJOINT.readFrom(in);\n        builder.strategy = SpatialStrategy.RECURSIVE.readFrom(in);\n        return builder;\n    }","id":5256,"modified_method":"@Override\n    protected GeoShapeQueryBuilder doReadFrom(StreamInput in) throws IOException {\n        String fieldName = in.readString();\n        GeoShapeQueryBuilder builder;\n        if (in.readBoolean()) {\n            BytesReference shapeBytes = in.readBytesReference();\n            builder = new GeoShapeQueryBuilder(fieldName, shapeBytes);\n        } else {\n            String indexedShapeId = in.readOptionalString();\n            String indexedShapeType = in.readOptionalString();\n            String indexedShapeIndex = in.readOptionalString();\n            String indexedShapePath = in.readOptionalString();\n            builder = new GeoShapeQueryBuilder(fieldName, indexedShapeId, indexedShapeType);\n            if (indexedShapeIndex != null) {\n                builder.indexedShapeIndex = indexedShapeIndex;\n            }\n            if (indexedShapePath != null) {\n                builder.indexedShapePath = indexedShapePath;\n            }\n        }\n        builder.relation = ShapeRelation.DISJOINT.readFrom(in);\n        if (in.readBoolean()) {\n            builder.strategy = SpatialStrategy.RECURSIVE.readFrom(in);\n        }\n        return builder;\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testNoShape() throws IOException {\n        try {\n            GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, (ShapeBuilder) null);\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n    }","id":5257,"modified_method":"@Test\n    public void testNoShape() throws IOException {\n        try {\n            new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, (ShapeBuilder) null);\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected GeoShapeQueryBuilder doCreateTestQueryBuilder() {\n        ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null);\n        GeoShapeQueryBuilder builder;\n        if (randomBoolean()) {\n            try {\n                builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAsciiOfLengthBetween(3, 20);\n            indexedShapeType = randomAsciiOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, indexedShapeId, indexedShapeType);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAsciiOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAsciiOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n        }\n        SpatialStrategy strategy = randomFrom(SpatialStrategy.values());\n        builder.strategy(strategy);\n        if (strategy != SpatialStrategy.TERM) {\n            builder.relation(randomFrom(ShapeRelation.values()));\n        }\n        return builder;\n    }","id":5258,"modified_method":"@Override\n    protected GeoShapeQueryBuilder doCreateTestQueryBuilder() {\n        ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null);\n        GeoShapeQueryBuilder builder;\n        if (randomBoolean()) {\n            try {\n                builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAsciiOfLengthBetween(3, 20);\n            indexedShapeType = randomAsciiOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, indexedShapeId, indexedShapeType);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAsciiOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAsciiOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n        }\n        if (randomBoolean()) {\n            SpatialStrategy strategy = randomFrom(SpatialStrategy.values());\n            builder.strategy(strategy);\n            if (strategy != SpatialStrategy.TERM) {\n                builder.relation(randomFrom(ShapeRelation.values()));\n            }\n        }\n        return builder;\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n    public void testNoIndexedShape() throws IOException {\n        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, (String) null, \"type\");\n    }","id":5259,"modified_method":"@Test(expected = IllegalArgumentException.class)\n    public void testNoIndexedShape() throws IOException {\n        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, null, \"type\");\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n    public void testNoIndexedShapeType() throws IOException {\n        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, \"id\", (String) null);\n    }","id":5260,"modified_method":"@Test(expected = IllegalArgumentException.class)\n    public void testNoIndexedShapeType() throws IOException {\n        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, \"id\", null);\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected GetResponse executeGet(GetRequest getRequest) {\n        assertThat(indexedShapeToReturn, notNullValue());\n        assertThat(indexedShapeId, notNullValue());\n        assertThat(indexedShapeType, notNullValue());\n        assertThat(getRequest.id(), equalTo(indexedShapeId));\n        assertThat(getRequest.type(), equalTo(indexedShapeType));\n        String expectedShapeIndex = indexedShapeIndex == null ? GeoShapeQueryBuilder.DEFAULT_SHAPE_INDEX_NAME : indexedShapeIndex;\n        assertThat(getRequest.index(), equalTo(expectedShapeIndex));\n        String expectedShapePath = indexedShapePath == null ? GeoShapeQueryBuilder.DEFAULT_SHAPE_FIELD_NAME : indexedShapePath;\n        String json;\n        try {\n            XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint();\n            builder.startObject();\n            builder.field(expectedShapePath, indexedShapeToReturn);\n            builder.endObject();\n            json = builder.string();\n        } catch (IOException ex) {\n            throw new ElasticsearchException(\"boom\", ex);\n        }\n        GetResponse response = new GetResponse(new GetResult(indexedShapeIndex, indexedShapeType, indexedShapeId, 0, true, new BytesArray(\n                json), null));\n        return response;\n    }","id":5261,"modified_method":"@Override\n    protected GetResponse executeGet(GetRequest getRequest) {\n        assertThat(indexedShapeToReturn, notNullValue());\n        assertThat(indexedShapeId, notNullValue());\n        assertThat(indexedShapeType, notNullValue());\n        assertThat(getRequest.id(), equalTo(indexedShapeId));\n        assertThat(getRequest.type(), equalTo(indexedShapeType));\n        String expectedShapeIndex = indexedShapeIndex == null ? GeoShapeQueryBuilder.DEFAULT_SHAPE_INDEX_NAME : indexedShapeIndex;\n        assertThat(getRequest.index(), equalTo(expectedShapeIndex));\n        String expectedShapePath = indexedShapePath == null ? GeoShapeQueryBuilder.DEFAULT_SHAPE_FIELD_NAME : indexedShapePath;\n        String json;\n        try {\n            XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint();\n            builder.startObject();\n            builder.field(expectedShapePath, indexedShapeToReturn);\n            builder.endObject();\n            json = builder.string();\n        } catch (IOException ex) {\n            throw new ElasticsearchException(\"boom\", ex);\n        }\n        return new GetResponse(new GetResult(indexedShapeIndex, indexedShapeType, indexedShapeId, 0, true, new BytesArray(json), null));\n    }","commit_id":"7e840532c1f7211ebc631ba60d4b4e2ccc73b45b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testToSearchRequest() {\n        CountRequest countRequest;\n        if (randomBoolean()) {\n            countRequest = new CountRequest(randomStringArray());\n        } else {\n            countRequest = new CountRequest();\n        }\n        if (randomBoolean()) {\n            countRequest.indicesOptions(IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()));\n        }\n        if (randomBoolean()) {\n            countRequest.types(randomStringArray());\n        }\n        if (randomBoolean()) {\n            countRequest.routing(randomStringArray());\n        }\n        if (randomBoolean()) {\n            countRequest.preference(randomAsciiOfLengthBetween(1, 10));\n        }\n        final boolean querySet;\n        if (querySet = randomBoolean()) {\n            countRequest.query(QueryBuilders.termQuery(\"field\", \"value\"));\n        }\n        if (randomBoolean()) {\n            countRequest.minScore(randomFloat());\n        }\n        if (randomBoolean()) {\n            countRequest.terminateAfter(randomIntBetween(1, 1000));\n        }\n\n        SearchRequest searchRequest = countRequest.toSearchRequest();\n        assertThat(searchRequest.indices(), equalTo(countRequest.indices()));\n        assertThat(searchRequest.indicesOptions(), equalTo(countRequest.indicesOptions()));\n        assertThat(searchRequest.types(), equalTo(countRequest.types()));\n        assertThat(searchRequest.routing(), equalTo(countRequest.routing()));\n        assertThat(searchRequest.preference(), equalTo(countRequest.preference()));\n        BytesArray array = new BytesArray(XContentHelper.toString(searchRequest.source()));\n        Map<String, Object> sourceMap = XContentHelper.convertToMap(array, false).v2();\n        int count = 1;\n        assertThat(sourceMap.get(\"size\"), equalTo(0));\n        if (querySet) {\n            count++;\n            assertThat(sourceMap.get(\"query\"), notNullValue());\n        } else {\n            assertNull(sourceMap.get(\"query\"));\n        }\n        if (countRequest.minScore() == CountRequest.DEFAULT_MIN_SCORE) {\n            assertThat(sourceMap.get(\"min_score\"), nullValue());\n        } else {\n            assertThat(((Number)sourceMap.get(\"min_score\")).floatValue(), equalTo(countRequest.minScore()));\n            count++;\n        }\n        if (countRequest.terminateAfter() == SearchContext.DEFAULT_TERMINATE_AFTER) {\n            assertThat(sourceMap.get(\"terminate_after\"), nullValue());\n        } else {\n            assertThat(sourceMap.get(\"terminate_after\"), equalTo(countRequest.terminateAfter()));\n            count++;\n        }\n        assertThat(sourceMap.toString(), sourceMap.size(), equalTo(count));\n    }","id":5262,"modified_method":"@Test\n    public void testToSearchRequest() {\n        CountRequest countRequest;\n        if (randomBoolean()) {\n            countRequest = new CountRequest(randomStringArray());\n        } else {\n            countRequest = new CountRequest();\n        }\n        if (randomBoolean()) {\n            countRequest.indicesOptions(IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()));\n        }\n        if (randomBoolean()) {\n            countRequest.types(randomStringArray());\n        }\n        if (randomBoolean()) {\n            countRequest.routing(randomStringArray());\n        }\n        if (randomBoolean()) {\n            countRequest.preference(randomAsciiOfLengthBetween(1, 10));\n        }\n        final boolean querySet;\n        if (querySet = randomBoolean()) {\n            countRequest.query(QueryBuilders.termQuery(\"field\", \"value\"));\n        }\n        if (randomBoolean()) {\n            countRequest.minScore(randomFloat());\n        }\n        if (randomBoolean()) {\n            countRequest.terminateAfter(randomIntBetween(1, 1000));\n        }\n\n        SearchRequest searchRequest = countRequest.toSearchRequest();\n        assertThat(searchRequest.indices(), equalTo(countRequest.indices()));\n        assertThat(searchRequest.indicesOptions(), equalTo(countRequest.indicesOptions()));\n        assertThat(searchRequest.types(), equalTo(countRequest.types()));\n        assertThat(searchRequest.routing(), equalTo(countRequest.routing()));\n        assertThat(searchRequest.preference(), equalTo(countRequest.preference()));\n        SearchSourceBuilder source = searchRequest.source();\n        assertThat(source.size(), equalTo(0));\n        if (querySet) {\n            assertThat(source.query(), notNullValue());\n        } else {\n            assertNull(source.query());\n        }\n        if (countRequest.minScore() == CountRequest.DEFAULT_MIN_SCORE) {\n            assertThat(source.minScore(), nullValue());\n        } else {\n            assertThat(source.minScore(), equalTo(countRequest.minScore()));\n        }\n        assertThat(source.terminateAfter(), equalTo(countRequest.terminateAfter()));\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected final SearchSourceBuilder createSearchSourceBuilder() throws IOException {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(new TimeValue(randomIntBetween(1, 100), randomFrom(TimeUnit.values())));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        // if (randomBoolean()) {\n        // builder.defaultRescoreWindowSize(randomIntBetween(1, 100));\n        // }\n        if (randomBoolean()) {\n            int fieldsSize = randomInt(25);\n            List<String> fields = new ArrayList<>(fieldsSize);\n            for (int i = 0; i < fieldsSize; i++) {\n                fields.add(randomAsciiOfLengthBetween(5, 50));\n            }\n            builder.fields(fields);\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                builder.fieldDataField(randomAsciiOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                builder.scriptField(randomAsciiOfLengthBetween(5, 50), new Script(\"foo\"));\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n            case 0:\n                fetchSourceContext = new FetchSourceContext(randomBoolean());\n                break;\n            case 1:\n                fetchSourceContext = new FetchSourceContext(includes, excludes);\n                break;\n            case 2:\n                fetchSourceContext = new FetchSourceContext(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20));\n                break;\n            case 3:\n                fetchSourceContext = new FetchSourceContext(randomBoolean(), includes, excludes, randomBoolean());\n                break;\n            case 4:\n                fetchSourceContext = new FetchSourceContext(includes);\n                break;\n            case 5:\n                fetchSourceContext = new FetchSourceContext(randomAsciiOfLengthBetween(5, 20));\n                break;\n            default:\n                throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            String[] statsGroups = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < statsGroups.length; i++) {\n                statsGroups[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAsciiOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE make RandomQueryBuilder work outside of the\n            // AbstractQueryTestCase\n            // builder.query(RandomQueryBuilder.createQuery(getRandom()));\n            builder.query(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            // NORELEASE make RandomQueryBuilder work outside of the\n            // AbstractQueryTestCase\n            // builder.postFilter(RandomQueryBuilder.createQuery(getRandom()));\n            builder.postFilter(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    builder.sort(SortBuilders.fieldSort(randomAsciiOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    builder.sort(SortBuilders.geoDistanceSort(randomAsciiOfLengthBetween(5, 20))\n                            .geohashes(AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    builder.sort(SortBuilders.scriptSort(new Script(\"foo\"), \"number\").order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    builder.sort(randomAsciiOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    builder.sort(randomAsciiOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random highlight builder method\n            builder.highlighter(new HighlightBuilder().field(randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random suggest builder method\n            builder.suggest(new SuggestBuilder().setText(randomAsciiOfLengthBetween(1, 5)).addSuggestion(\n                    SuggestBuilders.termSuggestion(randomAsciiOfLengthBetween(1, 5))));\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random inner hits builder method\n            InnerHitsBuilder innerHitsBuilder = new InnerHitsBuilder();\n            InnerHit innerHit = new InnerHit();\n            innerHit.field(randomAsciiOfLengthBetween(5, 20));\n            innerHitsBuilder.addNestedInnerHits(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20), innerHit);\n            builder.innerHits(innerHitsBuilder);\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                // NORELEASE need a random rescore builder method\n                RescoreBuilder rescoreBuilder = new RescoreBuilder();\n                rescoreBuilder.rescorer(RescoreBuilder.queryRescorer(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20),\n                        randomAsciiOfLengthBetween(5, 20))));\n                builder.addRescorer(rescoreBuilder);\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random aggregation builder method\n            builder.aggregation(AggregationBuilders.avg(randomAsciiOfLengthBetween(5, 20)));\n        }\n        return builder;\n    }","id":5263,"modified_method":"protected final SearchSourceBuilder createSearchSourceBuilder() throws IOException {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(new TimeValue(randomIntBetween(1, 100), randomFrom(TimeUnit.values())));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        // if (randomBoolean()) {\n        // builder.defaultRescoreWindowSize(randomIntBetween(1, 100));\n        // }\n        if (randomBoolean()) {\n            int fieldsSize = randomInt(25);\n            List<String> fields = new ArrayList<>(fieldsSize);\n            for (int i = 0; i < fieldsSize; i++) {\n                fields.add(randomAsciiOfLengthBetween(5, 50));\n            }\n            builder.fields(fields);\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                builder.fieldDataField(randomAsciiOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                builder.scriptField(randomAsciiOfLengthBetween(5, 50), new Script(\"foo\"));\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n            case 0:\n                fetchSourceContext = new FetchSourceContext(randomBoolean());\n                break;\n            case 1:\n                fetchSourceContext = new FetchSourceContext(includes, excludes);\n                break;\n            case 2:\n                fetchSourceContext = new FetchSourceContext(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20));\n                break;\n            case 3:\n                fetchSourceContext = new FetchSourceContext(true, includes, excludes, randomBoolean());\n                break;\n            case 4:\n                fetchSourceContext = new FetchSourceContext(includes);\n                break;\n            case 5:\n                fetchSourceContext = new FetchSourceContext(randomAsciiOfLengthBetween(5, 20));\n                break;\n            default:\n                throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            String[] statsGroups = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < statsGroups.length; i++) {\n                statsGroups[i] = randomAsciiOfLengthBetween(5, 20);\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAsciiOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE make RandomQueryBuilder work outside of the\n            // AbstractQueryTestCase\n            // builder.query(RandomQueryBuilder.createQuery(getRandom()));\n            builder.query(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            // NORELEASE make RandomQueryBuilder work outside of the\n            // AbstractQueryTestCase\n            // builder.postFilter(RandomQueryBuilder.createQuery(getRandom()));\n            builder.postFilter(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    builder.sort(SortBuilders.fieldSort(randomAsciiOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    builder.sort(SortBuilders.geoDistanceSort(randomAsciiOfLengthBetween(5, 20))\n                            .geohashes(AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    builder.sort(SortBuilders.scriptSort(new Script(\"foo\"), \"number\").order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    builder.sort(randomAsciiOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    builder.sort(randomAsciiOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random highlight builder method\n            builder.highlighter(new HighlightBuilder().field(randomAsciiOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random suggest builder method\n            builder.suggest(new SuggestBuilder().setText(randomAsciiOfLengthBetween(1, 5)).addSuggestion(\n                    SuggestBuilders.termSuggestion(randomAsciiOfLengthBetween(1, 5))));\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random inner hits builder method\n            InnerHitsBuilder innerHitsBuilder = new InnerHitsBuilder();\n            InnerHit innerHit = new InnerHit();\n            innerHit.field(randomAsciiOfLengthBetween(5, 20));\n            innerHitsBuilder.addNestedInnerHits(randomAsciiOfLengthBetween(5, 20), randomAsciiOfLengthBetween(5, 20), innerHit);\n            builder.innerHits(innerHitsBuilder);\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                // NORELEASE need a random rescore builder method\n                RescoreBuilder rescoreBuilder = new RescoreBuilder();\n                rescoreBuilder.rescorer(RescoreBuilder.queryRescorer(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5, 20),\n                        randomAsciiOfLengthBetween(5, 20))));\n                builder.addRescorer(rescoreBuilder);\n            }\n        }\n        if (randomBoolean()) {\n            // NORELEASE need a random aggregation builder method\n            builder.aggregation(AggregationBuilders.avg(randomAsciiOfLengthBetween(5, 20)));\n        }\n        return builder;\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected SearchSourceBuilder parseQuery(String queryAsString, ParseFieldMatcher matcher) throws IOException {\n        XContentParser parser = XContentFactory.xContent(queryAsString).createParser(queryAsString);\n        QueryParseContext context = createParseContext();\n        context.reset(parser);\n        context.parseFieldMatcher(matcher);\n        System.out.println(queryAsString);\n        return SearchSourceBuilder.PROTOTYPE.fromXContent(parser, context);\n    }","id":5264,"modified_method":"protected SearchSourceBuilder parseQuery(String queryAsString, ParseFieldMatcher matcher) throws IOException {\n        XContentParser parser = XContentFactory.xContent(queryAsString).createParser(queryAsString);\n        System.out.println(queryAsString);\n        QueryParseContext context = createParseContext();\n        context.reset(parser);\n        context.parseFieldMatcher(matcher);\n        System.out.println(queryAsString);\n        return SearchSourceBuilder.PROTOTYPE.fromXContent(parser, context);\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchParseException {\n        // nothing to parse...\n        if (source == null) {\n            return;\n        }\n\n        context.from(source.from());\n        context.size(source.size());\n        ObjectFloatHashMap<String> indexBoostMap = source.indexBoost();\n        if (indexBoostMap != null) {\n            Float indexBoost = indexBoostMap.get(context.shardTarget().index());\n            if (indexBoost != null) {\n                context.queryBoost(indexBoost);\n            }\n        }\n        context.parsedQuery(context.queryParserService().parse(source.query()));\n        if (source.postFilter() != null) {\n            context.parsedPostFilter(context.queryParserService().parse(source.postFilter()));\n        }\n        if (source.sorts() != null) {\n            XContentParser completeSortParser = null;\n            try {\n                XContentBuilder completeSortBuilder = XContentFactory.jsonBuilder();\n                completeSortBuilder.startArray();\n                for (BytesReference sort : source.sorts()) {\n                    XContentParser parser = XContentFactory.xContent(sort).createParser(sort);\n                    parser.nextToken();\n                    completeSortBuilder.copyCurrentStructure(parser);\n                }\n                completeSortBuilder.endArray();\n                BytesReference completeSortBytes = completeSortBuilder.bytes();\n                completeSortParser = XContentFactory.xContent(completeSortBytes).createParser(completeSortBytes);\n                completeSortParser.nextToken();\n                this.elementParsers.get(\"sort\").parse(completeSortParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeSortParser != null ? completeSortParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse sort source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        context.trackScores(source.trackScores());\n        if (source.minScore() != null) {\n            context.minimumScore(source.minScore());\n        }\n        context.timeoutInMillis(source.timeoutInMillis());\n        context.terminateAfter(source.terminateAfter());\n        if (source.aggregations() != null) {\n            XContentParser completeAggregationsParser = null;\n            try {\n                XContentBuilder completeAggregationsBuilder = XContentFactory.jsonBuilder();\n                completeAggregationsBuilder.startObject();\n                for (BytesReference agg : source.aggregations()) {\n                    XContentParser parser = XContentFactory.xContent(agg).createParser(agg);\n                    parser.nextToken();\n                    parser.nextToken();\n                    completeAggregationsBuilder.field(parser.currentName());\n                    parser.nextToken();\n                    completeAggregationsBuilder.copyCurrentStructure(parser);\n                }\n                completeAggregationsBuilder.endObject();\n                BytesReference completeAggregationsBytes = completeAggregationsBuilder.bytes();\n                completeAggregationsParser = XContentFactory.xContent(completeAggregationsBytes).createParser(completeAggregationsBytes);\n                completeAggregationsParser.nextToken();\n                this.elementParsers.get(\"aggregations\").parse(completeAggregationsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeAggregationsParser != null ? completeAggregationsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.suggest() != null) {\n            XContentParser suggestParser = null;\n            try {\n                suggestParser = XContentFactory.xContent(source.suggest()).createParser(source.suggest());\n                this.elementParsers.get(\"suggest\").parse(suggestParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = suggestParser != null ? suggestParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.rescores() != null) {\n            XContentParser completeRescoreParser = null;\n            try {\n                XContentBuilder completeRescoreBuilder = XContentFactory.jsonBuilder();\n                completeRescoreBuilder.startArray();\n                for (BytesReference rescore : source.rescores()) {\n                    XContentParser parser = XContentFactory.xContent(rescore).createParser(rescore);\n                    parser.nextToken();\n                    completeRescoreBuilder.copyCurrentStructure(parser);\n                }\n                completeRescoreBuilder.endArray();\n                BytesReference completeRescoreBytes = completeRescoreBuilder.bytes();\n                completeRescoreParser = XContentFactory.xContent(completeRescoreBytes).createParser(completeRescoreBytes);\n                completeRescoreParser.nextToken();\n                this.elementParsers.get(\"rescore\").parse(completeRescoreParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeRescoreParser != null ? completeRescoreParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.fields() != null) {\n            context.fieldNames().addAll(source.fields());\n        }\n        if (source.explain() != null) {\n            context.explain(source.explain());\n        }\n        if (source.fetchSource() != null) {\n            context.fetchSourceContext(source.fetchSource());\n        }\n        if (source.fieldDataFields() != null) {\n            FieldDataFieldsContext fieldDataFieldsContext = context.getFetchSubPhaseContext(FieldDataFieldsFetchSubPhase.CONTEXT_FACTORY);\n            for (String field : source.fieldDataFields()) {\n                fieldDataFieldsContext.add(new FieldDataField(field));\n            }\n        }\n        if (source.highlighter() != null) {\n            XContentParser highlighterParser = null;\n            try {\n                highlighterParser = XContentFactory.xContent(source.highlighter()).createParser(source.highlighter());\n                this.elementParsers.get(\"highlight\").parse(highlighterParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = highlighterParser != null ? highlighterParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.innerHits() != null) {\n            XContentParser innerHitsParser = null;\n            try {\n                innerHitsParser = XContentFactory.xContent(source.innerHits()).createParser(source.innerHits());\n                this.elementParsers.get(\"highlight\").parse(innerHitsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = innerHitsParser != null ? innerHitsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.scriptFields() != null) {\n            for (org.elasticsearch.search.builder.SearchSourceBuilder.ScriptField field : source.scriptFields()) {\n                SearchScript searchScript = context.scriptService().search(context.lookup(), field.script(), ScriptContext.Standard.SEARCH);\n                context.scriptFields().add(new ScriptField(field.fieldName(), searchScript, false)); // NORELEASE need to have ignore_exception parsed somewhere\n            }\n        }\n        // NOCOMMIT need to work out what to do about term_vectors_fetch (previously handled by TermVectorsFetchParseElement) as this is not available as an option in SearchSourceBuilder\n        if (source.version() != null) {\n            context.version(source.version());\n        }\n        if (source.stats() != null) {\n            context.groupStats(Arrays.asList(source.stats())); // NORELEASE stats should be a list in SearchSourceBuilder\n        }\n    }","id":5265,"modified_method":"private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchParseException {\n        // nothing to parse...\n        if (source == null) {\n            return;\n        }\n\n        context.from(source.from());\n        context.size(source.size());\n        ObjectFloatHashMap<String> indexBoostMap = source.indexBoost();\n        if (indexBoostMap != null) {\n            Float indexBoost = indexBoostMap.get(context.shardTarget().index());\n            if (indexBoost != null) {\n                context.queryBoost(indexBoost);\n            }\n        }\n        if (source.query() != null) {\n            context.parsedQuery(context.queryParserService().parse(source.query()));\n        }\n        if (source.postFilter() != null) {\n            context.parsedPostFilter(context.queryParserService().parse(source.postFilter()));\n        }\n        if (source.sorts() != null) {\n            XContentParser completeSortParser = null;\n            try {\n                XContentBuilder completeSortBuilder = XContentFactory.jsonBuilder();\n                completeSortBuilder.startArray();\n                for (BytesReference sort : source.sorts()) {\n                    XContentParser parser = XContentFactory.xContent(sort).createParser(sort);\n                    parser.nextToken();\n                    completeSortBuilder.copyCurrentStructure(parser);\n                }\n                completeSortBuilder.endArray();\n                BytesReference completeSortBytes = completeSortBuilder.bytes();\n                completeSortParser = XContentFactory.xContent(completeSortBytes).createParser(completeSortBytes);\n                completeSortParser.nextToken();\n                this.elementParsers.get(\"sort\").parse(completeSortParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeSortParser != null ? completeSortParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse sort source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        context.trackScores(source.trackScores());\n        if (source.minScore() != null) {\n            context.minimumScore(source.minScore());\n        }\n        context.timeoutInMillis(source.timeoutInMillis());\n        context.terminateAfter(source.terminateAfter());\n        if (source.aggregations() != null) {\n            XContentParser completeAggregationsParser = null;\n            try {\n                XContentBuilder completeAggregationsBuilder = XContentFactory.jsonBuilder();\n                completeAggregationsBuilder.startObject();\n                for (BytesReference agg : source.aggregations()) {\n                    XContentParser parser = XContentFactory.xContent(agg).createParser(agg);\n                    parser.nextToken();\n                    parser.nextToken();\n                    completeAggregationsBuilder.field(parser.currentName());\n                    parser.nextToken();\n                    completeAggregationsBuilder.copyCurrentStructure(parser);\n                }\n                completeAggregationsBuilder.endObject();\n                BytesReference completeAggregationsBytes = completeAggregationsBuilder.bytes();\n                completeAggregationsParser = XContentFactory.xContent(completeAggregationsBytes).createParser(completeAggregationsBytes);\n                completeAggregationsParser.nextToken();\n                this.elementParsers.get(\"aggregations\").parse(completeAggregationsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeAggregationsParser != null ? completeAggregationsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.suggest() != null) {\n            XContentParser suggestParser = null;\n            try {\n                suggestParser = XContentFactory.xContent(source.suggest()).createParser(source.suggest());\n                this.elementParsers.get(\"suggest\").parse(suggestParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = suggestParser != null ? suggestParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.rescores() != null) {\n            XContentParser completeRescoreParser = null;\n            try {\n                XContentBuilder completeRescoreBuilder = XContentFactory.jsonBuilder();\n                completeRescoreBuilder.startArray();\n                for (BytesReference rescore : source.rescores()) {\n                    XContentParser parser = XContentFactory.xContent(rescore).createParser(rescore);\n                    parser.nextToken();\n                    completeRescoreBuilder.copyCurrentStructure(parser);\n                }\n                completeRescoreBuilder.endArray();\n                BytesReference completeRescoreBytes = completeRescoreBuilder.bytes();\n                completeRescoreParser = XContentFactory.xContent(completeRescoreBytes).createParser(completeRescoreBytes);\n                completeRescoreParser.nextToken();\n                this.elementParsers.get(\"rescore\").parse(completeRescoreParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = completeRescoreParser != null ? completeRescoreParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse rescore source [\" + sSource + \"]\", location, e);\n            } // NORELEASE fix this to be more elegant\n        }\n        if (source.fields() != null) {\n            context.fieldNames().addAll(source.fields());\n        }\n        if (source.explain() != null) {\n            context.explain(source.explain());\n        }\n        if (source.fetchSource() != null) {\n            context.fetchSourceContext(source.fetchSource());\n        }\n        if (source.fieldDataFields() != null) {\n            FieldDataFieldsContext fieldDataFieldsContext = context.getFetchSubPhaseContext(FieldDataFieldsFetchSubPhase.CONTEXT_FACTORY);\n            for (String field : source.fieldDataFields()) {\n                fieldDataFieldsContext.add(new FieldDataField(field));\n            }\n        }\n        if (source.highlighter() != null) {\n            XContentParser highlighterParser = null;\n            try {\n                highlighterParser = XContentFactory.xContent(source.highlighter()).createParser(source.highlighter());\n                this.elementParsers.get(\"highlight\").parse(highlighterParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = highlighterParser != null ? highlighterParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.innerHits() != null) {\n            XContentParser innerHitsParser = null;\n            try {\n                innerHitsParser = XContentFactory.xContent(source.innerHits()).createParser(source.innerHits());\n                this.elementParsers.get(\"highlight\").parse(innerHitsParser, context);\n            } catch (Exception e) {\n                String sSource = \"_na_\";\n                try {\n                    sSource = source.toString();\n                } catch (Throwable e1) {\n                    // ignore\n                }\n                XContentLocation location = innerHitsParser != null ? innerHitsParser.getTokenLocation() : null;\n                throw new SearchParseException(context, \"failed to parse suggest source [\" + sSource + \"]\", location, e);\n            }\n        }\n        if (source.scriptFields() != null) {\n            for (org.elasticsearch.search.builder.SearchSourceBuilder.ScriptField field : source.scriptFields()) {\n                SearchScript searchScript = context.scriptService().search(context.lookup(), field.script(), ScriptContext.Standard.SEARCH);\n                context.scriptFields().add(new ScriptField(field.fieldName(), searchScript, false)); // NORELEASE need to have ignore_exception parsed somewhere\n            }\n        }\n        // NOCOMMIT need to work out what to do about term_vectors_fetch (previously handled by TermVectorsFetchParseElement) as this is not available as an option in SearchSourceBuilder\n        if (source.version() != null) {\n            context.version(source.version());\n        }\n        if (source.stats() != null) {\n            context.groupStats(Arrays.asList(source.stats())); // NORELEASE stats should be a list in SearchSourceBuilder\n        }\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    protected void innerReadFrom(StreamInput in) throws IOException {\n        index = in.readString();\n        shardId = in.readVInt();\n        searchType = SearchType.fromId(in.readByte());\n        numberOfShards = in.readVInt();\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n        source = SearchSourceBuilder.PROTOTYPE.readFrom(in);\n        types = in.readStringArray();\n        filteringAliases = in.readStringArray();\n        nowInMillis = in.readVLong();\n        template = in.readOptionalStreamable(new Template());\n        requestCache = in.readOptionalBoolean();\n    }","id":5266,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected void innerReadFrom(StreamInput in) throws IOException {\n        index = in.readString();\n        shardId = in.readVInt();\n        searchType = SearchType.fromId(in.readByte());\n        numberOfShards = in.readVInt();\n        if (in.readBoolean()) {\n            scroll = readScroll(in);\n        }\n        if (in.readBoolean()) {\n            source = SearchSourceBuilder.PROTOTYPE.readFrom(in);\n        }\n        types = in.readStringArray();\n        filteringAliases = in.readStringArray();\n        nowInMillis = in.readVLong();\n        template = in.readOptionalStreamable(new Template());\n        requestCache = in.readOptionalBoolean();\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected void innerWriteTo(StreamOutput out, boolean asKey) throws IOException {\n        out.writeString(index);\n        out.writeVInt(shardId);\n        out.writeByte(searchType.id());\n        if (!asKey) {\n            out.writeVInt(numberOfShards);\n        }\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        source.writeTo(out);\n        out.writeStringArray(types);\n        out.writeStringArrayNullable(filteringAliases);\n        if (!asKey) {\n            out.writeVLong(nowInMillis);\n        }\n\n        out.writeOptionalStreamable(template);\n        out.writeOptionalBoolean(requestCache);\n    }","id":5267,"modified_method":"protected void innerWriteTo(StreamOutput out, boolean asKey) throws IOException {\n        out.writeString(index);\n        out.writeVInt(shardId);\n        out.writeByte(searchType.id());\n        if (!asKey) {\n            out.writeVInt(numberOfShards);\n        }\n        if (scroll == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            scroll.writeTo(out);\n        }\n        if (source == null) {\n            out.writeBoolean(false);\n        } else {\n            out.writeBoolean(true);\n            source.writeTo(out);\n\n        }\n        out.writeStringArray(types);\n        out.writeStringArrayNullable(filteringAliases);\n        if (!asKey) {\n            out.writeVLong(nowInMillis);\n        }\n\n        out.writeOptionalStreamable(template);\n        out.writeOptionalBoolean(requestCache);\n    }","commit_id":"585ed07c5bb279ef4fa59035924739f6e560c15b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void receivePipelineContent(ContentObject co) {\r\n\t\tlong returnedSegment = SegmentationProfile.getSegmentNumber(co.name());\r\n\t\tArrayList<Interest> toRemove = new ArrayList<Interest>();\t\r\n\t\t\r\n\t\t//is there a reader ready?\r\n\t\tlong rr;\r\n\t\tsynchronized(readerReady) {\r\n\t\t\trr = Long.parseLong(readerReady);\r\n\t\t}\r\n\t\t\t//while(rr > -1) {\r\n\t\t\tif(rr > -1) {\r\n\t\t\t\t//there is a reader waiting\r\n\t\t\t\tSystem.out.println(\"there is a reader waiting, we should wait unless we have their segment\");\r\n\t\t\t\tif(returnedSegment == rr) {\r\n\t\t\t\t\t//this is the segment they want, we should just finish\r\n\t\t\t\t\tSystem.out.println(\"we are working on their segment...  we should finish!\");\r\n\t\t\t\t\t//break;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (haveSegmentBuffered(rr)) {\r\n\t\t\t\t\t\t//we have their segment\r\n\t\t\t\t\t\t//this isn't their segment, but the one they want is here. we should defer\r\n\t\t\t\t\t\tSystem.out.println(\"we are deferring until they are done\");\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tinOrderSegments.wait();\r\n\t\t\t\t\t\t\t//readerReady.wait();\r\n\t\t\t\t\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t\t\t\t\trr = Long.parseLong(readerReady);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"we can go back to processing\");\r\n\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//we don't have their segment, we should keep going\r\n\t\t\t\t\t\tSystem.out.println(\"we don't have their segment, keep processing this one.\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//are we at the last segment?\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tif (SegmentationProfile.isLastSegment(co)) {\r\n\t\t\t\tSystem.out.println(\"we just got the last segment...\");\r\n\t\t\t\t_lastSegmentNumber = returnedSegment;\r\n\t\t\t}\r\n\t\t//}\r\n\t\tlong segNum;\r\n\t\t//synchronized (_sentInterests) {\r\n\t\t\tfor(Interest i: _sentInterests) {\r\n\t\t\t\tsegNum = SegmentationProfile.getSegmentNumber(i.name());\r\n\t\t\t\tif(segNum == returnedSegment || (_lastSegmentNumber > -1 && segNum > _lastSegmentNumber)) {\r\n\t\t\t\t\tSystem.out.println(\"cancelling interest for segment \"+SegmentationProfile.getSegmentNumber(i.name())+\" Interest: \"+i);\r\n\t\t\t\t\t_handle.cancelInterest(i, this);\r\n\t\t\t\t\ttoRemove.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t_sentInterests.removeAll(toRemove);\r\n\t\t\ttoRemove.clear();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tSystem.out.println(\"received pipeline segment: \"+co.name());\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tsynchronized(readySegment) {\r\n\t\t\t\t//can we help the reader with a shortcut\r\n\t\t\t\tif (readySegment == null) {\r\n\t\t\t\t\t//need to set the ready segment\r\n\t\t\t\t\tif(inOrderSegments.size() > 0)\r\n\t\t\t\t\t\treadySegment = inOrderSegments.get(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\tif (returnedSegment == _nextPipelineSegment) {\r\n\t\t\t\t_totalReceived++;\r\n\t\t\t\tSystem.out.println(\"we got the segment (\"+returnedSegment+\") we were expecting!\");\r\n\t\t\t\tif(waitingSegment!=-1)\r\n\t\t\t\t\tSystem.out.println(\"someone is waiting for segment: \"+waitingSegment);\r\n\t\t\t\t//this is the next segment in order\r\n\t\t\t\tinOrderSegments.add(co);\r\n\t\t\t\t_lastInOrderSegment = returnedSegment;\r\n\t\t\t\t//do we have any out of order segments to move over?\r\n\t\t\t\tSystem.out.print(\" before checking ooos:\" );\r\n\t\t\t\tprintSegments();\r\n\t\t\t\tif (outOfOrderSegments.size() > 0 ) {\r\n\t\t\t\t\tSystem.out.println(\"we have out of order segments to check\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t//this was a hole..  cancel its other interests\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile (outOfOrderSegments.size() > 0 ) {\r\n\t\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name()) == nextInOrderSegmentNeeded()) {\r\n\t\t\t\t\t\t\t_lastInOrderSegment = SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name());\r\n\t\t\t\t\t\t\tinOrderSegments.add(outOfOrderSegments.remove(0));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//the first one isn't what we wanted..\r\n\t\t\t\t\t\t\tSystem.out.println(\"we have \"+SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name())+\" but need \"+nextInOrderSegmentNeeded()+\" breaking from loop, we don't have the one we need\");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.print(\" after checking ooos: \");\r\n\t\t\t\tprintSegments();\r\n\t\t\t\t\r\n\t\t\t\t//if we had out of order segments, we might still want to advance the pipeline...\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"we got segment \"+returnedSegment+\" an Out of Order segment...  we were expecting segment \"+_nextPipelineSegment);\r\n\t\t\t\t//this segment is out of order\r\n\t\t\t\t//make sure it wasn't a previous segment that we don't need any more...\r\n\t\t\t\tif (_nextPipelineSegment > returnedSegment) {\r\n\t\t\t\t\tSystem.out.println(\"this is a previous segment...  drop\");\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.out.println(\"this is a pipeline segment, add to outOfOrderSegment queue\");\r\n\t\t\t\t\t_totalReceived++;\r\n\t\t\t\t\t_holes++;\r\n\t\t\t\t\tint i = 0;\r\n\t\t\t\t\tfor (ContentObject c:outOfOrderSegments) {\r\n\t\t\t\t\t\tif(returnedSegment < SegmentationProfile.getSegmentNumber(c.name()))\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutOfOrderSegments.add(i, co);\r\n\t\t\t\t\r\n\t\t\t\t\t//now we have a hole to fill\r\n\t\t\t\t\tSystem.out.println(\"we got a segment out of order, need to fill a hole at \"+nextInOrderSegmentNeeded());\r\n\t\t\t\t\tattemptHoleFilling(_nextPipelineSegment);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t_nextPipelineSegment = nextInOrderSegmentNeeded();\r\n\t\t\tSystem.out.println(\"the next segment needed is \"+_nextPipelineSegment);\r\n\t\t    synchronized(incoming) {\r\n\t\t    \tprocessingSegment = -1;\r\n\t\t    }\r\n\t\t    \r\n\t\t    /*\r\n\t\t//if there is a waiting thread, let them know the data is ready\r\n\t\t\tif(waitingThread!=null && returnedSegment == waitingSegment) {\r\n\t\t\t\tSystem.out.println(\"waitingSegment = \" + waitingSegment);\r\n\t\t\t\t//waitingThread.interrupt();\r\n\t\t\t\tSystem.out.println(\"interrupted thread: min sleep \"+(System.currentTimeMillis()-waitSleep));\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\r\n\t\t\tif(waitingThread!=null && returnedSegment == waitingSegment) {\r\n\t\t\t\tinOrderSegments.notifyAll();\r\n\t\t\t\tSystem.out.println(\"notifyAll: min sleep \"+(System.currentTimeMillis()-waitSleep));\r\n\t\t\t\ttry {\r\n\t\t\t\t\tinOrderSegments.wait();\r\n\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t//back to me...  keep going\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}","id":5268,"modified_method":"private void receivePipelineContent(ContentObject co) {\r\n\t\tlong returnedSegment = SegmentationProfile.getSegmentNumber(co.name());\r\n\t\tArrayList<Interest> toRemove = new ArrayList<Interest>();\t\r\n\t\t\r\n\t\t//is there a reader ready?\r\n\t\tlong rr;\r\n\t\tsynchronized(readerReady) {\r\n\t\t\trr = Long.parseLong(readerReady);\r\n\t\t}\r\n\t\t\t//while(rr > -1) {\r\n\t\t\tif(rr > -1) {\r\n\t\t\t\t//there is a reader waiting\r\n\t\t\t\tLog.info(\"PIPELINE: there is a reader waiting, we should wait unless we have their segment\");\r\n\t\t\t\tif(returnedSegment == rr) {\r\n\t\t\t\t\t//this is the segment they want, we should just finish\r\n\t\t\t\t\tLog.info(\"PIPELINE: we are working on their segment...  we should finish!\");\r\n\t\t\t\t\t//break;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (haveSegmentBuffered(rr)) {\r\n\t\t\t\t\t\t//we have their segment\r\n\t\t\t\t\t\t//this isn't their segment, but the one they want is here. we should defer\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we are deferring until they are done\");\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tinOrderSegments.wait();\r\n\t\t\t\t\t\t\t//readerReady.wait();\r\n\t\t\t\t\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t\t\t\t\trr = Long.parseLong(readerReady);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: we can go back to processing\");\r\n\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//we don't have their segment, we should keep going\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we don't have their segment, keep processing this one.\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//are we at the last segment?\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tif (SegmentationProfile.isLastSegment(co)) {\r\n\t\t\t\tLog.info(\"PIPELINE: we just got the last segment...\");\r\n\t\t\t\t_lastSegmentNumber = returnedSegment;\r\n\t\t\t}\r\n\t\t//}\r\n\t\tlong segNum;\r\n\t\t//synchronized (_sentInterests) {\r\n\t\t\tfor(Interest i: _sentInterests) {\r\n\t\t\t\tsegNum = SegmentationProfile.getSegmentNumber(i.name());\r\n\t\t\t\tif(segNum == returnedSegment || (_lastSegmentNumber > -1 && segNum > _lastSegmentNumber)) {\r\n\t\t\t\t\tif(Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: cancelling interest for segment \"+SegmentationProfile.getSegmentNumber(i.name())+\" Interest: \"+i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_handle.cancelInterest(i, this);\r\n\t\t\t\t\ttoRemove.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t_sentInterests.removeAll(toRemove);\r\n\t\t\ttoRemove.clear();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tLog.info(\"PIPELINE: received pipeline segment: {0}\", co.name());\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tsynchronized(readySegment) {\r\n\t\t\t\t//can we help the reader with a shortcut\r\n\t\t\t\tif (readySegment == null) {\r\n\t\t\t\t\t//need to set the ready segment\r\n\t\t\t\t\tif(inOrderSegments.size() > 0)\r\n\t\t\t\t\t\treadySegment = inOrderSegments.get(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\tif (returnedSegment == _nextPipelineSegment) {\r\n\t\t\t\t_totalReceived++;\r\n\t\t\t\tLog.info(\"PIPELINE: we got the segment ({0}) we were expecting!\", returnedSegment);\r\n\t\t\t\tif(waitingSegment!=-1)\r\n\t\t\t\t\tLog.info(\"PIPELINE: someone is waiting for segment: {0}\", waitingSegment);\r\n\t\t\t\t//this is the next segment in order\r\n\t\t\t\tinOrderSegments.add(co);\r\n\t\t\t\t_lastInOrderSegment = returnedSegment;\r\n\t\t\t\t//do we have any out of order segments to move over?\r\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: before checking ooos:\" );\r\n\t\t\t\t\tprintSegments();\r\n\t\t\t\t}\r\n\t\t\t\tif (outOfOrderSegments.size() > 0 ) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: we have out of order segments to check\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t//this was a hole..  cancel its other interests\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile (outOfOrderSegments.size() > 0 ) {\r\n\t\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name()) == nextInOrderSegmentNeeded()) {\r\n\t\t\t\t\t\t\t_lastInOrderSegment = SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name());\r\n\t\t\t\t\t\t\tinOrderSegments.add(outOfOrderSegments.remove(0));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//the first one isn't what we wanted..\r\n\t\t\t\t\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: we have \"+SegmentationProfile.getSegmentNumber(outOfOrderSegments.get(0).name())+\" but need \"+nextInOrderSegmentNeeded()+\" breaking from loop, we don't have the one we need\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: after checking ooos: \");\r\n\t\t\t\t\tprintSegments();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//if we had out of order segments, we might still want to advance the pipeline...\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tLog.info(\"PIPELINE: we got segment {0} an Out of Order segment...  we were expecting segment {1}\", returnedSegment, _nextPipelineSegment);\r\n\t\t\t\t//this segment is out of order\r\n\t\t\t\t//make sure it wasn't a previous segment that we don't need any more...\r\n\t\t\t\tif (_nextPipelineSegment > returnedSegment) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: this is a previous segment...  drop\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.info(\"PIPELINE: this is a pipeline segment, add to outOfOrderSegment queue\");\r\n\t\t\t\t\t_totalReceived++;\r\n\t\t\t\t\t_holes++;\r\n\t\t\t\t\tint i = 0;\r\n\t\t\t\t\tfor (ContentObject c:outOfOrderSegments) {\r\n\t\t\t\t\t\tif(returnedSegment < SegmentationProfile.getSegmentNumber(c.name()))\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutOfOrderSegments.add(i, co);\r\n\t\t\t\t\r\n\t\t\t\t\t//now we have a hole to fill\r\n\t\t\t\t\tif (Log.isLoggable(Level.INFO))\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we got a segment out of order, need to fill a hole at \"+nextInOrderSegmentNeeded());\r\n\t\t\t\t\tattemptHoleFilling(_nextPipelineSegment);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t_nextPipelineSegment = nextInOrderSegmentNeeded();\r\n\t\t\tLog.info(\"PIPELINE: the next segment needed is {0}\", _nextPipelineSegment);\r\n\t\t    synchronized(incoming) {\r\n\t\t    \tprocessingSegment = -1;\r\n\t\t    }\r\n\t\t    \r\n\t\t    if(waitingThread!=null && returnedSegment == waitingSegment) {\r\n\t\t\t\tinOrderSegments.notifyAll();\r\n\t\t\t\tif (Log.isLoggable(Level.INFO))\r\n\t\t\t\t\tLog.info(\"PIPELINE: notifyAll: min sleep {0}\", (System.currentTimeMillis()-waitSleep));\r\n\t\t\t\ttry {\r\n\t\t\t\t\tinOrderSegments.wait();\r\n\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t//back to me...  keep going\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void cancelInterests() {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tfor (Interest i: _sentInterests) {\r\n\t\t\t\t_handle.cancelInterest(i, this);\r\n\t\t\t\tSystem.out.println(\"canceling interest: \"+i);\r\n\t\t\t}\r\n\t\t\t_sentInterests.clear();\r\n\t\t}\r\n\t}","id":5269,"modified_method":"private void cancelInterests() {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tfor (Interest i: _sentInterests) {\r\n\t\t\t\t_handle.cancelInterest(i, this);\r\n\t\t\t\tLog.info(\"PIPELINE: canceling interest: {0}\", i);\r\n\t\t\t}\r\n\t\t\t_sentInterests.clear();\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\r\n\t * Retrieves a specific segment of this stream, indicated by segment number.\r\n\t * Three navigation options: get first (leftmost) segment, get next segment,\r\n\t * or get a specific segment.\r\n\t * Have to assume that everyone is using our segment number encoding. Probably\r\n\t * easier to ask raw streams to use that encoding (e.g. for packet numbers)\r\n\t * than to flag streams as to whether they are using integers or segments.\r\n\t * @param number Segment number to retrieve. See SegmentationProfile for numbering.\r\n\t * \t\tIf we already have this segment as #currentSegmentNumber(), will just\r\n\t * \t\treturn the current segment, and will not re-retrieve it from the network.\r\n\t * @throws IOException If no matching content found (actually throws NoMatchingContentFoundException)\r\n\t *  \tor if there is an error at lower layers.\r\n\t **/\r\n\tprotected ContentObject getSegment(long number) throws IOException {\r\n\t\tlong ttgl = System.currentTimeMillis();\r\n\t\t\r\n\t\tsynchronized(readerReady){\r\n\t\t\treaderReady = Long.toString(number);\r\n\t\t}\r\n\t\t\r\n\t\tsynchronized (inOrderSegments) {\r\n\t\t\tSystem.out.println(\"time to get lock in getSegment (number) \"+(System.currentTimeMillis() - ttgl));\r\n\t\t\t// check if the base name was updated (in case we didn't have the version) for pipelining\r\n\t\t\t\r\n\t\t\tif (_baseName.equals(_basePipelineName)) {\r\n\t\t\t\t// we already have the base name...\r\n\t\t\t\tSystem.out.println(\"plot \" + (System.currentTimeMillis() - _pipelineStartTime) + \" inOrder: \" + inOrderSegments.size() + \" outOfOrder: \" + outOfOrderSegments.size() + \" interests: \" + _sentInterests.size() + \" holes: \" + _holes + \" received: \" + _totalReceived + \" [\" + _baseName + \"].3\"+ \" toProcess \"+incoming.size());\r\n\t\t\t} else {\r\n\t\t\t\t// we don't have the base name... set for pipelining.\r\n\t\t\t\tsetPipelineName(_baseName);\r\n\t\t\t\tstartPipeline();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (_currentSegment != null) {\r\n\t\t\t\t// what segment do we have right now? maybe we already have it\r\n\t\t\t\tif (currentSegmentNumber() == number) {\r\n\t\t\t\t\t// we already have this segment... just use it\r\n\t\t\t\t\treturn _currentSegment;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\tContentObject co = getPipelineSegment(number);\r\n\t\tif (co != null) {\r\n\t\t\tSystem.out.println(\"we had segment \" + number + \" already!!\");\r\n\t\t\tadvancePipeline(false);\r\n\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t//readerReady.notifyAll();\r\n\t\t\t\treaderReady = \"-1\";\r\n\t\t\t\tinOrderSegments.notifyAll();\r\n\t\t\t}\r\n\t\t\treturn co;\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"we don't have segment \" + number + \" pipelined... blocking\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// the segment was not available... we need to wait until the\r\n\t\t// pipeline gets it in\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tlong start = System.currentTimeMillis();\r\n\t\t\tlong sleep = 0;\r\n\t\t\tlong sleepCheck = 0;\r\n\t\t\t//try {\r\n\t\t\t\tSystem.out.println(\"_timeout = \" + _timeout);\r\n\t\t\t\t//synchronized(inOrderSegments) {\r\n\t\t\t\t\twaitingThread = Thread.currentThread();\r\n\t\t\t\t\twaitingSegment = number;\r\n\t\t\t\t\twhile (sleep < _timeout) {\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstart = System.currentTimeMillis();\r\n\t\t\t\t\t\twaitSleep = start;\r\n\t\t\t\t\t\tsleepCheck = _timeout - sleep;\r\n\t\t\t\t\t\tif(avgResponseTime > 0 && avgResponseTime < (long)SystemConfiguration.SHORT_TIMEOUT) {\r\n\t\t\t\t\t\t\tif(avgResponseTime > sleepCheck)\r\n\t\t\t\t\t\t\t\tinOrderSegments.wait(sleepCheck);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tinOrderSegments.wait((long)avgResponseTime);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif((long)SystemConfiguration.SHORT_TIMEOUT > sleepCheck)\r\n\t\t\t\t\t\t\t\tinOrderSegments.wait(sleepCheck);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tinOrderSegments.wait((long)SystemConfiguration.SHORT_TIMEOUT);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch(InterruptedException e1) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"awake: interrupted! \" + (sleep));\r\n\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//inOrderSegments.wait(_timeout);\r\n\t\t\t\t\t\tsleep += System.currentTimeMillis() - start;\r\n\t\t\t\t\t\tSystem.out.println(\"slept for \"+sleep+\" ms total\");\r\n\t\t\t\t\t\tif(haveSegmentBuffered(number))\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tattemptHoleFilling(number);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t//co = getPipelineSegment(number);\r\n\t\t\t\t\t\t//if(co!=null)\r\n\t\t\t\t\t\t//\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tSystem.out.println(\"awake: done sleeping \" + (sleep));\r\n\t\t\t//} catch (InterruptedException e1) {\r\n\t\t\t\t// interrupted... maybe the data is here!\r\n\t\t\t//\tSystem.out.println(\"awake: interrupted! \" + (sleep));\r\n\t\t\t\t//when I am done, make sure I wake the processing thread back up.\r\n\t\t\t//\tinOrderSegments.notifyAll();\r\n\t\t\t//}\r\n\t\t\twaitingThread = null;\r\n\t\t\twaitingSegment = -1;\r\n\t\t\t//if (co == null)\r\n\t\t\tco = getPipelineSegment(number);\r\n\t\t}\r\n\t\t\r\n\t\tsynchronized(readerReady) {\r\n\t\t\t//readerReady.notifyAll();\r\n\t\t\treaderReady = \"-1\";\r\n\t\t\tinOrderSegments.notifyAll();\r\n\t\t}\r\n\t\t\r\n\t\tif (co != null) {\r\n\t\t\tSystem.out.println(\"we had segment \" + number + \" already!!\");\r\n\t\t\treturn co;\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"we don't have segment \" + number + \" pipelined... what happened?\");\r\n\t\t}\r\n\t\t\r\n\t\tLog.info(\"Cannot get segment \" + number + \" of file {0} expected segment: {1}.\", _baseName, SegmentationProfile.segmentName(_baseName, number));\r\n\t\tthrow new IOException(\"Cannot get segment \" + number + \" of file \"+ _baseName + \" expected segment: \"+ SegmentationProfile.segmentName(_baseName, number));\r\n\t\t}\r\n\t}","id":5270,"modified_method":"/**\r\n\t * Retrieves a specific segment of this stream, indicated by segment number.\r\n\t * Three navigation options: get first (leftmost) segment, get next segment,\r\n\t * or get a specific segment.\r\n\t * Have to assume that everyone is using our segment number encoding. Probably\r\n\t * easier to ask raw streams to use that encoding (e.g. for packet numbers)\r\n\t * than to flag streams as to whether they are using integers or segments.\r\n\t * @param number Segment number to retrieve. See SegmentationProfile for numbering.\r\n\t * \t\tIf we already have this segment as #currentSegmentNumber(), will just\r\n\t * \t\treturn the current segment, and will not re-retrieve it from the network.\r\n\t * @throws IOException If no matching content found (actually throws NoMatchingContentFoundException)\r\n\t *  \tor if there is an error at lower layers.\r\n\t **/\r\n\tprotected ContentObject getSegment(long number) throws IOException {\r\n\t\tlong ttgl = System.currentTimeMillis();\r\n\t\t\r\n\t\tsynchronized(readerReady){\r\n\t\t\treaderReady = Long.toString(number);\r\n\t\t}\r\n\t\t\r\n\t\tsynchronized (inOrderSegments) {\r\n\t\t\tLog.info(\"PIPELINE: time to get lock in getSegment (number) \"+(System.currentTimeMillis() - ttgl));\r\n\t\t\t// check if the base name was updated (in case we didn't have the version) for pipelining\r\n\t\t\t\r\n\t\t\tif (_baseName.equals(_basePipelineName)) {\r\n\t\t\t\t// we already have the base name...\r\n\t\t\t\tSystem.out.println(\"plot \" + (System.currentTimeMillis() - _pipelineStartTime) + \" inOrder: \" + inOrderSegments.size() + \" outOfOrder: \" + outOfOrderSegments.size() + \" interests: \" + _sentInterests.size() + \" holes: \" + _holes + \" received: \" + _totalReceived + \" [\" + _baseName + \"].3\"+ \" toProcess \"+incoming.size());\r\n\t\t\t} else {\r\n\t\t\t\t// we don't have the base name... set for pipelining.\r\n\t\t\t\tsetPipelineName(_baseName);\r\n\t\t\t\tstartPipeline();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (_currentSegment != null) {\r\n\t\t\t\t// what segment do we have right now? maybe we already have it\r\n\t\t\t\tif (currentSegmentNumber() == number) {\r\n\t\t\t\t\t// we already have this segment... just use it\r\n\t\t\t\t\treturn _currentSegment;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\tContentObject co = getPipelineSegment(number);\r\n\t\tif (co != null) {\r\n\t\t\tLog.info(\"PIPELINE: we had segment {0} already!!\", number);\r\n\t\t\tadvancePipeline(false);\r\n\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t//readerReady.notifyAll();\r\n\t\t\t\treaderReady = \"-1\";\r\n\t\t\t\tinOrderSegments.notifyAll();\r\n\t\t\t}\r\n\t\t\treturn co;\r\n\t\t} else {\r\n\t\t\tLog.info(\"PIPELINE: we don't have segment {0} pipelined... blocking\", number);\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// the segment was not available... we need to wait until the\r\n\t\t// pipeline gets it in\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tlong start = System.currentTimeMillis();\r\n\t\t\tlong sleep = 0;\r\n\t\t\tlong sleepCheck = 0;\r\n\t\t\tLog.info(\"PIPELINE: _timeout = {0}\", _timeout);\r\n\t\t\twaitingThread = Thread.currentThread();\r\n\t\t\twaitingSegment = number;\r\n\t\t\twhile (sleep < _timeout) {\r\n\t\t\t\ttry{\r\n\t\t\t\t\tstart = System.currentTimeMillis();\r\n\t\t\t\t\twaitSleep = start;\r\n\t\t\t\t\tsleepCheck = _timeout - sleep;\r\n\t\t\t\t\tif(avgResponseTime > 0 && avgResponseTime < (long)SystemConfiguration.SHORT_TIMEOUT) {\r\n\t\t\t\t\t\tif(avgResponseTime > sleepCheck)\r\n\t\t\t\t\t\t\tinOrderSegments.wait(sleepCheck);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tinOrderSegments.wait((long)avgResponseTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif((long)SystemConfiguration.SHORT_TIMEOUT > sleepCheck)\r\n\t\t\t\t\t\t\tinOrderSegments.wait(sleepCheck);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tinOrderSegments.wait((long)SystemConfiguration.SHORT_TIMEOUT);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(InterruptedException e1) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: awake: interrupted! {0}\", sleep);\r\n\t\t\t\t\t//break;\r\n\t\t\t\t}\r\n\t\t\t\tsleep += System.currentTimeMillis() - start;\r\n\t\t\t\tLog.info(\"PIPELINE: slept for {0} ms total\", sleep);\r\n\t\t\t\tif(haveSegmentBuffered(number))\r\n\t\t\t\t\tbreak;\r\n\t\t\t\telse {\r\n\t\t\t\t\tattemptHoleFilling(number);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.info(\"PIPELINE: awake: done sleeping {0}\", sleep);\r\n\t\t\t\r\n\t\t\twaitingThread = null;\r\n\t\t\twaitingSegment = -1;\r\n\t\t\tco = getPipelineSegment(number);\r\n\t\t//}\r\n\t\t\r\n\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t//readerReady.notifyAll();\r\n\t\t\t\treaderReady = \"-1\";\r\n\t\t\t\tinOrderSegments.notifyAll();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (co != null) {\r\n\t\t\tLog.info(\"PIPELINE: we had segment {0} already!!\", number);\r\n\t\t\treturn co;\r\n\t\t} else {\r\n\t\t\tLog.info(\"PIPELINE: we don't have segment {0} pipelined... what happened?\", number);\r\n\t\t}\r\n\t\t\r\n\t\tif(Log.isLoggable(Level.INFO))\r\n\t\t\tLog.info(\"PIPELINE: Cannot get segment \" + number + \" of file {0} expected segment: {1}.\", _baseName, SegmentationProfile.segmentName(_baseName, number));\r\n\t\t\r\n\t\tthrow new IOException(\"Cannot get segment \" + number + \" of file \"+ _baseName + \" expected segment: \"+ SegmentationProfile.segmentName(_baseName, number));\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void printSegments() {\r\n\t\tSystem.out.print(\"inOrder: [\");\r\n\t\tfor(ContentObject c: inOrderSegments)\r\n\t\t\tSystem.out.print(\" \"+SegmentationProfile.getSegmentNumber(c.name()));\r\n\t\tSystem.out.print(\" ] outOrder: [\");\r\n\t\tfor(ContentObject c: outOfOrderSegments)\r\n\t\t\tSystem.out.print(\" \"+SegmentationProfile.getSegmentNumber(c.name()));\r\n\t\tSystem.out.println(\" ]\");\r\n\t}","id":5271,"modified_method":"private void printSegments() {\r\n\t\tif (!Log.isLoggable(Level.INFO))\r\n\t\t\treturn;\r\n\t\t\r\n\t\tString s = \"inOrder: [\";\r\n\t\tfor(ContentObject c: inOrderSegments)\r\n\t\t\ts += \" \"+SegmentationProfile.getSegmentNumber(c.name());\r\n\t\ts += \" ] outOrder: [\";\r\n\t\tfor(ContentObject c: outOfOrderSegments)\r\n\t\t\ts += \" \"+SegmentationProfile.getSegmentNumber(c.name());\r\n\t\ts += \"]\";\r\n\t\tLog.info(\"PIPELINE: \" + s);\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void setPipelineName(ContentName n) {\r\n\t\t//we need to set the base name for pipelining...  we might not have had the version (or the full name)\r\n\t\t_basePipelineName = n.clone();\r\n\t\tSystem.out.println(\"setting _basePipelineName \"+_basePipelineName);\r\n\t\t\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//need to remove interest for first segment of old name\r\n\t\t\tArrayList<Interest> remove = new ArrayList<Interest>();\r\n\t\t\tfor(Interest i: _sentInterests) {\r\n\t\t\t\tif(SegmentationProfile.segmentRoot(i.name()).equals(_basePipelineName)) {\r\n\t\t\t\t\t//the name matches, keep it\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//name doesn't match...  remove it\r\n\t\t\t\t\tremove.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(Interest i: remove) {\r\n\t\t\t\t_handle.cancelInterest(i,this);\r\n\t\t\t\t_sentInterests.remove(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}","id":5272,"modified_method":"private void setPipelineName(ContentName n) {\r\n\t\t//we need to set the base name for pipelining...  we might not have had the version (or the full name)\r\n\t\t_basePipelineName = n.clone();\r\n\t\tLog.info(\"PIPELINE: setting _basePipelineName {0}\", _basePipelineName);\r\n\t\t\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//need to remove interest for first segment of old name\r\n\t\t\tArrayList<Interest> remove = new ArrayList<Interest>();\r\n\t\t\tfor(Interest i: _sentInterests) {\r\n\t\t\t\tif(SegmentationProfile.segmentRoot(i.name()).equals(_basePipelineName)) {\r\n\t\t\t\t\t//the name matches, keep it\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//name doesn't match...  remove it\r\n\t\t\t\t\tremove.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(Interest i: remove) {\r\n\t\t\t\t_handle.cancelInterest(i,this);\r\n\t\t\t\t_sentInterests.remove(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private boolean haveSegmentBuffered(long segmentNumber) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tContentObject co = null;\r\n\t\t\tfor (int i = 0; i < inOrderSegments.size(); i++) {\r\n\t\t\t\tco = inOrderSegments.get(i);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\tSystem.out.println(\"have segment \"+segmentNumber+\" in iOS, return true.\");\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < outOfOrderSegments.size(); i++) {\r\n\t\t\t\tco = outOfOrderSegments.get(i);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\t//this is the segment we wanted\r\n\t\t\t\t\tSystem.out.println(\"segment \"+segmentNumber+\" is in our oOOS queue, return true\");\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(co.name()) > segmentNumber) {\r\n\t\t\t\t\t\t//we have a hole to fill...\r\n\t\t\t\t\t\tSystem.out.println(\"our out of order segments are past the requested segment...  we have a hole\");\r\n\t\t\t\t\t\tattemptHoleFilling();\r\n\t\t\t\t\t\t//attemptHoleFilling(segmentNumber);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","id":5273,"modified_method":"private boolean haveSegmentBuffered(long segmentNumber) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tContentObject co = null;\r\n\t\t\tfor (int i = 0; i < inOrderSegments.size(); i++) {\r\n\t\t\t\tco = inOrderSegments.get(i);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: have segment {0} in iOS, return true.\", segmentNumber);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < outOfOrderSegments.size(); i++) {\r\n\t\t\t\tco = outOfOrderSegments.get(i);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\t//this is the segment we wanted\r\n\t\t\t\t\tLog.info(\"PIPELINE: segment {0} is in our oOOS queue, return true\", segmentNumber);\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(co.name()) > segmentNumber) {\r\n\t\t\t\t\t\t//we have a hole to fill...\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: our out of order segments are past the requested segment...  we have a hole\");\r\n\t\t\t\t\t\t//attemptHoleFilling();\r\n\t\t\t\t\t\tattemptHoleFilling(segmentNumber);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private boolean requestedSegment(long number) {\r\n\t\tsynchronized(incoming) {\r\n\t\t\tfor(IncomingSegment i: incoming)\r\n\t\t\t\tif (i.segmentNumber == number) {\r\n\t\t\t\t\tSystem.out.println(\"we already asked for it and it is just waiting to be processed\");\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\tif (processingSegment!=-1 && processingSegment == number) {\r\n\t\t\t\tSystem.out.println(\"someone is processing it right now!\");\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tfor (Interest i: _sentInterests)\r\n\t\t\t\tif(SegmentationProfile.getSegmentNumber(i.name()) == number)\r\n\t\t\t\t\treturn true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","id":5274,"modified_method":"private boolean requestedSegment(long number) {\r\n\t\tsynchronized(incoming) {\r\n\t\t\tfor(IncomingSegment i: incoming)\r\n\t\t\t\tif (i.segmentNumber == number) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: we already asked for it and it is just waiting to be processed\");\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\tif (processingSegment!=-1 && processingSegment == number) {\r\n\t\t\t\tLog.info(\"PIPELINE: someone is processing it right now!\");\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tfor (Interest i: _sentInterests)\r\n\t\t\t\tif(SegmentationProfile.getSegmentNumber(i.name()) == number)\r\n\t\t\t\t\treturn true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void attemptHoleFilling(long hole) {\r\n\t\t//holes...  just ask for the next segment we are expecting if we haven't already\r\n\r\n\t\tSystem.out.println(\"checking for a hole at segment: \"+hole);\r\n\t\t\r\n\t\t//first check the incoming segments to see if it is here already\r\n\t\tsynchronized (incoming) {\r\n\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\tif(i.segmentNumber == hole) {\r\n\t\t\t\t\tSystem.out.println(\"segment \"+hole+\" is already here, just needs to be processed\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\tif(processingSegment != -1 && hole == processingSegment) {\r\n\t\t\t\tSystem.out.println(\"the segment is being processed... not a hole.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tInterest i = SegmentationProfile.segmentInterest(_basePipelineName, hole, _publisher);\r\n\t\t\r\n\t\t\r\n\t\tint index = -1;\r\n\t\tint index2 = -1;\r\n\t\t\r\n\t\tlong elapsed1 = -1;\r\n\t\tlong elapsed2 = -1;\r\n\t\t\r\n\t\tInterest expressed;\r\n\t\ttry {\r\n\t\t\tsynchronized (inOrderSegments) {\r\n\t\t\t\t// see if this interest is already there\r\n\t\t\t\tindex = _sentInterests.indexOf(i);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\texpressed = _sentInterests.get(index);\r\n\t\t\t\t\telapsed1 = System.currentTimeMillis() - expressed.userTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(elapsed1 == -1) {\r\n\t\t\t\t\t\tSystem.out.println(\"base segment is there, but the express time is -1, it must be getting processed\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tSystem.out.println(\"base interest is already there, try adding excludes elapsed time = \"+elapsed1);\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// base interest isn't there, the the exclude could be.\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tfor (int attempt = 1; attempt < SystemConfiguration.PIPELINE_SEGMENTATTEMPTS; attempt++) {\r\n\t\t\t\t\tExclude ex = new Exclude();\r\n\t\t\t\t\tex.add(new byte[][]{SegmentationProfile.getSegmentNumberNameComponent(hole+attempt)});\r\n\t\t\t\t\r\n\t\t\t\t\ti.exclude(ex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tInterest toDelete = null;\r\n\t\t\t\t\tindex2 = 0;\r\n\t\t\t\t\tlong excludedSegment = -1;\r\n\t\t\t\t\tExcludeComponent ec = null;\r\n\t\t\t\t\tfor(Interest expInt: _sentInterests) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(expInt.name()) == hole) {\r\n\t\t\t\t\t\t\t//this is the interest we want to look at\r\n\t\t\t\t\t\t\tif(expInt.exclude()!=null) {\r\n\t\t\t\t\t\t\t\tec = (ExcludeComponent)expInt.exclude().value(0);\r\n\t\t\t\t\t\t\t\tfor (int a = 1; a < SystemConfiguration.PIPELINE_SEGMENTATTEMPTS; a++) {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\texcludedSegment = SegmentationProfile.getSegmentNumber(ec.getBytes());\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"the excluded number is: \" + excludedSegment);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (expInt.compareTo(i) == 0 && ex.equals(expInt.exclude())) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"we have already done \"+attempt+\" attempt(s) at holefilling...  try again! expressed: \"+expInt);\r\n\t\t\t\t\t\t\tif(attempt+1 < SystemConfiguration.PIPELINE_SEGMENTATTEMPTS) {\r\n\t\t\t\t\t\t\t\ttoDelete = expInt;\r\n\t\t\t\t\t\t\t\tex = new Exclude();\r\n\t\t\t\t\t\t\t\tex.add(new byte[][]{SegmentationProfile.getSegmentNumberNameComponent(hole+attempt+1)});\r\n\t\t\t\t\t\t\t\ti.exclude(ex);\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"going to express the next attempt: \"+i);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"we have tried as many times as we can...  break here\");\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//System.out.println(\"this is not the interest we are looking for: \"+i);\r\n\t\t\t\t\t\t\t//System.out.println(\"this holefilling interest (attempt \"+attempt+\") isn't there...  maybe we have tried more!\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tindex2++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(toDelete!=null) {\r\n\t\t\t\t\t\tSystem.out.println(\"we can try again to fill the hole!\");\r\n\t\t\t\t\t\texpressed = toDelete;\r\n\t\t\t\t\t\tif(expressed.userTime == -1) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"hole filling segment is there, but the express time is -1, it must be getting processed\");\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telapsed2 = System.currentTimeMillis() - expressed.userTime;\r\n\t\t\t\t\t\t\tSystem.out.println(\"elapsed2 time \"+elapsed2);\r\n\t\t\t\t\t\t\tif(elapsed2 > avgResponseTime*2 && avgResponseTime > -1) {\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"expressing the next interest! \"+i);\r\n\t\t\t\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\t\t\t\t_sentInterests.add(i);\r\n\r\n\t\t\t\t\t\t\t\t_handle.cancelInterest(toDelete, this);\r\n\t\t\t\t\t\t\t\t_sentInterests.remove(toDelete);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"expressed: \"+i+\" deleted: \"+toDelete);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"current expressed interests: \");\r\n\t\t\t\t\t\t\t\tfor(Interest p: _sentInterests)\r\n\t\t\t\t\t\t\t\t\tSystem.out.println(p);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tSystem.out.println(\"need to give the earlier attempt a chance to work\");\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSystem.out.println(\"we don't have any holefilling attempts...\");\r\n\t\t\t\t\t\tif (index == -1) {\r\n\t\t\t\t\t\t\t// the base interest wasn't even there (neither was the\r\n\t\t\t\t\t\t\t// hole filling one)\r\n\t\t\t\t\t\t\ti.exclude(null);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t/**\t\r\n\t\t\t\tif (_sentInterests.contains(i)) {\r\n\t\t\t\t\tindex2 = _sentInterests.indexOf(i);\r\n\t\t\t\t\texpressed = _sentInterests.get(index2);\r\n\t\t\t\t\telapsed2 = System.currentTimeMillis() - expressed.expressTime;\r\n\t\t\t\t\tif(elapsed2 == -1) {\r\n\t\t\t\t\t\tSystem.out.println(\"hole filling segment is there, but the express time is -1, it must be getting processed\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"have already attempted to fill the hole (elapsed time = \"+elapsed2+\"), returning\");\t\t\t\t\t\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (index == -1) {\r\n\t\t\t\t\t\t// the base interest wasn't even there (neither was the\r\n\t\t\t\t\t\t// hole filling one)\r\n\t\t\t\t\t\ti.exclude(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t**/\r\n\t\t\t\tif(elapsed1 > avgResponseTime * 2 && avgResponseTime > -1) {\r\n\t\t\t\t\tSystem.out.println(\"adding the base interest or the first holefilling attempt!!! \" + i);\r\n\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\t_sentInterests.add(i);\r\n\t\t\t\t\t// remove the first instance after we express and insert the new\r\n\t\t\t\t\t// interest\r\n\t\t\t\t\tif (index != -1)\r\n\t\t\t\t\t\t_handle.cancelInterest(_sentInterests.remove(index), this);\r\n\t\t\t\t\t\r\n\t\t\t\t\tSystem.out.println(\"requested segment \"\t+ hole + \" to fill hole: \" + i.name() + \" with Interest: \" + i);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (IOException e) {\r\n\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t}\r\n\t}","id":5275,"modified_method":"private void attemptHoleFilling(long hole) {\r\n\t\t//holes...  just ask for the next segment we are expecting if we haven't already\r\n\r\n\t\tLog.info(\"PIPELINE: checking for a hole at segment: {0}\", hole);\r\n\t\t\r\n\t\t//first check the incoming segments to see if it is here already\r\n\t\tsynchronized (incoming) {\r\n\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\tif(i.segmentNumber == hole) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: segment {0} is already here, just needs to be processed\", hole);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\tif(processingSegment != -1 && hole == processingSegment) {\r\n\t\t\t\tLog.info(\"PIPELINE: the segment is being processed... not a hole.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tInterest i = SegmentationProfile.segmentInterest(_basePipelineName, hole, _publisher);\r\n\t\t\r\n\t\t\r\n\t\tint index = -1;\r\n\t\tint index2 = -1;\r\n\t\t\r\n\t\tlong elapsed1 = -1;\r\n\t\tlong elapsed2 = -1;\r\n\t\t\r\n\t\tInterest expressed;\r\n\t\ttry {\r\n\t\t\tsynchronized (inOrderSegments) {\r\n\t\t\t\t// see if this interest is already there\r\n\t\t\t\tindex = _sentInterests.indexOf(i);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\texpressed = _sentInterests.get(index);\r\n\t\t\t\t\telapsed1 = System.currentTimeMillis() - expressed.userTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(elapsed1 == -1) {\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: base segment is there, but the express time is -1, it must be getting processed\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tLog.info(\"PIPELINE: base interest is already there, try adding excludes elapsed time = {0} interest: {1}\", elapsed1, expressed);\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// base interest isn't there, the the exclude could be.\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t//for (int attempt = 1; attempt < SystemConfiguration.PIPELINE_SEGMENTATTEMPTS; attempt++) {\r\n\t\t\t\t\tint attempt = 1;\r\n\t\t\t\t\tExclude ex = new Exclude();\r\n\t\t\t\t\tex.add(new byte[][]{SegmentationProfile.getSegmentNumberNameComponent(hole+attempt)});\r\n\t\t\t\t\r\n\t\t\t\t\ti.exclude(ex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tInterest toDelete = null;\r\n\t\t\t\t\tindex2 = 0;\r\n\t\t\t\t\tlong excludedSegment = -1;\r\n\t\t\t\t\tExcludeComponent ec = null;\r\n\t\t\t\t\tlong tempseg = -1;\r\n\t\t\t\t\tfor(Interest expInt: _sentInterests) {\r\n\t\t\t\t\t\ttempseg = SegmentationProfile.getSegmentNumber(expInt.name());\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: checking if this interest {0} is for our hole at {1}\", tempseg, hole);\r\n\t\t\t\t\t\tif (tempseg == hole) {\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: this is a match!  does it have excludes?\");\r\n\t\t\t\t\t\t\t//this is the interest we want to look at\r\n\t\t\t\t\t\t\tif(expInt.exclude()!=null) {\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: yep! it is a holefilling attempt\");\r\n\t\t\t\t\t\t\t\tec = (ExcludeComponent)expInt.exclude().value(0);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\texcludedSegment = SegmentationProfile.getSegmentNumber(ec.getBytes());\r\n\t\t\t\t\t\t\t\tattempt = (int) (excludedSegment - hole);\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: this is attempt: {0}\", attempt);\r\n\r\n\t\t\t\t\t\t\t\tif (attempt < SystemConfiguration.PIPELINE_SEGMENTATTEMPTS) {\r\n\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: we have more attempts that we can try... \");\r\n\t\t\t\t\t\t\t\t\ttoDelete = expInt;\r\n\t\t\t\t\t\t\t\t\tex = new Exclude();\r\n\t\t\t\t\t\t\t\t\tex.add(new byte[][]{SegmentationProfile.getSegmentNumberNameComponent(hole+attempt+1)});\r\n\t\t\t\t\t\t\t\t\ti.exclude(ex);\r\n\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: going to express the next attempt: {0}\", i);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: we have tried as many times as we can...  break here\");\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: this isn't a holefilling attempt, must be the base interest\");\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//if this is for a segment after ours, break\r\n\t\t\t\t\t\t\tif (tempseg > hole)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tindex2++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(toDelete!=null) {\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we can try again to fill the hole!\");\r\n\t\t\t\t\t\texpressed = toDelete;\r\n\t\t\t\t\t\tif(expressed.userTime == -1) {\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: hole filling segment is there, but the express time is -1, it must be getting processed\");\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telapsed2 = System.currentTimeMillis() - expressed.userTime;\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: elapsed2 time {0}\", elapsed2);\r\n\t\t\t\t\t\t\tif(elapsed2 > avgResponseTime*2 * attempt && avgResponseTime > -1) {\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: expressing the next interest! {0}\", i);\r\n\t\t\t\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\t\t\t\t_sentInterests.add(index2, i);\r\n\r\n\t\t\t\t\t\t\t\t_handle.cancelInterest(toDelete, this);\r\n\t\t\t\t\t\t\t\t_sentInterests.remove(toDelete);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: expressed: {0} deleted: {1}\", i, toDelete);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: current expressed interests: \");\r\n\t\t\t\t\t\t\t\t\tfor(Interest p: _sentInterests)\r\n\t\t\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: {0}\", p);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tLog.info(\"PIPELINE: need to give the earlier attempt a chance to work\");\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we don't have any holefilling attempts... for {0}\", hole);\r\n\t\t\t\t\t\tif (index == -1) {\r\n\t\t\t\t\t\t\t// the base interest wasn't even there (neither was the\r\n\t\t\t\t\t\t\t// hole filling one)\r\n\t\t\t\t\t\t\ti.exclude(null);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(elapsed1 > avgResponseTime * 2 && avgResponseTime > -1) {\r\n\t\t\t\t\tif(i.exclude() == null)\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: adding the base interest or the first holefilling attempt!!! {0}\", i);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: adding the first holefilling attempt! {0}\",  i);\r\n\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\tif (index != -1)\r\n\t\t\t\t\t\t_sentInterests.add(index, i);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_sentInterests.add(i);\r\n\t\t\t\t\t// remove the first instance after we express and insert the new\r\n\t\t\t\t\t// interest\r\n\t\t\t\t\tif (index != -1)\r\n\t\t\t\t\t\t_handle.cancelInterest(_sentInterests.remove(index+1), this);\r\n\t\t\t\t\t\r\n\t\t\t\t\tLog.info(\"PIPELINE: requested segment {0} to fill hole: {1} with Interest: {2}\", hole, i.name(), i);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.info(\"PIPELINE: we need to wait longer to see if the original interest will return the segment\");\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t//}\r\n\t\t} catch (IOException e) {\r\n\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private long nextInOrderSegmentNeeded() {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tif (_currentSegment==null)\r\n\t\t\t\tSystem.out.println(\" current segment: -\"+ \" lastInOrderSegment number \"+_lastInOrderSegment\r\n\t\t\t\t\t\t+ \" _startingSegmentNumber \"+_startingSegmentNumber);\r\n\t\t\telse\r\n\t\t\t\tSystem.out.println(\" current segment: \"+SegmentationProfile.getSegmentNumber(_currentSegment.name())\r\n\t\t\t\t\t\t+ \" lastInOrderSegment number \"+_lastInOrderSegment\r\n\t\t\t\t\t\t+ \" _startingSegmentNumber \"+_startingSegmentNumber);\r\n\t\t\t/*\r\n\t\t\tif(inOrderSegments.size() > 0)\r\n\t\t\t\tSystem.out.println(\" current segment: \"+SegmentationProfile.getSegmentNumber(_currentSegment.name())\r\n\t\t\t\t\t+ \" lastInOrderSegment number \"+SegmentationProfile.getSegmentNumber(inOrderSegments.get(inOrderSegments.size()-1).name())\r\n\t\t\t\t\t+ \" _startingSegmentNumber \"+_startingSegmentNumber);\r\n\t\t\telse\r\n\t\t\t\tSystem.out.println(\" current segment: \"+SegmentationProfile.getSegmentNumber(_currentSegment.name())\r\n\t\t\t\t\t\t+ \" lastInOrderSegment number -\"\r\n\t\t\t\t\t\t+ \" _startingSegmentNumber \"+_startingSegmentNumber);\r\n\t\t\t\t\t\t\r\n\t\t\t*/\r\n\t\t\t\t\t\t\r\n\t\t\tif(outOfOrderSegments.size() > 0) {\r\n\t\t\t\tSystem.out.print(\"we have out of order segments...\");\r\n\t\t\t\tprintSegments();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/*if (inOrderSegments.size() > 0)\r\n\t\t\treturn _lastInOrderSegment + 1;\r\n\t\t\t//return SegmentationProfile.getSegmentNumber(inOrderSegments.get(inOrderSegments.size()-1).name()) +1;\r\n\t\t\telse if (_currentSegment!=null) {\r\n\t\t\treturn _lastInOrderSegment + 1;\r\n\t\t\t//return SegmentationProfile.getSegmentNumber(_currentSegment.name())+1;\r\n\t\t\t}\r\n\t\t\t */\r\n\t\t\tif(_lastInOrderSegment != -1)\r\n\t\t\t\treturn _lastInOrderSegment +1;\r\n\t\t\telse\r\n\t\t\t\treturn _startingSegmentNumber;\r\n\t\t}\r\n\t}","id":5276,"modified_method":"private long nextInOrderSegmentNeeded() {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tif(Log.isLoggable(Level.INFO)) {\r\n\t\t\t\tif (_currentSegment==null)\r\n\t\t\t\t\tLog.info(\"PIPELINE: current segment: - lastInOrderSegment number {0} _startingSegmentNumber {1}\", _lastInOrderSegment, _startingSegmentNumber);\r\n\t\t\t\telse\r\n\t\t\t\t\tLog.info(\"PIPELINE: current segment: \"+SegmentationProfile.getSegmentNumber(_currentSegment.name()) + \" lastInOrderSegment number \"+_lastInOrderSegment\t+ \" _startingSegmentNumber \"+_startingSegmentNumber);\r\n\t\t\t\t\t\t\r\n\t\t\t\tif(outOfOrderSegments.size() > 0) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: we have out of order segments...\");\r\n\t\t\t\t\tprintSegments();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(_lastInOrderSegment != -1)\r\n\t\t\t\treturn _lastInOrderSegment +1;\r\n\t\t\telse\r\n\t\t\t\treturn _startingSegmentNumber;\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public Interest handleContent(ContentObject result, Interest interest) {\r\n\t\tSystem.out.println(\"in handleContent for \"+result.name()+\" at \"+System.currentTimeMillis());\r\n\t\t\r\n\t\tlong starttime = System.currentTimeMillis();\r\n\t\tIncomingSegment is;\r\n\t\t\r\n\t\tsynchronized(incoming) {\r\n\t\t\tif(avgResponseTime == -1) {\r\n\t\t\t\tavgResponseTime = starttime - interest.userTime;\r\n\t\t\t} else {\r\n\t\t\t\t//do not include hole filling responses, they will be extra fast\r\n\t\t\t\tif (interest.exclude()==null)\r\n\t\t\t\t\tavgResponseTime = 0.9 * avgResponseTime + 0.1 * (starttime - interest.userTime);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinterest.userTime = -1;\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"in handleContent after reading \"+ result.name() +\" avgResponseTime \"+avgResponseTime);\r\n\t\t\tis = new IncomingSegment(result, interest);\r\n\t\t\tint index = 0;\r\n\t\t\tfor (IncomingSegment i: incoming) {\r\n\t\t\t\tif(i.segmentNumber > is.segmentNumber)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tincoming.add(index, is);\r\n\t\t\tSystem.out.print(\"segments to process: [\");\r\n\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\tSystem.out.print(\" \"+i.segmentNumber);\r\n\t\t\tSystem.out.println(\" ]\");\r\n\t\t\t\r\n\t\t\tif (processor == null) {\r\n\t\t\t\tSystem.out.println(\"processor was null, setting it to me.\");\r\n\t\t\t\t//no threads are actively processing content...  this one will\r\n\t\t\t\tprocessor = Thread.currentThread();\r\n\t\t\t\t//synchronized(inOrderSegments) {\r\n\t\t\t\t\tis = incoming.remove(0);\r\n\t\t\t\t\t//_sentInterests.add(is.interest);\r\n\t\t\t\t\tprocessingSegment = SegmentationProfile.getSegmentNumber(is.content.name());\r\n\t\t\t\t//}\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"processor not null, returning\");\r\n\t\t\t\t//another thread is already processing...  just dump my content object and return\r\n\t\t\t\tSystem.out.println((System.currentTimeMillis() - starttime)+\" done with handleContent after reading \"+ result.name());\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//this thread will continue processing the incoming content objects until they are empty\r\n\t\tsynchronized(inOrderSegments){\r\n\t\twhile (is != null) {\r\n\t\t\t\r\n\t\t\t//was this a content object we were looking for?\r\n\t\t\t//synchronized(inOrderSegments) {\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"plot \"+(System.currentTimeMillis() - _pipelineStartTime)+\" inOrder: \"+inOrderSegments.size() +\" outOfOrder: \"+outOfOrderSegments.size() + \" interests: \"+_sentInterests.size() +\" holes: \"+_holes + \" received: \"+_totalReceived+\" [\"+_baseName+\"].2\"+ \" toProcess \"+incoming.size());\r\n\t\t\t\t\r\n\t\t\t\tif (_sentInterests.remove(is.interest)) {\r\n\t\t\t\t\t//we had this interest outstanding...\r\n\t\t\t\t\tSystem.out.println(\"we were expecting this data! we had outstanding interests: \"+is.interest);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//we must have canceled the interest...  drop content object\r\n\t\t\t\t\tSystem.out.println(\"we must have canceled the interest, dropping ContentObject(s).  old interest: \"+is.interest);\r\n\r\n\t\t\t\t\t//does this match one of our other interests?\r\n\t\t\t\t\tInterest checkInterest;\r\n\t\t\t\t\tis.interest = null;\r\n\t\t\t\t\tfor (int i = 0; i < _sentInterests.size(); i++) {\r\n\t\t\t\t\t\tcheckInterest = _sentInterests.get(i);\r\n\t\t\t\t\t\tif (checkInterest.matches(result)) {\r\n\t\t\t\t\t\t\t//we found a match!\r\n\t\t\t\t\t\t\tSystem.out.println(\"the incoming packet's interest is gone, but it matches another interest, using that\");\r\n\t\t\t\t\t\t\tis.interest = checkInterest;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (is.interest == null)\r\n\t\t\t\t\t\tis = null;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\t//verify the content object\r\n\t\t\tif (verify(result)) {\r\n\t\t\t\t//this content verified\r\n\t\t\t} else {\r\n\t\t\t\t//content didn't verify, don't hand it up...\r\n\t\t\t\t//TODO content that fails verification needs to be handled better.  need to express a new interest\r\n\t\t\t\tLog.info(\"Dropping content object due to failed verification: {0} Need to add interest re-expression with exclude\", is.content.name());\r\n\t\t\t\t_sentInterests.remove(is.interest);\r\n\t\t\t\tis = null;\r\n\t \t\t}\r\n\t\t\t\r\n\t\t\tif (is != null)\r\n\t\t\t\treceivePipelineContent(is.content);\r\n\t\t\t\r\n\t\t\tsynchronized(incoming) {\r\n\t\t\t\tif (incoming.size() == 0) {\r\n\t\t\t\t\tprocessor = null;\r\n\t\t\t\t\tis = null;\r\n\t\t\t\t\tSystem.out.println(\"that was the last one, resetting processor to null\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tis = incoming.remove(0);\r\n\t\t\t\t\t//_sentInterests.add(is.interest);\r\n\t\t\t\t\tprocessingSegment = SegmentationProfile.getSegmentNumber(is.content.name());\r\n\t\t\t\t\tSystem.out.println(\"processing first segment in incoming arraylist, segment \"+is.segmentNumber);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tSystem.out.print(\"segments to process: [\");\r\n\t\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\t\tSystem.out.print(\" \"+i.segmentNumber);\r\n\t\t\t\tSystem.out.println(\" ]\");\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tadvancePipeline(false);\r\n\t\t}//try holding lock more consistently to control how notify is done\r\n\t\t} //while loop for processing incoming segments\r\n\t\t//System.out.println(\"calling attemptHoleFilling()\");\r\n\t\tattemptHoleFilling();\r\n\t\t//advancePipeline(false);\r\n\t\t\r\n\t\tSystem.out.println((System.currentTimeMillis() - starttime)+\" done with handleContent after reading \"+ result.name());\r\n\r\n\t\treturn null;\r\n\t\t\r\n\t\t/*\r\n\t\t\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tSystem.out.println(starttime+\" in handleContent after reading \"+ result.name());\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"plot \"+(System.currentTimeMillis() - _pipelineStartTime)+\" inOrder: \"+inOrderSegments.size() +\" outOfOrder: \"+outOfOrderSegments.size() + \" interests: \"+_sentInterests.size() +\" holes: \"+_holes + \" received: \"+_totalReceived+\" [\"+_baseName+\"].2\");\r\n\t\t\t\r\n\t\t\t//remove if the content verified\r\n\t\t\tif (_sentInterests.remove(interest)) {\r\n\t\t\t\t//we had this interest outstanding...\r\n\t\t\t\tSystem.out.println(\"we were expecting this data! we had outstanding interests: \"+interest);\r\n\t\t\t} else {\r\n\t\t\t\t//we must have canceled the interest...  drop content object\r\n\t\t\t\tSystem.out.println(\"we must have canceled the interest, dropping ContentObject(s).  old interest: \"+interest);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t//method to handle content that comes back from pipeline requests\r\n\t\t\tif (verify(result))\r\n\t\t\t\treceivePipelineContent(result);\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.println(\"content failed verify\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t\t\r\n\t}","id":5277,"modified_method":"public Interest handleContent(ContentObject result, Interest interest) {\r\n\t\tLog.info(\"PIPELINE: in handleContent for {0} at {1}\", result.name(), System.currentTimeMillis());\r\n\t\t\r\n\t\tlong starttime = System.currentTimeMillis();\r\n\t\tIncomingSegment is;\r\n\t\t\r\n\t\tsynchronized(incoming) {\r\n\t\t\tif(avgResponseTime == -1) {\r\n\t\t\t\tavgResponseTime = starttime - interest.userTime;\r\n\t\t\t} else {\r\n\t\t\t\t//do not include hole filling responses, they will be extra fast\r\n\t\t\t\tif (interest.exclude()==null)\r\n\t\t\t\t\tavgResponseTime = 0.9 * avgResponseTime + 0.1 * (starttime - interest.userTime);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinterest.userTime = -1;\r\n\t\t\t\r\n\t\t\tLog.info(\"PIPELINE: in handleContent after reading {0} avgResponseTime {1}\", result.name(), avgResponseTime);\r\n\t\t\tis = new IncomingSegment(result, interest);\r\n\t\t\tint index = 0;\r\n\t\t\tfor (IncomingSegment i: incoming) {\r\n\t\t\t\tif(i.segmentNumber > is.segmentNumber)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tincoming.add(index, is);\r\n\t\t\t\r\n\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\tString s = \"segments to process: [\";\r\n\t\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\t\ts += \" \"+i.segmentNumber;\r\n\t\t\t\ts += \" ]\";\r\n\t\t\t\tLog.info(\"PIPELINE: \" + s);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (processor == null) {\r\n\t\t\t\tLog.info(\"PIPELINE: processor was null, setting it to me.\");\r\n\t\t\t\t//no threads are actively processing content...  this one will\r\n\t\t\t\tprocessor = Thread.currentThread();\r\n\t\t\t\t//synchronized(inOrderSegments) {\r\n\t\t\t\t\tis = incoming.remove(0);\r\n\t\t\t\t\t//_sentInterests.add(is.interest);\r\n\t\t\t\t\tprocessingSegment = SegmentationProfile.getSegmentNumber(is.content.name());\r\n\t\t\t\t//}\r\n\t\t\t} else {\r\n\t\t\t\tLog.info(\"PIPELINE: processor not null, returning\");\r\n\t\t\t\t//another thread is already processing...  just dump my content object and return\r\n\t\t\t\tLog.info(\"PIPELINE: {0} done with handleContent after reading {1}\", (System.currentTimeMillis() - starttime), result.name());\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//this thread will continue processing the incoming content objects until they are empty\r\n\t\tsynchronized(inOrderSegments){\r\n\t\twhile (is != null) {\r\n\t\t\t\r\n\t\t\t//was this a content object we were looking for?\r\n\t\t\t//synchronized(inOrderSegments) {\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"plot \"+(System.currentTimeMillis() - _pipelineStartTime)+\" inOrder: \"+inOrderSegments.size() +\" outOfOrder: \"+outOfOrderSegments.size() + \" interests: \"+_sentInterests.size() +\" holes: \"+_holes + \" received: \"+_totalReceived+\" [\"+_baseName+\"].2\"+ \" toProcess \"+incoming.size());\r\n\t\t\t\t\r\n\t\t\t\tif (_sentInterests.remove(is.interest)) {\r\n\t\t\t\t\t//we had this interest outstanding...\r\n\t\t\t\t\tLog.info(\"PIPELINE: we were expecting this data! we had outstanding interests: {0}\", is.interest);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//we must have canceled the interest...  drop content object\r\n\t\t\t\t\tLog.info(\"PIPELINE: we must have canceled the interest, dropping ContentObject(s).  old interest: {0}\", is.interest);\r\n\r\n\t\t\t\t\t//does this match one of our other interests?\r\n\t\t\t\t\tInterest checkInterest;\r\n\t\t\t\t\tis.interest = null;\r\n\t\t\t\t\tfor (int i = 0; i < _sentInterests.size(); i++) {\r\n\t\t\t\t\t\tcheckInterest = _sentInterests.get(i);\r\n\t\t\t\t\t\tif (checkInterest.matches(result)) {\r\n\t\t\t\t\t\t\t//we found a match!\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: the incoming packet's interest is gone, but it matches another interest, using that\");\r\n\t\t\t\t\t\t\tis.interest = checkInterest;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (is.interest == null)\r\n\t\t\t\t\t\tis = null;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\t//verify the content object\r\n\t\t\tif (verify(result)) {\r\n\t\t\t\t//this content verified\r\n\t\t\t} else {\r\n\t\t\t\t//content didn't verify, don't hand it up...\r\n\t\t\t\t//TODO content that fails verification needs to be handled better.  need to express a new interest\r\n\t\t\t\tLog.info(\"Dropping content object due to failed verification: {0} Need to add interest re-expression with exclude\", is.content.name());\r\n\t\t\t\t_sentInterests.remove(is.interest);\r\n\t\t\t\tis = null;\r\n\t \t\t}\r\n\t\t\t\r\n\t\t\tif (is != null)\r\n\t\t\t\treceivePipelineContent(is.content);\r\n\t\t\t\r\n\t\t\tsynchronized(incoming) {\r\n\t\t\t\tif (incoming.size() == 0) {\r\n\t\t\t\t\tprocessor = null;\r\n\t\t\t\t\tis = null;\r\n\t\t\t\t\tLog.info(\"PIPELINE: that was the last one, resetting processor to null\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tis = incoming.remove(0);\r\n\t\t\t\t\t//_sentInterests.add(is.interest);\r\n\t\t\t\t\tprocessingSegment = SegmentationProfile.getSegmentNumber(is.content.name());\r\n\t\t\t\t\tLog.info(\"PIPELINE: processing first segment in incoming arraylist, segment {0}\", is.segmentNumber);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\t\tString s = \"segments to process: [\";\r\n\t\t\t\t\tfor (IncomingSegment i: incoming)\r\n\t\t\t\t\t\ts += \" \"+i.segmentNumber;\r\n\t\t\t\t\ts += \" ]\";\r\n\t\t\t\t\tLog.info(\"PIPELINE: \" + s);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tadvancePipeline(false);\r\n\t\t}//try holding lock more consistently to control how notify is done\r\n\t\t} //while loop for processing incoming segments\r\n\t\tattemptHoleFilling();\r\n\t\t\r\n\t\tLog.info(\"PIPELINE: {0} done with handleContent after reading {1}\", (System.currentTimeMillis() - starttime),  result.name());\r\n\r\n\t\treturn null;\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private ContentObject getPipelineSegment(long segmentNumber) throws IOException{\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tContentObject co = null;\r\n\t\t\twhile (inOrderSegments.size() > 0) {\r\n\t\t\t\tco = inOrderSegments.remove(0);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\tSystem.out.println(\"had segment \"+segmentNumber+\" in iOS, setting current.\");\r\n\t\t\t\t\t_currentSegment = co;\r\n\t\t\t\t\tif (inOrderSegments.size() > 0 || segmentNumber == 1)\r\n\t\t\t\t\t\tadvancePipeline(false);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tadvancePipeline(true);\r\n\t\t\t\t\treturn co;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (outOfOrderSegments.size() > 0) {\r\n\t\t\t\tco = outOfOrderSegments.get(0);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\t//this is the segment we wanted\r\n\t\t\t\t\tSystem.out.println(\"segment \"+segmentNumber+\" was in our oOOS queue\");\r\n\t\t\t\t\toutOfOrderSegments.remove(0);\r\n\t\t\t\t\t_currentSegment = co;\r\n\t\t\t\t\treturn co;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(co.name()) > segmentNumber) {\r\n\t\t\t\t\t\t//we have a hole to fill...\r\n\t\t\t\t\t\tSystem.out.println(\"our out of order segments are past the requested segment...  we have a hole\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tSystem.out.println(\"we do not have the segment yet...  was it requested?\");\r\n\t\t\tSystem.out.println(\"need segment: \"+segmentNumber+\" _lastRequestedPipelineSegment: \"+_lastRequestedPipelineSegment);\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"current interests out for segments: [\");\r\n\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\tSystem.out.print(\" \"+SegmentationProfile.getSegmentNumber(i.name()));\r\n\t\t\tSystem.out.println(\"]\");\r\n\t\t\t\t\t\r\n\t\t\t//need to actually get the requested segment if it hasn't been asked for\r\n\t\t\t//this is needed for seek, skip, etc\r\n\t\t\t\r\n\t\t\t//if we haven't requested the segment...  should we ditch everything we have?  probably\r\n\t\t\tif (requestedSegment(segmentNumber)) {\r\n\t\t\t\t//we already requested it.  just wait for it to come in\r\n\t\t\t\tattemptHoleFilling(segmentNumber);\r\n\t\t\t} else {\r\n\t\t\t\t//we haven't requested it...  send request and ditch what we have\r\n\t\t\t\tInterest interest = SegmentationProfile.segmentInterest(_basePipelineName, segmentNumber, _publisher);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tinterest.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t_handle.expressInterest(interest, this);\r\n\t\t\t\t\tcancelInterests();\r\n\t\t\t\t\t_sentInterests.add(interest);\r\n\t\t\t\t\tresetPipelineState();\r\n\t\t\t\t\t_lastRequestedPipelineSegment = segmentNumber;\r\n\t\t\t\t\t_nextPipelineSegment = segmentNumber;\r\n\t\t\t\t\tSystem.out.println(\"we hadn't asked for segment \"+segmentNumber+\" asking now... \"+interest);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//check outstanding interests\r\n\t\t\tSystem.out.print(\"have interests out for segments: [\");\r\n\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\tSystem.out.print(\" \"+SegmentationProfile.getSegmentNumber(i.name()));\r\n\t\t\tSystem.out.println(\"]\");\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}","id":5278,"modified_method":"private ContentObject getPipelineSegment(long segmentNumber) throws IOException{\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\tContentObject co = null;\r\n\t\t\twhile (inOrderSegments.size() > 0) {\r\n\t\t\t\tco = inOrderSegments.remove(0);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\tLog.info(\"PIPELINE: had segment {0} in iOS, setting current.\", segmentNumber);\r\n\t\t\t\t\t_currentSegment = co;\r\n\t\t\t\t\tif (inOrderSegments.size() > 0 || segmentNumber == 1)\r\n\t\t\t\t\t\tadvancePipeline(false);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tadvancePipeline(true);\r\n\t\t\t\t\treturn co;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (outOfOrderSegments.size() > 0) {\r\n\t\t\t\tco = outOfOrderSegments.get(0);\r\n\t\t\t\tif (SegmentationProfile.getSegmentNumber(co.name()) == segmentNumber) {\r\n\t\t\t\t\t//this is the segment we wanted\r\n\t\t\t\t\tLog.info(\"PIPELINE: segment {0} was in our oOOS queue\", segmentNumber);\r\n\t\t\t\t\toutOfOrderSegments.remove(0);\r\n\t\t\t\t\t_currentSegment = co;\r\n\t\t\t\t\treturn co;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(SegmentationProfile.getSegmentNumber(co.name()) > segmentNumber) {\r\n\t\t\t\t\t\t//we have a hole to fill...\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: our out of order segments are past the requested segment...  we have a hole\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\tLog.info(\"PIPELINE: we do not have the segment yet...  was it requested?\");\r\n\t\t\t\tLog.info(\"PIPELINE: need segment: {0} _lastRequestedPipelineSegment: {1}\", segmentNumber, _lastRequestedPipelineSegment);\r\n\t\t\t\r\n\t\t\t\tString s = \"current interests out for segments: [\";\r\n\t\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\t\ts += \" \"+SegmentationProfile.getSegmentNumber(i.name());\r\n\t\t\t\ts += \"]\";\r\n\t\t\t\tLog.info(\"PIPELINE: \"+s);\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t//need to actually get the requested segment if it hasn't been asked for\r\n\t\t\t//this is needed for seek, skip, etc\r\n\t\t\t\r\n\t\t\t//if we haven't requested the segment...  should we ditch everything we have?  probably\r\n\t\t\tif (requestedSegment(segmentNumber)) {\r\n\t\t\t\t//we already requested it.  just wait for it to come in\r\n\t\t\t\tattemptHoleFilling(segmentNumber);\r\n\t\t\t} else {\r\n\t\t\t\t//we haven't requested it...  send request and ditch what we have\r\n\t\t\t\tInterest interest = SegmentationProfile.segmentInterest(_basePipelineName, segmentNumber, _publisher);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tinterest.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t_handle.expressInterest(interest, this);\r\n\t\t\t\t\tcancelInterests();\r\n\t\t\t\t\t_sentInterests.add(interest);\r\n\t\t\t\t\tresetPipelineState();\r\n\t\t\t\t\t_lastRequestedPipelineSegment = segmentNumber;\r\n\t\t\t\t\t_nextPipelineSegment = segmentNumber;\r\n\t\t\t\t\tLog.info(\"PIPELINE: we hadn't asked for segment {0} asking now... {1}\", segmentNumber, interest);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//check outstanding interests\r\n\t\t\tif (Log.isLoggable(Level.INFO)) {\r\n\t\t\t\tString s = \"have interests out for segments: [\";\r\n\t\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\t\ts += \" \"+SegmentationProfile.getSegmentNumber(i.name());\r\n\t\t\t\ts += \"]\";\r\n\t\t\t\tLog.info(\"PIPELINE: \"+s);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public boolean readerReadyCheck(long nextSegment) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//is there a reader ready?\r\n\t\t\tlong rr;\r\n\t\t\tsynchronized(readerReady) {\r\n\t\t\t\trr = Long.parseLong(readerReady);\r\n\t\t\t}\r\n\t\t\t//while(rr > -1) {\r\n\t\t\tif(rr > -1) {\r\n\t\t\t\t//there is a reader waiting\r\n\t\t\t\tSystem.out.println(\"there is a reader waiting, we should wait unless we have their segment\");\r\n\t\t\t\tif(nextSegment == rr) {\r\n\t\t\t\t\t//this is the segment they want, we should just finish\r\n\t\t\t\t\tSystem.out.println(\"we are working on their segment...  we should finish!\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t\t//break;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (haveSegmentBuffered(rr)) {\r\n\t\t\t\t\t\t//we have their segment\r\n\t\t\t\t\t\t//this isn't their segment, but the one they want is here. we should defer\r\n\t\t\t\t\t\tSystem.out.println(\"we are deferring until they are done\");\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tinOrderSegments.wait();\r\n\t\t\t\t\t\t\t//readerReady.wait();\r\n\t\t\t\t\t\t\tsynchronized(readerReady) {\r\n\t\t\t\t\t\t\t\trr = Long.parseLong(readerReady);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"we can go back to processing\");\r\n\t\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//we don't have their segment, we should keep going\r\n\t\t\t\t\t\tSystem.out.println(\"we don't have their segment, keep processing this one.\");\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","id":5279,"modified_method":"public boolean readerReadyCheck(long nextSegment) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//is there a reader ready?\r\n\t\t\tlong rr;\r\n\t\t\tsynchronized(readerReady) {\r\n\t\t\t\trr = Long.parseLong(readerReady);\r\n\t\t\t}\r\n\t\t\tif(rr > -1) {\r\n\t\t\t\t//there is a reader waiting\r\n\t\t\t\tLog.info(\"PIPELINE: there is a reader waiting, we should wait unless we have their segment\");\r\n\t\t\t\tif(nextSegment == rr) {\r\n\t\t\t\t\t//this is the segment they want, we should just finish\r\n\t\t\t\t\tLog.info(\"PIPELINE: we are working on their segment...  we should finish!\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t\t//break;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (haveSegmentBuffered(rr)) {\r\n\t\t\t\t\t\t//we have their segment\r\n\t\t\t\t\t\t//this isn't their segment, but the one they want is here. we should defer\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we are deferring until they are done\");\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//we don't have their segment, we should keep going\r\n\t\t\t\t\t\tLog.info(\"PIPELINE: we don't have their segment, keep processing this one.\");\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void advancePipeline(boolean attemptHoleFilling) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//first check if we have tokens to spend on interests...\r\n\t\t\tboolean doneAdvancing = false;\r\n\t\t\t\r\n\t\t\t//check outstanding interests\r\n\t\t\tSystem.out.print(\"have interests out for segments: [\");\r\n\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\tSystem.out.print(\" \"+SegmentationProfile.getSegmentNumber(i.name()));\r\n\t\t\tSystem.out.println(\" ]\");\r\n\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\tSystem.out.println(i.name());\r\n\t\t\t\r\n\t\t\tInterest i = null;\r\n\t\t\t\t\r\n\t\t\twhile (_sentInterests.size() + inOrderSegments.size() + outOfOrderSegments.size()  < SystemConfiguration.PIPELINE_SIZE && !doneAdvancing) {\r\n\t\t\t\t//we have tokens to use\r\n\t\t\t\ti = null;\r\n\t\t\t\r\n\t\t\t\tSystem.out.println(\"_lastSegmentNumber = \"+ _lastSegmentNumber);\r\n\t\t\t\tif (_lastSegmentNumber == -1) {\r\n\t\t\t\t\t//we don't have the last segment already...\r\n\t\t\t\t\ti = SegmentationProfile.segmentInterest(_basePipelineName, _lastRequestedPipelineSegment + 1, _publisher);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\t\t_sentInterests.add(i);\r\n\t\t\t\t\t\t_lastRequestedPipelineSegment++;\r\n\t\t\t\t\t\tSystem.out.println(\"requested segment \"+_lastRequestedPipelineSegment +\" (\"+(SystemConfiguration.PIPELINE_SIZE - _sentInterests.size())+\" tokens)\");\r\n\t\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.out.println(\"setting doneAdvancing to true\");\r\n\t\t\t\t\tdoneAdvancing = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":5280,"modified_method":"private void advancePipeline(boolean attemptHoleFilling) {\r\n\t\tsynchronized(inOrderSegments) {\r\n\t\t\t//first check if we have tokens to spend on interests...\r\n\t\t\tboolean doneAdvancing = false;\r\n\t\t\t\r\n\t\t\t//check outstanding interests\r\n\t\t\tif(Log.isLoggable(Level.INFO)) {\r\n\t\t\t\tString s = \"have interests out for segments: [\";\r\n\t\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\t\ts = s + \" \"+SegmentationProfile.getSegmentNumber(i.name());\r\n\t\t\t\ts = s + \" ]\";\r\n\t\t\t\tLog.info(\"PIPELINE: \"+s);\r\n\t\t\t\tfor(Interest i: _sentInterests)\r\n\t\t\t\t\tLog.info(\"PIPELINE: {0}\", i.name());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tInterest i = null;\r\n\t\t\t\t\r\n\t\t\twhile (_sentInterests.size() + inOrderSegments.size() + outOfOrderSegments.size()  < SystemConfiguration.PIPELINE_SIZE && !doneAdvancing) {\r\n\t\t\t\t//we have tokens to use\r\n\t\t\t\ti = null;\r\n\t\t\t\r\n\t\t\t\tLog.info(\"PIPELINE: _lastSegmentNumber = {0}\", _lastSegmentNumber);\r\n\t\t\t\tif (_lastSegmentNumber == -1) {\r\n\t\t\t\t\t//we don't have the last segment already...\r\n\t\t\t\t\ti = SegmentationProfile.segmentInterest(_basePipelineName, _lastRequestedPipelineSegment + 1, _publisher);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\ti.userTime = System.currentTimeMillis();\r\n\t\t\t\t\t\t_handle.expressInterest(i, this);\r\n\t\t\t\t\t\t_sentInterests.add(i);\r\n\t\t\t\t\t\t_lastRequestedPipelineSegment++;\r\n\t\t\t\t\t\tif (Log.isLoggable(Level.INFO))\r\n\t\t\t\t\t\t\tLog.info(\"PIPELINE: requested segment \"+_lastRequestedPipelineSegment +\" (\"+(SystemConfiguration.PIPELINE_SIZE - _sentInterests.size())+\" tokens)\");\r\n\t\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\t\tLog.warning(\"failed to express interest for CCNAbstractInputStream pipeline\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.info(\"PIPELINE: setting doneAdvancing to true\");\r\n\t\t\t\t\tdoneAdvancing = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void startPipeline() {\r\n\t\tsynchronized (inOrderSegments) {\r\n\t\t\tSystem.out.println(\"starting pipelining\");\r\n\t\t\r\n\t\t\t_pipelineStartTime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(\"plot \"+(System.currentTimeMillis() - _pipelineStartTime)+\" inOrder: \"+inOrderSegments.size() +\" outOfOrder: \"+outOfOrderSegments.size() + \" interests: \"+_sentInterests.size() +\" holes: \"+_holes + \" received: \"+_totalReceived+\" [\"+_baseName+\"].1\"+ \" toProcess \"+incoming.size());\t\t\r\n\t\t\r\n\t\t\tlong segmentToGet = -1;\r\n\t\t\tInterest interest = null;\r\n\t\t\r\n\t\t\tif(_basePipelineName == null) {\r\n\t\t\t\t_basePipelineName = _baseName.clone();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tSystem.out.println(\"BaseName for pipeline: \"+_basePipelineName +\" base name: \"+_baseName);\r\n\t\t\r\n\t\t\tif (_currentSegment!=null) {\r\n\t\t\t\tSystem.out.println(\"we already have the first segment...  start from there:\"+_currentSegment.name());\r\n\t\t\t\t//we already have the starting segment...\r\n\t\t\t\r\n\t\t\t\t//is the first segment the last one?\r\n\t\t\t\tif (SegmentationProfile.isLastSegment(_currentSegment)) {\r\n\t\t\t\t\t//this is the last segment...  don't pipeline\r\n\t\t\t\t\tSystem.out.println(\"we already have the last segment...  don't need to pipeline (returning)\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//this isn't the last segment, start up pipelining...  only ask for next segment to start\r\n\t\t\t\t\tSystem.out.println(\"this isn't the last segment...  need to start up pipelining\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"need to get the first segment: startingSegmentNumber=\"+_startingSegmentNumber);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tsegmentToGet = nextSegmentNumber();\r\n\t\t\t_nextPipelineSegment = segmentToGet;\r\n\t\t\tinterest = SegmentationProfile.segmentInterest(_basePipelineName, segmentToGet, _publisher);\r\n\t\t\ttry {\r\n\t\t\t\tinterest.userTime = System.currentTimeMillis();\r\n\t\t\t\t_handle.expressInterest(interest, this);\r\n\t\t\t\t_sentInterests.add(interest);\r\n\t\t\t\t_lastRequestedPipelineSegment = segmentToGet;\r\n\t\t\t\tSystem.out.println(\"expressed interest for segment \"+segmentToGet+\" in startPipeline(): \"+interest);\r\n\t\t\t} catch(IOException e) {\r\n\t\t\t\t//could not express interest for next segment...  logging the error\r\n\t\t\t\tLog.warning(\"Failed to express interest for pipelining segments in CCNAbstractInputStream:  Interest = {0}\", interest.name());\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":5281,"modified_method":"private void startPipeline() {\r\n\t\tsynchronized (inOrderSegments) {\r\n\t\t\tLog.info(\"PIPELINE: starting pipelining\");\r\n\t\t\r\n\t\t\t_pipelineStartTime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(\"plot \"+(System.currentTimeMillis() - _pipelineStartTime)+\" inOrder: \"+inOrderSegments.size() +\" outOfOrder: \"+outOfOrderSegments.size() + \" interests: \"+_sentInterests.size() +\" holes: \"+_holes + \" received: \"+_totalReceived+\" [\"+_baseName+\"].1\"+ \" toProcess \"+incoming.size());\t\t\r\n\t\t\r\n\t\t\tlong segmentToGet = -1;\r\n\t\t\tInterest interest = null;\r\n\t\t\r\n\t\t\tif(_basePipelineName == null) {\r\n\t\t\t\t_basePipelineName = _baseName.clone();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tLog.info(\"PIPELINE: BaseName for pipeline: {0} base name: {1}\", _basePipelineName, _baseName);\r\n\t\t\r\n\t\t\tif (_currentSegment!=null) {\r\n\t\t\t\tLog.info(\"PIPELINE: we already have the first segment...  start from there: {0}\", _currentSegment.name());\r\n\t\t\t\t//we already have the starting segment...\r\n\t\t\t\r\n\t\t\t\t//is the first segment the last one?\r\n\t\t\t\tif (SegmentationProfile.isLastSegment(_currentSegment)) {\r\n\t\t\t\t\t//this is the last segment...  don't pipeline\r\n\t\t\t\t\tLog.info(\"PIPELINE: we already have the last segment...  don't need to pipeline (returning)\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//this isn't the last segment, start up pipelining...  only ask for next segment to start\r\n\t\t\t\t\tLog.info(\"PIPELINE: this isn't the last segment...  need to start up pipelining\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tLog.info(\"PIPELINE: need to get the first segment: startingSegmentNumber={0}\",_startingSegmentNumber);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tsegmentToGet = nextSegmentNumber();\r\n\t\t\t_nextPipelineSegment = segmentToGet;\r\n\t\t\tinterest = SegmentationProfile.segmentInterest(_basePipelineName, segmentToGet, _publisher);\r\n\t\t\ttry {\r\n\t\t\t\tinterest.userTime = System.currentTimeMillis();\r\n\t\t\t\t_handle.expressInterest(interest, this);\r\n\t\t\t\t_sentInterests.add(interest);\r\n\t\t\t\t_lastRequestedPipelineSegment = segmentToGet;\r\n\t\t\t\tLog.info(\"PIPELINE: expressed interest for segment {0} in startPipeline(): {1}\", segmentToGet, interest);\r\n\t\t\t} catch(IOException e) {\r\n\t\t\t\t//could not express interest for next segment...  logging the error\r\n\t\t\t\tLog.warning(\"Failed to express interest for pipelining segments in CCNAbstractInputStream:  Interest = {0}\", interest.name());\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"2ec3cb903ebfe61d724aff901c146315b01d8b52","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n    public void run() {\n        while ((config.limitrows-- > 0)) {\n            try {\n                //Initial setting of totalLineCount\n                if (listReader.getLineNumber() == 0) {\n                    totalLineCount.set(config.skip);\n                } else {\n                    totalLineCount.set(listReader.getLineNumber());\n                }\n                long st = System.nanoTime();\n                List<String> lineList = listReader.read();\n                long end = System.nanoTime();\n                parsingTimeEnd += (end - st);\n                if (lineList == null) {\n                    if (totalLineCount.get() > listReader.getLineNumber()) {\n                        totalLineCount.set(listReader.getLineNumber());\n                    }\n                    break;\n                }\n                totalRowCount.incrementAndGet();\n\n                String lineCheckResult;\n                String[] correctedLine = lineList.toArray(new String[0]);\n\n                if ((lineCheckResult = checkparams_trimspace(correctedLine,\n                        columnCnt)) != null) {\n                    String[] info = {lineList.toString(), lineCheckResult};\n                    if (synchronizeErrorInfo(totalLineCount.get() + 1, info)) {\n                        errored = true;\n                        break;\n                    }\n                    continue;\n                }\n\n                CSVLineWithMetaData lineData = new CSVLineWithMetaData();\n                lineData.line = correctedLine;\n                lineData.lineNumber = listReader.getLineNumber();\n                int partitionId = 0;\n                if (!CSVPartitionProcessor.isMP) {\n                    partitionId = TheHashinator.getPartitionForParameter(partitionColumnType.getValue(), (Object) lineData.line[partitionedColumnIndex - 1]);\n                }\n                BlockingQueue<CSVLineWithMetaData> q = lineq.get(partitionId);\n                if (!q.offer(lineData)) {\n                    q.put(lineData);\n                }\n            } catch (SuperCsvException e) {\n                //Catch rows that can not be read by superCSV listReader. E.g. items without quotes when strictquotes is enabled.\n                e.printStackTrace();\n                String[] info = {e.getMessage(), \"\"};\n                if (synchronizeErrorInfo(totalLineCount.get() + 1, info)) {\n                    errored = true;\n                    break;\n                }\n            } catch (IOException ioex) {\n                ioex.printStackTrace();\n                break;\n            } catch (InterruptedException ex) {\n                break;\n            }\n        }\n        try {\n            listReader.close();\n        } catch (IOException ex) {\n            m_log.error(\"Error cloging Reader: \" + ex);\n        } finally {\n            for (BlockingQueue<CSVLineWithMetaData> q : lineq.values()) {\n                try {\n                    if (errored) {\n                        q.clear();\n                    }\n                    q.put(dummy);\n                } catch (InterruptedException ex) {\n                    ;\n                }\n            }\n            m_log.info(\"Rows Queued by Reader: \" + totalRowCount.get());\n        }\n        try {\n            m_log.info(\"Waiting for partition processors to finish.\");\n            pcount.await();\n            m_log.info(\"Partition Processors Done.\");\n        } catch (InterruptedException ex) {\n            ;\n        }\n    }","id":5282,"modified_method":"@Override\n    public void run() {\n        while ((config.limitrows-- > 0)) {\n            try {\n                //Initial setting of totalLineCount\n                if (listReader.getLineNumber() == 0) {\n                    totalLineCount.set(config.skip);\n                } else {\n                    totalLineCount.set(listReader.getLineNumber());\n                }\n                long st = System.nanoTime();\n                List<String> lineList = listReader.read();\n                long end = System.nanoTime();\n                parsingTimeEnd += (end - st);\n                if (lineList == null) {\n                    if (totalLineCount.get() > listReader.getLineNumber()) {\n                        totalLineCount.set(listReader.getLineNumber());\n                    }\n                    break;\n                }\n                totalRowCount.incrementAndGet();\n\n                String lineCheckResult;\n                String[] correctedLine = lineList.toArray(new String[0]);\n\n                if ((lineCheckResult = checkparams_trimspace(correctedLine,\n                        columnCnt)) != null) {\n                    String[] info = {lineList.toString(), lineCheckResult};\n                    if (synchronizeErrorInfo(totalLineCount.get() + 1, info)) {\n                        errored = true;\n                        break;\n                    }\n                    continue;\n                }\n\n                CSVLineWithMetaData lineData = new CSVLineWithMetaData();\n                lineData.line = correctedLine;\n                lineData.rawLineData = lineList;\n                lineData.lineNumber = listReader.getLineNumber();\n                int partitionId = 0;\n                if (!CSVPartitionProcessor.isMP) {\n                    partitionId = TheHashinator.getPartitionForParameter(partitionColumnType.getValue(), (Object) lineData.line[partitionedColumnIndex]);\n                }\n                BlockingQueue<CSVLineWithMetaData> q = lineq.get(partitionId);\n                if (!q.offer(lineData)) {\n                    q.put(lineData);\n                }\n            } catch (SuperCsvException e) {\n                //Catch rows that can not be read by superCSV listReader. E.g. items without quotes when strictquotes is enabled.\n                e.printStackTrace();\n                String[] info = {e.getMessage(), \"\"};\n                if (synchronizeErrorInfo(totalLineCount.get() + 1, info)) {\n                    errored = true;\n                    break;\n                }\n            } catch (IOException ioex) {\n                ioex.printStackTrace();\n                break;\n            } catch (InterruptedException ex) {\n                break;\n            }\n        }\n        try {\n            listReader.close();\n        } catch (IOException ex) {\n            m_log.error(\"Error cloging Reader: \" + ex);\n        } finally {\n            for (BlockingQueue<CSVLineWithMetaData> q : lineq.values()) {\n                try {\n                    if (errored) {\n                        q.clear();\n                    }\n                    q.put(dummy);\n                } catch (InterruptedException ex) {\n                    ;\n                }\n            }\n            m_log.info(\"Rows Queued by Reader: \" + totalRowCount.get());\n        }\n        try {\n            m_log.info(\"Waiting for partition processors to finish.\");\n            pcount.await();\n            m_log.info(\"Partition Processors Done.\");\n        } catch (InterruptedException ex) {\n            ;\n        }\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static void main(String[] args) throws IOException,\n            InterruptedException {\n        start = System.currentTimeMillis();\n        long insertTimeStart = start;\n        long insertTimeEnd;\n\n        final CSVConfig cfg = new CSVConfig();\n        cfg.parse(CSVLoaderMT.class.getName(), args);\n\n        config = cfg;\n        configuration();\n        final Tokenizer tokenizer;\n        ICsvListReader listReader = null;\n        try {\n            if (CSVLoaderMT.standin) {\n                tokenizer = new Tokenizer(new BufferedReader(new InputStreamReader(System.in)), csvPreference,\n                        config.strictquotes, config.escape, config.columnsizelimit,\n                        config.skip);\n                listReader = new CsvListReader(tokenizer, csvPreference);\n            } else {\n                tokenizer = new Tokenizer(new FileReader(config.file), csvPreference,\n                        config.strictquotes, config.escape, config.columnsizelimit,\n                        config.skip);\n                listReader = new CsvListReader(tokenizer, csvPreference);\n            }\n        } catch (FileNotFoundException e) {\n            m_log.error(\"CSV file '\" + config.file + \"' could not be found.\");\n            System.exit(-1);\n        }\n        // Split server list\n        final String[] serverlist = config.servers.split(\",\");\n\n        // Create connection\n        final ClientConfig c_config = new ClientConfig(config.user, config.password);\n        c_config.setProcedureCallTimeout(0); // Set procedure all to infinite\n        Client csvClient = null;\n        try {\n            csvClient = CSVLoaderMT.getClient(c_config, serverlist, config.port);\n        } catch (Exception e) {\n            m_log.error(\"Error to connect to the servers:\"\n                    + config.servers);\n            close_cleanup();\n            System.exit(-1);\n        }\n        assert (csvClient != null);\n\n        int partitionedColumnIndex = -1;\n        VoltType partitionColumnType = VoltType.NULL;\n        try {\n            int columnCnt = 0;\n            VoltTable procInfo;\n            boolean isProcExist = false;\n            try {\n                procInfo = csvClient.callProcedure(\"@SystemCatalog\",\n                        \"PROCEDURECOLUMNS\").getResults()[0];\n                while (procInfo.advanceRow()) {\n                    if (insertProcedure.matches((String) procInfo.get(\n                            \"PROCEDURE_NAME\", VoltType.STRING))) {\n                        columnCnt++;\n                        isProcExist = true;\n                        String typeStr = (String) procInfo.get(\"TYPE_NAME\", VoltType.STRING);\n                        typeList.add(VoltType.typeFromString(typeStr));\n                    }\n                }\n            } catch (Exception e) {\n                m_log.error(e.getMessage(), e);\n                close_cleanup();\n                System.exit(-1);\n            }\n            if (isProcExist == false) {\n                m_log.error(\"No matching insert procedure available\");\n                close_cleanup();\n                System.exit(-1);\n            }\n\n            ArrayList<VoltType> columnTypes = new ArrayList<VoltType>();\n            ArrayList<String> colNames = new ArrayList<String>();\n            procInfo = csvClient.callProcedure(\"@SystemCatalog\",\n                    \"COLUMNS\").getResults()[0];\n            while (procInfo.advanceRow()) {\n                String table = procInfo.getString(\"TABLE_NAME\");\n                if (config.table.equalsIgnoreCase(table)) {\n                    VoltType vtype = VoltType.typeFromString(procInfo.getString(\"TYPE_NAME\"));\n                    columnTypes.add(vtype);\n                    colNames.add(procInfo.getString(\"COLUMN_NAME\"));\n                    String remarks = procInfo.getString(\"REMARKS\");\n                    if (remarks != null && remarks.equalsIgnoreCase(\"PARTITION_COLUMN\")) {\n                        partitionedColumnIndex = (int) procInfo.getLong(\"ORDINAL_POSITION\");\n                        partitionColumnType = vtype;\n                        System.out.println(\"Partition Column Name is: \" + procInfo.getString(\"COLUMN_NAME\"));\n                        System.out.println(\"Partition Column Type is: \" + vtype.toString());\n                    }\n                }\n            }\n\n            VoltTable.ColumnInfo colInfo[] = new VoltTable.ColumnInfo[columnTypes.size()];\n            for (int i = 0; i < columnTypes.size(); i++) {\n                VoltType type = columnTypes.get(i);\n                String cname = colNames.get(i);\n                VoltTable.ColumnInfo ci = new VoltTable.ColumnInfo(cname, type);\n                colInfo[i] = ci;\n            }\n\n            int numPartitions = -1;\n            int sitesPerHost = 1;\n            int kfactor = 0;\n            int hostcount = 1;\n            procInfo = csvClient.callProcedure(\"@SystemInformation\",\n                    \"deployment\").getResults()[0];\n            while (procInfo.advanceRow()) {\n                String prop = procInfo.getString(\"PROPERTY\");\n                if (prop != null && prop.equalsIgnoreCase(\"sitesperhost\")) {\n                    sitesPerHost = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n                if (prop != null && prop.equalsIgnoreCase(\"hostcount\")) {\n                    hostcount = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n                if (prop != null && prop.equalsIgnoreCase(\"kfactor\")) {\n                    kfactor = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n            }\n            numPartitions = (hostcount * sitesPerHost) / (kfactor + 1);\n            System.out.println(\"Number of Partitions: \" + numPartitions);\n            System.out.println(\"Batch Size is: \" + config.batch);\n\n            TheHashinator.initialize(LegacyHashinator.class, LegacyHashinator.getConfigureBytes(numPartitions));\n\n            CSVPartitionProcessor.colInfo = colInfo;\n            CSVPartitionProcessor.columnTypes = columnTypes;\n            CSVPartitionProcessor.insertProcedure = insertProcedure;\n            CSVPartitionProcessor.isMP = (partitionedColumnIndex == -1 ? true : false);\n            if (CSVPartitionProcessor.isMP) {\n                m_log.warn(\"Using a multi-partitioned procedure to load data will be slow. \"\n                        + \"If loading a partitioned table, use a single-partitioned procedure \"\n                        + \"for best performance.\");\n            }\n            CSVPartitionProcessor.config = config;\n\n            List<Thread> spawned = new ArrayList<Thread>(numPartitions);\n            CSVLineWithMetaData dummy = new CSVLineWithMetaData();\n            Map<Integer, BlockingQueue<CSVLineWithMetaData>> lineq = new HashMap<Integer, BlockingQueue<CSVLineWithMetaData>>(numPartitions);\n            CountDownLatch pcount = new CountDownLatch(numPartitions);\n            List<CSVPartitionProcessor> processors = new ArrayList<CSVPartitionProcessor>(numPartitions);\n            for (int i = 0; i < numPartitions; i++) {\n                ArrayBlockingQueue<CSVLineWithMetaData> q = new ArrayBlockingQueue<CSVLineWithMetaData>((int) config.batch);\n                lineq.put(i, q);\n                CSVPartitionProcessor pp = new CSVPartitionProcessor();\n                processors.add(pp);\n                pp.csvClient = csvClient;\n                pp.partitionId = i;\n                pp.tableName = config.table;\n                pp.columnCnt = columnCnt;\n                pp.lineq = q;\n                pp.dummy = dummy;\n                pp.name = \"PartitionProcessor-\" + i;\n                Thread th = new Thread(pp);\n                th.setName(pp.name);\n                spawned.add(th);\n            }\n            CSVPartitionProcessor.pcount = pcount;\n\n            CSVFileReader.config = config;\n            CSVFileReader.columnCnt = columnCnt;\n            CSVFileReader.listReader = listReader;\n            CSVFileReader.partitionedColumnIndex = partitionedColumnIndex;\n            CSVFileReader.partitionColumnType = partitionColumnType;\n            CSVFileReader.tableName = config.table;\n            CSVFileReader.typeList = typeList;\n            CSVFileReader.csvClient = csvClient;\n            CSVFileReader.lineq = lineq;\n            CSVFileReader.dummy = dummy;\n            CSVFileReader.pcount = pcount;\n\n            CSVFileReader rdr = new CSVFileReader();\n            Thread th = new Thread(rdr);\n            th.setName(\"CSVReader\");\n            th.setDaemon(true);\n\n            for (Thread th2 : spawned) {\n                th2.start();\n            }\n            th.start();\n            th.join();\n\n            long readerTime = 0;\n            readerTime += (rdr.parsingTimeEnd - rdr.parsingTimeSt);\n            readerTime = readerTime / 1000000;\n\n            for (Thread th2 : spawned) {\n                try {\n                    th2.join();\n                } catch (InterruptedException ex) {\n                }\n            }\n            insertTimeEnd = System.currentTimeMillis();\n\n            csvClient.drain();\n            csvClient.close();\n            long inCount = 0, outCount = 0;\n            for (CSVPartitionProcessor pp : processors) {\n                inCount += pp.partitionProcessedCount;\n                outCount += pp.partitionAcknowledgedCount.get();\n            }\n            m_log.info(\"Parsing CSV file took \" + readerTime + \" milliseconds.\");\n            m_log.info(\"Inserting Data took \" + ((insertTimeEnd - insertTimeStart) - readerTime) + \" milliseconds.\");\n            m_log.info(\"Inserted \" + inCount + \" and acknowledged \"\n                    + outCount + \" rows (final)\");\n            produceFiles(rdr, inCount, outCount);\n            close_cleanup();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }","id":5283,"modified_method":"public static void main(String[] args) throws IOException,\n            InterruptedException {\n        start = System.currentTimeMillis();\n        long insertTimeStart = start;\n        long insertTimeEnd;\n\n        final CSVConfig cfg = new CSVConfig();\n        cfg.parse(CSVLoaderMT.class.getName(), args);\n\n        config = cfg;\n        configuration();\n        final Tokenizer tokenizer;\n        ICsvListReader listReader = null;\n        try {\n            if (CSVLoaderMT.standin) {\n                tokenizer = new Tokenizer(new BufferedReader(new InputStreamReader(System.in)), csvPreference,\n                        config.strictquotes, config.escape, config.columnsizelimit,\n                        config.skip);\n                listReader = new CsvListReader(tokenizer, csvPreference);\n            } else {\n                tokenizer = new Tokenizer(new FileReader(config.file), csvPreference,\n                        config.strictquotes, config.escape, config.columnsizelimit,\n                        config.skip);\n                listReader = new CsvListReader(tokenizer, csvPreference);\n            }\n        } catch (FileNotFoundException e) {\n            m_log.error(\"CSV file '\" + config.file + \"' could not be found.\");\n            System.exit(-1);\n        }\n        // Split server list\n        final String[] serverlist = config.servers.split(\",\");\n\n        // Create connection\n        final ClientConfig c_config = new ClientConfig(config.user, config.password);\n        c_config.setProcedureCallTimeout(0); // Set procedure all to infinite\n        Client csvClient = null;\n        try {\n            csvClient = CSVLoaderMT.getClient(c_config, serverlist, config.port);\n        } catch (Exception e) {\n            m_log.error(\"Error to connect to the servers:\"\n                    + config.servers);\n            close_cleanup();\n            System.exit(-1);\n        }\n        assert (csvClient != null);\n\n        int partitionedColumnIndex = -1;\n        VoltType partitionColumnType = VoltType.NULL;\n        try {\n            VoltTable procInfo;\n            boolean isProcExist = false;\n            try {\n                if (config.useSuppliedProcedure) {\n                    procInfo = csvClient.callProcedure(\"@SystemCatalog\",\n                            \"PROCEDURECOLUMNS\").getResults()[0];\n                    while (procInfo.advanceRow()) {\n                        if (insertProcedure.matches((String) procInfo.get(\n                                \"PROCEDURE_NAME\", VoltType.STRING))) {\n                            isProcExist = true;\n                            String typeStr = (String) procInfo.get(\"TYPE_NAME\", VoltType.STRING);\n                            typeList.add(VoltType.typeFromString(typeStr));\n                        }\n                    }\n                    if (isProcExist == false) {\n                        m_log.error(\"No matching insert procedure available\");\n                        close_cleanup();\n                        System.exit(-1);\n                    }\n                }\n            } catch (Exception e) {\n                m_log.error(e.getMessage(), e);\n                close_cleanup();\n                System.exit(-1);\n            }\n\n            procInfo = csvClient.callProcedure(\"@SystemCatalog\",\n                    \"COLUMNS\").getResults()[0];\n            Map<Integer, VoltType> columnTypes = new TreeMap<Integer, VoltType>();\n            Map<Integer, String> colNames = new TreeMap<Integer, String>();\n            while (procInfo.advanceRow()) {\n                String table = procInfo.getString(\"TABLE_NAME\");\n                if (config.table.equalsIgnoreCase(table)) {\n                    VoltType vtype = VoltType.typeFromString(procInfo.getString(\"TYPE_NAME\"));\n                    int idx = (int) procInfo.getLong(\"ORDINAL_POSITION\") - 1;\n                    columnTypes.put(idx, vtype);\n                    colNames.put(idx, procInfo.getString(\"COLUMN_NAME\"));\n                    String remarks = procInfo.getString(\"REMARKS\");\n                    if (remarks != null && remarks.equalsIgnoreCase(\"PARTITION_COLUMN\")) {\n                        partitionColumnType = vtype;\n                        partitionedColumnIndex = idx;\n                        m_log.info(\"Table \" + config.table + \" Partition Column Name is: \" + procInfo.getString(\"COLUMN_NAME\"));\n                        m_log.info(\"Table \" + config.table + \" Partition Column Type is: \" + vtype.toString());\n                    }\n                }\n            }\n\n            if (columnTypes.isEmpty()) {\n                m_log.error(\"Table \" + config.table + \" Not found\");\n                close_cleanup();\n                System.exit(-1);\n            }\n            VoltTable.ColumnInfo colInfo[] = new VoltTable.ColumnInfo[columnTypes.size()];\n            for (int i = 0; i < columnTypes.size(); i++) {\n                VoltType type = columnTypes.get(i);\n                String cname = colNames.get(i);\n                VoltTable.ColumnInfo ci = new VoltTable.ColumnInfo(cname, type);\n                colInfo[i] = ci;\n            }\n\n            int numPartitions = -1;\n            int sitesPerHost = 1;\n            int kfactor = 0;\n            int hostcount = 1;\n            procInfo = csvClient.callProcedure(\"@SystemInformation\",\n                    \"deployment\").getResults()[0];\n            while (procInfo.advanceRow()) {\n                String prop = procInfo.getString(\"PROPERTY\");\n                if (prop != null && prop.equalsIgnoreCase(\"sitesperhost\")) {\n                    sitesPerHost = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n                if (prop != null && prop.equalsIgnoreCase(\"hostcount\")) {\n                    hostcount = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n                if (prop != null && prop.equalsIgnoreCase(\"kfactor\")) {\n                    kfactor = Integer.parseInt(procInfo.getString(\"VALUE\"));\n                }\n            }\n            boolean isMP = (partitionedColumnIndex == -1 ? true : false);\n            if (!isMP) {\n                numPartitions = (hostcount * sitesPerHost) / (kfactor + 1);\n                m_log.info(\"Number of Partitions: \" + numPartitions);\n                m_log.info(\"Batch Size is: \" + config.batch);\n\n                TheHashinator.initialize(LegacyHashinator.class, LegacyHashinator.getConfigureBytes(numPartitions));\n            } else {\n                m_log.warn(\"Using a multi-partitioned procedure to load data will be slow. \"\n                        + \"If loading a partitioned table, use a single-partitioned procedure \"\n                        + \"for best performance.\");\n                numPartitions = 1;\n            }\n\n            CSVPartitionProcessor.colInfo = colInfo;\n            CSVPartitionProcessor.columnTypes = columnTypes;\n            CSVPartitionProcessor.insertProcedure = insertProcedure;\n            CSVPartitionProcessor.isMP = isMP;\n            CSVPartitionProcessor.config = config;\n\n            List<Thread> spawned = new ArrayList<Thread>(numPartitions);\n            CSVLineWithMetaData dummy = new CSVLineWithMetaData();\n            Map<Integer, BlockingQueue<CSVLineWithMetaData>> lineq = new HashMap<Integer, BlockingQueue<CSVLineWithMetaData>>(numPartitions);\n            CountDownLatch pcount = new CountDownLatch(numPartitions);\n            List<CSVPartitionProcessor> processors = new ArrayList<CSVPartitionProcessor>(numPartitions);\n            for (int i = 0; i < numPartitions; i++) {\n                ArrayBlockingQueue<CSVLineWithMetaData> q = new ArrayBlockingQueue<CSVLineWithMetaData>((int) config.batch);\n                lineq.put(i, q);\n                CSVPartitionProcessor pp = new CSVPartitionProcessor();\n                processors.add(pp);\n                pp.csvClient = csvClient;\n                pp.partitionId = i;\n                pp.tableName = config.table;\n                pp.columnCnt = columnTypes.size();\n                pp.lineq = q;\n                pp.dummy = dummy;\n                pp.name = \"PartitionProcessor-\" + i;\n                Thread th = new Thread(pp);\n                th.setName(pp.name);\n                spawned.add(th);\n            }\n            CSVPartitionProcessor.pcount = pcount;\n\n            CSVFileReader.config = config;\n            CSVFileReader.columnCnt = columnTypes.size();\n            CSVFileReader.listReader = listReader;\n            CSVFileReader.partitionedColumnIndex = partitionedColumnIndex;\n            CSVFileReader.partitionColumnType = partitionColumnType;\n            CSVFileReader.tableName = config.table;\n            CSVFileReader.typeList = typeList;\n            CSVFileReader.csvClient = csvClient;\n            CSVFileReader.lineq = lineq;\n            CSVFileReader.dummy = dummy;\n            CSVFileReader.pcount = pcount;\n\n            CSVFileReader rdr = new CSVFileReader();\n            Thread th = new Thread(rdr);\n            th.setName(\"CSVReader\");\n            th.setDaemon(true);\n\n            for (Thread th2 : spawned) {\n                th2.start();\n            }\n            th.start();\n            th.join();\n\n            long readerTime = 0;\n            readerTime += (rdr.parsingTimeEnd - rdr.parsingTimeSt);\n            readerTime = readerTime / 1000000;\n\n            for (Thread th2 : spawned) {\n                try {\n                    th2.join();\n                } catch (InterruptedException ex) {\n                }\n            }\n            insertTimeEnd = System.currentTimeMillis();\n\n            csvClient.drain();\n            csvClient.close();\n            long inCount = 0, outCount = 0;\n            for (CSVPartitionProcessor pp : processors) {\n                inCount += pp.partitionProcessedCount;\n                outCount += pp.partitionAcknowledgedCount.get();\n            }\n            m_log.info(\"Parsing CSV file took \" + readerTime + \" milliseconds.\");\n            m_log.info(\"Inserting Data took \" + ((insertTimeEnd - insertTimeStart) - readerTime) + \" milliseconds.\");\n            m_log.info(\"Inserted \" + inCount + \" and acknowledged \"\n                    + outCount + \" rows (final)\");\n            produceFiles(rdr, inCount, outCount);\n            close_cleanup();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static void produceFiles(CSVFileReader rdr, long inCount, long outCount) {\n        Map<Long, String[]> errorInfo = CSVFileReader.errorInfo;\n        latency = System.currentTimeMillis() - start;\n        m_log.info(\"CSVLoader elapsed: \" + latency\n                + \" milliseconds\");\n\n        int bulkflush = 300; // by default right now\n        try {\n            long linect = 0;\n            for (Long irow : errorInfo.keySet()) {\n                String info[] = errorInfo.get(irow);\n                if (info.length != 2) {\n                    System.out\n                            .println(\"internal error, information is not enough\");\n                }\n                linect++;\n                out_invaliderowfile.write(info[0] + \"\\n\");\n                String message = \"Invalid input on line \" + irow + \".\\n  Contents:\" + info[0];\n                m_log.error(message);\n                out_logfile.write(message + \"\\n  \" + info[1] + \"\\n\");\n                if (linect % bulkflush == 0) {\n                    out_invaliderowfile.flush();\n                    out_logfile.flush();\n                }\n            }\n            // Get elapsed time in seconds\n            float elapsedTimeSec = latency / 1000F;\n            out_reportfile.write(\"CSVLoader elaspsed: \" + elapsedTimeSec\n                    + \" seconds\\n\");\n            long trueSkip = 0;\n            //get the actuall number of lines skipped\n            if (config.skip < CSVFileReader.totalLineCount.get()) {\n                trueSkip = config.skip;\n            } else {\n                trueSkip = CSVFileReader.totalLineCount.get();\n            }\n            out_reportfile.write(\"Number of input lines skipped: \"\n                    + trueSkip + \"\\n\");\n            out_reportfile.write(\"Number of lines read from input: \"\n                    + (CSVFileReader.totalLineCount.get() - trueSkip) + \"\\n\");\n            if (config.limitrows == -1) {\n                out_reportfile.write(\"Input stopped after \" + CSVFileReader.totalRowCount.get() + \" rows read\" + \"\\n\");\n            }\n            out_reportfile.write(\"Number of rows discovered: \"\n                    + CSVFileReader.totalRowCount.get() + \"\\n\");\n            out_reportfile.write(\"Number of rows successfully inserted: \"\n                    + inCount + \"\\n\");\n            // if prompted msg changed, change it also for test case\n            out_reportfile.write(\"Number of rows that could not be inserted: \"\n                    + errorInfo.size() + \"\\n\");\n            out_reportfile.write(\"CSVLoader rate: \" + outCount\n                    / elapsedTimeSec + \" row/s\\n\");\n\n            m_log.info(\"invalid row file is generated to:\" + pathInvalidrowfile);\n            m_log.info(\"log file is generated to:\" + pathLogfile);\n            m_log.info(\"report file is generated to:\" + pathReportfile);\n\n            out_invaliderowfile.flush();\n            out_logfile.flush();\n            out_reportfile.flush();\n        } catch (FileNotFoundException e) {\n            m_log.error(\"CSV report directory '\" + config.reportdir\n                    + \"' does not exist.\");\n        } catch (Exception x) {\n            m_log.error(x.getMessage());\n        }\n\n    }","id":5284,"modified_method":"private static void produceFiles(CSVFileReader rdr, long inCount, long outCount) {\n        Map<Long, String[]> errorInfo = CSVFileReader.errorInfo;\n        latency = System.currentTimeMillis() - start;\n        m_log.info(\"CSVLoader elapsed: \" + latency\n                + \" milliseconds\");\n\n        int bulkflush = 300; // by default right now\n        try {\n            long linect = 0;\n            for (Long irow : errorInfo.keySet()) {\n                String info[] = errorInfo.get(irow);\n                if (info.length != 2) {\n                    System.out\n                            .println(\"internal error, information is not enough\");\n                }\n                linect++;\n                out_invaliderowfile.write(info[0] + \"\\n\");\n                String message = \"Invalid input on line \" + irow + \".\\n  Contents:\" + info[0];\n                m_log.error(message);\n                out_logfile.write(message + \"\\n  \" + info[1] + \"\\n\");\n                if (linect % bulkflush == 0) {\n                    out_invaliderowfile.flush();\n                    out_logfile.flush();\n                }\n            }\n\n            //Print all processor errors\n            errorInfo = CSVPartitionProcessor.errorInfo;\n            for (Long irow : errorInfo.keySet()) {\n                String info[] = errorInfo.get(irow);\n                if (info.length != 2) {\n                    System.out\n                            .println(\"internal error, information is not enough\");\n                }\n                linect++;\n                out_invaliderowfile.write(info[0] + \"\\n\");\n                String message = \"Invalid input on line \" + irow + \".\\n  Contents:\" + info[0];\n                m_log.error(message);\n                out_logfile.write(message + \"\\n  \" + info[1] + \"\\n\");\n                if (linect % bulkflush == 0) {\n                    out_invaliderowfile.flush();\n                    out_logfile.flush();\n                }\n            }\n\n            // Get elapsed time in seconds\n            float elapsedTimeSec = latency / 1000F;\n            out_reportfile.write(\"CSVLoader elaspsed: \" + elapsedTimeSec\n                    + \" seconds\\n\");\n            long trueSkip = 0;\n            //get the actuall number of lines skipped\n            if (config.skip < CSVFileReader.totalLineCount.get()) {\n                trueSkip = config.skip;\n            } else {\n                trueSkip = CSVFileReader.totalLineCount.get();\n            }\n            out_reportfile.write(\"Number of input lines skipped: \"\n                    + trueSkip + \"\\n\");\n            out_reportfile.write(\"Number of lines read from input: \"\n                    + (CSVFileReader.totalLineCount.get() - trueSkip) + \"\\n\");\n            if (config.limitrows == -1) {\n                out_reportfile.write(\"Input stopped after \" + CSVFileReader.totalRowCount.get() + \" rows read\" + \"\\n\");\n            }\n            out_reportfile.write(\"Number of rows discovered: \"\n                    + CSVFileReader.totalRowCount.get() + \"\\n\");\n            out_reportfile.write(\"Number of rows successfully inserted: \"\n                    + inCount + \"\\n\");\n            // if prompted msg changed, change it also for test case\n            out_reportfile.write(\"Number of rows that could not be inserted: \"\n                    + errorInfo.size() + \"\\n\");\n            out_reportfile.write(\"CSVLoader rate: \" + outCount\n                    / elapsedTimeSec + \" row/s\\n\");\n\n            m_log.info(\"invalid row file is generated to:\" + pathInvalidrowfile);\n            m_log.info(\"log file is generated to:\" + pathLogfile);\n            m_log.info(\"report file is generated to:\" + pathReportfile);\n\n            out_invaliderowfile.flush();\n            out_logfile.flush();\n            out_reportfile.flush();\n        } catch (FileNotFoundException e) {\n            m_log.error(\"CSV report directory '\" + config.reportdir\n                    + \"' does not exist.\");\n        } catch (Exception x) {\n            m_log.error(x.getMessage());\n        }\n\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public void validate() {\n            if (maxerrors < 0) {\n                exitWithMessageAndUsage(\"abortfailurecount must be >=0\");\n            }\n            if (procedure.equals(\"\") && table.equals(\"\")) {\n                exitWithMessageAndUsage(\"procedure name or a table name required\");\n            }\n            if (!procedure.equals(\"\") && !table.equals(\"\")) {\n                exitWithMessageAndUsage(\"Only a procedure name or a table name required, pass only one please\");\n            }\n            if (skip < 0) {\n                exitWithMessageAndUsage(\"skipline must be >= 0\");\n            }\n            if (limitrows > Integer.MAX_VALUE) {\n                exitWithMessageAndUsage(\"limitrows to read must be < \"\n                        + Integer.MAX_VALUE);\n            }\n            if (port < 0) {\n                exitWithMessageAndUsage(\"port number must be >= 0\");\n            }\n            if ((blank.equalsIgnoreCase(\"error\")\n                    || blank.equalsIgnoreCase(\"null\")\n                    || blank.equalsIgnoreCase(\"empty\")) == false) {\n                exitWithMessageAndUsage(\"blank configuration specified must be one of {error|null|empty}\");\n            }\n            if ((procedure != null) && (procedure.trim().length() > 0)) {\n                useSuppliedProcedure = true;\n            }\n        }","id":5285,"modified_method":"@Override\n        public void validate() {\n            if (maxerrors < 0) {\n                exitWithMessageAndUsage(\"abortfailurecount must be >=0\");\n            }\n            if (procedure.equals(\"\") && table.equals(\"\")) {\n                exitWithMessageAndUsage(\"procedure name or a table name required\");\n            }\n            if (!procedure.equals(\"\") && !table.equals(\"\")) {\n                exitWithMessageAndUsage(\"Only a procedure name or a table name required, pass only one please\");\n            }\n            if (skip < 0) {\n                exitWithMessageAndUsage(\"skipline must be >= 0\");\n            }\n            if (limitrows > Integer.MAX_VALUE) {\n                exitWithMessageAndUsage(\"limitrows to read must be < \"\n                        + Integer.MAX_VALUE);\n            }\n            if (port < 0) {\n                exitWithMessageAndUsage(\"port number must be >= 0\");\n            }\n            if (batch < 0) {\n                exitWithMessageAndUsage(\"batch size number must be >= 0\");\n            }\n            if ((blank.equalsIgnoreCase(\"error\")\n                    || blank.equalsIgnoreCase(\"null\")\n                    || blank.equalsIgnoreCase(\"empty\")) == false) {\n                exitWithMessageAndUsage(\"blank configuration specified must be one of {error|null|empty}\");\n            }\n            if ((procedure != null) && (procedure.trim().length() > 0)) {\n                useSuppliedProcedure = true;\n            }\n        }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public void run() {\n\n        Client lcsvClient = csvClient;\n        VoltTable table = new VoltTable(colInfo);\n        String procName = (isMP ? \"@LoadMultipartitionTable\" : \"@LoadSinglepartitionTable\");\n        if (config.ping) {\n            procName = \"@Ping\";\n        } else if (config.useSuppliedProcedure) {\n            procName = insertProcedure;\n        }\n\n        m_log.info(\"Using Procedure: \" + procName);\n        Object partitionParam = null;\n        if (!isMP) {\n            partitionParam = TheHashinator.valueToBytes(partitionId);\n        }\n        String lastLine[] = null;\n        while (true) {\n            List<CSVLineWithMetaData> mlineList = new ArrayList<CSVLineWithMetaData>();\n            lineq.drainTo(mlineList);\n            boolean end = false;\n            for (CSVLineWithMetaData lineList : mlineList) {\n                if (errored) {\n                    end = true;\n                    break;\n                }\n                if (lineList == dummy) {\n                    if (config.useSuppliedProcedure) {\n                        end = true;\n                        break;\n                    }\n                    //Process anything that we didnt process.\n                    if (table.getRowCount() > 0) {\n                        PartitionProcedureCallback cbmt = new PartitionProcedureCallback(table.getRowCount(), lastLine, this);\n                        try {\n                            if (!isMP) {\n                                lcsvClient.callProcedure(cbmt, procName, partitionParam, tableName, table);\n                            } else {\n                                lcsvClient.callProcedure(cbmt, procName, tableName, table);\n                            }\n                            partitionProcessedCount += table.getRowCount();\n                        } catch (IOException ex) {\n                            errored = synchronizeErrorInfo(lineList.lineNumber, lineList.line);\n                            break;\n                        }\n                    }\n                    end = true;\n                    break;\n                }\n                lastLine = lineList.line;\n                if (!config.useSuppliedProcedure) {\n                    try {\n                        VoltTableUtil.toVoltTableFromLine(table, lineList.line, columnTypes);\n                    } catch (Exception ex) {\n                        //Failed to add row....\n                        errored = synchronizeErrorInfo(lineList.lineNumber, lineList.line);\n                        continue;\n                    }\n                    if (table.getRowCount() > config.batch) {\n                        try {\n                            PartitionProcedureCallback cbmt = new PartitionProcedureCallback(table.getRowCount(), lineList.line, this);\n                            if (!isMP) {\n                                lcsvClient.callProcedure(cbmt, procName, partitionParam, tableName, table);\n                            } else {\n                                lcsvClient.callProcedure(cbmt, procName, tableName, table);\n                            }\n                            partitionProcessedCount += table.getRowCount();\n                            table.clearRowData();\n                        } catch (IOException ex) {\n                            table.clearRowData();\n                            errored = synchronizeErrorInfo(lineList.lineNumber, lineList.line);\n                            break;\n                        }\n                    }\n                } else {\n                    try {\n                        PartitionProcedureCallback cbmt = new PartitionProcedureCallback(1, lineList.line, this);\n                        csvClient.callProcedure(cbmt, procName, (Object[]) lineList.line);\n                        partitionProcessedCount++;\n                    } catch (IOException ex) {\n                        errored = synchronizeErrorInfo(lineList.lineNumber, lineList.line);\n                        break;\n                    }\n                }\n            }\n            if (end) {\n                break;\n            }\n        }\n        try {\n            lcsvClient.drain();\n        } catch (NoConnectionsException ex) {\n            m_log.warn(\"Failed to Drain the client: \", ex);\n        } catch (InterruptedException ex) {\n            m_log.warn(\"Failed to Drain the client: \", ex);\n        }\n        CSVPartitionProcessor.pcount.countDown();\n        m_log.info(\"Done Processing partition: \" + partitionId + \" Processed: \" + partitionProcessedCount);\n    }","id":5286,"modified_method":"@Override\n    public void run() {\n\n        VoltTable table = new VoltTable(colInfo);\n        String procName = (isMP ? \"@LoadMultipartitionTable\" : \"@LoadSinglepartitionTable\");\n        if (config.useSuppliedProcedure) {\n            procName = insertProcedure;\n        }\n\n        Object partitionParam = null;\n        if (!isMP) {\n            partitionParam = TheHashinator.valueToBytes(partitionId);\n        }\n        while (true) {\n            List<CSVLineWithMetaData> mlineList = new ArrayList<CSVLineWithMetaData>();\n            List<CSVLineWithMetaData> batchList = new ArrayList<CSVLineWithMetaData>();\n            lineq.drainTo(mlineList);\n            boolean end = false;\n            for (CSVLineWithMetaData lineList : mlineList) {\n                if (errored) {\n                    end = true;\n                    break;\n                }\n                if (lineList == dummy) {\n                    if (config.useSuppliedProcedure) {\n                        end = true;\n                        break;\n                    }\n                    //Process anything that we didnt process.\n                    if (table.getRowCount() > 0) {\n                        PartitionProcedureCallback cbmt = new PartitionProcedureCallback(batchList, this);\n                        try {\n                            if (!isMP) {\n                                csvClient.callProcedure(cbmt, procName, partitionParam, tableName, table);\n                            } else {\n                                csvClient.callProcedure(cbmt, procName, tableName, table);\n                            }\n                            partitionProcessedCount += table.getRowCount();\n                        } catch (IOException ex) {\n                            String[] info = {lineList.rawLineData.toString(), ex.toString()};\n                            errored = synchronizeErrorInfo(lineList.lineNumber, info);\n                            break;\n                        }\n                    }\n                    end = true;\n                    break;\n                }\n                if (!config.useSuppliedProcedure) {\n                    try {\n                        VoltTableUtil.toVoltTableFromLine(table, lineList.line, columnTypes);\n                        batchList.add(lineList);\n                    } catch (Exception ex) {\n                        //Failed to add row....\n                        String[] info = {lineList.rawLineData.toString(), ex.toString()};\n                        errored = synchronizeErrorInfo(lineList.lineNumber, info);\n                        continue;\n                    }\n                    if (table.getRowCount() > config.batch) {\n                        try {\n                            batchList.add(lineList);\n                            PartitionProcedureCallback cbmt = new PartitionProcedureCallback(batchList, this);\n                            if (!isMP) {\n                                csvClient.callProcedure(cbmt, procName, partitionParam, tableName, table);\n                            } else {\n                                csvClient.callProcedure(cbmt, procName, tableName, table);\n                            }\n                            partitionProcessedCount += table.getRowCount();\n                            table.clearRowData();\n                            batchList.clear();\n                            batchList = new ArrayList<CSVLineWithMetaData>();\n                        } catch (IOException ex) {\n                            table.clearRowData();\n                            String[] info = {lineList.rawLineData.toString(), ex.toString()};\n                            errored = synchronizeErrorInfo(lineList.lineNumber, info);\n                            break;\n                        }\n                    }\n                } else {\n                    try {\n                        batchList.add(lineList);\n                        PartitionProcedureCallback cbmt = new PartitionProcedureCallback(batchList, this);\n                        csvClient.callProcedure(cbmt, procName, (Object[]) lineList.line);\n                        partitionProcessedCount++;\n                        batchList = new ArrayList<CSVLineWithMetaData>();\n                    } catch (IOException ex) {\n                        String[] info = {lineList.rawLineData.toString(), ex.toString()};\n                        errored = synchronizeErrorInfo(lineList.lineNumber, info);\n                        break;\n                    }\n                }\n            }\n            if (end) {\n                break;\n            }\n        }\n        try {\n            csvClient.drain();\n        } catch (NoConnectionsException ex) {\n            m_log.warn(\"Failed to Drain the client: \", ex);\n        } catch (InterruptedException ex) {\n            m_log.warn(\"Failed to Drain the client: \", ex);\n        }\n        CSVPartitionProcessor.pcount.countDown();\n        m_log.info(\"Done Processing partition: \" + partitionId + \" Processed: \" + partitionProcessedCount);\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            int reportEveryNRows = 10000;\n            if (response.getStatus() != ClientResponse.SUCCESS) {\n                m_log.error(response.getStatusString());\n                long executed = response.getResults()[0].asScalarLong();\n                String[] info = {m_rowdata.toString(), response.getStatusString()};\n                if (synchronizeErrorInfo(m_lineNum, info)) {\n                    pprocessor.errored = true;\n                }\n                return;\n            }\n            long currentCount = pprocessor.partitionAcknowledgedCount.addAndGet(m_batchCount);\n            int newMultiple = (int) currentCount / reportEveryNRows;\n            if (newMultiple != lastMultiple) {\n                lastMultiple = newMultiple;\n                m_log.info(pprocessor.name + \" Inserted \" + currentCount + \" rows\");\n            }\n        }","id":5287,"modified_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            int reportEveryNRows = 10000;\n            if (response.getStatus() != ClientResponse.SUCCESS) {\n                m_log.error(response.getStatusString());\n                CSVLineWithMetaData lineData = m_batchList.get((int) 0);\n                String[] info = {lineData.rawLineData.toString(), response.getStatusString()};\n                if (synchronizeErrorInfo(lineData.lineNumber, info)) {\n                    m_processor.errored = true;\n                }\n                return;\n            }\n            long executed = response.getResults()[0].asScalarLong();\n            long currentCount = m_processor.partitionAcknowledgedCount.addAndGet(executed);\n            int newMultiple = (int) currentCount / reportEveryNRows;\n            if (newMultiple != lastMultiple) {\n                lastMultiple = newMultiple;\n                m_log.info(m_processor.name + \" Inserted \" + currentCount + \" rows\");\n            }\n        }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public PartitionProcedureCallback(int batchCount, String[] rowData, CSVPartitionProcessor pp) {\n            m_batchCount = batchCount;\n            m_rowdata = rowData;\n            pprocessor = pp;\n        }","id":5288,"modified_method":"public PartitionProcedureCallback(List<CSVLineWithMetaData> batchList, CSVPartitionProcessor pp) {\n            m_processor = pp;\n            m_batchList = batchList;\n        }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * These parameters, with the exception of ctx, map to user provided values.\n     *\n     * @param ctx\n     *            Internal. Not a user-supplied parameter.\n     * @param tableName\n     *            Name of persistent table receiving data.\n     * @param table\n     *            A VoltTable with schema matching tableName containing data to\n     *            load.\n     * @return {@link org.voltdb.VoltSystemProcedure#STATUS_SCHEMA}\n     * @throws VoltAbortException\n     */\n    public long run(SystemProcedureExecutionContext ctx,\n            String tableName, VoltTable table)\n            throws VoltAbortException {\n\n        // if tableName is replicated, just send table everywhere.\n        // otherwise, create a VoltTable for each partition and\n        // split up the incoming table .. then send those partial\n        // tables to the appropriate sites.\n\n        Table catTable = ctx.getDatabase().getTables().getIgnoreCase(tableName);\n        if (catTable == null) {\n            throw new VoltAbortException(\"Table not present in catalog.\");\n        }\n        // fix any case problems\n        tableName = catTable.getTypeName();\n\n        // check that the schema of the input matches\n        int columnCount = table.getColumnCount();\n\n        // find the insert statement for this table\n        String insertProcName = String.format(\"%s.insert\", tableName);\n        Procedure proc = ctx.getDatabase().getProcedures().get(insertProcName);\n        if (proc == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to locate auto-generated CRUD insert statement for table %s\",\n                            tableName));\n        }\n\n        // statements of all single-statement procs are named \"sql\"\n        Statement catStmt = proc.getStatements().get(\"sql\");\n        if (catStmt == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to find SQL statement for found table %s: BAD\",\n                            tableName));\n        }\n\n        // create a SQLStmt instance on the fly (unusual to do)\n        SQLStmt stmt = new SQLStmt(catStmt.getSqltext());\n        m_runner.initSQLStmt(stmt, catStmt);\n\n        if (catTable.getIsreplicated()) {\n            long queued = 0;\n            long executed = 0;\n\n            // make sure at the start of the table\n            table.resetRowPosition();\n            for (int i = 0; table.advanceRow(); ++i) {\n                Object[] params = new Object[columnCount];\n\n                // get the parameters from the volt table\n                for (int col = 0; col < columnCount; ++col) {\n                    params[col] = table.get(col, table.getColumnType(col));\n                }\n\n                // queue an insert and count it\n                voltQueueSQL(stmt, params);\n                ++queued;\n\n                // every 100 statements, exec the batch\n                // 100 is an arbitrary number\n                if ((i % 100) == 0) {\n                    executed += executeSQL();\n                }\n            }\n            // execute any leftover batched statements\n            if (queued > executed) {\n                executed += executeSQL();\n            }\n\n            return executed;\n        }\n        else {\n            throw new VoltAbortException(\"LoadMultipartitionTable no longer supports loading partitioned tables\" +\n                                         \" use CRUD procs instead\");\n        }\n    }","id":5289,"modified_method":"/**\n     * These parameters, with the exception of ctx, map to user provided values.\n     *\n     * @param ctx\n     *            Internal. Not a user-supplied parameter.\n     * @param tableName\n     *            Name of persistent table receiving data.\n     * @param table\n     *            A VoltTable with schema matching tableName containing data to\n     *            load.\n     * @return {@link org.voltdb.VoltSystemProcedure#STATUS_SCHEMA}\n     * @throws VoltAbortException\n     */\n    public long run(SystemProcedureExecutionContext ctx,\n            String tableName, VoltTable table)\n            throws VoltAbortException {\n\n        // if tableName is replicated, just send table everywhere.\n        // otherwise, create a VoltTable for each partition and\n        // split up the incoming table .. then send those partial\n        // tables to the appropriate sites.\n\n        Table catTable = ctx.getDatabase().getTables().getIgnoreCase(tableName);\n        if (catTable == null) {\n            throw new VoltAbortException(\"Table not present in catalog.\");\n        }\n        // fix any case problems\n        tableName = catTable.getTypeName();\n\n        // check that the schema of the input matches\n        int columnCount = table.getColumnCount();\n\n        // find the insert statement for this table\n        String insertProcName = String.format(\"%s.insert\", tableName);\n        Procedure proc = ctx.getDatabase().getProcedures().get(insertProcName);\n        if (proc == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to locate auto-generated CRUD insert statement for table %s\",\n                            tableName));\n        }\n\n        // statements of all single-statement procs are named \"sql\"\n        Statement catStmt = proc.getStatements().get(\"sql\");\n        if (catStmt == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to find SQL statement for found table %s: BAD\",\n                            tableName));\n        }\n\n        // create a SQLStmt instance on the fly (unusual to do)\n        SQLStmt stmt = new SQLStmt(catStmt.getSqltext());\n        m_runner.initSQLStmt(stmt, catStmt);\n\n        if (catTable.getIsreplicated()) {\n            long queued = 0;\n            long executed = 0;\n\n            // make sure at the start of the table\n            table.resetRowPosition();\n            for (int i = 0; table.advanceRow(); ++i) {\n                Object[] params = new Object[columnCount];\n\n                // get the parameters from the volt table\n                for (int col = 0; col < columnCount; ++col) {\n                    params[col] = table.get(col, table.getColumnType(col));\n                }\n\n                // queue an insert and count it\n                voltQueueSQL(stmt, params);\n                ++queued;\n\n                // every 100 statements, exec the batch\n                // 100 is an arbitrary number\n                if ((i % 200) == 0) {\n                    executed += executeSQL();\n                    //Reset queued\n                    queued = 0;\n                }\n            }\n            // execute any leftover batched statements\n            if (queued > executed) {\n                executed += executeSQL();\n            }\n\n            return executed;\n        }\n        else {\n            throw new VoltAbortException(\"LoadMultipartitionTable no longer supports loading partitioned tables\" +\n                                         \" use CRUD procs instead\");\n        }\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * These parameters, with the exception of ctx, map to user provided values.\n     *\n     * @param ctx\n     *            Internal. Not a user-supplied parameter.\n     * @param partitionParam Partitioning parameter\n     * @param tableName\n     *            Name of persistent table receiving data.\n     * @param table\n     *            A VoltTable with schema matching tableName containing data to\n     *            load.\n     * @return The number of rows modified.\n     * @throws VoltAbortException\n     */\n    public long run(SystemProcedureExecutionContext ctx,\n                    byte[] partitionParam,\n            String tableName, VoltTable table)\n            throws VoltAbortException {\n\n        // if tableName is replicated, fail.\n        // otherwise, create a VoltTable for each partition and\n        // split up the incoming table .. then send those partial\n        // tables to the appropriate sites.\n\n        Table catTable = ctx.getDatabase().getTables().getIgnoreCase(tableName);\n        if (catTable == null) {\n            throw new VoltAbortException(\"Table not present in catalog.\");\n        }\n        if (catTable.getIsreplicated()) {\n            throw new VoltAbortException(\n                    String.format(\"LoadSinglepartitionTable incompatible with replicated table %s.\",\n                            tableName));\n        }\n        // fix any case problems\n        tableName = catTable.getTypeName();\n\n        // check that the schema of the input matches\n        int columnCount = table.getColumnCount();\n\n        // find the insert statement for this table\n        String insertProcName = String.format(\"%s.insert\", tableName);\n        Procedure p = ctx.getDatabase().getProcedures().get(insertProcName);\n        if (p == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to locate auto-generated CRUD insert statement for table %s\",\n                            tableName));\n        }\n\n        // statements of all single-statement procs are named \"sql\"\n        Statement catStmt = p.getStatements().get(\"sql\");\n        if (catStmt == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to find SQL statement for found table %s: BAD\",\n                            tableName));\n        }\n\n        // create a SQLStmt instance on the fly (unusual to do)\n        SQLStmt stmt = new SQLStmt(catStmt.getSqltext());\n        m_runner.initSQLStmt(stmt, catStmt);\n\n        long queued = 0;\n        long executed = 0;\n\n        // make sure at the start of the table\n        table.resetRowPosition();\n        for (int i = 0; table.advanceRow(); ++i) {\n            Object[] params = new Object[columnCount];\n\n            // get the parameters from the volt table\n            for (int col = 0; col < columnCount; ++col) {\n                params[col] = table.get(col, table.getColumnType(col));\n            }\n\n            // queue an insert and count it\n            voltQueueSQL(stmt, params);\n            ++queued;\n\n            // every 100 statements, exec the batch\n            // 100 is an arbitrary number\n            if ((i % 100) == 0) {\n                executed += executeSQL();\n            }\n        }\n        // execute any leftover batched statements\n        if (queued > executed) {\n            executed += executeSQL();\n        }\n\n        return executed;\n    }","id":5290,"modified_method":"/**\n     * These parameters, with the exception of ctx, map to user provided values.\n     *\n     * @param ctx\n     *            Internal. Not a user-supplied parameter.\n     * @param partitionParam Partitioning parameter\n     * @param tableName\n     *            Name of persistent table receiving data.\n     * @param table\n     *            A VoltTable with schema matching tableName containing data to\n     *            load.\n     * @return The number of rows modified.\n     * @throws VoltAbortException\n     */\n    public long run(SystemProcedureExecutionContext ctx,\n                    byte[] partitionParam,\n            String tableName, VoltTable table)\n            throws VoltAbortException {\n\n        // if tableName is replicated, fail.\n        // otherwise, create a VoltTable for each partition and\n        // split up the incoming table .. then send those partial\n        // tables to the appropriate sites.\n\n        Table catTable = ctx.getDatabase().getTables().getIgnoreCase(tableName);\n        if (catTable == null) {\n            throw new VoltAbortException(\"Table not present in catalog.\");\n        }\n        if (catTable.getIsreplicated()) {\n            throw new VoltAbortException(\n                    String.format(\"LoadSinglepartitionTable incompatible with replicated table %s.\",\n                            tableName));\n        }\n        // fix any case problems\n        tableName = catTable.getTypeName();\n\n        // check that the schema of the input matches\n        int columnCount = table.getColumnCount();\n\n        // find the insert statement for this table\n        String insertProcName = String.format(\"%s.insert\", tableName);\n        Procedure p = ctx.getDatabase().getProcedures().get(insertProcName);\n        if (p == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to locate auto-generated CRUD insert statement for table %s\",\n                            tableName));\n        }\n\n        // statements of all single-statement procs are named \"sql\"\n        Statement catStmt = p.getStatements().get(\"sql\");\n        if (catStmt == null) {\n            throw new VoltAbortException(\n                    String.format(\"Unable to find SQL statement for found table %s: BAD\",\n                            tableName));\n        }\n\n        // create a SQLStmt instance on the fly (unusual to do)\n        SQLStmt stmt = new SQLStmt(catStmt.getSqltext());\n        m_runner.initSQLStmt(stmt, catStmt);\n\n        long queued = 0;\n        long executed = 0;\n\n        // make sure at the start of the table\n        table.resetRowPosition();\n        for (int i = 0; table.advanceRow(); ++i) {\n            Object[] params = new Object[columnCount];\n\n            // get the parameters from the volt table\n            for (int col = 0; col < columnCount; ++col) {\n                params[col] = table.get(col, table.getColumnType(col));\n            }\n\n            // queue an insert and count it\n            voltQueueSQL(stmt, params);\n            ++queued;\n\n            // every 200 statements, exec the batch\n            // 200 is an arbitrary number, but is tied to CSVloading and procedure runner fastPath\n            if ((i % 200) == 0) {\n                executed += executeSQL();\n                //Reset queued\n                queued = 0;\n            }\n        }\n        // execute any leftover batched statements\n        if (queued > executed) {\n            executed += executeSQL();\n        }\n\n        return executed;\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Add rows data to VoltTable.\n     *\n     * @param table\n     * @param fields\n     * @param columnTypes\n     * @return\n     */\n    public static VoltTable toVoltTableFromLine(VoltTable table, String fields[], ArrayList<VoltType> columnTypes) {\n\n        if (fields == null || fields.length <= 0) {\n            return table;\n        }\n        Object row_args[] = new Object[fields.length];\n\n        for (int i = 0; i < fields.length; i++) {\n            final VoltType type = columnTypes.get(i);\n            Object obj;\n            if (type == VoltType.BIGINT\n                    || type == VoltType.INTEGER\n                    || type == VoltType.SMALLINT\n                    || type == VoltType.TINYINT) {\n                Long l = Long.parseLong(fields[i]);\n                obj = l;\n            } else if (type == VoltType.FLOAT) {\n                Double l = Double.parseDouble(fields[i]);\n                obj = l;\n            } else if (type == VoltType.DECIMAL) {\n                BigDecimal l = new BigDecimal(fields[i]);\n                obj = l;\n            } else if (type == VoltType.STRING) {\n                obj = fields[i];\n            } else if (type == VoltType.TIMESTAMP) {\n                TimestampType ts = new TimestampType(fields[i]);\n                obj = ts;\n            } else if (type == VoltType.VARBINARY) {\n                obj = fields[i].getBytes();\n            } else {\n                obj = null;\n            }\n            if (obj != null) {\n                row_args[i] = obj;\n            }\n        }\n        table.addRow(row_args);\n        return table;\n    }","id":5291,"modified_method":"/**\n     * Add rows data to VoltTable given fields values and column Types;\n     *\n     * @param table\n     * @param fields\n     * @param columnTypes\n     * @return\n     */\n    public static VoltTable toVoltTableFromLine(VoltTable table, String fields[], Map<Integer, VoltType> columnTypes) {\n\n        if (fields == null || fields.length <= 0) {\n            return table;\n        }\n        Object row_args[] = new Object[fields.length];\n\n        for (int i = 0; i < fields.length; i++) {\n            final VoltType type = columnTypes.get(i);\n            Object obj;\n            if (type == VoltType.BIGINT\n                    || type == VoltType.INTEGER\n                    || type == VoltType.SMALLINT\n                    || type == VoltType.TINYINT) {\n                Long l = Long.parseLong(fields[i]);\n                obj = l;\n            } else if (type == VoltType.FLOAT) {\n                Double l = Double.parseDouble(fields[i]);\n                obj = l;\n            } else if (type == VoltType.DECIMAL) {\n                BigDecimal l = new BigDecimal(fields[i]);\n                obj = l;\n            } else if (type == VoltType.STRING) {\n                obj = fields[i];\n            } else if (type == VoltType.TIMESTAMP) {\n                TimestampType ts = new TimestampType(fields[i]);\n                obj = ts;\n            } else if (type == VoltType.VARBINARY) {\n                obj = fields[i].getBytes();\n            } else {\n                obj = null;\n            }\n            if (obj != null) {\n                row_args[i] = obj;\n            }\n        }\n        table.addRow(row_args);\n        return table;\n    }","commit_id":"b1c180522c5e40776e388a58329c204db23cb45a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static void main(String[] args){\n    final long processStart = System.currentTimeMillis();\n    System.out.println(\"Build process started. Classpath: \" + System.getProperty(\"java.class.path\"));\n    final String host = args[HOST_ARG];\n    final int port = Integer.parseInt(args[PORT_ARG]);\n    final UUID sessionId = UUID.fromString(args[SESSION_ID_ARG]);\n    @SuppressWarnings(\"ConstantConditions\")\n    final File systemDir = new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]));\n    Utils.setSystemRoot(systemDir);\n\n    final long eventLoopStart = System.currentTimeMillis();\n    // IDEA-123132, let's try again\n    for (int attempt = 0; attempt < 3; attempt++) {\n      try {\n        ourEventLoopGroup = new NioEventLoopGroup(1, SharedThreadPool.getInstance());\n        System.out.println(\"Created event loop in \" + attempt + \" attempts for \" + (System.currentTimeMillis() - eventLoopStart) + \" ms\");\n        break;\n      }\n      catch (IllegalStateException e) {\n        if (attempt == 2) {\n          printErrorAndExit(host, port, e);\n          return;\n        }\n        else {\n          LOG.warn(\"Cannot create event loop, attempt #\" + attempt, e);\n          try {\n            //noinspection BusyWait\n            Thread.sleep(10 * (attempt + 1));\n          }\n          catch (InterruptedException ignored) {\n          }\n        }\n      }\n    }\n\n    final long nettyBootstrapStart = System.currentTimeMillis();\n    final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() {\n      @Override\n      protected void initChannel(Channel channel) throws Exception {\n        channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(),\n                                   new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),\n                                   new ProtobufVarint32LengthFieldPrepender(),\n                                   new ProtobufEncoder(),\n                                   new MyMessageHandler(sessionId));\n      }\n    }).option(ChannelOption.TCP_NODELAY, true).option(ChannelOption.SO_KEEPALIVE, true);\n\n    final long nettyBootstrapEnd = System.currentTimeMillis();\n    System.out.println(\"Netty bootstrap created in \" + (nettyBootstrapEnd - nettyBootstrapStart) + \" ms\");\n    \n    final ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).awaitUninterruptibly();\n\n    System.out.println(\"Connection to IDE established in \" + (System.currentTimeMillis() - nettyBootstrapEnd) + \" ms\");\n    \n    final boolean success = future.isSuccess();\n    if (success) {\n      final String projectPathToPreload = System.getProperty(PRELOAD_PROJECT_PATH, null);\n      final String globalsPathToPreload = System.getProperty(PRELOAD_CONFIG_PATH, null); \n      if (projectPathToPreload != null && globalsPathToPreload != null) {\n        final PreloadedData data = new PreloadedData();\n        ourPreloadedData = data;\n        try {\n          FileSystemUtil.getAttributes(projectPathToPreload); // this will pre-load all FS optimizations\n\n          final BuildRunner runner = new BuildRunner(new JpsModelLoaderImpl(projectPathToPreload, globalsPathToPreload, null));\n          data.setRunner(runner);\n\n          final File dataStorageRoot = Utils.getDataStorageRoot(projectPathToPreload);\n          final BuildFSState fsState = new BuildFSState(false);\n          final ProjectDescriptor pd = runner.load(new MessageHandler() {\n            @Override\n            public void processMessage(BuildMessage msg) {\n              data.addMessage(msg);\n            }\n          }, dataStorageRoot, fsState);\n          data.setProjectDescriptor(pd);\n          \n          try {\n            final File fsStateFile = new File(dataStorageRoot, BuildSession.FS_STATE_FILE);\n            final DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(fsStateFile)));\n            try {\n              final int version = in.readInt();\n              if (version == BuildFSState.VERSION) {\n                final long savedOrdinal = in.readLong();\n                final boolean hasWorkToDo = in.readBoolean();// must skip \"has-work-to-do\" flag\n                fsState.load(in, pd.getModel(), pd.getBuildRootIndex());\n                data.setFsEventOrdinal(savedOrdinal);\n                data.setHasHasWorkToDo(hasWorkToDo);\n              }\n            }\n            finally {\n              in.close();\n            }\n          }\n          catch (FileNotFoundException ignored) {\n          }\n          catch (IOException e) {\n            LOG.info(\"Error pre-loading FS state\", e);\n            fsState.clearAll();\n          }\n\n          // preloading target configurations\n          final BuildTargetsState targetsState = pd.getTargetsState();\n          for (BuildTarget<?> target : pd.getBuildTargetIndex().getAllTargets()) {\n            targetsState.getTargetConfiguration(target);\n          }\n\n          BuilderRegistry.getInstance();\n\n          LOG.info(\"Pre-loaded process ready in \" + (System.currentTimeMillis() - processStart) + \" ms\");\n        }\n        catch (Throwable e) {\n          LOG.info(\"Failed to pre-load project \" + projectPathToPreload, e);\n          // just failed to preload the project, the situation will be handled later, when real build starts\n        }\n      }\n      else if (projectPathToPreload != null || globalsPathToPreload != null){\n        LOG.info(\"Skipping project pre-loading step: both paths to project configuration files and path to global settings must be specified\");\n      }\n      future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId, CmdlineProtoUtil.createParamRequest()));\n    }\n    else {\n      printErrorAndExit(host, port, future.cause());\n    }\n  }","id":5292,"modified_method":"public static void main(String[] args){\n    final long processStart = System.currentTimeMillis();\n    final String startMessage = \"Build process started. Classpath: \" + System.getProperty(\"java.class.path\");\n    System.out.println(startMessage);\n    LOG.info(startMessage);\n    \n    final String host = args[HOST_ARG];\n    final int port = Integer.parseInt(args[PORT_ARG]);\n    final UUID sessionId = UUID.fromString(args[SESSION_ID_ARG]);\n    @SuppressWarnings(\"ConstantConditions\")\n    final File systemDir = new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]));\n    Utils.setSystemRoot(systemDir);\n\n    final long connectStart = System.currentTimeMillis();\n    // IDEA-123132, let's try again\n    for (int attempt = 0; attempt < 3; attempt++) {\n      try {\n        ourEventLoopGroup = new NioEventLoopGroup(1, SharedThreadPool.getInstance());\n        break;\n      }\n      catch (IllegalStateException e) {\n        if (attempt == 2) {\n          printErrorAndExit(host, port, e);\n          return;\n        }\n        else {\n          LOG.warn(\"Cannot create event loop, attempt #\" + attempt, e);\n          try {\n            //noinspection BusyWait\n            Thread.sleep(10 * (attempt + 1));\n          }\n          catch (InterruptedException ignored) {\n          }\n        }\n      }\n    }\n\n    final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() {\n      @Override\n      protected void initChannel(Channel channel) throws Exception {\n        channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(),\n                                   new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),\n                                   new ProtobufVarint32LengthFieldPrepender(),\n                                   new ProtobufEncoder(),\n                                   new MyMessageHandler(sessionId));\n      }\n    }).option(ChannelOption.TCP_NODELAY, true).option(ChannelOption.SO_KEEPALIVE, true);\n\n    final ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).awaitUninterruptibly();\n\n    \n    final boolean success = future.isSuccess();\n    if (success) {\n      LOG.info(\"Connection to IDE established in \" + (System.currentTimeMillis() - connectStart) + \" ms\");\n\n      final String projectPathToPreload = System.getProperty(PRELOAD_PROJECT_PATH, null);\n      final String globalsPathToPreload = System.getProperty(PRELOAD_CONFIG_PATH, null); \n      if (projectPathToPreload != null && globalsPathToPreload != null) {\n        final PreloadedData data = new PreloadedData();\n        ourPreloadedData = data;\n        try {\n          FileSystemUtil.getAttributes(projectPathToPreload); // this will pre-load all FS optimizations\n\n          final BuildRunner runner = new BuildRunner(new JpsModelLoaderImpl(projectPathToPreload, globalsPathToPreload, null));\n          data.setRunner(runner);\n\n          final File dataStorageRoot = Utils.getDataStorageRoot(projectPathToPreload);\n          final BuildFSState fsState = new BuildFSState(false);\n          final ProjectDescriptor pd = runner.load(new MessageHandler() {\n            @Override\n            public void processMessage(BuildMessage msg) {\n              data.addMessage(msg);\n            }\n          }, dataStorageRoot, fsState);\n          data.setProjectDescriptor(pd);\n          \n          try {\n            final File fsStateFile = new File(dataStorageRoot, BuildSession.FS_STATE_FILE);\n            final DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(fsStateFile)));\n            try {\n              final int version = in.readInt();\n              if (version == BuildFSState.VERSION) {\n                final long savedOrdinal = in.readLong();\n                final boolean hasWorkToDo = in.readBoolean();// must skip \"has-work-to-do\" flag\n                fsState.load(in, pd.getModel(), pd.getBuildRootIndex());\n                data.setFsEventOrdinal(savedOrdinal);\n                data.setHasHasWorkToDo(hasWorkToDo);\n              }\n            }\n            finally {\n              in.close();\n            }\n          }\n          catch (FileNotFoundException ignored) {\n          }\n          catch (IOException e) {\n            LOG.info(\"Error pre-loading FS state\", e);\n            fsState.clearAll();\n          }\n\n          // preloading target configurations\n          final BuildTargetsState targetsState = pd.getTargetsState();\n          for (BuildTarget<?> target : pd.getBuildTargetIndex().getAllTargets()) {\n            targetsState.getTargetConfiguration(target);\n          }\n\n          BuilderRegistry.getInstance();\n\n          LOG.info(\"Pre-loaded process ready in \" + (System.currentTimeMillis() - processStart) + \" ms\");\n        }\n        catch (Throwable e) {\n          LOG.info(\"Failed to pre-load project \" + projectPathToPreload, e);\n          // just failed to preload the project, the situation will be handled later, when real build starts\n        }\n      }\n      else if (projectPathToPreload != null || globalsPathToPreload != null){\n        LOG.info(\"Skipping project pre-loading step: both paths to project configuration files and path to global settings must be specified\");\n      }\n      future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId, CmdlineProtoUtil.createParamRequest()));\n    }\n    else {\n      printErrorAndExit(host, port, future.cause());\n    }\n  }","commit_id":"ded141705b73548476381aa5128ec18571a58b64","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void initLoggers() {\n    final long start = System.currentTimeMillis();\n    try {\n      final String logDir = System.getProperty(GlobalOptions.LOG_DIR_OPTION, null);\n      final File configFile = logDir != null? new File(logDir, LOG_CONFIG_FILE_NAME) : new File(LOG_CONFIG_FILE_NAME);\n      ensureLogConfigExists(configFile);\n      String text = FileUtil.loadFile(configFile);\n      final String logFile = logDir != null? new File(logDir, LOG_FILE_NAME).getAbsolutePath() : LOG_FILE_NAME;\n      text = StringUtil.replace(text, LOG_FILE_MACRO, StringUtil.replace(logFile, \"\\\\\", \"\\\\\\\\\"));\n      new DOMConfigurator().doConfigure(new StringReader(text), LogManager.getLoggerRepository());\n      System.out.println(\"BuildMain.initLoggers loggers configured in \" + (System.currentTimeMillis() - start) + \" ms\");\n    }\n    catch (IOException e) {\n      System.err.println(\"Failed to configure logging: \");\n      //noinspection UseOfSystemOutOrSystemErr\n      e.printStackTrace(System.err);\n    }\n\n    Logger.setFactory(MyLoggerFactory.class);\n    InternalLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());\n    System.out.println(\"BuildMain.initLoggers finished in \" + (System.currentTimeMillis() - start) + \" ms\");\n  }","id":5293,"modified_method":"private static void initLoggers() {\n    try {\n      final String logDir = System.getProperty(GlobalOptions.LOG_DIR_OPTION, null);\n      final File configFile = logDir != null? new File(logDir, LOG_CONFIG_FILE_NAME) : new File(LOG_CONFIG_FILE_NAME);\n      ensureLogConfigExists(configFile);\n      String text = FileUtil.loadFile(configFile);\n      final String logFile = logDir != null? new File(logDir, LOG_FILE_NAME).getAbsolutePath() : LOG_FILE_NAME;\n      text = StringUtil.replace(text, LOG_FILE_MACRO, StringUtil.replace(logFile, \"\\\\\", \"\\\\\\\\\"));\n      PropertyConfigurator.configure(new ByteArrayInputStream(text.getBytes(\"UTF-8\")));\n    }\n    catch (IOException e) {\n      System.err.println(\"Failed to configure logging: \");\n      //noinspection UseOfSystemOutOrSystemErr\n      e.printStackTrace(System.err);\n    }\n\n    Logger.setFactory(MyLoggerFactory.class);\n  }","commit_id":"ded141705b73548476381aa5128ec18571a58b64","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getNodeRoleIndex(@NotNull SContainmentLinkId linkId) {\n    // return fqName prefixed with \".\" if we can't find model or name of concept\n    String index = getConceptIndex(linkId.getConceptId());\n    if (index == null) {\n      return MODEL_SEPARATOR_CHAR + linkId.serialize();\n    }\n    return index + MODEL_SEPARATOR_CHAR + linkId.getContainmentLinkId();\n  }","id":5294,"modified_method":"public String getNodeRoleIndex(@NotNull SContainmentLinkId linkId) {\n    return getConceptIndex(linkId.getConceptId()) + MODEL_SEPARATOR_CHAR + linkId.getContainmentLinkId();\n  }","commit_id":"530c1c348308c38d26e5ece3f68fc8f807e8624d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getReferenceRoleIndex(@NotNull SReferenceLinkId linkId) {\n    // return fqName prefixed with \".\" if we can't find model or name of concept\n    String index = getConceptIndex(linkId.getConceptId());\n    if (index == null) {\n      return MODEL_SEPARATOR_CHAR + linkId.serialize();\n    }\n    return index + MODEL_SEPARATOR_CHAR + linkId.getReferenceLinkId();\n  }","id":5295,"modified_method":"public String getReferenceRoleIndex(@NotNull SReferenceLinkId linkId) {\n    return getConceptIndex(linkId.getConceptId()) + MODEL_SEPARATOR_CHAR + linkId.getReferenceLinkId();\n  }","commit_id":"530c1c348308c38d26e5ece3f68fc8f807e8624d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getPropertyIndex(@NotNull SPropertyId prop) {\n    // return fqName prefixed with \".\" if we can't find model or name of concept\n    String index = getConceptIndex(prop.getConceptId());\n    if (index == null) {\n      return MODEL_SEPARATOR_CHAR + prop.serialize();\n    }\n    return index + MODEL_SEPARATOR_CHAR + prop.getPropertyId();\n  }","id":5296,"modified_method":"public String getPropertyIndex(@NotNull SPropertyId prop) {\n    return getConceptIndex(prop.getConceptId()) + MODEL_SEPARATOR_CHAR + prop.getPropertyId();\n  }","commit_id":"530c1c348308c38d26e5ece3f68fc8f807e8624d","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Tests if the Comet connection is closed if the Tomcat connector is\n     * stopped.\n     */\n    @Test\n    public void testCometConnectorStop() throws Exception {\n\n        if (!isCometSupported()) {\n            log.info(\"This test is skipped, because this connector does not support Comet.\");\n            return;\n        }\n\n        // Setup Tomcat instance\n        SimpleCometServlet servlet = new SimpleCometServlet();\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", servlet);\n        root.addServletMapping(\"/\", \"comet\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(10000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/ HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        PingWriterThread writeThread = new PingWriterThread(100, os);\n        writeThread.start();\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Allow the first couple of PING messages to be written\n        Thread.sleep(3000);\n\n        tomcat.getConnector().stop();\n\n        int count = 0;\n        // Wait for the read thread to stop\n        while (readThread.isAlive() && count < 50) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        // Wait for the write thread to stop\n        count = 0;\n        while (writeThread.isAlive() && count < 50) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        // Destroy the connector once the executor has sent the end event\n        tomcat.getConnector().destroy();\n\n        String[] response = readThread.getResponse().split(\"\\r\\n\");\n        String lastMessage = \"\";\n        String lastResponseLine = \"\";\n        for (int i = response.length; --i >= 0;) {\n            lastMessage = response[i];\n            if (lastMessage.startsWith(\"Client:\")) {\n                break;\n            }\n        }\n        for (int i = response.length; --i >= 0;) {\n            lastResponseLine = response[i];\n            if (lastResponseLine.length() > 0) {\n                break;\n            }\n        }\n        StringBuilder status = new StringBuilder();\n        // Expected, but is not 100% reliable:\n        // WriteThread exception: java.net.SocketException\n        // ReaderThread exception: null\n        // Last message: [Client: END]\n        // Last response line: [0] (empty chunk)\n        // Last comet event: [END]\n        // END event occurred: [true]\n        status.append(\"Status:\");\n        status.append(\"\\nWriterThread exception: \" + writeThread.getException());\n        status.append(\"\\nReaderThread exception: \" + readThread.getException());\n        status.append(\"\\nLast message: [\" + lastMessage + \"]\");\n        status.append(\"\\nLast response line: [\" + lastResponseLine + \"]\");\n        status.append(\"\\nLast comet event: [\" + servlet.getLastEvent() + \"]\");\n        status.append(\"\\nEND event occurred: [\" + servlet.getEndEventOccurred() + \"]\");\n        if (writeThread.getException() == null\n                || !lastMessage.contains(\"Client: END\")\n                || !EventType.END.equals(servlet.getLastEvent())) {\n            log.error(status);\n        } else {\n            log.info(status);\n        }\n        assertTrue(\"Comet END event not received\",\n                EventType.END.equals(servlet.getLastEvent()));\n    }","id":5297,"modified_method":"/**\n     * Tests if the Comet connection is closed if the Tomcat connector is\n     * stopped.\n     */\n    @Test\n    public void testCometConnectorStop() throws Exception {\n        Assume.assumeTrue(\n                \"This test is skipped, because this connector does not support Comet.\",\n                isCometSupported());\n\n        // Setup Tomcat instance\n        SimpleCometServlet servlet = new SimpleCometServlet();\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", servlet);\n        root.addServletMapping(\"/\", \"comet\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(10000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/ HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        PingWriterThread writeThread = new PingWriterThread(100, os);\n        writeThread.start();\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Allow the first couple of PING messages to be written\n        Thread.sleep(3000);\n\n        tomcat.getConnector().stop();\n\n        int count = 0;\n        // Wait for the read thread to stop\n        while (readThread.isAlive() && count < 50) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        // Wait for the write thread to stop\n        count = 0;\n        while (writeThread.isAlive() && count < 50) {\n            Thread.sleep(100);\n            count ++;\n        }\n\n        // Destroy the connector once the executor has sent the end event\n        tomcat.getConnector().destroy();\n\n        String[] response = readThread.getResponse().split(\"\\r\\n\");\n        String lastMessage = \"\";\n        String lastResponseLine = \"\";\n        for (int i = response.length; --i >= 0;) {\n            lastMessage = response[i];\n            if (lastMessage.startsWith(\"Client:\")) {\n                break;\n            }\n        }\n        for (int i = response.length; --i >= 0;) {\n            lastResponseLine = response[i];\n            if (lastResponseLine.length() > 0) {\n                break;\n            }\n        }\n        StringBuilder status = new StringBuilder();\n        // Expected, but is not 100% reliable:\n        // WriteThread exception: java.net.SocketException\n        // ReaderThread exception: null\n        // Last message: [Client: END]\n        // Last response line: [0] (empty chunk)\n        // Last comet event: [END]\n        // END event occurred: [true]\n        status.append(\"Status:\");\n        status.append(\"\\nWriterThread exception: \" + writeThread.getException());\n        status.append(\"\\nReaderThread exception: \" + readThread.getException());\n        status.append(\"\\nLast message: [\" + lastMessage + \"]\");\n        status.append(\"\\nLast response line: [\" + lastResponseLine + \"]\");\n        status.append(\"\\nLast comet event: [\" + servlet.getLastEvent() + \"]\");\n        status.append(\"\\nEND event occurred: [\" + servlet.getEndEventOccurred() + \"]\");\n        if (writeThread.getException() == null\n                || !lastMessage.contains(\"Client: END\")\n                || !EventType.END.equals(servlet.getLastEvent())) {\n            log.error(status);\n        } else {\n            log.info(status);\n        }\n        assertTrue(\"Comet END event not received\",\n                EventType.END.equals(servlet.getLastEvent()));\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"private boolean isCometSupported() {\n        String protocol =\n            getTomcatInstance().getConnector().getProtocolHandlerClassName();\n        if (protocol.indexOf(\"Nio\") == -1 && protocol.indexOf(\"Apr\") == -1) {\n            return false;\n        } else {\n            return true;\n        }\n    }","id":5298,"modified_method":"private boolean isCometSupported() {\n        String protocol =\n            getTomcatInstance().getConnector().getProtocolHandlerClassName();\n        return (protocol.contains(\"Nio\") || protocol.contains(\"Apr\"));\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testAsyncClose() throws Exception {\n\n        if (!isCometSupported()) {\n            log.info(\"This test is skipped, because this connector does not support Comet.\");\n            return;\n        }\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        root.getPipeline().addValve(new AsyncCometCloseValve());\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"0\\r\\n\\r\\n\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Send a standard HTTP request on the same connection\n        requestLine = \"GET http://localhost:\" + getPort() +\n                \"/hello HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        // Check for the expected response\n        count = 0;\n        while (count < 10 && !readThread.getResponse().contains(\n                HelloWorldServlet.RESPONSE_TEXT)) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Non-comet request did not complete\");\n        }\n\n        readThread.join();\n        os.close();\n        is.close();\n    }","id":5299,"modified_method":"@Test\n    public void testAsyncClose() throws Exception {\n        Assume.assumeTrue(\n                \"This test is skipped, because this connector does not support Comet.\",\n                isCometSupported());\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        root.getPipeline().addValve(new AsyncCometCloseValve());\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"0\\r\\n\\r\\n\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Send a standard HTTP request on the same connection\n        requestLine = \"GET http://localhost:\" + getPort() +\n                \"/hello HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        // Check for the expected response\n        count = 0;\n        while (count < 10 && !readThread.getResponse().contains(\n                HelloWorldServlet.RESPONSE_TEXT)) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Non-comet request did not complete\");\n        }\n\n        readThread.join();\n        os.close();\n        is.close();\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"private void doSimpleCometTest(String initParam) throws Exception {\n        if (!isCometSupported()) {\n            log.info(\"This test is skipped, because this connector does not support Comet.\");\n            return;\n        }\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Wrapper w = Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n        if (initParam != null) {\n            w.addInitParameter(initParam, \"true\");\n        }\n        root.addServletMapping(\"/\", \"comet\");\n\n        TesterAccessLogValve alv = new TesterAccessLogValve();\n        root.getPipeline().addValve(alv);\n\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(60000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/ HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        PingWriterThread writeThread = new PingWriterThread(4, os);\n        writeThread.start();\n\n        socket.setSoTimeout(25000);\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n        readThread.join();\n        os.close();\n        is.close();\n\n        String[] response = readThread.getResponse().split(\"\\r\\n\");\n        if (initParam == null) {\n            // Normal response expected\n            // Validate response\n            assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n            assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n            assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n            assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n            assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n            assertTrue(response[5].startsWith(\"Date: \"));\n            assertEquals(\"\", response[6]);\n            assertEquals(\"7\", response[7]);\n            assertEquals(\"BEGIN\", response[8]);\n            assertEquals(\"\", response[9]);\n            assertEquals(\"17\", response[10]);\n            assertEquals(\"Client: READ: 4 bytes\", response[11]);\n            assertEquals(\"\", response[12]);\n            assertEquals(\"17\", response[13]);\n            assertEquals(\"Client: READ: 4 bytes\", response[14]);\n            assertEquals(\"\", response[15]);\n            assertEquals(\"17\", response[16]);\n            assertEquals(\"Client: READ: 4 bytes\", response[17]);\n            assertEquals(\"\", response[18]);\n            assertEquals(\"17\", response[19]);\n            assertEquals(\"Client: READ: 4 bytes\", response[20]);\n            assertEquals(\"\", response[21]);\n            assertEquals(\"d\", response[22]);\n            assertEquals(\"Client: END\", response[23]);\n            assertEquals(\"\", response[24]);\n            assertEquals(\"0\", response[25]);\n            // Expect 26 lines\n            assertEquals(26, response.length);\n        } else {\n            // Failure expected only expected for the fail on begin\n            // Failure at any later stage and the response headers (including\n            // the 200 response code will already have been sent to the client\n            if (SimpleCometServlet.FAIL_ON_BEGIN.equals(initParam)) {\n                assertEquals(\"HTTP/1.1 500 Internal Server Error\", response[0]);\n                alv.validateAccessLog(1, 500, 0, 1000);\n            } else {\n                assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n                alv.validateAccessLog(1, 200, 0, 5000);\n            }\n\n        }\n    }","id":5300,"modified_method":"private void doSimpleCometTest(String initParam) throws Exception {\n        Assume.assumeTrue(\n                \"This test is skipped, because this connector does not support Comet.\",\n                isCometSupported());\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Wrapper w = Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n        if (initParam != null) {\n            w.addInitParameter(initParam, \"true\");\n        }\n        root.addServletMapping(\"/\", \"comet\");\n\n        TesterAccessLogValve alv = new TesterAccessLogValve();\n        root.getPipeline().addValve(alv);\n\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(60000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/ HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        PingWriterThread writeThread = new PingWriterThread(4, os);\n        writeThread.start();\n\n        socket.setSoTimeout(25000);\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n        readThread.join();\n        os.close();\n        is.close();\n\n        String[] response = readThread.getResponse().split(\"\\r\\n\");\n        if (initParam == null) {\n            // Normal response expected\n            // Validate response\n            assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n            assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n            assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n            assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n            assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n            assertTrue(response[5].startsWith(\"Date: \"));\n            assertEquals(\"\", response[6]);\n            assertEquals(\"7\", response[7]);\n            assertEquals(\"BEGIN\", response[8]);\n            assertEquals(\"\", response[9]);\n            assertEquals(\"17\", response[10]);\n            assertEquals(\"Client: READ: 4 bytes\", response[11]);\n            assertEquals(\"\", response[12]);\n            assertEquals(\"17\", response[13]);\n            assertEquals(\"Client: READ: 4 bytes\", response[14]);\n            assertEquals(\"\", response[15]);\n            assertEquals(\"17\", response[16]);\n            assertEquals(\"Client: READ: 4 bytes\", response[17]);\n            assertEquals(\"\", response[18]);\n            assertEquals(\"17\", response[19]);\n            assertEquals(\"Client: READ: 4 bytes\", response[20]);\n            assertEquals(\"\", response[21]);\n            assertEquals(\"d\", response[22]);\n            assertEquals(\"Client: END\", response[23]);\n            assertEquals(\"\", response[24]);\n            assertEquals(\"0\", response[25]);\n            // Expect 26 lines\n            assertEquals(26, response.length);\n        } else {\n            // Failure expected only expected for the fail on begin\n            // Failure at any later stage and the response headers (including\n            // the 200 response code will already have been sent to the client\n            if (SimpleCometServlet.FAIL_ON_BEGIN.equals(initParam)) {\n                assertEquals(\"HTTP/1.1 500 Internal Server Error\", response[0]);\n                alv.validateAccessLog(1, 500, 0, 1000);\n            } else {\n                assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n                alv.validateAccessLog(1, 200, 0, 5000);\n            }\n\n        }\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testSyncClose() throws Exception {\n\n        if (!isCometSupported()) {\n            log.info(\"This test is skipped, because this connector does not support Comet.\");\n            return;\n        }\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new CometCloseServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n        // Don't send any data\n        os.write(\"0\\r\\n\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"0\\r\\n\\r\\n\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        Assert.assertTrue(readThread.getResponse().contains(\"2\\r\\nOK\"));\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Send a standard HTTP request on the same connection\n        requestLine = \"GET http://localhost:\" + getPort() +\n                \"/hello HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"connection: close\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        // Check for the expected response\n        count = 0;\n        while (count < 10 && !readThread.getResponse().contains(\n                HelloWorldServlet.RESPONSE_TEXT)) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Non-comet request did not complete\");\n        }\n\n        readThread.join();\n        os.close();\n        is.close();\n    }","id":5301,"modified_method":"@Test\n    public void testSyncClose() throws Exception {\n        Assume.assumeTrue(\n                \"This test is skipped, because this connector does not support Comet.\",\n                isCometSupported());\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new CometCloseServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n        // Don't send any data\n        os.write(\"0\\r\\n\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"0\\r\\n\\r\\n\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        Assert.assertTrue(readThread.getResponse().contains(\"2\\r\\nOK\"));\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Send a standard HTTP request on the same connection\n        requestLine = \"GET http://localhost:\" + getPort() +\n                \"/hello HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"connection: close\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n\n        // Check for the expected response\n        count = 0;\n        while (count < 10 && !readThread.getResponse().contains(\n                HelloWorldServlet.RESPONSE_TEXT)) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Non-comet request did not complete\");\n        }\n\n        readThread.join();\n        os.close();\n        is.close();\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testConnectionClose() throws Exception {\n\n        if (!isCometSupported()) {\n            log.info(\"This test is skipped, because this connector does not support Comet.\");\n            return;\n        }\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new ConnectionCloseServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n        // Don't send any data\n        os.write(\"0\\r\\n\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"OK\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Read thread should have terminated cleanly when the server closed the\n        // socket\n        Assert.assertFalse(readThread.isAlive());\n        Assert.assertNull(readThread.getException());\n\n        os.close();\n        is.close();\n    }","id":5302,"modified_method":"@Test\n    public void testConnectionClose() throws Exception {\n        Assume.assumeTrue(\n                \"This test is skipped, because this connector does not support Comet.\",\n                isCometSupported());\n\n        // Setup Tomcat instance\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n        Tomcat.addServlet(root, \"comet\", new ConnectionCloseServlet());\n        root.addServletMapping(\"/comet\", \"comet\");\n        Tomcat.addServlet(root, \"hello\", new HelloWorldServlet());\n        root.addServletMapping(\"/hello\", \"hello\");\n        tomcat.getConnector().setProperty(\"connectionTimeout\", \"5000\");\n        tomcat.start();\n\n        // Create connection to Comet servlet\n        final Socket socket =\n            SocketFactory.getDefault().createSocket(\"localhost\", getPort());\n        socket.setSoTimeout(5000);\n\n        final OutputStream os = socket.getOutputStream();\n        String requestLine = \"POST http://localhost:\" + getPort() +\n                \"/comet HTTP/1.1\\r\\n\";\n        os.write(requestLine.getBytes());\n        os.write(\"transfer-encoding: chunked\\r\\n\".getBytes());\n        os.write(\"\\r\\n\".getBytes());\n        // Don't send any data\n        os.write(\"0\\r\\n\\r\\n\".getBytes());\n\n        InputStream is = socket.getInputStream();\n        ResponseReaderThread readThread = new ResponseReaderThread(is);\n        readThread.start();\n\n        // Wait for the comet request/response to finish\n        int count = 0;\n        while (count < 10 && !readThread.getResponse().endsWith(\"OK\")) {\n            Thread.sleep(500);\n            count++;\n        }\n\n        if (count == 10) {\n            fail(\"Comet request did not complete\");\n        }\n\n        // Read thread should have terminated cleanly when the server closed the\n        // socket\n        Assert.assertFalse(readThread.isAlive());\n        Assert.assertNull(readThread.getException());\n\n        os.close();\n        is.close();\n    }","commit_id":"9a05595001bde5f82873c8dd637387b315f867ee","url":"https://github.com/apache/tomcat"},{"original_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        Reader reader;\n        try {\n            reader = new InputStreamReader(resource.getInputStream());\n        } catch (IOException e) {\n            throw CASTOR_EXCEPTION_TRANSLATOR.translate(\"opening XML configuration file for resource '\" + resource + \"': \" + e, e);\n        }\n    \n        V config;\n        try {\n            K castorConfig = CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, reader);\n            config = translateConfig(castorConfig);\n        } finally {\n            IOUtils.closeQuietly(reader);\n        }\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","id":5303,"modified_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        V config = translateConfig(CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, resource));\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","commit_id":"46d4b020d61bdb6d182b6387bebf9924b47b94a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        Reader reader;\n        try {\n            reader = new InputStreamReader(resource.getInputStream());\n        } catch (IOException e) {\n            throw CASTOR_EXCEPTION_TRANSLATOR.translate(\"opening XML configuration file for resource '\" + resource + \"': \" + e, e);\n        }\n    \n        V config;\n        try {\n            K castorConfig = CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, reader);\n            config = translateConfig(castorConfig);\n        } finally {\n            IOUtils.closeQuietly(reader);\n        }\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","id":5304,"modified_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        V config = translateConfig(CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, resource));\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","commit_id":"fdf401252988db33ec6652719bdd81453d371f6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        Reader reader;\n        try {\n            reader = new InputStreamReader(resource.getInputStream());\n        } catch (IOException e) {\n            throw CASTOR_EXCEPTION_TRANSLATOR.translate(\"opening XML configuration file for resource '\" + resource + \"': \" + e, e);\n        }\n    \n        V config;\n        try {\n            K castorConfig = CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, reader);\n            config = translateConfig(castorConfig);\n        } finally {\n            IOUtils.closeQuietly(reader);\n        }\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","id":5305,"modified_method":"protected V loadConfig(Resource resource) {\n        long startTime = System.currentTimeMillis();\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Loading \" + m_description + \" configuration from \" + resource);\n        }\n\n        V config = translateConfig(CastorUtils.unmarshalWithTranslatedExceptions(m_castorClass, resource));\n        \n        long endTime = System.currentTimeMillis();\n        log().info(createLoadedLogMessage(config, (endTime - startTime)));\n        \n        return config;\n    }","commit_id":"1f670f4dad3407cd30d6ac30032ea200e742ee96","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void computeConcordance(RefMetaDataTracker tracker, ReferenceContext ref) {\n        Variation call1 = (Variation)tracker.lookup(\"callset1\", null);\n        Variation call2 = (Variation)tracker.lookup(\"callset2\", null);\n\n        // the only reason they would be null is a lack of coverage\n        if ( call1 == null || call2 == null ) {\n            if ( call1 != null && call1.isSNP() && call1.getNegLog10PError() >= LOD )\n                printVariant(coverageVar1Writer, call1);\n            else if ( call2 != null && call2.isSNP() && call2.getNegLog10PError() >= LOD )\n                printVariant(coverageVar2Writer, call2);\n            return;\n        }\n        if (!(call1 instanceof VariantBackedByGenotype) || !(call2 instanceof VariantBackedByGenotype))\n                    throw new StingException(\"Both parents ROD tracks must be backed by genotype data. Ensure that your rod(s) contain genotyping information\");\n\n        double bestVsRef1 = call1.getNegLog10PError();\n        double bestVsRef2 = call2.getNegLog10PError();\n        //double bestVsNext1 = call1.getConsensusConfidence();\n        //double bestVsNext2 = call2.getConsensusConfidence();\n        String genotype1 = ((VariantBackedByGenotype)call1).getCalledGenotype().getBases();\n        String genotype2 = ((VariantBackedByGenotype)call2).getCalledGenotype().getBases();\n\n        // are they both variant SNPs?\n        if ( call1.isSNP() && call2.isSNP() ) {\n\n            // are they both confident calls?\n            if ( bestVsRef1 >= LOD && bestVsRef2 >= LOD ) {\n                // same genotype\n                if ( genotype1.equals(genotype2) )\n                    printVariant(sameVarWriter, call1);\n\n                // same allele, different genotype\n                else if ( sameVariantAllele(genotype1, genotype2, ref.getBase()) )\n                    printVariant(sameAlleleWriter, call1);\n\n                // different variant allele\n                else\n                    printVariant(diffAlleleWriter, call1);\n            }\n\n            // confident only when combined\n            else if ( bestVsRef1 < LOD && bestVsRef2 < LOD && bestVsRef1 + bestVsRef2 >= LOD ) {\n                printVariant(comboVarWriter, call1);\n            }\n\n            // only one is confident variant\n            else if ( (bestVsRef1 < LOD && bestVsRef2 >= LOD) || (bestVsRef1 >= LOD && bestVsRef2 < LOD) ) {\n                printVariant(oneVarWriter, call1);                \n            }\n        }\n\n        // one is variant and the other is ref\n        else if ( call1.isSNP() && call2.isReference() && bestVsRef1 >= LOD )\n             printVariant(refVsVar1Writer, call1);\n        else if ( call2.isSNP() && call1.isReference() && bestVsRef2 >= LOD )\n            printVariant(refVsVar2Writer, call2);\n    }","id":5306,"modified_method":"public void computeConcordance(RefMetaDataTracker tracker, ReferenceContext ref) {\n        RODRecordList<ReferenceOrderedDatum> call1List = tracker.getTrackData(\"callset1\", null);\n        RODRecordList<ReferenceOrderedDatum> call2List = tracker.getTrackData(\"callset2\", null);\n        Variation call1 = (call1List == null ? null : (Variation)call1List.getRecords().get(0));\n        Variation call2 = (call2List == null ? null : (Variation)call2List.getRecords().get(0));\n\n        // the only reason they would be null is a lack of coverage\n        if ( call1 == null || call2 == null ) {\n            if ( call1 != null && call1.isSNP() && call1.getNegLog10PError() >= LOD )\n                printVariant(coverageVar1Writer, call1);\n            else if ( call2 != null && call2.isSNP() && call2.getNegLog10PError() >= LOD )\n                printVariant(coverageVar2Writer, call2);\n            return;\n        }\n        if (!(call1 instanceof VariantBackedByGenotype) || !(call2 instanceof VariantBackedByGenotype))\n                    throw new StingException(\"Both parents ROD tracks must be backed by genotype data. Ensure that your rod(s) contain genotyping information\");\n\n        double bestVsRef1 = call1.getNegLog10PError();\n        double bestVsRef2 = call2.getNegLog10PError();\n        //double bestVsNext1 = call1.getConsensusConfidence();\n        //double bestVsNext2 = call2.getConsensusConfidence();\n        String genotype1 = ((VariantBackedByGenotype)call1).getCalledGenotype().getBases();\n        String genotype2 = ((VariantBackedByGenotype)call2).getCalledGenotype().getBases();\n\n        // are they both variant SNPs?\n        if ( call1.isSNP() && call2.isSNP() ) {\n\n            // are they both confident calls?\n            if ( bestVsRef1 >= LOD && bestVsRef2 >= LOD ) {\n                // same genotype\n                if ( genotype1.equals(genotype2) )\n                    printVariant(sameVarWriter, call1);\n\n                // same allele, different genotype\n                else if ( sameVariantAllele(genotype1, genotype2, ref.getBase()) )\n                    printVariant(sameAlleleWriter, call1);\n\n                // different variant allele\n                else\n                    printVariant(diffAlleleWriter, call1);\n            }\n\n            // confident only when combined\n            else if ( bestVsRef1 < LOD && bestVsRef2 < LOD && bestVsRef1 + bestVsRef2 >= LOD ) {\n                printVariant(comboVarWriter, call1);\n            }\n\n            // only one is confident variant\n            else if ( (bestVsRef1 < LOD && bestVsRef2 >= LOD) || (bestVsRef1 >= LOD && bestVsRef2 < LOD) ) {\n                printVariant(oneVarWriter, call1);                \n            }\n        }\n\n        // one is variant and the other is ref\n        else if ( call1.isSNP() && call2.isReference() && bestVsRef1 >= LOD )\n             printVariant(refVsVar1Writer, call1);\n        else if ( call2.isSNP() && call1.isReference() && bestVsRef2 >= LOD )\n            printVariant(refVsVar2Writer, call2);\n    }","commit_id":"e96b1791abd3b65c939b214730cd6999cb2464f8","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void computeConcordance(RefMetaDataTracker tracker, ReferenceContext ref) {\n        Variation call1 = (Variation)tracker.lookup(\"callset1\", null);\n        Variation call2 = (Variation)tracker.lookup(\"callset2\", null);\n\n        if ( call1 == null && call2 == null )\n            return;\n\n        // union\n        printVariant(union_writer, call1 != null ? call1 : call2);\n\n        // set 1 only\n        if ( call2 == null )\n            printVariant(set1_writer, call1);\n\n        // set 2 only\n        else if ( call1 == null )\n            printVariant(set2_writer, call2);\n\n        // intersection (concordant)\n        else if ( call1.getAlternativeBaseForSNP() == call2.getAlternativeBaseForSNP())\n            printVariant(intersect_writer, call1);\n\n        // intersection (discordant)\n        else\n            printVariant(discord_writer, call1);\n    }","id":5307,"modified_method":"public void computeConcordance(RefMetaDataTracker tracker, ReferenceContext ref) {\n        RODRecordList<ReferenceOrderedDatum> call1List = tracker.getTrackData(\"callset1\", null);\n        RODRecordList<ReferenceOrderedDatum> call2List = tracker.getTrackData(\"callset2\", null);\n        Variation call1 = (call1List == null ? null : (Variation)call1List.getRecords().get(0));\n        Variation call2 = (call2List == null ? null : (Variation)call2List.getRecords().get(0));\n\n        if ( call1 == null && call2 == null )\n            return;\n\n        // union\n        printVariant(union_writer, call1 != null ? call1 : call2);\n\n        // set 1 only\n        if ( call2 == null )\n            printVariant(set1_writer, call1);\n\n        // set 2 only\n        else if ( call1 == null )\n            printVariant(set2_writer, call2);\n\n        // we can't really deal with multi-allelic variants\n        else if ( call1.isBiallelic() && call2.isBiallelic() ) {\n            // intersection (concordant)\n            if ( call1.getAlternativeBaseForSNP() == call2.getAlternativeBaseForSNP() )\n                printVariant(intersect_writer, call1);\n            // intersection (discordant)\n            else\n                printVariant(discord_writer, call1);\n        }\n    }","commit_id":"e96b1791abd3b65c939b214730cd6999cb2464f8","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      return new AbsoluteLayoutOperation(myContainer, context);\n    }\n    if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    return null;\n  }","id":5308,"modified_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      return new AbsoluteLayoutOperation(myContainer, context);\n    }\n    if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      return new FrameLayoutOperation(myContainer, context);\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    else if (context.is(LayoutMarginOperation.TYPE)) {\n      return new LayoutMarginOperation(context);\n    }\n    return null;\n  }","id":5309,"modified_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      return new FrameLayoutOperation(myContainer, context);\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    else if (context.is(LayoutMarginOperation.TYPE)) {\n      return new LayoutMarginOperation(context);\n    }\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      return new LinearLayoutOperation(myContainer, context, isHorizontal());\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    else if (context.is(LayoutMarginOperation.TYPE)) {\n      return new LayoutMarginOperation(context);\n    }\n    else if (context.is(LayoutWeightOperation.TYPE)) {\n      return new LayoutWeightOperation(context);\n    }\n    return null;\n  }","id":5310,"modified_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      return new LinearLayoutOperation(myContainer, context, isHorizontal());\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    else if (context.is(LayoutMarginOperation.TYPE)) {\n      return new LayoutMarginOperation(context);\n    }\n    else if (context.is(LayoutWeightOperation.TYPE)) {\n      return new LayoutWeightOperation(context);\n    }\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (myContainer.getChildren().isEmpty() &&\n        (context.isCreate() || context.isPaste() || context.isAdd()) &&\n        context.getComponents().size() == 1) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      return new DropToOperation(myContainer, context);\n    }\n\n    return null;\n  }","id":5311,"modified_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (myContainer.getChildren().isEmpty() &&\n        (context.isCreate() || context.isPaste() || context.isAdd()) &&\n        context.getComponents().size() == 1) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      return new DropToOperation(myContainer, context);\n    }\n\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      // XXX\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    return null;\n  }","id":5312,"modified_method":"@Override\n  public EditOperation processChildOperation(OperationContext context) {\n    if (context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      // XXX\n    }\n    else if (context.is(ResizeOperation.TYPE)) {\n      return new ResizeOperation(context);\n    }\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public EditOperation processChildOperation(OperationContext context) {\n    if ((context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) && checkChildOperation(context)) {\n      if (context.isTree()) {\n        return new TreeDropToOperation(myContainer, context);\n      }\n      return new DropToOperation(myContainer, context);\n    }\n\n    return null;\n  }","id":5313,"modified_method":"public EditOperation processChildOperation(OperationContext context) {\n    if ((context.isCreate() || context.isPaste() || context.isAdd() || context.isMove()) && checkChildOperation(context)) {\n      if (context.isTree()) {\n        if (TreeEditOperation.isTarget(myContainer, context)) {\n          return new TreeDropToOperation(myContainer, context);\n        }\n        return null;\n      }\n      return new DropToOperation(myContainer, context);\n    }\n    return null;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void showFeedback() {\n    Point location = myContext.getLocation();\n    RadComponent target = myContext.getArea().findTarget(location.x, location.y, null);\n    FeedbackTreeLayer layer = myContext.getArea().getFeedbackTreeLayer();\n\n    if (myContainer == target) {\n      layer.mark(target, FeedbackTreeLayer.INSERT_SELECTION);\n    }\n    else if (target != null && isChildren(target)) {\n      layer.mark(target,\n                 layer.isBeforeLocation(target, location.x, location.y) ?\n                 FeedbackTreeLayer.INSERT_BEFORE : FeedbackTreeLayer.INSERT_AFTER);\n    }\n    else {\n      eraseFeedback();\n    }\n  }","id":5314,"modified_method":"@Override\n  public void showFeedback() {\n    Point location = myContext.getLocation();\n    FeedbackTreeLayer layer = myContext.getArea().getFeedbackTreeLayer();\n\n    myTarget = myContext.getArea().findTarget(location.x, location.y, null);\n\n    if (myContainer == myTarget) {\n      layer.mark(myTarget, FeedbackTreeLayer.INSERT_SELECTION);\n    }\n    else if (myTarget != null && isChildren(myTarget)) {\n      myInsertBefore = layer.isBeforeLocation(myTarget, location.x, location.y);\n      layer.mark(myTarget, myInsertBefore ? FeedbackTreeLayer.INSERT_BEFORE : FeedbackTreeLayer.INSERT_AFTER);\n    }\n    else {\n      myTarget = null;\n      eraseFeedback();\n    }\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void execute() throws Exception {\n    RadComponent reference = getReference();\n    execute(myContainer == reference ? null : reference);\n  }","id":5315,"modified_method":"@Override\n  public void execute() throws Exception {\n    if (myTarget == myContainer) {\n      execute(null);\n    }\n    else if (myInsertBefore) {\n      execute(myTarget);\n    }\n    else {\n      List<RadComponent> children = myContainer.getChildren();\n      int index = children.indexOf(myTarget) + 1;\n      if (index < children.size()) {\n        execute(children.get(index));\n      }\n      else {\n        execute(null);\n      }\n    }\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean canExecute() {\n    RadComponent reference = getReference();\n    if (reference == null) {\n      return false;\n    }\n    return canExecute(myContainer == reference ? null : reference);\n  }","id":5316,"modified_method":"@Override\n  public boolean canExecute() {\n    if (myTarget == null) {\n      return false;\n    }\n    if (myContext.isMove() && myTarget != myContainer) {\n      if (myComponents.contains(myTarget)) {\n        return false;\n      }\n\n      List<RadComponent> children = myContainer.getChildren();\n      int index = children.indexOf(myTarget) + (myInsertBefore ? -1 : 1);\n      if (0 <= index && index < children.size()) {\n        return !myComponents.contains(children.get(index));\n      }\n    }\n    return true;\n  }","commit_id":"eca2163961ca281244fd2ce33b4c8e54669940fc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void createJmsQueue(String queueName, String jndiName) {\n        ModelNode address = getServerAddress()\n                .add(\"jms-queue\", queueName);\n        ModelNode attributes = new ModelNode();\n        attributes.get(\"entries\").add(jndiName);\n        executeOperation(address, ADD, attributes);\n    }","id":5317,"modified_method":"@Override\n    public void createJmsQueue(String queueName, String jndiName) {\n        createJmsQueue(queueName, jndiName, new ModelNode());\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void createJmsTopic(String topicName, String jndiName) {\n        ModelNode address = getServerAddress()\n                .add(\"jms-topic\", topicName);\n        ModelNode attributes = new ModelNode();\n        attributes.get(\"entries\").add(jndiName);\n        executeOperation(address, ADD, attributes);\n    }","id":5318,"modified_method":"@Override\n    public void createJmsTopic(String topicName, String jndiName) {\n        createJmsTopic(topicName, jndiName, new ModelNode());\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void stop(final StopContext context) {\n        try {\n            if (server != null) {\n                for (SocketBinding binding : socketBindings.values()) {\n                    binding.getSocketBindings().getNamedRegistry().unregisterBinding(binding.getName());\n                }\n                for (SocketBinding binding : groupBindings.values()) {\n                    binding.getSocketBindings().getNamedRegistry().unregisterBinding(binding.getName());\n                }\n\n                // the server is actually stopped by the JMS Service\n            }\n            pathConfig.closeCallbacks(pathManager.getValue());\n        } catch (Exception e) {\n            throw MessagingLogger.ROOT_LOGGER.failedToShutdownServer(e, \"Artemis\");\n        }\n    }","id":5319,"modified_method":"public synchronized void stop(final StopContext context) {\n        try {\n            if (server != null) {\n                for (SocketBinding binding : socketBindings.values()) {\n                    if (binding != null) {\n                        binding.getSocketBindings().getNamedRegistry().unregisterBinding(binding.getName());\n                    }\n                }\n                for (SocketBinding binding : groupBindings.values()) {\n                    if (binding != null) {\n                        binding.getSocketBindings().getNamedRegistry().unregisterBinding(binding.getName());\n                    }\n                }\n\n                // the server is actually stopped by the JMS Service\n            }\n            pathConfig.closeCallbacks(pathManager.getValue());\n        } catch (Exception e) {\n            throw MessagingLogger.ROOT_LOGGER.failedToShutdownServer(e, \"Artemis\");\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException {\n\n        final ModelNode entries = Common.ENTRIES.resolveModelAttribute(context, model);\n        final String[] jndiBindings = JMSServices.getJndiBindings(entries);\n\n        final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl()\n                .setName(name)\n                .setHA(ActiveMQClient.DEFAULT_HA)\n                .setBindings(jndiBindings);\n\n        config.setHA(HA.resolveModelAttribute(context, model).asBoolean());\n        config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean());\n        config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context, model).asBoolean());\n        config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context, model).asInt());\n        config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model);\n        if (clientId.isDefined()) {\n            config.setClientID(clientId.asString());\n        }\n        config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context, model).asBoolean());\n        config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context, model).asLong());\n        List<String> connectorNames = Common.CONNECTORS.unwrap(context, model);\n        config.setConnectorNames(connectorNames);\n        config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context, model).asInt());\n        config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model);\n        if (discoveryGroupName.isDefined()) {\n            config.setDiscoveryGroupName(discoveryGroupName.asString());\n        }\n\n        config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context, model).asBoolean());\n\n        final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model);\n        if (groupId.isDefined()) {\n            config.setGroupID(groupId.asString());\n        }\n\n        final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model);\n        if (lbcn.isDefined()) {\n            config.setLoadBalancingPolicyClassName(lbcn.asString());\n        }\n        config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong());\n        config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean());\n        config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context, model).asInt());\n        config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context, model).asInt());\n        config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context, model).asLong());\n        config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context, model).asDouble());\n        config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context, model).asBoolean());\n        config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model).asString());\n        JMSFactoryType jmsFactoryType = ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context, model).asString()).getType();\n        config.setFactoryType(jmsFactoryType);\n        return config;\n    }","id":5320,"modified_method":"static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException {\n\n        final List<String> entries = Common.ENTRIES.unwrap(context, model);\n\n        final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl()\n                .setName(name)\n                .setHA(ActiveMQClient.DEFAULT_HA)\n                .setBindings(entries.toArray(new String[entries.size()]));\n\n        config.setHA(HA.resolveModelAttribute(context, model).asBoolean());\n        config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean());\n        config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean());\n        config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context, model).asBoolean());\n        config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context, model).asInt());\n        config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model);\n        if (clientId.isDefined()) {\n            config.setClientID(clientId.asString());\n        }\n        config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context, model).asBoolean());\n        config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context, model).asLong());\n        List<String> connectorNames = Common.CONNECTORS.unwrap(context, model);\n        config.setConnectorNames(connectorNames);\n        config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context, model).asInt());\n        config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model);\n        if (discoveryGroupName.isDefined()) {\n            config.setDiscoveryGroupName(discoveryGroupName.asString());\n        }\n\n        config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context, model).asBoolean());\n\n        final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model);\n        if (groupId.isDefined()) {\n            config.setGroupID(groupId.asString());\n        }\n\n        final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model);\n        if (lbcn.isDefined()) {\n            config.setLoadBalancingPolicyClassName(lbcn.asString());\n        }\n        config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong());\n        config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean());\n        config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context, model).asInt());\n        config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context, model).asInt());\n        config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context, model).asLong());\n        config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context, model).asDouble());\n        config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context, model).asInt());\n        config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context, model).asBoolean());\n        config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model).asString());\n        JMSFactoryType jmsFactoryType = ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context, model).asString()).getType();\n        config.setFactoryType(jmsFactoryType);\n        return config;\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        context.removeService(JMSServices.getConnectionFactoryBaseServiceName(serviceName).append(name));\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyConnectionFactory(name);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }    }","id":5321,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final String name = context.getCurrentAddressValue();\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(context.getCurrentAddress());\n        context.removeService(JMSServices.getConnectionFactoryBaseServiceName(serviceName).append(name));\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyConnectionFactory(name);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) {\n        // TODO:  RE-ADD SERVICES\n    }","id":5322,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        ConnectionFactoryAdd.INSTANCE.performRuntime(context, operation, model);\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        super.performRuntime(context, operation, model);\n\n        PathAddress address = PathAddress.pathAddress(operation.get(OP_ADDR));\n        String activemqServerName = address.getElement(address.size() - 2).getValue();\n        String acceptorName = address.getLastElement().getValue();\n        final ModelNode fullModel = Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));\n\n        launchServices(context, activemqServerName, acceptorName, fullModel);\n    }","id":5323,"modified_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        super.performRuntime(context, operation, model);\n\n        String acceptorName = context.getCurrentAddressValue();\n        String activeMQServerName = context.getCurrentAddress().getParent().getLastElement().getValue();\n        final ModelNode fullModel = Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));\n\n        launchServices(context, activeMQServerName, acceptorName, fullModel);\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"void launchServices(OperationContext context, String activemqServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n        String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n\n        HTTPUpgradeService.installService(context.getServiceTarget(),\n                activemqServerName,\n                acceptorName,\n                httpConnectorName);\n    }","id":5324,"modified_method":"void launchServices(OperationContext context, String activeMQServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n        String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n\n        HTTPUpgradeService.installService(context.getServiceTarget(),\n                activeMQServerName,\n                acceptorName,\n                httpConnectorName);\n\n        boolean upgradeLegacy = HTTPAcceptorDefinition.UPGRADE_LEGACY.resolveModelAttribute(context, model).asBoolean();\n        if (upgradeLegacy) {\n            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context.getServiceTarget(),\n                    activeMQServerName,\n                    acceptorName,\n                    httpConnectorName);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static ChannelListener<StreamConnection> switchToActiveMQCoreProtocol(final ActiveMQServer activeMQServer, final String acceptorName) {\n        return new ChannelListener<StreamConnection>() {\n            @Override\n            public void handleEvent(final StreamConnection connection) {\n                MessagingLogger.ROOT_LOGGER.debugf(\"Switching to %s protocol for %s http-acceptor\", ACTIVEMQ_REMOTING, acceptorName);\n                SocketChannel channel = new WrappingXnioSocketChannel(connection);\n                RemotingService remotingService = activeMQServer.getRemotingService();\n\n                NettyAcceptor acceptor = (NettyAcceptor)remotingService.getAcceptor(acceptorName);\n                acceptor.transfer(channel);\n                connection.getSourceChannel().resumeReads();\n            }\n        };\n    }","id":5325,"modified_method":"private static ChannelListener<StreamConnection> switchToMessagingProtocol(final ActiveMQServer activemqServer, final String acceptorName, final String protocolName) {\n        return new ChannelListener<StreamConnection>() {\n            @Override\n            public void handleEvent(final StreamConnection connection) {\n                MessagingLogger.ROOT_LOGGER.debugf(\"Switching to %s protocol for %s http-acceptor\", protocolName, acceptorName);\n                SocketChannel channel = new WrappingXnioSocketChannel(connection);\n                RemotingService remotingService = activemqServer.getRemotingService();\n\n                NettyAcceptor acceptor = (NettyAcceptor)remotingService.getAcceptor(acceptorName);\n                acceptor.transfer(channel);\n                connection.getSourceChannel().resumeReads();\n            }\n        };\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ListenerRegistry.Listener listenerInfo = listenerRegistry.getValue().getListener(httpListenerName);\n        assert listenerInfo != null;\n        httpUpgradeMetadata = new ListenerRegistry.HttpUpgradeMetadata(ACTIVEMQ_REMOTING, CORE);\n        listenerInfo.addHttpUpgradeMetadata(httpUpgradeMetadata);\n\n        MessagingLogger.ROOT_LOGGER.registeredHTTPUpgradeHandler(ACTIVEMQ_REMOTING, acceptorName);\n        ServiceController<?> activeMQService = context.getController().getServiceContainer().getService(MessagingServices.getActiveMQServiceName(activeMQServerName));\n        ActiveMQServer activeMQServer = ActiveMQServer.class.cast(activeMQService.getValue());\n\n        injectedRegistry.getValue().addProtocol(ACTIVEMQ_REMOTING,\n                switchToActiveMQCoreProtocol(activeMQServer, acceptorName),\n                new SimpleHttpUpgradeHandshake(MAGIC_NUMBER, SEC_ACTIVEMQ_REMOTING_KEY, SEC_ACTIVEMQ_REMOTING_ACCEPT) {\n                    /**\n                     * override the default upgrade handshake to take into account the {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} header\n                     * to select the correct acceptors among all that are configured in ActiveMQ.\n                     *\n                     * If the request does not have this header, the first acceptor will be used.\n                     */\n                    @Override\n                    public boolean handleUpgrade(HttpServerExchange exchange) throws IOException {\n\n                        if (super.handleUpgrade(exchange)) {\n                            final String endpoint = exchange.getRequestHeaders().getFirst(HTTP_UPGRADE_ENDPOINT_PROP_NAME);\n                            if (endpoint == null) {\n                                return true;\n                            } else {\n                                return acceptorName.equals(endpoint);\n                            }\n                        } else {\n                            return false;\n                        }\n                    }\n                });\n    }","id":5326,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ListenerRegistry.Listener listenerInfo = listenerRegistry.getValue().getListener(httpListenerName);\n        assert listenerInfo != null;\n        httpUpgradeMetadata = new ListenerRegistry.HttpUpgradeMetadata(getProtocol(), CORE);\n        listenerInfo.addHttpUpgradeMetadata(httpUpgradeMetadata);\n\n        MessagingLogger.ROOT_LOGGER.registeredHTTPUpgradeHandler(ACTIVEMQ_REMOTING, acceptorName);\n        ServiceController<?> activeMQService = context.getController().getServiceContainer().getService(MessagingServices.getActiveMQServiceName(activeMQServerName));\n        ActiveMQServer activeMQServer = ActiveMQServer.class.cast(activeMQService.getValue());\n\n        injectedRegistry.getValue().addProtocol(getProtocol(),\n                switchToMessagingProtocol(activeMQServer, acceptorName, getProtocol()),\n                new SimpleHttpUpgradeHandshake(MAGIC_NUMBER, getSecKeyHeader(), getSecAcceptHeader()) {\n                    /**\n                     * override the default upgrade handshake to take into account the {@code TransportConstants.HTTP_UPGRADE_ENDPOINT_PROP_NAME} header\n                     * to select the correct acceptors among all that are configured in ActiveMQ.\n                     *\n                     * If the request does not have this header, the first acceptor will be used.\n                     */\n                    @Override\n                    public boolean handleUpgrade(HttpServerExchange exchange) throws IOException {\n\n                        if (super.handleUpgrade(exchange)) {\n                            final String endpoint = exchange.getRequestHeaders().getFirst(HTTP_UPGRADE_ENDPOINT_PROP_NAME);\n                            if (endpoint == null) {\n                                return true;\n                            } else {\n                                return acceptorName.equals(endpoint);\n                            }\n                        } else {\n                            return false;\n                        }\n                    }\n                });\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void stop(StopContext context) {\n        listenerRegistry.getValue().getListener(httpListenerName).removeHttpUpgradeMetadata(httpUpgradeMetadata);\n        httpUpgradeMetadata = null;\n        injectedRegistry.getValue().removeProtocol(ACTIVEMQ_REMOTING);\n    }","id":5327,"modified_method":"@Override\n    public void stop(StopContext context) {\n        listenerRegistry.getValue().getListener(httpListenerName).removeHttpUpgradeMetadata(httpUpgradeMetadata);\n        httpUpgradeMetadata = null;\n        injectedRegistry.getValue().removeProtocol(getProtocol());\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final PathAddress address = PathAddress.pathAddress(operation.get(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n\n        final ModelNode selectorNode = SELECTOR.resolveModelAttribute(context, model);\n        final boolean durable = DURABLE.resolveModelAttribute(context, model).asBoolean();\n\n        final String selector = selectorNode.isDefined() ? selectorNode.asString() : null;\n\n        // Do not pass the JNDI bindings to ActiveMQ but install them directly instead so that the\n        // dependencies from the BinderServices to the JMSQueueService are not broken\n        Service<Queue> queueService = JMSQueueService.installService(name, serviceTarget, serviceName, selector, durable, new String[0]);\n\n        final ModelNode entries = CommonAttributes.DESTINATION_ENTRIES.resolveModelAttribute(context, model);\n        final ServiceName jmsQueueServiceName = JMSServices.getJmsQueueBaseServiceName(serviceName).append(name);\n        final String[] jndiBindings = JMSServices.getJndiBindings(entries);\n        for (String jndiBinding : jndiBindings) {\n            // install a binder service which depends on the JMS queue service\n            BinderServiceUtil.installBinderService(serviceTarget, jndiBinding, queueService, jmsQueueServiceName);\n        }\n    }","id":5328,"modified_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final String name = context.getCurrentAddressValue();\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(context.getCurrentAddress());\n\n        final ModelNode selectorNode = SELECTOR.resolveModelAttribute(context, model);\n        final boolean durable = DURABLE.resolveModelAttribute(context, model).asBoolean();\n\n        final String selector = selectorNode.isDefined() ? selectorNode.asString() : null;\n\n        // Do not pass the JNDI bindings to ActiveMQ but install them directly instead so that the\n        // dependencies from the BinderServices to the JMSQueueService are not broken\n        Service<Queue> queueService = JMSQueueService.installService(name, serviceTarget, serviceName, selector, durable, new String[0]);\n\n        final ServiceName jmsQueueServiceName = JMSServices.getJmsQueueBaseServiceName(serviceName).append(name);\n        for (String entry : CommonAttributes.DESTINATION_ENTRIES.unwrap(context, model)) {\n            BinderServiceUtil.installBinderService(serviceTarget, entry, queueService, jmsQueueServiceName);\n        }\n\n        List<String> legacyEntries = CommonAttributes.LEGACY_ENTRIES.unwrap(context, model);\n        if (!legacyEntries.isEmpty()) {\n            Queue legacyQueue = HornetQJMSClient.createQueue(name);\n            for (String legacyEntry : legacyEntries) {\n                BinderServiceUtil.installBinderService(serviceTarget, legacyEntry, legacyQueue);\n            }\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        ReloadRequiredWriteAttributeHandler handler = new ReloadRequiredWriteAttributeHandler(getAttributes());\n        for (AttributeDefinition attr : getAttributes()) {\n            if (deployed) {\n                registry.registerReadOnlyAttribute(attr, JMSQueueConfigurationRuntimeHandler.INSTANCE);\n            } else {\n                if (attr == CommonAttributes.DESTINATION_ENTRIES) {\n                    registry.registerReadWriteAttribute(attr, null, handler);\n                } else {\n                    registry.registerReadOnlyAttribute(attr, null);\n                }\n            }\n        }\n\n        for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n            registry.registerReadOnlyAttribute(attr, JMSQueueReadAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition metric : METRICS) {\n            registry.registerMetric(metric, JMSQueueReadAttributeHandler.INSTANCE);\n        }\n    }","id":5329,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        ReloadRequiredWriteAttributeHandler handler = new ReloadRequiredWriteAttributeHandler(getAttributes());\n        for (AttributeDefinition attr : getAttributes()) {\n            if (deployed) {\n                registry.registerReadOnlyAttribute(attr, JMSQueueConfigurationRuntimeHandler.INSTANCE);\n            } else {\n                if (attr == CommonAttributes.DESTINATION_ENTRIES ||\n                        attr == CommonAttributes.LEGACY_ENTRIES) {\n                    registry.registerReadWriteAttribute(attr, null, handler);\n                } else {\n                    registry.registerReadOnlyAttribute(attr, null);\n                }\n            }\n        }\n\n        for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n            registry.registerReadOnlyAttribute(attr, JMSQueueReadAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition metric : METRICS) {\n            registry.registerMetric(metric, JMSQueueReadAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        addOperation.performRuntime(context, operation, model);\n    }","id":5330,"modified_method":"protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        JMSQueueAdd.INSTANCE.performRuntime(context, operation, model);\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"private JMSQueueRemove(JMSQueueAdd addOperation) {\n\n        this.addOperation = addOperation;\n    }","id":5331,"modified_method":"private JMSQueueRemove() {\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyQueue(name, true);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }\n\n        context.removeService(JMSServices.getJmsQueueBaseServiceName(serviceName).append(name));\n        final ModelNode entries = CommonAttributes.DESTINATION_ENTRIES.resolveModelAttribute(context, model);\n        final String[] jndiBindings = JMSServices.getJndiBindings(entries);\n\n        for (String jndiBinding : jndiBindings) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(jndiBinding);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n    }","id":5332,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyQueue(name, true);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }\n\n        context.removeService(JMSServices.getJmsQueueBaseServiceName(serviceName).append(name));\n\n        for (String entry : CommonAttributes.DESTINATION_ENTRIES.unwrap(context, model)) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(entry);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n\n        for (String legacyEntry: CommonAttributes.LEGACY_ENTRIES.unwrap(context, model)) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(legacyEntry);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final PathAddress address = PathAddress.pathAddress(operation.get(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n\n        // Do not pass the JNDI bindings to ActiveMQ but install them directly instead so that the\n        // dependencies from the BinderServices to the JMSQueueService are not broken\n        JMSTopicService jmsTopicService = JMSTopicService.installService(name, serviceName, serviceTarget, new String[0]);\n\n        final ModelNode entries = CommonAttributes.DESTINATION_ENTRIES.resolveModelAttribute(context, model);\n        final ServiceName jmsTopicServiceName = JMSServices.getJmsTopicBaseServiceName(serviceName).append(name);\n        final String[] jndiBindings = JMSServices.getJndiBindings(entries);\n        for (String jndiBinding : jndiBindings) {\n            // install a binder service which depends on the JMS topic service\n            BinderServiceUtil.installBinderService(serviceTarget, jndiBinding, jmsTopicService, jmsTopicServiceName);\n        }\n    }","id":5333,"modified_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final String name = context.getCurrentAddressValue();\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(context.getCurrentAddress());\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n\n        // Do not pass the JNDI bindings to ActiveMQ but install them directly instead so that the\n        // dependencies from the BinderServices to the JMSQueueService are not broken\n        JMSTopicService jmsTopicService = JMSTopicService.installService(name, serviceName, serviceTarget, new String[0]);\n\n        final ServiceName jmsTopicServiceName = JMSServices.getJmsTopicBaseServiceName(serviceName).append(name);\n        for (String entry : CommonAttributes.DESTINATION_ENTRIES.unwrap(context, model)) {\n            BinderServiceUtil.installBinderService(serviceTarget, entry, jmsTopicService, jmsTopicServiceName);\n        }\n\n        List<String> legacyEntries = CommonAttributes.LEGACY_ENTRIES.unwrap(context, model);\n        if (!legacyEntries.isEmpty()) {\n            Topic legacyTopic = HornetQJMSClient.createTopic(name);\n            for (String legacyEntry : legacyEntries) {\n                BinderServiceUtil.installBinderService(serviceTarget, legacyEntry, legacyTopic);\n            }\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        ReloadRequiredWriteAttributeHandler handler = new ReloadRequiredWriteAttributeHandler(getAttributes());\n        for (AttributeDefinition attr : getAttributes()) {\n            if (deployed) {\n                registry.registerReadOnlyAttribute(attr, JMSTopicConfigurationRuntimeHandler.INSTANCE);\n            } else {\n                if (attr == CommonAttributes.DESTINATION_ENTRIES) {\n                    registry.registerReadWriteAttribute(attr, null, handler);\n                } else {\n                    registry.registerReadOnlyAttribute(attr, null);\n                }\n            }\n        }\n\n        for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n            registry.registerReadOnlyAttribute(attr, JMSTopicReadAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition metric : METRICS) {\n            registry.registerMetric(metric, JMSTopicReadAttributeHandler.INSTANCE);\n        }\n    }","id":5334,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        ReloadRequiredWriteAttributeHandler handler = new ReloadRequiredWriteAttributeHandler(getAttributes());\n        for (AttributeDefinition attr : getAttributes()) {\n            if (deployed) {\n                registry.registerReadOnlyAttribute(attr, JMSTopicConfigurationRuntimeHandler.INSTANCE);\n            } else {\n                if (attr == CommonAttributes.DESTINATION_ENTRIES ||\n                        attr == CommonAttributes.LEGACY_ENTRIES) {\n                    registry.registerReadWriteAttribute(attr, null, handler);\n                } else {\n                    registry.registerReadOnlyAttribute(attr, null);\n                }\n            }\n        }\n\n        for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n            registry.registerReadOnlyAttribute(attr, JMSTopicReadAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition metric : METRICS) {\n            registry.registerMetric(metric, JMSTopicReadAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyTopic(name, true);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }\n\n        context.removeService(JMSServices.getJmsTopicBaseServiceName(serviceName).append(name));\n\n        final ModelNode entries = CommonAttributes.DESTINATION_ENTRIES.resolveModelAttribute(context, model);\n        final String[] jndiBindings = JMSServices.getJndiBindings(entries);\n        for (String jndiBinding : jndiBindings) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(jndiBinding);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n    }","id":5335,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        final String name = context.getCurrentAddress().getLastElement().getValue();\n\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        JMSServerControl control = JMSServerControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_SERVER));\n        if (control != null) {\n            try {\n                control.destroyTopic(name, true);\n            } catch (Exception e) {\n                throw new OperationFailedException(e);\n            }\n        }\n\n        context.removeService(JMSServices.getJmsTopicBaseServiceName(serviceName).append(name));\n\n        for (String entry : CommonAttributes.DESTINATION_ENTRIES.unwrap(context, model)) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(entry);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n\n        for (String legacyEntry : CommonAttributes.LEGACY_ENTRIES.unwrap(context, model)) {\n            final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(legacyEntry);\n            ServiceName binderServiceName = bindInfo.getBinderServiceName();\n            context.removeService(binderServiceName);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException {\n        if(ignoreOperationIfServerNotActive(context, operation)) {\n            return;\n        }\n\n        validator.validate(operation);\n        final String attributeName = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        PathAddress address = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));\n        String queueName = address.getLastElement().getValue();\n\n        if (forwardToRuntimeQueue(context, operation, RUNTIME_INSTANCE)) {\n            return;\n        }\n\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(address);\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        QueueControl control = QueueControl.class.cast(server.getManagementService().getResource(ResourceNames.CORE_QUEUE + queueName));\n\n        if (control == null) {\n            throw ControllerLogger.ROOT_LOGGER.managementResourceNotFound(address);\n        }\n\n        if (MESSAGE_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessageCount());\n        } else if (SCHEDULED_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getScheduledCount());\n        } else if (CONSUMER_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getConsumerCount());\n        } else if (DELIVERING_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getDeliveringCount());\n        } else if (MESSAGES_ADDED.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessagesAdded());\n        } else if (ID.getName().equals(attributeName)) {\n            context.getResult().set(control.getID());\n        } else if (PAUSED.getName().equals(attributeName)) {\n            try {\n                context.getResult().set(control.isPaused());\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        } else if (TEMPORARY.getName().equals(attributeName)) {\n            context.getResult().set(control.isTemporary());\n        } else if (EXPIRY_ADDRESS.getName().equals(attributeName)) {\n            context.getResult().set(control.getExpiryAddress());\n        } else if (DEAD_LETTER_ADDRESS.getName().equals(attributeName)) {\n            context.getResult().set(control.getDeadLetterAddress());\n        } else if (readStorageAttributes && getStorageAttributeNames().contains(attributeName)) {\n            if (ADDRESS.getName().equals(attributeName)) {\n                context.getResult().set(control.getAddress());\n            } else if (DURABLE.getName().equals(attributeName)) {\n                context.getResult().set(control.isDurable());\n            } else if (FILTER.getName().equals(attributeName)) {\n                ModelNode result = context.getResult();\n                String filter = control.getFilter();\n                if (filter != null) {\n                    result.set(filter);\n                }\n            }\n        } else {\n            throw MessagingLogger.ROOT_LOGGER.unsupportedAttribute(attributeName);\n        }\n    }","id":5336,"modified_method":"@Override\n    public void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException {\n        if(ignoreOperationIfServerNotActive(context, operation)) {\n            return;\n        }\n\n        validator.validate(operation);\n        final String attributeName = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        PathAddress address = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));\n        String queueName = address.getLastElement().getValue();\n\n        if (forwardToRuntimeQueue(context, operation, RUNTIME_INSTANCE)) {\n            return;\n        }\n\n        final ServiceName serviceName = MessagingServices.getActiveMQServiceName(address);\n        ServiceController<?> service = context.getServiceRegistry(false).getService(serviceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(service.getValue());\n        QueueControl control = QueueControl.class.cast(server.getManagementService().getResource(ResourceNames.CORE_QUEUE + queueName));\n\n        if (control == null) {\n            throw ControllerLogger.ROOT_LOGGER.managementResourceNotFound(address);\n        }\n\n        if (MESSAGE_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessageCount());\n        } else if (SCHEDULED_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getScheduledCount());\n        } else if (CONSUMER_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getConsumerCount());\n        } else if (DELIVERING_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getDeliveringCount());\n        } else if (MESSAGES_ADDED.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessagesAdded());\n        } else if (ID.getName().equals(attributeName)) {\n            context.getResult().set(control.getID());\n        } else if (PAUSED.getName().equals(attributeName)) {\n            try {\n                context.getResult().set(control.isPaused());\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        } else if (TEMPORARY.getName().equals(attributeName)) {\n            context.getResult().set(control.isTemporary());\n        } else if (EXPIRY_ADDRESS.getName().equals(attributeName)) {\n            if (control.getExpiryAddress() != null) {\n                context.getResult().set(control.getExpiryAddress());\n            }\n        } else if (DEAD_LETTER_ADDRESS.getName().equals(attributeName)) {\n            if (control.getDeadLetterAddress() != null) {\n                context.getResult().set(control.getDeadLetterAddress());\n            }\n        } else if (readStorageAttributes && getStorageAttributeNames().contains(attributeName)) {\n            if (ADDRESS.getName().equals(attributeName)) {\n                context.getResult().set(control.getAddress());\n            } else if (DURABLE.getName().equals(attributeName)) {\n                context.getResult().set(control.isDurable());\n            } else if (FILTER.getName().equals(attributeName)) {\n                ModelNode result = context.getResult();\n                String filter = control.getFilter();\n                if (filter != null) {\n                    result.set(filter);\n                }\n            }\n        } else {\n            throw MessagingLogger.ROOT_LOGGER.unsupportedAttribute(attributeName);\n        }\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Get the parameters.\n     *\n     * @param context the operation context\n     * @param config the transport configuration\n     * @return the extracted parameters\n     * @throws OperationFailedException if an expression can not be resolved\n     */\n    static Map<String, Object> getParameters(final OperationContext context, final ModelNode config) throws OperationFailedException {\n        Map<String, String> fromModel = CommonAttributes.PARAMS.unwrap(context, config);\n        return new HashMap<String, Object>(fromModel);\n    }","id":5337,"modified_method":"/**\n     * Get the parameters.\n     *\n     * @param context the operation context\n     * @param config the transport configuration\n     * @return the extracted parameters\n     * @throws OperationFailedException if an expression can not be resolved\n     */\n    public static Map<String, Object> getParameters(final OperationContext context, final ModelNode config) throws OperationFailedException {\n        Map<String, String> fromModel = CommonAttributes.PARAMS.unwrap(context, config);\n        return new HashMap<String, Object>(fromModel);\n    }","commit_id":"3b267954aac2a5e6f8fe771500c7c9720a7e8420","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void visitIfStatement(@NotNull PsiIfStatement ifStatement) {\n      super.visitIfStatement(ifStatement);\n      final PsiStatement elseBranch = unwrap(ifStatement.getElseBranch());\n      final PsiStatement thenBranch = unwrap(ifStatement.getThenBranch());\n      if (thenBranch == null) {\n        return;\n      }\n      final Project project = ifStatement.getProject();\n      final InputVariables inputVariables = new InputVariables(Collections.emptyList(), project, new LocalSearchScope(thenBranch), false);\n      final DuplicatesFinder finder = new DuplicatesFinder(new PsiElement[]{thenBranch}, inputVariables, null, Collections.emptyList());\n      if (elseBranch instanceof PsiIfStatement) {\n        final PsiIfStatement statement = (PsiIfStatement)elseBranch;\n        final PsiStatement branch = unwrap(statement.getThenBranch());\n        if (branch == null) {\n          return;\n        }\n        final Match match = finder.isDuplicate(branch, true);\n        if (match != null) {\n          final ReturnValue matchReturnValue = match.getReturnValue();\n          if (matchReturnValue instanceof ConditionalReturnStatementValue &&\n              !matchReturnValue.isEquivalent(buildReturnValue(thenBranch))) {\n            return;\n          }\n          else if (matchReturnValue instanceof ExpressionReturnValue) {\n            return;\n          }\n          registerStatementError(ifStatement, statement);\n          return;\n        }\n      }\n      if (elseBranch == null) {\n        checkIfStatementWithoutElseBranch(ifStatement);\n      }\n      else {\n        final Match match = finder.isDuplicate(elseBranch, true);\n        if (match != null) {\n          final ReturnValue matchReturnValue = match.getReturnValue();\n          if (matchReturnValue instanceof ConditionalReturnStatementValue &&\n              !matchReturnValue.isEquivalent(buildReturnValue(thenBranch))) {\n            return;\n          }\n          else if (matchReturnValue instanceof ExpressionReturnValue) {\n            return;\n          }\n          registerStatementError(ifStatement);\n        }\n      }\n    }","id":5338,"modified_method":"@Override\n    public void visitIfStatement(@NotNull PsiIfStatement ifStatement) {\n      super.visitIfStatement(ifStatement);\n      final PsiStatement elseBranch = unwrap(ifStatement.getElseBranch());\n      final PsiStatement thenBranch = unwrap(ifStatement.getThenBranch());\n      if (thenBranch == null) {\n        return;\n      }\n      if (elseBranch instanceof PsiIfStatement) {\n        final PsiIfStatement statement = (PsiIfStatement)elseBranch;\n        final PsiStatement branch = unwrap(statement.getThenBranch());\n        if (branch != null && isDuplicate(thenBranch, branch)) {\n          registerStatementError(ifStatement);\n        }\n      }\n      else if (elseBranch == null) {\n        checkIfStatementWithoutElseBranch(ifStatement);\n      }\n      else if (isDuplicate(thenBranch, elseBranch)) {\n        registerStatementError(ifStatement);\n      }\n    }","commit_id":"cb6999b70a60de96862f6a82b7719c219978faa0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitSwitchStatement(\n      @NotNull PsiSwitchStatement statement) {\n      super.visitSwitchStatement(statement);\n      final PsiElement containingSwitchStatement =\n        PsiTreeUtil.getParentOfType(statement,\n                                    PsiSwitchStatement.class);\n      if (containingSwitchStatement == null) {\n        return;\n      }\n      final PsiMethod containingMethod =\n        PsiTreeUtil.getParentOfType(statement, PsiMethod.class);\n      final PsiMethod containingContainingMethod =\n        PsiTreeUtil.getParentOfType(containingSwitchStatement,\n                                    PsiMethod.class);\n      if (containingMethod == null ||\n          containingContainingMethod == null ||\n          !containingMethod.equals(containingContainingMethod)) {\n        return;\n      }\n      registerStatementError(statement);\n    }","id":5339,"modified_method":"@Override\n    public void visitSwitchStatement(@NotNull PsiSwitchStatement statement) {\n      super.visitSwitchStatement(statement);\n      if (NestedSynchronizedStatementInspection.isNestedStatement(statement, PsiSwitchStatement.class)) {\n        registerStatementError(statement);\n      }\n    }","commit_id":"68f1c89a1dab1503bb5424fb176b2eb54edfa357","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitSynchronizedStatement(\n      @NotNull PsiSynchronizedStatement statement) {\n      super.visitSynchronizedStatement(statement);\n      final PsiElement containingSynchronizedStatement =\n        PsiTreeUtil.getParentOfType(statement,\n                                    PsiSynchronizedStatement.class);\n      if (containingSynchronizedStatement == null) {\n        return;\n      }\n      final PsiMethod containingMethod =\n        PsiTreeUtil.getParentOfType(statement,\n                                    PsiMethod.class);\n      final PsiMethod containingContainingMethod =\n        PsiTreeUtil.getParentOfType(containingSynchronizedStatement,\n                                    PsiMethod.class);\n      if (containingMethod == null ||\n          containingContainingMethod == null ||\n          !containingMethod.equals(containingContainingMethod)) {\n        return;\n      }\n      registerStatementError(statement);\n    }","id":5340,"modified_method":"@Override\n    public void visitSynchronizedStatement(@NotNull PsiSynchronizedStatement statement) {\n      super.visitSynchronizedStatement(statement);\n      if (isNestedStatement(statement, PsiSynchronizedStatement.class)) {\n        registerStatementError(statement);\n      }\n    }","commit_id":"68f1c89a1dab1503bb5424fb176b2eb54edfa357","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitTryStatement(@NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      final PsiTryStatement parentTry =\n        PsiTreeUtil.getParentOfType(statement,\n                                    PsiTryStatement.class);\n      if (parentTry == null) {\n        return;\n      }\n      final PsiCodeBlock tryBlock = parentTry.getTryBlock();\n      if (tryBlock == null) {\n        return;\n      }\n      if (!PsiTreeUtil.isAncestor(tryBlock, statement, true)) {\n        return;\n      }\n      final PsiMember containingMethod =\n        PsiTreeUtil.getParentOfType(statement, PsiMember.class, true, PsiLambdaExpression.class, PsiClass.class);\n      final PsiMember containingContainingMethod =\n        PsiTreeUtil.getParentOfType(parentTry, PsiMember.class, true, PsiLambdaExpression.class, PsiClass.class);\n      if (containingMethod == null ||\n          containingContainingMethod == null ||\n          !containingMethod.equals(containingContainingMethod)) {\n        return;\n      }\n      registerStatementError(statement);\n    }","id":5341,"modified_method":"@Override\n    public void visitTryStatement(@NotNull PsiTryStatement statement) {\n      super.visitTryStatement(statement);\n      final PsiTryStatement parentTry = PsiTreeUtil.getParentOfType(statement, PsiTryStatement.class);\n      if (parentTry == null) {\n        return;\n      }\n      final PsiCodeBlock tryBlock = parentTry.getTryBlock();\n      if (tryBlock == null) {\n        return;\n      }\n      if (!PsiTreeUtil.isAncestor(tryBlock, statement, true)) {\n        return;\n      }\n      if (NestedSynchronizedStatementInspection.isNestedStatement(statement, PsiTryStatement.class)) {\n        registerStatementError(statement);\n      }\n    }","commit_id":"68f1c89a1dab1503bb5424fb176b2eb54edfa357","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","id":5342,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n\n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        Expression collectionExpression = forLoop.getCollectionExpression();\n        if (collectionExpression instanceof ClosureListExpression) {\n            // for (int i=0; i<...; i++) style loop\n            super.visitForLoop(forLoop);\n        } else {\n            final ClassNode collectionType = getType(collectionExpression);\n            ClassNode componentType = collectionType.getComponentType();\n            if (componentType == null) {\n                if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                    ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                    GenericsType[] genericsTypes = intf.getGenericsTypes();\n                    componentType = genericsTypes[0].getType();\n                } else if (collectionType == ClassHelper.STRING_TYPE) {\n                    componentType = ClassHelper.Character_TYPE;\n                } else {\n                    componentType = ClassHelper.OBJECT_TYPE;\n                }\n            }\n            forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n            if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n                addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n            }\n            try {\n                super.visitForLoop(forLoop);\n            } finally {\n                forLoopVariableTypes.remove(forLoop.getVariable());\n            }\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"d2e07a35608324b155c91853a8cc20b9a1f0ca40","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = collectionType.getComponentType();\n        if (componentType == null) {\n            if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                GenericsType[] genericsTypes = intf.getGenericsTypes();\n                componentType = genericsTypes[0].getType();\n            } else if (collectionType == ClassHelper.STRING_TYPE) {\n                componentType = ClassHelper.Character_TYPE;\n            } else {\n                componentType = ClassHelper.OBJECT_TYPE;\n            }\n        }\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","id":5343,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n\n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        Expression collectionExpression = forLoop.getCollectionExpression();\n        if (collectionExpression instanceof ClosureListExpression) {\n            // for (int i=0; i<...; i++) style loop\n            super.visitForLoop(forLoop);\n        } else {\n            final ClassNode collectionType = getType(collectionExpression);\n            ClassNode componentType = collectionType.getComponentType();\n            if (componentType == null) {\n                if (collectionType.implementsInterface(ITERABLE_TYPE)) {\n                    ClassNode intf = GenericsUtils.parameterizeInterfaceGenerics(collectionType, ITERABLE_TYPE);\n                    GenericsType[] genericsTypes = intf.getGenericsTypes();\n                    componentType = genericsTypes[0].getType();\n                } else if (collectionType == ClassHelper.STRING_TYPE) {\n                    componentType = ClassHelper.Character_TYPE;\n                } else {\n                    componentType = ClassHelper.OBJECT_TYPE;\n                }\n            }\n            forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n            if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n                addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n            }\n            try {\n                super.visitForLoop(forLoop);\n            } finally {\n                forLoopVariableTypes.remove(forLoop.getVariable());\n            }\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"528ccceb943e20a515808933ff44fab5821a2497","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        final ClassNode collectionType = getType(forLoop.getCollectionExpression());\n        ClassNode componentType = inferLoopElementType(collectionType);\n        forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n        if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n            addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n        }\n        try {\n            super.visitForLoop(forLoop);\n        } finally {\n            forLoopVariableTypes.remove(forLoop.getVariable());\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","id":5344,"modified_method":"@Override\n    public void visitForLoop(final ForStatement forLoop) {\n        // collect every variable expression used in the loop body\n        final Map<VariableExpression, ClassNode> varOrigType = new HashMap<VariableExpression, ClassNode>();\n        forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));\n        \n        // visit body\n        Map<VariableExpression, List<ClassNode>> oldTracker = pushAssignmentTracking();\n        Expression collectionExpression = forLoop.getCollectionExpression();\n        if (collectionExpression instanceof ClosureListExpression) {\n            // for (int i=0; i<...; i++) style loop\n            super.visitForLoop(forLoop);\n        } else {\n            final ClassNode collectionType = getType(collectionExpression);\n            ClassNode componentType = inferLoopElementType(collectionType);\n            forLoopVariableTypes.put(forLoop.getVariable(), componentType);\n            if (!checkCompatibleAssignmentTypes(forLoop.getVariableType(), componentType)) {\n                addStaticTypeError(\"Cannot loop with element of type \" + forLoop.getVariableType() + \" with collection of type \" + collectionType, forLoop);\n            }\n            try {\n                super.visitForLoop(forLoop);\n            } finally {\n                forLoopVariableTypes.remove(forLoop.getVariable());\n            }\n        }\n        boolean typeChanged = isSecondPassNeededForControlStructure(varOrigType, oldTracker);\n        if (typeChanged) visitForLoop(forLoop);\n    }","commit_id":"1f81d386299b723e536a57d48b4b2fdd0788fb13","url":"https://github.com/apache/groovy"},{"original_method":"/**\n     * @see org.ofbiz.service.engine.GenericEngine#runAsync(java.lang.String, org.ofbiz.service.ModelService, java.util.Map, org.ofbiz.service.GenericRequester, boolean)\n     */\n    public void runAsync(String localName, ModelService modelService, Map context, GenericRequester requester, boolean persist) throws GenericServiceException {\n        DispatchContext dctx = dispatcher.getLocalContext(localName);\n        Job job = null;\n\n        if (persist) {\n            // check for a delegator\n            if (dispatcher.getDelegator() == null) {\n                throw new GenericServiceException(\"No reference to delegator; cannot run persisted services.\");\n            }\n\n            GenericValue jobV = null;\n            // Build the value object(s).\n            try {\n                List toBeStored = new LinkedList();\n\n                // Create the runtime data\n                String dataId = dispatcher.getDelegator().getNextSeqId(\"RuntimeData\");\n\n                GenericValue runtimeData = dispatcher.getDelegator().makeValue(\"RuntimeData\",\n                        UtilMisc.toMap(\"runtimeDataId\", dataId));\n\n                runtimeData.set(\"runtimeInfo\", XmlSerializer.serialize(context));\n                toBeStored.add(runtimeData);\n\n                // Get the userLoginId out of the context\n                String authUserLoginId = null;\n                if (context.containsKey(\"userLogin\")) {\n                    GenericValue userLogin = (GenericValue)context.get(\"userLogin\");\n                    authUserLoginId = userLogin.getString(\"userLoginId\");\n                }\n\n                // Create the job info\n                String jobId = dispatcher.getDelegator().getNextSeqId(\"JobSandbox\");\n                String jobName = Long.toString((new Date().getTime()));\n\n                Map jFields = UtilMisc.toMap(\"jobId\", jobId, \"jobName\", jobName, \"runTime\", UtilDateTime.nowTimestamp());\n                jFields.put(\"poolId\", ServiceConfigUtil.getSendPool());\n                jFields.put(\"statusId\", \"SERVICE_PENDING\");\n                jFields.put(\"serviceName\", modelService.name);\n                jFields.put(\"loaderName\", localName);\n                jFields.put(\"maxRetry\", new Long(modelService.maxRetry));\n                jFields.put(\"runtimeDataId\", dataId);\n                if (UtilValidate.isNotEmpty(authUserLoginId)) {\n                    jFields.put(\"authUserLoginId\", authUserLoginId);\n                }\n\n                jobV = dispatcher.getDelegator().makeValue(\"JobSandbox\", jFields);\n                toBeStored.add(jobV);\n                dispatcher.getDelegator().storeAll(toBeStored);\n\n            } catch (GenericEntityException e) {\n                throw new GenericServiceException(\"Unable to create persisted job\", e);\n            } catch (SerializeException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            } catch (FileNotFoundException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            } catch (IOException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            }\n\n            // make sure we stored okay\n            if (jobV == null) {\n                throw new GenericServiceException(\"Persisted job not created\");\n            } else {\n                Debug.logInfo(\"Persisted job queued : \" + jobV.getString(\"jobName\"), module);\n            }\n        } else {\n            JobManager jMgr = dispatcher.getJobManager();\n            if (jMgr != null) {\n                String name = Long.toString(new Date().getTime());\n                String jobId = modelService.name + \".\" + name;\n                job = new GenericServiceJob(dctx, jobId, name, modelService.name, context, requester);\n                try {\n                    dispatcher.getJobManager().runJob(job);\n                } catch (JobManagerException jse) {\n                    throw new GenericServiceException(\"Cannot run job.\", jse);\n                }\n            } else {\n                throw new GenericServiceException(\"Cannot get JobManager instance to invoke the job\");\n            }\n        }\n    }","id":5345,"modified_method":"/**\n     * @see org.ofbiz.service.engine.GenericEngine#runAsync(java.lang.String, org.ofbiz.service.ModelService, java.util.Map, org.ofbiz.service.GenericRequester, boolean)\n     */\n    public void runAsync(String localName, ModelService modelService, Map context, GenericRequester requester, boolean persist) throws GenericServiceException {\n        DispatchContext dctx = dispatcher.getLocalContext(localName);\n        Job job = null;\n\n        if (persist) {\n            // check for a delegator\n            if (dispatcher.getDelegator() == null) {\n                throw new GenericServiceException(\"No reference to delegator; cannot run persisted services.\");\n            }\n\n            GenericValue jobV = null;\n            // Build the value object(s).\n            try {\n                // Create the runtime data\n                String dataId = dispatcher.getDelegator().getNextSeqId(\"RuntimeData\");\n\n                GenericValue runtimeData = dispatcher.getDelegator().makeValue(\"RuntimeData\",\n                        UtilMisc.toMap(\"runtimeDataId\", dataId));\n\n                runtimeData.set(\"runtimeInfo\", XmlSerializer.serialize(context));\n                runtimeData.create();\n\n                // Get the userLoginId out of the context\n                String authUserLoginId = null;\n                if (context.containsKey(\"userLogin\")) {\n                    GenericValue userLogin = (GenericValue)context.get(\"userLogin\");\n                    authUserLoginId = userLogin.getString(\"userLoginId\");\n                }\n\n                // Create the job info\n                String jobId = dispatcher.getDelegator().getNextSeqId(\"JobSandbox\");\n                String jobName = Long.toString((new Date().getTime()));\n\n                Map jFields = UtilMisc.toMap(\"jobId\", jobId, \"jobName\", jobName, \"runTime\", UtilDateTime.nowTimestamp());\n                jFields.put(\"poolId\", ServiceConfigUtil.getSendPool());\n                jFields.put(\"statusId\", \"SERVICE_PENDING\");\n                jFields.put(\"serviceName\", modelService.name);\n                jFields.put(\"loaderName\", localName);\n                jFields.put(\"maxRetry\", new Long(modelService.maxRetry));\n                jFields.put(\"runtimeDataId\", dataId);\n                if (UtilValidate.isNotEmpty(authUserLoginId)) {\n                    jFields.put(\"authUserLoginId\", authUserLoginId);\n                }\n\n                jobV = dispatcher.getDelegator().makeValue(\"JobSandbox\", jFields);\n                jobV.create();\n            } catch (GenericEntityException e) {\n                throw new GenericServiceException(\"Unable to create persisted job\", e);\n            } catch (SerializeException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            } catch (FileNotFoundException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            } catch (IOException e) {\n                throw new GenericServiceException(\"Problem serializing service attributes\", e);\n            }\n\n            // make sure we stored okay\n            if (jobV == null) {\n                throw new GenericServiceException(\"Persisted job not created\");\n            } else {\n                Debug.logInfo(\"Persisted job queued : \" + jobV.getString(\"jobName\"), module);\n            }\n        } else {\n            JobManager jMgr = dispatcher.getJobManager();\n            if (jMgr != null) {\n                String name = Long.toString(new Date().getTime());\n                String jobId = modelService.name + \".\" + name;\n                job = new GenericServiceJob(dctx, jobId, name, modelService.name, context, requester);\n                try {\n                    dispatcher.getJobManager().runJob(job);\n                } catch (JobManagerException jse) {\n                    throw new GenericServiceException(\"Cannot run job.\", jse);\n                }\n            } else {\n                throw new GenericServiceException(\"Cannot get JobManager instance to invoke the job\");\n            }\n        }\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"/**\n     * Run the service synchronously and return the result.\n     * @param localName Name of the context to use.\n     * @param modelService Service model object.\n     * @param context Map of name, value pairs composing the context.\n     * @param validateOut Validate OUT parameters\n     * @return Map of name, value pairs composing the result.\n     * @throws ServiceAuthException\n     * @throws ServiceValidationException\n     * @throws GenericServiceException\n     */\n    public Map runSync(String localName, ModelService modelService, Map context, boolean validateOut) throws ServiceAuthException, ServiceValidationException, GenericServiceException {\n        long serviceStartTime = System.currentTimeMillis();\n        boolean debugging = checkDebug(modelService, 1, true);\n        if (Debug.verboseOn()) {\n            Debug.logVerbose(\"[ServiceDispatcher.runSync] : invoking service \" + modelService.name + \" [\" + modelService.location +\n                \"/\" + modelService.invoke + \"] (\" + modelService.engineName + \")\", module);\n        }\n\n        if (context == null) {\n            context = FastMap.newInstance();\n        }\n\n        // setup the result map\n        Map result = FastMap.newInstance();\n        boolean isFailure = false;\n        boolean isError = false;\n\n        // set up the running service log\n        RunningService rs = this.logService(localName, modelService, GenericEngine.SYNC_MODE);\n\n        // get eventMap once for all calls for speed, don't do event calls if it is null\n        Map eventMap = ServiceEcaUtil.getServiceEventMap(modelService.name);\n\n        // check the locale\n        Locale locale = this.checkLocale(context);\n\n        // setup the engine and context\n        DispatchContext ctx = (DispatchContext) localContext.get(localName);\n        GenericEngine engine = this.getGenericEngine(modelService.engineName);\n\n        // setup default IN values\n        modelService.updateDefaultValues(context, ModelService.IN_PARAM);\n        \n        Map ecaContext = null;\n\n        // for isolated transactions\n        Transaction parentTransaction = null;\n\n        // start the transaction\n        boolean beganTrans = false;\n        try {\n            if (modelService.useTransaction) {\n                beganTrans = TransactionUtil.begin(modelService.transactionTimeout);\n                // isolate the transaction if defined\n                if (modelService.requireNewTransaction && !beganTrans) {\n                    parentTransaction = TransactionUtil.suspend();\n                    // now start a new transaction\n                    beganTrans = TransactionUtil.begin(modelService.transactionTimeout);\n                }\n            }\n\n            // XAResource debugging\n            if (beganTrans && TransactionUtil.debugResources) {\n                DebugXaResource dxa = new DebugXaResource(modelService.name);\n                try {\n                    dxa.enlist();\n                } catch (Exception e) {\n                    Debug.logError(e, module);\n                }\n            }\n\n            try {\n                // setup global transaction ECA listeners to execute later\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"global-rollback\", ctx, context, result, isError, isFailure);\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"global-commit\", ctx, context, result, isError, isFailure);\n\n                // pre-auth ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"auth\", ctx, context, result, isError, isFailure);\n\n                // check for pre-auth failure/errors\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n\n                context = checkAuth(localName, context, modelService);\n                Object userLogin = context.get(\"userLogin\");\n\n                if (modelService.auth && userLogin == null) {\n                    throw new ServiceAuthException(\"User authorization is required for this service: \" + modelService.name + modelService.debugInfo());\n                }\n\n                // pre-validate ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"in-validate\", ctx, context, result, isError, isFailure);\n\n                // check for pre-validate failure/errors\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n\n                // validate the context\n                if (modelService.validate && !isError && !isFailure) {\n                    try {\n                        modelService.validate(context, ModelService.IN_PARAM, locale);\n                    } catch (ServiceValidationException e) {\n                        Debug.logError(e, \"Incoming context (in runSync : \" + modelService.name + \") does not match expected requirements\", module);\n                        throw e;\n                    }\n                }\n\n                // pre-invoke ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"invoke\", ctx, context, result, isError, isFailure);\n\n                // check for pre-invoke failure/errors\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n\n                // ===== invoke the service =====\n                if (!isError && !isFailure) {\n                    Map invokeResult = engine.runSync(localName, modelService, context);\n                    engine.sendCallbacks(modelService, context, invokeResult, GenericEngine.SYNC_MODE);\n                    if (invokeResult != null) {\n                        result.putAll(invokeResult);\n                    } else {\n                        Debug.logWarning(\"Service (in runSync : \" + modelService.name + \") returns null result\", module);\n                    }\n                }\n\n                // re-check the errors/failures\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n\n                // create a new context with the results to pass to ECA services; necessary because caller may reuse this context\n                ecaContext = FastMap.newInstance();\n                ecaContext.putAll(context);\n\n                // copy all results: don't worry parameters that aren't allowed won't be passed to the ECA services\n                ecaContext.putAll(result);\n\n                // setup default OUT values\n                modelService.updateDefaultValues(context, ModelService.OUT_PARAM);\n\n                // validate the result\n                if (modelService.validate && validateOut) {\n                    // pre-out-validate ECA\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"out-validate\", ctx, ecaContext, result, isError, isFailure);\n                    try {\n                        modelService.validate(result, ModelService.OUT_PARAM, locale);\n                    } catch (ServiceValidationException e) {\n                        Debug.logError(e, \"Outgoing result (in runSync : \" + modelService.name + \") does not match expected requirements\", module);\n                        throw e;\n                    }\n                }\n\n                // pre-commit ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"commit\", ctx, ecaContext, result, isError, isFailure);\n\n                // check for pre-commit failure/errors\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n                \n                // check for failure and log on info level; this is used for debugging\n                if (isFailure) {\n                    Debug.logWarning(\"Service Failure [\" + modelService.name + \"]: \" + ServiceUtil.getErrorMessage(result), module);\n                }\n\n            } catch (Throwable t) {\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + modelService.name, \"Sync service failed...\", module);\n                }\n                String errMsg = \"Service [\" + modelService.name + \"] threw an unexpected exception/error\";\n                Debug.logError(t, errMsg, module);\n                engine.sendCallbacks(modelService, context, t, GenericEngine.SYNC_MODE);\n                try {\n                    TransactionUtil.rollback(beganTrans, errMsg, t);\n                } catch (GenericTransactionException te) {\n                    Debug.logError(te, \"Cannot rollback transaction\", module);\n                }\n                checkDebug(modelService, 0, debugging);\n                rs.setEndStamp();\n                if (t instanceof ServiceAuthException) {\n                    throw (ServiceAuthException) t;\n                } else if (t instanceof ServiceValidationException) {\n                    throw (ServiceValidationException) t;\n                } else if (t instanceof GenericServiceException) {\n                    throw (GenericServiceException) t;\n                } else {\n                    throw new GenericServiceException(\"Service [\" + modelService.name + \"] Failed\" + modelService.debugInfo() , t);\n                }\n            } finally {\n                // if there was an error, rollback transaction, otherwise commit\n                if (isError) {\n                    String errMsg = \"Service Error [\" + modelService.name + \"]: \" + ServiceUtil.getErrorMessage(result);\n                    // try to log the error\n                    Debug.logError(errMsg, module);\n\n                    // rollback the transaction\n                    try {\n                        TransactionUtil.rollback(beganTrans, errMsg, null);\n                    } catch (GenericTransactionException e) {\n                        Debug.logError(e, \"Could not rollback transaction: \" + e.toString(), module);\n                    }\n                } else {\n                    // commit the transaction\n                    try {\n                        TransactionUtil.commit(beganTrans);\n                    } catch (GenericTransactionException e) {\n                        String errMsg = \"Could not commit transaction for service [\" + modelService.name + \"] call\";\n                        Debug.logError(e, errMsg, module);\n                        if (e.getMessage() != null) {\n                            errMsg = errMsg + \": \" + e.getMessage();\n                        }\n                        throw new GenericServiceException(errMsg);\n                    }\n                }\n\n                // call notifications -- event is determined from the result (success, error, fail)\n                modelService.evalNotifications(this.getLocalContext(localName), context, result);\n            }\n        } catch (GenericTransactionException te) {\n            Debug.logError(te, \"Problems with the transaction\", module);\n            throw new GenericServiceException(\"Problems with the transaction.\", te.getNested());\n        } finally {\n            // resume the parent transaction\n            if (parentTransaction != null) {\n                try {\n                    TransactionUtil.resume(parentTransaction);\n                } catch (GenericTransactionException ite) {\n                    Debug.logWarning(ite, \"Transaction error, not resumed\", module);\n                    throw new GenericServiceException(\"Resume transaction exception, see logs\");\n                }\n            }\n        }\n\n        // pre-return ECA\n        if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"return\", ctx, ecaContext, result, isError, isFailure);\n\n        checkDebug(modelService, 0, debugging);\n        rs.setEndStamp();\n        \n        long timeToRun = System.currentTimeMillis() - serviceStartTime;\n        if (Debug.timingOn() && timeToRun > 50) {\n            Debug.logTiming(\"Sync service [\" + localName + \"/\" + modelService.name + \"] finished in [\" + timeToRun + \"] milliseconds\", module);\n        } else if (timeToRun > 200) {\n            Debug.logInfo(\"Sync service [\" + localName + \"/\" + modelService.name + \"] finished in [\" + timeToRun + \"] milliseconds\", module);\n        }\n        \n        return result;\n    }","id":5346,"modified_method":"/**\n     * Run the service synchronously and return the result.\n     * @param localName Name of the context to use.\n     * @param modelService Service model object.\n     * @param context Map of name, value pairs composing the context.\n     * @param validateOut Validate OUT parameters\n     * @return Map of name, value pairs composing the result.\n     * @throws ServiceAuthException\n     * @throws ServiceValidationException\n     * @throws GenericServiceException\n     */\n    public Map runSync(String localName, ModelService modelService, Map context, boolean validateOut) throws ServiceAuthException, ServiceValidationException, GenericServiceException {\n        long serviceStartTime = System.currentTimeMillis();\n        boolean debugging = checkDebug(modelService, 1, true);\n        if (Debug.verboseOn()) {\n            Debug.logVerbose(\"[ServiceDispatcher.runSync] : invoking service \" + modelService.name + \" [\" + modelService.location +\n                \"/\" + modelService.invoke + \"] (\" + modelService.engineName + \")\", module);\n        }\n\n        if (context == null) {\n            context = FastMap.newInstance();\n        }\n\n        // setup the result map and other initial settings\n        Map result = FastMap.newInstance();\n        boolean isFailure = false;\n        boolean isError = false;\n\n        // set up the running service log\n        RunningService rs = this.logService(localName, modelService, GenericEngine.SYNC_MODE);\n\n        // get eventMap once for all calls for speed, don't do event calls if it is null\n        Map eventMap = ServiceEcaUtil.getServiceEventMap(modelService.name);\n\n        // check the locale\n        Locale locale = this.checkLocale(context);\n\n        // setup the engine and context\n        DispatchContext ctx = (DispatchContext) localContext.get(localName);\n        GenericEngine engine = this.getGenericEngine(modelService.engineName);\n\n        // set IN attributes with default-value as applicable \n        modelService.updateDefaultValues(context, ModelService.IN_PARAM);\n        \n        Map ecaContext = null;\n\n        // for isolated transactions\n        Transaction parentTransaction = null;\n\n        // start the transaction\n        boolean beganTrans = false;\n        try {\n            if (modelService.useTransaction) {\n                beganTrans = TransactionUtil.begin(modelService.transactionTimeout);\n                // isolate the transaction if defined\n                if (modelService.requireNewTransaction && !beganTrans) {\n                    parentTransaction = TransactionUtil.suspend();\n                    // now start a new transaction\n                    beganTrans = TransactionUtil.begin(modelService.transactionTimeout);\n                }\n                // enlist for XAResource debugging\n                if (beganTrans && TransactionUtil.debugResources) {\n                    DebugXaResource dxa = new DebugXaResource(modelService.name);\n                    try {\n                        dxa.enlist();\n                    } catch (Exception e) {\n                        Debug.logError(e, module);\n                    }\n                }\n            }\n\n            try {\n\n                int lockRetriesRemaining = LOCK_RETRIES;\n                boolean needsLockRetry = false;\n                \n                do {\n                    lockRetriesRemaining--;\n                    \n                    // NOTE: general pattern here is to do everything up to the main service call, and retry it all if \n                    //needed because those will be part of the same transaction and have been rolled back\n                    // TODO: if there is an ECA called async or in a new transaciton it won't get rolled back\n                    //but will be called again, which means the service may complete multiple times! that would be for\n                    //pre-invoke and earlier events only of course\n                    \n                    \n                    // setup global transaction ECA listeners to execute later\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"global-rollback\", ctx, context, result, isError, isFailure);\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"global-commit\", ctx, context, result, isError, isFailure);\n\n                    // pre-auth ECA\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"auth\", ctx, context, result, isError, isFailure);\n\n                    // check for pre-auth failure/errors\n                    isFailure = ServiceUtil.isFailure(result);\n                    isError = ServiceUtil.isError(result);\n                    \n                    //Debug.logInfo(\"After [\" + modelService.name + \"] pre-auth ECA, before auth; isFailure=\" + isFailure + \", isError=\" + isError, module);\n\n                    context = checkAuth(localName, context, modelService);\n                    Object userLogin = context.get(\"userLogin\");\n\n                    if (modelService.auth && userLogin == null) {\n                        throw new ServiceAuthException(\"User authorization is required for this service: \" + modelService.name + modelService.debugInfo());\n                    }\n\n                    // pre-validate ECA\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"in-validate\", ctx, context, result, isError, isFailure);\n\n                    // check for pre-validate failure/errors\n                    isFailure = ServiceUtil.isFailure(result);\n                    isError = ServiceUtil.isError(result);\n\n                    //Debug.logInfo(\"After [\" + modelService.name + \"] pre-in-validate ECA, before in-validate; isFailure=\" + isFailure + \", isError=\" + isError, module);\n\n                    // validate the context\n                    if (modelService.validate && !isError && !isFailure) {\n                        try {\n                            modelService.validate(context, ModelService.IN_PARAM, locale);\n                        } catch (ServiceValidationException e) {\n                            Debug.logError(e, \"Incoming context (in runSync : \" + modelService.name + \") does not match expected requirements\", module);\n                            throw e;\n                        }\n                    }\n\n                    // pre-invoke ECA\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"invoke\", ctx, context, result, isError, isFailure);\n\n                    // check for pre-invoke failure/errors\n                    isFailure = ServiceUtil.isFailure(result);\n                    isError = ServiceUtil.isError(result);\n                    \n                    //Debug.logInfo(\"After [\" + modelService.name + \"] pre-invoke ECA, before invoke; isFailure=\" + isFailure + \", isError=\" + isError, module);\n\n                    // ===== invoke the service =====\n                    if (!isError && !isFailure) {\n                        Map invokeResult = engine.runSync(localName, modelService, context);\n                        engine.sendCallbacks(modelService, context, invokeResult, GenericEngine.SYNC_MODE);\n                        if (invokeResult != null) {\n                            result.putAll(invokeResult);\n                        } else {\n                            Debug.logWarning(\"Service (in runSync : \" + modelService.name + \") returns null result\", module);\n                        }\n                    }\n                    \n                    // re-check the errors/failures\n                    isFailure = ServiceUtil.isFailure(result);\n                    isError = ServiceUtil.isError(result);\n\n                    //Debug.logInfo(\"After [\" + modelService.name + \"] invoke; isFailure=\" + isFailure + \", isError=\" + isError, module);\n\n                    // crazy stuff here: see if there was a deadlock error and if so retry... which we can ONLY do if we own the transaction!\n                    if (beganTrans) {\n                        // look for the string DEADLOCK in an upper-cased error message; tested on: Derby, MySQL\n                        // - Derby 10.2.2.0 deadlock string: \"A lock could not be obtained due to a deadlock\"\n                        // - MySQL TODO\n                        // TODO need testing in other databases because they all return different error messages for this!\n                        String errMsg = ServiceUtil.getErrorMessage(result);\n                        // NOTE DEJ20070908 are there other things we need to check? I don't think so because these will \n                        //be Entity Engine errors that will be caught and come back in an error message... IFF the \n                        //service is written to not ignore it of course!\n                        if (errMsg != null && errMsg.toUpperCase().indexOf(\"DEADLOCK\") >= 0) {\n                            // it's a deadlock! retry...\n                            String retryMsg = \"RETRYING SERVICE [\" + modelService.name + \"]: Deadlock error found in message [\" + errMsg + \"]; retry [\" + (LOCK_RETRIES - lockRetriesRemaining) + \"] of [\" + LOCK_RETRIES + \"]\";\n                            \n                            // make sure the old transaction is rolled back, and then start a new one\n                            \n                            // if there is an exception in these things, let the big overall thing handle it\n                            TransactionUtil.rollback(beganTrans, retryMsg, null);\n                            \n                            beganTrans = TransactionUtil.begin(modelService.transactionTimeout);\n                            // enlist for XAResource debugging\n                            if (beganTrans && TransactionUtil.debugResources) {\n                                DebugXaResource dxa = new DebugXaResource(modelService.name);\n                                try {\n                                    dxa.enlist();\n                                } catch (Exception e) {\n                                    Debug.logError(e, module);\n                                }\n                            }\n                            \n                            if (!beganTrans) {\n                                // just log and let things roll through, will be considered an error and ECAs, etc will run according to that \n                                Debug.logError(\"After rollback attempt for lock retry did not begin a new transaction!\", module);\n                            } else {\n                                needsLockRetry = true;\n                                \n                                // reset state variables\n                                result = FastMap.newInstance();\n                                isFailure = false;\n                                isError = false;\n                                \n                                Debug.logWarning(retryMsg, module);\n                            }\n                        }\n                    }\n                } while (needsLockRetry && lockRetriesRemaining > 0);\n\n                // create a new context with the results to pass to ECA services; necessary because caller may reuse this context\n                ecaContext = FastMap.newInstance();\n                ecaContext.putAll(context);\n                // copy all results: don't worry parameters that aren't allowed won't be passed to the ECA services\n                ecaContext.putAll(result);\n\n                // setup default OUT values\n                modelService.updateDefaultValues(context, ModelService.OUT_PARAM);\n\n                // validate the result\n                if (modelService.validate && validateOut) {\n                    // pre-out-validate ECA\n                    if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"out-validate\", ctx, ecaContext, result, isError, isFailure);\n                    try {\n                        modelService.validate(result, ModelService.OUT_PARAM, locale);\n                    } catch (ServiceValidationException e) {\n                        Debug.logError(e, \"Outgoing result (in runSync : \" + modelService.name + \") does not match expected requirements\", module);\n                        throw e;\n                    }\n                }\n\n                // pre-commit ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"commit\", ctx, ecaContext, result, isError, isFailure);\n\n                // check for pre-commit failure/errors\n                isFailure = ServiceUtil.isFailure(result);\n                isError = ServiceUtil.isError(result);\n                \n                // check for failure and log on info level; this is used for debugging\n                if (isFailure) {\n                    Debug.logWarning(\"Service Failure [\" + modelService.name + \"]: \" + ServiceUtil.getErrorMessage(result), module);\n                }\n\n            } catch (Throwable t) {\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + modelService.name, \"Sync service failed...\", module);\n                }\n                String errMsg = \"Service [\" + modelService.name + \"] threw an unexpected exception/error\";\n                Debug.logError(t, errMsg, module);\n                engine.sendCallbacks(modelService, context, t, GenericEngine.SYNC_MODE);\n                try {\n                    TransactionUtil.rollback(beganTrans, errMsg, t);\n                } catch (GenericTransactionException te) {\n                    Debug.logError(te, \"Cannot rollback transaction\", module);\n                }\n                checkDebug(modelService, 0, debugging);\n                rs.setEndStamp();\n                if (t instanceof ServiceAuthException) {\n                    throw (ServiceAuthException) t;\n                } else if (t instanceof ServiceValidationException) {\n                    throw (ServiceValidationException) t;\n                } else if (t instanceof GenericServiceException) {\n                    throw (GenericServiceException) t;\n                } else {\n                    throw new GenericServiceException(\"Service [\" + modelService.name + \"] Failed\" + modelService.debugInfo() , t);\n                }\n            } finally {\n                // if there was an error, rollback transaction, otherwise commit\n                if (isError) {\n                    String errMsg = \"Error is Service [\" + modelService.name + \"]: \" + ServiceUtil.getErrorMessage(result);\n                    Debug.logError(errMsg, module);\n                    \n                    // rollback the transaction\n                    try {\n                        TransactionUtil.rollback(beganTrans, errMsg, null);\n                    } catch (GenericTransactionException e) {\n                        Debug.logError(e, \"Could not rollback transaction: \" + e.toString(), module);\n                    }\n                } else {\n                    // commit the transaction\n                    try {\n                        TransactionUtil.commit(beganTrans);\n                    } catch (GenericTransactionException e) {\n                        String errMsg = \"Could not commit transaction for service [\" + modelService.name + \"] call\";\n                        Debug.logError(e, errMsg, module);\n                        if (e.getMessage() != null) {\n                            errMsg = errMsg + \": \" + e.getMessage();\n                        }\n                        throw new GenericServiceException(errMsg);\n                    }\n                }\n\n                // call notifications -- event is determined from the result (success, error, fail)\n                modelService.evalNotifications(this.getLocalContext(localName), context, result);\n            }\n        } catch (GenericTransactionException te) {\n            Debug.logError(te, \"Problems with the transaction\", module);\n            throw new GenericServiceException(\"Problems with the transaction.\", te.getNested());\n        } finally {\n            // resume the parent transaction\n            if (parentTransaction != null) {\n                try {\n                    TransactionUtil.resume(parentTransaction);\n                } catch (GenericTransactionException ite) {\n                    Debug.logWarning(ite, \"Transaction error, not resumed\", module);\n                    throw new GenericServiceException(\"Resume transaction exception, see logs\");\n                }\n            }\n        }\n\n        // pre-return ECA\n        if (eventMap != null) ServiceEcaUtil.evalRules(modelService.name, eventMap, \"return\", ctx, ecaContext, result, isError, isFailure);\n\n        checkDebug(modelService, 0, debugging);\n        rs.setEndStamp();\n        \n        long timeToRun = System.currentTimeMillis() - serviceStartTime;\n        if (Debug.timingOn() && timeToRun > 50) {\n            Debug.logTiming(\"Sync service [\" + localName + \"/\" + modelService.name + \"] finished in [\" + timeToRun + \"] milliseconds\", module);\n        } else if (timeToRun > 200) {\n            Debug.logInfo(\"Sync service [\" + localName + \"/\" + modelService.name + \"] finished in [\" + timeToRun + \"] milliseconds\", module);\n        }\n        \n        return result;\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"/**\n     * Run the service asynchronously, passing an instance of GenericRequester that will receive the result.\n     * @param localName Name of the context to use.\n     * @param service Service model object.\n     * @param context Map of name, value pairs composing the context.\n     * @param requester Object implementing GenericRequester interface which will receive the result.\n     * @param persist True for store/run; False for run.\n     * @throws ServiceAuthException\n     * @throws ServiceValidationException\n     * @throws GenericServiceException\n     */\n    public void runAsync(String localName, ModelService service, Map context, GenericRequester requester, boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {\n        if (Debug.timingOn()) {\n            UtilTimer.timerLog(localName + \" / \" + service.name, \"ASync service started...\", module);\n        }\n        boolean debugging = checkDebug(service, 1, true);\n        if (Debug.verboseOn()) {\n            Debug.logVerbose(\"[ServiceDispatcher.runAsync] : prepareing service \" + service.name + \" [\" + service.location + \"/\" + service.invoke +\n                \"] (\" + service.engineName + \")\", module);\n        }\n        \n        if (context == null) {\n            context = FastMap.newInstance();\n        }\n\n        // setup the result map\n        Map result = FastMap.newInstance();\n        boolean isFailure = false;\n        boolean isError = false;\n\n        // set up the running service log\n        this.logService(localName, service, GenericEngine.ASYNC_MODE);\n\n        // check the locale\n        Locale locale = this.checkLocale(context);\n\n        // setup the engine and context\n        DispatchContext ctx = (DispatchContext) localContext.get(localName);\n        GenericEngine engine = this.getGenericEngine(service.engineName);\n\n        // for isolated transactions\n        Transaction parentTransaction = null;\n        // start the transaction\n        boolean beganTrans = false;\n\n        try {\n            if (service.useTransaction) {\n                beganTrans = TransactionUtil.begin(service.transactionTimeout);\n\n                // isolate the transaction if defined\n                if (service.requireNewTransaction && !beganTrans) {\n                    parentTransaction = TransactionUtil.suspend();\n                    // now start a new transaction\n                    beganTrans = TransactionUtil.begin(service.transactionTimeout);\n                }\n            }\n\n            // XAResource debugging\n            if (beganTrans && TransactionUtil.debugResources) {\n                DebugXaResource dxa = new DebugXaResource(service.name);\n                try {\n                    dxa.enlist();\n                } catch (Exception e) {\n                    Debug.logError(e, module);\n                }\n            }\n\n            try {\n                // get eventMap once for all calls for speed, don't do event calls if it is null\n                Map eventMap = ServiceEcaUtil.getServiceEventMap(service.name);\n\n                // pre-auth ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(service.name, eventMap, \"auth\", ctx, context, result, isError, isFailure);\n\n                context = checkAuth(localName, context, service);\n                Object userLogin = context.get(\"userLogin\");\n\n                if (service.auth && userLogin == null)\n                    throw new ServiceAuthException(\"User authorization is required for this service: \" + service.name + service.debugInfo());\n\n                // pre-validate ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(service.name, eventMap, \"in-validate\", ctx, context, result, isError, isFailure);\n\n                // check for pre-validate failure/errors\n                isFailure = ModelService.RESPOND_FAIL.equals(result.get(ModelService.RESPONSE_MESSAGE));\n                isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));\n\n                // validate the context\n                if (service.validate && !isError && !isFailure) {\n                    try {\n                        service.validate(context, ModelService.IN_PARAM, locale);\n                    } catch (ServiceValidationException e) {\n                        Debug.logError(e, \"Incoming service context (in runAsync: \" + service.name + \") does not match expected requirements\", module);\n                        throw e;\n                    }\n                }\n\n                // run the service\n                if (!isError && !isFailure) {\n                    if (requester != null) {\n                        engine.runAsync(localName, service, context, requester, persist);\n                    } else {\n                        engine.runAsync(localName, service, context, persist);\n                    }\n                    engine.sendCallbacks(service, context, null, GenericEngine.ASYNC_MODE);\n                }\n\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + service.name, \"ASync service finished...\", module);\n                }\n                checkDebug(service, 0, debugging);\n            } catch (Throwable t) {\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + service.name, \"ASync service failed...\", module);\n                }\n                String errMsg = \"Service [\" + service.name + \"] threw an unexpected exception/error\";\n                Debug.logError(t, errMsg, module);\n                engine.sendCallbacks(service, context, t, GenericEngine.ASYNC_MODE);\n                try {\n                    TransactionUtil.rollback(beganTrans, errMsg, t);\n                } catch (GenericTransactionException te) {\n                    Debug.logError(te, \"Cannot rollback transaction\", module);\n                }\n                checkDebug(service, 0, debugging);\n                if (t instanceof ServiceAuthException) {\n                    throw (ServiceAuthException) t;\n                } else if (t instanceof ServiceValidationException) {\n                    throw (ServiceValidationException) t;\n                } else if (t instanceof GenericServiceException) {\n                    throw (GenericServiceException) t;\n                } else {\n                    throw new GenericServiceException(\"Service [\" + service.name + \"] Failed\" + service.debugInfo() , t);\n                }\n            } finally {\n                // always try to commit the transaction since we don't know in this case if its was an error or not\n                try {\n                    TransactionUtil.commit(beganTrans);\n                } catch (GenericTransactionException e) {\n                    Debug.logError(e, \"Could not commit transaction\", module);\n                    throw new GenericServiceException(\"Commit transaction failed\");\n                }\n            }\n        } catch (GenericTransactionException se) {\n            Debug.logError(se, \"Problems with the transaction\", module);\n            throw new GenericServiceException(\"Problems with the transaction: \" + se.getMessage() + \"; See logs for more detail\");\n        } finally {\n            // resume the parent transaction\n            if (parentTransaction != null) {\n                try {\n                    TransactionUtil.resume(parentTransaction);\n                } catch (GenericTransactionException ise) {\n                    Debug.logError(ise, \"Trouble resuming parent transaction\", module);\n                    throw new GenericServiceException(\"Resume transaction exception: \" + ise.getMessage() + \"; See logs for more detail\");\n                }\n            }\n        }\n    }","id":5347,"modified_method":"/**\n     * Run the service asynchronously, passing an instance of GenericRequester that will receive the result.\n     * @param localName Name of the context to use.\n     * @param service Service model object.\n     * @param context Map of name, value pairs composing the context.\n     * @param requester Object implementing GenericRequester interface which will receive the result.\n     * @param persist True for store/run; False for run.\n     * @throws ServiceAuthException\n     * @throws ServiceValidationException\n     * @throws GenericServiceException\n     */\n    public void runAsync(String localName, ModelService service, Map context, GenericRequester requester, boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {\n        if (Debug.timingOn()) {\n            UtilTimer.timerLog(localName + \" / \" + service.name, \"ASync service started...\", module);\n        }\n        boolean debugging = checkDebug(service, 1, true);\n        if (Debug.verboseOn()) {\n            Debug.logVerbose(\"[ServiceDispatcher.runAsync] : prepareing service \" + service.name + \" [\" + service.location + \"/\" + service.invoke +\n                \"] (\" + service.engineName + \")\", module);\n        }\n        \n        if (context == null) {\n            context = FastMap.newInstance();\n        }\n\n        // setup the result map\n        Map result = FastMap.newInstance();\n        boolean isFailure = false;\n        boolean isError = false;\n\n        // set up the running service log\n        this.logService(localName, service, GenericEngine.ASYNC_MODE);\n\n        // check the locale\n        Locale locale = this.checkLocale(context);\n\n        // setup the engine and context\n        DispatchContext ctx = (DispatchContext) localContext.get(localName);\n        GenericEngine engine = this.getGenericEngine(service.engineName);\n\n        // for isolated transactions\n        Transaction parentTransaction = null;\n        // start the transaction\n        boolean beganTrans = false;\n\n        try {\n            if (service.useTransaction) {\n                beganTrans = TransactionUtil.begin(service.transactionTimeout);\n                // isolate the transaction if defined\n                if (service.requireNewTransaction && !beganTrans) {\n                    parentTransaction = TransactionUtil.suspend();\n                    // now start a new transaction\n                    beganTrans = TransactionUtil.begin(service.transactionTimeout);\n                }\n                // enlist for XAResource debugging\n                if (beganTrans && TransactionUtil.debugResources) {\n                    DebugXaResource dxa = new DebugXaResource(service.name);\n                    try {\n                        dxa.enlist();\n                    } catch (Exception e) {\n                        Debug.logError(e, module);\n                    }\n                }\n            }\n\n            try {\n                // get eventMap once for all calls for speed, don't do event calls if it is null\n                Map eventMap = ServiceEcaUtil.getServiceEventMap(service.name);\n\n                // pre-auth ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(service.name, eventMap, \"auth\", ctx, context, result, isError, isFailure);\n\n                context = checkAuth(localName, context, service);\n                Object userLogin = context.get(\"userLogin\");\n\n                if (service.auth && userLogin == null) {\n                    throw new ServiceAuthException(\"User authorization is required for this service: \" + service.name + service.debugInfo());\n                }\n\n                // pre-validate ECA\n                if (eventMap != null) ServiceEcaUtil.evalRules(service.name, eventMap, \"in-validate\", ctx, context, result, isError, isFailure);\n\n                // check for pre-validate failure/errors\n                isFailure = ModelService.RESPOND_FAIL.equals(result.get(ModelService.RESPONSE_MESSAGE));\n                isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));\n\n                // validate the context\n                if (service.validate && !isError && !isFailure) {\n                    try {\n                        service.validate(context, ModelService.IN_PARAM, locale);\n                    } catch (ServiceValidationException e) {\n                        Debug.logError(e, \"Incoming service context (in runAsync: \" + service.name + \") does not match expected requirements\", module);\n                        throw e;\n                    }\n                }\n\n                // run the service\n                if (!isError && !isFailure) {\n                    if (requester != null) {\n                        engine.runAsync(localName, service, context, requester, persist);\n                    } else {\n                        engine.runAsync(localName, service, context, persist);\n                    }\n                    engine.sendCallbacks(service, context, null, GenericEngine.ASYNC_MODE);\n                }\n\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + service.name, \"ASync service finished...\", module);\n                }\n                checkDebug(service, 0, debugging);\n            } catch (Throwable t) {\n                if (Debug.timingOn()) {\n                    UtilTimer.closeTimer(localName + \" / \" + service.name, \"ASync service failed...\", module);\n                }\n                String errMsg = \"Service [\" + service.name + \"] threw an unexpected exception/error\";\n                Debug.logError(t, errMsg, module);\n                engine.sendCallbacks(service, context, t, GenericEngine.ASYNC_MODE);\n                try {\n                    TransactionUtil.rollback(beganTrans, errMsg, t);\n                } catch (GenericTransactionException te) {\n                    Debug.logError(te, \"Cannot rollback transaction\", module);\n                }\n                checkDebug(service, 0, debugging);\n                if (t instanceof ServiceAuthException) {\n                    throw (ServiceAuthException) t;\n                } else if (t instanceof ServiceValidationException) {\n                    throw (ServiceValidationException) t;\n                } else if (t instanceof GenericServiceException) {\n                    throw (GenericServiceException) t;\n                } else {\n                    throw new GenericServiceException(\"Service [\" + service.name + \"] Failed\" + service.debugInfo() , t);\n                }\n            } finally {\n                // always try to commit the transaction since we don't know in this case if its was an error or not\n                try {\n                    TransactionUtil.commit(beganTrans);\n                } catch (GenericTransactionException e) {\n                    Debug.logError(e, \"Could not commit transaction\", module);\n                    throw new GenericServiceException(\"Commit transaction failed\");\n                }\n            }\n        } catch (GenericTransactionException se) {\n            Debug.logError(se, \"Problems with the transaction\", module);\n            throw new GenericServiceException(\"Problems with the transaction: \" + se.getMessage() + \"; See logs for more detail\");\n        } finally {\n            // resume the parent transaction\n            if (parentTransaction != null) {\n                try {\n                    TransactionUtil.resume(parentTransaction);\n                } catch (GenericTransactionException ise) {\n                    Debug.logError(ise, \"Trouble resuming parent transaction\", module);\n                    throw new GenericServiceException(\"Resume transaction exception: \" + ise.getMessage() + \"; See logs for more detail\");\n                }\n            }\n        }\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map testServiceLockWaitTimeoutRetry(DispatchContext dctx, Map context) {\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // NOTE using persist=false so that the lock retry will have to fix the problem instead of the job poller picking it up again\n            GenericResultWaiter grabberWaiter = dispatcher.runAsyncWait(\"testServiceLockWaitTimeoutRetryGrabber\", null, false);\n            GenericResultWaiter waiterWaiter = dispatcher.runAsyncWait(\"testServiceLockWaitTimeoutRetryWaiter\", null, false);\n            // make sure to wait for these to both finish to make sure results aren't checked until they are done\n            grabberWaiter.waitForResult();\n            waiterWaiter.waitForResult();\n        } catch (Exception e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","id":5348,"modified_method":"public static Map testServiceLockWaitTimeoutRetry(DispatchContext dctx, Map context) {\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // NOTE using persist=false so that the lock retry will have to fix the problem instead of the job poller picking it up again\n            GenericResultWaiter grabberWaiter = dispatcher.runAsyncWait(\"testServiceLockWaitTimeoutRetryGrabber\", null, false);\n            GenericResultWaiter waiterWaiter = dispatcher.runAsyncWait(\"testServiceLockWaitTimeoutRetryWaiter\", null, false);\n            // make sure to wait for these to both finish to make sure results aren't checked until they are done\n            Map grabberResult = grabberWaiter.waitForResult();\n            Map waiterResult = waiterWaiter.waitForResult();\n            List errorList = FastList.newInstance();\n            if (ServiceUtil.isError(grabberResult)) {\n                errorList.add(\"Error running testServiceLockWaitTimeoutRetryGrabber: \" + ServiceUtil.getErrorMessage(grabberResult));\n            }\n            if (ServiceUtil.isError(waiterResult)) {\n                errorList.add(\"Error running testServiceLockWaitTimeoutRetryWaiter: \" + ServiceUtil.getErrorMessage(waiterResult));\n            }\n            if (errorList.size() > 0) {\n                return ServiceUtil.returnError(\"Error(s) running sub-services in testServiceLockWaitTimeoutRetry\", errorList, null, null);\n            }\n        } catch (Exception e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"/**\n     * NOTE that this is a funny case where the auto-retry in the service engine for the call to\n     * testServiceLockWaitTimeoutRetryCantRecoverWaiter would NOT be able to recover because it would try again\n     * given the new transaction and all, but the lock for the waiting thread would still be there... so it will fail \n     * repeatedly.\n     * \n     * TODO: there's got to be some way to do this, but how?!? :(\n     * \n     * @param dctx\n     * @param context\n     * @return\n     */\n    public static Map testServiceLockWaitTimeoutRetryCantRecover(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // grab entity SVCLWTRTCR by changing, then wait a LONG time, ie more than the wait timeout\n            GenericValue testingType = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLWTRTCR\"));\n            testingType.set(\"description\", \"New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.\");\n            testingType.store();\n\n            Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction\", module);\n            // timeout is 5 seconds so it is longer than the tx timeout for this service, so will fail quickly; with this transaction keeping a lock on the record and that one trying to get it, bam we cause the error\n            dispatcher.runSync(\"testServiceLockWaitTimeoutRetryCantRecoverWaiter\", null, 5, true);\n            \n            Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction\", module);\n        } catch (GenericServiceException e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running lock wait timeout test main/Grabber thread: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","id":5349,"modified_method":"/**\n     * NOTE that this is a funny case where the auto-retry in the service engine for the call to\n     * testServiceLockWaitTimeoutRetryCantRecoverWaiter would NOT be able to recover because it would try again\n     * given the new transaction and all, but the lock for the waiting thread would still be there... so it will fail \n     * repeatedly.\n     * \n     * TODO: there's got to be some way to do this, but how?!? :(\n     * \n     * @param dctx\n     * @param context\n     * @return\n     */\n    public static Map testServiceLockWaitTimeoutRetryCantRecover(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // grab entity SVCLWTRTCR by changing, then wait a LONG time, ie more than the wait timeout\n            GenericValue testingType = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLWTRTCR\"));\n            testingType.set(\"description\", \"New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.\");\n            testingType.store();\n\n            Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction\", module);\n            // timeout is 5 seconds so it is longer than the tx timeout for this service, so will fail quickly; with this transaction keeping a lock on the record and that one trying to get it, bam we cause the error\n            Map waiterResult = dispatcher.runSync(\"testServiceLockWaitTimeoutRetryCantRecoverWaiter\", null, 5, true);\n            if (ServiceUtil.isError(waiterResult)) {\n                return ServiceUtil.returnError(\"Error running testServiceLockWaitTimeoutRetryCantRecoverWaiter\", null, null, waiterResult);\n            }\n            \n            Debug.logInfo(\"In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction\", module);\n        } catch (GenericServiceException e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running lock wait timeout test main/Grabber thread: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map testServiceDeadLockRetry(DispatchContext dctx, Map context) {\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // NOTE using persist=false so that the lock retry will have to fix the problem instead of the job poller picking it up again\n            GenericResultWaiter threadAWaiter = dispatcher.runAsyncWait(\"testServiceDeadLockRetryThreadA\", null, false);\n            GenericResultWaiter threadBWaiter = dispatcher.runAsyncWait(\"testServiceDeadLockRetryThreadB\", null, false);\n            // make sure to wait for these to both finish to make sure results aren't checked until they are done\n            threadAWaiter.waitForResult();\n            threadBWaiter.waitForResult();\n        } catch (Exception e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","id":5350,"modified_method":"public static Map testServiceDeadLockRetry(DispatchContext dctx, Map context) {\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        try {\n            // NOTE using persist=false so that the lock retry will have to fix the problem instead of the job poller picking it up again\n            GenericResultWaiter threadAWaiter = dispatcher.runAsyncWait(\"testServiceDeadLockRetryThreadA\", null, false);\n            GenericResultWaiter threadBWaiter = dispatcher.runAsyncWait(\"testServiceDeadLockRetryThreadB\", null, false);\n            // make sure to wait for these to both finish to make sure results aren't checked until they are done\n            Map threadAResult = threadAWaiter.waitForResult();\n            Map threadBResult = threadBWaiter.waitForResult();\n            List errorList = FastList.newInstance();\n            if (ServiceUtil.isError(threadAResult)) {\n                errorList.add(\"Error running testServiceDeadLockRetryThreadA: \" + ServiceUtil.getErrorMessage(threadAResult));\n            }\n            if (ServiceUtil.isError(threadBResult)) {\n                errorList.add(\"Error running testServiceDeadLockRetryThreadB: \" + ServiceUtil.getErrorMessage(threadBResult));\n            }\n            if (errorList.size() > 0) {\n                return ServiceUtil.returnError(\"Error(s) running sub-services in testServiceDeadLockRetry\", errorList, null, null);\n            }\n        } catch (Exception e) {\n            String errMsg = \"Error running deadlock test services: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n        \n        return ServiceUtil.returnSuccess();\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map testServiceDeadLockRetryThreadA(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n\n        try {\n            // grab entity SVCLRT_A by changing, then wait, then find and change SVCLRT_B\n            GenericValue testingTypeA = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_A\"));\n            testingTypeA.set(\"description\", \"New description for SVCLRT_A from Thread A\");\n            testingTypeA.store();\n            \n            // wait at least long enough for the other method to have locked resource B\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadA just updated SVCLRT_A, beginning wait\", module);\n            UtilMisc.staticWait(100);\n\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadA done with wait, updating SVCLRT_B\", module);\n            GenericValue testingTypeB = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_B\"));\n            testingTypeB.set(\"description\", \"New description for SVCLRT_B from Thread A\");\n            testingTypeB.store();\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running dead lock test thread A: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        } catch (InterruptedException e) {\n            String errMsg = \"Wait Interrupted Exception running dead lock test thread A: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n\n        return ServiceUtil.returnSuccess();\n    }","id":5351,"modified_method":"public static Map testServiceDeadLockRetryThreadA(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n\n        try {\n            // grab entity SVCLRT_A by changing, then wait, then find and change SVCLRT_B\n            GenericValue testingTypeA = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_A\"));\n            testingTypeA.set(\"description\", \"New description for SVCLRT_A\");\n            testingTypeA.store();\n            \n            // wait at least long enough for the other method to have locked resource B\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadA just updated SVCLRT_A, beginning wait\", module);\n            UtilMisc.staticWait(100);\n\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadA done with wait, updating SVCLRT_B\", module);\n            GenericValue testingTypeB = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_B\"));\n            testingTypeB.set(\"description\", \"New description for SVCLRT_B\");\n            testingTypeB.store();\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running dead lock test thread A: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        } catch (InterruptedException e) {\n            String errMsg = \"Wait Interrupted Exception running dead lock test thread A: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n\n        return ServiceUtil.returnSuccess();\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"public static Map testServiceDeadLockRetryThreadB(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n\n        try {\n            // grab entity SVCLRT_B by changing, then wait, then change SVCLRT_A\n            GenericValue testingTypeB = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_B\"));\n            testingTypeB.set(\"description\", \"New description for SVCLRT_B from Thread B\");\n            testingTypeB.store();\n            \n            // wait at least long enough for the other method to have locked resource B\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadB just updated SVCLRT_B, beginning wait\", module);\n            UtilMisc.staticWait(100);\n\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadB done with wait, updating SVCLRT_A\", module);\n            GenericValue testingTypeA = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_A\"));\n            testingTypeA.set(\"description\", \"New description for SVCLRT_A from Thread B\");\n            testingTypeA.store();\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running dead lock test thread B: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        } catch (InterruptedException e) {\n            String errMsg = \"Wait Interrupted Exception running dead lock test thread B: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n\n        return ServiceUtil.returnSuccess();\n    }","id":5352,"modified_method":"public static Map testServiceDeadLockRetryThreadB(DispatchContext dctx, Map context) {\n        GenericDelegator delegator = dctx.getDelegator();\n\n        try {\n            // grab entity SVCLRT_B by changing, then wait, then change SVCLRT_A\n            GenericValue testingTypeB = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_B\"));\n            testingTypeB.set(\"description\", \"New description for SVCLRT_B\");\n            testingTypeB.store();\n            \n            // wait at least long enough for the other method to have locked resource B\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadB just updated SVCLRT_B, beginning wait\", module);\n            UtilMisc.staticWait(100);\n\n            Debug.logInfo(\"In testServiceDeadLockRetryThreadB done with wait, updating SVCLRT_A\", module);\n            GenericValue testingTypeA = delegator.findByPrimaryKey(\"TestingType\", UtilMisc.toMap(\"testingTypeId\", \"SVCLRT_A\"));\n            testingTypeA.set(\"description\", \"New description for SVCLRT_A\");\n            testingTypeA.store();\n        } catch (GenericEntityException e) {\n            String errMsg = \"Entity Engine Exception running dead lock test thread B: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        } catch (InterruptedException e) {\n            String errMsg = \"Wait Interrupted Exception running dead lock test thread B: \" + e.toString();\n            Debug.logError(e, errMsg, module);\n            return ServiceUtil.returnError(errMsg);\n        }\n\n        return ServiceUtil.returnSuccess();\n    }","commit_id":"2dff97a51ed01c7fcbeb21a04a8292aa66e9098e","url":"https://github.com/apache/ofbiz"},{"original_method":"public static void setInstance(\n\t\tAttributesTransformer attributesTransformer) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(attributesTransformer));\n\t\t}\n\n\t\tif (attributesTransformer == null) {\n\t\t\t_attributesTransformer = _originalAttributesTransformer;\n\t\t}\n\t\telse {\n\t\t\t_attributesTransformer = attributesTransformer;\n\t\t}\n\t}","id":5353,"modified_method":"public static void setInstance(\n\t\tAttributesTransformer attributesTransformer) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(attributesTransformer));\n\t\t}\n\n\t\t_attributesTransformer = attributesTransformer;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static AttributesTransformer getInstance() {\n\t\tif (_originalAttributesTransformer == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.LDAP_ATTRS_TRANSFORMER_IMPL);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalAttributesTransformer =\n\t\t\t\t\t(AttributesTransformer)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.LDAP_ATTRS_TRANSFORMER_IMPL);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_attributesTransformer == null) {\n\t\t\t_attributesTransformer = _originalAttributesTransformer;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + _attributesTransformer.getClass().getName());\n\t\t}\n\n\t\treturn _attributesTransformer;\n\t}","id":5354,"modified_method":"public static AttributesTransformer getInstance() {\n\t\tif (_attributesTransformer == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.LDAP_ATTRS_TRANSFORMER_IMPL);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_attributesTransformer =\n\t\t\t\t\t(AttributesTransformer)classLoader.loadClass(\n\t\t\t\t\t\tPropsValues.LDAP_ATTRS_TRANSFORMER_IMPL).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + _attributesTransformer.getClass().getName());\n\t\t}\n\n\t\treturn _attributesTransformer;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(ControlPanelEntry controlPanelEntryFactory) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Set \" + ClassUtil.getClassName(controlPanelEntryFactory));\n\t\t}\n\n\t\tif (controlPanelEntryFactory == null) {\n\t\t\t_controlPanelEntry = _originalControlPanelEntry;\n\t\t}\n\t\telse {\n\t\t\t_controlPanelEntry = controlPanelEntryFactory;\n\t\t}\n\t}","id":5355,"modified_method":"public static void setInstance(ControlPanelEntry controlPanelEntryFactory) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Set \" + ClassUtil.getClassName(controlPanelEntryFactory));\n\t\t}\n\n\t\t_controlPanelEntry = controlPanelEntryFactory;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ControlPanelEntry getInstance() {\n\t\tif (_originalControlPanelEntry == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" +\n\t\t\t\t\t\tPropsValues.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalControlPanelEntry =\n\t\t\t\t\t(ControlPanelEntry)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader,\n\t\t\t\t\t\tPropsValues.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_controlPanelEntry == null) {\n\t\t\t_controlPanelEntry = _originalControlPanelEntry;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_controlPanelEntry));\n\t\t}\n\n\t\treturn _controlPanelEntry;\n\t}","id":5356,"modified_method":"public static ControlPanelEntry getInstance() {\n\t\tif (_controlPanelEntry == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" +\n\t\t\t\t\t\tPropsValues.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_controlPanelEntry = (ControlPanelEntry)classLoader.loadClass(\n\t\t\t\t\tPropsValues.CONTROL_PANEL_DEFAULT_ENTRY_CLASS).\n\t\t\t\t\t\tnewInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_controlPanelEntry));\n\t\t}\n\n\t\treturn _controlPanelEntry;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static EmailAddressGenerator getInstance() {\n\t\tif (_originalEmailAddressGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_EMAIL_ADDRESS_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalEmailAddressGenerator =\n\t\t\t\t\t(EmailAddressGenerator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_EMAIL_ADDRESS_GENERATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_emailAddressGenerator == null) {\n\t\t\t_emailAddressGenerator = _originalEmailAddressGenerator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_emailAddressGenerator));\n\t\t}\n\n\t\treturn _emailAddressGenerator;\n\t}","id":5357,"modified_method":"public static EmailAddressGenerator getInstance() {\n\t\tif (_emailAddressGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_EMAIL_ADDRESS_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_emailAddressGenerator =\n\t\t\t\t\t(EmailAddressGenerator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_EMAIL_ADDRESS_GENERATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_emailAddressGenerator));\n\t\t}\n\n\t\treturn _emailAddressGenerator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(\n\t\tEmailAddressGenerator emailAddressGenerator) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(emailAddressGenerator));\n\t\t}\n\n\t\tif (emailAddressGenerator == null) {\n\t\t\t_emailAddressGenerator = _originalEmailAddressGenerator;\n\t\t}\n\t\telse {\n\t\t\t_emailAddressGenerator = emailAddressGenerator;\n\t\t}\n\t}","id":5358,"modified_method":"public static void setInstance(\n\t\tEmailAddressGenerator emailAddressGenerator) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(emailAddressGenerator));\n\t\t}\n\n\t\t_emailAddressGenerator = emailAddressGenerator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static EmailAddressValidator getInstance() {\n\t\tif (_originalEmailAddressValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_EMAIL_ADDRESS_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalEmailAddressValidator =\n\t\t\t\t\t(EmailAddressValidator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_EMAIL_ADDRESS_VALIDATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_emailAddressValidator == null) {\n\t\t\t_emailAddressValidator = _originalEmailAddressValidator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_emailAddressValidator));\n\t\t}\n\n\t\treturn _emailAddressValidator;\n\t}","id":5359,"modified_method":"public static EmailAddressValidator getInstance() {\n\t\tif (_emailAddressValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_EMAIL_ADDRESS_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_emailAddressValidator =\n\t\t\t\t\t(EmailAddressValidator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_EMAIL_ADDRESS_VALIDATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_emailAddressValidator));\n\t\t}\n\n\t\treturn _emailAddressValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(\n\t\tEmailAddressValidator emailAddressValidator) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(emailAddressValidator));\n\t\t}\n\n\t\tif (emailAddressValidator == null) {\n\t\t\t_emailAddressValidator = _originalEmailAddressValidator;\n\t\t}\n\t\telse {\n\t\t\t_emailAddressValidator = emailAddressValidator;\n\t\t}\n\t}","id":5360,"modified_method":"public static void setInstance(\n\t\tEmailAddressValidator emailAddressValidator) {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(emailAddressValidator));\n\t\t}\n\n\t\t_emailAddressValidator = emailAddressValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static FullNameGenerator getInstance() {\n\t\tif (_originalFullNameGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_FULL_NAME_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalFullNameGenerator =\n\t\t\t\t\t(FullNameGenerator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_FULL_NAME_GENERATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_fullNameGenerator == null) {\n\t\t\t_fullNameGenerator = _originalFullNameGenerator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_fullNameGenerator));\n\t\t}\n\n\t\treturn _fullNameGenerator;\n\t}","id":5361,"modified_method":"public static FullNameGenerator getInstance() {\n\t\tif (_fullNameGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_FULL_NAME_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_fullNameGenerator =\n\t\t\t\t\t(FullNameGenerator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_FULL_NAME_GENERATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_fullNameGenerator));\n\t\t}\n\n\t\treturn _fullNameGenerator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(FullNameGenerator fullNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(fullNameValidator));\n\t\t}\n\n\t\tif (fullNameValidator == null) {\n\t\t\t_fullNameGenerator = _originalFullNameGenerator;\n\t\t}\n\t\telse {\n\t\t\t_fullNameGenerator = fullNameValidator;\n\t\t}\n\t}","id":5362,"modified_method":"public static void setInstance(FullNameGenerator fullNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(fullNameValidator));\n\t\t}\n\n\t\t_fullNameGenerator = fullNameValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(FullNameValidator fullNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(fullNameValidator));\n\t\t}\n\n\t\tif (fullNameValidator == null) {\n\t\t\t_fullNameValidator = _originalFullNameValidator;\n\t\t}\n\t\telse {\n\t\t\t_fullNameValidator = fullNameValidator;\n\t\t}\n\t}","id":5363,"modified_method":"public static void setInstance(FullNameValidator fullNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(fullNameValidator));\n\t\t}\n\n\t\t_fullNameValidator = fullNameValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static FullNameValidator getInstance() {\n\t\tif (_originalFullNameValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_FULL_NAME_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalFullNameValidator =\n\t\t\t\t\t(FullNameValidator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_FULL_NAME_VALIDATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_fullNameValidator == null) {\n\t\t\t_fullNameValidator = _originalFullNameValidator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_fullNameValidator));\n\t\t}\n\n\t\treturn _fullNameValidator;\n\t}","id":5364,"modified_method":"public static FullNameValidator getInstance() {\n\t\tif (_fullNameValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_FULL_NAME_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_fullNameValidator =\n\t\t\t\t\t(FullNameValidator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_FULL_NAME_VALIDATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_fullNameValidator));\n\t\t}\n\n\t\treturn _fullNameValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Hook getInstance() {\n\t\tif (_originalHook == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Instantiate \" + PropsValues.MAIL_HOOK_IMPL);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalHook = (Hook)InstanceFactory.newInstance(\n\t\t\t\t\tclassLoader, PropsValues.MAIL_HOOK_IMPL);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_hook == null) {\n\t\t\t_hook = _originalHook;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + _hook.getClass().getName());\n\t\t}\n\n\t\treturn _hook;\n\t}","id":5365,"modified_method":"public static Hook getInstance() {\n\t\tif (_hook == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Instantiate \" + PropsValues.MAIL_HOOK_IMPL);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_hook = (Hook)classLoader.loadClass(\n\t\t\t\t\tPropsValues.MAIL_HOOK_IMPL).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + _hook.getClass().getName());\n\t\t}\n\n\t\treturn _hook;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(Hook hook) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(hook));\n\t\t}\n\n\t\tif (hook == null) {\n\t\t\t_hook = _originalHook;\n\t\t}\n\t\telse {\n\t\t\t_hook = hook;\n\t\t}\n\t}","id":5366,"modified_method":"public static void setInstance(Hook hook) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(hook));\n\t\t}\n\n\t\t_hook = hook;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(MembershipPolicy membershipPolicy) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(membershipPolicy));\n\t\t}\n\n\t\tif (membershipPolicy == null) {\n\t\t\t_membershipPolicy = _originalMembershipPolicy;\n\t\t}\n\t\telse {\n\t\t\t_membershipPolicy = membershipPolicy;\n\t\t}\n\t}","id":5367,"modified_method":"public static void setInstance(MembershipPolicy membershipPolicy) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(membershipPolicy));\n\t\t}\n\n\t\t_membershipPolicy = membershipPolicy;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static MembershipPolicy getInstance() {\n\t\tif (_originalMembershipPolicy == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_MEMBERSHIP_POLICY);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalMembershipPolicy =\n\t\t\t\t\t(MembershipPolicy)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_MEMBERSHIP_POLICY);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_membershipPolicy == null) {\n\t\t\t_membershipPolicy = _originalMembershipPolicy;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_membershipPolicy));\n\t\t}\n\n\t\treturn _membershipPolicy;\n\t}","id":5368,"modified_method":"public static MembershipPolicy getInstance() {\n\t\tif (_membershipPolicy == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_MEMBERSHIP_POLICY);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_membershipPolicy =\n\t\t\t\t\t(MembershipPolicy)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_MEMBERSHIP_POLICY);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Return \" + ClassUtil.getClassName(_membershipPolicy));\n\t\t}\n\n\t\treturn _membershipPolicy;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(ScreenNameGenerator screenNameGenerator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(screenNameGenerator));\n\t\t}\n\n\t\tif (screenNameGenerator == null) {\n\t\t\t_screenNameGenerator = _originalScreenNameGenerator;\n\t\t}\n\t\telse {\n\t\t\t_screenNameGenerator = screenNameGenerator;\n\t\t}\n\t}","id":5369,"modified_method":"public static void setInstance(ScreenNameGenerator screenNameGenerator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(screenNameGenerator));\n\t\t}\n\n\t\t_screenNameGenerator = screenNameGenerator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ScreenNameGenerator getInstance() {\n\t\tif (_originalScreenNameGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_SCREEN_NAME_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalScreenNameGenerator =\n\t\t\t\t\t(ScreenNameGenerator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_SCREEN_NAME_GENERATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_screenNameGenerator == null) {\n\t\t\t_screenNameGenerator = _originalScreenNameGenerator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_screenNameGenerator));\n\t\t}\n\n\t\treturn _screenNameGenerator;\n\t}","id":5370,"modified_method":"public static ScreenNameGenerator getInstance() {\n\t\tif (_screenNameGenerator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_SCREEN_NAME_GENERATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_screenNameGenerator =\n\t\t\t\t\t(ScreenNameGenerator)classLoader.loadClass(\n\t\t\t\t\t\tPropsValues.USERS_SCREEN_NAME_GENERATOR).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_screenNameGenerator));\n\t\t}\n\n\t\treturn _screenNameGenerator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setInstance(ScreenNameValidator screenNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(screenNameValidator));\n\t\t}\n\n\t\tif (screenNameValidator == null) {\n\t\t\t_screenNameValidator = _originalScreenNameValidator;\n\t\t}\n\t\telse {\n\t\t\t_screenNameValidator = screenNameValidator;\n\t\t}\n\t}","id":5371,"modified_method":"public static void setInstance(ScreenNameValidator screenNameValidator) {\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Set \" + ClassUtil.getClassName(screenNameValidator));\n\t\t}\n\n\t\t_screenNameValidator = screenNameValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ScreenNameValidator getInstance() {\n\t\tif (_originalScreenNameValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_SCREEN_NAME_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_originalScreenNameValidator =\n\t\t\t\t\t(ScreenNameValidator)InstanceFactory.newInstance(\n\t\t\t\t\t\tclassLoader, PropsValues.USERS_SCREEN_NAME_VALIDATOR);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_screenNameValidator == null) {\n\t\t\t_screenNameValidator = _originalScreenNameValidator;\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_screenNameValidator));\n\t\t}\n\n\t\treturn _screenNameValidator;\n\t}","id":5372,"modified_method":"public static ScreenNameValidator getInstance() {\n\t\tif (_screenNameValidator == null) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Instantiate \" + PropsValues.USERS_SCREEN_NAME_VALIDATOR);\n\t\t\t}\n\n\t\t\tClassLoader classLoader =\n\t\t\t\tPACLClassLoaderUtil.getPortalClassLoader();\n\n\t\t\ttry {\n\t\t\t\t_screenNameValidator =\n\t\t\t\t\t(ScreenNameValidator)classLoader.loadClass(\n\t\t\t\t\t\tPropsValues.USERS_SCREEN_NAME_VALIDATOR).newInstance();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\n\t\t\t\t\"Return \" + ClassUtil.getClassName(_screenNameValidator));\n\t\t}\n\n\t\treturn _screenNameValidator;\n\t}","commit_id":"b45f32ba028f0fcd14761a481065ece826bc6852","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addSelectedCategory(String selectedCategory) {\n      selectedCategories.add(selectedCategory);\n    }","id":5373,"modified_method":"protected void addSelectedCategory(String category) {\n      selectedCategories.add(category);\n    }","commit_id":"9ead83b39b886443f6d89f416e14a34f97a5350a","url":"https://github.com/Jasig/uPortal"},{"original_method":"public static void main(String[] args) throws Exception {\n    UtilitiesBean.setPortalBaseDir(\"D:\\\\Projects\\\\JA-SIG\\\\uPortal2\\\\\");\n    org.jasig.portal.IChannelRegistryStore chanReg = org.jasig.portal.RdbmServices.getChannelRegistryStoreImpl();\n\n    // Getting the channel types...\n    Document channelTypes = chanReg.getChannelTypesXML();\n    //System.out.println(UtilitiesBean.dom2PrettyString(channelTypes));\n\n    // Getting the channel registry...\n    Document channelRegistry = chanReg.getChannelRegistryXML();\n    //System.out.println(UtilitiesBean.dom2PrettyString(channelRegistry));\n\n    // Getting the CPDDoc...\n    Document cpdDoc = getCPDDoc(\"3\");\n    System.out.println(UtilitiesBean.dom2PrettyString(cpdDoc));\n  }","id":5374,"modified_method":"public static void main(String[] args) throws Exception {\n    UtilitiesBean.setPortalBaseDir(\"C:\\\\Projects\\\\JA-SIG\\\\uPortal2\\\\\");\n    org.jasig.portal.IChannelRegistryStore chanReg = org.jasig.portal.RdbmServices.getChannelRegistryStoreImpl();\n\n    // Getting the channel types...\n    Document channelTypes = chanReg.getChannelTypesXML();\n    //System.out.println(UtilitiesBean.dom2PrettyString(channelTypes));\n\n    // Getting the channel registry...\n    Document channelRegistry = chanReg.getChannelRegistryXML();\n    //System.out.println(UtilitiesBean.dom2PrettyString(channelRegistry));\n\n    // Getting the CPDDoc...\n    Document cpdDoc = getCPDDoc(\"3\");\n    System.out.println(UtilitiesBean.dom2PrettyString(cpdDoc));\n  }","commit_id":"9ead83b39b886443f6d89f416e14a34f97a5350a","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected void doCapture() {\n    stepID = runtimeData.getParameter(\"uPCM_step\");\n    String capture = runtimeData.getParameter(\"uPCM_capture\");\n    if (capture != null) {\n      // Channel types\n      if (capture.equals(\"selectChannelType\")) {\n        String typeID = runtimeData.getParameter(\"ID\");\n        if (typeID != null) {\n          if (!typeID.equals(channelDef.getTypeID())) {\n            channelDef.setTypeID(typeID);\n            channelDef.removeParameters();\n          }\n        }\n        else\n          action = \"selectChannelType\";\n      // General Settings (name and timeout)\n      } else if (capture.equals(\"selectGeneralSettings\")) {\n        String name = runtimeData.getParameter(\"name\");\n        String timeout = runtimeData.getParameter(\"timeout\");\n        if (name != null)\n          channelDef.setName(name);\n        if (timeout != null)\n          channelDef.setTimeout(timeout);\n      // Custom parameters\n      } else if (capture.equals(\"customSettings\")) {\n        String subAction = runtimeData.getParameter(\"uPCM_subAction\");\n        if (subAction != null) {\n          String name = runtimeData.getParameter(\"name\");\n          if (subAction.equals(\"addParameter\")) {\n            String value = runtimeData.getParameter(\"value\");\n            String override = runtimeData.getParameter(\"override\");\n            channelDef.addParameter(name, value, (override != null ? \"yes\" : \"no\"));\n          }\n          else if (subAction.equals(\"deleteParameter\")) {\n            channelDef.removeParameter(name);\n          }\n        }\n      // CPD parameters\n      } else if (capture.equals(\"channelDef\")) {\n        Iterator iter = ((java.util.Hashtable)runtimeData).keySet().iterator();\n        while (iter.hasNext()) {\n          String name = (String)iter.next();\n\n          // Ignore parameters whose name starts with \"uPCM_\"\n          if (name.startsWith(\"uPCM_\"))\n            continue;\n\n          String value = runtimeData.getParameter(name);\n          String override = runtimeData.getParameter(name + \"_sub\");\n          channelDef.addParameter(name, value, (override != null ? \"yes\" : \"no\"));\n        }\n      // Channel controls\n      } else if (capture.equals(\"selectControls\")) {\n        String minimizable = runtimeData.getParameter(\"minimizable\");\n        channelDef.setMinimizable(minimizable != null ? \"true\" : \"false\");\n        String editable = runtimeData.getParameter(\"editable\");\n        channelDef.setEditable(editable != null ? \"true\" : \"false\");\n        String hasHelp = runtimeData.getParameter(\"hasHelp\");\n        channelDef.setHasHelp(hasHelp != null ? \"true\" : \"false\");\n        String hasAbout = runtimeData.getParameter(\"hasAbout\");\n        channelDef.setHasAbout(hasAbout != null ? \"true\" : \"false\");\n        String printable = runtimeData.getParameter(\"printable\");\n        channelDef.setPrintable(printable != null ? \"true\" : \"false\");\n        String removable = runtimeData.getParameter(\"removable\");\n        channelDef.setRemovable(removable != null ? \"true\" : \"false\");\n        String detachable = runtimeData.getParameter(\"detachable\");\n        channelDef.setDetachable(detachable != null ? \"true\" : \"false\");\n      // Categories\n      } else if (capture.equals(\"selectCategories\")) {\n        String selectedCategory = runtimeData.getParameter(\"selectedCategory\");\n        if (selectedCategory != null && selectedCategory.trim().length() > 0) {\n          if (runtimeData.getParameter(\"uPCM_browse\") != null)\n            categorySettings.setBrowsingCategory(selectedCategory);\n          else // runtimeData.getParameter(\"uPCM_select\") != null\n            categorySettings.addSelectedCategory(selectedCategory);\n        }\n      // Roles\n      } else if (capture.equals(\"selectRoles\")) {\n        String[] roles = runtimeData.getParameterValues(\"selectedRoles\");\n        if (roles != null) {\n          for (int i = 0; i < roles.length; i++) {\n            roleSettings.addSelectedRole(roles[i]);\n          }\n        }\n      }\n    }\n  }","id":5375,"modified_method":"protected void doCapture() {\n    stepID = runtimeData.getParameter(\"uPCM_step\");\n    String capture = runtimeData.getParameter(\"uPCM_capture\");\n    if (capture != null) {\n      // Channel types\n      if (capture.equals(\"selectChannelType\")) {\n        String typeID = runtimeData.getParameter(\"ID\");\n        if (typeID != null) {\n          if (!typeID.equals(channelDef.getTypeID())) {\n            channelDef.setTypeID(typeID);\n            channelDef.removeParameters();\n          }\n        }\n        else\n          action = \"selectChannelType\";\n      // General Settings (name and timeout)\n      } else if (capture.equals(\"selectGeneralSettings\")) {\n        String name = runtimeData.getParameter(\"name\");\n        String timeout = runtimeData.getParameter(\"timeout\");\n        if (name != null)\n          channelDef.setName(name);\n        if (timeout != null)\n          channelDef.setTimeout(timeout);\n      // Custom parameters\n      } else if (capture.equals(\"customSettings\")) {\n        String subAction = runtimeData.getParameter(\"uPCM_subAction\");\n        if (subAction != null) {\n          String name = runtimeData.getParameter(\"name\");\n          if (subAction.equals(\"addParameter\")) {\n            String value = runtimeData.getParameter(\"value\");\n            String override = runtimeData.getParameter(\"override\");\n            channelDef.addParameter(name, value, (override != null ? \"yes\" : \"no\"));\n          }\n          else if (subAction.equals(\"deleteParameter\")) {\n            channelDef.removeParameter(name);\n          }\n        }\n      // CPD parameters\n      } else if (capture.equals(\"channelDef\")) {\n        Iterator iter = ((java.util.Hashtable)runtimeData).keySet().iterator();\n        while (iter.hasNext()) {\n          String name = (String)iter.next();\n\n          // Ignore parameters whose name starts with \"uPCM_\"\n          if (name.startsWith(\"uPCM_\"))\n            continue;\n\n          String value = runtimeData.getParameter(name);\n          String override = runtimeData.getParameter(name + \"_sub\");\n          channelDef.addParameter(name, value, (override != null ? \"yes\" : \"no\"));\n        }\n      // Channel controls\n      } else if (capture.equals(\"selectControls\")) {\n        String minimizable = runtimeData.getParameter(\"minimizable\");\n        channelDef.setMinimizable(minimizable != null ? \"true\" : \"false\");\n        String editable = runtimeData.getParameter(\"editable\");\n        channelDef.setEditable(editable != null ? \"true\" : \"false\");\n        String hasHelp = runtimeData.getParameter(\"hasHelp\");\n        channelDef.setHasHelp(hasHelp != null ? \"true\" : \"false\");\n        String hasAbout = runtimeData.getParameter(\"hasAbout\");\n        channelDef.setHasAbout(hasAbout != null ? \"true\" : \"false\");\n        String printable = runtimeData.getParameter(\"printable\");\n        channelDef.setPrintable(printable != null ? \"true\" : \"false\");\n        String removable = runtimeData.getParameter(\"removable\");\n        channelDef.setRemovable(removable != null ? \"true\" : \"false\");\n        String detachable = runtimeData.getParameter(\"detachable\");\n        channelDef.setDetachable(detachable != null ? \"true\" : \"false\");\n      // Categories\n      } else if (capture.equals(\"selectCategories\")) {\n        String selectedCategory = runtimeData.getParameter(\"selectedCategory\");\n        if (selectedCategory != null && selectedCategory.trim().length() > 0) {\n          if (runtimeData.getParameter(\"uPCM_browse\") != null)\n            categorySettings.setBrowsingCategory(selectedCategory);\n          else // runtimeData.getParameter(\"uPCM_select\") != null\n            categorySettings.addSelectedCategory(selectedCategory);\n        }\n        String removeCategory = runtimeData.getParameter(\"removeCategory\");\n        if (removeCategory != null)\n          categorySettings.removeCategory(removeCategory);\n      // Roles\n      } else if (capture.equals(\"selectRoles\")) {\n        String[] roles = runtimeData.getParameterValues(\"selectedRoles\");\n        roleSettings.removeRoles();\n        if (roles != null) {\n          for (int i = 0; i < roles.length; i++) {\n            roleSettings.addSelectedRole(roles[i]);\n          }\n        }\n      }\n    }\n  }","commit_id":"9ead83b39b886443f6d89f416e14a34f97a5350a","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected void doAction () throws PortalException {\n    if (action != null) {\n      if (action.equals(\"selectChannelType\")) {\n        state = CHANNEL_TYPE_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add channel types and channel def\n        WorkflowSection chanTypeSection = new WorkflowSection(\"selectChannelType\");\n        WorkflowStep step = new WorkflowStep(\"1\", \"Channel Type\");\n        step.addDataElement(ChannelRegistryManager.getChannelTypes().getDocumentElement());\n        step.addDataElement(channelDef.toXML());\n        chanTypeSection.addStep(step);\n        workflow.setChannelTypesSection(chanTypeSection);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectGeneralSettings\")) {\n\n        state = GENERAL_SETTINGS_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add General Settings section\n        WorkflowSection gsSection = new WorkflowSection(\"selectGeneralSettings\");\n        workflow.setGeneralSettingsSection(gsSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"General Settings\");\n        step.addDataElement(channelDef.toXML());\n        gsSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"channelParams\") || action.equals(\"customSettings\") || action.equals(\"channelDef\")) {\n\n        Workflow workflow = new Workflow();\n\n        // Add CPD document if channel is \"generic\", otherwise custom settings\n        if (channelDef.getTypeID().equals(\"-1\")) {\n          state = CUSTOM_SETTINGS_STATE;\n          WorkflowSection csSection = new WorkflowSection(\"customSettings\");\n          WorkflowStep step = new WorkflowStep(\"1\", \"Channel Parameters\");\n          step.addDataElement(channelDef.toXML());\n          csSection.addStep(step);\n          workflow.setChannelParamsSection(csSection);\n        } else {\n          state = CHANNEL_DEF_STATE;\n          CPDWorkflowSection cpdSection = new CPDWorkflowSection(channelDef.getTypeID());\n          cpdSection.addToStep(channelDef.toXML(), fixStepID(stepID));\n          workflow.setChannelParamsSection(cpdSection);\n        }\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectControls\")) {\n\n        state = CHANNEL_CONTROLS_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add controlsSection\n        WorkflowSection controlsSection = new WorkflowSection(\"selectControls\");\n        if (channelDef.getMinimizable() == null) // if one is null, they are all null\n          channelDef.resetChannelControls();\n        WorkflowStep step = new WorkflowStep(\"1\", \"Channel Controls\");\n        step.addDataElement(channelDef.toXML());\n        controlsSection.addStep(step);\n        workflow.setControlsSection(controlsSection);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectCategories\")) {\n\n        state = CHANNEL_CATEGORIES_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add channel registry\n        WorkflowSection catSection = new WorkflowSection(\"selectCategories\");\n        workflow.setCategoriesSection(catSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"Categories\");\n        step.addDataElement(ChannelRegistryManager.getChannelRegistry().getDocumentElement());\n        // Add user settings with previously chosen categories\n        step.addDataElement(categorySettings.toXML());\n        catSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectRoles\")) {\n\n        state = CHANNEL_ROLES_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add roles\n        WorkflowSection roleSection = new WorkflowSection(\"selectRoles\");\n        workflow.setRolesSection(roleSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"Roles\");\n        step.addDataElement(getRoles().getDocumentElement());\n        // Add user settings with previously chosen roles\n        step.addDataElement(roleSettings.toXML());\n        roleSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"reviewChannel\")) {\n\n        state = CHANNEL_REVIEW_STATE;\n        Workflow workflow = new Workflow();\n\n        WorkflowSection reviewSection = new WorkflowSection(\"reviewChannel\");\n        workflow.setReviewSection(reviewSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"Review\");\n\n        // Channel Definition\n        step.addDataElement(channelDef.toXML());\n        // Selected categories\n        // Channel registry\n        step.addDataElement(ChannelRegistryManager.getChannelRegistry().getDocumentElement());\n        // Selected roles\n        step.addDataElement(roleSettings.toXML());\n        // Channel types\n        step.addDataElement(ChannelRegistryManager.getChannelTypes().getDocumentElement());\n\n        reviewSection.addStep(step);\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectModifyChannel\")) {\n\n        state = MODIFY_CHANNEL_STATE;\n        channelManagerDoc = getChannelManagerDoc(userSettings);\n      } else if (action.equals(\"changePage\")) {\n        String newPage = runtimeData.getParameter(\"newPage\");\n        if (newPage != null) {\n          userSettings.setCurrentPage(newPage);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      } else if (action.equals(\"changeRecordsPerPage\")) {\n        String recordsPerPage = runtimeData.getParameter(\"recordsPerPage\");\n        if (recordsPerPage != null) {\n          userSettings.setRecordsPerPage(recordsPerPage);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      } else if (action.equals(\"filterByCategory\")) {\n        String filterByID = runtimeData.getParameter(\"newCategory\");\n        if (filterByID != null) {\n          userSettings.setFilterByID(filterByID);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      }\n    }\n\n    if (action == null || action.equals(\"cancel\")) {\n      state = DEFAULT_STATE;\n      channelManagerDoc = emptyDoc;\n      channelDef = new ChannelDefinition();\n      categorySettings = new CategorySettings();\n      roleSettings = new RoleSettings();\n    }\n  }","id":5376,"modified_method":"protected void doAction () throws PortalException {\n    if (action != null) {\n      if (action.equals(\"selectChannelType\")) {\n        state = CHANNEL_TYPE_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add channel types and channel def\n        WorkflowSection chanTypeSection = new WorkflowSection(\"selectChannelType\");\n        WorkflowStep step = new WorkflowStep(\"1\", \"Channel Type\");\n        step.addDataElement(ChannelRegistryManager.getChannelTypes().getDocumentElement());\n        step.addDataElement(channelDef.toXML());\n        chanTypeSection.addStep(step);\n        workflow.setChannelTypesSection(chanTypeSection);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectGeneralSettings\")) {\n\n        state = GENERAL_SETTINGS_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add General Settings section\n        WorkflowSection gsSection = new WorkflowSection(\"selectGeneralSettings\");\n        workflow.setGeneralSettingsSection(gsSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"General Settings\");\n        step.addDataElement(channelDef.toXML());\n        gsSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"channelParams\") || action.equals(\"customSettings\") || action.equals(\"channelDef\")) {\n\n        Workflow workflow = new Workflow();\n\n        // Add CPD document if channel is \"generic\", otherwise custom settings\n        if (channelDef.getTypeID().equals(\"-1\")) {\n          state = CUSTOM_SETTINGS_STATE;\n          WorkflowSection csSection = new WorkflowSection(\"customSettings\");\n          WorkflowStep step = new WorkflowStep(\"1\", \"Channel Parameters\");\n          step.addDataElement(channelDef.toXML());\n          csSection.addStep(step);\n          workflow.setChannelParamsSection(csSection);\n        } else {\n          state = CHANNEL_DEF_STATE;\n          CPDWorkflowSection cpdSection = new CPDWorkflowSection(channelDef.getTypeID());\n          cpdSection.addToStep(channelDef.toXML(), fixStepID(stepID));\n          workflow.setChannelParamsSection(cpdSection);\n        }\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectControls\")) {\n\n        state = CHANNEL_CONTROLS_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add controlsSection\n        WorkflowSection controlsSection = new WorkflowSection(\"selectControls\");\n        if (channelDef.getMinimizable() == null) // if one is null, they are all null\n          channelDef.resetChannelControls();\n        WorkflowStep step = new WorkflowStep(\"1\", \"Channel Controls\");\n        step.addDataElement(channelDef.toXML());\n        controlsSection.addStep(step);\n        workflow.setControlsSection(controlsSection);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectCategories\")) {\n\n        state = CHANNEL_CATEGORIES_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add channel registry\n        WorkflowSection catSection = new WorkflowSection(\"selectCategories\");\n        workflow.setCategoriesSection(catSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"Categories\");\n        step.addDataElement(ChannelRegistryManager.getChannelRegistry().getDocumentElement());\n        // Add user settings with previously chosen categories\n        step.addDataElement(categorySettings.toXML());\n        catSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectRoles\")) {\n\n        state = CHANNEL_ROLES_STATE;\n        Workflow workflow = new Workflow();\n\n        // Add roles\n        WorkflowSection roleSection = new WorkflowSection(\"selectRoles\");\n        workflow.setRolesSection(roleSection);\n        WorkflowStep step = new WorkflowStep(\"1\", \"Roles\");\n        step.addDataElement(getRoles().getDocumentElement());\n        // Add user settings with previously chosen roles\n        step.addDataElement(roleSettings.toXML());\n        roleSection.addStep(step);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"reviewChannel\")) {\n\n        state = CHANNEL_REVIEW_STATE;\n        Workflow workflow = new Workflow();\n\n        // Channel types\n        WorkflowSection ctSection = new WorkflowSection(\"selectChannelType\");\n        WorkflowStep ctStep = new WorkflowStep(\"1\", \"Channel Type\");\n        ctStep.addDataElement(ChannelRegistryManager.getChannelTypes().getDocumentElement());\n        ctSection.addStep(ctStep);\n        workflow.setChannelTypesSection(ctSection);\n\n        // Selected categories\n        WorkflowSection regSection = new WorkflowSection(\"selectCategories\");\n        WorkflowStep regStep = new WorkflowStep(\"1\", \"Categories\");\n        regStep.addDataElement(ChannelRegistryManager.getChannelRegistry().getDocumentElement());\n        regStep.addDataElement(categorySettings.toXML());\n        regSection.addStep(regStep);\n        workflow.setCategoriesSection(regSection);\n\n        // Selected roles\n        WorkflowSection roleSection = new WorkflowSection(\"selectRoles\");\n        WorkflowStep rolesStep = new WorkflowStep(\"1\", \"Roles\");\n        rolesStep.addDataElement(roleSettings.toXML());\n        roleSection.addStep(rolesStep);\n        workflow.setRolesSection(roleSection);\n\n        // Review (with channel definition)\n        WorkflowSection reviewSection = new WorkflowSection(\"reviewChannel\");\n        WorkflowStep step = new WorkflowStep(\"1\", \"Review\");\n        step.addDataElement(channelDef.toXML());\n        reviewSection.addStep(step);\n        workflow.setReviewSection(reviewSection);\n\n        channelManagerDoc = workflow.toXML();\n\n      } else if (action.equals(\"selectModifyChannel\")) {\n\n        state = MODIFY_CHANNEL_STATE;\n        channelManagerDoc = getChannelManagerDoc(userSettings);\n      } else if (action.equals(\"changePage\")) {\n        String newPage = runtimeData.getParameter(\"newPage\");\n        if (newPage != null) {\n          userSettings.setCurrentPage(newPage);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      } else if (action.equals(\"changeRecordsPerPage\")) {\n        String recordsPerPage = runtimeData.getParameter(\"recordsPerPage\");\n        if (recordsPerPage != null) {\n          userSettings.setRecordsPerPage(recordsPerPage);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      } else if (action.equals(\"filterByCategory\")) {\n        String filterByID = runtimeData.getParameter(\"newCategory\");\n        if (filterByID != null) {\n          userSettings.setFilterByID(filterByID);\n          channelManagerDoc = getChannelManagerDoc(userSettings);\n        }\n      }\n    }\n\n    if (action == null || action.equals(\"cancel\")) {\n      state = DEFAULT_STATE;\n      channelManagerDoc = emptyDoc;\n      channelDef = new ChannelDefinition();\n      categorySettings = new CategorySettings();\n      roleSettings = new RoleSettings();\n    }\n  }","commit_id":"9ead83b39b886443f6d89f416e14a34f97a5350a","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected RoleSettings() {\n      selectedRoles = new ArrayList();\n    }","id":5377,"modified_method":"protected RoleSettings() {\n      selectedRoles = new TreeSet();\n    }","commit_id":"9ead83b39b886443f6d89f416e14a34f97a5350a","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override public void connectToNode(DiscoveryNode node) {\n        if (!lifecycle.started()) {\n            throw new ElasticSearchIllegalStateException(\"Can't add nodes to a stopped transport\");\n        }\n        if (node == null) {\n            throw new ConnectTransportException(null, \"Can't connect to a null node\");\n        }\n        try {\n            NodeChannels nodeChannels = connectedNodes.get(node);\n            if (nodeChannels != null) {\n                return;\n            }\n            synchronized (this) {\n                // recheck here, within the sync block (we cache connections, so we don't care about this single sync block)\n                nodeChannels = connectedNodes.get(node);\n                if (nodeChannels != null) {\n                    return;\n                }\n\n                nodeChannels = new NodeChannels(new Channel[connectionsPerNodeLow], new Channel[connectionsPerNodeMed], new Channel[connectionsPerNodeHigh]);\n                try {\n                    connectToChannels(nodeChannels, node);\n                } catch (Exception e) {\n                    nodeChannels.close();\n                    throw e;\n                }\n\n                connectedNodes.put(node, nodeChannels);\n\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Connected to node [{}]\", node);\n                }\n            }\n            transportServiceAdapter.raiseNodeConnected(node);\n        } catch (ConnectTransportException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new ConnectTransportException(node, \"General node connection failure\", e);\n        }\n    }","id":5378,"modified_method":"@Override public void connectToNode(DiscoveryNode node) {\n        if (!lifecycle.started()) {\n            throw new ElasticSearchIllegalStateException(\"Can't add nodes to a stopped transport\");\n        }\n        if (node == null) {\n            throw new ConnectTransportException(null, \"Can't connect to a null node\");\n        }\n        try {\n            NodeChannels nodeChannels = connectedNodes.get(node);\n            if (nodeChannels != null) {\n                return;\n            }\n\n            nodeChannels = new NodeChannels(new Channel[connectionsPerNodeLow], new Channel[connectionsPerNodeMed], new Channel[connectionsPerNodeHigh]);\n            try {\n                connectToChannels(nodeChannels, node);\n            } catch (Exception e) {\n                nodeChannels.close();\n                throw e;\n            }\n\n            NodeChannels existing = connectedNodes.putIfAbsent(node, nodeChannels);\n            if (existing != null) {\n                // we are already connected to a node, close this ones\n                nodeChannels.close();\n            } else {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Connected to node [{}]\", node);\n                }\n                transportServiceAdapter.raiseNodeConnected(node);\n            }\n\n        } catch (ConnectTransportException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new ConnectTransportException(node, \"General node connection failure\", e);\n        }\n    }","commit_id":"fff78d6a38fe6e67813c94e7767c6e15e16d59ca","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject public ThreadPool(Settings settings) {\n        super(settings);\n\n        Map<String, Settings> groupSettings = settings.getGroups(\"threadpool\");\n\n        Map<String, Executor> executors = Maps.newHashMap();\n        executors.put(Names.CACHED, build(Names.CACHED, \"cached\", groupSettings.get(Names.CACHED), settingsBuilder().put(\"keep_alive\", \"5m\").build()));\n        executors.put(Names.INDEX, build(Names.INDEX, \"cached\", groupSettings.get(Names.INDEX), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.SEARCH, build(Names.SEARCH, \"cached\", groupSettings.get(Names.SEARCH), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.PERCOLATE, build(Names.PERCOLATE, \"cached\", groupSettings.get(Names.PERCOLATE), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.MANAGEMENT, build(Names.MANAGEMENT, \"scaling\", groupSettings.get(Names.MANAGEMENT), settingsBuilder().put(\"keep_alive\", \"5m\").put(\"size\", 20).build()));\n        executors.put(Names.MERGE, build(Names.MERGE, \"scaling\", groupSettings.get(Names.MERGE), settingsBuilder().put(\"keep_alive\", \"5m\").put(\"size\", 20).build()));\n        executors.put(Names.SNAPSHOT, build(Names.SNAPSHOT, \"scaling\", groupSettings.get(Names.SNAPSHOT), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.SAME, MoreExecutors.sameThreadExecutor());\n        this.executors = ImmutableMap.copyOf(executors);\n        this.scheduler = Executors.newScheduledThreadPool(1, EsExecutors.daemonThreadFactory(settings, \"[scheduler]\"));\n\n        TimeValue estimatedTimeInterval = componentSettings.getAsTime(\"estimated_time_interval\", TimeValue.timeValueMillis(200));\n        this.estimatedTimeThread = new EstimatedTimeThread(EsExecutors.threadName(settings, \"[timer]\"), estimatedTimeInterval.millis());\n        this.estimatedTimeThread.start();\n    }","id":5379,"modified_method":"@Inject public ThreadPool(Settings settings) {\n        super(settings);\n\n        Map<String, Settings> groupSettings = settings.getGroups(\"threadpool\");\n\n        Map<String, Executor> executors = Maps.newHashMap();\n        executors.put(Names.CACHED, build(Names.CACHED, \"cached\", groupSettings.get(Names.CACHED), settingsBuilder().put(\"keep_alive\", \"30s\").build()));\n        executors.put(Names.INDEX, build(Names.INDEX, \"cached\", groupSettings.get(Names.INDEX), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.SEARCH, build(Names.SEARCH, \"cached\", groupSettings.get(Names.SEARCH), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.PERCOLATE, build(Names.PERCOLATE, \"cached\", groupSettings.get(Names.PERCOLATE), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.MANAGEMENT, build(Names.MANAGEMENT, \"scaling\", groupSettings.get(Names.MANAGEMENT), settingsBuilder().put(\"keep_alive\", \"5m\").put(\"size\", 20).build()));\n        executors.put(Names.MERGE, build(Names.MERGE, \"scaling\", groupSettings.get(Names.MERGE), settingsBuilder().put(\"keep_alive\", \"5m\").put(\"size\", 20).build()));\n        executors.put(Names.SNAPSHOT, build(Names.SNAPSHOT, \"scaling\", groupSettings.get(Names.SNAPSHOT), ImmutableSettings.Builder.EMPTY_SETTINGS));\n        executors.put(Names.SAME, MoreExecutors.sameThreadExecutor());\n        this.executors = ImmutableMap.copyOf(executors);\n        this.scheduler = Executors.newScheduledThreadPool(1, EsExecutors.daemonThreadFactory(settings, \"[scheduler]\"));\n\n        TimeValue estimatedTimeInterval = componentSettings.getAsTime(\"estimated_time_interval\", TimeValue.timeValueMillis(200));\n        this.estimatedTimeThread = new EstimatedTimeThread(EsExecutors.threadName(settings, \"[timer]\"), estimatedTimeInterval.millis());\n        this.estimatedTimeThread.start();\n    }","commit_id":"fff78d6a38fe6e67813c94e7767c6e15e16d59ca","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n   * Add a new root-procedure to the executor.\n   * @param proc the new procedure to execute.\n   * @param nonceGroup\n   * @param nonce\n   * @return the procedure id, that can be used to monitor the operation\n   */\n  public long submitProcedure(\n      final Procedure proc,\n      final long nonceGroup,\n      final long nonce) {\n    Preconditions.checkArgument(proc.getState() == ProcedureState.INITIALIZING);\n    Preconditions.checkArgument(isRunning());\n    Preconditions.checkArgument(lastProcId.get() >= 0);\n    Preconditions.checkArgument(!proc.hasParent());\n\n    Long currentProcId;\n\n    // The following part of the code has to be synchronized to prevent multiple request\n    // with the same nonce to execute at the same time.\n    synchronized (this) {\n      // Check whether the proc exists.  If exist, just return the proc id.\n      // This is to prevent the same proc to submit multiple times (it could happen\n      // when client could not talk to server and resubmit the same request).\n      NonceKey noncekey = null;\n      if (nonce != HConstants.NO_NONCE) {\n        noncekey = new NonceKey(nonceGroup, nonce);\n        currentProcId = nonceKeysToProcIdsMap.get(noncekey);\n        if (currentProcId != null) {\n          // Found the proc\n          return currentProcId;\n        }\n      }\n\n      // Initialize the Procedure ID\n      currentProcId = nextProcId();\n      proc.setProcId(currentProcId);\n\n      // This is new procedure. Set the noncekey and insert into the map.\n      if (noncekey != null) {\n        proc.setNonceKey(noncekey);\n        nonceKeysToProcIdsMap.put(noncekey, currentProcId);\n      }\n    } // end of synchronized (this)\n\n    // Commit the transaction\n    store.insert(proc, null);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Procedure \" + proc + \" added to the store.\");\n    }\n\n    // Create the rollback stack for the procedure\n    RootProcedureState stack = new RootProcedureState();\n    rollbackStack.put(currentProcId, stack);\n\n    // Submit the new subprocedures\n    assert !procedures.containsKey(currentProcId);\n    procedures.put(currentProcId, proc);\n    sendProcedureAddedNotification(currentProcId);\n    runnables.addBack(proc);\n    return currentProcId;\n  }","id":5380,"modified_method":"/**\n   * Add a new root-procedure to the executor.\n   * @param proc the new procedure to execute.\n   * @param nonceGroup\n   * @param nonce\n   * @return the procedure id, that can be used to monitor the operation\n   */\n  public long submitProcedure(\n      final Procedure proc,\n      final long nonceGroup,\n      final long nonce) {\n    Preconditions.checkArgument(proc.getState() == ProcedureState.INITIALIZING);\n    Preconditions.checkArgument(isRunning());\n    Preconditions.checkArgument(lastProcId.get() >= 0);\n    Preconditions.checkArgument(!proc.hasParent());\n\n    // Initialize the Procedure ID\n    long currentProcId = nextProcId();\n    proc.setProcId(currentProcId);\n\n    // Check whether the proc exists.  If exist, just return the proc id.\n    // This is to prevent the same proc to submit multiple times (it could happen\n    // when client could not talk to server and resubmit the same request).\n    if (nonce != HConstants.NO_NONCE) {\n      NonceKey noncekey = new NonceKey(nonceGroup, nonce);\n      proc.setNonceKey(noncekey);\n\n      Long oldProcId = nonceKeysToProcIdsMap.putIfAbsent(noncekey, currentProcId);\n      if (oldProcId != null) {\n        // Found the proc\n        return oldProcId.longValue();\n      }\n    }\n\n    // Commit the transaction\n    store.insert(proc, null);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Procedure \" + proc + \" added to the store.\");\n    }\n\n    // Create the rollback stack for the procedure\n    RootProcedureState stack = new RootProcedureState();\n    rollbackStack.put(currentProcId, stack);\n\n    // Submit the new subprocedures\n    assert !procedures.containsKey(currentProcId);\n    procedures.put(currentProcId, proc);\n    sendProcedureAddedNotification(currentProcId);\n    runnables.addBack(proc);\n    return currentProcId;\n  }","commit_id":"bfca2a460694bb2abc720a582318bee4ddc29c0f","url":"https://github.com/apache/hbase"},{"original_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","id":5381,"modified_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            msgLog.logMessage( \"newMaster( \" + master + \") called\", e );\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5382,"modified_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5383,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5384,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5385,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5386,"modified_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5387,"modified_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","id":5388,"modified_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n//                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n//                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n//                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","commit_id":"ca27c23662255af20ae1ed72f765fa252db953ad","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","id":5389,"modified_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            msgLog.logMessage( \"newMaster( \" + master + \") called\", e );\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5390,"modified_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5391,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5392,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5393,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5394,"modified_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5395,"modified_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","id":5396,"modified_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n//                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n//                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n//                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","commit_id":"907a43e7da4d6d958b10812aea79c972bc82376b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","id":5397,"modified_method":"public void newMaster( Pair<Master, Machine> master, Exception e )\n    {\n        try\n        {\n            msgLog.logMessage( \"newMaster( \" + master + \") called\", e );\n            reevaluateMyself( master );\n        }\n        catch ( ZooKeeperException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( HaCommunicationException ee )\n        {\n            ee.printStackTrace();\n        }\n        catch ( Throwable t )\n        {\n            t.printStackTrace();\n            msgLog.logMessage( \"Reevaluation ended in unknown exception \" + t\n                    + \" so shutting down\" );\n            shutdown();\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5398,"modified_method":"public synchronized long nextId()\n    {\n        try\n        {\n            long nextId = nextLocalId();\n            if ( nextId == VALUE_REPRESENTING_NULL )\n            {\n                // If we dont have anymore grabbed ids from master, grab a bunch \n                IdAllocation allocation = broker.getMaster().first().allocateIds( idType );\n                nextId = storeLocally( allocation );\n            }\n            return nextId;\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5399,"modified_method":"@Override\n    public void getWriteLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        // Code copied from getReadLock. Fix!\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getWriteLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipWriteLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                        \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getWriteLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5400,"modified_method":"@Override\n    public void getReadLock( Object resource ) throws DeadlockDetectedException,\n            IllegalResourceException\n    {\n        try\n        {\n            Node node = resource instanceof Node ? (Node) resource : null;\n            Relationship relationship = resource instanceof Relationship ?\n                    (Relationship) resource : null;\n            if ( node == null && relationship == null )\n            {\n                // This is a \"fake\" resource, only grab the lock locally\n                super.getReadLock( resource );\n                return;\n            }\n            \n            LockResult result = null;\n            do\n            {\n                int eventIdentifier = getLocalTxId();\n                result = node != null ?\n                        receiver.receive( broker.getMaster().first().acquireNodeReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), node.getId() ) ) :\n                        receiver.receive( broker.getMaster().first().acquireRelationshipReadLock(\n                                receiver.getSlaveContext( eventIdentifier ), relationship.getId() ) );\n                            \n                switch ( result.getStatus() )\n                {\n                case OK_LOCKED:\n                    super.getReadLock( resource );\n                    return;\n                case DEAD_LOCKED:\n                    throw new DeadlockDetectedException( result.getDeadlockMessage() );\n                }\n            }\n            while ( result.getStatus() == LockStatus.NOT_LOCKED );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5401,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        try\n        {\n            int eventIdentifier = ((TxManager) txManager).getEventIdentifier();\n            return receiver.receive( broker.getMaster().first().createRelationshipType(\n                    receiver.getSlaveContext( eventIdentifier ), name ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5402,"modified_method":"public long generate( XaDataSource dataSource, int identifier )\n    {\n        try\n        {\n            int eventIdentifier = txManager.getEventIdentifier();\n            Pair<Long, ReadableByteChannel> tx = new Pair<Long, ReadableByteChannel>( -1L,\n                    dataSource.getPreparedTransaction( identifier ) );\n            Response<Long> response = broker.getMaster().first().commitSingleResourceTransaction(\n                    receiver.getSlaveContext( eventIdentifier ),\n                    dataSource.getName(), new TransactionStream( Arrays.asList( tx ) ) );\n            return receiver.receive( response );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( broker.getMaster(), e );\n            throw e;\n        }\n    }","id":5403,"modified_method":"public void finishTransaction( int eventIdentifier )\n    {\n        try\n        {\n            receiver.receive( broker.getMaster().first().finishTransaction(\n                    receiver.getSlaveContext( eventIdentifier ) ) );\n        }\n        catch ( ZooKeeperException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n        catch ( HaCommunicationException e )\n        {\n            receiver.newMaster( null, e );\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","id":5404,"modified_method":"public void process( WatchedEvent event )\n    {\n        try\n        {\n            String path = event.getPath();\n            msgLog.logMessage( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + path + \")\" );\n            if ( path == null && event.getState() == Watcher.Event.KeeperState.Expired )\n            {\n                keeperState = KeeperState.Expired;\n                zooKeeper = instantiateZooKeeper();\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected )\n            {\n                Pair<Master, Machine> masterBeforeIWrite = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master before write:\" + masterBeforeIWrite );\n                sequenceNr = setup();\n                msgLog.logMessage( \"Did setup, seq=\" + sequenceNr );\n                keeperState = KeeperState.SyncConnected;\n                Pair<Master, Machine> masterAfterIWrote = getMasterFromZooKeeper( false );\n                msgLog.logMessage( \"Get master after write:\" + masterAfterIWrote );\n                int masterId = masterAfterIWrote.other().getMachineId();\n//                if ( masterBeforeIWrite.other().getMachineId() != masterId && masterId != machineId )\n//                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, masterId );\n//                }\n                receiver.newMaster( masterAfterIWrote, new Exception() );\n            }\n            else if ( path == null && event.getState() == Watcher.Event.KeeperState.Disconnected )\n            {\n                keeperState = KeeperState.Disconnected;\n            }\n            else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n            {\n                Pair<Master, Machine> currentMaster = getMasterFromZooKeeper( true );\n                if ( path.contains( MASTER_NOTIFY_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_NOTIFY_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() == machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else if ( path.contains( MASTER_REBOUND_CHILD ) )\n                {\n                    setDataChangeWatcher( MASTER_REBOUND_CHILD, -1 );\n                    if ( currentMaster.other().getMachineId() != machineId )\n                    {\n                        receiver.newMaster( currentMaster, new Exception() );\n                    }\n                }\n                else\n                {\n                    msgLog.logMessage( \"Unrecognized data change \" + path );\n                }\n            }\n        }\n        catch ( RuntimeException e )\n        {\n            msgLog.logMessage( \"Error in ZooClient.process\", e );\n            e.printStackTrace();\n            throw e;\n        }\n    }","commit_id":"38c770ba7c1e7994b1af70c7ff35b75da4b75a04","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final AndDescr andDescr = (AndDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final Object parent = it.previous();\r\n\r\n        if ( parent.getClass() == RuleDescr.class || parent.getClass() == QueryDescr.class ) {\r\n            final RuleDescr ruleDescr = (RuleDescr) parent;\r\n            ruleDescr.setLhs( andDescr );\r\n        } else {\r\n            final ConditionalElementDescr ceDescr = (ConditionalElementDescr) parent;\r\n            ceDescr.addDescr( andDescr );\r\n        }\r\n\r\n        return null;\r\n    }","id":5405,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final AndDescr andDescr = (AndDescr) this.xmlPackageReader.getCurrent();\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n        final Object parent = it.previous();\n        \n        \n        if (parent instanceof RuleDescr || parent instanceof QueryDescr) {            \n            final RuleDescr ruleDescr = (RuleDescr) parent;\n            ruleDescr.setLhs( andDescr );\n        } else if ( parent instanceof ConditionalElementDescr ) {\n            final ConditionalElementDescr ceDescr = (ConditionalElementDescr) parent;\n            ceDescr.addDescr( andDescr );\n        }\n        \n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"AndHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( QueryDescr.class );\r\n            this.validParents.add( RuleDescr.class );\r\n            this.validParents.add( OrDescr.class );\r\n            this.validParents.add( AndDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( AndDescr.class );\r\n            this.validPeers.add( OrDescr.class );\r\n            this.validPeers.add( NotDescr.class );\r\n            this.validPeers.add( ExistsDescr.class );\r\n            this.validPeers.add( EvalDescr.class );\r\n            this.validPeers.add( PatternDescr.class );\r\n\r\n            this.allowNesting = true;\r\n        }\r\n    }","id":5406,"modified_method":"AndHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( QueryDescr.class );\n            this.validParents.add( RuleDescr.class );\n            this.validParents.add( OrDescr.class );\n            this.validParents.add( AndDescr.class );\n            this.validParents.add( LiteralRestrictionHandler.class );\n\n\n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( AndDescr.class );\n            this.validPeers.add( OrDescr.class );\n            this.validPeers.add( NotDescr.class );\n            this.validPeers.add( ExistsDescr.class );\n            this.validPeers.add( EvalDescr.class );\n            this.validPeers.add( PatternDescr.class );\n\n            this.allowNesting = true;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRoundTripXml() throws Exception {\n\n        XmlPackageReader xmlPackageReader = new XmlPackageReader();\n        xmlPackageReader.read( new InputStreamReader( getClass().getResourceAsStream( \"test_ParseRule.xml\" ) ) );\n        final PackageDescr pkgOriginal = xmlPackageReader.getPackageDescr();\n\n        final XmlDumper dumper = new XmlDumper();\n        final String result = dumper.dump( pkgOriginal );\n        assertNotNull( result );\n\n        //now lest slurp it back up\n        xmlPackageReader = new XmlPackageReader();\n        final PackageDescr pkgDumped = xmlPackageReader.read( new StringReader( result ) );\n\n        assertEquals( pkgOriginal.getName(),\n                      pkgDumped.getName() );\n        assertEquals( pkgOriginal.getFunctions().size(),\n                      pkgDumped.getFunctions().size() );\n        assertEquals( pkgOriginal.getRules().size(),\n                      pkgDumped.getRules().size() );\n        assertEquals( pkgOriginal.getGlobals().size(),\n                      pkgDumped.getGlobals().size() );\n\n        final RuleDescr ruleOriginal = (RuleDescr) pkgOriginal.getRules().get( 0 );\n        final RuleDescr ruleDumped = (RuleDescr) pkgDumped.getRules().get( 0 );\n\n        assertEquals( ruleOriginal.getName(),\n                      ruleDumped.getName() );\n\n        assertEquals( ruleOriginal.getLhs().getDescrs().size(),\n                      ruleDumped.getLhs().getDescrs().size() );\n        assertEquals( ruleOriginal.getConsequence(),\n                      ruleDumped.getConsequence() );\n\n    }","id":5407,"modified_method":"public void testRoundTripXml() throws Exception {\n\n        XmlPackageReader xmlPackageReader = new XmlPackageReader();\n        xmlPackageReader.read( new InputStreamReader( getClass().getResourceAsStream( \"test_ParseRule.xml\" ) ) );\n        final PackageDescr pkgOriginal = xmlPackageReader.getPackageDescr();\n\n        final XmlDumper dumper = new XmlDumper();\n        final String result = dumper.dump( pkgOriginal );\n        \n        final BufferedReader reader = new BufferedReader( new InputStreamReader( getClass().getResourceAsStream( \"test_ParseRule.xml\" ) ) );\n        final StringBuffer buffer = new StringBuffer();\n        String s = null;\n        while ( (s = reader.readLine()) != null ) {\n            buffer.append( s );\n        }\n        \n        System.out.println(\"-------------------------\");\n        \n        System.out.println(result);\n        \n        System.out.println(\"-------------------------\");\n        \n        System.out.println(buffer);\n        \n        System.out.println(\"-------------------------\");\n        \n        assertEqualsIgnoreWhitespace( buffer.toString(),\n                                      result );\n\n        \n        \n        // TODO: FM need test dumped result\n        \n        assertNotNull( result );\n\n        //now lest slurp it back up\n        xmlPackageReader = new XmlPackageReader();\n        final PackageDescr pkgDumped = xmlPackageReader.read( new StringReader( result ) );\n\n        assertEquals( pkgOriginal.getName(),\n                      pkgDumped.getName() );\n        assertEquals( pkgOriginal.getFunctions().size(),\n                      pkgDumped.getFunctions().size() );\n        assertEquals( pkgOriginal.getRules().size(),\n                      pkgDumped.getRules().size() );\n        assertEquals( pkgOriginal.getGlobals().size(),\n                      pkgDumped.getGlobals().size() );\n\n        final RuleDescr ruleOriginal = (RuleDescr) pkgOriginal.getRules().get( 0 );\n        final RuleDescr ruleDumped = (RuleDescr) pkgDumped.getRules().get( 0 );\n\n        assertEquals( ruleOriginal.getName(),\n                      ruleDumped.getName() );\n\n        assertEquals( ruleOriginal.getLhs().getDescrs().size(),\n                      ruleDumped.getLhs().getDescrs().size() );\n        assertEquals( ruleOriginal.getConsequence(),\n                      ruleDumped.getConsequence() );\n\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRoundTripDrl() throws Exception {\n\n        DrlParser parser = new DrlParser();\n        final PackageDescr pkgOriginal = parser.parse( new InputStreamReader( getClass().getResourceAsStream( \"test_Dump.drl\" ) ) );\n        final DrlDumper dumper = new DrlDumper();\n        final String result = dumper.dump( pkgOriginal );\n        assertNotNull( result );\n\n        parser = new DrlParser();\n        final PackageDescr pkgDumped = parser.parse( new StringReader( result ) );\n\n        assertEquals( pkgOriginal.getName(),\n                      pkgDumped.getName() );\n        assertEquals( pkgOriginal.getFunctions().size(),\n                      pkgDumped.getFunctions().size() );\n        assertEquals( pkgOriginal.getRules().size(),\n                      pkgDumped.getRules().size() );\n        assertEquals( pkgOriginal.getGlobals().size(),\n                      pkgDumped.getGlobals().size() );\n\n        final RuleDescr ruleOriginal = (RuleDescr) pkgOriginal.getRules().get( 0 );\n        final RuleDescr ruleDumped = (RuleDescr) pkgDumped.getRules().get( 0 );\n\n        assertEquals( ruleOriginal.getName(),\n                      ruleDumped.getName() );\n\n        assertEquals( ruleOriginal.getLhs().getDescrs().size(),\n                      ruleDumped.getLhs().getDescrs().size() );\n        assertEquals( ruleOriginal.getConsequence(),\n                      ruleDumped.getConsequence() );\n\n        // Now double check the contents are the same\n        final BufferedReader reader = new BufferedReader( new InputStreamReader( getClass().getResourceAsStream( \"test_Dump.drl\" ) ) );\n        final StringBuffer buffer = new StringBuffer();\n        String s = null;\n        while ( (s = reader.readLine()) != null ) {\n            buffer.append( s );\n        }\n\n        assertEqualsIgnoreWhitespace( buffer.toString(),\n                                      result );\n\n    }","id":5408,"modified_method":"public void testRoundTripDrl() throws Exception {\n\n        DrlParser parser = new DrlParser();\n        final PackageDescr pkgOriginal = parser.parse( new InputStreamReader( getClass().getResourceAsStream( \"test_Dump.drl\" ) ) );\n        final DrlDumper dumper = new DrlDumper();\n        \n        final XmlDumper XMLdumper = new XmlDumper();\n        final String XMLresult = XMLdumper.dump( pkgOriginal );\n        \n        System.out.println(XMLresult);\n        \n        final String result = dumper.dump( pkgOriginal );\n        \n        System.out.println(result);\n        \n        assertNotNull( result );\n\n        parser = new DrlParser();\n        final PackageDescr pkgDumped = parser.parse( new StringReader( result ) );\n\n        assertEquals( pkgOriginal.getName(),\n                      pkgDumped.getName() );\n        assertEquals( pkgOriginal.getFunctions().size(),\n                      pkgDumped.getFunctions().size() );\n        assertEquals( pkgOriginal.getRules().size(),\n                      pkgDumped.getRules().size() );\n        assertEquals( pkgOriginal.getGlobals().size(),\n                      pkgDumped.getGlobals().size() );\n\n        final RuleDescr ruleOriginal = (RuleDescr) pkgOriginal.getRules().get( 0 );\n        final RuleDescr ruleDumped = (RuleDescr) pkgDumped.getRules().get( 0 );\n\n        assertEquals( ruleOriginal.getName(),\n                      ruleDumped.getName() );\n\n        assertEquals( ruleOriginal.getLhs().getDescrs().size(),\n                      ruleDumped.getLhs().getDescrs().size() );\n        assertEquals( ruleOriginal.getConsequence(),\n                      ruleDumped.getConsequence() );\n        \n\n        // Now double check the contents are the same\n        final BufferedReader reader = new BufferedReader( new InputStreamReader( getClass().getResourceAsStream( \"test_Dump.drl\" ) ) );\n        final StringBuffer buffer = new StringBuffer();\n        String s = null;\n        while ( (s = reader.readLine()) != null ) {\n            buffer.append( s );\n        }\n        \n        System.out.println(result);\n        System.out.println(buffer);\n        \n\n        assertEqualsIgnoreWhitespace( buffer.toString(),\n                                      result );\n\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"FieldConstraintHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( PatternDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( FieldConstraintDescr.class );\r\n            this.validPeers.add( PredicateDescr.class );\r\n            this.validPeers.add( FieldBindingDescr.class );\r\n            this.allowNesting = false;\r\n        }\r\n    }","id":5409,"modified_method":"FieldConstraintHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( PatternDescr.class );\n            this.validParents.add( AndDescr.class );\n            this.validParents.add( OrDescr.class );\n\n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( FieldConstraintDescr.class );\n            this.validPeers.add( PredicateDescr.class );\n            this.validPeers.add( FieldBindingDescr.class );\n            \n            this.validPeers.add( AndDescr.class );\n            this.validPeers.add( OrDescr.class );\n            \n            this.allowNesting = false;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final Object parent = it.previous();\r\n\r\n        final PatternDescr patternDescr = (PatternDescr) parent;\r\n        patternDescr.addConstraint( fieldConstraintDescr );\r\n\r\n        return null;\r\n    }","id":5410,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        \n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) this.xmlPackageReader.getCurrent();\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n        final Object parent = it.previous();\n        \n        if ( parent instanceof PatternDescr )  { \n            final PatternDescr patternDescr = (PatternDescr) parent;\n            patternDescr.addConstraint( fieldConstraintDescr );\n        } else if ( parent instanceof ConditionalElementDescr ) {\n            final ConditionalElementDescr ceDescr = (ConditionalElementDescr) parent;\n            FieldConstraintDescr field = (FieldConstraintDescr) this.xmlPackageReader.getCurrent();\n            ceDescr.addOrMerge( field );\n        }\n\n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final LiteralRestrictionDescr literalDescr = (LiteralRestrictionDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final FieldConstraintDescr fieldConstriantDescr = (FieldConstraintDescr) it.previous();\r\n\r\n        fieldConstriantDescr.addRestriction( literalDescr );\r\n\r\n        return null;\r\n    }","id":5411,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final LiteralRestrictionDescr literalDescr = (LiteralRestrictionDescr) this.xmlPackageReader.getCurrent();\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n\n        //TODO: correct classcastexception in AndDescr.\n        \n        Object parent = it.previous();\n        \n        if (parent instanceof FieldConstraintDescr) {\n            final FieldConstraintDescr fieldConstriantDescr = (FieldConstraintDescr) parent;\n            fieldConstriantDescr.addRestriction( literalDescr );\n        } else if ( parent instanceof ConditionalElementDescr )  { \n            final ConditionalElementDescr conditionDescr = (ConditionalElementDescr) parent;\n            \n            \n            \n//            System.out.println(\"LiteralRestriction\");\n        }\n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"LiteralRestrictionHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( FieldConstraintDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( LiteralRestrictionDescr.class );\r\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\r\n            this.validPeers.add( VariableRestrictionDescr.class );\r\n            this.validPeers.add( RestrictionConnectiveDescr.class );\r\n            this.allowNesting = false;\r\n        }\r\n    }","id":5412,"modified_method":"LiteralRestrictionHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( FieldConstraintDescr.class );\n            this.validParents.add( AndDescr.class );\n            this.validParents.add( OrDescr.class );\n\n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( LiteralRestrictionDescr.class );\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\n            this.validPeers.add( VariableRestrictionDescr.class );\n            this.validPeers.add( RestrictionConnectiveDescr.class );\n            this.allowNesting = false;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final OrDescr orDescr = (OrDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final Object parent = it.previous();\r\n\r\n        final ConditionalElementDescr parentDescr = (ConditionalElementDescr) parent;\r\n        parentDescr.addDescr( orDescr );\r\n\r\n        return null;\r\n    }","id":5413,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final OrDescr orDescr = (OrDescr) this.xmlPackageReader.getCurrent();\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n        final Object parent = it.previous();\n        \n        if ( parent instanceof ConditionalElementDescr )  { \n\t        final ConditionalElementDescr parentDescr = (ConditionalElementDescr) parent;\n\t        parentDescr.addDescr( orDescr );\n        } else if ( parent instanceof PatternDescr ) {\n            final PatternDescr parentDescr = (PatternDescr) parent;\n            parentDescr.addConstraint( orDescr );\n        }\n        \n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"OrHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( AndDescr.class );\r\n            this.validParents.add( OrDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( AndDescr.class );\r\n            this.validPeers.add( OrDescr.class );\r\n            this.validPeers.add( NotDescr.class );\r\n            this.validPeers.add( ExistsDescr.class );\r\n            this.validPeers.add( EvalDescr.class );\r\n            this.validPeers.add( PatternDescr.class );\r\n\r\n            this.allowNesting = true;\r\n        }\r\n    }","id":5414,"modified_method":"OrHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( AndDescr.class );\n            this.validParents.add( PatternDescr.class );\n            \n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( AndDescr.class );\n            this.validPeers.add( OrDescr.class );\n            this.validPeers.add( NotDescr.class );\n            this.validPeers.add( ExistsDescr.class );\n            this.validPeers.add( EvalDescr.class );\n            this.validPeers.add( PatternDescr.class );\n\n            this.allowNesting = true;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object start(final String uri,\n                        final String localName,\n                        final Attributes attrs) throws SAXException {\n        this.xmlPackageReader.startConfiguration( localName,\n                                                  attrs );\n\n        final String connective = attrs.getValue( \"connective\" );\n        if ( connective == null || connective.trim().equals( \"\" ) ) {\n            throw new SAXParseException( \"<restriction-connective> requires a 'connective' attribute\",\n                                         this.xmlPackageReader.getLocator() );\n        }\n\n        RestrictionConnectiveDescr connectiveDescr = null;\n        if ( connective.equals( \"|\" ) ) {\n            connectiveDescr = new RestrictionConnectiveDescr( RestrictionConnectiveDescr.OR );\n        } else {\n            connectiveDescr = new RestrictionConnectiveDescr( RestrictionConnectiveDescr.AND );\n        }\n\n        return connectiveDescr;\n    }","id":5415,"modified_method":"public Object start(final String uri,\n                        final String localName,\n                        final Attributes attrs) throws SAXException {\n        this.xmlPackageReader.startConfiguration( localName,\n                                                  attrs );\n\n        final String connective = attrs.getValue( \"connective\" );\n        if ( connective == null || connective.trim().equals( \"\" ) ) {\n            throw new SAXParseException( \"<restriction-connective> requires a 'connective' attribute\",\n                                         this.xmlPackageReader.getLocator() );\n        }\n\n        RestrictionConnectiveDescr connectiveDescr = null;\n        if ( connective.equals( \"or\" ) ) {\n            connectiveDescr = new RestrictionConnectiveDescr( RestrictionConnectiveDescr.OR );\n        } else if (connective.equals( \"and\" )) {\n            connectiveDescr = new RestrictionConnectiveDescr( RestrictionConnectiveDescr.AND );\n        } else {\n            throw new SAXParseException( \"<connective-restriction> requires a valid 'connective' value (and,or): \" + connective,\n                                         this.xmlPackageReader.getLocator() );\n        }\n\n        return connectiveDescr;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"ReturnValueRestrictionHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( FieldConstraintDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( LiteralRestrictionDescr.class );\r\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\r\n            this.validPeers.add( VariableRestrictionDescr.class );\r\n            this.validPeers.add( RestrictionConnectiveDescr.class );\r\n            this.allowNesting = false;\r\n        }\r\n    }","id":5416,"modified_method":"ReturnValueRestrictionHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( FieldConstraintDescr.class );\n            this.validParents.add( AndDescr.class );\n            this.validParents.add( OrDescr.class );\n\n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( LiteralRestrictionDescr.class );\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\n            this.validPeers.add( VariableRestrictionDescr.class );\n            this.validPeers.add( RestrictionConnectiveDescr.class );\n            this.allowNesting = false;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final ReturnValueRestrictionDescr returnValueDescr = (ReturnValueRestrictionDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final String expression = config.getText();\r\n\r\n        if ( expression == null || expression.trim().equals( \"\" ) ) {\r\n            throw new SAXParseException( \"<return-value-restriction> must have some content\",\r\n                                         this.xmlPackageReader.getLocator() );\r\n        }\r\n\r\n        returnValueDescr.setContent( expression );\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) it.previous();\r\n\r\n        fieldConstraintDescr.addRestriction( returnValueDescr );\r\n\r\n        return null;\r\n    }","id":5417,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final ReturnValueRestrictionDescr returnValueDescr = (ReturnValueRestrictionDescr) this.xmlPackageReader.getCurrent();\n\n        final String expression = config.getText();\n\n        if ( expression == null || expression.trim().equals( \"\" ) ) {\n            throw new SAXParseException( \"<return-value-restriction> must have some content\",\n                                         this.xmlPackageReader.getLocator() );\n        }\n\n        returnValueDescr.setContent( expression );\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n        \n        Object parent = it.previous();\n        \n        //TODO: Again same problem with these parent shit\n        \n        if (parent instanceof FieldConstraintDescr) {\n\t        final FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) parent;\n\t        fieldConstraintDescr.addRestriction( returnValueDescr );\n        } else {\n            System.out.println(\"ReturnValueRestriction\");\n        }\n\n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"VariableRestrictionsHandler(final XmlPackageReader xmlPackageReader) {\r\n        this.xmlPackageReader = xmlPackageReader;\r\n\r\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\r\n            this.validParents = new HashSet();\r\n            this.validParents.add( FieldConstraintDescr.class );\r\n\r\n            this.validPeers = new HashSet();\r\n            this.validPeers.add( null );\r\n            this.validPeers.add( LiteralRestrictionDescr.class );\r\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\r\n            this.validPeers.add( VariableRestrictionDescr.class );\r\n            this.validPeers.add( RestrictionConnectiveDescr.class );\r\n            this.allowNesting = false;\r\n        }\r\n    }","id":5418,"modified_method":"VariableRestrictionsHandler(final XmlPackageReader xmlPackageReader) {\n        this.xmlPackageReader = xmlPackageReader;\n\n        if ( (this.validParents == null) && (this.validPeers == null) ) {\n            this.validParents = new HashSet();\n            this.validParents.add( FieldConstraintDescr.class );\n            this.validParents.add( AndDescr.class);\n            this.validParents.add( OrDescr.class);\n\n            this.validPeers = new HashSet();\n            this.validPeers.add( null );\n            this.validPeers.add( LiteralRestrictionDescr.class );\n            this.validPeers.add( ReturnValueRestrictionDescr.class );\n            this.validPeers.add( VariableRestrictionDescr.class );\n            this.validPeers.add( RestrictionConnectiveDescr.class );\n            this.allowNesting = false;\n        }\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object end(final String uri,\r\n                      final String localName) throws SAXException {\r\n        final Configuration config = this.xmlPackageReader.endConfiguration();\r\n\r\n        final VariableRestrictionDescr variableDescr = (VariableRestrictionDescr) this.xmlPackageReader.getCurrent();\r\n\r\n        final LinkedList parents = this.xmlPackageReader.getParents();\r\n        final ListIterator it = parents.listIterator( parents.size() );\r\n        it.previous();\r\n        final FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) it.previous();\r\n\r\n        fieldConstraintDescr.addRestriction( variableDescr );\r\n\r\n        return null;\r\n    }","id":5419,"modified_method":"public Object end(final String uri,\n                      final String localName) throws SAXException {\n        final Configuration config = this.xmlPackageReader.endConfiguration();\n\n        final VariableRestrictionDescr variableDescr = (VariableRestrictionDescr) this.xmlPackageReader.getCurrent();\n\n        final LinkedList parents = this.xmlPackageReader.getParents();\n        final ListIterator it = parents.listIterator( parents.size() );\n        it.previous();\n        \n        Object parent = it.previous();\n        \n        if ( parent instanceof FieldConstraintDescr ) {\n        \tfinal FieldConstraintDescr fieldConstraintDescr = (FieldConstraintDescr) parent;\n        \tfieldConstraintDescr.addRestriction( variableDescr );\n        } else {\n            System.out.println(\"variableRestriction class\");\n        }\n\n        return null;\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void visitPackageDescr(final PackageDescr packageDescr) {\r\n        final String packageName = packageDescr.getName();\r\n        final String xmlString = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \" + XmlDumper.eol + \" <package name=\\\"\" + packageName + \"\\\"  \" + XmlDumper.eol + \"\\txmlns=\\\"http://drools.org/drools-3.0\\\" \" + XmlDumper.eol\r\n                                 + \"\\txmlns:xs=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \" + XmlDumper.eol + \"\\txs:schemaLocation=\\\"http://drools.org/drools-3.0 drools-3.0.xsd\\\"> \" + XmlDumper.eol;\r\n        appendXmlDump( xmlString );\r\n        appendXmlDump( processImportsList( packageDescr.getImports() ) );\r\n        appendXmlDump( processGlobalsList( packageDescr.getGlobals() ) );\r\n        appendXmlDump( processFunctionsList( packageDescr.getFunctions() ) );\r\n        appendXmlDump( processRules( packageDescr.getRules() ) );\r\n        appendXmlDump( \"<\/package>\" );\r\n    }","id":5420,"modified_method":"public void visitPackageDescr(final PackageDescr packageDescr) {\r\n        final String packageName = packageDescr.getName();\r\n        final String xmlString = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \" + XmlDumper.eol + \" <package name=\\\"\" + packageName + \"\\\"  \" + XmlDumper.eol + \"\\txmlns=\\\"http://drools.org/drools-4.0\\\" \" + XmlDumper.eol\r\n                                 + \"\\txmlns:xs=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \" + XmlDumper.eol + \"\\txs:schemaLocation=\\\"http://drools.org/drools-4.0 drools-4.0.xsd\\\"> \" + XmlDumper.eol;\r\n        appendXmlDump( xmlString );\r\n        appendXmlDump( processImportsList( packageDescr.getImports() ) );\r\n        appendXmlDump( processGlobalsList( packageDescr.getGlobals() ) );\r\n        appendXmlDump( processFunctionsList( packageDescr.getFunctions() ) );\r\n        appendXmlDump( processRules( packageDescr.getRules() ) );\r\n        appendXmlDump( \"<\/package>\" );\r\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void visitRestrictionConnectiveDescr(final RestrictionConnectiveDescr descr) {\r\n        if ( descr.getConnective() == RestrictionConnectiveDescr.OR ) {\r\n            this.template = \"<restriction-connective connective=\\\"|\\\"/>\" + XmlDumper.eol;\r\n        } else {\r\n            this.template = \"<restriction-connective connective=\\\"&amp;\\\"/>\" + XmlDumper.eol;\r\n        }\r\n    }","id":5421,"modified_method":"public void visitRestrictionConnectiveDescr(final RestrictionConnectiveDescr descr) {\r\n        this.template = \"<restriction-connective connective=\";\r\n        this.template += descr.getConnective() == RestrictionConnectiveDescr.OR ? \"\\\"or\\\"\" : \"\\\"and\\\"\" ;\r\n        this.template += \"/>\" + XmlDumper.eol;\r\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testParseRule() throws Exception {\r\n        final XmlPackageReader xmlPackageReader = new XmlPackageReader();\r\n        xmlPackageReader.read( new InputStreamReader( getClass().getResourceAsStream( \"test_ParseRule.xml\" ) ) );\r\n        final PackageDescr packageDescr = xmlPackageReader.getPackageDescr();\r\n        assertNotNull( packageDescr );\r\n        assertEquals( \"com.sample\",\r\n                      packageDescr.getName() );\r\n\r\n        final List imports = packageDescr.getImports();\r\n        assertEquals( 2,\r\n                      imports.size() );\r\n        assertEquals( \"java.util.HashMap\",\r\n                      ((ImportDescr) imports.get( 0 )).getTarget() );\r\n        assertEquals( \"org.drools.*\",\r\n                      ((ImportDescr) imports.get( 1 )).getTarget() );\r\n\r\n        final List globals = packageDescr.getGlobals();\r\n        assertEquals( 2,\r\n                      globals.size() );\r\n        final GlobalDescr x = (GlobalDescr) globals.get( 0 );\r\n        final GlobalDescr yada = (GlobalDescr) globals.get( 1 );\r\n        assertEquals( \"com.sample.X\",\r\n                      x.getType() );\r\n        assertEquals( \"x\",\r\n                      x.getIdentifier() );\r\n        assertEquals( \"com.sample.Yada\",\r\n                      yada.getType() );\r\n        assertEquals( \"yada\",\r\n                      yada.getIdentifier() );\r\n\r\n        final FunctionDescr functionDescr = (FunctionDescr) packageDescr.getFunctions().get( 0 );\r\n        final List names = functionDescr.getParameterNames();\r\n        assertEquals( \"foo\",\r\n                      names.get( 0 ) );\r\n        assertEquals( \"bada\",\r\n                      names.get( 1 ) );\r\n\r\n        final List types = functionDescr.getParameterTypes();\r\n        assertEquals( \"Bar\",\r\n                      types.get( 0 ) );\r\n        assertEquals( \"Bing\",\r\n                      types.get( 1 ) );\r\n\r\n        assertEquals( \"System.out.println(\\\"hello world\\\");\",\r\n                      functionDescr.getText().trim() );\r\n\r\n        final RuleDescr ruleDescr = (RuleDescr) packageDescr.getRules().get( 0 );\r\n        assertEquals( \"simple_rule\",\r\n                      ruleDescr.getName() );\r\n\r\n        assertEquals( 4,\r\n                      ruleDescr.getAttributes().size() );\r\n        final AttributeDescr attributeDescr = (AttributeDescr) ruleDescr.getAttributes().get( 0 );\r\n        assertEquals( \"salience\",\r\n                      attributeDescr.getName() );\r\n        assertEquals( \"10\",\r\n                      attributeDescr.getValue() );\r\n\r\n        final AndDescr lhs = ruleDescr.getLhs();\r\n        assertEquals( 6,\r\n                      lhs.getDescrs().size() );\r\n        final PatternDescr patternDescr = (PatternDescr) lhs.getDescrs().get( 0 );\r\n        assertEquals( \"Bar\",\r\n                      patternDescr.getObjectType() );\r\n\r\n        final String consequence = (String) ruleDescr.getConsequence();\r\n        assertNotNull( consequence );\r\n\r\n    }","id":5422,"modified_method":"public void testParseRule() throws Exception {\n        final XmlPackageReader xmlPackageReader = new XmlPackageReader();\n        xmlPackageReader.read( new InputStreamReader( getClass().getResourceAsStream( \"test_ParseRule.xml\" ) ) );\n        final PackageDescr packageDescr = xmlPackageReader.getPackageDescr();\n        assertNotNull( packageDescr );\n        assertEquals( \"com.sample\",\n                      packageDescr.getName() );\n\n        final List imports = packageDescr.getImports();\n        assertEquals( 2,\n                      imports.size() );\n        assertEquals( \"java.util.HashMap\",\n                      ((ImportDescr) imports.get( 0 )).getTarget() );\n        assertEquals( \"org.drools.*\",\n                      ((ImportDescr) imports.get( 1 )).getTarget() );\n\n        final List globals = packageDescr.getGlobals();\n        assertEquals( 2,\n                      globals.size() );\n        final GlobalDescr x = (GlobalDescr) globals.get( 0 );\n        final GlobalDescr yada = (GlobalDescr) globals.get( 1 );\n        assertEquals( \"com.sample.X\",\n                      x.getType() );\n        assertEquals( \"x\",\n                      x.getIdentifier() );\n        assertEquals( \"com.sample.Yada\",\n                      yada.getType() );\n        assertEquals( \"yada\",\n                      yada.getIdentifier() );\n\n        final FunctionDescr functionDescr = (FunctionDescr) packageDescr.getFunctions().get( 0 );\n        final List names = functionDescr.getParameterNames();\n        assertEquals( \"foo\",\n                      names.get( 0 ) );\n        assertEquals( \"bada\",\n                      names.get( 1 ) );\n\n        final List types = functionDescr.getParameterTypes();\n        assertEquals( \"Bar\",\n                      types.get( 0 ) );\n        assertEquals( \"Bing\",\n                      types.get( 1 ) );\n\n        assertEquals( \"System.out.println(\\\"hello world\\\");\",\n                      functionDescr.getText().trim() );\n\n        final RuleDescr ruleDescr = (RuleDescr) packageDescr.getRules().get( 0 );\n        assertEquals( \"simple_rule\",\n                      ruleDescr.getName() );\n\n        assertEquals( 4,\n                      ruleDescr.getAttributes().size() );\n        final AttributeDescr attributeDescr = (AttributeDescr) ruleDescr.getAttributes().get( 0 );\n        assertEquals( \"salience\",\n                      attributeDescr.getName() );\n        assertEquals( \"10\",\n                      attributeDescr.getValue() );\n\n        final AndDescr lhs = ruleDescr.getLhs();\n        assertEquals( 7,\n                      lhs.getDescrs().size() );\n        final PatternDescr patternDescr = (PatternDescr) lhs.getDescrs().get( 0 );\n        assertEquals( \"Bar\",\n                      patternDescr.getObjectType() );\n\n        final String consequence = (String) ruleDescr.getConsequence();\n        assertNotNull( consequence );\n\n    }","commit_id":"83e74549d080b6249a26b38383bb3c75447f5449","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdPathParams_GET() throws IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/site/site.with.dots.json\");\n        entityView.setMethod(EntityView.Method.GET);\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, new HashMap<String, Object>());\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n    }","id":5423,"modified_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdPathParams_GET() throws IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/site/site.with.dots.json\");\n        entityView.setMethod(EntityView.Method.GET);\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, new HashMap<String, Object>());\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getEntitiesPreservesDotsInGroupIds() throws IdUnusedException {\n        Search search = new Search();\n        // Technically, just adding a content type extension, e.g. .json, would cause the location reference to\n        // resolve, but nobody would actually do that b/c it doesn't affect the returned content type.\n        search.addRestriction(new Restriction(CollectionResolvable.SEARCH_LOCATION_REFERENCE, \"/group/group.with.dots\"));\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Map<String, org.sakaiproject.authz.api.Member> members = new HashMap<String, org.sakaiproject.authz.api.Member>();\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        members.put(\"user-foo\", member);\n        group.setMembers(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> results = (List<EntityData>)provider.getEntities(null, search);\n        assertEquals(1, results.size());\n        assertEquals(\"user-foo::group:group.with.dots\", results.get(0).getEntityId());\n    }","id":5424,"modified_method":"@Test\n    public void getEntitiesPreservesDotsInGroupIds() throws IdUnusedException {\n        Search search = new Search();\n        // Technically, just adding a content type extension, e.g. .json, would cause the location reference to\n        // resolve, but nobody would actually do that b/c it doesn't affect the returned content type.\n        search.addRestriction(new Restriction(CollectionResolvable.SEARCH_LOCATION_REFERENCE, \"/group/group.with.dots\"));\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(group.getMembers()).thenReturn(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> results = (List<EntityData>)provider.getEntities(null, search);\n        assertEquals(1, results.size());\n        assertEquals(\"user-foo::group:group.with.dots\", results.get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdQueryParams_GET() {\n        EntityView entityView = new EntityView(\"/membership/group\");\n        entityView.setMethod(EntityView.Method.GET);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"groupId\", \"group.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Map<String, org.sakaiproject.authz.api.Member> members = new HashMap<String, org.sakaiproject.authz.api.Member>();\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        members.put(\"user-foo\", member);\n        group.setMembers(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, params);\n        assertEquals(1, result.size());\n        assertEquals(\"user-foo::group:group.with.dots\", result.get(0).getEntityId());\n    }","id":5425,"modified_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdQueryParams_GET() {\n        EntityView entityView = new EntityView(\"/membership/group\");\n        entityView.setMethod(EntityView.Method.GET);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"groupId\", \"group.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(group.getMembers()).thenReturn(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, params);\n        assertEquals(1, result.size());\n        assertEquals(\"user-foo::group:group.with.dots\", result.get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getEntityPreservesDotsInEntityIds() throws IdUnusedException {\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        // This is the constructor EB actually uses when building an EntityReference to pass to getEntity() for a GET\n        // request. For a dotted ID to work at all, an extension would have been specified on the originally requested\n        // ID, e.g. /membership/user-foo:site:site.with.dots.json. If a content type isn't specified for a dotted ID,\n        // e.g. /membership/user-foo:site:site.with.dots, the AccessProvider will blow up with a 406 b/c it thinks\n        // \"dots\" is the requested content type. As long as the content type is expected, though, it will be stripped\n        // off before the ID is handed to the EntityReference constructor\n        EntityMember membership =\n                (EntityMember) provider.getEntity(new EntityReference(\"membership\", \"user-foo::site:site.with.dots\"));\n        assertEquals(\"user-foo::site:site.with.dots\", membership.getId());\n        assertEquals(\"user-foo\", membership.getUserId());\n    }","id":5426,"modified_method":"@Test\n    public void getEntityPreservesDotsInEntityIds() throws IdUnusedException {\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n        when(site.getMember(\"user-foo\")).thenReturn(member);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        // This is the constructor EB actually uses when building an EntityReference to pass to getEntity() for a GET\n        // request. For a dotted ID to work at all, an extension would have been specified on the originally requested\n        // ID, e.g. /membership/user-foo:site:site.with.dots.json. If a content type isn't specified for a dotted ID,\n        // e.g. /membership/user-foo:site:site.with.dots, the AccessProvider will blow up with a 406 b/c it thinks\n        // \"dots\" is the requested content type. As long as the content type is expected, though, it will be stripped\n        // off before the ID is handed to the EntityReference constructor\n        EntityMember membership =\n                (EntityMember) provider.getEntity(new EntityReference(\"membership\", \"user-foo::site:site.with.dots\"));\n        assertEquals(\"user-foo::site:site.with.dots\", membership.getId());\n        assertEquals(\"user-foo\", membership.getUserId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void createEntityPreservesDotsInGroupIdsInEntityMembers() throws IdUnusedException, PermissionException {\n        EntityMember member = new EntityMember();\n        member.setUserId(\"user-foo\");\n        member.setMemberRole(\"role-foo\");\n        member.setActive(true);\n        member.setLocationReference(\"/group/group.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        site.setJoinable(true);\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(userEntityProvider.findAndCheckUserId(\"user-foo\", \"user-foo\")).thenReturn(\"user-foo\");\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n\n        String entityId = provider.createEntity(null, member, new HashMap<String, Object>());\n\n        verify(siteService).saveGroupMembership(site);\n\n        assertEquals(\"user-foo::group:group.with.dots\", entityId);\n    }","id":5427,"modified_method":"@Test\n    public void createEntityPreservesDotsInGroupIdsInEntityMembers() throws IdUnusedException, PermissionException {\n        EntityMember member = new EntityMember();\n        member.setUserId(\"user-foo\");\n        member.setMemberRole(\"role-foo\");\n        member.setActive(true);\n        member.setLocationReference(\"/group/group.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        site.setJoinable(true);\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(userEntityProvider.findAndCheckUserId(\"user-foo\", \"user-foo\")).thenReturn(\"user-foo\");\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n\n        String entityId = provider.createEntity(null, member, new HashMap<String, Object>());\n\n        verify(siteService).saveGroupMembership(site);\n\n        assertEquals(\"user-foo::group:group.with.dots\", entityId);\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getEntitiesPreservesDotsInSiteIds() throws IdUnusedException {\n        Search search = new Search();\n        // Technically, just adding a content type extension, e.g. .json, would cause the location reference to\n        // resolve, but nobody would actually do that b/c it doesn't affect the returned content type.\n        search.addRestriction(new Restriction(CollectionResolvable.SEARCH_LOCATION_REFERENCE, \"/site/site.with.dots\"));\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> results = (List<EntityData>)provider.getEntities(null, search);\n        assertEquals(1, results.size());\n        assertEquals(\"user-foo::site:site.with.dots\", results.get(0).getEntityId());\n    }","id":5428,"modified_method":"@Test\n    public void getEntitiesPreservesDotsInSiteIds() throws IdUnusedException {\n        Search search = new Search();\n        // Technically, just adding a content type extension, e.g. .json, would cause the location reference to\n        // resolve, but nobody would actually do that b/c it doesn't affect the returned content type.\n        search.addRestriction(new Restriction(CollectionResolvable.SEARCH_LOCATION_REFERENCE, \"/site/site.with.dots\"));\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(developerHelperService.getCurrentUserId()).thenReturn(\"me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> results = (List<EntityData>)provider.getEntities(null, search);\n        assertEquals(1, results.size());\n        assertEquals(\"user-foo::site:site.with.dots\", results.get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdPathParams_POST() throws PermissionException, IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/group/group.with.dots.json\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"action\", \"remove\");\n        params.put(\"userIds\", \"user-foo\");\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n        ResourceProperties groupProperties = new BaseResourceProperties();\n        groupProperties.addProperty(\"group_prop_wsetup_created\", \"true\");\n        group.setProperties(groupProperties);\n        Map<String, org.sakaiproject.authz.api.Member> members = new HashMap<String, org.sakaiproject.authz.api.Member>();\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        members.put(\"user-foo\", member);\n        group.setMembers(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(siteService.allowUpdateSite(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.findAndCheckUserId(null, \"user-foo\")).thenReturn(\"user-foo\");\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, params);\n\n        verify(siteService).save(site);\n        assertEquals(0, group.getMembers().size());\n        assertNull(result);\n    }","id":5429,"modified_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdPathParams_POST() throws PermissionException, IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/group/group.with.dots.json\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"action\", \"remove\");\n        params.put(\"userIds\", \"user-foo\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n        ResourceProperties groupProperties = new BaseResourceProperties();\n        groupProperties.addProperty(\"group_prop_wsetup_created\", \"true\");\n        when(group.getProperties()).thenReturn(groupProperties);\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(siteService.allowUpdateSite(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.findAndCheckUserId(null, \"user-foo\")).thenReturn(\"user-foo\");\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, params);\n\n        verify(siteService).save(site);\n        assertEquals(0, group.getMembers().size());\n        assertNull(result);\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdQueryParams_GET() throws IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/site\");\n        entityView.setMethod(EntityView.Method.GET);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"siteId\", \"site.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n    }","id":5430,"modified_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdQueryParams_GET() throws IdUnusedException {\n        EntityView entityView = new EntityView(\"/membership/site\");\n        entityView.setMethod(EntityView.Method.GET);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"siteId\", \"site.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdPathParams_POST() throws IdUnusedException, PermissionException {\n        EntityView entityView = new EntityView(\"/membership/site/site.with.dots.json\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"memberRole\", \"role-foo\");\n        params.put(\"userSearchValues\", \"user-foo\");\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setEid(\"user-foo\");\n        user.setId(\"user-foo\");\n        user.setEmail(\"user-foo@school.edu\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.findUserFromSearchValue(\"user-foo\")).thenReturn(user);\n        when(userEntityProvider.getCurrentUser(null)).thenReturn(user);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n        verify(siteService).saveSiteMembership(site);\n    }","id":5431,"modified_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdPathParams_POST() throws IdUnusedException, PermissionException {\n        EntityView entityView = new EntityView(\"/membership/site/site.with.dots.json\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"memberRole\", \"role-foo\");\n        params.put(\"userSearchValues\", \"user-foo\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setEid(\"user-foo\");\n        user.setId(\"user-foo\");\n        user.setEmail(\"user-foo@school.edu\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.findUserFromSearchValue(\"user-foo\")).thenReturn(user);\n        when(userEntityProvider.getCurrentUser(null)).thenReturn(user);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n        verify(siteService).saveSiteMembership(site);\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void createEntityPreservesDotsInSiteIdsInEntityMembers() throws IdUnusedException, PermissionException {\n        EntityMember member = new EntityMember();\n        member.setUserId(\"user-foo\");\n        member.setMemberRole(\"role-foo\");\n        member.setActive(true);\n        member.setLocationReference(\"/site/site.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        site.setJoinable(true);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(userEntityProvider.findAndCheckUserId(\"user-foo\", \"user-foo\")).thenReturn(\"user-foo\");\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n\n        String entityId = provider.createEntity(null, member, new HashMap<String, Object>());\n\n        verify(siteService).saveSiteMembership(site);\n\n        assertEquals(\"user-foo::site:site.with.dots\", entityId);\n    }","id":5432,"modified_method":"@Test\n    public void createEntityPreservesDotsInSiteIdsInEntityMembers() throws IdUnusedException, PermissionException {\n        EntityMember member = new EntityMember();\n        member.setUserId(\"user-foo\");\n        member.setMemberRole(\"role-foo\");\n        member.setActive(true);\n        member.setLocationReference(\"/site/site.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        site.setJoinable(true);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(userEntityProvider.findAndCheckUserId(\"user-foo\", \"user-foo\")).thenReturn(\"user-foo\");\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n\n        String entityId = provider.createEntity(null, member, new HashMap<String, Object>());\n\n        verify(siteService).saveSiteMembership(site);\n\n        assertEquals(\"user-foo::site:site.with.dots\", entityId);\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdQueryParams_POST() throws IdUnusedException, PermissionException {\n        EntityView entityView = new EntityView(\"/membership/site\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"siteId\", \"site.with.dots\");\n        params.put(\"memberRole\", \"role-foo\");\n        params.put(\"userSearchValues\", \"user-foo\");\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setEid(\"user-foo\");\n        user.setId(\"user-foo\");\n        user.setEmail(\"user-foo@school.edu\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.findUserFromSearchValue(\"user-foo\")).thenReturn(user);\n        when(userEntityProvider.getCurrentUser(null)).thenReturn(user);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n        verify(siteService).saveSiteMembership(site);\n    }","id":5433,"modified_method":"@Test\n    public void handleSiteMembershipPreservesDotsInSiteIdQueryParams_POST() throws IdUnusedException, PermissionException {\n        EntityView entityView = new EntityView(\"/membership/site\");\n        entityView.setMethod(EntityView.Method.POST);\n        Map<String,Object> params = new HashMap<String,Object>();\n        params.put(\"siteId\", \"site.with.dots\");\n        params.put(\"memberRole\", \"role-foo\");\n        params.put(\"userSearchValues\", \"user-foo\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setEid(\"user-foo\");\n        user.setId(\"user-foo\");\n        user.setEmail(\"user-foo@school.edu\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site.with.dots\")).thenReturn(true);\n        when(userEntityProvider.findUserFromSearchValue(\"user-foo\")).thenReturn(user);\n        when(userEntityProvider.getCurrentUser(null)).thenReturn(user);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        ActionReturn result =\n                provider.handleSiteMemberships(entityView, params);\n        assertEquals(1, result.getEntitiesList().size());\n        assertEquals(\"user-foo::site:site.with.dots\", result.getEntitiesList().get(0).getEntityId());\n        verify(siteService).saveSiteMembership(site);\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void deleteEntityPreservesDotsInSiteIds() throws IdUnusedException, PermissionException {\n        EntityReference ref = new EntityReference(\"membership\", \"user-foo::site:site.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        Map<String,org.sakaiproject.authz.api.Member> members = new HashMap<String,org.sakaiproject.authz.api.Member>();\n        members.put(\"user-foo\", member);\n        site.setMembers(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n\n        provider.deleteEntity(ref, new HashMap<String, Object>());\n\n        verify(siteService).saveSiteMembership(site);\n        assertEquals(0, site.getMembers().size());\n\n    }","id":5434,"modified_method":"@Test\n    public void deleteEntityPreservesDotsInSiteIds() throws IdUnusedException, PermissionException {\n        EntityReference ref = new EntityReference(\"membership\", \"user-foo::site:site.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.getSite(\"site.with.dots\")).thenReturn(site);\n\n        provider.deleteEntity(ref, new HashMap<String, Object>());\n\n        verify(siteService).saveSiteMembership(site);\n        verify(site).removeMember(\"user-foo\");\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdPathParams_GET() {\n        EntityView entityView = new EntityView(\"/membership/group/group.with.dots.json\");\n        entityView.setMethod(EntityView.Method.GET);\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Map<String, org.sakaiproject.authz.api.Member> members = new HashMap<String, org.sakaiproject.authz.api.Member>();\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        members.put(\"user-foo\", member);\n        group.setMembers(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, new HashMap<String, Object>());\n        assertEquals(1, result.size());\n        assertEquals(\"user-foo::group:group.with.dots\", result.get(0).getEntityId());\n    }","id":5435,"modified_method":"@Test\n    public void getGroupMembershipsPreservesDotsInGroupIdPathParams_GET() {\n        EntityView entityView = new EntityView(\"/membership/group/group.with.dots.json\");\n        entityView.setMethod(EntityView.Method.GET);\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(group.getMembers()).thenReturn(members);;\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n        when(developerHelperService.getCurrentUserReference()).thenReturn(\"/user/me\");\n        when(siteService.allowViewRoster(\"site-foo\")).thenReturn(true);\n        when(userEntityProvider.getUserById(\"user-foo\")).thenReturn(user);\n\n        List<EntityData> result =\n                provider.getGroupMemberships(entityView, new HashMap<String, Object>());\n        assertEquals(1, result.size());\n        assertEquals(\"user-foo::group:group.with.dots\", result.get(0).getEntityId());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void deleteEntityPreservesDotsInGroupIds() throws PermissionException, IdUnusedException {\n        EntityReference ref = new EntityReference(\"membership\", \"user-foo::group:group.with.dots\");\n\n        Site site = new Site();\n        site.setId(\"site-foo\");\n        Group group = new Group(site);\n        group.setId(\"group.with.dots\");\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Map<String, org.sakaiproject.authz.api.Member> members = new HashMap<String, org.sakaiproject.authz.api.Member>();\n        Member member = new Member();\n        member.setUserId(\"user-foo\");\n        member.setUserEid(\"user-foo\");\n        members.put(\"user-foo\", member);\n        group.setMembers(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n\n        provider.deleteEntity(ref, new HashMap<String, Object>());\n\n        verify(siteService).saveGroupMembership(site);\n        assertEquals(0, group.getMembers().size());\n    }","id":5436,"modified_method":"@Test\n    public void deleteEntityPreservesDotsInGroupIds() throws PermissionException, IdUnusedException {\n        EntityReference ref = new EntityReference(\"membership\", \"user-foo::group:group.with.dots\");\n\n        Site site = mock(Site.class);\n        when(site.getId()).thenReturn(\"site-foo\");\n        Group group = mock(Group.class);\n        when(group.getId()).thenReturn(\"group.with.dots\");\n        when(group.getContainingSite()).thenReturn(site);\n        EntityUser user = new EntityUser();\n        user.setId(\"user-foo\");\n        user.setEid(\"user-foo\");\n        Member member = mock(Member.class);\n        when(member.getUserId()).thenReturn(\"user-foo\");\n        when(member.getUserEid()).thenReturn(\"user-foo\");\n        Set<Member> members = new HashSet<Member>();\n        members.add(member);\n        when(site.getMembers()).thenReturn(members);\n\n        when(siteService.findGroup(\"group.with.dots\")).thenReturn(group);\n\n        provider.deleteEntity(ref, new HashMap<String, Object>());\n\n        verify(siteService).saveGroupMembership(site);\n        assertEquals(0, group.getMembers().size());\n    }","commit_id":"615f3c970b1c9b721d6c371426b03e76a1bf1aad","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n\tpublic void testJSONWithoutToolbarDoesNotChangeWhenInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5437,"modified_method":"@Test\n\tpublic void testJSONWithoutToolbarDoesNotChangeWhenInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testJSONWithCameraHLineButtonDoesNotChangeWithInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\toriginalJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraHlineButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5438,"modified_method":"@Test\n\tpublic void testJSONWithCameraHLineButtonDoesNotChangeWithInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraHlineButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testImageButtonNotRemovedWhenValidWikiPage() throws Exception {\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\toriginalJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraImageButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5439,"modified_method":"@Test\n\tpublic void testImageButtonNotRemovedWhenValidWikiPage() throws Exception {\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraImageButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testImageButtonRemovedWhenNotAllowBrowseDocuments()\n\t\tthrows Exception {\n\n\t\tsetAllowBrowseDocuments(false);\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject();\n\n\t\tjsonObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\tjsonObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraImageButtonJSONObject());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONObject expectedJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\texpectedJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\texpectedJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraButtonJSONObject());\n\n\t\tJSONAssert.assertEquals(\n\t\t\texpectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5440,"modified_method":"@Test\n\tpublic void testImageButtonRemovedWhenNotAllowBrowseDocuments()\n\t\tthrows Exception {\n\n\t\tsetAllowBrowseDocuments(false);\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject jsonObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraImageButtonJSONObject());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONObject expectedJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\texpectedJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\texpectedJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraButtonJSONObject());\n\n\t\tJSONAssert.assertEquals(\n\t\t\texpectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testJSONWithNotImageButtonDoesNotChangeWithValidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\toriginalJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraHlineButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5441,"modified_method":"@Test\n\tpublic void testJSONWithNotImageButtonDoesNotChangeWithValidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraHlineButtonJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testJSONWithToolbarStylesDoesNotChangeWithInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\toriginalJSONObject.put(\"toolbars\", getToolbarsWithStylesJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5442,"modified_method":"@Test\n\tpublic void testJSONWithToolbarStylesDoesNotChangeWithInvalidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject originalJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithStylesJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testJSONWithToolbarStylesDoesNotChangeWithValidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\toriginalJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\toriginalJSONObject.put(\"toolbars\", getToolbarsWithStylesJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5443,"modified_method":"@Test\n\tpublic void testJSONWithToolbarStylesDoesNotChangeWithValidWikiPage()\n\t\tthrows Exception {\n\n\t\tsetWikiPageResourcePrimKey(1);\n\n\t\tJSONObject originalJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithStylesJSONObject());\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(\n\t\t\toriginalJSONObject.toJSONString());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseLinkUrl\", \"itemSelectorPortletURL\");\n\t\toriginalJSONObject.put(\n\t\t\t\"filebrowserImageBrowseUrl\", \"itemSelectorPortletURL\");\n\n\t\tJSONAssert.assertEquals(\n\t\t\toriginalJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testImageButtonRemovedWhenInvalidWikiPage() throws Exception {\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject();\n\n\t\tjsonObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\tjsonObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraImageButtonJSONObject());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONObject expectedJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\texpectedJSONObject.put(\"extraPlugins\", \"plugin1,plugin2,plugin3\");\n\n\t\texpectedJSONObject.put(\n\t\t\t\"toolbars\", getToolbarsWithCameraButtonJSONObject());\n\n\t\tJSONAssert.assertEquals(\n\t\t\texpectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","id":5444,"modified_method":"@Test\n\tpublic void testImageButtonRemovedWhenInvalidWikiPage() throws Exception {\n\t\tsetWikiPageResourcePrimKey(0);\n\n\t\tJSONObject jsonObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraImageButtonJSONObject());\n\n\t\tWikiAttachmentAlloyEditorEditorConfigContributor\n\t\t\twikiAttachmentAlloyEditorEditorConfigContributor =\n\t\t\t\tnew WikiAttachmentAlloyEditorEditorConfigContributor();\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.setItemSelector(\n\t\t\t_itemSelector);\n\n\t\twikiAttachmentAlloyEditorEditorConfigContributor.\n\t\t\tpopulateConfigJSONObject(\n\t\t\t\tjsonObject, _inputEditorTaglibAttributes, _themeDisplay,\n\t\t\t\t_requestBackedPortletURLFactory);\n\n\t\tJSONObject expectedJSONObject = getJsonObjectWithToolbar(\n\t\t\tgetToolbarsWithCameraButtonJSONObject());\n\n\t\tJSONAssert.assertEquals(\n\t\t\texpectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);\n\t}","commit_id":"37717738d3424d5d99757df59aae1881c695c054","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public VmInstanceFilterSupport() {\n      super( builderFor( VmInstance.class )\n          .withTagFiltering( VmInstanceTag.class, \"instance\" )\n          .withStringProperty( \"architecture\", VmInstanceFilterFunctions.ARCHITECTURE )\n          .withStringProperty( \"availability-zone\", VmInstanceFilterFunctions.AVAILABILITY_ZONE )\n          .withDateSetProperty( \"block-device-mapping.attach-time\", VmInstanceDateSetFilterFunctions.BLOCK_DEVICE_MAPPING_ATTACH_TIME )\n          .withBooleanSetProperty( \"block-device-mapping.delete-on-termination\", VmInstanceBooleanSetFilterFunctions.BLOCK_DEVICE_MAPPING_DELETE_ON_TERMINATE )\n          .withStringSetProperty( \"block-device-mapping.device-name\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_DEVICE_NAME )\n          .withStringSetProperty( \"block-device-mapping.status\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_STATUS )\n          .withStringSetProperty( \"block-device-mapping.volume-id\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_VOLUME_ID )\n          .withStringProperty( \"client-token\", VmInstanceFilterFunctions.CLIENT_TOKEN )\n          .withStringProperty( \"dns-name\", VmInstanceFilterFunctions.DNS_NAME )\n          .withStringSetProperty( \"group-id\", VmInstanceStringSetFilterFunctions.GROUP_ID )\n          .withStringSetProperty( \"group-name\", VmInstanceStringSetFilterFunctions.GROUP_NAME )\n          .withStringProperty( \"image-id\", VmInstanceFilterFunctions.IMAGE_ID )\n          .withStringProperty( \"instance-id\", CloudMetadatas.toDisplayName() )\n          .withConstantProperty( \"instance-lifecycle\", \"\" )\n          .withIntegerProperty( \"instance-state-code\", VmInstanceIntegerFilterFunctions.INSTANCE_STATE_CODE )\n          .withStringProperty( \"instance-state-name\", VmInstanceFilterFunctions.INSTANCE_STATE_NAME )\n          .withStringProperty( \"instance-type\", VmInstanceFilterFunctions.INSTANCE_TYPE )\n          .withStringSetProperty( \"instance.group-id\", VmInstanceStringSetFilterFunctions.GROUP_ID )\n          .withStringSetProperty( \"instance.group-name\", VmInstanceStringSetFilterFunctions.GROUP_NAME )\n          .withStringProperty( \"ip-address\", VmInstanceFilterFunctions.IP_ADDRESS )\n          .withStringProperty( \"kernel-id\", VmInstanceFilterFunctions.KERNEL_ID )\n          .withStringProperty( \"key-name\", VmInstanceFilterFunctions.KEY_NAME )\n          .withStringProperty( \"launch-index\", VmInstanceFilterFunctions.LAUNCH_INDEX )\n          .withDateProperty( \"launch-time\", VmInstanceDateFilterFunctions.LAUNCH_TIME )\n          .withStringProperty( \"monitoring-state\", VmInstanceFilterFunctions.MONITORING_STATE )\n          .withStringProperty( \"owner-id\", VmInstanceFilterFunctions.OWNER_ID )\n          .withUnsupportedProperty( \"placement-group-name\" )\n          .withStringProperty( \"platform\", VmInstanceFilterFunctions.PLATFORM )\n          .withStringProperty( \"private-dns-name\", VmInstanceFilterFunctions.PRIVATE_DNS_NAME )\n          .withStringProperty( \"private-ip-address\", VmInstanceFilterFunctions.PRIVATE_IP_ADDRESS )\n          .withUnsupportedProperty( \"product-code\" )\n          .withUnsupportedProperty( \"product-code.type\" )\n          .withStringProperty( \"ramdisk-id\", VmInstanceFilterFunctions.RAMDISK_ID )\n          .withStringProperty( \"reason\", VmInstanceFilterFunctions.REASON )\n          .withUnsupportedProperty( \"requester-id\" )\n          .withStringProperty( \"reservation-id\", VmInstanceFilterFunctions.RESERVATION_ID )\n          .withStringProperty( \"root-device-name\", VmInstanceFilterFunctions.ROOT_DEVICE_NAME )\n          .withStringProperty( \"root-device-type\", VmInstanceFilterFunctions.ROOT_DEVICE_TYPE )\n          .withUnsupportedProperty( \"source-dest-check\" )\n          .withUnsupportedProperty( \"spot-instance-request-id\" )\n          .withUnsupportedProperty( \"state-reason-code\" )\n          .withUnsupportedProperty( \"state-reason-message\" )\n          .withUnsupportedProperty( \"subnet-id\" )\n          .withStringProperty( \"virtualization-type\", VmInstanceFilterFunctions.VIRTUALIZATION_TYPE )\n          .withUnsupportedProperty( \"vpc-id\" )\n          .withUnsupportedProperty( \"hypervisor\" )\n          .withUnsupportedProperty( \"network-interface.description\" )\n          .withUnsupportedProperty( \"network-interface.subnet-id\" )\n          .withUnsupportedProperty( \"network-interface.vpc-id\" )\n          .withUnsupportedProperty( \"network-interface.network-interface.id\" )\n          .withUnsupportedProperty( \"network-interface.owner-id\" )\n          .withUnsupportedProperty( \"network-interface.availability-zone\" )\n          .withUnsupportedProperty( \"network-interface.requester-id\" )\n          .withUnsupportedProperty( \"network-interface.requester-managed\" )\n          .withUnsupportedProperty( \"network-interface.status\" )\n          .withUnsupportedProperty( \"network-interface.mac-address\" )\n          .withUnsupportedProperty( \"network-interface-private-dns-name\" )\n          .withUnsupportedProperty( \"network-interface.source-destination-check\" )\n          .withUnsupportedProperty( \"network-interface.group-id\" )\n          .withUnsupportedProperty( \"network-interface.group-name\" )\n          .withUnsupportedProperty( \"network-interface.attachment.attachment-id\" )\n          .withUnsupportedProperty( \"network-interface.attachment.instance-id\" )\n          .withUnsupportedProperty( \"network-interface.attachment.instance-owner-id\" )\n          .withUnsupportedProperty( \"network-interface.addresses.private-ip-address\" )\n          .withUnsupportedProperty( \"network-interface.attachment.device-index\" )\n          .withUnsupportedProperty( \"network-interface.attachment.status\" )\n          .withUnsupportedProperty( \"network-interface.attachment.attach-time\" )\n          .withUnsupportedProperty( \"network-interface.attachment.delete-on-termination\" )\n          .withUnsupportedProperty( \"network-interface.addresses.primary\" )\n          .withUnsupportedProperty( \"network-interface.addresses.association.public-ip\" )\n          .withUnsupportedProperty( \"network-interface.addresses.association.ip-owner-id\" )\n          .withUnsupportedProperty( \"association.public-ip\" )\n          .withUnsupportedProperty( \"association.ip-owner-id\" )\n          .withUnsupportedProperty( \"association.allocation-id\" )\n          .withUnsupportedProperty( \"association.association-id\" )\n          .withPersistenceAlias( \"bootRecord.machineImage\", \"image\" )\n          .withPersistenceAlias( \"networkGroups\", \"networkGroups\" )\n          .withPersistenceAlias( \"bootRecord.vmType\", \"vmType\" )\n          .withPersistenceFilter( \"architecture\", \"image.architecture\", Sets.newHashSet(\"bootRecord.machineImage\"), Enums.valueOfFunction( ImageMetadata.Architecture.class ) )\n          .withPersistenceFilter( \"availability-zone\", \"placement.partitionName\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"client-token\", \"vmId.clientToken\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"group-id\", \"networkGroups.groupId\" )\n          .withPersistenceFilter( \"group-name\", \"networkGroups.displayName\" )\n          .withPersistenceFilter( \"image-id\", \"image.displayName\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"instance-id\", \"displayName\" )\n          .withPersistenceFilter( \"instance-type\", \"vmType.name\", Sets.newHashSet(\"bootRecord.vmType\")  )\n          .withPersistenceFilter( \"instance.group-id\", \"networkGroups.groupId\" )\n          .withPersistenceFilter( \"instance.group-name\", \"networkGroups.displayName\" )\n          .withPersistenceFilter( \"kernel-id\", \"image.kernelId\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"launch-index\", \"launchRecord.launchIndex\", Collections.<String>emptySet(), PersistenceFilter.Type.Integer )\n          .withPersistenceFilter( \"launch-time\", \"launchRecord.launchTime\", Collections.<String>emptySet(), PersistenceFilter.Type.Date )\n          .withPersistenceFilter( \"owner-id\", \"ownerAccountNumber\" )\n          .withPersistenceFilter( \"ramdisk-id\", \"image.ramdiskId\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"reservation-id\", \"vmId.reservationId\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"virtualization-type\", \"bootRecord.virtType\", Collections.<String>emptySet(), ImageMetadata.VirtualizationType.fromString( ) )\n      );\n    }","id":5445,"modified_method":"public VmInstanceFilterSupport() {\n      super( builderFor( VmInstance.class )\n          .withTagFiltering( VmInstanceTag.class, \"instance\" )\n          .withStringProperty( \"architecture\", VmInstanceFilterFunctions.ARCHITECTURE )\n          .withStringProperty( \"availability-zone\", VmInstanceFilterFunctions.AVAILABILITY_ZONE )\n          .withDateSetProperty( \"block-device-mapping.attach-time\", VmInstanceDateSetFilterFunctions.BLOCK_DEVICE_MAPPING_ATTACH_TIME )\n          .withBooleanSetProperty( \"block-device-mapping.delete-on-termination\", VmInstanceBooleanSetFilterFunctions.BLOCK_DEVICE_MAPPING_DELETE_ON_TERMINATE )\n          .withStringSetProperty( \"block-device-mapping.device-name\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_DEVICE_NAME )\n          .withStringSetProperty( \"block-device-mapping.status\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_STATUS )\n          .withStringSetProperty( \"block-device-mapping.volume-id\", VmInstanceStringSetFilterFunctions.BLOCK_DEVICE_MAPPING_VOLUME_ID )\n          .withStringProperty( \"client-token\", VmInstanceFilterFunctions.CLIENT_TOKEN )\n          .withStringProperty( \"dns-name\", VmInstanceFilterFunctions.DNS_NAME )\n          .withStringSetProperty( \"group-id\", VmInstanceStringSetFilterFunctions.GROUP_ID )\n          .withStringSetProperty( \"group-name\", VmInstanceStringSetFilterFunctions.GROUP_NAME )\n          .withStringProperty( \"image-id\", VmInstanceFilterFunctions.IMAGE_ID )\n          .withStringProperty( \"iam-instance-profile.arn\", VmInstanceFilterFunctions.INSTANCE_PROFILE_ARN )\n          .withStringProperty( \"instance-id\", CloudMetadatas.toDisplayName() )\n          .withConstantProperty( \"instance-lifecycle\", \"\" )\n          .withIntegerProperty( \"instance-state-code\", VmInstanceIntegerFilterFunctions.INSTANCE_STATE_CODE )\n          .withStringProperty( \"instance-state-name\", VmInstanceFilterFunctions.INSTANCE_STATE_NAME )\n          .withStringProperty( \"instance-type\", VmInstanceFilterFunctions.INSTANCE_TYPE )\n          .withStringSetProperty( \"instance.group-id\", VmInstanceStringSetFilterFunctions.GROUP_ID )\n          .withStringSetProperty( \"instance.group-name\", VmInstanceStringSetFilterFunctions.GROUP_NAME )\n          .withStringProperty( \"ip-address\", VmInstanceFilterFunctions.IP_ADDRESS )\n          .withStringProperty( \"kernel-id\", VmInstanceFilterFunctions.KERNEL_ID )\n          .withStringProperty( \"key-name\", VmInstanceFilterFunctions.KEY_NAME )\n          .withStringProperty( \"launch-index\", VmInstanceFilterFunctions.LAUNCH_INDEX )\n          .withDateProperty( \"launch-time\", VmInstanceDateFilterFunctions.LAUNCH_TIME )\n          .withStringProperty( \"monitoring-state\", VmInstanceFilterFunctions.MONITORING_STATE )\n          .withStringProperty( \"owner-id\", VmInstanceFilterFunctions.OWNER_ID )\n          .withUnsupportedProperty( \"placement-group-name\" )\n          .withStringProperty( \"platform\", VmInstanceFilterFunctions.PLATFORM )\n          .withStringProperty( \"private-dns-name\", VmInstanceFilterFunctions.PRIVATE_DNS_NAME )\n          .withStringProperty( \"private-ip-address\", VmInstanceFilterFunctions.PRIVATE_IP_ADDRESS )\n          .withUnsupportedProperty( \"product-code\" )\n          .withUnsupportedProperty( \"product-code.type\" )\n          .withStringProperty( \"ramdisk-id\", VmInstanceFilterFunctions.RAMDISK_ID )\n          .withStringProperty( \"reason\", VmInstanceFilterFunctions.REASON )\n          .withUnsupportedProperty( \"requester-id\" )\n          .withStringProperty( \"reservation-id\", VmInstanceFilterFunctions.RESERVATION_ID )\n          .withStringProperty( \"root-device-name\", VmInstanceFilterFunctions.ROOT_DEVICE_NAME )\n          .withStringProperty( \"root-device-type\", VmInstanceFilterFunctions.ROOT_DEVICE_TYPE )\n          .withUnsupportedProperty( \"source-dest-check\" )\n          .withUnsupportedProperty( \"spot-instance-request-id\" )\n          .withUnsupportedProperty( \"state-reason-code\" )\n          .withUnsupportedProperty( \"state-reason-message\" )\n          .withUnsupportedProperty( \"subnet-id\" )\n          .withStringProperty( \"virtualization-type\", VmInstanceFilterFunctions.VIRTUALIZATION_TYPE )\n          .withUnsupportedProperty( \"vpc-id\" )\n          .withUnsupportedProperty( \"hypervisor\" )\n          .withUnsupportedProperty( \"network-interface.description\" )\n          .withUnsupportedProperty( \"network-interface.subnet-id\" )\n          .withUnsupportedProperty( \"network-interface.vpc-id\" )\n          .withUnsupportedProperty( \"network-interface.network-interface.id\" )\n          .withUnsupportedProperty( \"network-interface.owner-id\" )\n          .withUnsupportedProperty( \"network-interface.availability-zone\" )\n          .withUnsupportedProperty( \"network-interface.requester-id\" )\n          .withUnsupportedProperty( \"network-interface.requester-managed\" )\n          .withUnsupportedProperty( \"network-interface.status\" )\n          .withUnsupportedProperty( \"network-interface.mac-address\" )\n          .withUnsupportedProperty( \"network-interface-private-dns-name\" )\n          .withUnsupportedProperty( \"network-interface.source-destination-check\" )\n          .withUnsupportedProperty( \"network-interface.group-id\" )\n          .withUnsupportedProperty( \"network-interface.group-name\" )\n          .withUnsupportedProperty( \"network-interface.attachment.attachment-id\" )\n          .withUnsupportedProperty( \"network-interface.attachment.instance-id\" )\n          .withUnsupportedProperty( \"network-interface.attachment.instance-owner-id\" )\n          .withUnsupportedProperty( \"network-interface.addresses.private-ip-address\" )\n          .withUnsupportedProperty( \"network-interface.attachment.device-index\" )\n          .withUnsupportedProperty( \"network-interface.attachment.status\" )\n          .withUnsupportedProperty( \"network-interface.attachment.attach-time\" )\n          .withUnsupportedProperty( \"network-interface.attachment.delete-on-termination\" )\n          .withUnsupportedProperty( \"network-interface.addresses.primary\" )\n          .withUnsupportedProperty( \"network-interface.addresses.association.public-ip\" )\n          .withUnsupportedProperty( \"network-interface.addresses.association.ip-owner-id\" )\n          .withUnsupportedProperty( \"association.public-ip\" )\n          .withUnsupportedProperty( \"association.ip-owner-id\" )\n          .withUnsupportedProperty( \"association.allocation-id\" )\n          .withUnsupportedProperty( \"association.association-id\" )\n          .withPersistenceAlias( \"bootRecord.machineImage\", \"image\" )\n          .withPersistenceAlias( \"networkGroups\", \"networkGroups\" )\n          .withPersistenceAlias( \"bootRecord.vmType\", \"vmType\" )\n          .withPersistenceFilter( \"architecture\", \"image.architecture\", Sets.newHashSet(\"bootRecord.machineImage\"), Enums.valueOfFunction( ImageMetadata.Architecture.class ) )\n          .withPersistenceFilter( \"availability-zone\", \"placement.partitionName\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"client-token\", \"vmId.clientToken\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"group-id\", \"networkGroups.groupId\" )\n          .withPersistenceFilter( \"group-name\", \"networkGroups.displayName\" )\n          .withPersistenceFilter( \"iam-instance-profile.arn\",  \"bootRecord.iamInstanceProfileArn\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"image-id\", \"image.displayName\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"instance-id\", \"displayName\" )\n          .withPersistenceFilter( \"instance-type\", \"vmType.name\", Sets.newHashSet(\"bootRecord.vmType\")  )\n          .withPersistenceFilter( \"instance.group-id\", \"networkGroups.groupId\" )\n          .withPersistenceFilter( \"instance.group-name\", \"networkGroups.displayName\" )\n          .withPersistenceFilter( \"kernel-id\", \"image.kernelId\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"launch-index\", \"launchRecord.launchIndex\", Collections.<String>emptySet(), PersistenceFilter.Type.Integer )\n          .withPersistenceFilter( \"launch-time\", \"launchRecord.launchTime\", Collections.<String>emptySet(), PersistenceFilter.Type.Date )\n          .withPersistenceFilter( \"owner-id\", \"ownerAccountNumber\" )\n          .withPersistenceFilter( \"ramdisk-id\", \"image.ramdiskId\", Sets.newHashSet(\"bootRecord.machineImage\") )\n          .withPersistenceFilter( \"reservation-id\", \"vmId.reservationId\", Collections.<String>emptySet() )\n          .withPersistenceFilter( \"virtualization-type\", \"bootRecord.virtType\", Collections.<String>emptySet(), ImageMetadata.VirtualizationType.fromString( ) )\n      );\n    }","commit_id":"929867cebdd1845148dc67b25915dde99c7b1eb4","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void customizeComponents() {\n        final HashDbXML xmlHandle = HashDbXML.getCurrent();\n        calcHashesButton.addActionListener( new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if(calcHashesButton.isSelected()) {\n                    xmlHandle.setCalculate(true);\n                } else {\n                    xmlHandle.setCalculate(false);\n                }\n            }\n            \n        });\n        \n        notableHashTable.setModel(knownBadTableModel);\n        \n        notableHashTable.setTableHeader(null);\n        notableHashTable.setRowSelectionAllowed(false);\n        //customize column witdhs\n        final int width1 = jScrollPane1.getPreferredSize().width;\n        TableColumn column1 = null;\n        for (int i = 0; i < notableHashTable.getColumnCount(); i++) {\n            column1 = notableHashTable.getColumnModel().getColumn(i);\n            if (i == 0) {\n                column1.setPreferredWidth(((int) (width1 * 0.15)));\n            } else {\n                column1.setPreferredWidth(((int) (width1 * 0.84)));\n            }\n        }\n        \n        reloadSets();\n    }","id":5446,"modified_method":"private void customizeComponents() {\n        final HashDbXML xmlHandle = HashDbXML.getCurrent();\n        calcHashesButton.addActionListener( new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if(calcHashesButton.isSelected()) {\n                    xmlHandle.setCalculate(true);\n                } else {\n                    xmlHandle.setCalculate(false);\n                }\n            }\n            \n        });\n        \n        notableHashTable.setModel(knownBadTableModel);\n        \n        notableHashTable.setTableHeader(null);\n        notableHashTable.setRowSelectionAllowed(false);\n        //customize column witdhs\n        final int width1 = jScrollPane1.getPreferredSize().width;\n        TableColumn column1 = null;\n        for (int i = 0; i < notableHashTable.getColumnCount(); i++) {\n            column1 = notableHashTable.getColumnModel().getColumn(i);\n            if (i == 0) {\n                column1.setPreferredWidth(((int) (width1 * 0.07)));\n            } else {\n                column1.setPreferredWidth(((int) (width1 * 0.92)));\n            }\n        }\n        \n        reloadSets();\n    }","commit_id":"b7cdecf4da50a9907ce443709e64ba8331e1bc73","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        notableHashTable = new javax.swing.JTable();\n        jLabel1 = new javax.swing.JLabel();\n        nsrlDbLabel = new javax.swing.JLabel();\n        calcHashesButton = new javax.swing.JCheckBox();\n        nsrlDbLabelVal = new javax.swing.JLabel();\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));\n\n        notableHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        notableHashTable.setShowHorizontalLines(false);\n        notableHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(notableHashTable);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.jLabel1.text\")); // NOI18N\n\n        nsrlDbLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.nsrlDbLabel.text\")); // NOI18N\n\n        calcHashesButton.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.calcHashesButton.text\")); // NOI18N\n\n        nsrlDbLabelVal.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.nsrlDbLabelVal.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(calcHashesButton)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                            .addComponent(nsrlDbLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(nsrlDbLabelVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(nsrlDbLabel)\n                    .addComponent(nsrlDbLabelVal))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(calcHashesButton)\n                .addContainerGap())\n        );\n    }","id":5447,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        notableHashTable = new javax.swing.JTable();\n        jLabel1 = new javax.swing.JLabel();\n        nsrlDbLabel = new javax.swing.JLabel();\n        calcHashesButton = new javax.swing.JCheckBox();\n        nsrlDbLabelVal = new javax.swing.JLabel();\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        notableHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        notableHashTable.setShowHorizontalLines(false);\n        notableHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(notableHashTable);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.jLabel1.text\")); // NOI18N\n\n        nsrlDbLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.nsrlDbLabel.text\")); // NOI18N\n\n        calcHashesButton.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.calcHashesButton.text\")); // NOI18N\n\n        nsrlDbLabelVal.setText(org.openide.util.NbBundle.getMessage(HashDbSimplePanel.class, \"HashDbSimplePanel.nsrlDbLabelVal.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addComponent(nsrlDbLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(nsrlDbLabelVal, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(calcHashesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(7, 7, 7)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(nsrlDbLabel)\n                    .addComponent(nsrlDbLabelVal))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(calcHashesButton)\n                .addContainerGap())\n        );\n    }","commit_id":"b7cdecf4da50a9907ce443709e64ba8331e1bc73","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        listsScrollPane = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        jLabel1 = new javax.swing.JLabel();\n        languagesLabel = new javax.swing.JLabel();\n        languagesValLabel = new javax.swing.JLabel();\n        jSeparator2 = new javax.swing.JSeparator();\n\n        setPreferredSize(new java.awt.Dimension(300, 170));\n\n        listsScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));\n        listsScrollPane.setPreferredSize(new java.awt.Dimension(300, 100));\n\n        listsTable.setBackground(new java.awt.Color(240, 240, 240));\n        listsTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsScrollPane.setViewportView(listsTable);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.jLabel1.text\")); // NOI18N\n\n        languagesLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesLabel.text\")); // NOI18N\n        languagesLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesLabel.toolTipText\")); // NOI18N\n\n        languagesValLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesValLabel.text\")); // NOI18N\n        languagesValLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesValLabel.toolTipText\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jSeparator2)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(10, 10, 10)\n                                .addComponent(languagesValLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(languagesLabel)\n                                .addGap(0, 0, Short.MAX_VALUE)))\n                        .addContainerGap())\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(listsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jLabel1))\n                        .addGap(0, 0, Short.MAX_VALUE))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(languagesLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(languagesValLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(listsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","id":5448,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        listsScrollPane = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        jLabel1 = new javax.swing.JLabel();\n        languagesLabel = new javax.swing.JLabel();\n        languagesValLabel = new javax.swing.JLabel();\n\n        setPreferredSize(new java.awt.Dimension(300, 170));\n\n        listsScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        listsScrollPane.setPreferredSize(new java.awt.Dimension(300, 100));\n\n        listsTable.setBackground(new java.awt.Color(240, 240, 240));\n        listsTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsScrollPane.setViewportView(listsTable);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.jLabel1.text\")); // NOI18N\n\n        languagesLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesLabel.text\")); // NOI18N\n        languagesLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesLabel.toolTipText\")); // NOI18N\n\n        languagesValLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesValLabel.text\")); // NOI18N\n        languagesValLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeywordSearchIngestSimplePanel.class, \"KeywordSearchIngestSimplePanel.languagesValLabel.toolTipText\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(10, 10, 10)\n                                .addComponent(languagesValLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(jLabel1))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(languagesLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                        .addContainerGap())))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(7, 7, 7)\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(listsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(languagesLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(languagesValLabel)\n                .addGap(7, 7, 7))\n        );\n    }","commit_id":"b7cdecf4da50a9907ce443709e64ba8331e1bc73","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void customizeComponents() {\n        listsTable.setModel(tableModel);\n        \n        listsTable.setTableHeader(null);\n        listsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        //customize column witdhs\n        final int width = listsScrollPane.getPreferredSize().width;\n        TableColumn column = null;\n        for (int i = 0; i < listsTable.getColumnCount(); i++) {\n            column = listsTable.getColumnModel().getColumn(i);\n            if (i == 0) {\n                column.setPreferredWidth(((int) (width * 0.15)));\n            } else {\n                column.setPreferredWidth(((int) (width * 0.84)));\n            }\n        }\n        \n        reloadLangs();\n    }","id":5449,"modified_method":"private void customizeComponents() {\n        listsTable.setModel(tableModel);\n        \n        listsTable.setTableHeader(null);\n        listsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        //customize column witdhs\n        final int width = listsScrollPane.getPreferredSize().width;\n        TableColumn column = null;\n        for (int i = 0; i < listsTable.getColumnCount(); i++) {\n            column = listsTable.getColumnModel().getColumn(i);\n            if (i == 0) {\n                column.setPreferredWidth(((int) (width * 0.07)));\n            } else {\n                column.setPreferredWidth(((int) (width * 0.92)));\n            }\n        }\n        \n        reloadLangs();\n    }","commit_id":"b7cdecf4da50a9907ce443709e64ba8331e1bc73","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public String getColumnName(int column) {\n            String colName = null;\n            switch (column) {\n                case 0:\n                    colName = \"Name\";\n                    break;\n                case 1:\n                    colName = \"Ingest\";\n                    break;\n                default:\n                    ;\n\n            }\n            return colName;\n        }","id":5450,"modified_method":"@Override\n        public String getColumnName(int column) {\n            String colName = null;\n            switch (column) {\n                case 0:\n                    colName = \"Name\";\n                    break;\n                default:\n                    ;\n\n            }\n            return colName;\n        }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public boolean isCellEditable(int rowIndex, int columnIndex) {\n            return columnIndex == 1 ? true : false;\n        }","id":5451,"modified_method":"@Override\n        public boolean isCellEditable(int rowIndex, int columnIndex) {\n            return false;\n        }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\n            if (columnIndex == 1) {\n                TableEntry entry = null;\n                //iterate until row\n                Iterator<TableEntry> it = listData.iterator();\n                for (int i = 0; i <= rowIndex && it.hasNext(); ++i) {\n                    entry = it.next();\n                }\n                if (entry != null){\n                    if(columnIndex == 1)\n                        entry.useForIngest = (Boolean) aValue;\n                }\n               \n            }\n        }","id":5452,"modified_method":"@Override\n        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\n            throw new UnsupportedOperationException(\"Editing of cells is not supported\");\n        }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public int getColumnCount() {\n            return 2;\n        }","id":5453,"modified_method":"@Override\n        public int getColumnCount() {\n            return 1;\n        }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"TableEntry(KeywordSearchList list) {\n                this.name = list.getName();\n                this.useForIngest = false;\n            }","id":5454,"modified_method":"TableEntry(KeywordSearchList list) {\n                this.name = list.getName();\n            }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        searchListsLabel = new javax.swing.JLabel();\n        newListButton = new javax.swing.JButton();\n\n        listsTable.setModel(tableModel);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(listsTable);\n\n        searchListsLabel.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n        searchListsLabel.setText(org.openide.util.NbBundle.getMessage(KeywordSearchListsManagementPanel.class, \"KeywordSearchListsManagementPanel.searchListsLabel.text\")); // NOI18N\n\n        newListButton.setText(org.openide.util.NbBundle.getMessage(KeywordSearchListsManagementPanel.class, \"KeywordSearchListsManagementPanel.newListButton.text\")); // NOI18N\n        newListButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newListButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(searchListsLabel)\n                .addContainerGap(113, Short.MAX_VALUE))\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(newListButton)\n                .addContainerGap(209, Short.MAX_VALUE))\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(searchListsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(newListButton)\n                .addContainerGap())\n        );\n    }","id":5455,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        newListButton = new javax.swing.JButton();\n        importButton = new javax.swing.JButton();\n\n        setBackground(new java.awt.Color(204, 204, 204));\n        setMinimumSize(new java.awt.Dimension(200, 0));\n        setPreferredSize(new java.awt.Dimension(200, 297));\n\n        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));\n        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 402));\n\n        listsTable.setBackground(new java.awt.Color(204, 204, 204));\n        listsTable.setModel(tableModel);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(listsTable);\n\n        newListButton.setBackground(new java.awt.Color(204, 204, 204));\n        newListButton.setText(org.openide.util.NbBundle.getMessage(KeywordSearchListsManagementPanel.class, \"KeywordSearchListsManagementPanel.newListButton.text\")); // NOI18N\n        newListButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newListButtonActionPerformed(evt);\n            }\n        });\n\n        importButton.setBackground(new java.awt.Color(204, 204, 204));\n        importButton.setText(org.openide.util.NbBundle.getMessage(KeywordSearchListsManagementPanel.class, \"KeywordSearchListsManagementPanel.importButton.text\")); // NOI18N\n        importButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                importButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(19, 19, 19)\n                        .addComponent(newListButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(importButton))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)\n                .addGap(0, 0, 0)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(newListButton)\n                    .addComponent(importButton)))\n        );\n    }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void customizeComponents() {\n\n\n        listsTable.setAutoscrolls(true);\n        //listsTable.setTableHeader(null);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n\n        listsTable.getParent().setBackground(listsTable.getBackground());\n\n        //customize column witdhs\n        listsTable.setSize(260, 200);\n        final int width = listsTable.getSize().width;\n        TableColumn column = null;\n        for (int i = 0; i < 2; i++) {\n            column = listsTable.getColumnModel().getColumn(i);\n            switch (i) {\n                case 0:\n                    column.setPreferredWidth(((int) (width * 0.69)));\n                    break;\n                case 1:\n                    column.setPreferredWidth(((int) (width * 0.30)));\n                    break;\n                default:\n                    break;\n\n            }\n\n        }\n        listsTable.setCellSelectionEnabled(false);\n        listsTable.setRowSelectionAllowed(true);\n        tableModel.resync();\n\n        KeywordSearchListsXML.getCurrent().addPropertyChangeListener(new PropertyChangeListener() {\n\n            @Override\n            public void propertyChange(PropertyChangeEvent evt) {\n                if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_ADDED.toString())) {\n                    tableModel.resync();\n                    for(int i = 0; i<listsTable.getRowCount(); i++){\n                            String name = (String) listsTable.getValueAt(i, 0);\n                            if(((String) evt.getNewValue()).equals(name))\n                                listsTable.getSelectionModel().setSelectionInterval(i, i);\n                    }\n                } else if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_DELETED.toString())) {\n                    tableModel.resync();\n                    if(listsTable.getRowCount() > 0)\n                        listsTable.getSelectionModel().setSelectionInterval(0, 0);\n                } else if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_UPDATED.toString())) {\n                    tableModel.resync((String) evt.getNewValue()); //changed list name\n                }\n            }\n        });\n\n    }","id":5456,"modified_method":"private void customizeComponents() {\n\n\n        listsTable.setAutoscrolls(true);\n        listsTable.setTableHeader(null);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n\n        listsTable.getParent().setBackground(listsTable.getBackground());\n\n        listsTable.setCellSelectionEnabled(false);\n        listsTable.setRowSelectionAllowed(true);\n        tableModel.resync();\n\n        KeywordSearchListsXML.getCurrent().addPropertyChangeListener(new PropertyChangeListener() {\n\n            @Override\n            public void propertyChange(PropertyChangeEvent evt) {\n                if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_ADDED.toString())) {\n                    tableModel.resync();\n                    for(int i = 0; i<listsTable.getRowCount(); i++){\n                            String name = (String) listsTable.getValueAt(i, 0);\n                            if(((String) evt.getNewValue()).equals(name))\n                                listsTable.getSelectionModel().setSelectionInterval(i, i);\n                    }\n                } else if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_DELETED.toString())) {\n                    tableModel.resync();\n                    if(listsTable.getRowCount() > 0)\n                        listsTable.getSelectionModel().setSelectionInterval(0, 0);\n                } else if (evt.getPropertyName().equals(KeywordSearchListsXML.ListsEvt.LIST_UPDATED.toString())) {\n                    tableModel.resync((String) evt.getNewValue()); //changed list name\n                }\n            }\n        });\n\n    }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            Object ret = null;\n            TableEntry entry = null;\n            //iterate until row\n            Iterator<TableEntry> it = listData.iterator();\n            for (int i = 0; i <= rowIndex; ++i) {\n                entry = it.next();\n            }\n            switch (columnIndex) {\n                case 0:\n                    ret = (Object) entry.name;\n                    break;\n                case 1:\n                    ret = (Object) entry.useForIngest;\n                    break;\n                default:\n                    break;\n            }\n            return ret;\n        }","id":5457,"modified_method":"@Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            Object ret = null;\n            TableEntry entry = null;\n            //iterate until row\n            Iterator<TableEntry> it = listData.iterator();\n            for (int i = 0; i <= rowIndex; ++i) {\n                entry = it.next();\n            }\n            switch (columnIndex) {\n                case 0:\n                    ret = (Object) entry.name;\n                    break;\n                default:\n                    break;\n            }\n            return ret;\n        }","commit_id":"73a1f8440763f08f1aad1b9582ad9f01484a4a6a","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public FindUnrelatedTypesInGenericContainer(BugReporter bugReporter) {\r\n\t\tthis.bugReporter = bugReporter;\r\n\t\tString basicSignature = \"(Ljava/lang/Object;)Z\";\r\n\t\tString collectionSignature = \"(Ljava/util/Collection<*>;)Z\";\r\n\t\tString indexSignature = \"(Ljava/lang/Object;)I\";\r\n\r\n\t\tif (false) {\r\n\t\t\t// Collection<E>\r\n\t\t\taddToCollectionsMap(Collection.class.getName(), \"contains\", basicSignature, 0);\r\n\t\t\t//addToCollectionsMap(Collection.class.getName(), \"equals\",   basicSignature, 0);\r\n\t\t\taddToCollectionsMap(Collection.class.getName(), \"remove\",   basicSignature, 0);\r\n\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"containsAll\", collectionSignature, 0);\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"removeAll\",   collectionSignature, 0);\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"retainAll\",   collectionSignature, 0);\r\n\r\n\t\t\t// List<E>\r\n\t\t\taddToCollectionsMap(List.class.getName(), \"indexOf\", indexSignature, 0);\r\n\t\t\taddToCollectionsMap(List.class.getName(), \"lastIndexOf\", indexSignature, 0);\r\n\r\n\t\t\t// Map<K,V>\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"containsKey\", basicSignature, 0);\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"containsValue\", basicSignature, 1);\r\n\r\n\r\n\t\t}\r\n\t\t// Collection<E>\r\n\t\taddToCollectionsMap(collectionMembers, \"contains\", basicSignature, 0);\r\n\t\t//addToCollectionsMap(collectionMembers, \"equals\",   basicSignature, 0);\r\n\t\taddToCollectionsMap(collectionMembers, \"remove\",   basicSignature, 0);\r\n\r\n\t\t//addToCollectionsMap(collectionMembers, \"containsAll\", collectionSignature, 0);\r\n\t\t//addToCollectionsMap(collectionMembers, \"removeAll\",   collectionSignature, 0);\r\n\t\t//addToCollectionsMap(collectionMembers, \"retainAll\",   collectionSignature, 0);\r\n\r\n\t\t// List<E>\r\n\t\taddToCollectionsMap(listMembers, \"indexOf\", indexSignature, 0);\r\n\t\taddToCollectionsMap(listMembers, \"lastIndexOf\", indexSignature, 0);\r\n\r\n\t\t// Map<K,V>\r\n\t\taddToCollectionsMap(mapMembers, \"containsKey\", basicSignature, 0);\r\n\t\taddToCollectionsMap(mapMembers, \"containsValue\", basicSignature, 1);\r\n\r\n\t\t// XXX these do not work, to support these need changeable return types\r\n\t\taddToCollectionsMap(mapMembers, \"get\", basicSignature, 0);\r\n\t\taddToCollectionsMap(mapMembers, \"remove\", basicSignature, 0);\r\n\t}","id":5458,"modified_method":"public FindUnrelatedTypesInGenericContainer(BugReporter bugReporter) {\r\n\t\tthis.bugReporter = bugReporter;\r\n\t\tString basicSignature = \"(Ljava/lang/Object;)Z\";\r\n\t\tString collectionSignature = \"(Ljava/util/Collection<*>;)Z\";\r\n\t\tString indexSignature = \"(Ljava/lang/Object;)I\";\r\n\r\n\t\t\t// Collection<E>\r\n\t\t\taddToCollectionsMap(Collection.class.getName(), \"contains\", 0);\r\n\t\t\taddToCollectionsMap(Collection.class.getName(), \"remove\",   0);\r\n\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"containsAll\", collectionSignature, 0);\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"removeAll\",   collectionSignature, 0);\r\n\t\t\t//addToCollectionsMap(collectionMembers, \"retainAll\",   collectionSignature, 0);\r\n\r\n\t\t\t// List<E>\r\n\t\t\taddToCollectionsMap(List.class.getName(), \"indexOf\", 0);\r\n\t\t\taddToCollectionsMap(List.class.getName(), \"lastIndexOf\", 0);\r\n\r\n\t\t\t// Map<K,V>\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"containsKey\", 0);\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"containsValue\", 1);\r\n\r\n\t\t\t// Map<K,V>\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"get\", 0);\r\n\t\t\taddToCollectionsMap(Map.class.getName(), \"remove\", 0);\r\n\r\n\t\t\t}","commit_id":"646020c07418b6dbdd45b06c75910cc923c5cc83","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void addToCollectionsMap(String className, String methodName, \r\n\t\t\tString methodSignature, int... argumentParameterIndex) {\r\n\t\tcollectionsMap.put(\r\n\t\t\t\tgetCollectionsMapKey(className, methodName, methodSignature), \r\n\t\t\t\targumentParameterIndex);\r\n\t}","id":5459,"modified_method":"private void addToCollectionsMap(@DottedClassName String className, String methodName, \r\n\t\t\tint argumentParameterIndex) {\r\n\t\tClassDescriptor c = DescriptorFactory.instance().getClassDescriptorForDottedClassName(className);\r\n\t\tnameToInterfaceMap.put(methodName, c);\r\n\t\tnameToTypeArgumentIndex.put(methodName, argumentParameterIndex);\r\n\t\t}","commit_id":"646020c07418b6dbdd45b06c75910cc923c5cc83","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void analyzeMethod(ClassContext classContext, Method method)\r\n\tthrows CFGBuilderException, DataflowAnalysisException {\r\n\t\tif (isSynthetic(method) || !prescreen(classContext, method))\r\n\t\t\treturn;\r\n\r\n\t\tBugAccumulator accumulator = new BugAccumulator(bugReporter);\r\n\r\n\t\tCFG cfg = classContext.getCFG(method);\r\n\t\tTypeDataflow typeDataflow = classContext.getTypeDataflow(method);\r\n\r\n\t\tConstantPoolGen cpg = classContext.getConstantPoolGen();\r\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\r\n\t\tif (methodGen == null) return;\r\n\t\tString fullMethodName = \r\n\t\t\tmethodGen.getClassName() + \".\" + methodGen.getName(); \r\n\r\n\t\tString sourceFile = classContext.getJavaClass().getSourceFileName();\r\n\t\tif (DEBUG) {\r\n\t\t\tSystem.out.println(\"Checking \" + fullMethodName);\r\n\t\t}\r\n\r\n\t\t// Process each instruction\r\n\t\tfor (Iterator<Location> iter = cfg.locationIterator(); iter.hasNext();) {\r\n\t\t\tLocation location = iter.next();\r\n\t\t\tInstructionHandle handle = location.getHandle();\r\n\t\t\tInstruction ins = handle.getInstruction();\r\n\r\n\t\t\t// Only consider invoke instructions\r\n\t\t\tif (!(ins instanceof InvokeInstruction))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tInvokeInstruction inv = (InvokeInstruction)ins;\r\n\r\n\t\t\tXMethod primaryXMethod = XFactory.createXMethod(inv, cpg);\r\n\t\t\tif (DEBUG) {\r\n\t\t\t\tSet<XMethod> superMethods = Hierarchy2.findSuperMethods(primaryXMethod);\r\n\t\t\t\tfor(XMethod m : superMethods) {\r\n\t\t\t\t\tSystem.out.println(m);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// check the relevance of this instruction\r\n\t\t\tString [] itriplet = getInstructionTriplet(inv, cpg);\r\n\t\t\tString [] triplet = getRelevantTriplet(itriplet);\r\n\t\t\tif (triplet == null)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t// get the list of parameter indexes for each argument position\r\n\t\t\tint [] argumentParameterIndex = \r\n\t\t\t\tcollectionsMap.get( getCollectionsMapKey(triplet) );\r\n\r\n\t\t\tTypeFrame frame = typeDataflow.getFactAtLocation(location);\r\n\t\t\tif (!frame.isValid()) {\r\n\t\t\t\t// This basic block is probably dead\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tType operandType = frame.getTopValue();\r\n\t\t\tif (operandType.equals(TopType.instance())) {\r\n\t\t\t\t// unreachable\r\n\t\t\t\tcontinue;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\t// Only consider generic... \r\n\t\t\tType objectType = frame.getInstance(inv, cpg);\t\t\t\r\n\t\t\tif (!(objectType instanceof GenericObjectType))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tGenericObjectType operand = (GenericObjectType) objectType;\r\n\r\n\t\t\t// ... containers\r\n\t\t\tif (!operand.hasParameters()) continue;\r\n\r\n\t\t\tint numArguments = frame.getNumArguments(inv, cpg);\r\n\r\n\t\t\tif (numArguments <= 0 || argumentParameterIndex.length != numArguments)\r\n\t\t\t\tcontinue; \r\n\r\n\t\t\t// compare containers type parameters to corresponding arguments\r\n\t\t\tboolean match = true;\r\n\t\t\tIncompatibleTypes [] matches = new IncompatibleTypes [numArguments];\r\n\t\t\tfor (int i=0; i<numArguments; i++) matches[i] = IncompatibleTypes.SEEMS_OK;\r\n\t\t\tSignatureParser sigParser = new SignatureParser(inv.getSignature(cpg));\r\n\r\n\t\t\tfor (int ii=0; ii < numArguments; ii++) {\r\n\t\t\t\tif (argumentParameterIndex[ii] < 0) continue; // not relevant argument\r\n\t\t\t\tif (argumentParameterIndex[ii] >= operand.getNumParameters()) \r\n\t\t\t\t\tcontinue; // should never happen\r\n\r\n\t\t\t\tType parmType = operand.getParameterAt(argumentParameterIndex[ii]);\r\n\t\t\t\tType argType = frame.getArgument(inv, cpg, ii, sigParser);\r\n\t\t\t\tmatches[ii] = compareTypes(parmType, argType);\r\n\r\n\t\t\t\tif (matches[ii] != IncompatibleTypes.SEEMS_OK) match = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (match)\r\n\t\t\t\tcontinue; // no bug\r\n\r\n\t\t\t// Prepare bug report\r\n\t\t\tSourceLineAnnotation sourceLineAnnotation = SourceLineAnnotation\r\n\t\t\t.fromVisitedInstruction(classContext, methodGen, sourceFile, handle);\r\n\r\n\t\t\t// Report a bug that mentions each of the failed arguments in matches\r\n\t\t\tfor (int i=0; i<numArguments; i++) {\r\n\t\t\t\tif (matches[i] == IncompatibleTypes.SEEMS_OK) continue;\r\n\r\n\t\t\t\tType parmType = operand.getParameterAt(argumentParameterIndex[i]);\r\n\t\t\t\tif (parmType instanceof GenericObjectType)\r\n\t\t\t\t\tparmType = ((GenericObjectType)parmType).getUpperBound();\r\n\t\t\t\tType argType = frame.getArgument(inv, cpg, i, sigParser);\r\n\r\n\t\t\t\taccumulator.accumulateBug(new BugInstance(this,\r\n\t\t\t\t\t\t\"GC_UNRELATED_TYPES\", matches[i].getPriority())\r\n\t\t\t\t\t\t.addClassAndMethod(methodGen, sourceFile)\t\t\t\t\t\r\n\t\t\t\t\t\t//.addString(GenericUtilities.getString(parmType))\r\n\t\t\t\t\t\t//.addString(GenericUtilities.getString(argType))\r\n\t\t\t\t\t\t.addFoundAndExpectedType(argType.getSignature(), parmType.getSignature())\r\n\t\t\t\t\t\t.addCalledMethod(methodGen, (InvokeInstruction) ins)\r\n\t\t\t\t\t\t,sourceLineAnnotation);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\taccumulator.reportAccumulatedBugs();\r\n\t}","id":5460,"modified_method":"private void analyzeMethod(ClassContext classContext, Method method)\r\n\tthrows CFGBuilderException, DataflowAnalysisException {\r\n\t\tif (isSynthetic(method) || !prescreen(classContext, method))\r\n\t\t\treturn;\r\n\r\n\t\tBugAccumulator accumulator = new BugAccumulator(bugReporter);\r\n\r\n\t\tCFG cfg = classContext.getCFG(method);\r\n\t\tTypeDataflow typeDataflow = classContext.getTypeDataflow(method);\r\n\r\n\t\tConstantPoolGen cpg = classContext.getConstantPoolGen();\r\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\r\n\t\tif (methodGen == null) return;\r\n\t\tString fullMethodName = \r\n\t\t\tmethodGen.getClassName() + \".\" + methodGen.getName(); \r\n\r\n\t\tString sourceFile = classContext.getJavaClass().getSourceFileName();\r\n\t\tif (DEBUG) {\r\n\t\t\tSystem.out.println(\"Checking \" + fullMethodName);\r\n\t\t}\r\n\r\n\t\t// Process each instruction\r\n\t\tfor (Iterator<Location> iter = cfg.locationIterator(); iter.hasNext();) {\r\n\t\t\tLocation location = iter.next();\r\n\t\t\tInstructionHandle handle = location.getHandle();\r\n\t\t\tInstruction ins = handle.getInstruction();\r\n\r\n\t\t\t// Only consider invoke instructions\r\n\t\t\tif (!(ins instanceof InvokeInstruction))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tInvokeInstruction inv = (InvokeInstruction)ins;\r\n\r\n\t\t\tXMethod m = XFactory.createXMethod(inv, cpg);\r\n\t\t\t\r\n\t\t\tClassDescriptor interfaceOfInterest = nameToInterfaceMap.get(m.getName());\r\n\t\t\tif (interfaceOfInterest == null) continue;\r\n\t\t\tString argSignature = m.getSignature();\r\n\t\t\targSignature = argSignature.substring(0,argSignature.indexOf(')')+1);\r\n\t\t\tif (!argSignature.equals(\"(Ljava/lang/Object;)\")) continue;\r\n\t\t\t\r\n\t\t\tSubtypes2 subtypes2 = AnalysisContext.currentAnalysisContext().getSubtypes2();\r\n\t\t\ttry {\r\n\t            if (!subtypes2.isSubtype(m.getClassDescriptor(), interfaceOfInterest)) continue;\r\n            } catch (ClassNotFoundException e) {\r\n\t           AnalysisContext.reportMissingClass(e);\r\n\t           continue;\r\n            }\r\n\t\t\t// OK, we've fold a method call of interest\r\n\t\t\t\r\n\t\t\tint typeArgument = nameToTypeArgumentIndex.get(m.getName());\r\n\t\t\t\r\n\t\t\tTypeFrame frame = typeDataflow.getFactAtLocation(location);\r\n\t\t\tif (!frame.isValid()) {\r\n\t\t\t\t// This basic block is probably dead\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tType operandType = frame.getTopValue();\r\n\t\t\tif (operandType.equals(TopType.instance())) {\r\n\t\t\t\t// unreachable\r\n\t\t\t\tcontinue;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\t// Only consider generic... \r\n\t\t\tType objectType = frame.getInstance(inv, cpg);\t\t\t\r\n\t\t\tif (!(objectType instanceof GenericObjectType))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tGenericObjectType operand = (GenericObjectType) objectType;\r\n\r\n\t\t\t// ... containers\r\n\t\t\tif (!operand.hasParameters()) continue;\r\n\r\n\t\t\tint numArguments = frame.getNumArguments(inv, cpg);\r\n\r\n\t\t\tif (numArguments != 1)\r\n\t\t\t\tcontinue; \r\n\r\n\t\t\t// compare containers type parameters to corresponding arguments\r\n\t\t\tSignatureParser sigParser = new SignatureParser(inv.getSignature(cpg));\r\n\r\n\t\t\tType parmType = operand.getParameterAt(typeArgument);\r\n\t\t\tType argType = frame.getArgument(inv, cpg, 0, sigParser);\r\n\t\t\tIncompatibleTypes  matchResult = compareTypes(parmType, argType);\r\n\r\n\t\t\tif (matchResult == IncompatibleTypes.SEEMS_OK) continue;\r\n\r\n\t\t\t// Prepare bug report\r\n\t\t\tSourceLineAnnotation sourceLineAnnotation = SourceLineAnnotation\r\n\t\t\t.fromVisitedInstruction(classContext, methodGen, sourceFile, handle);\r\n\r\n\t\t\t// Report a bug that mentions each of the failed arguments in matches\r\n\r\n\t\t\tif (parmType instanceof GenericObjectType)\r\n\t\t\t\tparmType = ((GenericObjectType)parmType).getUpperBound();\r\n\r\n\t\t\taccumulator.accumulateBug(new BugInstance(this,\r\n\t\t\t\t\t\"GC_UNRELATED_TYPES\", matchResult.getPriority())\r\n\t\t\t.addClassAndMethod(methodGen, sourceFile)\t\t\t\t\t\r\n\t\t\t//.addString(GenericUtilities.getString(parmType))\r\n\t\t\t//.addString(GenericUtilities.getString(argType))\r\n\t\t\t.addFoundAndExpectedType(argType.getSignature(), parmType.getSignature())\r\n\t\t\t.addCalledMethod(methodGen, (InvokeInstruction) ins)\r\n\t\t\t,sourceLineAnnotation);\r\n\t\t}\r\n\t\taccumulator.reportAccumulatedBugs();\r\n\t}","commit_id":"646020c07418b6dbdd45b06c75910cc923c5cc83","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public static boolean baseMappingRule_Condition_7060824959896205081(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum(\"r:b567205c-7e17-4168-b413-945a6e17f37d(jetbrains.mps.samples.Kaja.structure)\", \"LookingDirection\"), \"east\")).equals(SPropertyOperations.getString_def(_context.getNode(), \"direction\", null));\n  }","id":5461,"modified_method":"public static boolean baseMappingRule_Condition_7060824959896205081(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SPropertyOperations.hasValue(_context.getNode(), \"direction\", \"east\", null);\n  }","commit_id":"e0f28275b68c677a82aa25a1c864ac5f97c202e2","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean baseMappingRule_Condition_7060824959896330163(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum(\"r:b567205c-7e17-4168-b413-945a6e17f37d(jetbrains.mps.samples.Kaja.structure)\", \"LookingDirection\"), \"north\")).equals(SPropertyOperations.getString_def(_context.getNode(), \"direction\", null));\n  }","id":5462,"modified_method":"public static boolean baseMappingRule_Condition_7060824959896330163(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SPropertyOperations.hasValue(_context.getNode(), \"direction\", \"north\", null);\n  }","commit_id":"e0f28275b68c677a82aa25a1c864ac5f97c202e2","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean baseMappingRule_Condition_7060824959896333440(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum(\"r:b567205c-7e17-4168-b413-945a6e17f37d(jetbrains.mps.samples.Kaja.structure)\", \"LookingDirection\"), \"south\")).equals(SPropertyOperations.getString_def(_context.getNode(), \"direction\", null));\n  }","id":5463,"modified_method":"public static boolean baseMappingRule_Condition_7060824959896333440(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SPropertyOperations.hasValue(_context.getNode(), \"direction\", \"south\", null);\n  }","commit_id":"e0f28275b68c677a82aa25a1c864ac5f97c202e2","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean baseMappingRule_Condition_7060824959896333392(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum(\"r:b567205c-7e17-4168-b413-945a6e17f37d(jetbrains.mps.samples.Kaja.structure)\", \"LookingDirection\"), \"west\")).equals(SPropertyOperations.getString_def(_context.getNode(), \"direction\", null));\n  }","id":5464,"modified_method":"public static boolean baseMappingRule_Condition_7060824959896333392(final IOperationContext operationContext, final BaseMappingRuleContext _context) {\n    return SPropertyOperations.hasValue(_context.getNode(), \"direction\", \"west\", null);\n  }","commit_id":"e0f28275b68c677a82aa25a1c864ac5f97c202e2","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected long getTimeStamp() {\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 trap first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 trap first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 trap does not have the required first varbind as TIMETICKS - cannot process trap\");\n            }\n        }","id":5465,"modified_method":"protected long getTimeStamp() {\n\n        \tif (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" does not have the required first varbind as TIMETICKS - cannot process \"+m_pduTypeString);\n            }\n        }","commit_id":"9266d80f392d73947192705037ced86b0b66ace4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processPdu(CommandResponderEvent e) {\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","id":5466,"modified_method":"public void processPdu(CommandResponderEvent e) {\n    \tPDU command = new PDU(e.getPDU());\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (command != null) {\n        \tif (command.getType() == PDU.INFORM) {\n        \t\tPDU response = new PDU(command);\n        \t\tresponse.setErrorIndex(0);\n        \t\tresponse.setErrorStatus(0);\n        \t\tresponse.setType(PDU.RESPONSE);\n        \t\tStatusInformation statusInformation = new StatusInformation();\n        \t\tStateReference ref = e.getStateReference();\n        \t\ttry {\n        \t\t\te.getMessageDispatcher().returnResponsePdu(e.getMessageProcessingModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityName(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityLevel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tresponse,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getMaxSizeResponsePDU(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tref,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tstatusInformation);\n        \t\t\tif (log().isDebugEnabled()) {\n        \t\t\t\tlog().debug(\"Sent RESPONSE PDU to peer \" + addr + \" acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t\t}\n        \t\t} catch (MessageException ex) {\n        \t\t\tlog().error(\"Error while sending RESPONSE PDU to peer \" + addr + \": \" + ex.getMessage() + \"acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t}\n        \t}\n        }\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","commit_id":"9266d80f392d73947192705037ced86b0b66ace4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n        }","id":5467,"modified_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n            m_pduTypeString = PDU.getTypeString(m_pdu.getType());\n        }","commit_id":"9266d80f392d73947192705037ced86b0b66ace4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void validate() {\n            //\n            // verify the type\n            //\n            if (getPdu().getType() != PDU.TRAP) {\n                // if not V2 trap, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap from host \" + getTrapAddress() + \"PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 trap from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","id":5468,"modified_method":"protected void validate() {\n            //\n            // verify the type\n            //\n        \tint pduType = getPdu().getType();\n            if (pduType != PDU.TRAP && pduType != PDU.INFORM) {\n                // if not V2 trap or inform, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap|Inform from host \" + getTrapAddress() + \" PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed at least 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","commit_id":"9266d80f392d73947192705037ced86b0b66ace4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void validate() {\n            //\n            // verify the type\n            //\n            if (getPdu().getType() != PDU.TRAP) {\n                // if not V2 trap, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap from host \" + getTrapAddress() + \"PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 trap from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","id":5469,"modified_method":"protected void validate() {\n            //\n            // verify the type\n            //\n        \tint pduType = getPdu().getType();\n            if (pduType != PDU.TRAP && pduType != PDU.INFORM) {\n                // if not V2 trap or inform, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap|Inform from host \" + getTrapAddress() + \" PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed at least 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","commit_id":"9fc7bd8122139939df1088149e9577c0ecb8eeb6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processPdu(CommandResponderEvent e) {\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","id":5470,"modified_method":"public void processPdu(CommandResponderEvent e) {\n    \tPDU command = new PDU(e.getPDU());\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (command != null) {\n        \tif (command.getType() == PDU.INFORM) {\n        \t\tPDU response = new PDU(command);\n        \t\tresponse.setErrorIndex(0);\n        \t\tresponse.setErrorStatus(0);\n        \t\tresponse.setType(PDU.RESPONSE);\n        \t\tStatusInformation statusInformation = new StatusInformation();\n        \t\tStateReference ref = e.getStateReference();\n        \t\ttry {\n        \t\t\te.getMessageDispatcher().returnResponsePdu(e.getMessageProcessingModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityName(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityLevel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tresponse,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getMaxSizeResponsePDU(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tref,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tstatusInformation);\n        \t\t\tif (log().isDebugEnabled()) {\n        \t\t\t\tlog().debug(\"Sent RESPONSE PDU to peer \" + addr + \" acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t\t}\n        \t\t} catch (MessageException ex) {\n        \t\t\tlog().error(\"Error while sending RESPONSE PDU to peer \" + addr + \": \" + ex.getMessage() + \"acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t}\n        \t}\n        }\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","commit_id":"9fc7bd8122139939df1088149e9577c0ecb8eeb6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n        }","id":5471,"modified_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n            m_pduTypeString = PDU.getTypeString(m_pdu.getType());\n        }","commit_id":"9fc7bd8122139939df1088149e9577c0ecb8eeb6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected long getTimeStamp() {\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 trap first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 trap first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 trap does not have the required first varbind as TIMETICKS - cannot process trap\");\n            }\n        }","id":5472,"modified_method":"protected long getTimeStamp() {\n\n        \tif (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" does not have the required first varbind as TIMETICKS - cannot process \"+m_pduTypeString);\n            }\n        }","commit_id":"9fc7bd8122139939df1088149e9577c0ecb8eeb6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected long getTimeStamp() {\n\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 trap first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 trap first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 trap does not have the required first varbind as TIMETICKS - cannot process trap\");\n            }\n        }","id":5473,"modified_method":"protected long getTimeStamp() {\n\n        \tif (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value: \" + getVarBindAt(0).getVariable().toString());\n            }\n\n            switch (getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable().getSyntax()) {\n            case SMIConstants.SYNTAX_TIMETICKS:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type TIMETICKS (correct)\");\n                return ((TimeTicks) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            case SMIConstants.SYNTAX_INTEGER32:\n                log().debug(\"V2 \"+m_pduTypeString+\" first varbind value is of type INTEGER, casting to TIMETICKS\");\n                return ((Integer32) getVarBindAt(SNMP_SYSUPTIME_OID_INDEX).getVariable()).getValue();\n            default:\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" does not have the required first varbind as TIMETICKS - cannot process \"+m_pduTypeString);\n            }\n        }","commit_id":"05801d2b89f0c39b0c0d30f6b37c3969dd2bc014","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n        }","id":5474,"modified_method":"/**\n         * Constructs a new trap information instance that contains the sending\n         * agent, the community string, and the Protocol Data Unit.\n         * \n         * @param agent\n         *            The sending agent's address\n         * @param community\n         *            The community string from the SNMP packet.\n         * @param pdu\n         *            The encapsulated Protocol Data Unit.\n         * @param trapProcessor The trap processor used to process the trap data\n         * \n         */\n        public Snmp4JV2TrapInformation(InetAddress agent, String community, PDU pdu, TrapProcessor trapProcessor) {\n            super(agent, community, trapProcessor);\n            m_pdu = pdu;\n            m_pduTypeString = PDU.getTypeString(m_pdu.getType());\n        }","commit_id":"05801d2b89f0c39b0c0d30f6b37c3969dd2bc014","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void validate() {\n            //\n            // verify the type\n            //\n            if (getPdu().getType() != PDU.TRAP) {\n                // if not V2 trap, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap from host \" + getTrapAddress() + \"PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 trap numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 trap from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 trap from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","id":5475,"modified_method":"protected void validate() {\n            //\n            // verify the type\n            //\n        \tint pduType = getPdu().getType();\n            if (pduType != PDU.TRAP && pduType != PDU.INFORM) {\n                // if not V2 trap or inform, do nothing\n                throw new IllegalArgumentException(\"Received not SNMPv2 Trap|Inform from host \" + getTrapAddress() + \" PDU Type = \" + PDU.getTypeString(getPdu().getType()));\n            }\n            if (log().isDebugEnabled()) {\n                log().debug(\"V2 \"+m_pduTypeString+\" numVars or pdu length: \" + getPduLength());\n            }\n            if (getPduLength() < 2) // check number of varbinds\n            {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.  Have \" + getPduLength() + \", needed at least 2\");\n            }\n            // The first varbind has the sysUpTime\n            // Modify the sysUpTime varbind to add the trailing 0 if it is\n            // missing\n            // The second varbind has the snmpTrapOID\n            // Confirm that these two are present\n            //\n            OID varBindName0 = getVarBindAt(0).getOid();\n            OID varBindName1 = getVarBindAt(1).getOid();\n            if (varBindName0.equals(EXTREME_SNMP_SYSUPTIME_OID)) {\n                log().info(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" has been corrected due to the sysUptime.0 varbind not having been sent with a trailing 0.\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n                varBindName0 = SNMP_SYSUPTIME_OID;\n            }\n            if ((!(varBindName0.equals(SNMP_SYSUPTIME_OID))) || (!(varBindName1.equals(SNMP_TRAP_OID)))) {\n                throw new IllegalArgumentException(\"V2 \"+m_pduTypeString+\" from \" + getTrapAddress() + \" IGNORED due to not having the required varbinds.\\n\\tThe first varbind must be sysUpTime.0 and the second snmpTrapOID.0\\n\\tVarbinds received are : \" + varBindName0 + \" and \" + varBindName1);\n            }\n        }","commit_id":"05801d2b89f0c39b0c0d30f6b37c3969dd2bc014","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processPdu(CommandResponderEvent e) {\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","id":5476,"modified_method":"public void processPdu(CommandResponderEvent e) {\n    \tPDU command = new PDU(e.getPDU());\n        IpAddress addr = ((IpAddress)e.getPeerAddress());\n        \n        if (command != null) {\n        \tif (command.getType() == PDU.INFORM) {\n        \t\tPDU response = new PDU(command);\n        \t\tresponse.setErrorIndex(0);\n        \t\tresponse.setErrorStatus(0);\n        \t\tresponse.setType(PDU.RESPONSE);\n        \t\tStatusInformation statusInformation = new StatusInformation();\n        \t\tStateReference ref = e.getStateReference();\n        \t\ttry {\n        \t\t\te.getMessageDispatcher().returnResponsePdu(e.getMessageProcessingModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityModel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityName(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getSecurityLevel(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tresponse,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\te.getMaxSizeResponsePDU(),\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tref,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\tstatusInformation);\n        \t\t\tif (log().isDebugEnabled()) {\n        \t\t\t\tlog().debug(\"Sent RESPONSE PDU to peer \" + addr + \" acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t\t}\n        \t\t} catch (MessageException ex) {\n        \t\t\tlog().error(\"Error while sending RESPONSE PDU to peer \" + addr + \": \" + ex.getMessage() + \"acknowledging receipt of INFORM (reqId=\" + command.getRequestID() + \")\");\n        \t\t}\n        \t}\n        }\n        \n        if (e.getPDU() instanceof PDUv1)\n            m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n        else\n            m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), e.getPDU(), m_trapProcessorFactory.createTrapProcessor()));\n    }","commit_id":"05801d2b89f0c39b0c0d30f6b37c3969dd2bc014","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public EntityManagerFactory entityManagerFactory(final String scopedPersistenceUnitName) {\n        PersistenceUnitService persistenceUnitService = PersistenceUnitRegistryImpl.INSTANCE.getPersistenceUnitService(scopedPersistenceUnitName);\n        if (persistenceUnitService == null) {\n            throw JpaLogger.ROOT_LOGGER.PersistenceUnitNotAvailable(scopedPersistenceUnitName);\n        }\n        return persistenceUnitService.getEntityManagerFactory();\n\n    }","id":5477,"modified_method":"@Override\n    public EntityManagerFactory entityManagerFactory(final String scopedPersistenceUnitName) {\n        PersistenceUnitService persistenceUnitService = PersistenceUnitRegistryImpl.INSTANCE.getPersistenceUnitService(scopedPersistenceUnitName);\n        if (persistenceUnitService == null) {\n            return null;\n        }\n        return persistenceUnitService.getEntityManagerFactory();\n\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5478,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","id":5479,"modified_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getCollectionRoleNames()));\n    }","id":5480,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getCollectionRoleNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getCollectionRoleNames()));\n    }","id":5481,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getCollectionRoleNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","id":5482,"modified_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5483,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getCollectionRoleNames()));\n    }","id":5484,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getCollectionRoleNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","id":5485,"modified_method":"private CollectionStatistics getStatistics(final EntityManagerFactory entityManagerFactory, String collectionName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getCollectionStatistics(collectionName);\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5486,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getEntityNames()));\n    }","id":5487,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getEntityNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5488,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getEntityNames()));\n    }","id":5489,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getEntityNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5490,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"org.hibernate.stat.SecondLevelCacheStatistics getStatistics(EntityManagerFactoryAccess entityManagerFactoryaccess, PathAddress pathAddress) {\n        String scopedPersistenceUnitName = pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL);\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactoryaccess.entityManagerFactory(scopedPersistenceUnitName);\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            // The entity class name is prefixed by the application scoped persistence unit name\n\n            return sessionFactory.getStatistics().getSecondLevelCacheStatistics(scopedPersistenceUnitName + \".\" +\n                    pathAddress.getValue(HibernateStatistics.ENTITYCACHE));\n        }\n        return null;\n    }","id":5491,"modified_method":"org.hibernate.stat.SecondLevelCacheStatistics getStatistics(EntityManagerFactoryAccess entityManagerFactoryaccess, PathAddress pathAddress) {\n        String scopedPersistenceUnitName = pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL);\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactoryaccess.entityManagerFactory(scopedPersistenceUnitName);\n        if (entityManagerFactoryImpl == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            // The entity class name is prefixed by the application scoped persistence unit name\n\n            return sessionFactory.getStatistics().getSecondLevelCacheStatistics(scopedPersistenceUnitName + \".\" +\n                    pathAddress.getValue(HibernateStatistics.ENTITYCACHE));\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        return Collections.unmodifiableCollection(Arrays.asList(\n                getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getEntityNames()));\n    }","id":5492,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats == null) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableCollection(Arrays.asList(stats.getEntityNames()));\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"org.hibernate.stat.SecondLevelCacheStatistics getStatistics(EntityManagerFactoryAccess entityManagerFactoryaccess, PathAddress pathAddress) {\n        String scopedPersistenceUnitName = pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL);\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactoryaccess.entityManagerFactory(scopedPersistenceUnitName);\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            // The entity class name is prefixed by the application scoped persistence unit name\n            return sessionFactory.getStatistics().getSecondLevelCacheStatistics(scopedPersistenceUnitName + \".\" +\n                    pathAddress.getValue(HibernateStatistics.ENTITYCACHE));\n        }\n        return null;\n    }","id":5493,"modified_method":"org.hibernate.stat.SecondLevelCacheStatistics getStatistics(EntityManagerFactoryAccess entityManagerFactoryaccess, PathAddress pathAddress) {\n        String scopedPersistenceUnitName = pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL);\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactoryaccess.entityManagerFactory(scopedPersistenceUnitName);\n        if (entityManagerFactoryImpl == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            // The entity class name is prefixed by the application scoped persistence unit name\n            return sessionFactory.getStatistics().getSecondLevelCacheStatistics(scopedPersistenceUnitName + \".\" +\n                    pathAddress.getValue(HibernateStatistics.ENTITYCACHE));\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5494,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5495,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5496,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.EntityStatistics getStatistics(EntityManagerFactory entityManagerFactory, String entityName) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getEntityStatistics(entityName);\n        }\n        return null;\n    }","id":5497,"modified_method":"private org.hibernate.stat.EntityStatistics getStatistics(EntityManagerFactory entityManagerFactory, String entityName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getEntityStatistics(entityName);\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5498,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.EntityStatistics getStatistics(EntityManagerFactory entityManagerFactory, String entityName) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getEntityStatistics(entityName);\n        }\n        return null;\n    }","id":5499,"modified_method":"private org.hibernate.stat.EntityStatistics getStatistics(EntityManagerFactory entityManagerFactory, String entityName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics().getEntityStatistics(entityName);\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","id":5500,"modified_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5501,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<String>();\n        String[] queries = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getQueries();\n        if (queries != null) {\n            for (String query : queries) {\n                result.add(QueryName.queryName(query).getDisplayName());\n            }\n        }\n        return result;\n    }","id":5502,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<>();\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats != null) {\n            String[] queries = stats.getQueries();\n            if (queries != null) {\n                for (String query : queries) {\n                    result.add(QueryName.queryName(query).getDisplayName());\n                }\n            }\n        }\n        return result;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5503,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<String>();\n        String[] queries = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getQueries();\n        if (queries != null) {\n            for (String query : queries) {\n                result.add(QueryName.queryName(query).getDisplayName());\n            }\n        }\n        return result;\n    }","id":5504,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<>();\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats != null) {\n            String[] queries = stats.getQueries();\n            if (queries != null) {\n                for (String query : queries) {\n                    result.add(QueryName.queryName(query).getDisplayName());\n                }\n            }\n        }\n        return result;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","id":5505,"modified_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<String>();\n        String[] queries = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL))).getQueries();\n        if (queries != null) {\n            for (String query : queries) {\n                result.add(QueryName.queryName(query).getDisplayName());\n            }\n        }\n        return result;\n    }","id":5506,"modified_method":"@Override\n    public Collection<String> getDynamicChildrenNames(EntityManagerFactoryAccess entityManagerFactoryLookup, PathAddress pathAddress) {\n        Set<String> result = new HashSet<>();\n        org.hibernate.stat.Statistics stats = getBaseStatistics(entityManagerFactoryLookup.entityManagerFactory(pathAddress.getValue(HibernateStatistics.PROVIDER_LABEL)));\n        if (stats != null) {\n            String[] queries = stats.getQueries();\n            if (queries != null) {\n                for (String query : queries) {\n                    result.add(QueryName.queryName(query).getDisplayName());\n                }\n            }\n        }\n        return result;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","id":5507,"modified_method":"private org.hibernate.stat.QueryStatistics getStatistics(EntityManagerFactory entityManagerFactory, String displayQueryName) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        // convert displayed (transformed by QueryNames) query name to original query name to look up query statistics\n        if (sessionFactory != null) {\n            String[] originalQueryNames = sessionFactory.getStatistics().getQueries();\n            if (originalQueryNames != null) {\n                for (String originalQueryName : originalQueryNames) {\n                    if (QueryName.queryName(originalQueryName).getDisplayName().equals(displayQueryName)) {\n                        return sessionFactory.getStatistics().getQueryStatistics(originalQueryName);\n                    }\n                }\n            }\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5508,"modified_method":"private org.hibernate.stat.Statistics getBaseStatistics(EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5509,"modified_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null){\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5510,"modified_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        HibernateEntityManagerFactory entityManagerFactoryImpl = (HibernateEntityManagerFactory) entityManagerFactory;\n        SessionFactory sessionFactory = entityManagerFactoryImpl.getSessionFactory();\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","id":5511,"modified_method":"static final org.hibernate.stat.Statistics getStatistics(final EntityManagerFactory entityManagerFactory) {\n        if (entityManagerFactory == null) {\n            return null;\n        }\n        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);\n        if (sessionFactory != null) {\n            return sessionFactory.getStatistics();\n        }\n        return null;\n    }","commit_id":"f7d97115529313ac86ce302e6e4cbd7271a5e306","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void makeSureCoreClusterCanBeRestoredFromABackup() throws Throwable\n    {\n        // given\n        CoreGraphDatabase db = createSomeData( cluster );\n        DbRepresentation beforeBackup = DbRepresentation.of( db );\n        String[] args = backupArguments(backupAddress(db), backupPath.getPath() );\n        assertEquals( 0, runBackupToolFromOtherJvmToGetExitCode( args ) );\n\n        // when we shutdown the cluster we lose the number of core servers so we won't go through the for loop unless\n        // we capture the count beforehand\n        List<File> dbPaths = cluster.coreServers().stream().map( CoreServer::storeDir ).collect( toList() );\n        int numberOfCoreServers = dbPaths.size();\n\n        cluster.shutdown();\n        assertAllStoresHaveTheSameStoreId( dbPaths, fs );\n        TestStoreId storeId = TestStoreId.readStoreId( dbPaths.get( 0 ), fs );\n\n        // when\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        File homeDir = cluster.getCoreServerById( 0 ).homeDir();\n        new RestoreNewClusterCli( sysout ).run(toArray( args().homeDir( homeDir ).config( homeDir ).from( backupPath )\n                .database( \"graph.db\" ).force().build() ));\n\n        String seed = RestoreClusterCliTest.extractSeed( output.toString() );\n\n        for ( int i = 1; i < numberOfCoreServers; i++ )\n        {\n            homeDir = cluster.getCoreServerById( i ).homeDir();\n            new RestoreExistingClusterCli(  ).run( toArray( args().homeDir( homeDir )\n                    .config( homeDir ).from( backupPath ).database( \"graph.db\" ).seed( seed ).force().build() ) );\n        }\n\n        cluster.start();\n\n        // then\n        Collection<CoreServer> coreGraphDatabases = cluster.coreServers();\n        Stream<DbRepresentation> dbRepresentations = coreGraphDatabases.stream().map( x -> DbRepresentation.of(x.database()) );\n        dbRepresentations.forEach( afterReSeed -> assertEquals( beforeBackup, afterReSeed ) );\n\n        List<File> afterRestoreDbPaths = coreGraphDatabases.stream().map( CoreServer::storeDir ).collect( toList() );\n        cluster.shutdown();\n\n        assertAllStoresHaveTheSameStoreId( afterRestoreDbPaths, fs );\n        TestStoreId afterRestoreStoreId = TestStoreId.readStoreId( afterRestoreDbPaths.get( 0 ), fs );\n        assertNotEquals( storeId, afterRestoreStoreId );\n    }","id":5512,"modified_method":"@Test\n    public void makeSureCoreClusterCanBeRestoredFromABackup() throws Throwable\n    {\n        // given\n        CoreGraphDatabase db = createSomeData( cluster );\n        DbRepresentation beforeBackup = DbRepresentation.of( db );\n        String[] args = backupArguments(backupAddress(db), backupPath.getPath() );\n        assertEquals( 0, runBackupToolFromOtherJvmToGetExitCode( args ) );\n\n        // when we shutdown the cluster we lose the number of core servers so we won't go through the for loop unless\n        // we capture the count beforehand\n        List<File> dbPaths = cluster.coreServers().stream().map( CoreServer::storeDir ).collect( toList() );\n        int numberOfCoreServers = dbPaths.size();\n\n        cluster.shutdown();\n        assertAllStoresHaveTheSameStoreId( dbPaths, fs );\n        TestStoreId storeId = TestStoreId.readStoreId( dbPaths.get( 0 ), fs );\n\n        // when\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        Path homeDir = Paths.get(cluster.getCoreServerById( 0 ).homeDir().getPath());\n        new RestoreNewClusterCli( homeDir, homeDir, sysout ).execute(toArray( args().from( backupPath )\n                .database( \"graph.db\" ).force().build() ));\n\n        String seed = RestoreClusterCliTest.extractSeed( output.toString() );\n\n        for ( int i = 1; i < numberOfCoreServers; i++ )\n        {\n            homeDir = Paths.get(cluster.getCoreServerById( i ).homeDir().getPath());\n            new RestoreExistingClusterCli( homeDir, homeDir  ).execute(\n                    toArray( args().from( backupPath ).database( \"graph.db\" ).seed( seed ).force().build() ) );\n        }\n\n        cluster.start();\n\n        // then\n        Collection<CoreServer> coreGraphDatabases = cluster.coreServers();\n        Stream<DbRepresentation> dbRepresentations = coreGraphDatabases.stream().map( x -> DbRepresentation.of(x.database()) );\n        dbRepresentations.forEach( afterReSeed -> assertEquals( beforeBackup, afterReSeed ) );\n\n        List<File> afterRestoreDbPaths = coreGraphDatabases.stream().map( CoreServer::storeDir ).collect( toList() );\n        cluster.shutdown();\n\n        assertAllStoresHaveTheSameStoreId( afterRestoreDbPaths, fs );\n        TestStoreId afterRestoreStoreId = TestStoreId.readStoreId( afterRestoreDbPaths.get( 0 ), fs );\n        assertNotEquals( storeId, afterRestoreStoreId );\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReplicateTransactionToCoreServers() throws Throwable\n    {\n        // given\n        File dbDir = clusterRule.testDirectory().cleanDirectory( \"classic-db\" );\n        File classicNeo4jStore = createClassicNeo4jStore( dbDir, 10, recordFormat );\n\n        Cluster cluster = this.clusterRule.withRecordFormat( recordFormat ).createCluster();\n\n        File homeDir = cluster.getCoreServerById( 0 ).homeDir();\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        new RestoreNewClusterCli( sysout ).run(  toArray( args().homeDir( homeDir ).config( homeDir )\n                .from( classicNeo4jStore ).database( \"graph.db\" ).force().build() )  );\n\n        String seed = RestoreClusterCliTest.extractSeed( output.toString() );\n\n        for ( int serverId = 1; serverId < CLUSTER_SIZE; serverId++ )\n        {\n            File destination = cluster.getCoreServerById( serverId ).homeDir();\n\n            new RestoreExistingClusterCli(  ).run(  toArray( args().homeDir( destination ).config( destination )\n                    .from( classicNeo4jStore ).database( \"graph.db\" ).seed( seed ).force().build() )  );\n        }\n\n        cluster.start();\n\n        // when\n        CoreGraphDatabase coreDB = cluster.awaitLeader( 5000 ).database();\n\n        try ( Transaction tx = coreDB.beginTx() )\n        {\n            Node node = coreDB.createNode( label( \"boo\" ) );\n            node.setProperty( \"foobar\", \"baz_bat\" );\n            tx.success();\n        }\n\n        cluster.addEdgeServerWithIdAndRecordFormat( 4, recordFormat ).start();\n\n        // then\n        for ( final CoreServer server : cluster.coreServers() )\n        {\n            CoreGraphDatabase db = server.database();\n\n            try ( Transaction tx = db.beginTx() )\n            {\n                ThrowingSupplier<Long, Exception> nodeCount = () -> count( db.getAllNodes() );\n\n                Config config = db.getDependencyResolver().resolveDependency( Config.class );\n\n                assertEventually( \"node to appear on core server \" + config.get( raft_advertised_address ), nodeCount,\n                        greaterThan( 0L ), 15, SECONDS );\n\n                assertEquals( 11, count( db.getAllNodes() ) );\n\n                tx.success();\n            }\n        }\n    }","id":5513,"modified_method":"@Test\n    public void shouldReplicateTransactionToCoreServers() throws Throwable\n    {\n        // given\n        File dbDir = clusterRule.testDirectory().cleanDirectory( \"classic-db\" );\n        File classicNeo4jStore = createClassicNeo4jStore( dbDir, 10, recordFormat );\n\n        Cluster cluster = this.clusterRule.withRecordFormat( recordFormat ).createCluster();\n\n        Path homeDir = Paths.get(cluster.getCoreServerById( 0 ).homeDir().getPath());\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        new RestoreNewClusterCli( homeDir, homeDir, sysout ).execute(\n                toArray( args().from( classicNeo4jStore ).database( \"graph.db\" ).force().build() )  );\n\n        String seed = RestoreClusterCliTest.extractSeed( output.toString() );\n\n        for ( int serverId = 1; serverId < CLUSTER_SIZE; serverId++ )\n        {\n            Path destination = Paths.get(cluster.getCoreServerById( serverId ).homeDir().getPath());\n\n            new RestoreExistingClusterCli( destination, destination ).execute(\n                    toArray( args().from( classicNeo4jStore ).database( \"graph.db\" ).seed( seed ).force().build() )  );\n        }\n\n        cluster.start();\n\n        // when\n        CoreGraphDatabase coreDB = cluster.awaitLeader( 5000 ).database();\n\n        try ( Transaction tx = coreDB.beginTx() )\n        {\n            Node node = coreDB.createNode( label( \"boo\" ) );\n            node.setProperty( \"foobar\", \"baz_bat\" );\n            tx.success();\n        }\n\n        cluster.addEdgeServerWithIdAndRecordFormat( 4, recordFormat ).start();\n\n        // then\n        for ( final CoreServer server : cluster.coreServers() )\n        {\n            CoreGraphDatabase db = server.database();\n\n            try ( Transaction tx = db.beginTx() )\n            {\n                ThrowingSupplier<Long, Exception> nodeCount = () -> count( db.getAllNodes() );\n\n                Config config = db.getDependencyResolver().resolveDependency( Config.class );\n\n                assertEventually( \"node to appear on core server \" + config.get( raft_advertised_address ), nodeCount,\n                        greaterThan( 0L ), 15, SECONDS );\n\n                assertEquals( 11, count( db.getAllNodes() ) );\n\n                tx.success();\n            }\n        }\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldRestoreDatabase() throws Throwable\n    {\n        File classicDatabaseDir = testDirectory.cleanDirectory( \"classic-db\" );\n        File classicNeo4jStore = createClassicNeo4jStore( classicDatabaseDir, 10, StandardV3_0.NAME );\n        StoreMetadata storeMetadata = metadataFor( classicNeo4jStore );\n\n        // when\n        File homeDir = testDirectory.cleanDirectory( \"new-db-1\" );\n        LinkedList<String> args = ArgsBuilder.args().homeDir( homeDir ).config( homeDir )\n                .from( classicNeo4jStore ).database( \"graph.db\" ).build() ;\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        new RestoreNewClusterCli( sysout ).run(  args.toArray( new String[args.size()] ));\n\n        // then\n        String seed = extractSeed( output.toString() );\n        ClusterSeed clusterSeed = ClusterSeed.create( seed );\n\n        assertTrue( storeMetadata.storeId().equals( clusterSeed.before() ) );\n        assertEquals( storeMetadata.lastTxId(), clusterSeed.lastTxId() );\n        assertFalse( storeMetadata.storeId().equals( clusterSeed.after() ) );\n\n        // when restore to another place\n        File rootNewDatabaseDir = testDirectory.cleanDirectory( \"new-db-2\" );\n        LinkedList<String> newArgs = ArgsBuilder.args().homeDir( rootNewDatabaseDir ).config( rootNewDatabaseDir )\n                .from( classicNeo4jStore ).database( \"graph.db\" ).seed( seed ).build() ;\n\n        new RestoreExistingClusterCli(  ).run( newArgs.toArray( new String[newArgs.size()] ) );\n\n        // then\n        StoreMetadata newMetadata = metadataFor( extractDatabaseDir( rootNewDatabaseDir ) );\n        assertTrue( clusterSeed.after().equals( newMetadata.storeId() ) );\n    }","id":5514,"modified_method":"@Test\n    public void shouldRestoreDatabase() throws Throwable\n    {\n        File classicDatabaseDir = testDirectory.cleanDirectory( \"classic-db\" );\n        File classicNeo4jStore = createClassicNeo4jStore( classicDatabaseDir, 10, StandardV3_0.NAME );\n        StoreMetadata storeMetadata = metadataFor( classicNeo4jStore );\n\n        // when\n        Path homeDir = Paths.get(testDirectory.cleanDirectory( \"new-db-1\" ).getPath());\n        LinkedList<String> args = ArgsBuilder.args().from( classicNeo4jStore ).database( \"graph.db\" ).build() ;\n\n        StringBuilder output = new StringBuilder();\n        PrintStream sysout = new PrintStream( new RestoreClusterUtils.MyOutputStream( output ) );\n\n        new RestoreNewClusterCli( homeDir, homeDir, sysout ).execute(  args.toArray( new String[args.size()] ));\n\n        // then\n        String seed = extractSeed( output.toString() );\n        ClusterSeed clusterSeed = ClusterSeed.create( seed );\n\n        assertTrue( storeMetadata.storeId().equals( clusterSeed.before() ) );\n        assertEquals( storeMetadata.lastTxId(), clusterSeed.lastTxId() );\n        assertFalse( storeMetadata.storeId().equals( clusterSeed.after() ) );\n\n        // when restore to another place\n        Path rootNewDatabaseDir = Paths.get(testDirectory.cleanDirectory( \"new-db-2\" ).getPath());\n        LinkedList<String> newArgs = ArgsBuilder.args()\n                .from( classicNeo4jStore ).database( \"graph.db\" ).seed( seed ).build() ;\n\n        new RestoreExistingClusterCli( rootNewDatabaseDir, rootNewDatabaseDir ).execute(\n                newArgs.toArray( new String[newArgs.size()] ) );\n\n        // then\n        StoreMetadata newMetadata = metadataFor( extractDatabaseDir( rootNewDatabaseDir.toFile() ) );\n        assertTrue( clusterSeed.after().equals( newMetadata.storeId() ) );\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void run( String[] incomingArguments )\n    {\n        Args args = Args.parse( incomingArguments );\n        if ( ArrayUtil.isEmpty( incomingArguments ) )\n        {\n            printUsage( out );\n            System.exit( 1 );\n        }\n\n        File homeDir = args.interpretOption( \"home-dir\", Converters.<File>mandatory(), File::new );\n        String databaseName = args.interpretOption( \"database\", Converters.<String>mandatory(), s -> s );\n        String configPath = args.interpretOption( \"config\", Converters.<String>mandatory(), s -> s );\n        String fromPath = args.interpretOption( \"from\", Converters.<String>mandatory(), s -> s );\n        String clusterSeed = args.interpretOption( \"cluster-seed\", Converters.<String>mandatory(), s -> s );\n        boolean forceOverwrite = args.getBoolean( \"force\", Boolean.FALSE, true );\n\n        try\n        {\n            Config config = loadNeo4jConfig( homeDir, configPath, databaseName );\n            restoreDatabase( databaseName, fromPath, forceOverwrite, config );\n            convertStore( config, clusterSeed );\n        }\n        catch ( IOException | TransactionFailureException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":5515,"modified_method":"public RestoreExistingClusterCli( Path homeDir, Path configDir )\n    {\n        this.homeDir = homeDir;\n        this.configDir = configDir;\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static Config loadNeo4jConfig( File homeDir, String configPath, String databaseName )\n    {\n        ConfigLoader configLoader = new ConfigLoader( settings() );\n        Config config = configLoader.loadConfig(\n                Optional.of( homeDir ),\n                Optional.of( new File( configPath, \"neo4j.conf\" ) ),\n                NullLog.getInstance() );\n\n        return config.with( stringMap( DatabaseManagementSystemSettings.active_database.name(), databaseName ) );\n    }","id":5516,"modified_method":"private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName )\n    {\n        ConfigLoader configLoader = new ConfigLoader( settings() );\n        Config config = configLoader.loadConfig(\n                Optional.of( homeDir.toFile() ),\n                Optional.of( configDir.resolve( \"neo4j.conf\" ).toFile() ),\n                NullLog.getInstance() );\n\n        return config.with( stringMap( DatabaseManagementSystemSettings.active_database.name(), databaseName ) );\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static void main( String[] incomingArguments )\n    {\n        new RestoreExistingClusterCli().run( incomingArguments );\n    }","id":5517,"modified_method":"@Override\n    public void execute( String[] incomingArguments ) throws IncorrectUsage, CommandFailed\n    {\n        Args args = Args.parse( incomingArguments );\n        if ( ArrayUtil.isEmpty( incomingArguments ) )\n        {\n            throw new IncorrectUsage( \"mandatory arguments missing\" );\n        }\n\n        String databaseName = args.interpretOption( \"database\", Converters.<String>mandatory(), s -> s );\n        String fromPath = args.interpretOption( \"from\", Converters.<String>mandatory(), s -> s );\n        String clusterSeed = args.interpretOption( \"cluster-seed\", Converters.<String>mandatory(), s -> s );\n        boolean forceOverwrite = args.getBoolean( \"force\", Boolean.FALSE, true );\n\n        try\n        {\n            Config config = loadNeo4jConfig( homeDir, configDir, databaseName );\n            restoreDatabase( databaseName, fromPath, forceOverwrite, config );\n            convertStore( config, clusterSeed );\n        }\n        catch ( IOException | TransactionFailureException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static Config loadNeo4jConfig( File homeDir, String configPath, String databaseName )\n    {\n        ConfigLoader configLoader = new ConfigLoader( settings() );\n        Config config = configLoader.loadConfig(\n                Optional.of( homeDir ),\n                Optional.of( new File( configPath, \"neo4j.conf\" ) ),\n                NullLog.getInstance() );\n\n        return config.with( stringMap( DatabaseManagementSystemSettings.active_database.name(), databaseName ) );\n    }","id":5518,"modified_method":"private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName )\n    {\n        ConfigLoader configLoader = new ConfigLoader( settings() );\n        Config config = configLoader.loadConfig(\n                Optional.of( homeDir.toFile() ),\n                Optional.of( configDir.resolve( \"neo4j.conf\" ).toFile() ),\n                NullLog.getInstance() );\n\n        return config.with( stringMap( DatabaseManagementSystemSettings.active_database.name(), databaseName ) );\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void run( String[] incomingArguments )\n    {\n        Args args = Args.parse( incomingArguments );\n        if ( ArrayUtil.isEmpty( incomingArguments ) )\n        {\n            printUsage( out );\n            System.exit( 1 );\n        }\n\n        File homeDir = args.interpretOption( \"home-dir\", Converters.<File>mandatory(), File::new );\n        String databaseName = args.interpretOption( \"database\", Converters.<String>mandatory(), s -> s );\n        String configPath = args.interpretOption( \"config\", Converters.<String>mandatory(), s -> s );\n        String fromPath = args.interpretOption( \"from\", Converters.<String>mandatory(), s -> s );\n        boolean forceOverwrite = args.getBoolean( \"force\", Boolean.FALSE, true );\n\n        try\n        {\n            Config config = loadNeo4jConfig( homeDir, configPath, databaseName );\n            restoreDatabase( databaseName, fromPath, forceOverwrite, config );\n            String seed = generateSeed( config );\n            convertStore( config, seed );\n            out.println( \"Cluster Seed: \" + seed );\n        }\n        catch ( IOException | TransactionFailureException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":5519,"modified_method":"public RestoreNewClusterCli( Path homeDir, Path configDir, PrintStream out )\n    {\n        this.homeDir = homeDir;\n        this.configDir = configDir;\n        this.out = out;\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public RestoreNewClusterCli()\n    {\n        this( System.out );\n    }","id":5520,"modified_method":"public RestoreNewClusterCli(Path homeDir, Path configDir)\n    {\n        this( homeDir, configDir, System.out );\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static void main( String[] incomingArguments )\n    {\n        new RestoreNewClusterCli().run( incomingArguments );\n    }","id":5521,"modified_method":"@Override\n    public void execute( String[] incomingArguments ) throws IncorrectUsage, CommandFailed\n    {\n        Args args = Args.parse( incomingArguments );\n        if ( ArrayUtil.isEmpty( incomingArguments ) )\n        {\n            throw new IncorrectUsage( \"mandatory arguments missing\" );\n        }\n\n        String databaseName = args.interpretOption( \"database\", Converters.<String>mandatory(), s -> s );\n        String fromPath = args.interpretOption( \"from\", Converters.<String>mandatory(), s -> s );\n        boolean forceOverwrite = args.getBoolean( \"force\", Boolean.FALSE, true );\n\n        try\n        {\n            Config config = loadNeo4jConfig( homeDir, configDir, databaseName );\n            restoreDatabase( databaseName, fromPath, forceOverwrite, config );\n            String seed = generateSeed( config );\n            convertStore( config, seed );\n            out.println( \"Cluster Seed: \" + seed );\n        }\n        catch ( IOException | TransactionFailureException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"77a5e62f9d5a56a48f82b6bdd8519b18275bef1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public final void mSTRING() throws RecognitionException {\n        try {\n            int _type = STRING;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:5: ( ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' ) | ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' ) )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='\\\"') ) {\n                alt10=1;\n            }\n            else if ( (LA10_0=='\\'') ) {\n                alt10=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"643:1: STRING : ( ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' ) | ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' ) );\", 10, 0, input);\n\n                throw nvae;\n            }\n            switch (alt10) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:8: ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:8: ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:9: '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"'\n                    {\n                    match('\\\"'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:13: ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )*\n                    loop8:\n                    do {\n                        int alt8=3;\n                        int LA8_0 = input.LA(1);\n\n                        if ( (LA8_0=='\\\\') ) {\n                            alt8=1;\n                        }\n                        else if ( ((LA8_0>='\\u0000' && LA8_0<='!')||(LA8_0>='#' && LA8_0<='[')||(LA8_0>=']' && LA8_0<='\\uFFFE')) ) {\n                            alt8=2;\n                        }\n\n\n                        switch (alt8) {\n                    \tcase 1 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:15: EscapeSequence\n                    \t    {\n                    \t    mEscapeSequence(); if (failed) return ;\n\n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:644:32: ~ ( '\\\\\\\\' | '\\\"' )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFE') ) {\n                    \t        input.consume();\n                    \t    failed=false;\n                    \t    }\n                    \t    else {\n                    \t        if (backtracking>0) {failed=true; return ;}\n                    \t        MismatchedSetException mse =\n                    \t            new MismatchedSetException(null,input);\n                    \t        recover(mse);    throw mse;\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop8;\n                        }\n                    } while (true);\n\n                    match('\\\"'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:8: ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:8: ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:9: '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\''\n                    {\n                    match('\\''); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:14: ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )*\n                    loop9:\n                    do {\n                        int alt9=3;\n                        int LA9_0 = input.LA(1);\n\n                        if ( (LA9_0=='\\\\') ) {\n                            alt9=1;\n                        }\n                        else if ( ((LA9_0>='\\u0000' && LA9_0<='&')||(LA9_0>='(' && LA9_0<='[')||(LA9_0>=']' && LA9_0<='\\uFFFE')) ) {\n                            alt9=2;\n                        }\n\n\n                        switch (alt9) {\n                    \tcase 1 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:16: EscapeSequence\n                    \t    {\n                    \t    mEscapeSequence(); if (failed) return ;\n\n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:645:33: ~ ( '\\\\\\\\' | '\\\\'' )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFE') ) {\n                    \t        input.consume();\n                    \t    failed=false;\n                    \t    }\n                    \t    else {\n                    \t        if (backtracking>0) {failed=true; return ;}\n                    \t        MismatchedSetException mse =\n                    \t            new MismatchedSetException(null,input);\n                    \t        recover(mse);    throw mse;\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop9;\n                        }\n                    } while (true);\n\n                    match('\\''); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n            this.type = _type;\n        }\n        finally {\n        }\n    }","id":5522,"modified_method":"public final void mSTRING() throws RecognitionException {\n        try {\n            int _type = STRING;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:5: ( ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' ) | ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' ) )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='\\\"') ) {\n                alt10=1;\n            }\n            else if ( (LA10_0=='\\'') ) {\n                alt10=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"715:1: STRING : ( ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' ) | ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' ) );\", 10, 0, input);\n\n                throw nvae;\n            }\n            switch (alt10) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:8: ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:8: ( '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:9: '\\\"' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )* '\\\"'\n                    {\n                    match('\\\"'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:13: ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\"' ) )*\n                    loop8:\n                    do {\n                        int alt8=3;\n                        int LA8_0 = input.LA(1);\n\n                        if ( (LA8_0=='\\\\') ) {\n                            alt8=1;\n                        }\n                        else if ( ((LA8_0>='\\u0000' && LA8_0<='!')||(LA8_0>='#' && LA8_0<='[')||(LA8_0>=']' && LA8_0<='\\uFFFE')) ) {\n                            alt8=2;\n                        }\n\n\n                        switch (alt8) {\n                    \tcase 1 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:15: EscapeSequence\n                    \t    {\n                    \t    mEscapeSequence(); if (failed) return ;\n\n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:716:32: ~ ( '\\\\\\\\' | '\\\"' )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFE') ) {\n                    \t        input.consume();\n                    \t    failed=false;\n                    \t    }\n                    \t    else {\n                    \t        if (backtracking>0) {failed=true; return ;}\n                    \t        MismatchedSetException mse =\n                    \t            new MismatchedSetException(null,input);\n                    \t        recover(mse);    throw mse;\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop8;\n                        }\n                    } while (true);\n\n                    match('\\\"'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:8: ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:8: ( '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:9: '\\\\'' ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\''\n                    {\n                    match('\\''); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:14: ( EscapeSequence | ~ ( '\\\\\\\\' | '\\\\'' ) )*\n                    loop9:\n                    do {\n                        int alt9=3;\n                        int LA9_0 = input.LA(1);\n\n                        if ( (LA9_0=='\\\\') ) {\n                            alt9=1;\n                        }\n                        else if ( ((LA9_0>='\\u0000' && LA9_0<='&')||(LA9_0>='(' && LA9_0<='[')||(LA9_0>=']' && LA9_0<='\\uFFFE')) ) {\n                            alt9=2;\n                        }\n\n\n                        switch (alt9) {\n                    \tcase 1 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:16: EscapeSequence\n                    \t    {\n                    \t    mEscapeSequence(); if (failed) return ;\n\n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:717:33: ~ ( '\\\\\\\\' | '\\\\'' )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFE') ) {\n                    \t        input.consume();\n                    \t    failed=false;\n                    \t    }\n                    \t    else {\n                    \t        if (backtracking>0) {failed=true; return ;}\n                    \t        MismatchedSetException mse =\n                    \t            new MismatchedSetException(null,input);\n                    \t        recover(mse);    throw mse;\n                    \t    }\n\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop9;\n                        }\n                    } while (true);\n\n                    match('\\''); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n            this.type = _type;\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mOctalEscape() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:5: ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) )\n            int alt12=3;\n            int LA12_0 = input.LA(1);\n\n            if ( (LA12_0=='\\\\') ) {\n                int LA12_1 = input.LA(2);\n\n                if ( ((LA12_1>='0' && LA12_1<='3')) ) {\n                    int LA12_2 = input.LA(3);\n\n                    if ( ((LA12_2>='0' && LA12_2<='7')) ) {\n                        int LA12_5 = input.LA(4);\n\n                        if ( ((LA12_5>='0' && LA12_5<='7')) ) {\n                            alt12=1;\n                        }\n                        else {\n                            alt12=2;}\n                    }\n                    else {\n                        alt12=3;}\n                }\n                else if ( ((LA12_1>='4' && LA12_1<='7')) ) {\n                    int LA12_3 = input.LA(3);\n\n                    if ( ((LA12_3>='0' && LA12_3<='7')) ) {\n                        alt12=2;\n                    }\n                    else {\n                        alt12=3;}\n                }\n                else {\n                    if (backtracking>0) {failed=true; return ;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"658:1: fragment OctalEscape : ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) );\", 12, 1, input);\n\n                    throw nvae;\n                }\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"658:1: fragment OctalEscape : ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) );\", 12, 0, input);\n\n                throw nvae;\n            }\n            switch (alt12) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:9: '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:14: ( '0' .. '3' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:15: '0' .. '3'\n                    {\n                    matchRange('0','3'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:25: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:26: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:36: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:660:37: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:661:9: '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:661:14: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:661:15: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:661:25: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:661:26: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:662:9: '\\\\\\\\' ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:662:14: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:662:15: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n        }\n        finally {\n        }\n    }","id":5523,"modified_method":"public final void mOctalEscape() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:5: ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) )\n            int alt12=3;\n            int LA12_0 = input.LA(1);\n\n            if ( (LA12_0=='\\\\') ) {\n                int LA12_1 = input.LA(2);\n\n                if ( ((LA12_1>='0' && LA12_1<='3')) ) {\n                    int LA12_2 = input.LA(3);\n\n                    if ( ((LA12_2>='0' && LA12_2<='7')) ) {\n                        int LA12_5 = input.LA(4);\n\n                        if ( ((LA12_5>='0' && LA12_5<='7')) ) {\n                            alt12=1;\n                        }\n                        else {\n                            alt12=2;}\n                    }\n                    else {\n                        alt12=3;}\n                }\n                else if ( ((LA12_1>='4' && LA12_1<='7')) ) {\n                    int LA12_3 = input.LA(3);\n\n                    if ( ((LA12_3>='0' && LA12_3<='7')) ) {\n                        alt12=2;\n                    }\n                    else {\n                        alt12=3;}\n                }\n                else {\n                    if (backtracking>0) {failed=true; return ;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"730:1: fragment OctalEscape : ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) );\", 12, 1, input);\n\n                    throw nvae;\n                }\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"730:1: fragment OctalEscape : ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) );\", 12, 0, input);\n\n                throw nvae;\n            }\n            switch (alt12) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:9: '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:14: ( '0' .. '3' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:15: '0' .. '3'\n                    {\n                    matchRange('0','3'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:25: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:26: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:36: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:732:37: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:733:9: '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:733:14: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:733:15: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:733:25: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:733:26: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:734:9: '\\\\\\\\' ( '0' .. '7' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:734:14: ( '0' .. '7' )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:734:15: '0' .. '7'\n                    {\n                    matchRange('0','7'); if (failed) return ;\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mBOOL() throws RecognitionException {\n        try {\n            int _type = BOOL;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:2: ( ( 'true' | 'false' ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:4: ( 'true' | 'false' )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:4: ( 'true' | 'false' )\n            int alt13=2;\n            int LA13_0 = input.LA(1);\n\n            if ( (LA13_0=='t') ) {\n                alt13=1;\n            }\n            else if ( (LA13_0=='f') ) {\n                alt13=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"671:4: ( 'true' | 'false' )\", 13, 0, input);\n\n                throw nvae;\n            }\n            switch (alt13) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:5: 'true'\n                    {\n                    match(\"true\"); if (failed) return ;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:12: 'false'\n                    {\n                    match(\"false\"); if (failed) return ;\n\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n            this.type = _type;\n        }\n        finally {\n        }\n    }","id":5524,"modified_method":"public final void mBOOL() throws RecognitionException {\n        try {\n            int _type = BOOL;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:743:2: ( ( 'true' | 'false' ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:743:4: ( 'true' | 'false' )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:743:4: ( 'true' | 'false' )\n            int alt13=2;\n            int LA13_0 = input.LA(1);\n\n            if ( (LA13_0=='t') ) {\n                alt13=1;\n            }\n            else if ( (LA13_0=='f') ) {\n                alt13=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"743:4: ( 'true' | 'false' )\", 13, 0, input);\n\n                throw nvae;\n            }\n            switch (alt13) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:743:5: 'true'\n                    {\n                    match(\"true\"); if (failed) return ;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:743:12: 'false'\n                    {\n                    match(\"false\"); if (failed) return ;\n\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n            this.type = _type;\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mWS() throws RecognitionException {\n        try {\n            int _type = WS;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:603:9: ( ( ' ' | '\\\\t' | '\\\\f' | EOL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:603:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:603:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\n            int alt1=4;\n            switch ( input.LA(1) ) {\n            case ' ':\n                {\n                alt1=1;\n                }\n                break;\n            case '\\t':\n                {\n                alt1=2;\n                }\n                break;\n            case '\\f':\n                {\n                alt1=3;\n                }\n                break;\n            case '\\n':\n            case '\\r':\n                {\n                alt1=4;\n                }\n                break;\n            default:\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"603:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\", 1, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt1) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:603:19: ' '\n                    {\n                    match(' '); if (failed) return ;\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:604:19: '\\\\t'\n                    {\n                    match('\\t'); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:605:19: '\\\\f'\n                    {\n                    match('\\f'); if (failed) return ;\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:606:19: EOL\n                    {\n                    mEOL(); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n            if ( backtracking==0 ) {\n               channel=HIDDEN; \n            }\n\n            }\n\n            this.type = _type;\n        }\n        finally {\n        }\n    }","id":5525,"modified_method":"public final void mWS() throws RecognitionException {\n        try {\n            int _type = WS;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:675:9: ( ( ' ' | '\\\\t' | '\\\\f' | EOL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:675:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:675:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\n            int alt1=4;\n            switch ( input.LA(1) ) {\n            case ' ':\n                {\n                alt1=1;\n                }\n                break;\n            case '\\t':\n                {\n                alt1=2;\n                }\n                break;\n            case '\\f':\n                {\n                alt1=3;\n                }\n                break;\n            case '\\n':\n            case '\\r':\n                {\n                alt1=4;\n                }\n                break;\n            default:\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"675:17: ( ' ' | '\\\\t' | '\\\\f' | EOL )\", 1, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt1) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:675:19: ' '\n                    {\n                    match(' '); if (failed) return ;\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:676:19: '\\\\t'\n                    {\n                    match('\\t'); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:677:19: '\\\\f'\n                    {\n                    match('\\f'); if (failed) return ;\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:678:19: EOL\n                    {\n                    mEOL(); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n            if ( backtracking==0 ) {\n               channel=HIDDEN; \n            }\n\n            }\n\n            this.type = _type;\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mSYMBOL() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:2: ( ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) ) (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) ) (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) )\n            int alt18=2;\n            int LA18_0 = input.LA(1);\n\n            if ( ((LA18_0>='\\u0000' && LA18_0<='\\b')||(LA18_0>='\\u000B' && LA18_0<='\\f')||(LA18_0>='\\u000E' && LA18_0<='\\u001F')||LA18_0=='!'||LA18_0=='#'||LA18_0=='%'||LA18_0=='\\''||(LA18_0>='*' && LA18_0<=':')||(LA18_0>='<' && LA18_0<='>')||(LA18_0>='@' && LA18_0<='{')||LA18_0=='}'||(LA18_0>='\\u007F' && LA18_0<='\\uFFFE')) ) {\n                alt18=1;\n            }\n            else if ( (LA18_0=='$') ) {\n                alt18=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"741:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) )\", 18, 0, input);\n\n                throw nvae;\n            }\n            switch (alt18) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:5: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:5: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:6: ~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' )\n                    {\n                    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||input.LA(1)=='#'||input.LA(1)=='%'||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='<' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:65: ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:65: ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:741:66: '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' )\n                    {\n                    match('$'); if (failed) return ;\n                    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='%')||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='=' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:742:11: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )*\n            loop19:\n            do {\n                int alt19=2;\n                int LA19_0 = input.LA(1);\n\n                if ( ((LA19_0>='\\u0000' && LA19_0<='\\b')||(LA19_0>='\\u000B' && LA19_0<='\\f')||(LA19_0>='\\u000E' && LA19_0<='\\u001F')||LA19_0=='!'||(LA19_0>='#' && LA19_0<='%')||LA19_0=='\\''||(LA19_0>='*' && LA19_0<=':')||(LA19_0>='=' && LA19_0<='>')||(LA19_0>='@' && LA19_0<='{')||LA19_0=='}'||(LA19_0>='\\u007F' && LA19_0<='\\uFFFE')) ) {\n                    alt19=1;\n                }\n\n\n                switch (alt19) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:742:12: ~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' )\n            \t    {\n            \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='%')||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='=' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n            \t        input.consume();\n            \t    failed=false;\n            \t    }\n            \t    else {\n            \t        if (backtracking>0) {failed=true; return ;}\n            \t        MismatchedSetException mse =\n            \t            new MismatchedSetException(null,input);\n            \t        recover(mse);    throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop19;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        finally {\n        }\n    }","id":5526,"modified_method":"public final void mSYMBOL() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:2: ( ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) ) (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) ) (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) )\n            int alt18=2;\n            int LA18_0 = input.LA(1);\n\n            if ( ((LA18_0>='\\u0000' && LA18_0<='\\b')||(LA18_0>='\\u000B' && LA18_0<='\\f')||(LA18_0>='\\u000E' && LA18_0<='\\u001F')||LA18_0=='!'||LA18_0=='#'||LA18_0=='%'||LA18_0=='\\''||(LA18_0>='*' && LA18_0<=':')||(LA18_0>='<' && LA18_0<='>')||(LA18_0>='@' && LA18_0<='{')||LA18_0=='}'||(LA18_0>='\\u007F' && LA18_0<='\\uFFFE')) ) {\n                alt18=1;\n            }\n            else if ( (LA18_0=='$') ) {\n                alt18=2;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"813:4: ( (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) ) | ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) ) )\", 18, 0, input);\n\n                throw nvae;\n            }\n            switch (alt18) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:5: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:5: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' ) )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:6: ~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '?' | '$' )\n                    {\n                    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||input.LA(1)=='#'||input.LA(1)=='%'||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='<' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:65: ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) )\n                    {\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:65: ( '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' ) )\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:813:66: '$' ~ ( '?' | ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' )\n                    {\n                    match('$'); if (failed) return ;\n                    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='%')||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='=' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n\n\n                    }\n                    break;\n\n            }\n\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:814:11: (~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' ) )*\n            loop19:\n            do {\n                int alt19=2;\n                int LA19_0 = input.LA(1);\n\n                if ( ((LA19_0>='\\u0000' && LA19_0<='\\b')||(LA19_0>='\\u000B' && LA19_0<='\\f')||(LA19_0>='\\u000E' && LA19_0<='\\u001F')||LA19_0=='!'||(LA19_0>='#' && LA19_0<='%')||LA19_0=='\\''||(LA19_0>='*' && LA19_0<=':')||(LA19_0>='=' && LA19_0<='>')||(LA19_0>='@' && LA19_0<='{')||LA19_0=='}'||(LA19_0>='\\u007F' && LA19_0<='\\uFFFE')) ) {\n                    alt19=1;\n                }\n\n\n                switch (alt19) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:814:12: ~ ( ' ' | '\\\\t' | '\\\\n' | '\\\\r' | '\\\"' | '(' | ')' | ';' | '&' | '|' | '~' | '<' | '?' )\n            \t    {\n            \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\b')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u001F')||input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='%')||input.LA(1)=='\\''||(input.LA(1)>='*' && input.LA(1)<=':')||(input.LA(1)>='=' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='{')||input.LA(1)=='}'||(input.LA(1)>='\\u007F' && input.LA(1)<='\\uFFFE') ) {\n            \t        input.consume();\n            \t    failed=false;\n            \t    }\n            \t    else {\n            \t        if (backtracking>0) {failed=true; return ;}\n            \t        MismatchedSetException mse =\n            \t            new MismatchedSetException(null,input);\n            \t        recover(mse);    throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop19;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mEscapeSequence() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:653:5: ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape )\n            int alt11=3;\n            int LA11_0 = input.LA(1);\n\n            if ( (LA11_0=='\\\\') ) {\n                switch ( input.LA(2) ) {\n                case 'u':\n                    {\n                    alt11=2;\n                    }\n                    break;\n                case '\\\"':\n                case '\\'':\n                case '\\\\':\n                case 'b':\n                case 'f':\n                case 'n':\n                case 'r':\n                case 't':\n                    {\n                    alt11=1;\n                    }\n                    break;\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                    {\n                    alt11=3;\n                    }\n                    break;\n                default:\n                    if (backtracking>0) {failed=true; return ;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"651:1: fragment EscapeSequence : ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape );\", 11, 1, input);\n\n                    throw nvae;\n                }\n\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"651:1: fragment EscapeSequence : ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape );\", 11, 0, input);\n\n                throw nvae;\n            }\n            switch (alt11) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:653:9: '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    if ( input.LA(1)=='\\\"'||input.LA(1)=='\\''||input.LA(1)=='\\\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t' ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:654:9: UnicodeEscape\n                    {\n                    mUnicodeEscape(); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:655:9: OctalEscape\n                    {\n                    mOctalEscape(); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n        }\n        finally {\n        }\n    }","id":5527,"modified_method":"public final void mEscapeSequence() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:725:5: ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape )\n            int alt11=3;\n            int LA11_0 = input.LA(1);\n\n            if ( (LA11_0=='\\\\') ) {\n                switch ( input.LA(2) ) {\n                case 'u':\n                    {\n                    alt11=2;\n                    }\n                    break;\n                case '\\\"':\n                case '\\'':\n                case '\\\\':\n                case 'b':\n                case 'f':\n                case 'n':\n                case 'r':\n                case 't':\n                    {\n                    alt11=1;\n                    }\n                    break;\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                    {\n                    alt11=3;\n                    }\n                    break;\n                default:\n                    if (backtracking>0) {failed=true; return ;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"723:1: fragment EscapeSequence : ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape );\", 11, 1, input);\n\n                    throw nvae;\n                }\n\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"723:1: fragment EscapeSequence : ( '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' ) | UnicodeEscape | OctalEscape );\", 11, 0, input);\n\n                throw nvae;\n            }\n            switch (alt11) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:725:9: '\\\\\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\\\\\"' | '\\\\'' | '\\\\\\\\' )\n                    {\n                    match('\\\\'); if (failed) return ;\n                    if ( input.LA(1)=='\\\"'||input.LA(1)=='\\''||input.LA(1)=='\\\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t' ) {\n                        input.consume();\n                    failed=false;\n                    }\n                    else {\n                        if (backtracking>0) {failed=true; return ;}\n                        MismatchedSetException mse =\n                            new MismatchedSetException(null,input);\n                        recover(mse);    throw mse;\n                    }\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:726:9: UnicodeEscape\n                    {\n                    mUnicodeEscape(); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:727:9: OctalEscape\n                    {\n                    mOctalEscape(); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void mEOL() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:628:6: ( ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:629:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:629:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\n            int alt2=3;\n            int LA2_0 = input.LA(1);\n\n            if ( (LA2_0=='\\r') ) {\n                int LA2_1 = input.LA(2);\n\n                if ( (LA2_1=='\\n') && (synpred1())) {\n                    alt2=1;\n                }\n                else {\n                    alt2=2;}\n            }\n            else if ( (LA2_0=='\\n') ) {\n                alt2=3;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"629:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\", 2, 0, input);\n\n                throw nvae;\n            }\n            switch (alt2) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:629:14: ( '\\\\r\\\\n' )=> '\\\\r\\\\n'\n                    {\n                    match(\"\\r\\n\"); if (failed) return ;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:630:25: '\\\\r'\n                    {\n                    match('\\r'); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:631:25: '\\\\n'\n                    {\n                    match('\\n'); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        finally {\n        }\n    }","id":5528,"modified_method":"public final void mEOL() throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:700:6: ( ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:701:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:701:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\n            int alt2=3;\n            int LA2_0 = input.LA(1);\n\n            if ( (LA2_0=='\\r') ) {\n                int LA2_1 = input.LA(2);\n\n                if ( (LA2_1=='\\n') && (synpred1())) {\n                    alt2=1;\n                }\n                else {\n                    alt2=2;}\n            }\n            else if ( (LA2_0=='\\n') ) {\n                alt2=3;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"701:6: ( ( '\\\\r\\\\n' )=> '\\\\r\\\\n' | '\\\\r' | '\\\\n' )\", 2, 0, input);\n\n                throw nvae;\n            }\n            switch (alt2) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:701:14: ( '\\\\r\\\\n' )=> '\\\\r\\\\n'\n                    {\n                    match(\"\\r\\n\"); if (failed) return ;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:702:25: '\\\\r'\n                    {\n                    match('\\r'); if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:703:25: '\\\\n'\n                    {\n                    match('\\n'); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        finally {\n        }\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void exists_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                ExistsDescr existsDescr= null;        \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:416:2: ( LEFT_PAREN EXISTS ce[existsDescr] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:416:4: LEFT_PAREN EXISTS ce[existsDescr] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_exists_ce670); \n            match(input,EXISTS,FOLLOW_EXISTS_in_exists_ce675); \n            \r\n            \t\t    existsDescr = new ExistsDescr();\r\n            \t\t    in_ce.addDescr( existsDescr );\r\n            \t\t\n            pushFollow(FOLLOW_ce_in_exists_ce681);\n            ce(existsDescr);\n            _fsp--;\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_exists_ce689); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5529,"modified_method":"public final void exists_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                ExistsDescr existsDescr= null;        \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:421:2: ( LEFT_PAREN EXISTS ce[existsDescr] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:421:4: LEFT_PAREN EXISTS ce[existsDescr] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_exists_ce670); if (failed) return ;\n            match(input,EXISTS,FOLLOW_EXISTS_in_exists_ce675); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t    existsDescr = new ExistsDescr();\r\n              \t\t    in_ce.addDescr( existsDescr );\r\n              \t\t\n            }\n            pushFollow(FOLLOW_ce_in_exists_ce681);\n            ce(existsDescr);\n            _fsp--;\n            if (failed) return ;\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_exists_ce689); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final String literal_restriction() throws RecognitionException {\n        String text = null;\n\n        String t = null;\n\n\n        \r\n        \t\ttext = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:560:2: (t= literal )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:561:6: t= literal\n            {\n            pushFollow(FOLLOW_literal_in_literal_restriction1176);\n            t=literal();\n            _fsp--;\n\n            \r\n            \t    \ttext = t;\r\n            \t    \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return text;\n    }","id":5530,"modified_method":"public final String literal_restriction() throws RecognitionException {\n        String text = null;\n\n        String t = null;\n\n\n        \r\n        \t\ttext = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:632:2: (t= literal )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:633:6: t= literal\n            {\n            pushFollow(FOLLOW_literal_in_literal_restriction1239);\n            t=literal();\n            _fsp--;\n            if (failed) return text;\n            if ( backtracking==0 ) {\n              \r\n              \t    \ttext = t;\r\n              \t    \n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return text;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void or_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                OrDescr orDescr= null;         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:390:2: ( LEFT_PAREN OR ( ce[orDescr] )+ RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:390:4: LEFT_PAREN OR ( ce[orDescr] )+ RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_or_ce574); \n            match(input,OR,FOLLOW_OR_in_or_ce579); \n            \r\n            \t    \torDescr = new OrDescr();\r\n            \t\t\tin_ce.addDescr( orDescr );\r\n            \t\t\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:395:3: ( ce[orDescr] )+\n            int cnt10=0;\n            loop10:\n            do {\n                int alt10=2;\n                int LA10_0 = input.LA(1);\n\n                if ( (LA10_0==LEFT_PAREN||LA10_0==VAR) ) {\n                    alt10=1;\n                }\n\n\n                switch (alt10) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:395:3: ce[orDescr]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_or_ce585);\n            \t    ce(orDescr);\n            \t    _fsp--;\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt10 >= 1 ) break loop10;\n                        EarlyExitException eee =\n                            new EarlyExitException(10, input);\n                        throw eee;\n                }\n                cnt10++;\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_or_ce594); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5531,"modified_method":"public final void or_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                OrDescr orDescr= null;         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:395:2: ( LEFT_PAREN OR ( ce[orDescr] )+ RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:395:4: LEFT_PAREN OR ( ce[orDescr] )+ RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_or_ce574); if (failed) return ;\n            match(input,OR,FOLLOW_OR_in_or_ce579); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t    \torDescr = new OrDescr();\r\n              \t\t\tin_ce.addDescr( orDescr );\r\n              \t\t\n            }\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:400:3: ( ce[orDescr] )+\n            int cnt10=0;\n            loop10:\n            do {\n                int alt10=2;\n                int LA10_0 = input.LA(1);\n\n                if ( (LA10_0==LEFT_PAREN||LA10_0==VAR) ) {\n                    alt10=1;\n                }\n\n\n                switch (alt10) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:400:3: ce[orDescr]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_or_ce585);\n            \t    ce(orDescr);\n            \t    _fsp--;\n            \t    if (failed) return ;\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt10 >= 1 ) break loop10;\n            \t    if (backtracking>0) {failed=true; return ;}\n                        EarlyExitException eee =\n                            new EarlyExitException(10, input);\n                        throw eee;\n                }\n                cnt10++;\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_or_ce594); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void return_value_restriction(String op, FieldConstraintDescr fc) throws RecognitionException {\n        ValueHandler func = null;\n\n\n        \r\n        \t\tExecutionEngine engine = new CLPReturnValue();\r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:542:2: ( EQUALS func= lisp_list[context, new LispForm(context)] )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:542:4: EQUALS func= lisp_list[context, new LispForm(context)]\n            {\n            match(input,EQUALS,FOLLOW_EQUALS_in_return_value_restriction1115); \n            pushFollow(FOLLOW_lisp_list_in_return_value_restriction1122);\n            func=lisp_list(context,  new LispForm(context));\n            _fsp--;\n\n            \t\t\t\t\t\r\n               \t\t    engine.addFunction( (FunctionCaller) func );\r\n            \t\t\tfc.addRestriction( new ReturnValueRestrictionDescr (op, engine ) );\r\n            \t\t\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5532,"modified_method":"public final void return_value_restriction(String op, RestrictionConnectiveDescr rc) throws RecognitionException {\n        ValueHandler func = null;\n\n\n        \r\n        \t\tExecutionEngine engine = new CLPReturnValue();\r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:607:2: ( EQUALS func= lisp_list[context, new LispForm(context)] )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:607:4: EQUALS func= lisp_list[context, new LispForm(context)]\n            {\n            match(input,EQUALS,FOLLOW_EQUALS_in_return_value_restriction1179); if (failed) return ;\n            pushFollow(FOLLOW_lisp_list_in_return_value_restriction1186);\n            func=lisp_list(context,  new LispForm(context));\n            _fsp--;\n            if (failed) return ;\n            if ( backtracking==0 ) {\n              \t\t\t\t\t\r\n                 \t\t    engine.addFunction( (FunctionCaller) func );\r\n              \t\t\trc.addRestriction( new ReturnValueRestrictionDescr (op, engine ) );\r\n              \t\t\n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final ImportDescr importDescr() throws RecognitionException {\n        ImportDescr importDescr = null;\n\n        Token importName=null;\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:231:2: ( LEFT_PAREN 'import' importName= NAME RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:231:4: LEFT_PAREN 'import' importName= NAME RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_importDescr106); \n            match(input,42,FOLLOW_42_in_importDescr108); \n            importName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_importDescr112); \n             importDescr = new ImportDescr( importName.getText() ); \n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_importDescr115); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return importDescr;\n    }","id":5533,"modified_method":"public final ImportDescr importDescr() throws RecognitionException {\n        ImportDescr importDescr = null;\n\n        Token importName=null;\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:236:2: ( LEFT_PAREN 'import' importName= NAME RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:236:4: LEFT_PAREN 'import' importName= NAME RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_importDescr106); if (failed) return importDescr;\n            match(input,42,FOLLOW_42_in_importDescr108); if (failed) return importDescr;\n            importName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_importDescr112); if (failed) return importDescr;\n            if ( backtracking==0 ) {\n               importDescr = new ImportDescr( importName.getText() ); \n            }\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_importDescr115); if (failed) return importDescr;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return importDescr;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final String literal() throws RecognitionException {\n        String text = null;\n\n        Token t=null;\n\n        \r\n        \t\ttext = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:594:2: ( (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:594:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:594:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\n            int alt18=6;\n            switch ( input.LA(1) ) {\n            case STRING:\n                {\n                alt18=1;\n                }\n                break;\n            case NAME:\n                {\n                alt18=2;\n                }\n                break;\n            case INT:\n                {\n                alt18=3;\n                }\n                break;\n            case FLOAT:\n                {\n                alt18=4;\n                }\n                break;\n            case BOOL:\n                {\n                alt18=5;\n                }\n                break;\n            case NULL:\n                {\n                alt18=6;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"594:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\", 18, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt18) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:594:8: t= STRING\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,STRING,FOLLOW_STRING_in_literal1409); \n                     text = getString( t ); \n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:595:7: t= NAME\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NAME,FOLLOW_NAME_in_literal1422); \n                     text = t.getText(); \n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:596:7: t= INT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,INT,FOLLOW_INT_in_literal1438); \n                     text = t.getText(); \n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:597:7: t= FLOAT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,FLOAT,FOLLOW_FLOAT_in_literal1453); \n                     text = t.getText(); \n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:598:7: t= BOOL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,BOOL,FOLLOW_BOOL_in_literal1466); \n                     text = t.getText(); \n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:599:7: t= NULL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NULL,FOLLOW_NULL_in_literal1480); \n                     text = null; \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return text;\n    }","id":5534,"modified_method":"public final String literal() throws RecognitionException {\n        String text = null;\n\n        Token t=null;\n\n        \r\n        \t\ttext = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:666:2: ( (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:666:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:666:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\n            int alt19=6;\n            switch ( input.LA(1) ) {\n            case STRING:\n                {\n                alt19=1;\n                }\n                break;\n            case NAME:\n                {\n                alt19=2;\n                }\n                break;\n            case INT:\n                {\n                alt19=3;\n                }\n                break;\n            case FLOAT:\n                {\n                alt19=4;\n                }\n                break;\n            case BOOL:\n                {\n                alt19=5;\n                }\n                break;\n            case NULL:\n                {\n                alt19=6;\n                }\n                break;\n            default:\n                if (backtracking>0) {failed=true; return text;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"666:4: (t= STRING | t= NAME | t= INT | t= FLOAT | t= BOOL | t= NULL )\", 19, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt19) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:666:8: t= STRING\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,STRING,FOLLOW_STRING_in_literal1472); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = getString( t ); \n                    }\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:667:7: t= NAME\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NAME,FOLLOW_NAME_in_literal1485); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = t.getText(); \n                    }\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:668:7: t= INT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,INT,FOLLOW_INT_in_literal1501); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = t.getText(); \n                    }\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:669:7: t= FLOAT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,FLOAT,FOLLOW_FLOAT_in_literal1516); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = t.getText(); \n                    }\n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:670:7: t= BOOL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,BOOL,FOLLOW_BOOL_in_literal1529); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = t.getText(); \n                    }\n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:671:7: t= NULL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NULL,FOLLOW_NULL_in_literal1543); if (failed) return text;\n                    if ( backtracking==0 ) {\n                       text = null; \n                    }\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return text;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final ValueHandler lisp_atom(BuildContext context) throws RecognitionException {\n        ValueHandler value = null;\n\n        Token t=null;\n\n        \r\n        \t\tvalue  =  null;\t\t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:579:2: ( (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:580:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:580:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\n            int alt17=7;\n            switch ( input.LA(1) ) {\n            case VAR:\n                {\n                alt17=1;\n                }\n                break;\n            case STRING:\n                {\n                alt17=2;\n                }\n                break;\n            case NAME:\n                {\n                alt17=3;\n                }\n                break;\n            case FLOAT:\n                {\n                alt17=4;\n                }\n                break;\n            case INT:\n                {\n                alt17=5;\n                }\n                break;\n            case BOOL:\n                {\n                alt17=6;\n                }\n                break;\n            case NULL:\n                {\n                alt17=7;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"580:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\", 17, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt17) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:580:6: t= VAR\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,VAR,FOLLOW_VAR_in_lisp_atom1288); \n                     value = context.getVariableValueHandler(t.getText() ); \n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:581:6: t= STRING\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,STRING,FOLLOW_STRING_in_lisp_atom1300); \n                     value = new ObjectValueHandler( getString( t ) ); \n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:582:7: t= NAME\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NAME,FOLLOW_NAME_in_lisp_atom1312); \n                     value = new ObjectValueHandler( t.getText() ); \n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:583:6: t= FLOAT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,FLOAT,FOLLOW_FLOAT_in_lisp_atom1327); \n                     value = new DoubleValueHandler( t.getText() ); \n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:584:6: t= INT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,INT,FOLLOW_INT_in_lisp_atom1339); \n                     value = new LongValueHandler( t.getText() ); \n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:585:6: t= BOOL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,BOOL,FOLLOW_BOOL_in_lisp_atom1355); \n                     value = new BooleanValueHandler( t.getText() ); \n\n                    }\n                    break;\n                case 7 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:586:6: t= NULL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NULL,FOLLOW_NULL_in_lisp_atom1373); \n                     value = ObjectValueHandler.NULL; \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return value;\n    }","id":5535,"modified_method":"public final ValueHandler lisp_atom(BuildContext context) throws RecognitionException {\n        ValueHandler value = null;\n\n        Token t=null;\n\n        \r\n        \t\tvalue  =  null;\t\t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:651:2: ( (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:652:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:652:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\n            int alt18=7;\n            switch ( input.LA(1) ) {\n            case VAR:\n                {\n                alt18=1;\n                }\n                break;\n            case STRING:\n                {\n                alt18=2;\n                }\n                break;\n            case NAME:\n                {\n                alt18=3;\n                }\n                break;\n            case FLOAT:\n                {\n                alt18=4;\n                }\n                break;\n            case INT:\n                {\n                alt18=5;\n                }\n                break;\n            case BOOL:\n                {\n                alt18=6;\n                }\n                break;\n            case NULL:\n                {\n                alt18=7;\n                }\n                break;\n            default:\n                if (backtracking>0) {failed=true; return value;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"652:3: (t= VAR | t= STRING | t= NAME | t= FLOAT | t= INT | t= BOOL | t= NULL )\", 18, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt18) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:652:6: t= VAR\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,VAR,FOLLOW_VAR_in_lisp_atom1351); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = context.getVariableValueHandler(t.getText() ); \n                    }\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:653:6: t= STRING\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,STRING,FOLLOW_STRING_in_lisp_atom1363); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = new ObjectValueHandler( getString( t ) ); \n                    }\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:654:7: t= NAME\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NAME,FOLLOW_NAME_in_lisp_atom1375); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = new ObjectValueHandler( t.getText() ); \n                    }\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:655:6: t= FLOAT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,FLOAT,FOLLOW_FLOAT_in_lisp_atom1390); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = new DoubleValueHandler( t.getText() ); \n                    }\n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:656:6: t= INT\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,INT,FOLLOW_INT_in_lisp_atom1402); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = new LongValueHandler( t.getText() ); \n                    }\n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:657:6: t= BOOL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,BOOL,FOLLOW_BOOL_in_lisp_atom1418); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = new BooleanValueHandler( t.getText() ); \n                    }\n\n                    }\n                    break;\n                case 7 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:658:6: t= NULL\n                    {\n                    t=(Token)input.LT(1);\n                    match(input,NULL,FOLLOW_NULL_in_lisp_atom1436); if (failed) return value;\n                    if ( backtracking==0 ) {\n                       value = ObjectValueHandler.NULL; \n                    }\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return value;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void eval_script(Shell  shell) throws RecognitionException {\n        ImportDescr i = null;\n\n        RuleDescr r = null;\n\n        ValueHandler fc = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:223:2: ( (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:223:4: (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:223:4: (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )*\n            loop1:\n            do {\n                int alt1=4;\n                int LA1_0 = input.LA(1);\n\n                if ( (LA1_0==LEFT_PAREN) ) {\n                    switch ( input.LA(2) ) {\n                    case DEFRULE:\n                        {\n                        alt1=2;\n                        }\n                        break;\n                    case 42:\n                        {\n                        alt1=1;\n                        }\n                        break;\n                    case LEFT_PAREN:\n                    case NAME:\n                    case RIGHT_PAREN:\n                    case VAR:\n                    case STRING:\n                    case INT:\n                    case FLOAT:\n                    case BOOL:\n                    case NULL:\n                        {\n                        alt1=3;\n                        }\n                        break;\n\n                    }\n\n                }\n\n\n                switch (alt1) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:223:9: i= importDescr\n            \t    {\n            \t    pushFollow(FOLLOW_importDescr_in_eval_script55);\n            \t    i=importDescr();\n            \t    _fsp--;\n\n            \t     shell.importDescrHandler( i ); \n\n            \t    }\n            \t    break;\n            \tcase 2 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:224:7: r= defrule\n            \t    {\n            \t    pushFollow(FOLLOW_defrule_in_eval_script66);\n            \t    r=defrule();\n            \t    _fsp--;\n\n            \t     shell.ruleDescrHandler( r ); \n\n            \t    }\n            \t    break;\n            \tcase 3 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:226:7: fc= lisp_list[shell, new LispForm(shell) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_eval_script83);\n            \t    fc=lisp_list(shell,  new LispForm(shell) );\n            \t    _fsp--;\n\n            \t     shell.lispFormHandler(fc); \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5536,"modified_method":"public final void eval_script(Shell  shell) throws RecognitionException {\n        ImportDescr i = null;\n\n        RuleDescr r = null;\n\n        ValueHandler fc = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:228:2: ( (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:228:4: (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:228:4: (i= importDescr | r= defrule | fc= lisp_list[shell, new LispForm(shell) ] )*\n            loop1:\n            do {\n                int alt1=4;\n                int LA1_0 = input.LA(1);\n\n                if ( (LA1_0==LEFT_PAREN) ) {\n                    switch ( input.LA(2) ) {\n                    case DEFRULE:\n                        {\n                        alt1=2;\n                        }\n                        break;\n                    case 42:\n                        {\n                        alt1=1;\n                        }\n                        break;\n                    case LEFT_PAREN:\n                    case NAME:\n                    case RIGHT_PAREN:\n                    case VAR:\n                    case STRING:\n                    case INT:\n                    case FLOAT:\n                    case BOOL:\n                    case NULL:\n                        {\n                        alt1=3;\n                        }\n                        break;\n\n                    }\n\n                }\n\n\n                switch (alt1) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:228:9: i= importDescr\n            \t    {\n            \t    pushFollow(FOLLOW_importDescr_in_eval_script55);\n            \t    i=importDescr();\n            \t    _fsp--;\n            \t    if (failed) return ;\n            \t    if ( backtracking==0 ) {\n            \t       shell.importDescrHandler( i ); \n            \t    }\n\n            \t    }\n            \t    break;\n            \tcase 2 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:229:7: r= defrule\n            \t    {\n            \t    pushFollow(FOLLOW_defrule_in_eval_script66);\n            \t    r=defrule();\n            \t    _fsp--;\n            \t    if (failed) return ;\n            \t    if ( backtracking==0 ) {\n            \t       shell.ruleDescrHandler( r ); \n            \t    }\n\n            \t    }\n            \t    break;\n            \tcase 3 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:231:7: fc= lisp_list[shell, new LispForm(shell) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_eval_script83);\n            \t    fc=lisp_list(shell,  new LispForm(shell) );\n            \t    _fsp--;\n            \t    if (failed) return ;\n            \t    if ( backtracking==0 ) {\n            \t       shell.lispFormHandler(fc); \n            \t    }\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop1;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final AttributeDescr salience() throws RecognitionException {\n        AttributeDescr d = null;\n\n        Token loc=null;\n        Token i=null;\n\n        \r\n        \t\td = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:341:2: (loc= SALIENCE i= INT )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:342:3: loc= SALIENCE i= INT\n            {\n            loc=(Token)input.LT(1);\n            match(input,SALIENCE,FOLLOW_SALIENCE_in_salience371); \n            i=(Token)input.LT(1);\n            match(input,INT,FOLLOW_INT_in_salience375); \n            \r\n            \t\t\td = new AttributeDescr( \"salience\", i.getText() );\r\n            \t\t\td.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n            \t\t\td.setStartCharacter( ((CommonToken)loc).getStartIndex() );\r\n            \t\t\td.setEndCharacter( ((CommonToken)i).getStopIndex() );\r\n            \t\t\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return d;\n    }","id":5537,"modified_method":"public final AttributeDescr salience() throws RecognitionException {\n        AttributeDescr d = null;\n\n        Token loc=null;\n        Token i=null;\n\n        \r\n        \t\td = null;\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:346:2: (loc= SALIENCE i= INT )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:347:3: loc= SALIENCE i= INT\n            {\n            loc=(Token)input.LT(1);\n            match(input,SALIENCE,FOLLOW_SALIENCE_in_salience371); if (failed) return d;\n            i=(Token)input.LT(1);\n            match(input,INT,FOLLOW_INT_in_salience375); if (failed) return d;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\td = new AttributeDescr( \"salience\", i.getText() );\r\n              \t\t\td.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n              \t\t\td.setStartCharacter( ((CommonToken)loc).getStartIndex() );\r\n              \t\t\td.setEndCharacter( ((CommonToken)i).getStopIndex() );\r\n              \t\t\n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return d;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void and_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                AndDescr andDescr= null;        \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:377:2: ( LEFT_PAREN AND ( ce[andDescr] )+ RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:377:4: LEFT_PAREN AND ( ce[andDescr] )+ RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_and_ce526); \n            match(input,AND,FOLLOW_AND_in_and_ce531); \n            \r\n            \t    \tandDescr = new AndDescr();\r\n            \t\t\tin_ce.addDescr( andDescr );\r\n            \t\t\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:382:3: ( ce[andDescr] )+\n            int cnt9=0;\n            loop9:\n            do {\n                int alt9=2;\n                int LA9_0 = input.LA(1);\n\n                if ( (LA9_0==LEFT_PAREN||LA9_0==VAR) ) {\n                    alt9=1;\n                }\n\n\n                switch (alt9) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:382:3: ce[andDescr]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_and_ce537);\n            \t    ce(andDescr);\n            \t    _fsp--;\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt9 >= 1 ) break loop9;\n                        EarlyExitException eee =\n                            new EarlyExitException(9, input);\n                        throw eee;\n                }\n                cnt9++;\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_and_ce546); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5538,"modified_method":"public final void and_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                AndDescr andDescr= null;        \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:382:2: ( LEFT_PAREN AND ( ce[andDescr] )+ RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:382:4: LEFT_PAREN AND ( ce[andDescr] )+ RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_and_ce526); if (failed) return ;\n            match(input,AND,FOLLOW_AND_in_and_ce531); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t    \tandDescr = new AndDescr();\r\n              \t\t\tin_ce.addDescr( andDescr );\r\n              \t\t\n            }\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:387:3: ( ce[andDescr] )+\n            int cnt9=0;\n            loop9:\n            do {\n                int alt9=2;\n                int LA9_0 = input.LA(1);\n\n                if ( (LA9_0==LEFT_PAREN||LA9_0==VAR) ) {\n                    alt9=1;\n                }\n\n\n                switch (alt9) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:387:3: ce[andDescr]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_and_ce537);\n            \t    ce(andDescr);\n            \t    _fsp--;\n            \t    if (failed) return ;\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt9 >= 1 ) break loop9;\n            \t    if (backtracking>0) {failed=true; return ;}\n                        EarlyExitException eee =\n                            new EarlyExitException(9, input);\n                        throw eee;\n                }\n                cnt9++;\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_and_ce546); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final ValueHandler lisp_list(BuildContext context, LispList list) throws RecognitionException {\n        ValueHandler valueHandler = null;\n\n        ValueHandler a = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:567:2: ( LEFT_PAREN (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:567:4: LEFT_PAREN (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )* RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lisp_list1195); \n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:568:3: (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )*\n            loop16:\n            do {\n                int alt16=3;\n                int LA16_0 = input.LA(1);\n\n                if ( (LA16_0==NAME||LA16_0==VAR||LA16_0==STRING||LA16_0==INT||(LA16_0>=FLOAT && LA16_0<=NULL)) ) {\n                    alt16=1;\n                }\n                else if ( (LA16_0==LEFT_PAREN) ) {\n                    alt16=2;\n                }\n\n\n                switch (alt16) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:568:6: a= lisp_atom[context]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_atom_in_lisp_list1205);\n            \t    a=lisp_atom(context);\n            \t    _fsp--;\n\n            \t     list.add( a ); \n\n            \t    }\n            \t    break;\n            \tcase 2 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:569:6: a= lisp_list[context, list.createList()]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_lisp_list1221);\n            \t    a=lisp_list(context,  list.createList());\n            \t    _fsp--;\n\n            \t     list.add( a ); \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop16;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lisp_list1251); \n             valueHandler = list.getValueHandler(); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return valueHandler;\n    }","id":5539,"modified_method":"public final ValueHandler lisp_list(BuildContext context, LispList list) throws RecognitionException {\n        ValueHandler valueHandler = null;\n\n        ValueHandler a = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:639:2: ( LEFT_PAREN (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:639:4: LEFT_PAREN (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )* RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lisp_list1258); if (failed) return valueHandler;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:640:3: (a= lisp_atom[context] | a= lisp_list[context, list.createList()] )*\n            loop17:\n            do {\n                int alt17=3;\n                int LA17_0 = input.LA(1);\n\n                if ( (LA17_0==NAME||LA17_0==VAR||LA17_0==STRING||LA17_0==INT||(LA17_0>=FLOAT && LA17_0<=NULL)) ) {\n                    alt17=1;\n                }\n                else if ( (LA17_0==LEFT_PAREN) ) {\n                    alt17=2;\n                }\n\n\n                switch (alt17) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:640:6: a= lisp_atom[context]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_atom_in_lisp_list1268);\n            \t    a=lisp_atom(context);\n            \t    _fsp--;\n            \t    if (failed) return valueHandler;\n            \t    if ( backtracking==0 ) {\n            \t       list.add( a ); \n            \t    }\n\n            \t    }\n            \t    break;\n            \tcase 2 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:641:6: a= lisp_list[context, list.createList()]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_lisp_list1284);\n            \t    a=lisp_list(context,  list.createList());\n            \t    _fsp--;\n            \t    if (failed) return valueHandler;\n            \t    if ( backtracking==0 ) {\n            \t       list.add( a ); \n            \t    }\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop17;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lisp_list1314); if (failed) return valueHandler;\n            if ( backtracking==0 ) {\n               valueHandler = list.getValueHandler(); \n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return valueHandler;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void not_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                NotDescr notDescr= null;         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:403:2: ( LEFT_PAREN NOT ce[notDescr] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:403:4: LEFT_PAREN NOT ce[notDescr] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_not_ce622); \n            match(input,NOT,FOLLOW_NOT_in_not_ce627); \n            \r\n            \t\t\tnotDescr = new NotDescr();\r\n            \t\t    in_ce.addDescr( notDescr );\r\n            \t\t\n            pushFollow(FOLLOW_ce_in_not_ce633);\n            ce(notDescr);\n            _fsp--;\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_not_ce641); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5540,"modified_method":"public final void not_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        \r\n                NotDescr notDescr= null;         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:408:2: ( LEFT_PAREN NOT ce[notDescr] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:408:4: LEFT_PAREN NOT ce[notDescr] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_not_ce622); if (failed) return ;\n            match(input,NOT,FOLLOW_NOT_in_not_ce627); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\tnotDescr = new NotDescr();\r\n              \t\t    in_ce.addDescr( notDescr );\r\n              \t\t\n            }\n            pushFollow(FOLLOW_ce_in_not_ce633);\n            ce(notDescr);\n            _fsp--;\n            if (failed) return ;\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_not_ce641); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final Deffunction deffunction() throws RecognitionException {\n        Deffunction function = null;\n\n        Token loc=null;\n        Token ruleName=null;\n        Token v=null;\n        ValueHandler fc = null;\n\n\n        \r\n        \t\t\tBuildContext context;  \t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:250:2: (loc= LEFT_PAREN DEFFUNCTION ruleName= NAME loc= LEFT_PAREN (v= VAR )* RIGHT_PAREN (fc= lisp_list[context, new LispForm(context) ] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:250:4: loc= LEFT_PAREN DEFFUNCTION ruleName= NAME loc= LEFT_PAREN (v= VAR )* RIGHT_PAREN (fc= lisp_list[context, new LispForm(context) ] )* RIGHT_PAREN\n            {\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction141); \n            match(input,DEFFUNCTION,FOLLOW_DEFFUNCTION_in_deffunction149); \n            ruleName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_deffunction158); \n            \r\n            \t    \tfunction = new Deffunction( ruleName.getText() );\r\n            \t\t\tfunctionRegistry.addFunction( function );\r\n            \t      \tcontext = new ExecutionBuildContext( function, functionRegistry );\r\n            \t  \t\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction166); \n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:258:4: (v= VAR )*\n            loop2:\n            do {\n                int alt2=2;\n                int LA2_0 = input.LA(1);\n\n                if ( (LA2_0==VAR) ) {\n                    alt2=1;\n                }\n\n\n                switch (alt2) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:258:5: v= VAR\n            \t    {\n            \t    v=(Token)input.LT(1);\n            \t    match(input,VAR,FOLLOW_VAR_in_deffunction176); \n            \t    \r\n            \t    \t\t\tcontext.addVariable( function.addParameter( v.getText() ) );\r\n            \t    \t\t \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop2;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction189); \n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:262:5: (fc= lisp_list[context, new LispForm(context) ] )*\n            loop3:\n            do {\n                int alt3=2;\n                int LA3_0 = input.LA(1);\n\n                if ( (LA3_0==LEFT_PAREN) ) {\n                    alt3=1;\n                }\n\n\n                switch (alt3) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:262:6: fc= lisp_list[context, new LispForm(context) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_deffunction198);\n            \t    fc=lisp_list(context,  new LispForm(context) );\n            \t    _fsp--;\n\n            \t     context.addFunction( (FunctionCaller) fc ); \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop3;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction209); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return function;\n    }","id":5541,"modified_method":"public final Deffunction deffunction() throws RecognitionException {\n        Deffunction function = null;\n\n        Token loc=null;\n        Token ruleName=null;\n        Token v=null;\n        ValueHandler fc = null;\n\n\n        \r\n        \t\t\tBuildContext context = null;  \t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:255:2: (loc= LEFT_PAREN DEFFUNCTION ruleName= NAME loc= LEFT_PAREN (v= VAR )* RIGHT_PAREN (fc= lisp_list[context, new LispForm(context) ] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:255:4: loc= LEFT_PAREN DEFFUNCTION ruleName= NAME loc= LEFT_PAREN (v= VAR )* RIGHT_PAREN (fc= lisp_list[context, new LispForm(context) ] )* RIGHT_PAREN\n            {\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction141); if (failed) return function;\n            match(input,DEFFUNCTION,FOLLOW_DEFFUNCTION_in_deffunction149); if (failed) return function;\n            ruleName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_deffunction158); if (failed) return function;\n            if ( backtracking==0 ) {\n              \r\n              \t    \tfunction = new Deffunction( ruleName.getText() );\r\n              \t\t\tfunctionRegistry.addFunction( function );\r\n              \t      \tcontext = new ExecutionBuildContext( function, functionRegistry );\r\n              \t  \t\n            }\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction166); if (failed) return function;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:263:4: (v= VAR )*\n            loop2:\n            do {\n                int alt2=2;\n                int LA2_0 = input.LA(1);\n\n                if ( (LA2_0==VAR) ) {\n                    alt2=1;\n                }\n\n\n                switch (alt2) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:263:5: v= VAR\n            \t    {\n            \t    v=(Token)input.LT(1);\n            \t    match(input,VAR,FOLLOW_VAR_in_deffunction176); if (failed) return function;\n            \t    if ( backtracking==0 ) {\n            \t      \r\n            \t      \t\t\tcontext.addVariable( function.addParameter( v.getText() ) );\r\n            \t      \t\t \n            \t    }\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop2;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction189); if (failed) return function;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:267:5: (fc= lisp_list[context, new LispForm(context) ] )*\n            loop3:\n            do {\n                int alt3=2;\n                int LA3_0 = input.LA(1);\n\n                if ( (LA3_0==LEFT_PAREN) ) {\n                    alt3=1;\n                }\n\n\n                switch (alt3) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:267:6: fc= lisp_list[context, new LispForm(context) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_deffunction198);\n            \t    fc=lisp_list(context,  new LispForm(context) );\n            \t    _fsp--;\n            \t    if (failed) return function;\n            \t    if ( backtracking==0 ) {\n            \t       context.addFunction( (FunctionCaller) fc ); \n            \t    }\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop3;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction209); if (failed) return function;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return function;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void normal_pattern(ConditionalElementDescr in_ce) throws RecognitionException {\n        Token name=null;\n\n        \r\n                PatternDescr pattern = null;\r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:447:2: ( LEFT_PAREN name= NAME ( field_constriant[pattern] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:447:4: LEFT_PAREN name= NAME ( field_constriant[pattern] )* RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_normal_pattern769); \n            name=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_normal_pattern776); \n            \r\n            \t\t\tpattern = new PatternDescr(name.getText());\r\n            \t\t\tin_ce.addDescr( pattern );\r\n            \t\t\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:452:3: ( field_constriant[pattern] )*\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( (LA11_0==LEFT_PAREN) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:452:3: field_constriant[pattern]\n            \t    {\n            \t    pushFollow(FOLLOW_field_constriant_in_normal_pattern782);\n            \t    field_constriant(pattern);\n            \t    _fsp--;\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop11;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_normal_pattern792); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5542,"modified_method":"public final void normal_pattern(ConditionalElementDescr in_ce) throws RecognitionException {\n        Token name=null;\n\n        \r\n                PatternDescr pattern = null;\r\n                ConditionalElementDescr top = null;\r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:453:2: ( LEFT_PAREN name= NAME ( field_constriant[top] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:453:4: LEFT_PAREN name= NAME ( field_constriant[top] )* RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_normal_pattern769); if (failed) return ;\n            name=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_normal_pattern776); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\tpattern = new PatternDescr(name.getText());\r\n              \t\t\tin_ce.addDescr( pattern );\r\n              \t\t\ttop = pattern.getConstraint();\r\n              \t\t\t\r\n              \t\t\n            }\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:460:3: ( field_constriant[top] )*\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( (LA11_0==LEFT_PAREN) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:460:3: field_constriant[top]\n            \t    {\n            \t    pushFollow(FOLLOW_field_constriant_in_normal_pattern782);\n            \t    field_constriant(top);\n            \t    _fsp--;\n            \t    if (failed) return ;\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop11;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_normal_pattern792); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final ExecutionEngine execution_block() throws RecognitionException {\n        ExecutionEngine engine = null;\n\n        ValueHandler fc = null;\n\n\n        \r\n        \t        engine = new BlockExecutionEngine();\r\n        \t\t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );  \t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:369:2: ( (fc= lisp_list[context, new LispForm(context) ] )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:370:3: (fc= lisp_list[context, new LispForm(context) ] )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:370:3: (fc= lisp_list[context, new LispForm(context) ] )*\n            loop8:\n            do {\n                int alt8=2;\n                int LA8_0 = input.LA(1);\n\n                if ( (LA8_0==LEFT_PAREN) ) {\n                    alt8=1;\n                }\n\n\n                switch (alt8) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:370:4: fc= lisp_list[context, new LispForm(context) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_execution_block498);\n            \t    fc=lisp_list(context,  new LispForm(context) );\n            \t    _fsp--;\n\n            \t     context.addFunction( (FunctionCaller) fc ); \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop8;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return engine;\n    }","id":5543,"modified_method":"public final ExecutionEngine execution_block() throws RecognitionException {\n        ExecutionEngine engine = null;\n\n        ValueHandler fc = null;\n\n\n        \r\n        \t        engine = new BlockExecutionEngine();\r\n        \t\t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );  \t\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:374:2: ( (fc= lisp_list[context, new LispForm(context) ] )* )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:375:3: (fc= lisp_list[context, new LispForm(context) ] )*\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:375:3: (fc= lisp_list[context, new LispForm(context) ] )*\n            loop8:\n            do {\n                int alt8=2;\n                int LA8_0 = input.LA(1);\n\n                if ( (LA8_0==LEFT_PAREN) ) {\n                    alt8=1;\n                }\n\n\n                switch (alt8) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:375:4: fc= lisp_list[context, new LispForm(context) ]\n            \t    {\n            \t    pushFollow(FOLLOW_lisp_list_in_execution_block498);\n            \t    fc=lisp_list(context,  new LispForm(context) );\n            \t    _fsp--;\n            \t    if (failed) return engine;\n            \t    if ( backtracking==0 ) {\n            \t       context.addFunction( (FunctionCaller) fc ); \n            \t    }\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop8;\n                }\n            } while (true);\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return engine;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void variable_restriction(String op, FieldConstraintDescr fc) throws RecognitionException {\n        Token var=null;\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:550:2: (var= VAR )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:550:4: var= VAR\n            {\n            var=(Token)input.LT(1);\n            match(input,VAR,FOLLOW_VAR_in_variable_restriction1143); \n            \r\n            \t\t\tfc.addRestriction( new VariableRestrictionDescr(op, var.getText()) );\r\n            \t\t\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5544,"modified_method":"public final void variable_restriction(String op, RestrictionConnectiveDescr rc, ConditionalElementDescr ceBase) throws RecognitionException {\n        Token VAR1=null;\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:616:2: ( VAR )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:616:4: VAR\n            {\n            VAR1=(Token)input.LT(1);\n            match(input,VAR,FOLLOW_VAR_in_variable_restriction1206); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t        if ( declarations.contains( VAR1.getText() ) ) {\r\n              \t\t\t\trc.addRestriction( new VariableRestrictionDescr(op, VAR1.getText()) );\r\n              \t\t \t} else {\r\n              \t\t \t\tFieldBindingDescr fbd = new FieldBindingDescr();\r\n              \t\t \t\tfbd.setIdentifier( VAR1.getText() );\t\t \t\t\r\n              \t\t \t\tceBase.addDescr( fbd );\r\n              \t\t \t}\r\n              \t\t\n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public CLPParser(TokenStream input) {\n            super(input);\n        }","id":5545,"modified_method":"public CLPParser(TokenStream input) {\n            super(input);\n            ruleMemo = new HashMap[27+1];\n         }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void ruleAttribute(RuleDescr rule) throws RecognitionException {\n        AttributeDescr d = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:331:2: ( ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )? )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:332:3: ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )?\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:332:3: ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )?\n            int alt6=2;\n            int LA6_0 = input.LA(1);\n\n            if ( (LA6_0==LEFT_PAREN) ) {\n                int LA6_1 = input.LA(2);\n\n                if ( (LA6_1==DECLARE) ) {\n                    alt6=1;\n                }\n            }\n            switch (alt6) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:332:5: LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN\n                    {\n                    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ruleAttribute317); \n                    match(input,DECLARE,FOLLOW_DECLARE_in_ruleAttribute319); \n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:333:4: ( LEFT_PAREN d= salience RIGHT_PAREN )?\n                    int alt5=2;\n                    int LA5_0 = input.LA(1);\n\n                    if ( (LA5_0==LEFT_PAREN) ) {\n                        alt5=1;\n                    }\n                    switch (alt5) {\n                        case 1 :\n                            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:333:6: LEFT_PAREN d= salience RIGHT_PAREN\n                            {\n                            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ruleAttribute326); \n                            pushFollow(FOLLOW_salience_in_ruleAttribute330);\n                            d=salience();\n                            _fsp--;\n\n                             rule.addAttribute( d ); \n                            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ruleAttribute334); \n\n                            }\n                            break;\n\n                    }\n\n                    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ruleAttribute341); \n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5546,"modified_method":"public final void ruleAttribute(RuleDescr rule) throws RecognitionException {\n        AttributeDescr d = null;\n\n\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:336:2: ( ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )? )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:337:3: ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )?\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:337:3: ( LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN )?\n            int alt6=2;\n            int LA6_0 = input.LA(1);\n\n            if ( (LA6_0==LEFT_PAREN) ) {\n                int LA6_1 = input.LA(2);\n\n                if ( (LA6_1==DECLARE) ) {\n                    alt6=1;\n                }\n            }\n            switch (alt6) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:337:5: LEFT_PAREN 'declare' ( LEFT_PAREN d= salience RIGHT_PAREN )? RIGHT_PAREN\n                    {\n                    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ruleAttribute317); if (failed) return ;\n                    match(input,DECLARE,FOLLOW_DECLARE_in_ruleAttribute319); if (failed) return ;\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:338:4: ( LEFT_PAREN d= salience RIGHT_PAREN )?\n                    int alt5=2;\n                    int LA5_0 = input.LA(1);\n\n                    if ( (LA5_0==LEFT_PAREN) ) {\n                        alt5=1;\n                    }\n                    switch (alt5) {\n                        case 1 :\n                            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:338:6: LEFT_PAREN d= salience RIGHT_PAREN\n                            {\n                            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ruleAttribute326); if (failed) return ;\n                            pushFollow(FOLLOW_salience_in_ruleAttribute330);\n                            d=salience();\n                            _fsp--;\n                            if (failed) return ;\n                            if ( backtracking==0 ) {\n                               rule.addAttribute( d ); \n                            }\n                            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ruleAttribute334); if (failed) return ;\n\n                            }\n                            break;\n\n                    }\n\n                    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ruleAttribute341); if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void predicate_constraint(String op, PatternDescr pattern) throws RecognitionException {\n        ValueHandler fc = null;\n\n\n        \r\n           \t\tExecutionEngine engine = new CLPPredicate();\r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );    \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:528:2: ( COLON fc= lisp_list[context, new LispForm(context)] )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:528:4: COLON fc= lisp_list[context, new LispForm(context)]\n            {\n            match(input,COLON,FOLLOW_COLON_in_predicate_constraint1083); \n            pushFollow(FOLLOW_lisp_list_in_predicate_constraint1089);\n            fc=lisp_list(context,  new LispForm(context));\n            _fsp--;\n\n            \t\r\n            \t\t    engine.addFunction( (FunctionCaller) fc );\r\n            \t\t\tpattern.addConstraint( new PredicateDescr( engine ) );\r\n            \t\t\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5547,"modified_method":"public final void predicate_constraint(String op, ConditionalElementDescr base) throws RecognitionException {\n        ValueHandler fc = null;\n\n\n        \r\n           \t\tExecutionEngine engine = new CLPPredicate();\r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );    \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:593:2: ( COLON fc= lisp_list[context, new LispForm(context)] )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:593:4: COLON fc= lisp_list[context, new LispForm(context)]\n            {\n            match(input,COLON,FOLLOW_COLON_in_predicate_constraint1147); if (failed) return ;\n            pushFollow(FOLLOW_lisp_list_in_predicate_constraint1153);\n            fc=lisp_list(context,  new LispForm(context));\n            _fsp--;\n            if (failed) return ;\n            if ( backtracking==0 ) {\n              \t\r\n              \t\t    engine.addFunction( (FunctionCaller) fc );\r\n              \t\t\tbase.addDescr( new PredicateDescr( engine ) );\r\n              \t\t\n            }\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:353:2: ( ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:353:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:353:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\n            int alt7=7;\n            int LA7_0 = input.LA(1);\n\n            if ( (LA7_0==LEFT_PAREN) ) {\n                switch ( input.LA(2) ) {\n                case OR:\n                    {\n                    alt7=2;\n                    }\n                    break;\n                case NAME:\n                    {\n                    alt7=6;\n                    }\n                    break;\n                case AND:\n                    {\n                    alt7=1;\n                    }\n                    break;\n                case EXISTS:\n                    {\n                    alt7=4;\n                    }\n                    break;\n                case TEST:\n                    {\n                    alt7=5;\n                    }\n                    break;\n                case NOT:\n                    {\n                    alt7=3;\n                    }\n                    break;\n                default:\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"353:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\", 7, 1, input);\n\n                    throw nvae;\n                }\n\n            }\n            else if ( (LA7_0==VAR) ) {\n                alt7=7;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"353:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\", 7, 0, input);\n\n                throw nvae;\n            }\n            switch (alt7) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:353:8: and_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_and_ce_in_ce401);\n                    and_ce(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:354:7: or_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_or_ce_in_ce411);\n                    or_ce(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:355:7: not_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_not_ce_in_ce420);\n                    not_ce(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:356:7: exists_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_exists_ce_in_ce429);\n                    exists_ce(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:357:8: eval_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_eval_ce_in_ce443);\n                    eval_ce(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:358:7: normal_pattern[in_ce]\n                    {\n                    pushFollow(FOLLOW_normal_pattern_in_ce457);\n                    normal_pattern(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 7 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:359:7: bound_pattern[in_ce]\n                    {\n                    pushFollow(FOLLOW_bound_pattern_in_ce466);\n                    bound_pattern(in_ce);\n                    _fsp--;\n\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5548,"modified_method":"public final void ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:358:2: ( ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] ) )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:358:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\n            {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:358:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\n            int alt7=7;\n            int LA7_0 = input.LA(1);\n\n            if ( (LA7_0==LEFT_PAREN) ) {\n                switch ( input.LA(2) ) {\n                case NAME:\n                    {\n                    alt7=6;\n                    }\n                    break;\n                case OR:\n                    {\n                    alt7=2;\n                    }\n                    break;\n                case AND:\n                    {\n                    alt7=1;\n                    }\n                    break;\n                case TEST:\n                    {\n                    alt7=5;\n                    }\n                    break;\n                case EXISTS:\n                    {\n                    alt7=4;\n                    }\n                    break;\n                case NOT:\n                    {\n                    alt7=3;\n                    }\n                    break;\n                default:\n                    if (backtracking>0) {failed=true; return ;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"358:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\", 7, 1, input);\n\n                    throw nvae;\n                }\n\n            }\n            else if ( (LA7_0==VAR) ) {\n                alt7=7;\n            }\n            else {\n                if (backtracking>0) {failed=true; return ;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"358:4: ( and_ce[in_ce] | or_ce[in_ce] | not_ce[in_ce] | exists_ce[in_ce] | eval_ce[in_ce] | normal_pattern[in_ce] | bound_pattern[in_ce] )\", 7, 0, input);\n\n                throw nvae;\n            }\n            switch (alt7) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:358:8: and_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_and_ce_in_ce401);\n                    and_ce(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:359:7: or_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_or_ce_in_ce411);\n                    or_ce(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 3 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:360:7: not_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_not_ce_in_ce420);\n                    not_ce(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 4 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:361:7: exists_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_exists_ce_in_ce429);\n                    exists_ce(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 5 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:362:8: eval_ce[in_ce]\n                    {\n                    pushFollow(FOLLOW_eval_ce_in_ce443);\n                    eval_ce(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 6 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:363:7: normal_pattern[in_ce]\n                    {\n                    pushFollow(FOLLOW_normal_pattern_in_ce457);\n                    normal_pattern(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n                case 7 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:364:7: bound_pattern[in_ce]\n                    {\n                    pushFollow(FOLLOW_bound_pattern_in_ce466);\n                    bound_pattern(in_ce);\n                    _fsp--;\n                    if (failed) return ;\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void connected_constraint(FieldConstraintDescr fc, PatternDescr pattern) throws RecognitionException {\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:497:2: ( restriction[fc, pattern] ( AMPERSAND connected_constraint[fc, pattern] | PIPE connected_constraint[fc, pattern] )? )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:498:2: restriction[fc, pattern] ( AMPERSAND connected_constraint[fc, pattern] | PIPE connected_constraint[fc, pattern] )?\n            {\n            pushFollow(FOLLOW_restriction_in_connected_constraint920);\n            restriction(fc,  pattern);\n            _fsp--;\n\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:499:2: ( AMPERSAND connected_constraint[fc, pattern] | PIPE connected_constraint[fc, pattern] )?\n            int alt13=3;\n            int LA13_0 = input.LA(1);\n\n            if ( (LA13_0==AMPERSAND) ) {\n                alt13=1;\n            }\n            else if ( (LA13_0==PIPE) ) {\n                alt13=2;\n            }\n            switch (alt13) {\n                case 1 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:500:6: AMPERSAND connected_constraint[fc, pattern]\n                    {\n                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_connected_constraint932); \n                     fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.AND)); \n                    pushFollow(FOLLOW_connected_constraint_in_connected_constraint941);\n                    connected_constraint(fc,  pattern);\n                    _fsp--;\n\n\n                    }\n                    break;\n                case 2 :\n                    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:503:6: PIPE connected_constraint[fc, pattern]\n                    {\n                    match(input,PIPE,FOLLOW_PIPE_in_connected_constraint953); \n                    fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.OR)); \n                    pushFollow(FOLLOW_connected_constraint_in_connected_constraint962);\n                    connected_constraint(fc,  pattern);\n                    _fsp--;\n\n\n                    }\n                    break;\n\n            }\n\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5549,"modified_method":"public final void field_constriant(ConditionalElementDescr base) throws RecognitionException {\n        Token f=null;\n\n        \r\n             \tList list = new ArrayList();\r\n        \t\tFieldBindingDescr fbd = null;\r\n        \t\tFieldConstraintDescr fc = null;\r\n        \t\tRestrictionConnectiveDescr top = null;\t\t\r\n        \t\tString op = \"==\";\r\n        \t\n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:494:2: ( LEFT_PAREN f= NAME or_restr_connective[top, base] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:495:3: LEFT_PAREN f= NAME or_restr_connective[top, base] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_field_constriant879); if (failed) return ;\n            f=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_field_constriant883); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\tfc = new FieldConstraintDescr(f.getText());\r\n              \t\t\tfc.setLocation( offset(f.getLine()), f.getCharPositionInLine() );\r\n              \t\t\tfc.setStartCharacter( ((CommonToken)f).getStartIndex() );\r\n              \t\t\tbase.addDescr( fc );\t\r\n              \t\t\ttop = fc.getRestriction();\t\t\r\n              \t\t\n            }\n            pushFollow(FOLLOW_or_restr_connective_in_field_constriant898);\n            or_restr_connective(top,  base);\n            _fsp--;\n            if (failed) return ;\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_field_constriant904); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void bound_pattern(ConditionalElementDescr in_ce) throws RecognitionException {\n        Token var=null;\n        Token name=null;\n\n        \r\n                PatternDescr pattern = null;\r\n                String identifier = null;\r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:463:2: (var= VAR ASSIGN_OP LEFT_PAREN name= NAME ( field_constriant[pattern] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:463:4: var= VAR ASSIGN_OP LEFT_PAREN name= NAME ( field_constriant[pattern] )* RIGHT_PAREN\n            {\n            var=(Token)input.LT(1);\n            match(input,VAR,FOLLOW_VAR_in_bound_pattern820); \n            \r\n            \t\t\tidentifier = var.getText();\r\n            \t\t\n            match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_bound_pattern826); \n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_bound_pattern828); \n            name=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_bound_pattern832); \n            \r\n            \t\t\tpattern = new PatternDescr(name.getText());\r\n            \t\t\tpattern.setIdentifier( identifier );\r\n            \t\t\tin_ce.addDescr( pattern );\t    \r\n            \t\t\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:472:3: ( field_constriant[pattern] )*\n            loop12:\n            do {\n                int alt12=2;\n                int LA12_0 = input.LA(1);\n\n                if ( (LA12_0==LEFT_PAREN) ) {\n                    alt12=1;\n                }\n\n\n                switch (alt12) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:472:3: field_constriant[pattern]\n            \t    {\n            \t    pushFollow(FOLLOW_field_constriant_in_bound_pattern841);\n            \t    field_constriant(pattern);\n            \t    _fsp--;\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop12;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_bound_pattern848); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5550,"modified_method":"public final void bound_pattern(ConditionalElementDescr in_ce) throws RecognitionException {\n        Token var=null;\n        Token name=null;\n\n        \r\n                PatternDescr pattern = null;\r\n                String identifier = null;\r\n                ConditionalElementDescr top = null;        \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:472:2: (var= VAR ASSIGN_OP LEFT_PAREN name= NAME ( field_constriant[top] )* RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:472:4: var= VAR ASSIGN_OP LEFT_PAREN name= NAME ( field_constriant[top] )* RIGHT_PAREN\n            {\n            var=(Token)input.LT(1);\n            match(input,VAR,FOLLOW_VAR_in_bound_pattern820); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\tidentifier = var.getText();\r\n              \t\t\n            }\n            match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_bound_pattern826); if (failed) return ;\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_bound_pattern828); if (failed) return ;\n            name=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_bound_pattern832); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t\tpattern = new PatternDescr(name.getText());\r\n              \t\t\tpattern.setIdentifier( identifier );\r\n              \t\t\tin_ce.addDescr( pattern );\r\n              \t\t\ttop = pattern.getConstraint();\t\t\t\t    \r\n              \t\t\n            }\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:482:3: ( field_constriant[top] )*\n            loop12:\n            do {\n                int alt12=2;\n                int LA12_0 = input.LA(1);\n\n                if ( (LA12_0==LEFT_PAREN) ) {\n                    alt12=1;\n                }\n\n\n                switch (alt12) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:482:3: field_constriant[top]\n            \t    {\n            \t    pushFollow(FOLLOW_field_constriant_in_bound_pattern841);\n            \t    field_constriant(top);\n            \t    _fsp--;\n            \t    if (failed) return ;\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop12;\n                }\n            } while (true);\n\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_bound_pattern848); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final RuleDescr defrule() throws RecognitionException {\n        RuleDescr rule = null;\n\n        Token loc=null;\n        Token ruleName=null;\n        Token documentation=null;\n        ExecutionEngine engine = null;\n\n\n         \r\n        \t        rule = null; \r\n        \t        AndDescr lhs = null;\r\n        \t        PatternDescr colum = null;\r\n        \t        AttributeDescr module = null;\t        \r\n        \t      \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:283:2: (loc= LEFT_PAREN DEFRULE ruleName= NAME documentation= STRING ruleAttribute[rule] ( ce[lhs] )* '=>' engine= execution_block RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:283:4: loc= LEFT_PAREN DEFRULE ruleName= NAME documentation= STRING ruleAttribute[rule] ( ce[lhs] )* '=>' engine= execution_block RIGHT_PAREN\n            {\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_defrule235); \n            match(input,DEFRULE,FOLLOW_DEFRULE_in_defrule243); \n            ruleName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_defrule247); \n             \t  \t\t\t  \t\t\r\n            \t  \t\tdebug( \"start rule: \" + ruleName.getText() );\r\n            \t  \t\tString ruleStr = ruleName.getText();\r\n            \r\n            \t        if ( ruleStr.indexOf(\"::\") >= 0 ) {\r\n            \t            String mod = ruleStr.substring(0, ruleStr.indexOf(\"::\"));\r\n            \t            ruleStr = ruleStr.substring(ruleStr.indexOf(\"::\")+2);\r\n            \t\t\t\tmodule = new AttributeDescr( \"agenda-group\", mod );\r\n            \t\t\t\tmodule.setLocation( offset(ruleName.getLine()), ruleName.getCharPositionInLine() );\r\n            \t\t\t\tmodule.setStartCharacter( ((CommonToken)ruleName).getStartIndex() );\r\n            \t\t\t\tmodule.setEndCharacter( ((CommonToken)ruleName).getStopIndex() );\r\n            \t\t\t}\r\n            \t\t    \r\n            \t\t    rule = new RuleDescr( ruleStr, null ); \r\n            \t\t    if( module != null ) {\r\n            \t\t    \trule.addAttribute( module );\r\n            \t\t    }\r\n            \t\t        \r\n            \t\t\trule.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n            \t\t\trule.setStartCharacter( ((CommonToken)loc).getStartIndex() ); \r\n            \t\t\r\n            \t\t\t// not sure how you define where a LHS starts in clips, so just putting it here for now\r\n                    \tlhs = new AndDescr(); \r\n              \t        rule.setLhs( lhs ); \r\n            \t        lhs.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n            \t\t\tlhs.setStartCharacter( ((CommonToken)loc).getStartIndex() );\t\r\n            \t\t\t\r\n            \t\t\trule.addAttribute( new AttributeDescr( \"dialect\", \"clips\") );\t\t\t\t\t\t\t\t\t\t\t\t\r\n            \t\t\n            documentation=(Token)input.LT(1);\n            match(input,STRING,FOLLOW_STRING_in_defrule259); \n            \r\n            \t    \t// do nothing here for now\r\n            \t\t\n            pushFollow(FOLLOW_ruleAttribute_in_defrule265);\n            ruleAttribute(rule);\n            _fsp--;\n\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:320:3: ( ce[lhs] )*\n            loop4:\n            do {\n                int alt4=2;\n                int LA4_0 = input.LA(1);\n\n                if ( (LA4_0==LEFT_PAREN||LA4_0==VAR) ) {\n                    alt4=1;\n                }\n\n\n                switch (alt4) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:320:3: ce[lhs]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_defrule273);\n            \t    ce(lhs);\n            \t    _fsp--;\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop4;\n                }\n            } while (true);\n\n            match(input,43,FOLLOW_43_in_defrule282); \n            pushFollow(FOLLOW_execution_block_in_defrule291);\n            engine=execution_block();\n            _fsp--;\n\n             rule.setConsequence( engine ); \n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_defrule300); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return rule;\n    }","id":5551,"modified_method":"public final RuleDescr defrule() throws RecognitionException {\n        RuleDescr rule = null;\n\n        Token loc=null;\n        Token ruleName=null;\n        Token documentation=null;\n        ExecutionEngine engine = null;\n\n\n         \r\n        \t        rule = null; \r\n        \t        AndDescr lhs = null;\r\n        \t        PatternDescr colum = null;\r\n        \t        AttributeDescr module = null;\t        \r\n        \t      \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:288:2: (loc= LEFT_PAREN DEFRULE ruleName= NAME documentation= STRING ruleAttribute[rule] ( ce[lhs] )* '=>' engine= execution_block RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:288:4: loc= LEFT_PAREN DEFRULE ruleName= NAME documentation= STRING ruleAttribute[rule] ( ce[lhs] )* '=>' engine= execution_block RIGHT_PAREN\n            {\n            loc=(Token)input.LT(1);\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_defrule235); if (failed) return rule;\n            match(input,DEFRULE,FOLLOW_DEFRULE_in_defrule243); if (failed) return rule;\n            ruleName=(Token)input.LT(1);\n            match(input,NAME,FOLLOW_NAME_in_defrule247); if (failed) return rule;\n            if ( backtracking==0 ) {\n               \t  \t\t\t  \t\t\r\n              \t  \t\tdebug( \"start rule: \" + ruleName.getText() );\r\n              \t  \t\tString ruleStr = ruleName.getText();\r\n              \r\n              \t        if ( ruleStr.indexOf(\"::\") >= 0 ) {\r\n              \t            String mod = ruleStr.substring(0, ruleStr.indexOf(\"::\"));\r\n              \t            ruleStr = ruleStr.substring(ruleStr.indexOf(\"::\")+2);\r\n              \t\t\t\tmodule = new AttributeDescr( \"agenda-group\", mod );\r\n              \t\t\t\tmodule.setLocation( offset(ruleName.getLine()), ruleName.getCharPositionInLine() );\r\n              \t\t\t\tmodule.setStartCharacter( ((CommonToken)ruleName).getStartIndex() );\r\n              \t\t\t\tmodule.setEndCharacter( ((CommonToken)ruleName).getStopIndex() );\r\n              \t\t\t}\r\n              \t\t    \r\n              \t\t    rule = new RuleDescr( ruleStr, null ); \r\n              \t\t    if( module != null ) {\r\n              \t\t    \trule.addAttribute( module );\r\n              \t\t    }\r\n              \t\t        \r\n              \t\t\trule.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n              \t\t\trule.setStartCharacter( ((CommonToken)loc).getStartIndex() ); \r\n              \t\t\r\n              \t\t\t// not sure how you define where a LHS starts in clips, so just putting it here for now\r\n                      \tlhs = new AndDescr(); \r\n                \t        rule.setLhs( lhs ); \r\n              \t        lhs.setLocation( offset(loc.getLine()), loc.getCharPositionInLine() );\r\n              \t\t\tlhs.setStartCharacter( ((CommonToken)loc).getStartIndex() );\t\r\n              \t\t\t\r\n              \t\t\trule.addAttribute( new AttributeDescr( \"dialect\", \"clips\") );\t\t\t\t\t\t\t\t\t\t\t\t\r\n              \t\t\n            }\n            documentation=(Token)input.LT(1);\n            match(input,STRING,FOLLOW_STRING_in_defrule259); if (failed) return rule;\n            if ( backtracking==0 ) {\n              \r\n              \t    \t// do nothing here for now\r\n              \t\t\n            }\n            pushFollow(FOLLOW_ruleAttribute_in_defrule265);\n            ruleAttribute(rule);\n            _fsp--;\n            if (failed) return rule;\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:325:3: ( ce[lhs] )*\n            loop4:\n            do {\n                int alt4=2;\n                int LA4_0 = input.LA(1);\n\n                if ( (LA4_0==LEFT_PAREN||LA4_0==VAR) ) {\n                    alt4=1;\n                }\n\n\n                switch (alt4) {\n            \tcase 1 :\n            \t    // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:325:3: ce[lhs]\n            \t    {\n            \t    pushFollow(FOLLOW_ce_in_defrule273);\n            \t    ce(lhs);\n            \t    _fsp--;\n            \t    if (failed) return rule;\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop4;\n                }\n            } while (true);\n\n            match(input,43,FOLLOW_43_in_defrule282); if (failed) return rule;\n            pushFollow(FOLLOW_execution_block_in_defrule291);\n            engine=execution_block();\n            _fsp--;\n            if (failed) return rule;\n            if ( backtracking==0 ) {\n               rule.setConsequence( engine ); \n            }\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_defrule300); if (failed) return rule;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return rule;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public final void eval_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        ValueHandler fc = null;\n\n\n        \r\n                EvalDescr evalDescr= null;    \r\n           \t\tExecutionEngine engine = new CLPEval();     \r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );   \t\t         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:431:2: ( LEFT_PAREN TEST fc= lisp_list[context, new LispForm(context)] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:431:4: LEFT_PAREN TEST fc= lisp_list[context, new LispForm(context)] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_eval_ce717); \n            match(input,TEST,FOLLOW_TEST_in_eval_ce722); \n            \r\n            \t\t    evalDescr = new EvalDescr();\r\n            \t\t    in_ce.addDescr( evalDescr );\r\n            \t\t\n            pushFollow(FOLLOW_lisp_list_in_eval_ce730);\n            fc=lisp_list(context,  new LispForm(context));\n            _fsp--;\n\n            \t\t\t\t\t\r\n            \t\t    engine.addFunction( (FunctionCaller) fc );\t\t\r\n            \t\t\tevalDescr.setContent( engine );\t\t\t\r\n            \t\t\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_eval_ce741); \n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","id":5552,"modified_method":"public final void eval_ce(ConditionalElementDescr in_ce) throws RecognitionException {\n        ValueHandler fc = null;\n\n\n        \r\n                EvalDescr evalDescr= null;    \r\n           \t\tExecutionEngine engine = new CLPEval();     \r\n        \t\tBuildContext context = new ExecutionBuildContext( engine, functionRegistry );   \t\t         \r\n            \n        try {\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:436:2: ( LEFT_PAREN TEST fc= lisp_list[context, new LispForm(context)] RIGHT_PAREN )\n            // C:\\\\dev\\\\jbossrules\\\\trunk07\\\\drools-clips\\\\src\\\\main\\\\resources\\\\org\\\\drools\\\\clp\\\\CLP.g:436:4: LEFT_PAREN TEST fc= lisp_list[context, new LispForm(context)] RIGHT_PAREN\n            {\n            match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_eval_ce717); if (failed) return ;\n            match(input,TEST,FOLLOW_TEST_in_eval_ce722); if (failed) return ;\n            if ( backtracking==0 ) {\n              \r\n              \t\t    evalDescr = new EvalDescr();\r\n              \t\t    in_ce.addDescr( evalDescr );\r\n              \t\t\n            }\n            pushFollow(FOLLOW_lisp_list_in_eval_ce730);\n            fc=lisp_list(context,  new LispForm(context));\n            _fsp--;\n            if (failed) return ;\n            if ( backtracking==0 ) {\n              \t\t\t\t\t\r\n              \t\t    engine.addFunction( (FunctionCaller) fc );\t\t\r\n              \t\t\tevalDescr.setContent( engine );\t\t\t\r\n              \t\t\n            }\n            match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_eval_ce741); if (failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void test1() {\r\n        Shell shell = new Shell();\r\n        \r\n        shell.evalString( \"(import org.drools.Person)\" );\r\n        \r\n        shell.evalString( \"(defrule xxx (Person (name bob) )=> (printout t xx \\\" \\\" (eq 1 1) ) )\" );\r\n        \r\n        Package pkg = shell.getWorkingMemory().getRuleBase().getPackage( \"MAIN\" );\r\n        Rule rule = pkg.getRule( \"xxx\" );\r\n        assertEquals( \"xxx\", rule.getName() );\r\n        \r\n        shell.evalString( \"(defrule yyy => (printout t yy (eq 1 1) ) ) )\" );\r\n        rule = pkg.getRule( \"yyy\" );\r\n        assertEquals( \"yyy\", rule.getName() );\r\n        \r\n        assertEquals( 2, pkg.getRules().length );\r\n        \r\n        assertTrue( pkg.getImports().contains( \"org.drools.Person\" ) );\r\n        \r\n        WorkingMemory wm = shell.getWorkingMemory();\r\n        wm.insert( new Person(\"bob\") );\r\n        wm.fireAllRules();\r\n        \r\n    }","id":5553,"modified_method":"public void test1() {\r\n        Shell shell = new Shell();\r\n        \r\n        shell.evalString( \"(import org.drools.Person)\" );\r\n        \r\n        shell.evalString( \"(defrule xxx (Person (name tim & bob) )=> (printout t xx \\\" \\\" (eq 1 1) ) )\" );\r\n        \r\n        Package pkg = shell.getWorkingMemory().getRuleBase().getPackage( \"MAIN\" );\r\n        Rule rule = pkg.getRule( \"xxx\" );\r\n        assertEquals( \"xxx\", rule.getName() );\r\n        \r\n        shell.evalString( \"(defrule yyy => (printout t yy (eq 1 1) ) ) )\" );\r\n        rule = pkg.getRule( \"yyy\" );\r\n        assertEquals( \"yyy\", rule.getName() );\r\n        \r\n        assertEquals( 2, pkg.getRules().length );\r\n        \r\n        assertTrue( pkg.getImports().contains( \"org.drools.Person\" ) );\r\n        \r\n        WorkingMemory wm = shell.getWorkingMemory();\r\n        wm.insert( new Person(\"bob\") );\r\n        wm.fireAllRules();\r\n        \r\n    }","commit_id":"a2f82b40628a12cbba67119e2cd57c4e28cf8b28","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HAccount> searchQuery(String searchQuery)\n   {\n      String userName = searchQuery + \"%\";\n      org.hibernate.Query query = getSession().getNamedQuery(\"getSearchLogin\").setString(\"username\", userName);\n      return query.list();\n   }","id":5554,"modified_method":"@SuppressWarnings(\"unchecked\")\n   // TODO: use hibernate search\n   public List<HAccount> searchQuery(String searchQuery)\n   {\n      String userName = searchQuery + \"%\";\n      org.hibernate.Query query = getSession().createQuery(\"from HAccount as a where a.username like :username\");\n      query.setParameter(\"username\", userName);\n      return query.list();\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public GetTranslationMemoryResult execute(GetTranslationMemory action, ExecutionContext context) throws ActionException\n   {\n      FliesIdentity.instance().checkLoggedIn();\n\n      final String searchText = action.getQuery();\n      ShortString abbrev = new ShortString(searchText);\n      final SearchType searchType = action.getSearchType();\n      log.info(\"Fetching TM matches({0}) for \\\"{1}\\\"\", searchType, abbrev);\n\n      LocaleId localeID = action.getLocaleId();\n      ArrayList<TranslationMemoryItem> results;\n      String queryText;\n      switch (searchType)\n      {\n      case RAW:\n         queryText = searchText;\n         break;\n\n      case FUZZY:\n         // search by N-grams\n         queryText = QueryParser.escape(searchText);\n         break;\n\n      case EXACT:\n         queryText = \"\\\"\" + QueryParser.escape(searchText) + \"\\\"\";\n         break;\n\n      default:\n         throw new RuntimeException(\"Unknown query type: \" + searchType);\n      }\n\n      try\n      {\n         QueryParser parser = new QueryParser(Version.LUCENE_29, \"content\", new DefaultNgramAnalyzer());\n         Query textQuery = parser.parse(queryText);\n         FullTextQuery ftQuery = entityManager.createFullTextQuery(textQuery, HTextFlow.class);\n         List<Long> translatedIds = textFlowDAO.getIdsByTargetState(localeID, ContentState.Approved);\n         log.debug(\"{0} matching TF ids for locale {0}: {1}\", translatedIds.size(), localeID, translatedIds);\n         ftQuery.enableFullTextFilter(\"translated\").setParameter(\"translatedIds\", translatedIds);\n         ftQuery.setProjection(FullTextQuery.SCORE, FullTextQuery.THIS);\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> matches = ftQuery.setMaxResults(MAX_RESULTS).getResultList();\n         Map<TMKey, TranslationMemoryItem> matchesMap = new LinkedHashMap<TMKey, TranslationMemoryItem>();\n         for (Object[] match : matches)\n         {\n            float score = (Float) match[0];\n            HTextFlow textFlow = (HTextFlow) match[1];\n            if (textFlow == null)\n            {\n               continue;\n            }\n            HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(localeID);\n            HTextFlowTarget target = textFlow.getTargets().get(hLocale);\n            // double check in case of caching issues\n            if (target.getState() != ContentState.Approved)\n            {\n               continue;\n            }\n            String textFlowContent = textFlow.getContent();\n            String targetContent = target.getContent();\n\n            int levDistance = LevenshteinUtil.getLevenshteinSubstringDistance(searchText, textFlowContent);\n            int maxDistance = searchText.length();\n            int percent = 100 * (maxDistance - levDistance) / maxDistance;\n\n            TMKey key = new TMKey(textFlowContent, targetContent);\n            TranslationMemoryItem item = matchesMap.get(key);\n            if (item == null)\n            {\n               item = new TranslationMemoryItem(textFlowContent, targetContent, score, percent);\n               matchesMap.put(key, item);\n            }\n            item.addTransUnitId(textFlow.getId());\n         }\n         results = new ArrayList<TranslationMemoryItem>(matchesMap.values());\n      }\n      catch (ParseException e)\n      {\n         if (searchType == SearchType.RAW)\n         {\n            log.warn(\"Can't parse raw query '\" + queryText + \"'\");\n         }\n         else\n         {\n            // escaping failed!\n            log.error(\"Can't parse query '\" + queryText + \"'\", e);\n         }\n         results = new ArrayList<TranslationMemoryItem>(0);\n      }\n\n      /**\n       * NB just because this Comparator returns 0 doesn't mean the matches are\n       * identical.\n       */\n      Comparator<TranslationMemoryItem> comp = new Comparator<TranslationMemoryItem>()\n      {\n\n         @Override\n         public int compare(TranslationMemoryItem m1, TranslationMemoryItem m2)\n         {\n            int result;\n            result = compare(m1.getSimilarityPercent(), m2.getSimilarityPercent());\n            if (result != 0)\n               return -result;\n            result = compare(m1.getSource().length(), m2.getSource().length());\n            if (result != 0)\n               return result; // shorter matches are preferred, if similarity is\n                              // the same\n            result = compare(m1.getRelevanceScore(), m2.getRelevanceScore());\n            if (result != 0)\n               return -result;\n            return m1.getSource().compareTo(m2.getSource());\n         }\n\n         private int compare(int a, int b)\n         {\n            if (a < b)\n               return -1;\n            if (a > b)\n               return 1;\n            return 0;\n         }\n\n         private int compare(float a, float b)\n         {\n            if (a < b)\n               return -1;\n            if (a > b)\n               return 1;\n            return 0;\n         }\n\n      };\n\n      Collections.sort(results, comp);\n\n      log.info(\"Returning {0} TM matches for \\\"{1}\\\"\", results.size(), abbrev);\n      return new GetTranslationMemoryResult(results);\n   }","id":5555,"modified_method":"@Override\n   public GetTranslationMemoryResult execute(GetTranslationMemory action, ExecutionContext context) throws ActionException\n   {\n      FliesIdentity.instance().checkLoggedIn();\n\n      final String searchText = action.getQuery();\n      ShortString abbrev = new ShortString(searchText);\n      final SearchType searchType = action.getSearchType();\n      log.info(\"Fetching TM matches({0}) for \\\"{1}\\\"\", searchType, abbrev);\n\n      LocaleId localeID = action.getLocaleId();\n      ArrayList<TranslationMemoryItem> results;\n\n      try\n      {\n         List<Long> translatedIds = textFlowDAO.getIdsByTargetState(localeID, ContentState.Approved);\n         List<Object[]> matches = textFlowDAO.getSearchResult(searchText, searchType, translatedIds, MAX_RESULTS);\n         Map<TMKey, TranslationMemoryItem> matchesMap = new LinkedHashMap<TMKey, TranslationMemoryItem>();\n         for (Object[] match : matches)\n         {\n            float score = (Float) match[0];\n            HTextFlow textFlow = (HTextFlow) match[1];\n            if (textFlow == null)\n            {\n               continue;\n            }\n            HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(localeID);\n            HTextFlowTarget target = textFlow.getTargets().get(hLocale);\n            // double check in case of caching issues\n            if (target.getState() != ContentState.Approved)\n            {\n               continue;\n            }\n            String textFlowContent = textFlow.getContent();\n            String targetContent = target.getContent();\n\n            int levDistance = LevenshteinUtil.getLevenshteinSubstringDistance(searchText, textFlowContent);\n            int maxDistance = searchText.length();\n            int percent = 100 * (maxDistance - levDistance) / maxDistance;\n\n            TMKey key = new TMKey(textFlowContent, targetContent);\n            TranslationMemoryItem item = matchesMap.get(key);\n            if (item == null)\n            {\n               item = new TranslationMemoryItem(textFlowContent, targetContent, score, percent);\n               matchesMap.put(key, item);\n            }\n            item.addTransUnitId(textFlow.getId());\n         }\n         results = new ArrayList<TranslationMemoryItem>(matchesMap.values());\n      }\n      catch (ParseException e)\n      {\n         if (searchType == SearchType.RAW)\n         {\n            log.warn(\"Can't parse raw query '\" + searchText + \"'\");\n         }\n         else\n         {\n            // escaping failed!\n            log.error(\"Can't parse query '\" + searchText + \"'\", e);\n         }\n         results = new ArrayList<TranslationMemoryItem>(0);\n      }\n\n      /**\n       * NB just because this Comparator returns 0 doesn't mean the matches are\n       * identical.\n       */\n      Comparator<TranslationMemoryItem> comp = new Comparator<TranslationMemoryItem>()\n      {\n\n         @Override\n         public int compare(TranslationMemoryItem m1, TranslationMemoryItem m2)\n         {\n            int result;\n            result = compare(m1.getSimilarityPercent(), m2.getSimilarityPercent());\n            if (result != 0)\n               return -result;\n            result = compare(m1.getSource().length(), m2.getSource().length());\n            if (result != 0)\n               return result; // shorter matches are preferred, if similarity is\n                              // the same\n            result = compare(m1.getRelevanceScore(), m2.getRelevanceScore());\n            if (result != 0)\n               return -result;\n            return m1.getSource().compareTo(m2.getSource());\n         }\n\n         private int compare(int a, int b)\n         {\n            if (a < b)\n               return -1;\n            if (a > b)\n               return 1;\n            return 0;\n         }\n\n         private int compare(float a, float b)\n         {\n            if (a < b)\n               return -1;\n            if (a > b)\n               return 1;\n            return 0;\n         }\n\n      };\n\n      Collections.sort(results, comp);\n\n      log.info(\"Returning {0} TM matches for \\\"{1}\\\"\", results.size(), abbrev);\n      return new GetTranslationMemoryResult(results);\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   @Override\n   public GetTransUnitListResult execute(GetTransUnitList action, ExecutionContext context) throws ActionException\n   {\n\n      FliesIdentity.instance().checkLoggedIn();\n\n      log.info(\"Fetching Transunits for {0}\", action.getDocumentId());\n\n      if (action.getPhrase() != null && !action.getPhrase().isEmpty())\n      {\n         return getUnitsByFilter(action);\n      }\n\n      Query query = session.createQuery(\"from HTextFlow tf where tf.obsolete=0 and tf.document.id = :id order by tf.pos\").setParameter(\"id\", action.getDocumentId().getValue());\n      int size = query.list().size();\n\n      List<HTextFlow> textFlows = query.setFirstResult(action.getOffset()).setMaxResults(action.getCount()).list();\n\n      ArrayList<TransUnit> units = new ArrayList<TransUnit>();\n      for (HTextFlow textFlow : textFlows)\n      {\n\n         TransUnitId tuId = new TransUnitId(textFlow.getId());\n\n         // EditState editstate = workspace.getTransUnitStatus(tuId);\n         TransUnit tu = new TransUnit(tuId, action.getWorkspaceId().getLocaleId(), textFlow.getContent(), CommentsUtil.toString(textFlow.getComment()), \"\", ContentState.New);\n         HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(action.getWorkspaceId().getLocaleId());\n         HTextFlowTarget target = textFlow.getTargets().get(hLocale);\n         if (target != null)\n         {\n            tu.setTarget(target.getContent());\n            tu.setStatus(target.getState());\n         }\n         units.add(tu);\n      }\n      return new GetTransUnitListResult(action.getDocumentId(), units, size);\n   }","id":5556,"modified_method":"@Override\n   public GetTransUnitListResult execute(GetTransUnitList action, ExecutionContext context) throws ActionException\n   {\n\n      FliesIdentity.instance().checkLoggedIn();\n\n      log.info(\"Fetching Transunits for document {0}\", action.getDocumentId());\n      int size = 0;\n      List<HTextFlow> textFlows = new ArrayList<HTextFlow>();\n      if (action.getPhrase() != null && !action.getPhrase().isEmpty())\n      {\n         log.info(\"find message:\" + action.getPhrase());\n         Set<Object[]> idSet = textFlowDAO.getIdsBySearch(action.getDocumentId().getValue(), action.getOffset(), action.getCount(), action.getPhrase(), action.getWorkspaceId().getLocaleId());\n         size = idSet.size();\n         log.info(\"size : {0}\", size);\n         log.info(\"action.getOffset() : {0}\", action.getOffset());\n         log.info(\"action.getCount() : {0}\", action.getCount());\n\n         List<Object[]> subIds = new ArrayList<Object[]>();\n         if ((action.getOffset() + action.getCount()) < size)\n         {\n            subIds = new ArrayList<Object[]>(idSet).subList(action.getOffset(), action.getOffset() + action.getCount());\n         }\n         else if (action.getOffset() < size)\n         {\n            subIds = new ArrayList<Object[]>(idSet).subList(action.getOffset(), size);\n         }\n         List<Long> idList = new ArrayList<Long>();\n         for (Object[] para : subIds)\n         {\n            idList.add((Long) para[0]);\n         }\n\n         textFlows = textFlowDAO.findByIdList(idList);\n      }\n      else\n      {\n         size = textFlowDAO.getByDocument(action.getDocumentId().getValue()).size();\n         textFlows = textFlowDAO.getOffsetListByDocument(action.getDocumentId().getValue(), action.getOffset(), action.getCount());\n      }\n\n      ArrayList<TransUnit> units = new ArrayList<TransUnit>();\n      for (HTextFlow textFlow : textFlows)\n      {\n\n         TransUnitId tuId = new TransUnitId(textFlow.getId());\n         TransUnit tu = new TransUnit(tuId, action.getWorkspaceId().getLocaleId(), textFlow.getContent(), CommentsUtil.toString(textFlow.getComment()), \"\", ContentState.New);\n         HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(action.getWorkspaceId().getLocaleId());\n         HTextFlowTarget target = textFlow.getTargets().get(hLocale);\n         if (target != null)\n         {\n            tu.setTarget(target.getContent());\n            tu.setStatus(target.getState());\n         }\n         units.add(tu);\n      }\n      return new GetTransUnitListResult(action.getDocumentId(), units, size);\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"private boolean checkNewFuzzyState(HTextFlowTarget textFlowTarget)\n   {\n      if (textFlowTarget == null)\n      {\n         return true;\n      }\n      else if (textFlowTarget.getState() == ContentState.New || textFlowTarget.getState() == ContentState.NeedReview)\n      {\n         return true;\n      }\n      return false;\n   }","id":5557,"modified_method":"private boolean checkNewFuzzyState(HTextFlowTarget textFlowTarget)\n   {\n      return textFlowTarget == null || textFlowTarget.getState() == ContentState.New || textFlowTarget.getState() == ContentState.NeedReview;\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public GetTransUnitsNavigationResult execute(GetTransUnitsNavigation action, ExecutionContext context) throws ActionException\n   {\n\n      FliesIdentity.instance().checkLoggedIn();\n      List<Long> results = new ArrayList<Long>();\n      HTextFlow tf = textFlowDAO.findById(action.getId(), false);\n      if (action.getPhrase() != null && !action.getPhrase().isEmpty())\n      {\n         results = getNavigationUnitsByFilter(action);\n      }\n      else\n      {\n         List<HTextFlow> textFlows = new ArrayList<HTextFlow>();\n         int count = 0;\n         textFlows = textFlowDAO.getNavigationByDocumentId(tf.getDocument().getId(), tf.getPos(), action.isReverse());\n         HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(action.getWorkspaceId().getLocaleId());\n         Long step = 0L;\n         for (HTextFlow textFlow : textFlows)\n         {\n            if (count < action.getCount())\n            {\n               step++;\n               HTextFlowTarget textFlowTarget = textFlow.getTargets().get(hLocale);\n               if (checkNewFuzzyState(textFlowTarget))\n               {\n                  results.add(step);\n                  log.info(\"add navigation step: \" + step);\n                  count++;\n               }\n            }\n            else\n            {\n               break;\n            }\n         }\n      }\n\n      return new GetTransUnitsNavigationResult(new DocumentId(tf.getDocument().getId()), results);\n   }","id":5558,"modified_method":"@Override\n   public GetTransUnitsNavigationResult execute(GetTransUnitsNavigation action, ExecutionContext context) throws ActionException\n   {\n\n      FliesIdentity.instance().checkLoggedIn();\n      HTextFlow tf = textFlowDAO.findById(action.getId(), false);\n      List<Long> results = new ArrayList<Long>();\n      List<HTextFlow> textFlows = new ArrayList<HTextFlow>();\n      if (action.getPhrase() != null && !action.getPhrase().isEmpty())\n      {\n         log.info(\"find message:\" + action.getPhrase());\n         Set<Object[]> idSet = textFlowDAO.getNavigationBy(tf.getDocument().getId(), action.getPhrase().toLowerCase(), tf.getPos(), action.getWorkspaceId().getLocaleId(), action.isReverse());\n         log.info(\"size: \" + idSet.size());\n         Long step = 0L;\n         int count = 0;\n\n         for (Object[] id : idSet)\n         {\n            if (count < action.getCount())\n            {\n               Long textFlowId = (Long) id[0];\n               step++;\n               HTextFlow textFlow = textFlowDAO.findById(textFlowId, false);\n               HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(action.getWorkspaceId().getLocaleId());\n               HTextFlowTarget textFlowTarget = textFlow.getTargets().get(hLocale);\n               if (checkNewFuzzyState(textFlowTarget))\n               {\n                  results.add(step);\n                  log.info(\"add navigation step: \" + step);\n                  count++;\n               }\n            }\n            else\n            {\n               break;\n            }\n         }\n      }\n      else\n      {\n         textFlows = textFlowDAO.getNavigationByDocumentId(tf.getDocument().getId(), tf.getPos(), action.isReverse());\n         HLocale hLocale = localeServiceImpl.getSupportedLanguageByLocale(action.getWorkspaceId().getLocaleId());\n         int count = 0;\n         Long step = 0L;\n         for (HTextFlow textFlow : textFlows)\n         {\n            if (count < action.getCount())\n            {\n               step++;\n               HTextFlowTarget textFlowTarget = textFlow.getTargets().get(hLocale);\n               if (checkNewFuzzyState(textFlowTarget))\n               {\n                  results.add(step);\n                  log.info(\"add navigation step: \" + step);\n                  count++;\n               }\n            }\n            else\n            {\n               break;\n            }\n         }\n      }\n\n      return new GetTransUnitsNavigationResult(new DocumentId(tf.getDocument().getId()), results);\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"public List<HLocale> getLanguageMemberships(String userName)\n   {\n      return personDAO.getLanguageMemberships(userName);\n   }","id":5559,"modified_method":"public List<HLocale> getLanguageMemberships(String userName)\n   {\n      return personDAO.getLanguageMembershipByUsername(userName);\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Observer(create = false, value = { \"projectAdded\", JpaIdentityStore.EVENT_USER_AUTHENTICATED })\n   synchronized public void fetchMaintainerProjects()\n   {\n      log.debug(\"refreshing projects...\");\n      if (authenticatedAccount == null)\n      {\n         maintainerProjects = Collections.emptyList();\n         return;\n      }\n\n      maintainerProjects = personDAO.getMaintainerProjects(authenticatedAccount.getUsername());\n      log.debug(\"now listing {0} projects\", maintainerProjects.size());\n   }","id":5560,"modified_method":"@Observer(create = false, value = { \"projectAdded\", JpaIdentityStore.EVENT_USER_AUTHENTICATED })\n   synchronized public void fetchMaintainerProjects()\n   {\n      log.debug(\"refreshing projects...\");\n      if (authenticatedAccount == null)\n      {\n         maintainerProjects = Collections.emptyList();\n         return;\n      }\n\n      maintainerProjects = personDAO.getMaintainerProjectByUsername(authenticatedAccount.getUsername());\n      log.debug(\"now listing {0} projects\", maintainerProjects.size());\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"public List<HLocale> getLanguageMemberships(String userName)\n   {\n      Query query = getSession().getNamedQuery(\"getLanguageMemberships\").setString(\"username\", userName);\n      List<HLocale> re = new ArrayList<HLocale>();\n      @SuppressWarnings(\"unchecked\")\n      List<HLocale> su = query.list();\n      for (HLocale lan : su)\n      {\n         if (lan.isActive())\n         {\n            re.add(lan);\n         }\n      }\n      return re;\n   }","id":5561,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HLocale> getLanguageMembershipByUsername(String userName)\n   {\n      Query query = getSession().createQuery(\"select p.tribeMemberships from HPerson as p where p.account.username = :username\");\n      query.setParameter(\"username\", userName);\n      List<HLocale> re = new ArrayList<HLocale>();\n      List<HLocale> su = query.list();\n      for (HLocale lan : su)\n      {\n         if (lan.isActive())\n         {\n            re.add(lan);\n         }\n      }\n      return re;\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProject> getMaintainerProjects(String userName)\n   {\n      Query query = getSession().getNamedQuery(\"getMaintainerProjects\").setString(\"username\", userName);\n      return query.list();\n   }","id":5562,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HProject> getMaintainerProjectByUsername(String userName)\n   {\n      Query query = getSession().createQuery(\"select p.maintainerProjects from HPerson as p where p.account.username = :username\");\n      query.setParameter(\"username\", userName);\n      return query.list();\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HPerson> getProjectMaintainers(String slug)\n   {\n      Query query = getSession().getNamedQuery(\"getProjectMaintainers\").setString(\"slug\", slug);\n      return query.list();\n   }","id":5563,"modified_method":"@SuppressWarnings(\"unchecked\")\n   public List<HPerson> getProjectMaintainerBySlug(String slug)\n   {\n      Query query = getSession().createQuery(\"select p.maintainers from HProject as p where p.slug = :slug\").setParameter(\"slug\", slug);\n      return query.list();\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"public void loadAllMaintainers()\n   {\n      allList = projectDAO.getProjectMaintainers(this.slug);\n   }","id":5564,"modified_method":"public void loadAllMaintainers()\n   {\n      allList = projectDAO.getProjectMaintainerBySlug(this.slug);\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"public List<Object[]> getSearchResult(String searchText, SearchType searchType, List<Long> translatedIds, final int maxResult) throws ParseException\n   {\n      String queryText;\n      switch (searchType)\n      {\n      case RAW:\n         queryText = searchText;\n         break;\n\n      case FUZZY:\n         // search by N-grams\n         queryText = QueryParser.escape(searchText);\n         break;\n\n      case EXACT:\n         queryText = \"\\\"\" + QueryParser.escape(searchText) + \"\\\"\";\n         break;\n\n      default:\n         throw new RuntimeException(\"Unknown query type: \" + searchType);\n      }\n\n      QueryParser parser = new QueryParser(Version.LUCENE_29, \"content\", new DefaultNgramAnalyzer());\n      org.apache.lucene.search.Query textQuery = parser.parse(queryText);\n      FullTextQuery ftQuery = entityManager.createFullTextQuery(textQuery, HTextFlow.class);\n      ftQuery.enableFullTextFilter(\"translated\").setParameter(\"translatedIds\", translatedIds);\n      ftQuery.setProjection(FullTextQuery.SCORE, FullTextQuery.THIS);\n      @SuppressWarnings(\"unchecked\")\n      List<Object[]> matches = ftQuery.setMaxResults(maxResult).getResultList();\n      return matches;\n   }","id":5565,"modified_method":"public List<Object[]> getSearchResult(String searchText, SearchType searchType, List<Long> translatedIds, final int maxResult) throws ParseException\n   {\n      String queryText;\n      switch (searchType)\n      {\n      case RAW:\n         queryText = searchText;\n         break;\n\n      case FUZZY:\n         // search by N-grams\n         queryText = QueryParser.escape(searchText);\n         break;\n\n      case EXACT:\n         queryText = \"\\\"\" + QueryParser.escape(searchText) + \"\\\"\";\n         break;\n\n      default:\n         throw new RuntimeException(\"Unknown query type: \" + searchType);\n      }\n\n      QueryParser parser = new QueryParser(Version.LUCENE_29, \"content\", new DefaultNgramAnalyzer());\n      org.apache.lucene.search.Query textQuery = parser.parse(queryText);\n      FullTextQuery ftQuery = entityManager.createFullTextQuery(textQuery, HTextFlow.class);\n      ftQuery.enableFullTextFilter(\"textFlowFilter\").setParameter(\"translatedIds\", translatedIds);\n      ftQuery.setProjection(FullTextQuery.SCORE, FullTextQuery.THIS);\n      @SuppressWarnings(\"unchecked\")\n      List<Object[]> matches = ftQuery.setMaxResults(maxResult).getResultList();\n      return matches;\n   }","commit_id":"fe67b00bd90465e3dccc03d79a87a5a23165b943","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n   * Test SRepositoryContentAdapter is notified when a model is added to/removed from a module\n   * It's vital to get SModuleListener notified when a model is removed even as part of module un-registration sequence\n   * as otherwise we might end up with state caches\n   */\n  @Test\n  public void testContentAdapterModelAddRemove() {\n    final Project project = createProject();\n    final ContentAdapter l = new ContentAdapter();\n    final SRepositoryExt repository = (SRepositoryExt) project.getRepository();\n    attach(MPSModuleRepository.getInstance(), l);\n//    attach(project.getRepository(), l);  FIXME shall use project repository\n    final BaseMPSModuleOwner moduleOwner = new BaseMPSModuleOwner();\n    //\n    final Solution solution = new CreateSolution(repository, moduleOwner).execute();\n    // FIXME attach solution with existing model (1+), check content adapter got a chance to attach to a model and modelAdded is dispatched\n    //\n    // add model, check content adapter is notified, modelAdded is fired\n    project.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        solution.registerModel(createModel(solution.getModuleReference(), \"m1\"));\n        solution.registerModel(createModel(solution.getModuleReference(), \"m2\"));\n      }\n    });\n    l.checkModelEvents(2, 0, 0);\n    //\n    // remove model, -\"-, modelRemoved is fired\n    project.getModelAccess().runWriteAction(new Runnable() {\n      @Override\n      public void run() {\n        solution.unregisterModel((SModelBase) solution.getModels().get(0));\n      }\n    });\n    l.checkModelEvents(2, 1, 1);\n    //\n    // remove module, check modelRemoved is fired\n    new RemoveModule(repository, solution, moduleOwner).execute();\n//      l.checkModelEvents(2, 2, 2); // FIXME at the moment, removal of a module doesn't trigger events for modelRemoved\n    l.checkModelEvents(2, 1, 1);\n    closeProject();\n  }","id":5566,"modified_method":"/**\n   * Test SRepositoryContentAdapter is notified when a model is added to/removed from a module\n   * It's vital to get SModuleListener notified when a model is removed even as part of module un-registration sequence\n   * as otherwise we might end up with state caches\n   */\n  @Test\n  public void testContentAdapterModelAddRemove() {\n    final Project project = createProject();\n    final ContentAdapter l = new ContentAdapter();\n    final SRepositoryExt repository = (SRepositoryExt) project.getRepository();\n    attach(project.getRepository(), l);\n    final BaseMPSModuleOwner moduleOwner = new BaseMPSModuleOwner();\n    //\n    final Solution solution = new CreateSolution(repository, moduleOwner).execute();\n    // FIXME attach solution with existing model (1+), check content adapter got a chance to attach to a model and modelAdded is dispatched\n    //\n    // add model, check content adapter is notified, modelAdded is fired\n    project.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        solution.registerModel(createModel(solution.getModuleReference(), \"m1\"));\n        solution.registerModel(createModel(solution.getModuleReference(), \"m2\"));\n      }\n    });\n    l.checkModelEvents(2, 0, 0);\n    //\n    // remove model, -\"-, modelRemoved is fired\n    project.getModelAccess().runWriteAction(new Runnable() {\n      @Override\n      public void run() {\n        solution.unregisterModel((SModelBase) solution.getModels().get(0));\n      }\n    });\n    l.checkModelEvents(2, 1, 1);\n    //\n    // remove module, check modelRemoved is fired\n    new RemoveModule(repository, solution, moduleOwner).execute();\n//      l.checkModelEvents(2, 2, 2); // FIXME at the moment, removal of a module doesn't trigger events for modelRemoved\n    l.checkModelEvents(2, 1, 1);\n    closeProject();\n  }","commit_id":"a2b4c88ef4b0f53990e552365a5b1474e173b292","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Test SRepositoryListener is notified when a module is added to/removed from a repo\n   */\n  @Test\n  public void testModuleAddRemove() {\n    final Project project = createProject();\n    final AttachRepoListener l = new AttachRepoListener();\n    final SRepositoryExt repository = (SRepositoryExt) project.getRepository();\n    attach(MPSModuleRepository.getInstance(), l);\n//    attach(project.getRepository(), l);  FIXME shall use project repository\n    l.checkModuleEvents(0, 0, 0);\n    final BaseMPSModuleOwner moduleOwner = new BaseMPSModuleOwner();\n    //\n    final Solution solution = new CreateSolution(repository, moduleOwner).execute();\n    l.checkModuleEvents(1, 0, 0);\n    new RemoveModule(repository, solution, moduleOwner).execute();\n    l.checkModuleEvents(1, 1, 1);\n    //\n//    detach(project.getRepository(), l); FIXME shall use project repository\n    detach(MPSModuleRepository.getInstance(), l);\n    l.checkModuleEvents(1, 1, 1);\n    closeProject();\n  }","id":5567,"modified_method":"/**\n   * Test SRepositoryListener is notified when a module is added to/removed from a repo\n   */\n  @Test\n  public void testModuleAddRemove() {\n    final Project project = createProject();\n    final AttachRepoListener l = new AttachRepoListener();\n    final SRepositoryExt repository = (SRepositoryExt) project.getRepository();\n    attach(project.getRepository(), l);\n    l.checkModuleEvents(0, 0, 0);\n    final BaseMPSModuleOwner moduleOwner = new BaseMPSModuleOwner();\n    //\n    final Solution solution = new CreateSolution(repository, moduleOwner).execute();\n    l.checkModuleEvents(1, 0, 0);\n    new RemoveModule(repository, solution, moduleOwner).execute();\n    l.checkModuleEvents(1, 1, 1);\n    //\n    detach(project.getRepository(), l);\n    l.checkModuleEvents(1, 1, 1);\n    closeProject();\n  }","commit_id":"a2b4c88ef4b0f53990e552365a5b1474e173b292","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Test SRepositoryAttachListener, added globally, is notified there's a new repo.\n   * NOTE, this test shall fail once we drop global MPSModuleRepository instance\n   */\n  @Test\n  public void testGlobalAttach() {\n    final AttachRepoListener l1 = new AttachRepoListener();\n    SRepositoryRegistry.getInstance().addGlobalListener(l1);\n    l1.checkStarted(1); // MPSModuleRepository.INSTANCE\n    l1.checkStopped(0);\n    createProject();\n    l1.checkStarted(2); // global + project repo\n    l1.checkStopped(0);\n    //\n    final AttachRepoListener l2 = new AttachRepoListener();\n    SRepositoryRegistry.getInstance().addGlobalListener(l2);\n    l1.checkStarted(2);\n    l1.checkStopped(0);\n    l2.checkStarted(2); // == that of l1 starts to the date, == amount of our available repositories\n    l2.checkStopped(0);\n    SRepositoryRegistry.getInstance().removeGlobalListener(l2);\n    l1.checkStarted(2);\n    l1.checkStopped(0); // l1 is not notified on l2 removal\n    l2.checkStarted(2);\n    l2.checkStopped(2); // l2 is removed from both available repositories, global+project\n    //\n    closeProject();\n    l1.checkStarted(2);\n    l1.checkStopped(1); // project repo is gone, 1 notification\n    l2.checkStarted(2); // l2 is detached, shall not get any further notifications\n    l2.checkStopped(2);\n    SRepositoryRegistry.getInstance().removeGlobalListener(l1);\n    l1.checkStarted(2);\n    l1.checkStopped(2); // notified for global repo\n    l2.checkStarted(2); // l2 is detached, shall not get any further notifications\n    l2.checkStopped(2);\n  }","id":5568,"modified_method":"/**\n   * Test SRepositoryAttachListener, added globally, is notified there's a new repo.\n   * NOTE, this test shall fail once we drop global MPSModuleRepository instance\n   */\n  @Test\n  public void testGlobalAttach() {\n    final AttachRepoListener l1 = new AttachRepoListener();\n    SRepositoryRegistry.getInstance().addGlobalListener(l1);\n    l1.checkStarted(1); // MPSModuleRepository.INSTANCE\n    l1.checkStopped(0);\n    createProject();\n    // project repo mimics global repo now, listener is attached only once, hence we observe events of 1 repository instead of 2.\n    final int distinctRepositories = 1; // FIXME =2 once ProjectRepository is distinct from global (or there's no global?)\n//    l1.checkStarted(2); // global + project repo\n    l1.checkStarted(distinctRepositories);\n    l1.checkStopped(0);\n    //\n    final AttachRepoListener l2 = new AttachRepoListener();\n    SRepositoryRegistry.getInstance().addGlobalListener(l2);\n    l1.checkStarted(distinctRepositories);\n    l1.checkStopped(0);\n    l2.checkStarted(distinctRepositories); // == that of l1 starts to the date, == amount of our available repositories\n    l2.checkStopped(0);\n    SRepositoryRegistry.getInstance().removeGlobalListener(l2);\n    l1.checkStarted(distinctRepositories);\n    l1.checkStopped(0); // l1 is not notified on l2 removal\n    l2.checkStarted(distinctRepositories);\n    l2.checkStopped(distinctRepositories); // l2 is removed from both available repositories, global+project\n    //\n    closeProject();\n    l1.checkStarted(distinctRepositories);\n    l1.checkStopped(distinctRepositories-1); // project repo is gone, 1 notification\n    l2.checkStarted(distinctRepositories); // l2 is detached, shall not get any further notifications\n    l2.checkStopped(distinctRepositories); // --\"--\n    SRepositoryRegistry.getInstance().removeGlobalListener(l1);\n    l1.checkStarted(distinctRepositories);\n    l1.checkStopped(distinctRepositories); // notified for global repo\n    l2.checkStarted(distinctRepositories); // l2 is detached, shall not get any further notifications\n    l2.checkStopped(distinctRepositories); // --\"--\n  }","commit_id":"a2b4c88ef4b0f53990e552365a5b1474e173b292","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\titr2 = portletElement.elements(\"workflow-handler\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement workflowHandlerClassEl = itr2.next();\n\n\t\t\tworkflowHandlerClasses.add(\n\t\t\t\tworkflowHandlerClassEl.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(\n\t\t\tGetterUtil.getInteger(\n\t\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\tfor (Element headerPortalCssElement :\n\t\t\t\tportletElement.elements(\"header-portal-css\")) {\n\n\t\t\theaderPortalCssList.add(headerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList = portletModel.getHeaderPortletCss();\n\n\t\tfor (Element headerPortletCssElement :\n\t\t\t\tportletElement.elements(\"header-portlet-css\")) {\n\n\t\t\theaderPortletCssList.add(headerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptElement = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tfor (Element headerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"header-portlet-javascript\")) {\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList = portletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList = portletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","id":5569,"modified_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\tfor (Element workflowHandlerClassElement :\n\t\t\t\tportletElement.elements(\"workflow-handler\")) {\n\n\t\t\tworkflowHandlerClasses.add(workflowHandlerClassElement.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(\n\t\t\tGetterUtil.getInteger(\n\t\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\tfor (Element headerPortalCssElement :\n\t\t\t\tportletElement.elements(\"header-portal-css\")) {\n\n\t\t\theaderPortalCssList.add(headerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList = portletModel.getHeaderPortletCss();\n\n\t\tfor (Element headerPortletCssElement :\n\t\t\t\tportletElement.elements(\"header-portlet-css\")) {\n\n\t\t\theaderPortletCssList.add(headerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptElement = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tfor (Element headerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"header-portlet-javascript\")) {\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList = portletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList = portletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","commit_id":"fe0a311be4806bae6e158455d736188380684d41","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(\n\t\t\tGetterUtil.getDouble(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\tfor (Element workflowHandlerClassElement :\n\t\t\t\tportletElement.elements(\"workflow-handler\")) {\n\n\t\t\tworkflowHandlerClasses.add(workflowHandlerClassElement.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(\n\t\t\tGetterUtil.getInteger(\n\t\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\tfor (Element headerPortalCssElement :\n\t\t\t\tportletElement.elements(\"header-portal-css\")) {\n\n\t\t\theaderPortalCssList.add(headerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList = portletModel.getHeaderPortletCss();\n\n\t\tfor (Element headerPortletCssElement :\n\t\t\t\tportletElement.elements(\"header-portlet-css\")) {\n\n\t\t\theaderPortletCssList.add(headerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptElement = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tfor (Element headerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"header-portlet-javascript\")) {\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList = portletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList = portletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","id":5570,"modified_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(\n\t\t\tGetterUtil.getDouble(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\tfor (Element assetRendererFactoryClassElement : \n\t\t\t\tportletElement.elements(\"asset-renderer-factory\")) {\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassElement.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\tfor (Element customAttributesDisplayClassElement :\n\t\t\t\tportletElement.elements(\"custom-attributes-display\")) {\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassElement.getText());\n\t\t}\n\n\t\tif (customAttributesDisplayClasses.isEmpty()) {\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\tfor (Element workflowHandlerClassElement :\n\t\t\t\tportletElement.elements(\"workflow-handler\")) {\n\n\t\t\tworkflowHandlerClasses.add(workflowHandlerClassElement.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(\n\t\t\tGetterUtil.getInteger(\n\t\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\tfor (Element headerPortalCssElement :\n\t\t\t\tportletElement.elements(\"header-portal-css\")) {\n\n\t\t\theaderPortalCssList.add(headerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList = portletModel.getHeaderPortletCss();\n\n\t\tfor (Element headerPortletCssElement :\n\t\t\t\tportletElement.elements(\"header-portlet-css\")) {\n\n\t\t\theaderPortletCssList.add(headerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptElement = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tfor (Element headerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"header-portlet-javascript\")) {\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList = portletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList = portletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","commit_id":"22c093a0a8429a43771f6c03089a64cb3b5a7bdd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer \" +\n\t\t\t\t\t\"supported. Use configuration-action-class \" +\n\t\t\t\t\t\t\"instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\titr2 = portletElement.elements(\"workflow-handler\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement workflowHandlerClassEl = itr2.next();\n\n\t\t\tworkflowHandlerClasses.add(\n\t\t\t\tworkflowHandlerClassEl.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(GetterUtil.getInteger(\n\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\titr2 = portletElement.elements(\"header-portal-css\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalCssEl = itr2.next();\n\n\t\t\theaderPortalCssList.add(headerPortalCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList =\n\t\t\tportletModel.getHeaderPortletCss();\n\n\t\tList<Element> list = new ArrayList<Element>();\n\n\t\tlist.addAll(portletElement.elements(\"header-css\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-css\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletCssEl = itr2.next();\n\n\t\t\theaderPortletCssList.add(headerPortletCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptEl = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tlist.clear();\n\n\t\tlist.addAll(portletElement.elements(\"header-javascript\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-javascript\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletJavaScriptEl = itr2.next();\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList =\n\t\t\tportletModel.getFooterPortalCss();\n\n\t\titr2 = portletElement.elements(\"footer-portal-css\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement footerPortalCssEl = itr2.next();\n\n\t\t\tfooterPortalCssList.add(footerPortalCssEl.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList =\n\t\t\tportletModel.getFooterPortletCss();\n\n\t\titr2 = portletElement.elements(\"footer-portlet-css\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement footerPortletCssEl = itr2.next();\n\n\t\t\tfooterPortletCssList.add(footerPortletCssEl.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"footer-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement footerPortalJavaScriptEl = itr2.next();\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\titr2 = portletElement.elements(\"footer-portlet-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement footerPortletJavaScriptEl = itr2.next();\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptEl.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","id":5571,"modified_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\titr2 = portletElement.elements(\"workflow-handler\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement workflowHandlerClassEl = itr2.next();\n\n\t\t\tworkflowHandlerClasses.add(\n\t\t\t\tworkflowHandlerClassEl.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(GetterUtil.getInteger(\n\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\titr2 = portletElement.elements(\"header-portal-css\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalCssEl = itr2.next();\n\n\t\t\theaderPortalCssList.add(headerPortalCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList =\n\t\t\tportletModel.getHeaderPortletCss();\n\n\t\tList<Element> list = new ArrayList<Element>();\n\n\t\tlist.addAll(portletElement.elements(\"header-css\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-css\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletCssEl = itr2.next();\n\n\t\t\theaderPortletCssList.add(headerPortletCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptEl = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tlist.clear();\n\n\t\tlist.addAll(portletElement.elements(\"header-javascript\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-javascript\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletJavaScriptEl = itr2.next();\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList =\n\t\t\tportletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList =\n\t\t\tportletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","commit_id":"274c13288c3c0051ad30ec1438435274f91e40a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\titr2 = portletElement.elements(\"workflow-handler\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement workflowHandlerClassEl = itr2.next();\n\n\t\t\tworkflowHandlerClasses.add(\n\t\t\t\tworkflowHandlerClassEl.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(GetterUtil.getInteger(\n\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\titr2 = portletElement.elements(\"header-portal-css\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalCssEl = itr2.next();\n\n\t\t\theaderPortalCssList.add(headerPortalCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList =\n\t\t\tportletModel.getHeaderPortletCss();\n\n\t\tList<Element> list = new ArrayList<Element>();\n\n\t\tlist.addAll(portletElement.elements(\"header-css\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-css\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletCssEl = itr2.next();\n\n\t\t\theaderPortletCssList.add(headerPortletCssEl.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptEl = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tlist.clear();\n\n\t\tlist.addAll(portletElement.elements(\"header-javascript\"));\n\t\tlist.addAll(portletElement.elements(\"header-portlet-javascript\"));\n\n\t\titr2 = list.iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortletJavaScriptEl = itr2.next();\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptEl.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList =\n\t\t\tportletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList =\n\t\t\tportletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","id":5572,"modified_method":"private void _readLiferayPortletXML(\n\t\tString servletContextName, Map<String, Portlet> portletsPool,\n\t\tSet<String> liferayPortletIds, Map<String, String> roleMappers,\n\t\tElement portletElement) {\n\n\t\tString portletId = portletElement.elementText(\"portlet-name\");\n\n\t\tif (Validator.isNotNull(servletContextName)) {\n\t\t\tportletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(\n\t\t\t\tservletContextName);\n\t\t}\n\n\t\tportletId = PortalUtil.getJsSafePortletId(portletId);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Reading portlet extension \" + portletId);\n\t\t}\n\n\t\tliferayPortletIds.add(portletId);\n\n\t\tPortlet portletModel = portletsPool.get(portletId);\n\n\t\tif (portletModel == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tportletModel.setIcon(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"icon\"), portletModel.getIcon()));\n\t\tportletModel.setVirtualPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"virtual-path\"),\n\t\t\t\tportletModel.getVirtualPath()));\n\t\tportletModel.setStrutsPath(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"struts-path\"),\n\t\t\t\tportletModel.getStrutsPath()));\n\n\t\tif (Validator.isNotNull(\n\t\t\t\tportletElement.elementText(\"configuration-path\"))) {\n\n\t\t\t_log.error(\n\t\t\t\t\"The configuration-path element is no longer supported. Use \" +\n\t\t\t\t\t\"configuration-action-class instead.\");\n\t\t}\n\n\t\tportletModel.setConfigurationActionClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"configuration-action-class\"),\n\t\t\t\tportletModel.getConfigurationActionClass()));\n\t\tportletModel.setIndexerClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"indexer-class\"),\n\t\t\t\tportletModel.getIndexerClass()));\n\t\tportletModel.setOpenSearchClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"open-search-class\"),\n\t\t\t\tportletModel.getOpenSearchClass()));\n\n\t\tIterator<Element> itr2 = portletElement.elementIterator(\n\t\t\t\"scheduler-entry\");\n\n\t\twhile (itr2.hasNext()){\n\t\t\tElement schedulerEntryEl = itr2.next();\n\n\t\t\tSchedulerEntry schedulerEntry = new SchedulerEntryImpl();\n\n\t\t\tString schedulerDescription = schedulerEntryEl.elementText(\n\t\t\t\t\"scheduler-description\");\n\n\t\t\tschedulerEntry.setDescription(GetterUtil.getString(\n\t\t\t\tschedulerDescription));\n\t\t\tschedulerEntry.setEventListenerClass(GetterUtil.getString(\n\t\t\t\tschedulerEntryEl.elementText(\n\t\t\t\t\t\"scheduler-event-listener-class\"),\n\t\t\t\tschedulerEntry.getEventListenerClass()));\n\n\t\t\tElement triggerEl = schedulerEntryEl.element(\"trigger\");\n\n\t\t\tElement cronEl = triggerEl.element(\"cron\");\n\t\t\tElement simpleEl = triggerEl.element(\"simple\");\n\n\t\t\tif (cronEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.CRON);\n\n\t\t\t\tElement propertyKeyEl = cronEl.element(\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tcronEl.elementText(\"cron-trigger-value\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (simpleEl != null) {\n\t\t\t\tschedulerEntry.setTriggerType(TriggerType.SIMPLE);\n\n\t\t\t\tElement propertyKeyEl = simpleEl.element(\n\t\t\t\t\t\"property-key\");\n\n\t\t\t\tif (propertyKeyEl != null) {\n\t\t\t\t\tschedulerEntry.setPropertyKey(\n\t\t\t\t\t\tpropertyKeyEl.getTextTrim());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tElement simpleTriggerValueEl = simpleEl.element(\n\t\t\t\t\t\t\"simple-trigger-value\");\n\n\t\t\t\t\tschedulerEntry.setTriggerValue(\n\t\t\t\t\t\tsimpleTriggerValueEl.getTextTrim());\n\t\t\t\t}\n\n\t\t\t\tString timeUnit = GetterUtil.getString(\n\t\t\t\t\tsimpleEl.elementText(\"time-unit\"),\n\t\t\t\t\tTimeUnit.SECOND.getValue());\n\n\t\t\t\tschedulerEntry.setTimeUnit(\n\t\t\t\t\tTimeUnit.parse(timeUnit.toLowerCase()));\n\t\t\t}\n\n\t\t\tportletModel.addSchedulerEntry(schedulerEntry);\n\t\t}\n\n\t\tportletModel.setPortletURLClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-url-class\"),\n\t\t\tportletModel.getPortletURLClass()));\n\n\t\tportletModel.setFriendlyURLMapperClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"friendly-url-mapper-class\"),\n\t\t\tportletModel.getFriendlyURLMapperClass()));\n\n\t\tif (Validator.isNull(\n\t\t\t\tportletModel.getFriendlyURLMapperClass())) {\n\n\t\t\t_friendlyURLMapperPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_friendlyURLMapperPortlets.put(portletId, portletModel);\n\t\t}\n\n\t\tsetFriendlyURLRoutes(portletModel, portletElement);\n\n\t\tportletModel.setURLEncoderClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"url-encoder-class\"),\n\t\t\tportletModel.getURLEncoderClass()));\n\t\tportletModel.setPortletDataHandlerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-data-handler-class\"),\n\t\t\tportletModel.getPortletDataHandlerClass()));\n\t\tportletModel.setPortletLayoutListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"portlet-layout-listener-class\"),\n\t\t\tportletModel.getPortletLayoutListenerClass()));\n\t\tportletModel.setPollerProcessorClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"poller-processor-class\"),\n\t\t\tportletModel.getPollerProcessorClass()));\n\t\tportletModel.setPopMessageListenerClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"pop-message-listener-class\"),\n\t\t\tportletModel.getPopMessageListenerClass()));\n\t\tportletModel.setSocialActivityInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-activity-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialActivityInterpreterClass()));\n\t\tportletModel.setSocialRequestInterpreterClass(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\n\t\t\t\t\t\"social-request-interpreter-class\"),\n\t\t\t\t\tportletModel.getSocialRequestInterpreterClass()));\n\t\tportletModel.setWebDAVStorageToken(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-token\"),\n\t\t\tportletModel.getWebDAVStorageToken()));\n\t\tportletModel.setWebDAVStorageClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"webdav-storage-class\"),\n\t\t\tportletModel.getWebDAVStorageClass()));\n\t\tportletModel.setXmlRpcMethodClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"xml-rpc-method-class\"),\n\t\t\tportletModel.getXmlRpcMethodClass()));\n\t\tportletModel.setControlPanelEntryCategory(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-category\"),\n\t\t\tportletModel.getControlPanelEntryCategory()));\n\t\tportletModel.setControlPanelEntryWeight(GetterUtil.getDouble(\n\t\t\tportletElement.elementText(\"control-panel-entry-weight\"),\n\t\t\tportletModel.getControlPanelEntryWeight()));\n\t\tportletModel.setControlPanelEntryClass(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"control-panel-entry-class\"),\n\t\t\tportletModel.getControlPanelEntryClass()));\n\n\t\tList<String> assetRendererFactoryClasses =\n\t\t\tportletModel.getAssetRendererFactoryClasses();\n\n\t\titr2 = portletElement.elements(\"asset-renderer-factory\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement assetRendererFactoryClassEl = itr2.next();\n\n\t\t\tassetRendererFactoryClasses.add(\n\t\t\t\tassetRendererFactoryClassEl.getText());\n\t\t}\n\n\t\tList<String> customAttributesDisplayClasses =\n\t\t\tportletModel.getCustomAttributesDisplayClasses();\n\n\t\titr2 = portletElement.elements(\"custom-attributes-display\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement customAttributesDisplayClassEl = itr2.next();\n\n\t\t\tcustomAttributesDisplayClasses.add(\n\t\t\t\tcustomAttributesDisplayClassEl.getText());\n\t\t}\n\n\t\tif (portletModel.getCustomAttributesDisplayClasses().\n\t\t\tisEmpty()) {\n\n\t\t\t_customAttributesDisplayPortlets.remove(portletId);\n\t\t}\n\t\telse {\n\t\t\t_customAttributesDisplayPortlets.put(\n\t\t\t\tportletId, portletModel);\n\t\t}\n\n\t\tList<String> workflowHandlerClasses =\n\t\t\tportletModel.getWorkflowHandlerClasses();\n\n\t\titr2 = portletElement.elements(\"workflow-handler\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement workflowHandlerClassEl = itr2.next();\n\n\t\t\tworkflowHandlerClasses.add(\n\t\t\t\tworkflowHandlerClassEl.getText());\n\t\t}\n\n\t\tportletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-company-wide\"),\n\t\t\tportletModel.isPreferencesCompanyWide()));\n\t\tportletModel.setPreferencesUniquePerLayout(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"preferences-unique-per-layout\"),\n\t\t\t\tportletModel.isPreferencesUniquePerLayout()));\n\t\tportletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"preferences-owned-by-group\"),\n\t\t\tportletModel.isPreferencesOwnedByGroup()));\n\t\tportletModel.setUseDefaultTemplate(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"use-default-template\"),\n\t\t\tportletModel.isUseDefaultTemplate()));\n\t\tportletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-access-denied\"),\n\t\t\tportletModel.isShowPortletAccessDenied()));\n\t\tportletModel.setShowPortletInactive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"show-portlet-inactive\"),\n\t\t\tportletModel.isShowPortletInactive()));\n\t\tportletModel.setActionURLRedirect(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"action-url-redirect\"),\n\t\t\tportletModel.isActionURLRedirect()));\n\t\tportletModel.setRestoreCurrentView(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"restore-current-view\"),\n\t\t\tportletModel.isRestoreCurrentView()));\n\t\tportletModel.setMaximizeEdit(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-edit\"),\n\t\t\tportletModel.isMaximizeEdit()));\n\t\tportletModel.setMaximizeHelp(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"maximize-help\"),\n\t\t\tportletModel.isMaximizeHelp()));\n\t\tportletModel.setPopUpPrint(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"pop-up-print\"),\n\t\t\tportletModel.isPopUpPrint()));\n\t\tportletModel.setLayoutCacheable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"layout-cacheable\"),\n\t\t\tportletModel.isLayoutCacheable()));\n\t\tportletModel.setInstanceable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"instanceable\"),\n\t\t\tportletModel.isInstanceable()));\n\t\tportletModel.setScopeable(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"scopeable\"),\n\t\t\tportletModel.isScopeable()));\n\t\tportletModel.setUserPrincipalStrategy(\n\t\t\tGetterUtil.getString(\n\t\t\t\tportletElement.elementText(\"user-principal-strategy\"),\n\t\t\t\tportletModel.getUserPrincipalStrategy()));\n\t\tportletModel.setPrivateRequestAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-request-attributes\"),\n\t\t\t\tportletModel.isPrivateRequestAttributes()));\n\t\tportletModel.setPrivateSessionAttributes(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"private-session-attributes\"),\n\t\t\t\tportletModel.isPrivateSessionAttributes()));\n\t\tportletModel.setRenderWeight(\n\t\t\tGetterUtil.getInteger(\n\t\t\t\tportletElement.elementText(\"render-weight\"),\n\t\t\t\tportletModel.getRenderWeight()));\n\t\tportletModel.setAjaxable(\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tportletElement.elementText(\"ajaxable\"),\n\t\t\t\tportletModel.isAjaxable()));\n\n\t\tList<String> headerPortalCssList =\n\t\t\tportletModel.getHeaderPortalCss();\n\n\t\tfor (Element headerPortalCssElement :\n\t\t\t\tportletElement.elements(\"header-portal-css\")) {\n\n\t\t\theaderPortalCssList.add(headerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletCssList = portletModel.getHeaderPortletCss();\n\n\t\tfor (Element headerPortletCssElement :\n\t\t\t\tportletElement.elements(\"header-portlet-css\")) {\n\n\t\t\theaderPortletCssList.add(headerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> headerPortalJavaScriptList =\n\t\t\tportletModel.getHeaderPortalJavaScript();\n\n\t\titr2 = portletElement.elements(\"header-portal-javascript\").iterator();\n\n\t\twhile (itr2.hasNext()) {\n\t\t\tElement headerPortalJavaScriptElement = itr2.next();\n\n\t\t\theaderPortalJavaScriptList.add(\n\t\t\t\theaderPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> headerPortletJavaScriptList =\n\t\t\tportletModel.getHeaderPortletJavaScript();\n\n\t\tfor (Element headerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"header-portlet-javascript\")) {\n\n\t\t\theaderPortletJavaScriptList.add(\n\t\t\t\theaderPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalCssList = portletModel.getFooterPortalCss();\n\n\t\tfor (Element footerPortalCssElement :\n\t\t\t\tportletElement.elements(\"footer-portal-css\")) {\n\n\t\t\tfooterPortalCssList.add(footerPortalCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletCssList = portletModel.getFooterPortletCss();\n\n\t\tfor (Element footerPortletCssElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-css\")) {\n\n\t\t\tfooterPortletCssList.add(footerPortletCssElement.getText());\n\t\t}\n\n\t\tList<String> footerPortalJavaScriptList =\n\t\t\tportletModel.getFooterPortalJavaScript();\n\n\t\tfor (Element footerPortalJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portal-javascript\")) {\n\n\t\t\tfooterPortalJavaScriptList.add(\n\t\t\t\tfooterPortalJavaScriptElement.getText());\n\t\t}\n\n\t\tList<String> footerPortletJavaScriptList =\n\t\t\tportletModel.getFooterPortletJavaScript();\n\n\t\tfor (Element footerPortletJavaScriptElement :\n\t\t\t\tportletElement.elements(\"footer-portlet-javascript\")) {\n\n\t\t\tfooterPortletJavaScriptList.add(\n\t\t\t\tfooterPortletJavaScriptElement.getText());\n\t\t}\n\n\t\tportletModel.setCssClassWrapper(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"css-class-wrapper\"),\n\t\t\tportletModel.getCssClassWrapper()));\n\t\tportletModel.setFacebookIntegration(GetterUtil.getString(\n\t\t\tportletElement.elementText(\"facebook-integration\"),\n\t\t\tportletModel.getFacebookIntegration()));\n\t\tportletModel.setAddDefaultResource(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"add-default-resource\"),\n\t\t\tportletModel.isAddDefaultResource()));\n\t\tportletModel.setSystem(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"system\"),\n\t\t\tportletModel.isSystem()));\n\t\tportletModel.setActive(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"active\"),\n\t\t\tportletModel.isActive()));\n\t\tportletModel.setInclude(GetterUtil.getBoolean(\n\t\t\tportletElement.elementText(\"include\"),\n\t\t\tportletModel.isInclude()));\n\n\t\tif (!portletModel.isAjaxable() &&\n\t\t\t(portletModel.getRenderWeight() < 1)) {\n\n\t\t\tportletModel.setRenderWeight(1);\n\t\t}\n\n\t\tportletModel.getRoleMappers().putAll(roleMappers);\n\t\tportletModel.linkRoles();\n\t}","commit_id":"fb46de5c050fbd64e24e49a6e00c1599069e3455","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Component getListCellRendererComponent(JList list, Object value,\n            int index, boolean isSelected, boolean cellHasFocus)\n        {\n            LocaleItem lm = (LocaleItem)value;\n            labels[0].setText(lm.locale.getDisplayLanguage());\n            labels[1].setText(lm.locale.getDisplayLanguage(lm.locale));\n            labels[2].setText(Resources.getString(\n                \"plugin.generalconfig.DEFAULT_LANGUAGE_TRANSLATED\",\n                new String[]{\n                    Integer.toString(lm.translated)\n                }));\n            this.setBackground(isSelected\n                ? list.getSelectionBackground()\n                : list.getBackground());\n\n            return this;\n        }","id":5573,"modified_method":"public Component getListCellRendererComponent(JList list, Object value,\n            int index, boolean isSelected, boolean cellHasFocus)\n        {\n            LocaleItem lm = (LocaleItem)value;\n            if (value != null)\n            {\n                labels[0].setText(lm.locale.getDisplayLanguage());\n                labels[1].setText(lm.locale.getDisplayLanguage(lm.locale));\n                labels[2].setText(Resources.getString(\n                    \"plugin.generalconfig.DEFAULT_LANGUAGE_TRANSLATED\",\n                    new String[]{\n                        Integer.toString(lm.translated)\n                    }));\n            }\n            else\n            {\n                labels[0].setText(\"\");\n                labels[1].setText(\"\");\n                labels[2].setText(\"\");\n            }\n\n            this.setBackground(isSelected\n                ? list.getSelectionBackground()\n                : list.getBackground());\n\n            return this;\n        }","commit_id":"ecd508088e650093a7abe837e6f7223448f52b7c","url":"https://github.com/jitsi/jitsi"},{"original_method":"public SimpleWorkflowMessage respondDecisionTaskCompleted( final RespondDecisionTaskCompletedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber(), request.getTaskToken() );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                // verify token is valid\n                final List<WorkflowHistoryEvent> events = workflowExecution.getWorkflowHistory();\n                final List<WorkflowHistoryEvent> reverseEvents = Lists.reverse( events );\n                final WorkflowHistoryEvent started = Iterables.find(\n                    reverseEvents,\n                    CollectionUtils.propertyPredicate( \"DecisionTaskStarted\", EVENT_TYPE ) );\n                if ( !started.getEventId( ).equals( token.getStartedEventId( ) ) ) {\n                  throw Exceptions.toUndeclared( new SimpleWorkflowClientException( \"ValidationError\", \"Bad token\" ) );\n                }\n                final WorkflowHistoryEvent scheduled = Iterables.find(\n                    reverseEvents,\n                    CollectionUtils.propertyPredicate( \"DecisionTaskScheduled\", EVENT_TYPE ) );\n                if ( scheduled.getEventId( ) < started.getEventId() ) {\n                  workflowExecution.setDecisionStatus( Idle );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                } else {\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n\n                // process decision task response\n                workflowExecution.setLatestExecutionContext( request.getExecutionContext( ) );\n                final Long completedId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskCompletedEventAttributes( )\n                        .withExecutionContext( request.getExecutionContext( ) )\n                        .withScheduledEventId( token.getScheduledEventId( ) )\n                        .withStartedEventId( token.getStartedEventId( ) )\n                ) );\n                boolean scheduleDecisionTask = false;\n                if ( request.getDecisions( ) != null ) for ( final Decision decision : request.getDecisions() ) {\n                  switch ( decision.getDecisionType( ) ) {\n                    case \"CancelTimer\":\n                      final CancelTimerDecisionAttributes cancelTimer = decision.getCancelTimerDecisionAttributes( );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new CancelTimerFailedEventAttributes()\n                              .withCause( CancelTimerFailedCause.TIMER_ID_UNKNOWN )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withTimerId( cancelTimer.getTimerId( ) )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"CancelWorkflowExecution\":\n                      final CancelWorkflowExecutionDecisionAttributes cancelWorkflowExecution =\n                          decision.getCancelWorkflowExecutionDecisionAttributes();\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Canceled );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionCanceledEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withDetails( cancelWorkflowExecution.getDetails() )\n                      ) );\n                      deleteActivities( activityTasks, accountFullName, workflowExecution );\n                      break;\n                    case \"CompleteWorkflowExecution\":\n                      final CompleteWorkflowExecutionDecisionAttributes completed =\n                          decision.getCompleteWorkflowExecutionDecisionAttributes( );\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Completed );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionCompletedEventAttributes( )\n                            .withDecisionTaskCompletedEventId( completedId )\n                            .withResult( completed.getResult( ) )\n                      ) );\n                      break;\n                    case \"ContinueAsNewWorkflowExecution\":\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new ContinueAsNewWorkflowExecutionFailedEventAttributes()\n                              .withCause( ContinueAsNewWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED )\n                              .withDecisionTaskCompletedEventId( completedId )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"FailWorkflowExecution\":\n                      final FailWorkflowExecutionDecisionAttributes failed =\n                          decision.getFailWorkflowExecutionDecisionAttributes();\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Failed );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionFailedEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withDetails( failed.getDetails( ) )\n                              .withReason( failed.getReason( ) ) ) );\n                      deleteActivities( activityTasks, accountFullName, workflowExecution );\n                      break;\n                    case \"RecordMarker\":\n                      final RecordMarkerDecisionAttributes mark = decision.getRecordMarkerDecisionAttributes( );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new MarkerRecordedEventAttributes( )\n                              .withDetails( mark.getDetails( ) )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withMarkerName( mark.getMarkerName( ) )\n                      ) );\n                      break;\n                    case \"RequestCancelActivityTask\":\n                      final RequestCancelActivityTaskDecisionAttributes cancelActivity =\n                          decision.getRequestCancelActivityTaskDecisionAttributes();\n                      try {\n                        activityTasks.updateByExample(\n                            ActivityTask.exampleWithActivityId(\n                                accountFullName,\n                                workflowExecution.getDomainName( ),\n                                workflowExecution.getDisplayName( ),\n                                cancelActivity.getActivityId( ) ),\n                            accountFullName,\n                            cancelActivity.getActivityId( ),\n                            new Function<ActivityTask, Void>() {\n                              @Override\n                              public Void apply( final ActivityTask activityTask ) {\n                                final Long cancelRequestedId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                                    workflowExecution,\n                                    new ActivityTaskCancelRequestedEventAttributes()\n                                        .withDecisionTaskCompletedEventId( completedId )\n                                        .withActivityId( cancelActivity.getActivityId() )\n                                ) );\n\n                                if ( activityTask.getState( ) == ActivityTask.State.Active ) {\n                                  activityTask.setCancelRequestedEventId( cancelRequestedId );\n                                } else {\n                                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                                      workflowExecution,\n                                      new ActivityTaskCanceledEventAttributes()\n                                          .withLatestCancelRequestedEventId( cancelRequestedId )\n                                          .withScheduledEventId( activityTask.getScheduledEventId() )\n                                          .withStartedEventId( activityTask.getStartedEventId() )\n                                  ) );\n                                  Entities.delete( activityTask );\n                                }\n                                return null;\n                              }\n                            }\n                        );\n                      } catch ( SwfMetadataNotFoundException e ) {\n                        workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                            workflowExecution,\n                            new RequestCancelActivityTaskFailedEventAttributes( )\n                                .withCause( RequestCancelActivityTaskFailedCause.ACTIVITY_ID_UNKNOWN )\n                                .withDecisionTaskCompletedEventId( completedId )\n                                .withActivityId( cancelActivity.getActivityId( ) )\n                        ) );\n                      } catch ( SwfMetadataException e ) {\n                        throw Exceptions.toUndeclared( e );\n                      }\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"RequestCancelExternalWorkflowExecution\":\n                      final RequestCancelExternalWorkflowExecutionDecisionAttributes cancelExternalWorkflow =\n                          decision.getRequestCancelExternalWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new RequestCancelExternalWorkflowExecutionFailedEventAttributes()\n                              .withCause( RequestCancelExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION )\n                              .withControl( cancelExternalWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withRunId( cancelExternalWorkflow.getRunId() )\n                              .withWorkflowId( cancelExternalWorkflow.getWorkflowId() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"ScheduleActivityTask\":\n                      workflowExecution.setLatestActivityTaskScheduled( new Date( ) );\n                      final ScheduleActivityTaskDecisionAttributes scheduleActivity =\n                          decision.getScheduleActivityTaskDecisionAttributes();\n                      final Long scheduledId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new ActivityTaskScheduledEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withActivityId( scheduleActivity.getActivityId( ) )\n                              .withActivityType( scheduleActivity.getActivityType( ) )\n                              .withControl( scheduleActivity.getControl( ) )\n                              .withHeartbeatTimeout( scheduleActivity.getHeartbeatTimeout( ) )\n                              .withInput( scheduleActivity.getInput( ) )\n                              .withScheduleToCloseTimeout( scheduleActivity.getScheduleToCloseTimeout( ) )\n                              .withScheduleToStartTimeout( scheduleActivity.getScheduleToStartTimeout( ) )\n                              .withStartToCloseTimeout( scheduleActivity.getStartToCloseTimeout( ) )\n                              .withTaskList( scheduleActivity.getTaskList( ) )\n                      ) );\n                      try {\n                        final ActivityType activityType = activityTypes.lookupByExample(\n                            ActivityType.exampleWithUniqueName(\n                                accountFullName,\n                                domain.getDisplayName( ),\n                                scheduleActivity.getActivityType( ).getName( ),\n                                scheduleActivity.getActivityType( ).getVersion( ) ),\n                            accountFullName,\n                            scheduleActivity.getActivityType( ).getName( ),\n                            Predicates.alwaysTrue( ),\n                            Functions.<ActivityType>identity( ) );\n\n                        activityTasks.save( com.eucalyptus.simpleworkflow.ActivityTask.create(\n                            userFullName,\n                            workflowExecution,\n                            domain.getDisplayName(),\n                            scheduleActivity.getActivityId(),\n                            scheduleActivity.getActivityType().getName(),\n                            scheduleActivity.getActivityType().getVersion(),\n                            scheduleActivity.getInput(),\n                            scheduledId,\n                            scheduleActivity.getTaskList() == null ?\n                                activityType.getDefaultTaskList() :\n                                scheduleActivity.getTaskList().getName(),\n                            parsePeriod( scheduleActivity.getScheduleToCloseTimeout( ), activityType.getDefaultTaskScheduleToCloseTimeout( ) ),\n                            parsePeriod( scheduleActivity.getScheduleToStartTimeout( ), activityType.getDefaultTaskScheduleToStartTimeout( ) ),\n                            parsePeriod( scheduleActivity.getStartToCloseTimeout( ), activityType.getDefaultTaskStartToCloseTimeout( ) ),\n                            parsePeriod( scheduleActivity.getHeartbeatTimeout( ), activityType.getDefaultTaskHeartbeatTimeout( ) )\n                        ) );\n                      } catch ( Exception e ) {\n                        throw Exceptions.toUndeclared( e );\n                      }\n                      break;\n                    case \"SignalExternalWorkflowExecution\":\n                      final SignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflow =\n                          decision.getSignalExternalWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new SignalExternalWorkflowExecutionFailedEventAttributes( )\n                              .withCause( SignalExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION )\n                              .withControl( signalExternalWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withRunId( signalExternalWorkflow.getRunId( ) )\n                              .withWorkflowId( signalExternalWorkflow.getWorkflowId( ) )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"StartChildWorkflowExecution\":\n                      final StartChildWorkflowExecutionDecisionAttributes startChildWorkflow =\n                          decision.getStartChildWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new StartChildWorkflowExecutionFailedEventAttributes()\n                              .withCause( StartChildWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED )\n                              .withControl( startChildWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withWorkflowId( startChildWorkflow.getWorkflowId() )\n                              .withWorkflowType( startChildWorkflow.getWorkflowType() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"StartTimer\":\n                      final StartTimerDecisionAttributes startTimer = decision.getStartTimerDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new StartTimerFailedEventAttributes()\n                              .withCause( StartTimerFailedCause.OPERATION_NOT_PERMITTED )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withTimerId( startTimer.getTimerId() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    default:\n                      throw Exceptions.toUndeclared( new SimpleWorkflowException(\n                          \"InternalFailure\",\n                          Role.Receiver,\n                          \"Unsupported decision type: \" + decision.getDecisionType( ) ) );\n                  }\n                }\n                if ( scheduleDecisionTask && workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n              }\n              return workflowExecution;\n            }\n          } );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5574,"modified_method":"public SimpleWorkflowMessage respondDecisionTaskCompleted( final RespondDecisionTaskCompletedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber(), request.getTaskToken() );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      final Set<Pair<String,String>> notificationTypeListPairs = Sets.newHashSet( );\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                // verify token is valid\n                final List<WorkflowHistoryEvent> events = workflowExecution.getWorkflowHistory();\n                final List<WorkflowHistoryEvent> reverseEvents = Lists.reverse( events );\n                final WorkflowHistoryEvent started = Iterables.find(\n                    reverseEvents,\n                    CollectionUtils.propertyPredicate( \"DecisionTaskStarted\", EVENT_TYPE ) );\n                if ( !started.getEventId( ).equals( token.getStartedEventId( ) ) ) {\n                  throw Exceptions.toUndeclared( new SimpleWorkflowClientException( \"ValidationError\", \"Bad token\" ) );\n                }\n                final WorkflowHistoryEvent scheduled = Iterables.find(\n                    reverseEvents,\n                    CollectionUtils.propertyPredicate( \"DecisionTaskScheduled\", EVENT_TYPE ) );\n                if ( scheduled.getEventId( ) < started.getEventId() ) {\n                  workflowExecution.setDecisionStatus( Idle );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                } else {\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                  notificationTypeListPairs.add( Pair.pair( \"decision\", workflowExecution.getTaskList( ) ) );\n                }\n\n                // process decision task response\n                workflowExecution.setLatestExecutionContext( request.getExecutionContext( ) );\n                final Long completedId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskCompletedEventAttributes( )\n                        .withExecutionContext( request.getExecutionContext( ) )\n                        .withScheduledEventId( token.getScheduledEventId( ) )\n                        .withStartedEventId( token.getStartedEventId( ) )\n                ) );\n                boolean scheduleDecisionTask = false;\n                if ( request.getDecisions( ) != null ) for ( final Decision decision : request.getDecisions() ) {\n                  switch ( decision.getDecisionType( ) ) {\n                    case \"CancelTimer\":\n                      final CancelTimerDecisionAttributes cancelTimer = decision.getCancelTimerDecisionAttributes( );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new CancelTimerFailedEventAttributes()\n                              .withCause( CancelTimerFailedCause.TIMER_ID_UNKNOWN )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withTimerId( cancelTimer.getTimerId( ) )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"CancelWorkflowExecution\":\n                      final CancelWorkflowExecutionDecisionAttributes cancelWorkflowExecution =\n                          decision.getCancelWorkflowExecutionDecisionAttributes();\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Canceled );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionCanceledEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withDetails( cancelWorkflowExecution.getDetails() )\n                      ) );\n                      deleteActivities( activityTasks, accountFullName, workflowExecution );\n                      break;\n                    case \"CompleteWorkflowExecution\":\n                      final CompleteWorkflowExecutionDecisionAttributes completed =\n                          decision.getCompleteWorkflowExecutionDecisionAttributes( );\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Completed );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionCompletedEventAttributes( )\n                            .withDecisionTaskCompletedEventId( completedId )\n                            .withResult( completed.getResult( ) )\n                      ) );\n                      break;\n                    case \"ContinueAsNewWorkflowExecution\":\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new ContinueAsNewWorkflowExecutionFailedEventAttributes()\n                              .withCause( ContinueAsNewWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED )\n                              .withDecisionTaskCompletedEventId( completedId )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"FailWorkflowExecution\":\n                      final FailWorkflowExecutionDecisionAttributes failed =\n                          decision.getFailWorkflowExecutionDecisionAttributes();\n                      workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                      workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Failed );\n                      workflowExecution.setCloseTimestamp( new Date( ) );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionFailedEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withDetails( failed.getDetails( ) )\n                              .withReason( failed.getReason( ) ) ) );\n                      deleteActivities( activityTasks, accountFullName, workflowExecution );\n                      break;\n                    case \"RecordMarker\":\n                      final RecordMarkerDecisionAttributes mark = decision.getRecordMarkerDecisionAttributes( );\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new MarkerRecordedEventAttributes( )\n                              .withDetails( mark.getDetails( ) )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withMarkerName( mark.getMarkerName( ) )\n                      ) );\n                      break;\n                    case \"RequestCancelActivityTask\":\n                      final RequestCancelActivityTaskDecisionAttributes cancelActivity =\n                          decision.getRequestCancelActivityTaskDecisionAttributes();\n                      try {\n                        activityTasks.updateByExample(\n                            ActivityTask.exampleWithActivityId(\n                                accountFullName,\n                                workflowExecution.getDomainName( ),\n                                workflowExecution.getDisplayName( ),\n                                cancelActivity.getActivityId( ) ),\n                            accountFullName,\n                            cancelActivity.getActivityId( ),\n                            new Function<ActivityTask, Void>() {\n                              @Override\n                              public Void apply( final ActivityTask activityTask ) {\n                                final Long cancelRequestedId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                                    workflowExecution,\n                                    new ActivityTaskCancelRequestedEventAttributes()\n                                        .withDecisionTaskCompletedEventId( completedId )\n                                        .withActivityId( cancelActivity.getActivityId() )\n                                ) );\n\n                                if ( activityTask.getState( ) == ActivityTask.State.Active ) {\n                                  activityTask.setCancelRequestedEventId( cancelRequestedId );\n                                } else {\n                                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                                      workflowExecution,\n                                      new ActivityTaskCanceledEventAttributes()\n                                          .withLatestCancelRequestedEventId( cancelRequestedId )\n                                          .withScheduledEventId( activityTask.getScheduledEventId() )\n                                          .withStartedEventId( activityTask.getStartedEventId() )\n                                  ) );\n                                  Entities.delete( activityTask );\n                                }\n                                return null;\n                              }\n                            }\n                        );\n                      } catch ( SwfMetadataNotFoundException e ) {\n                        workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                            workflowExecution,\n                            new RequestCancelActivityTaskFailedEventAttributes( )\n                                .withCause( RequestCancelActivityTaskFailedCause.ACTIVITY_ID_UNKNOWN )\n                                .withDecisionTaskCompletedEventId( completedId )\n                                .withActivityId( cancelActivity.getActivityId( ) )\n                        ) );\n                      } catch ( SwfMetadataException e ) {\n                        throw Exceptions.toUndeclared( e );\n                      }\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"RequestCancelExternalWorkflowExecution\":\n                      final RequestCancelExternalWorkflowExecutionDecisionAttributes cancelExternalWorkflow =\n                          decision.getRequestCancelExternalWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new RequestCancelExternalWorkflowExecutionFailedEventAttributes()\n                              .withCause( RequestCancelExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION )\n                              .withControl( cancelExternalWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withRunId( cancelExternalWorkflow.getRunId() )\n                              .withWorkflowId( cancelExternalWorkflow.getWorkflowId() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"ScheduleActivityTask\":\n                      workflowExecution.setLatestActivityTaskScheduled( new Date( ) );\n                      final ScheduleActivityTaskDecisionAttributes scheduleActivity =\n                          decision.getScheduleActivityTaskDecisionAttributes();\n                      final Long scheduledId = workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new ActivityTaskScheduledEventAttributes( )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withActivityId( scheduleActivity.getActivityId( ) )\n                              .withActivityType( scheduleActivity.getActivityType( ) )\n                              .withControl( scheduleActivity.getControl( ) )\n                              .withHeartbeatTimeout( scheduleActivity.getHeartbeatTimeout( ) )\n                              .withInput( scheduleActivity.getInput( ) )\n                              .withScheduleToCloseTimeout( scheduleActivity.getScheduleToCloseTimeout( ) )\n                              .withScheduleToStartTimeout( scheduleActivity.getScheduleToStartTimeout( ) )\n                              .withStartToCloseTimeout( scheduleActivity.getStartToCloseTimeout( ) )\n                              .withTaskList( scheduleActivity.getTaskList( ) )\n                      ) );\n                      try {\n                        final ActivityType activityType = activityTypes.lookupByExample(\n                            ActivityType.exampleWithUniqueName(\n                                accountFullName,\n                                domain.getDisplayName( ),\n                                scheduleActivity.getActivityType( ).getName( ),\n                                scheduleActivity.getActivityType( ).getVersion( ) ),\n                            accountFullName,\n                            scheduleActivity.getActivityType( ).getName( ),\n                            Predicates.alwaysTrue( ),\n                            Functions.<ActivityType>identity( ) );\n\n                        final String list = scheduleActivity.getTaskList() == null ?\n                            activityType.getDefaultTaskList() :\n                            scheduleActivity.getTaskList().getName();\n                        activityTasks.save( com.eucalyptus.simpleworkflow.ActivityTask.create(\n                            userFullName,\n                            workflowExecution,\n                            domain.getDisplayName(),\n                            scheduleActivity.getActivityId(),\n                            scheduleActivity.getActivityType().getName(),\n                            scheduleActivity.getActivityType().getVersion(),\n                            scheduleActivity.getInput(),\n                            scheduledId,\n                            list,\n                            parsePeriod( scheduleActivity.getScheduleToCloseTimeout( ), activityType.getDefaultTaskScheduleToCloseTimeout( ) ),\n                            parsePeriod( scheduleActivity.getScheduleToStartTimeout( ), activityType.getDefaultTaskScheduleToStartTimeout( ) ),\n                            parsePeriod( scheduleActivity.getStartToCloseTimeout( ), activityType.getDefaultTaskStartToCloseTimeout( ) ),\n                            parsePeriod( scheduleActivity.getHeartbeatTimeout( ), activityType.getDefaultTaskHeartbeatTimeout( ) )\n                        ) );\n\n                        notificationTypeListPairs.add( Pair.pair( \"activity\", list ) );\n                      } catch ( Exception e ) {\n                        throw Exceptions.toUndeclared( e );\n                      }\n                      break;\n                    case \"SignalExternalWorkflowExecution\":\n                      final SignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflow =\n                          decision.getSignalExternalWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new SignalExternalWorkflowExecutionFailedEventAttributes( )\n                              .withCause( SignalExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION )\n                              .withControl( signalExternalWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withRunId( signalExternalWorkflow.getRunId( ) )\n                              .withWorkflowId( signalExternalWorkflow.getWorkflowId( ) )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"StartChildWorkflowExecution\":\n                      final StartChildWorkflowExecutionDecisionAttributes startChildWorkflow =\n                          decision.getStartChildWorkflowExecutionDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new StartChildWorkflowExecutionFailedEventAttributes()\n                              .withCause( StartChildWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED )\n                              .withControl( startChildWorkflow.getControl() )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withWorkflowId( startChildWorkflow.getWorkflowId() )\n                              .withWorkflowType( startChildWorkflow.getWorkflowType() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    case \"StartTimer\":\n                      final StartTimerDecisionAttributes startTimer = decision.getStartTimerDecisionAttributes();\n                      workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new StartTimerFailedEventAttributes()\n                              .withCause( StartTimerFailedCause.OPERATION_NOT_PERMITTED )\n                              .withDecisionTaskCompletedEventId( completedId )\n                              .withTimerId( startTimer.getTimerId() )\n                      ) );\n                      scheduleDecisionTask = true;\n                      break;\n                    default:\n                      throw Exceptions.toUndeclared( new SimpleWorkflowException(\n                          \"InternalFailure\",\n                          Role.Receiver,\n                          \"Unsupported decision type: \" + decision.getDecisionType( ) ) );\n                  }\n                }\n                if ( scheduleDecisionTask && workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                  notificationTypeListPairs.add( Pair.pair( \"decision\", workflowExecution.getTaskList( ) ) );\n                }\n              }\n              return workflowExecution;\n            }\n          } );\n\n          //TODO:STEVE: update API to allow batch notification\n          for ( final Pair<String,String> notificationTypeListPair : notificationTypeListPairs ) {\n            notifyTaskList(\n                accountFullName,\n                domain.getDisplayName( ),\n                notificationTypeListPair.getLeft( ),\n                notificationTypeListPair.getRight( ) );\n          }\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public com.eucalyptus.simpleworkflow.common.model.ActivityTask pollForActivityTask(\n      final PollForActivityTaskRequest request\n  ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super ActivityTask> accessible =\n        SimpleWorkflowMetadatas.filteringFor( ActivityTask.class ).byPrivileges( ).buildPredicate( );\n\n    com.eucalyptus.simpleworkflow.common.model.ActivityTask activityTask = null;\n    try {\n      final List<ActivityTask> pending = activityTasks.listByExample(\n          ActivityTask.examplePending( accountFullName, request.getDomain(), request.getTaskList().getName() ),\n          accessible,\n          Functions.<ActivityTask>identity( ) );\n      Collections.sort( pending, Ordering.natural( ).onResultOf( AbstractPersistentSupport.creation( ) ) );\n      for ( final ActivityTask pendingTask : pending ) {\n        if ( activityTask != null ) break;\n        try {\n          activityTask = activityTasks.updateByExample(\n              pendingTask,\n              accountFullName,\n              pendingTask.getDisplayName(),\n              new Function<ActivityTask,com.eucalyptus.simpleworkflow.common.model.ActivityTask>(){\n                @Nullable\n                @Override\n                public com.eucalyptus.simpleworkflow.common.model.ActivityTask apply( final ActivityTask activityTask ) {\n                  if ( activityTask.getState( ) == ActivityTask.State.Pending ) {\n                    final WorkflowExecution workflowExecution = activityTask.getWorkflowExecution( );\n                    final Long startedId = workflowExecution.addHistoryEvent(\n                        WorkflowHistoryEvent.create( workflowExecution, new ActivityTaskStartedEventAttributes( )\n                          .withIdentity( request.getIdentity( ) )\n                          .withScheduledEventId( activityTask.getScheduledEventId( ) )\n                        )\n                    );\n                    activityTask.setState( ActivityTask.State.Active );\n                    activityTask.setStartedEventId( startedId );\n                    return new com.eucalyptus.simpleworkflow.common.model.ActivityTask( )\n                        .withStartedEventId( startedId )\n                        .withInput( activityTask.getInput() )\n                        .withTaskToken( taskTokenManager.encryptTaskToken( new TaskToken(\n                            accountFullName.getAccountNumber(),\n                            workflowExecution.getDomain().getNaturalId(),\n                            workflowExecution.getDisplayName(),\n                            activityTask.getScheduledEventId(),\n                            startedId,\n                            System.currentTimeMillis(),\n                            System.currentTimeMillis() ) ) )\n                        .withActivityId( activityTask.getDisplayName() )\n                        .withActivityType( new com.eucalyptus.simpleworkflow.common.model.ActivityType()\n                            .withName( activityTask.getActivityType() )\n                            .withVersion( activityTask.getActivityVersion() ) )\n                        .withWorkflowExecution( new com.eucalyptus.simpleworkflow.common.model.WorkflowExecution()\n                            .withRunId( workflowExecution.getDisplayName() )\n                            .withWorkflowId( workflowExecution.getWorkflowId() ) );\n                  }\n                  return null;\n                }\n              });\n\n        } catch ( Exception e ) {\n          logger.error( \"Error taking activity task\", e );\n        }\n      }\n    } catch ( Exception e ) {\n      throw handleException( e );\n    }\n\n    if ( activityTask == null ) {\n      longPollSimulation( );\n      activityTask = new com.eucalyptus.simpleworkflow.common.model.ActivityTask( );\n    }\n    return request.reply( activityTask );\n  }","id":5575,"modified_method":"public com.eucalyptus.simpleworkflow.common.model.ActivityTask pollForActivityTask(\n      final PollForActivityTaskRequest request\n  ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super ActivityTask> accessible =\n        SimpleWorkflowMetadatas.filteringFor( ActivityTask.class ).byPrivileges( ).buildPredicate( );\n\n    final String domain = request.getDomain( );\n    final String taskList = request.getTaskList( ).getName( );\n    final Callable<com.eucalyptus.simpleworkflow.common.model.ActivityTask> taskCallable =\n        new Callable<com.eucalyptus.simpleworkflow.common.model.ActivityTask>() {\n          @Override\n          public com.eucalyptus.simpleworkflow.common.model.ActivityTask call( ) throws Exception {\n            com.eucalyptus.simpleworkflow.common.model.ActivityTask activityTask = null;\n            final List<ActivityTask> pending = activityTasks.listByExample(\n                ActivityTask.examplePending( accountFullName, domain, taskList ),\n                accessible,\n                Functions.<ActivityTask>identity( ) );\n            Collections.sort( pending, Ordering.natural( ).onResultOf( AbstractPersistentSupport.creation( ) ) );\n            for ( final ActivityTask pendingTask : pending ) {\n              if ( activityTask != null ) break;\n              try {\n                activityTask = activityTasks.updateByExample(\n                    pendingTask,\n                    accountFullName,\n                    pendingTask.getDisplayName(),\n                    new Function<ActivityTask,com.eucalyptus.simpleworkflow.common.model.ActivityTask>(){\n                      @Nullable\n                      @Override\n                      public com.eucalyptus.simpleworkflow.common.model.ActivityTask apply( final ActivityTask activityTask ) {\n                        if ( activityTask.getState( ) == ActivityTask.State.Pending ) {\n                          final WorkflowExecution workflowExecution = activityTask.getWorkflowExecution( );\n                          final Long startedId = workflowExecution.addHistoryEvent(\n                              WorkflowHistoryEvent.create( workflowExecution, new ActivityTaskStartedEventAttributes( )\n                                      .withIdentity( request.getIdentity( ) )\n                                      .withScheduledEventId( activityTask.getScheduledEventId( ) )\n                              )\n                          );\n                          activityTask.setState( ActivityTask.State.Active );\n                          activityTask.setStartedEventId( startedId );\n                          return new com.eucalyptus.simpleworkflow.common.model.ActivityTask( )\n                              .withStartedEventId( startedId )\n                              .withInput( activityTask.getInput() )\n                              .withTaskToken( taskTokenManager.encryptTaskToken( new TaskToken(\n                                  accountFullName.getAccountNumber(),\n                                  workflowExecution.getDomain().getNaturalId(),\n                                  workflowExecution.getDisplayName(),\n                                  activityTask.getScheduledEventId(),\n                                  startedId,\n                                  System.currentTimeMillis(),\n                                  System.currentTimeMillis() ) ) )\n                              .withActivityId( activityTask.getDisplayName() )\n                              .withActivityType( new com.eucalyptus.simpleworkflow.common.model.ActivityType()\n                                  .withName( activityTask.getActivityType() )\n                                  .withVersion( activityTask.getActivityVersion() ) )\n                              .withWorkflowExecution( new com.eucalyptus.simpleworkflow.common.model.WorkflowExecution()\n                                  .withRunId( workflowExecution.getDisplayName() )\n                                  .withWorkflowId( workflowExecution.getWorkflowId() ) );\n                        }\n                        return null;\n                      }\n                    });\n\n              } catch ( Exception e ) {\n                if ( PersistenceExceptions.isStaleUpdate( e ) ) {\n                  logger.error( \"Activity task for domain \" + domain + \", list \" + taskList + \" already taken\", e );\n                } else {\n                  logger.error( \"Error taking activity task for domain \" + domain + \", list \" + taskList, e );\n                }\n              }\n            }\n            return activityTask;\n          }\n        };\n\n    try {\n      handleTaskPolling( accountFullName, domain, \"activity\", taskList, request.getCorrelationId( ), new com.eucalyptus.simpleworkflow.common.model.ActivityTask( ), taskCallable );\n    } catch ( Exception e ) {\n      throw handleException( e );\n    }\n\n    return null;\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage signalWorkflowExecution( final SignalWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n          new Function<WorkflowExecution,Void>(){\n            @Override\n            public Void apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                        workflowExecution,\n                        new WorkflowExecutionSignaledEventAttributes( )\n                            .withExternalInitiatedEventId( 0L )\n                            .withInput( request.getInput( ) )\n                            .withSignalName( request.getSignalName( ) )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n              }\n              return null;\n            }\n          }\n      );\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n              \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n              \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5576,"modified_method":"public SimpleWorkflowMessage signalWorkflowExecution( final SignalWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final Pair<String,String> domainTaskListPair = workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n          new Function<WorkflowExecution,Pair<String,String>>(){\n            @Override\n            public Pair<String,String> apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                        workflowExecution,\n                        new WorkflowExecutionSignaledEventAttributes( )\n                            .withExternalInitiatedEventId( 0L )\n                            .withInput( request.getInput( ) )\n                            .withSignalName( request.getSignalName( ) )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                  return Pair.pair( workflowExecution.getDomainName( ), workflowExecution.getTaskList( ) );\n                }\n              }\n              return null;\n            }\n          }\n      );\n\n      if ( domainTaskListPair != null ) {\n        notifyTaskList( accountFullName, domainTaskListPair.getLeft( ), \"decision\", domainTaskListPair.getRight( ) );\n      }\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n              \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n              \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public DecisionTask pollForDecisionTask( final PollForDecisionTaskRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    DecisionTask decisionTask = null;\n    try {\n      final List<WorkflowExecution> pending = workflowExecutions.listByExample(\n          WorkflowExecution.exampleWithPendingDecision( accountFullName, request.getDomain( ), request.getTaskList( ).getName( ) ),\n          accessible,\n          Functions.<WorkflowExecution>identity( ) );\n      Collections.sort( pending, Ordering.natural( ).onResultOf( AbstractPersistentSupport.creation( ) ) );\n      for ( final WorkflowExecution execution : pending ) {\n        if ( decisionTask != null ) break;\n        try {\n          decisionTask = workflowExecutions.updateByExample(\n              WorkflowExecution.exampleWithUniqueName( accountFullName, execution.getDomainName( ), execution.getDisplayName( ) ),\n              accountFullName,\n              execution.getDisplayName(),\n              new Function<WorkflowExecution,DecisionTask>( ) {\n                @Nullable\n                @Override\n                public DecisionTask apply( final WorkflowExecution workflowExecution ) {\n                  if ( workflowExecution.getDecisionStatus( ) == Pending ) {\n                    final List<WorkflowHistoryEvent> events = workflowExecution.getWorkflowHistory();\n                    final List<WorkflowHistoryEvent> reverseEvents = Lists.reverse( events );\n                    final WorkflowHistoryEvent scheduled = Iterables.find(\n                        reverseEvents,\n                        CollectionUtils.propertyPredicate( \"DecisionTaskScheduled\", EVENT_TYPE ) );\n                    final Optional<WorkflowHistoryEvent> previousStarted = Iterables.tryFind(\n                        reverseEvents,\n                        CollectionUtils.propertyPredicate( \"DecisionTaskStarted\", EVENT_TYPE ) );\n                    workflowExecution.setDecisionStatus( Active );\n                    workflowExecution.setDecisionTimestamp( new Date( ) );\n                    final WorkflowHistoryEvent started = WorkflowHistoryEvent.create(\n                        workflowExecution,\n                        new DecisionTaskStartedEventAttributes()\n                            .withIdentity( request.getIdentity() )\n                            .withScheduledEventId( scheduled.getEventId() ) );\n                    workflowExecution.addHistoryEvent( started );\n                    return new DecisionTask( )\n                        .withWorkflowExecution( new com.eucalyptus.simpleworkflow.common.model.WorkflowExecution( )\n                            .withWorkflowId( workflowExecution.getWorkflowId( ) )\n                            .withRunId( workflowExecution.getDisplayName( ) ) )\n                        .withWorkflowType( new com.eucalyptus.simpleworkflow.common.model.WorkflowType()\n                            .withName( workflowExecution.getWorkflowType( ).getDisplayName( ) )\n                            .withVersion( workflowExecution.getWorkflowType( ).getWorkflowVersion( ) ) )\n                        .withTaskToken( taskTokenManager.encryptTaskToken( new TaskToken(\n                            accountFullName.getAccountNumber( ),\n                            workflowExecution.getDomain( ).getNaturalId( ),\n                            workflowExecution.getDisplayName( ),\n                            scheduled.getEventId( ),\n                            started.getEventId( ),\n                            System.currentTimeMillis( ),\n                            System.currentTimeMillis( ) ) ) )  //TODO:STEVE: token expiry date\n                        .withStartedEventId( started.getEventId() )\n                        .withPreviousStartedEventId( previousStarted.transform( WorkflowExecutions.WorkflowHistoryEventLongFunctions.EVENT_ID ).or( 0L ) )\n                        .withEvents( Collections2.transform(\n                            Objects.firstNonNull( request.isReverseOrder( ), Boolean.FALSE ) ? reverseEvents : events,\n                            TypeMappers.lookup( WorkflowHistoryEvent.class, HistoryEvent.class )\n                        ) );\n                  }\n                  return null;\n                }\n              } );\n        } catch ( Exception e ) {\n          logger.error( \"Error taking decision task\", e );\n        }\n      }\n    } catch ( Exception e ) {\n      throw handleException( e );\n    }\n\n    if ( decisionTask == null ) {\n      longPollSimulation( );\n      decisionTask = new DecisionTask( );\n    }\n    return request.reply( decisionTask );\n  }","id":5577,"modified_method":"public DecisionTask pollForDecisionTask( final PollForDecisionTaskRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    final String domain = request.getDomain( );\n    final String taskList = request.getTaskList( ).getName( );\n    final Callable<DecisionTask> taskCallable = new Callable<DecisionTask>() {\n      @Override\n      public DecisionTask call() throws Exception {\n        final List<WorkflowExecution> pending = workflowExecutions.listByExample(\n            WorkflowExecution.exampleWithPendingDecision( accountFullName, domain, taskList ),\n            accessible,\n            Functions.<WorkflowExecution>identity( ) );\n        Collections.sort( pending, Ordering.natural( ).onResultOf( AbstractPersistentSupport.creation( ) ) );\n        DecisionTask decisionTask = null;\n        for ( final WorkflowExecution execution : pending ) {\n          if ( decisionTask != null ) break;\n          try {\n            decisionTask = workflowExecutions.updateByExample(\n                WorkflowExecution.exampleWithUniqueName( accountFullName, execution.getDomainName( ), execution.getDisplayName( ) ),\n                accountFullName,\n                execution.getDisplayName(),\n                new Function<WorkflowExecution,DecisionTask>( ) {\n                  @Nullable\n                  @Override\n                  public DecisionTask apply( final WorkflowExecution workflowExecution ) {\n                    if ( workflowExecution.getDecisionStatus( ) == Pending ) {\n                      final List<WorkflowHistoryEvent> events = workflowExecution.getWorkflowHistory();\n                      final List<WorkflowHistoryEvent> reverseEvents = Lists.reverse( events );\n                      final WorkflowHistoryEvent scheduled = Iterables.find(\n                          reverseEvents,\n                          CollectionUtils.propertyPredicate( \"DecisionTaskScheduled\", EVENT_TYPE ) );\n                      final Optional<WorkflowHistoryEvent> previousStarted = Iterables.tryFind(\n                          reverseEvents,\n                          CollectionUtils.propertyPredicate( \"DecisionTaskStarted\", EVENT_TYPE ) );\n                      workflowExecution.setDecisionStatus( Active );\n                      workflowExecution.setDecisionTimestamp( new Date( ) );\n                      final WorkflowHistoryEvent started = WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new DecisionTaskStartedEventAttributes()\n                              .withIdentity( request.getIdentity() )\n                              .withScheduledEventId( scheduled.getEventId() ) );\n                      workflowExecution.addHistoryEvent( started );\n                      return new DecisionTask( )\n                          .withWorkflowExecution( new com.eucalyptus.simpleworkflow.common.model.WorkflowExecution( )\n                              .withWorkflowId( workflowExecution.getWorkflowId( ) )\n                              .withRunId( workflowExecution.getDisplayName( ) ) )\n                          .withWorkflowType( new com.eucalyptus.simpleworkflow.common.model.WorkflowType()\n                              .withName( workflowExecution.getWorkflowType( ).getDisplayName( ) )\n                              .withVersion( workflowExecution.getWorkflowType( ).getWorkflowVersion( ) ) )\n                          .withTaskToken( taskTokenManager.encryptTaskToken( new TaskToken(\n                              accountFullName.getAccountNumber( ),\n                              workflowExecution.getDomain( ).getNaturalId( ),\n                              workflowExecution.getDisplayName( ),\n                              scheduled.getEventId( ),\n                              started.getEventId( ),\n                              System.currentTimeMillis( ),\n                              System.currentTimeMillis( ) ) ) )  //TODO:STEVE: token expiry date\n                          .withStartedEventId( started.getEventId() )\n                          .withPreviousStartedEventId( previousStarted.transform( WorkflowExecutions.WorkflowHistoryEventLongFunctions.EVENT_ID ).or( 0L ) )\n                          .withEvents( Collections2.transform(\n                              Objects.firstNonNull( request.isReverseOrder( ), Boolean.FALSE ) ? reverseEvents : events,\n                              TypeMappers.lookup( WorkflowHistoryEvent.class, HistoryEvent.class )\n                          ) );\n                    }\n                    return null;\n                  }\n                } );\n          } catch ( Exception e ) {\n            if ( PersistenceExceptions.isStaleUpdate( e ) ) {\n              logger.info( \"Decision task for workflow \" + execution.getDisplayName( ) + \" already taken.\");\n            } else {\n              logger.error( \"Error taking decision task for workflow \" + execution.getDisplayName( ), e );\n            }\n          }\n        }\n        return decisionTask;\n      }\n    };\n\n    try {\n      handleTaskPolling( accountFullName, domain, \"decision\", taskList, request.getCorrelationId(), new DecisionTask(), taskCallable );\n    } catch ( Exception e ) {\n      throw handleException( e );\n    }\n\n    return null;\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage terminateWorkflowExecution( final TerminateWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n           new Function<WorkflowExecution,Void>(){\n              @Override\n              public Void apply( final WorkflowExecution workflowExecution ) {\n                if ( accessible.apply( workflowExecution ) ) {\n                  workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                  workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Terminated );\n                  workflowExecution.setCloseTimestamp( new Date( ) );\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionTerminatedEventAttributes()\n                              .withChildPolicy( Objects.firstNonNull(\n                                  request.getChildPolicy( ),\n                                  workflowExecution.getChildPolicy( ) ) )\n                              .withDetails( request.getDetails() )\n                              .withReason( request.getReason() ) )\n                  );\n                }\n                deleteActivities( activityTasks, accountFullName, workflowExecution );\n                return null;\n             }\n           }\n      );\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n          \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n          \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5578,"modified_method":"public SimpleWorkflowMessage terminateWorkflowExecution( final TerminateWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n           new Function<WorkflowExecution,Void>(){\n              @Override\n              public Void apply( final WorkflowExecution workflowExecution ) {\n                if ( accessible.apply( workflowExecution ) ) {\n                  workflowExecution.setState( WorkflowExecution.ExecutionStatus.Closed );\n                  workflowExecution.setCloseStatus( WorkflowExecution.CloseStatus.Terminated );\n                  workflowExecution.setCloseTimestamp( new Date( ) );\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                          workflowExecution,\n                          new WorkflowExecutionTerminatedEventAttributes()\n                              .withChildPolicy( Objects.firstNonNull(\n                                  request.getChildPolicy( ),\n                                  workflowExecution.getChildPolicy( ) ) )\n                              .withDetails( request.getDetails() )\n                              .withReason( request.getReason() ) )\n                  );\n                }\n                deleteActivities( activityTasks, accountFullName, workflowExecution );\n                return null;\n             }\n           }\n      );\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n          \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n          \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage respondActivityTaskCompleted( final RespondActivityTaskCompletedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                try {\n                  activityTasks.deleteByExample( ActivityTask.exampleWithUniqueName(\n                      accountFullName,\n                      token.getRunId( ),\n                      token.getScheduledEventId( ) ) );\n                } catch ( SwfMetadataException e ) {\n                  throw Exceptions.toUndeclared( e );\n                }\n\n                // TODO:STEVE: verify token valid (no reuse, etc)\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskCompletedEventAttributes( )\n                        .withResult( request.getResult( ) )\n                        .withScheduledEventId( token.getScheduledEventId( ) )\n                        .withStartedEventId( token.getStartedEventId( ) )\n                ) );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskScheduledEventAttributes()\n                        .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                        .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                ) );\n                workflowExecution.setDecisionStatus( Pending );\n                workflowExecution.setDecisionTimestamp( new Date( ) );\n              }\n              return workflowExecution;\n            }\n          } );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5579,"modified_method":"public SimpleWorkflowMessage respondActivityTaskCompleted( final RespondActivityTaskCompletedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      final WorkflowExecution workflowExecution = workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                try {\n                  activityTasks.deleteByExample( ActivityTask.exampleWithUniqueName(\n                      accountFullName,\n                      token.getRunId( ),\n                      token.getScheduledEventId( ) ) );\n                } catch ( SwfMetadataException e ) {\n                  throw Exceptions.toUndeclared( e );\n                }\n\n                // TODO:STEVE: verify token valid (no reuse, etc)\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskCompletedEventAttributes( )\n                        .withResult( request.getResult( ) )\n                        .withScheduledEventId( token.getScheduledEventId( ) )\n                        .withStartedEventId( token.getStartedEventId( ) )\n                ) );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskScheduledEventAttributes()\n                        .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                        .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                ) );\n                workflowExecution.setDecisionStatus( Pending );\n                workflowExecution.setDecisionTimestamp( new Date( ) );\n              }\n              return workflowExecution;\n            }\n          } );\n\n      notifyTaskList( accountFullName, workflowExecution.getDomainName( ), \"decision\", workflowExecution.getTaskList( ) );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage respondActivityTaskFailed( final RespondActivityTaskFailedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                try {\n                  activityTasks.deleteByExample( ActivityTask.exampleWithUniqueName(\n                      accountFullName,\n                      token.getRunId( ),\n                      token.getScheduledEventId( ) ) );\n                } catch ( SwfMetadataException e ) {\n                  throw Exceptions.toUndeclared( e );\n                }\n\n                // TODO:STEVE: verify token valid (no reuse, etc)\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskFailedEventAttributes()\n                        .withDetails( request.getDetails() )\n                        .withReason( request.getReason() )\n                        .withScheduledEventId( token.getScheduledEventId() )\n                        .withStartedEventId( token.getStartedEventId() )\n                ) );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskScheduledEventAttributes()\n                        .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                        .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                ) );\n                workflowExecution.setDecisionStatus( Pending );\n                workflowExecution.setDecisionTimestamp( new Date( ) );\n              }\n              return workflowExecution;\n            }\n          } );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5580,"modified_method":"public SimpleWorkflowMessage respondActivityTaskFailed( final RespondActivityTaskFailedRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n      final Domain domain = domains.lookupByExample(\n          Domain.exampleWithUuid( accountFullName, token.getDomainUuid( ) ),\n          accountFullName,\n          token.getDomainUuid( ),\n          Predicates.alwaysTrue( ),\n          Functions.<Domain>identity( ) );\n\n      final WorkflowExecution workflowExecution = workflowExecutions.updateByExample(\n          WorkflowExecution.exampleWithUniqueName( accountFullName, domain.getDisplayName( ), token.getRunId( ) ),\n          accountFullName,\n          token.getRunId( ),\n          new Function<WorkflowExecution, WorkflowExecution>() {\n            @Nullable\n            @Override\n            public WorkflowExecution apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                try {\n                  activityTasks.deleteByExample( ActivityTask.exampleWithUniqueName(\n                      accountFullName,\n                      token.getRunId( ),\n                      token.getScheduledEventId( ) ) );\n                } catch ( SwfMetadataException e ) {\n                  throw Exceptions.toUndeclared( e );\n                }\n\n                // TODO:STEVE: verify token valid (no reuse, etc)\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskFailedEventAttributes()\n                        .withDetails( request.getDetails() )\n                        .withReason( request.getReason() )\n                        .withScheduledEventId( token.getScheduledEventId() )\n                        .withStartedEventId( token.getStartedEventId() )\n                ) );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new DecisionTaskScheduledEventAttributes()\n                        .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                        .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                ) );\n                workflowExecution.setDecisionStatus( Pending );\n                workflowExecution.setDecisionTimestamp( new Date( ) );\n              }\n              return workflowExecution;\n            }\n          } );\n\n      notifyTaskList( accountFullName, workflowExecution.getDomainName( ), \"decision\", workflowExecution.getTaskList( ) );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage respondActivityTaskCanceled( final RespondActivityTaskCanceledRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super ActivityTask> accessible =\n        SimpleWorkflowMetadatas.filteringFor( ActivityTask.class ).byPrivileges( ).buildPredicate( );\n\n    final ActivityTaskStatus status = new ActivityTaskStatus( );\n    status.setCancelRequested( false );\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n\n      activityTasks.updateByExample(\n          ActivityTask.exampleWithUniqueName( accountFullName, token.getRunId( ), token.getScheduledEventId( ) ),\n          accountFullName,\n          token.getRunId( ) + \"/\" + token.getScheduledEventId( ),\n          new Function<ActivityTask, ActivityTask>() {\n            @Override\n            public ActivityTask apply( final ActivityTask activityTask ) {\n              if ( accessible.apply( activityTask ) ) {\n                final WorkflowExecution workflowExecution = activityTask.getWorkflowExecution( );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskCanceledEventAttributes()\n                        .withDetails( request.getDetails() )\n                        .withLatestCancelRequestedEventId( activityTask.getCancelRequestedEventId() )\n                        .withScheduledEventId( activityTask.getScheduledEventId() )\n                        .withStartedEventId( activityTask.getStartedEventId() )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes( )\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n                Entities.delete( activityTask );\n              }\n              return activityTask;\n            }\n          } );\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          \"Unknown activity task, token = \" + request.getTaskToken( ) );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n\n  }","id":5581,"modified_method":"public SimpleWorkflowMessage respondActivityTaskCanceled( final RespondActivityTaskCanceledRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super ActivityTask> accessible =\n        SimpleWorkflowMetadatas.filteringFor( ActivityTask.class ).byPrivileges( ).buildPredicate( );\n\n    final ActivityTaskStatus status = new ActivityTaskStatus( );\n    status.setCancelRequested( false );\n    try {\n      final TaskToken token =\n          taskTokenManager.decryptTaskToken( accountFullName.getAccountNumber( ), request.getTaskToken( ) );\n\n      final Pair<String,String> domainTaskListPair = activityTasks.updateByExample(\n          ActivityTask.exampleWithUniqueName( accountFullName, token.getRunId( ), token.getScheduledEventId( ) ),\n          accountFullName,\n          token.getRunId( ) + \"/\" + token.getScheduledEventId( ),\n          new Function<ActivityTask, Pair<String,String>>() {\n            @Override\n            public Pair<String,String> apply( final ActivityTask activityTask ) {\n              if ( accessible.apply( activityTask ) ) {\n                final WorkflowExecution workflowExecution = activityTask.getWorkflowExecution( );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new ActivityTaskCanceledEventAttributes()\n                        .withDetails( request.getDetails() )\n                        .withLatestCancelRequestedEventId( activityTask.getCancelRequestedEventId() )\n                        .withScheduledEventId( activityTask.getScheduledEventId() )\n                        .withStartedEventId( activityTask.getStartedEventId() )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes( )\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n                Entities.delete( activityTask );\n                return Pair.pair( workflowExecution.getDomainName( ), workflowExecution.getTaskList( ) );\n              }\n              return null;\n            }\n          } );\n\n      if ( domainTaskListPair != null ) {\n        notifyTaskList( accountFullName, domainTaskListPair.getLeft(), \"decision\", domainTaskListPair.getRight() );\n      }\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          \"Unknown activity task, token = \" + request.getTaskToken( ) );\n    } catch( Exception e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public SimpleWorkflowMessage requestCancelWorkflowExecution( final RequestCancelWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n          new Function<WorkflowExecution,Void>(){\n            @Override\n            public Void apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                workflowExecution.setCancelRequested( true );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new WorkflowExecutionCancelRequestedEventAttributes( )\n                        .withExternalInitiatedEventId( 0L )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                }\n              }\n              return null;\n            }\n          }\n      );\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n              \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n              \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    longPollExit( );\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","id":5582,"modified_method":"public SimpleWorkflowMessage requestCancelWorkflowExecution( final RequestCancelWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowExecution> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowExecution.class ).byPrivileges( ).buildPredicate( );\n\n    try {\n      final Pair<String,String> domainTaskListPair = workflowExecutions.updateByExample(\n          WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n          accountFullName,\n          request.getWorkflowId( ),\n          new Function<WorkflowExecution,Pair<String,String>>(){\n            @Override\n            public Pair<String,String> apply( final WorkflowExecution workflowExecution ) {\n              if ( accessible.apply( workflowExecution ) ) {\n                workflowExecution.setCancelRequested( true );\n                workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                    workflowExecution,\n                    new WorkflowExecutionCancelRequestedEventAttributes( )\n                        .withExternalInitiatedEventId( 0L )\n                ) );\n                if ( workflowExecution.getDecisionStatus( ) != Pending ) {\n                  workflowExecution.addHistoryEvent( WorkflowHistoryEvent.create(\n                      workflowExecution,\n                      new DecisionTaskScheduledEventAttributes()\n                          .withTaskList( new TaskList( ).withName( workflowExecution.getTaskList( ) ) )\n                          .withStartToCloseTimeout( String.valueOf( workflowExecution.getTaskStartToCloseTimeout( ) ) )\n                  ) );\n                  workflowExecution.setDecisionStatus( Pending );\n                  workflowExecution.setDecisionTimestamp( new Date( ) );\n                  return Pair.pair( workflowExecution.getDomainName( ), workflowExecution.getTaskList( ) );\n                }\n              }\n              return null;\n            }\n          }\n      );\n\n      if ( domainTaskListPair != null ) {\n        notifyTaskList( accountFullName, domainTaskListPair.getLeft( ), \"decision\", domainTaskListPair.getRight( ) );\n      }\n    } catch ( SwfMetadataNotFoundException e ) {\n      throw new SimpleWorkflowClientException(\n          \"UnknownResourceFault\",\n          request.getRunId( ) == null ?\n              \"Unknown execution, workflowId = \" + request.getWorkflowId( ) :\n              \"Unknown execution: WorkflowExecution=[workflowId=\" + request.getWorkflowId( ) + \", runId=\"+ request.getRunId( ) +\"]\" );\n    } catch ( SwfMetadataException e ) {\n      throw handleException( e );\n    }\n\n    return request.reply( new SimpleWorkflowMessage( ) );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public Run startWorkflowExecution( final StartWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowType> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowType.class ).byPrivileges( ).buildPredicate( );\n    final WorkflowExecution workflowExecution = allocate( new Supplier<WorkflowExecution>( ) {\n      @Override\n      public WorkflowExecution get( ) {\n        try {\n          if ( !workflowExecutions.listByExample(\n              WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n              Predicates.alwaysTrue( ),\n              Functions.identity( ) ).isEmpty( ) ) {\n            throw new SimpleWorkflowClientException(\n                \"WorkflowExecutionAlreadyStartedFault\", \"Workflow open with ID \" + request.getWorkflowId( ) );\n          }\n\n          final Domain domain =\n              domains.lookupByName( accountFullName, request.getDomain( ), Functions.<Domain>identity( ) );\n          final WorkflowType workflowType =\n              workflowTypes.lookupByExample(\n                  WorkflowType.exampleWithUniqueName(\n                      accountFullName,\n                      request.getDomain( ),\n                      request.getWorkflowType( ).getName( ),\n                      request.getWorkflowType( ).getVersion( ) ),\n                  accountFullName,\n                  request.getWorkflowType( ).getName( ),\n                  accessible,\n                  Functions.<WorkflowType>identity( ) );\n          final String childPolicy = Objects.firstNonNull(\n              request.getChildPolicy( ),\n              workflowType.getDefaultChildPolicy( ) );\n          final String taskList = request.getTaskList( ) == null ?\n              workflowType.getDefaultTaskList( ):\n              request.getTaskList( ).getName( );\n          final Integer executionStartToCloseTimeout = Objects.firstNonNull(  //TODO:STEVE: validate not NONE\n              parsePeriod( request.getExecutionStartToCloseTimeout( ) ),\n              workflowType.getDefaultExecutionStartToCloseTimeout( ) );\n          final Integer taskStartToCloseTimeout = Objects.firstNonNull(\n              parsePeriod( request.getTaskStartToCloseTimeout( ) ),\n              workflowType.getDefaultTaskStartToCloseTimeout( ) );\n          final WorkflowExecution workflowExecution = WorkflowExecution.create(\n              userFullName,\n              UUID.randomUUID( ).toString( ),\n              domain,\n              workflowType,\n              request.getWorkflowId( ),\n              childPolicy,\n              taskList,\n              executionStartToCloseTimeout,\n              taskStartToCloseTimeout,\n              request.getTagList( ),\n              Lists.newArrayList(\n                  new WorkflowExecutionStartedEventAttributes( )\n                      .withChildPolicy( childPolicy )\n                      .withExecutionStartToCloseTimeout( String.valueOf( executionStartToCloseTimeout ) )\n                      .withInput( request.getInput( ) )\n                      .withParentInitiatedEventId( 0L )\n                      .withTaskList( new TaskList( ).withName( taskList ) )\n                      .withTagList( request.getTagList( ) )\n                      .withTaskStartToCloseTimeout( String.valueOf( taskStartToCloseTimeout ) )\n                      .withWorkflowType( request.getWorkflowType( ) ),\n                  new DecisionTaskScheduledEventAttributes( )\n                      .withStartToCloseTimeout( String.valueOf( taskStartToCloseTimeout ) )\n                      .withTaskList( request.getTaskList( ) )\n              )\n          );\n          return workflowExecutions.save( workflowExecution );\n        } catch ( Exception ex ) {\n          throw new RuntimeException( ex );\n        }\n      }\n    }, WorkflowExecution.class, request.getWorkflowId( ) );\n\n    longPollExit( );\n\n    final Run run = new Run( );\n    run.setRunId( workflowExecution.getDisplayName() );\n    return request.reply( run );\n  }","id":5583,"modified_method":"public Run startWorkflowExecution( final StartWorkflowExecutionRequest request ) throws SimpleWorkflowException {\n    final Context ctx = Contexts.lookup( );\n    final UserFullName userFullName = ctx.getUserFullName( );\n    final AccountFullName accountFullName = userFullName.asAccountFullName( );\n    final Predicate<? super WorkflowType> accessible =\n        SimpleWorkflowMetadatas.filteringFor( WorkflowType.class ).byPrivileges( ).buildPredicate( );\n    final WorkflowExecution workflowExecution = allocate( new Supplier<WorkflowExecution>( ) {\n      @Override\n      public WorkflowExecution get( ) {\n        try {\n          if ( !workflowExecutions.listByExample(\n              WorkflowExecution.exampleForOpenWorkflow( accountFullName, request.getDomain( ), request.getWorkflowId( ) ),\n              Predicates.alwaysTrue( ),\n              Functions.identity( ) ).isEmpty( ) ) {\n            throw new SimpleWorkflowClientException(\n                \"WorkflowExecutionAlreadyStartedFault\", \"Workflow open with ID \" + request.getWorkflowId( ) );\n          }\n\n          final Domain domain =\n              domains.lookupByName( accountFullName, request.getDomain( ), Functions.<Domain>identity( ) );\n          final WorkflowType workflowType =\n              workflowTypes.lookupByExample(\n                  WorkflowType.exampleWithUniqueName(\n                      accountFullName,\n                      request.getDomain( ),\n                      request.getWorkflowType( ).getName( ),\n                      request.getWorkflowType( ).getVersion( ) ),\n                  accountFullName,\n                  request.getWorkflowType( ).getName( ),\n                  accessible,\n                  Functions.<WorkflowType>identity( ) );\n          final String childPolicy = Objects.firstNonNull(\n              request.getChildPolicy( ),\n              workflowType.getDefaultChildPolicy( ) );\n          final String taskList = request.getTaskList( ) == null ?\n              workflowType.getDefaultTaskList( ):\n              request.getTaskList( ).getName( );\n          final Integer executionStartToCloseTimeout = Objects.firstNonNull(  //TODO:STEVE: validate not NONE\n              parsePeriod( request.getExecutionStartToCloseTimeout( ) ),\n              workflowType.getDefaultExecutionStartToCloseTimeout( ) );\n          final Integer taskStartToCloseTimeout = Objects.firstNonNull(\n              parsePeriod( request.getTaskStartToCloseTimeout( ) ),\n              workflowType.getDefaultTaskStartToCloseTimeout( ) );\n          final WorkflowExecution workflowExecution = WorkflowExecution.create(\n              userFullName,\n              UUID.randomUUID( ).toString( ),\n              domain,\n              workflowType,\n              request.getWorkflowId( ),\n              childPolicy,\n              taskList,\n              executionStartToCloseTimeout,\n              taskStartToCloseTimeout,\n              request.getTagList( ),\n              Lists.newArrayList(\n                  new WorkflowExecutionStartedEventAttributes( )\n                      .withChildPolicy( childPolicy )\n                      .withExecutionStartToCloseTimeout( String.valueOf( executionStartToCloseTimeout ) )\n                      .withInput( request.getInput( ) )\n                      .withParentInitiatedEventId( 0L )\n                      .withTaskList( new TaskList( ).withName( taskList ) )\n                      .withTagList( request.getTagList( ) )\n                      .withTaskStartToCloseTimeout( String.valueOf( taskStartToCloseTimeout ) )\n                      .withWorkflowType( request.getWorkflowType( ) ),\n                  new DecisionTaskScheduledEventAttributes( )\n                      .withStartToCloseTimeout( String.valueOf( taskStartToCloseTimeout ) )\n                      .withTaskList( request.getTaskList( ) )\n              )\n          );\n          return workflowExecutions.save( workflowExecution );\n        } catch ( Exception ex ) {\n          throw new RuntimeException( ex );\n        }\n      }\n    }, WorkflowExecution.class, request.getWorkflowId( ) );\n\n    notifyTaskList( accountFullName, workflowExecution.getDomainName( ), \"decision\", workflowExecution.getTaskList( ) );\n\n    final Run run = new Run( );\n    run.setRunId( workflowExecution.getDisplayName() );\n    return request.reply( run );\n  }","commit_id":"2791778cfaad092386c7ae1f4519325a9eb7e9b0","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n     * Builds and audit log message based on the member variables\n     *\n     * @param builder builder for the audit event details.\n     */\n    @Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      builder\n        .append(\"Operation(\")\n        .append(operation);\n\n      builder.append(\"), Status(\")\n        .append(reasonOfFailure == null ? \"Success\" : \"Failed\");\n\n      if (reasonOfFailure != null) {\n        builder.append(\"), Reason of failure(\")\n          .append(reasonOfFailure);\n      }\n\n      builder.append(\")\");\n    }","id":5584,"modified_method":"/**\n     * Builds and audit log message based on the member variables\n     *\n     * @param builder builder for the audit event details.\n     */\n    @Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      builder\n        .append(\"Operation(\")\n        .append(operation);\n\n      builder.append(\"), Status(\")\n        .append(reasonOfFailure == null ? \"Success\" : \"Failed\");\n\n      if (reasonOfFailure != null) {\n        builder.append(\"), Reason of failure(\")\n          .append(reasonOfFailure);\n      }\n\n      builder.append(\"), RequestId(\")\n        .append(requestId)\n        .append(\"), TaskId(\")\n        .append(taskId)\n        .append(\")\");\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"public ActivateUserRequestAuditEventBuilder() {\n      super.withOperation(\"Set user activate\");\n    }","id":5585,"modified_method":"public ActivateUserRequestAuditEventBuilder() {\n      super.withOperation(\"Set user active/inactive\");\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n     * Appends to the event the details of the incoming request.\n     *\n     * @param builder builder for the audit event details.\n     */\n    @Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n\n      builder.append(\", Hostname(\")\n        .append(hostName)\n        .append(\", Component(\")\n        .append(component)\n        .append(\")\");\n    }","id":5586,"modified_method":"/**\n     * Appends to the event the details of the incoming request.\n     *\n     * @param builder builder for the audit event details.\n     */\n    @Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n\n      builder.append(\", Hostname(\")\n        .append(hostName)\n        .append(\"), Component(\")\n        .append(components == null ? \"\" : StringUtils.join(components, \", \"))\n        .append(\")\");\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"public AddComponentToHostRequestAuditEventBuilder withComponent(String component) {\n      this.component = component;\n      return this;\n    }","id":5587,"modified_method":"public AddComponentToHostRequestAuditEventBuilder withComponents(Set<String> component) {\n      this.components = component;\n      return this;\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    if (!request.getBody().getPropertySets().isEmpty()) {\n      Map<String, Object> map = request.getBody().getPropertySets().iterator().next();\n      if (map.size() == 1 && map.containsKey(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID)) {\n        String newName = String.valueOf(map.get(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID));\n        String oldName = request.getResource().getKeyValueMap().get(Resource.Type.Cluster);\n        return ClusterNameChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withOldName(oldName)\n          .withNewName(newName)\n          .build();\n      }\n    }\n\n    return ConfigurationChangeRequestAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withRequestType(request.getRequestType())\n      .withResultStatus(result.getStatus())\n      .withUrl(request.getURI())\n      .withRemoteIp(request.getRemoteAddress())\n      .withVersionNote(getServiceConfigVersionNote(result))\n      .withVersionNumber(getServiceConfigVersion(result))\n      .build();\n  }","id":5588,"modified_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    if (!request.getBody().getPropertySets().isEmpty()) {\n      Map<String, Object> map = Iterables.getFirst(request.getBody().getPropertySets(), null);\n      if (map != null && map.size() == 1 && map.containsKey(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID)) {\n        String newName = String.valueOf(map.get(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID));\n        String oldName = request.getResource().getKeyValueMap().get(Resource.Type.Cluster);\n        return ClusterNameChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withOldName(oldName)\n          .withNewName(newName)\n          .build();\n      }\n    }\n\n    return ConfigurationChangeRequestAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withRequestType(request.getRequestType())\n      .withResultStatus(result.getStatus())\n      .withUrl(request.getURI())\n      .withRemoteIp(request.getRemoteAddress())\n      .withVersionNote(getServiceConfigVersionNote(result))\n      .withVersionNumber(getServiceConfigVersion(result))\n      .build();\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns service configuration map from the result. This map contains version number and version info\n   * @param result\n   * @return\n   */\n  private Map<String, Object> getServiceConfigMap(Result result) {\n    if (result.getResultTree().getChild(\"resources\") != null &&\n      !result.getResultTree().getChild(\"resources\").getChildren().isEmpty() &&\n      result.getResultTree().getChild(\"resources\").getChildren().iterator().next().getObject() != null) {\n      return result.getResultTree().getChild(\"resources\").getChildren().iterator().next().getObject().getPropertiesMap().get(\"\");\n    }\n    return null;\n  }","id":5589,"modified_method":"/**\n   * Returns service configuration map from the result. This map contains version number and version info\n   * @param result\n   * @return\n   */\n  private Map<String, Object> getServiceConfigMap(Result result) {\n    if (result.getResultTree().getChild(\"resources\") != null) {\n      TreeNode<Resource> first = Iterables.getFirst(result.getResultTree().getChild(\"resources\").getChildren(), null);\n      if(first != null && first.getObject() != null) {\n        return first.getObject().getPropertiesMap().get(\"\");\n      }\n    }\n    return null;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * For each identity, create a keytab and append to a new or existing keytab file.\n   * <p/>\n   * It is expected that the {@link org.apache.ambari.server.serveraction.kerberos.CreatePrincipalsServerAction}\n   * (or similar) has executed before this action and a set of passwords has been created, map to\n   * their relevant (evaluated) principals and stored in the requestSharedDataContext.\n   * <p/>\n   * If a password exists for the current evaluatedPrincipal, use a\n   * {@link org.apache.ambari.server.serveraction.kerberos.KerberosOperationHandler} to generate\n   * the keytab file. To help avoid filename collisions and to build a structure that is easy to\n   * discover, each keytab file is stored in host-specific\n   * ({@link org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileReader#HOSTNAME})\n   * directory using the SHA1 hash of its destination file path\n   * ({@link org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileReader#KEYTAB_FILE_PATH})\n   * <p/>\n   * <pre>\n   *   data_directory\n   *   |- host1\n   *   |  |- 16a054404c8826cd604a27ac970e8cc4b9c7a3fa   (keytab file)\n   *   |  |- ...                                        (keytab files)\n   *   |  |- a3c09cae73406912e8c55296d1c85b674d24f576   (keytab file)\n   *   |- host2\n   *   |  |- ...\n   * <\/pre>\n   *\n   * @param identityRecord           a Map containing the data for the current identity record\n   * @param evaluatedPrincipal       a String indicating the relevant principal\n   * @param operationHandler         a KerberosOperationHandler used to perform Kerberos-related\n   *                                 tasks for specific Kerberos implementations\n   *                                 (MIT, Active Directory, etc...)\n   * @param kerberosConfiguration    a Map of configuration properties from kerberos-env\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request  @return a CommandReport, indicating an error\n   *                                 condition; or null, indicating a success condition\n   * @throws AmbariException if an error occurs while processing the identity record\n   */\n  @Override\n  protected CommandReport processIdentity(Map<String, String> identityRecord, String evaluatedPrincipal,\n                                          KerberosOperationHandler operationHandler,\n                                          Map<String, String> kerberosConfiguration,\n                                          Map<String, Object> requestSharedDataContext)\n      throws AmbariException {\n\n\n    CreateKeyTabKerberosAuditEvent.CreateKeyTabKerberosAuditEventBuilder auditEventBuilder = CreateKeyTabKerberosAuditEvent.builder().withTimestamp(System.currentTimeMillis());\n    CommandReport commandReport = null;\n    String message = null;\n    try {\n      if (identityRecord != null) {\n        String dataDirectory = getDataDirectoryPath();\n\n        if (operationHandler == null) {\n          message = String.format(\"Failed to create keytab file for %s, missing KerberosOperationHandler\", evaluatedPrincipal);\n          actionLog.writeStdErr(message);\n          LOG.error(message);\n          commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n        } else if (dataDirectory == null) {\n          message = \"The data directory has not been set. Generated keytab files can not be stored.\";\n          LOG.error(message);\n          commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n        } else {\n          Map<String, String> principalPasswordMap = getPrincipalPasswordMap(requestSharedDataContext);\n          Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);\n\n          String hostName = identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);\n          String keytabFilePath = identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);\n\n          if ((hostName != null) && !hostName.isEmpty() && (keytabFilePath != null) && !keytabFilePath.isEmpty()) {\n            Set<String> visitedPrincipalKeys = visitedIdentities.get(evaluatedPrincipal);\n            String visitationKey = String.format(\"%s|%s\", hostName, keytabFilePath);\n\n            if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {\n              // Look up the current evaluatedPrincipal's password.\n              // If found create the keytab file, else try to find it in the cache.\n              String password = principalPasswordMap.get(evaluatedPrincipal);\n              Integer keyNumber = principalKeyNumberMap.get(evaluatedPrincipal);\n\n              message = String.format(\"Creating keytab file for %s on host %s\", evaluatedPrincipal, hostName);\n              LOG.info(message);\n              actionLog.writeStdOut(message);\n              auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(keytabFilePath);\n\n              // Determine where to store the keytab file.  It should go into a host-specific\n              // directory under the previously determined data directory.\n              File hostDirectory = new File(dataDirectory, hostName);\n\n              // Ensure the host directory exists...\n              if (!hostDirectory.exists() && hostDirectory.mkdirs()) {\n                // Make sure only Ambari has access to this directory.\n                ensureAmbariOnlyAccess(hostDirectory);\n              }\n\n            if (hostDirectory.exists()) {\n              File destinationKeytabFile = new File(hostDirectory, DigestUtils.sha1Hex(keytabFilePath));\n              HostEntity hostEntity = hostDAO.findByName(hostName);\n              // in case of ambari-server identity there's no host entity for ambari_server host\n              if (hostEntity == null && !hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {\n                message = \"Failed to find HostEntity for hostname = \" + hostName;\n                actionLog.writeStdErr(message);\n                LOG.error(message);\n                commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                return commandReport;\n              }\n\n              if (password == null) {\n                if (hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME) || kerberosPrincipalHostDAO\n                  .exists(evaluatedPrincipal, hostEntity.getHostId())) {\n                  // There is nothing to do for this since it must already exist and we don't want to\n                  // regenerate the keytab\n                  message = String.format(\"Skipping keytab file for %s, missing password indicates nothing to do\", evaluatedPrincipal);\n                  LOG.debug(message);\n                } else {\n                  KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);\n                  String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();\n\n                    if (cachedKeytabPath == null) {\n                      message = String.format(\"Failed to create keytab for %s, missing cached file\", evaluatedPrincipal);\n                      actionLog.writeStdErr(message);\n                      LOG.error(message);\n                      commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                    } else {\n                      try {\n                        operationHandler.createKeytabFile(new File(cachedKeytabPath), destinationKeytabFile);\n                      } catch (KerberosOperationException e) {\n                        message = String.format(\"Failed to create keytab file for %s - %s\", evaluatedPrincipal, e.getMessage());\n                        actionLog.writeStdErr(message);\n                        LOG.error(message, e);\n                        commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                      }\n                    }\n                  }\n                } else {\n                  boolean canCache = (\"true\".equalsIgnoreCase(identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_IS_CACHABLE)));\n\n                  Keytab keytab = createKeytab(evaluatedPrincipal, password, keyNumber, operationHandler, visitedPrincipalKeys != null, canCache, actionLog);\n\n                  if (keytab != null) {\n                    try {\n                      if (operationHandler.createKeytabFile(keytab, destinationKeytabFile)) {\n                        ensureAmbariOnlyAccess(destinationKeytabFile);\n\n                        message = String.format(\"Successfully created keytab file for %s at %s\", evaluatedPrincipal, destinationKeytabFile.getAbsolutePath());\n                        LOG.debug(message);\n                        auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());\n                      } else {\n                        message = String.format(\"Failed to create keytab file for %s at %s\", evaluatedPrincipal, destinationKeytabFile.getAbsolutePath());\n                        actionLog.writeStdErr(message);\n                        LOG.error(message);\n                        commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                      }\n                    } catch (KerberosOperationException e) {\n                      message = String.format(\"Failed to create keytab file for %s - %s\", evaluatedPrincipal, e.getMessage());\n                      actionLog.writeStdErr(message);\n                      LOG.error(message, e);\n                      commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                    }\n                  } else {\n                    commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                  }\n\n                  if (visitedPrincipalKeys == null) {\n                    visitedPrincipalKeys = new HashSet<String>();\n                    visitedIdentities.put(evaluatedPrincipal, visitedPrincipalKeys);\n                  }\n\n                  visitedPrincipalKeys.add(visitationKey);\n                }\n              } else {\n                message = String.format(\"Failed to create keytab file for %s, the container directory does not exist: %s\",\n                  evaluatedPrincipal, hostDirectory.getAbsolutePath());\n                actionLog.writeStdErr(message);\n                LOG.error(message);\n                commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n              }\n            } else {\n              LOG.debug(String.format(\"Skipping previously processed keytab for %s on host %s\", evaluatedPrincipal, hostName));\n            }\n          }\n        }\n      }\n    } finally {\n      if(commandReport != null && HostRoleStatus.FAILED.toString().equals(commandReport.getStatus())) {\n        auditEventBuilder.withReasonOfFailure(message == null ? \"Unknown error\" : message);\n      }\n      if(commandReport != null || auditEventBuilder.hasPrincipal()) {\n        auditLog(auditEventBuilder.build());\n      }\n    }\n    return commandReport;\n  }","id":5590,"modified_method":"/**\n   * For each identity, create a keytab and append to a new or existing keytab file.\n   * <p/>\n   * It is expected that the {@link org.apache.ambari.server.serveraction.kerberos.CreatePrincipalsServerAction}\n   * (or similar) has executed before this action and a set of passwords has been created, map to\n   * their relevant (evaluated) principals and stored in the requestSharedDataContext.\n   * <p/>\n   * If a password exists for the current evaluatedPrincipal, use a\n   * {@link org.apache.ambari.server.serveraction.kerberos.KerberosOperationHandler} to generate\n   * the keytab file. To help avoid filename collisions and to build a structure that is easy to\n   * discover, each keytab file is stored in host-specific\n   * ({@link org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileReader#HOSTNAME})\n   * directory using the SHA1 hash of its destination file path\n   * ({@link org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileReader#KEYTAB_FILE_PATH})\n   * <p/>\n   * <pre>\n   *   data_directory\n   *   |- host1\n   *   |  |- 16a054404c8826cd604a27ac970e8cc4b9c7a3fa   (keytab file)\n   *   |  |- ...                                        (keytab files)\n   *   |  |- a3c09cae73406912e8c55296d1c85b674d24f576   (keytab file)\n   *   |- host2\n   *   |  |- ...\n   * <\/pre>\n   *\n   * @param identityRecord           a Map containing the data for the current identity record\n   * @param evaluatedPrincipal       a String indicating the relevant principal\n   * @param operationHandler         a KerberosOperationHandler used to perform Kerberos-related\n   *                                 tasks for specific Kerberos implementations\n   *                                 (MIT, Active Directory, etc...)\n   * @param kerberosConfiguration    a Map of configuration properties from kerberos-env\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request  @return a CommandReport, indicating an error\n   *                                 condition; or null, indicating a success condition\n   * @throws AmbariException if an error occurs while processing the identity record\n   */\n  @Override\n  protected CommandReport processIdentity(Map<String, String> identityRecord, String evaluatedPrincipal,\n                                          KerberosOperationHandler operationHandler,\n                                          Map<String, String> kerberosConfiguration,\n                                          Map<String, Object> requestSharedDataContext)\n      throws AmbariException {\n\n\n    CreateKeyTabKerberosAuditEvent.CreateKeyTabKerberosAuditEventBuilder auditEventBuilder = CreateKeyTabKerberosAuditEvent.builder();\n    auditEventBuilder.withTimestamp(System.currentTimeMillis());\n    auditEventBuilder.withRequestId(getHostRoleCommand().getRequestId());\n    auditEventBuilder.withTaskId(getHostRoleCommand().getTaskId());\n\n    CommandReport commandReport = null;\n    String message = null;\n    try {\n      if (identityRecord != null) {\n        String dataDirectory = getDataDirectoryPath();\n\n        if (operationHandler == null) {\n          message = String.format(\"Failed to create keytab file for %s, missing KerberosOperationHandler\", evaluatedPrincipal);\n          actionLog.writeStdErr(message);\n          LOG.error(message);\n          commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n        } else if (dataDirectory == null) {\n          message = \"The data directory has not been set. Generated keytab files can not be stored.\";\n          LOG.error(message);\n          commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n        } else {\n          Map<String, String> principalPasswordMap = getPrincipalPasswordMap(requestSharedDataContext);\n          Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);\n\n          String hostName = identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);\n          String keytabFilePath = identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);\n\n          if ((hostName != null) && !hostName.isEmpty() && (keytabFilePath != null) && !keytabFilePath.isEmpty()) {\n            Set<String> visitedPrincipalKeys = visitedIdentities.get(evaluatedPrincipal);\n            String visitationKey = String.format(\"%s|%s\", hostName, keytabFilePath);\n\n            if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {\n              // Look up the current evaluatedPrincipal's password.\n              // If found create the keytab file, else try to find it in the cache.\n              String password = principalPasswordMap.get(evaluatedPrincipal);\n              Integer keyNumber = principalKeyNumberMap.get(evaluatedPrincipal);\n\n              message = String.format(\"Creating keytab file for %s on host %s\", evaluatedPrincipal, hostName);\n              LOG.info(message);\n              actionLog.writeStdOut(message);\n              auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(keytabFilePath);\n\n              // Determine where to store the keytab file.  It should go into a host-specific\n              // directory under the previously determined data directory.\n              File hostDirectory = new File(dataDirectory, hostName);\n\n              // Ensure the host directory exists...\n              if (!hostDirectory.exists() && hostDirectory.mkdirs()) {\n                // Make sure only Ambari has access to this directory.\n                ensureAmbariOnlyAccess(hostDirectory);\n              }\n\n            if (hostDirectory.exists()) {\n              File destinationKeytabFile = new File(hostDirectory, DigestUtils.sha1Hex(keytabFilePath));\n              HostEntity hostEntity = hostDAO.findByName(hostName);\n              // in case of ambari-server identity there's no host entity for ambari_server host\n              if (hostEntity == null && !hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {\n                message = \"Failed to find HostEntity for hostname = \" + hostName;\n                actionLog.writeStdErr(message);\n                LOG.error(message);\n                commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                return commandReport;\n              }\n\n              if (password == null) {\n                if (hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME) || kerberosPrincipalHostDAO\n                  .exists(evaluatedPrincipal, hostEntity.getHostId())) {\n                  // There is nothing to do for this since it must already exist and we don't want to\n                  // regenerate the keytab\n                  message = String.format(\"Skipping keytab file for %s, missing password indicates nothing to do\", evaluatedPrincipal);\n                  LOG.debug(message);\n                } else {\n                  KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);\n                  String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();\n\n                    if (cachedKeytabPath == null) {\n                      message = String.format(\"Failed to create keytab for %s, missing cached file\", evaluatedPrincipal);\n                      actionLog.writeStdErr(message);\n                      LOG.error(message);\n                      commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                    } else {\n                      try {\n                        operationHandler.createKeytabFile(new File(cachedKeytabPath), destinationKeytabFile);\n                      } catch (KerberosOperationException e) {\n                        message = String.format(\"Failed to create keytab file for %s - %s\", evaluatedPrincipal, e.getMessage());\n                        actionLog.writeStdErr(message);\n                        LOG.error(message, e);\n                        commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                      }\n                    }\n                  }\n                } else {\n                  boolean canCache = (\"true\".equalsIgnoreCase(identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_IS_CACHABLE)));\n\n                  Keytab keytab = createKeytab(evaluatedPrincipal, password, keyNumber, operationHandler, visitedPrincipalKeys != null, canCache, actionLog);\n\n                  if (keytab != null) {\n                    try {\n                      if (operationHandler.createKeytabFile(keytab, destinationKeytabFile)) {\n                        ensureAmbariOnlyAccess(destinationKeytabFile);\n\n                        message = String.format(\"Successfully created keytab file for %s at %s\", evaluatedPrincipal, destinationKeytabFile.getAbsolutePath());\n                        LOG.debug(message);\n                        auditEventBuilder.withPrincipal(evaluatedPrincipal).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());\n                      } else {\n                        message = String.format(\"Failed to create keytab file for %s at %s\", evaluatedPrincipal, destinationKeytabFile.getAbsolutePath());\n                        actionLog.writeStdErr(message);\n                        LOG.error(message);\n                        commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                      }\n                    } catch (KerberosOperationException e) {\n                      message = String.format(\"Failed to create keytab file for %s - %s\", evaluatedPrincipal, e.getMessage());\n                      actionLog.writeStdErr(message);\n                      LOG.error(message, e);\n                      commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                    }\n                  } else {\n                    commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n                  }\n\n                  if (visitedPrincipalKeys == null) {\n                    visitedPrincipalKeys = new HashSet<String>();\n                    visitedIdentities.put(evaluatedPrincipal, visitedPrincipalKeys);\n                  }\n\n                  visitedPrincipalKeys.add(visitationKey);\n                }\n              } else {\n                message = String.format(\"Failed to create keytab file for %s, the container directory does not exist: %s\",\n                  evaluatedPrincipal, hostDirectory.getAbsolutePath());\n                actionLog.writeStdErr(message);\n                LOG.error(message);\n                commandReport = createCommandReport(1, HostRoleStatus.FAILED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n              }\n            } else {\n              LOG.debug(String.format(\"Skipping previously processed keytab for %s on host %s\", evaluatedPrincipal, hostName));\n            }\n          }\n        }\n      }\n    } finally {\n      if(commandReport != null && HostRoleStatus.FAILED.toString().equals(commandReport.getStatus())) {\n        auditEventBuilder.withReasonOfFailure(message == null ? \"Unknown error\" : message);\n      }\n      if(commandReport != null || auditEventBuilder.hasPrincipal()) {\n        auditLog(auditEventBuilder.build());\n      }\n    }\n    return commandReport;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n      builder.append(\", Principal(\")\n        .append(principal);\n    }","id":5591,"modified_method":"@Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n      builder.append(\", Principal(\")\n        .append(principal)\n        .append(\")\");\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Creates a principal in the relevant KDC\n   *\n   * @param principal                the principal name to create\n   * @param isServicePrincipal       true if the principal is a service principal; false if the\n   *                                 principal is a user principal\n   * @param kerberosConfiguration    the kerberos-env configuration properties\n   * @param kerberosOperationHandler the KerberosOperationHandler for the relevant KDC\n   * @param actionLog                the logger (may be null if no logging is desired)\n   * @return a CreatePrincipalResult containing the generated password and key number value\n   */\n  public CreatePrincipalResult createPrincipal(String principal, boolean isServicePrincipal,\n                                               Map<String, String> kerberosConfiguration,\n                                               KerberosOperationHandler kerberosOperationHandler,\n                                               ActionLog actionLog) {\n    CreatePrincipalKerberosAuditEvent.CreatePrincipalKerberosAuditEventBuilder auditEventBuilder = CreatePrincipalKerberosAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withPrincipal(principal);\n    CreatePrincipalResult result = null;\n    String message = null;\n    try {\n\n      message = String.format(\"Creating principal, %s\", principal);\n      LOG.info(message);\n      if (actionLog != null) {\n        actionLog.writeStdOut(message);\n      }\n\n      Integer length;\n      Integer minLowercaseLetters;\n      Integer minUppercaseLetters;\n      Integer minDigits;\n      Integer minPunctuation;\n      Integer minWhitespace;\n\n      if (kerberosConfiguration == null) {\n        length = null;\n        minLowercaseLetters = null;\n        minUppercaseLetters = null;\n        minDigits = null;\n        minPunctuation = null;\n        minWhitespace = null;\n      } else {\n        length = toInt(kerberosConfiguration.get(\"password_length\"));\n        minLowercaseLetters = toInt(kerberosConfiguration.get(\"password_min_lowercase_letters\"));\n        minUppercaseLetters = toInt(kerberosConfiguration.get(\"password_min_uppercase_letters\"));\n        minDigits = toInt(kerberosConfiguration.get(\"password_min_digits\"));\n        minPunctuation = toInt(kerberosConfiguration.get(\"password_min_punctuation\"));\n        minWhitespace = toInt(kerberosConfiguration.get(\"password_min_whitespace\"));\n      }\n\n      String password = securePasswordHelper.createSecurePassword(length, minLowercaseLetters, minUppercaseLetters, minDigits, minPunctuation, minWhitespace);\n\n      try {\n\n        if (kerberosOperationHandler.principalExists(principal)) {\n          // Create a new password since we need to know what it is.\n          // A new password/key would have been generated after exporting the keytab anyways.\n          message = String.format(\"Principal, %s, already exists, setting new password\", principal);\n          LOG.warn(message);\n          if (actionLog != null) {\n            actionLog.writeStdOut(message);\n          }\n\n          Integer keyNumber = kerberosOperationHandler.setPrincipalPassword(principal, password);\n\n          if (keyNumber != null) {\n            result = new CreatePrincipalResult(principal, password, keyNumber);\n            message = String.format(\"Successfully set password for %s\", principal);\n            LOG.debug(message);\n          } else {\n            message = String.format(\"Failed to set password for %s - unknown reason\", principal);\n            LOG.error(message);\n            if (actionLog != null) {\n              actionLog.writeStdErr(message);\n            }\n          }\n        } else {\n          message = String.format(\"Creating new principal, %s\", principal);\n          LOG.debug(message);\n\n          Integer keyNumber = kerberosOperationHandler.createPrincipal(principal, password, isServicePrincipal);\n\n          if (keyNumber != null) {\n            result = new CreatePrincipalResult(principal, password, keyNumber);\n            message = String.format(\"Successfully created new principal, %s\", principal);\n            LOG.debug(message);\n          } else {\n            message = String.format(\"Failed to create principal, %s - unknown reason\", principal);\n            LOG.error(message);\n            if (actionLog != null) {\n              actionLog.writeStdErr(message);\n            }\n          }\n        }\n\n        if (!kerberosPrincipalDAO.exists(principal)) {\n          kerberosPrincipalDAO.create(principal, isServicePrincipal);\n        }\n\n      } catch (KerberosOperationException e) {\n        message = String.format(\"Failed to create principal, %s - %s\", principal, e.getMessage());\n        LOG.error(message, e);\n        if (actionLog != null) {\n          actionLog.writeStdErr(message);\n        }\n      }\n    } finally {\n      if(result == null) {\n        auditEventBuilder.withReasonOfFailure(message == null ? \"Unknown error\" : message);\n      }\n      auditLog(auditEventBuilder.build());\n    }\n\n    return result;\n  }","id":5592,"modified_method":"/**\n   * Creates a principal in the relevant KDC\n   *\n   * @param principal                the principal name to create\n   * @param isServicePrincipal       true if the principal is a service principal; false if the\n   *                                 principal is a user principal\n   * @param kerberosConfiguration    the kerberos-env configuration properties\n   * @param kerberosOperationHandler the KerberosOperationHandler for the relevant KDC\n   * @param actionLog                the logger (may be null if no logging is desired)\n   * @return a CreatePrincipalResult containing the generated password and key number value\n   */\n  public CreatePrincipalResult createPrincipal(String principal, boolean isServicePrincipal,\n                                               Map<String, String> kerberosConfiguration,\n                                               KerberosOperationHandler kerberosOperationHandler,\n                                               ActionLog actionLog) {\n    CreatePrincipalKerberosAuditEvent.CreatePrincipalKerberosAuditEventBuilder auditEventBuilder = CreatePrincipalKerberosAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withRequestId(getHostRoleCommand().getRequestId())\n      .withTaskId(getHostRoleCommand().getTaskId())\n      .withPrincipal(principal);\n    CreatePrincipalResult result = null;\n    String message = null;\n    try {\n\n      message = String.format(\"Creating principal, %s\", principal);\n      LOG.info(message);\n      if (actionLog != null) {\n        actionLog.writeStdOut(message);\n      }\n\n      Integer length;\n      Integer minLowercaseLetters;\n      Integer minUppercaseLetters;\n      Integer minDigits;\n      Integer minPunctuation;\n      Integer minWhitespace;\n\n      if (kerberosConfiguration == null) {\n        length = null;\n        minLowercaseLetters = null;\n        minUppercaseLetters = null;\n        minDigits = null;\n        minPunctuation = null;\n        minWhitespace = null;\n      } else {\n        length = toInt(kerberosConfiguration.get(\"password_length\"));\n        minLowercaseLetters = toInt(kerberosConfiguration.get(\"password_min_lowercase_letters\"));\n        minUppercaseLetters = toInt(kerberosConfiguration.get(\"password_min_uppercase_letters\"));\n        minDigits = toInt(kerberosConfiguration.get(\"password_min_digits\"));\n        minPunctuation = toInt(kerberosConfiguration.get(\"password_min_punctuation\"));\n        minWhitespace = toInt(kerberosConfiguration.get(\"password_min_whitespace\"));\n      }\n\n      String password = securePasswordHelper.createSecurePassword(length, minLowercaseLetters, minUppercaseLetters, minDigits, minPunctuation, minWhitespace);\n\n      try {\n\n        if (kerberosOperationHandler.principalExists(principal)) {\n          // Create a new password since we need to know what it is.\n          // A new password/key would have been generated after exporting the keytab anyways.\n          message = String.format(\"Principal, %s, already exists, setting new password\", principal);\n          LOG.warn(message);\n          if (actionLog != null) {\n            actionLog.writeStdOut(message);\n          }\n\n          Integer keyNumber = kerberosOperationHandler.setPrincipalPassword(principal, password);\n\n          if (keyNumber != null) {\n            result = new CreatePrincipalResult(principal, password, keyNumber);\n            message = String.format(\"Successfully set password for %s\", principal);\n            LOG.debug(message);\n          } else {\n            message = String.format(\"Failed to set password for %s - unknown reason\", principal);\n            LOG.error(message);\n            if (actionLog != null) {\n              actionLog.writeStdErr(message);\n            }\n          }\n        } else {\n          message = String.format(\"Creating new principal, %s\", principal);\n          LOG.debug(message);\n\n          Integer keyNumber = kerberosOperationHandler.createPrincipal(principal, password, isServicePrincipal);\n\n          if (keyNumber != null) {\n            result = new CreatePrincipalResult(principal, password, keyNumber);\n            message = String.format(\"Successfully created new principal, %s\", principal);\n            LOG.debug(message);\n          } else {\n            message = String.format(\"Failed to create principal, %s - unknown reason\", principal);\n            LOG.error(message);\n            if (actionLog != null) {\n              actionLog.writeStdErr(message);\n            }\n          }\n        }\n\n        if (!kerberosPrincipalDAO.exists(principal)) {\n          kerberosPrincipalDAO.create(principal, isServicePrincipal);\n        }\n\n      } catch (KerberosOperationException e) {\n        message = String.format(\"Failed to create principal, %s - %s\", principal, e.getMessage());\n        LOG.error(message, e);\n        if (actionLog != null) {\n          actionLog.writeStdErr(message);\n        }\n      }\n    } finally {\n      if(result == null) {\n        auditEventBuilder.withReasonOfFailure(message == null ? \"Unknown error\" : message);\n      }\n      auditLog(auditEventBuilder.build());\n    }\n\n    return result;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n\n      builder.append(\", Principal(\")\n        .append(principal);\n    }","id":5593,"modified_method":"@Override\n    protected void buildAuditMessage(StringBuilder builder) {\n      super.buildAuditMessage(builder);\n\n      builder.append(\", Principal(\")\n        .append(principal)\n        .append(\")\");\n    }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * For each identity, remove the principal from the configured KDC.\n   *\n   * @param identityRecord           a Map containing the data for the current identity record\n   * @param evaluatedPrincipal       a String indicating the relevant principal\n   * @param operationHandler         a KerberosOperationHandler used to perform Kerberos-related\n   *                                 tasks for specific Kerberos implementations\n   *                                 (MIT, Active Directory, etc...)\n   * @param kerberosConfiguration    a Map of configuration properties from kerberos-env\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request  @return a CommandReport, indicating an error\n   *                                 condition; or null, indicating a success condition\n   * @throws org.apache.ambari.server.AmbariException if an error occurs while processing the identity record\n   */\n  @Override\n  protected CommandReport processIdentity(Map<String, String> identityRecord, String evaluatedPrincipal,\n                                          KerberosOperationHandler operationHandler,\n                                          Map<String, String> kerberosConfiguration,\n                                          Map<String, Object> requestSharedDataContext)\n      throws AmbariException {\n\n    String message = String.format(\"Destroying identity, %s\", evaluatedPrincipal);\n    LOG.info(message);\n    actionLog.writeStdOut(message);\n    DestroyPrincipalKerberosAuditEvent.DestroyPrincipalKerberosAuditEventBuilder auditEventBuilder = DestroyPrincipalKerberosAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withPrincipal(evaluatedPrincipal);\n\n    try {\n\n      try {\n        operationHandler.removePrincipal(evaluatedPrincipal);\n      } catch (KerberosOperationException e) {\n        message = String.format(\"Failed to remove identity for %s from the KDC - %s\", evaluatedPrincipal, e.getMessage());\n        LOG.warn(message);\n        actionLog.writeStdErr(message);\n        auditEventBuilder.withReasonOfFailure(message);\n      }\n\n      try {\n        KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);\n\n        if (principalEntity != null) {\n          String cachedKeytabPath = principalEntity.getCachedKeytabPath();\n\n          kerberosPrincipalDAO.remove(principalEntity);\n\n        // If a cached  keytabs file exists for this principal, delete it.\n        if (cachedKeytabPath != null) {\n          if (!new File(cachedKeytabPath).delete()) {\n            LOG.debug(String.format(\"Failed to remove cached keytab for %s\", evaluatedPrincipal));\n          }\n        }\n      }\n\n      // delete Ambari server keytab\n      String hostName = identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);\n      if (hostName != null && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {\n        String keytabFilePath = identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);\n        if (keytabFilePath != null) {\n          if (!new File(keytabFilePath).delete()) {\n            LOG.debug(String.format(\"Failed to remove ambari keytab for %s\", evaluatedPrincipal));\n          }\n        }\n      }\n    } catch (Throwable t) {\n        message = String.format(\"Failed to remove identity for %s from the Ambari database - %s\", evaluatedPrincipal, t.getMessage());\n        LOG.warn(message);\n        actionLog.writeStdErr(message);\n        auditEventBuilder.withReasonOfFailure(message);\n      }\n    } finally {\n      auditLog(auditEventBuilder.build());\n    }\n\n    // There is no reason to fail this task if an identity was not removed. The cluster will work\n    // just fine if this cleanup process fails.\n    return null;\n  }","id":5594,"modified_method":"/**\n   * For each identity, remove the principal from the configured KDC.\n   *\n   * @param identityRecord           a Map containing the data for the current identity record\n   * @param evaluatedPrincipal       a String indicating the relevant principal\n   * @param operationHandler         a KerberosOperationHandler used to perform Kerberos-related\n   *                                 tasks for specific Kerberos implementations\n   *                                 (MIT, Active Directory, etc...)\n   * @param kerberosConfiguration    a Map of configuration properties from kerberos-env\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request  @return a CommandReport, indicating an error\n   *                                 condition; or null, indicating a success condition\n   * @throws org.apache.ambari.server.AmbariException if an error occurs while processing the identity record\n   */\n  @Override\n  protected CommandReport processIdentity(Map<String, String> identityRecord, String evaluatedPrincipal,\n                                          KerberosOperationHandler operationHandler,\n                                          Map<String, String> kerberosConfiguration,\n                                          Map<String, Object> requestSharedDataContext)\n      throws AmbariException {\n\n    String message = String.format(\"Destroying identity, %s\", evaluatedPrincipal);\n    LOG.info(message);\n    actionLog.writeStdOut(message);\n    DestroyPrincipalKerberosAuditEvent.DestroyPrincipalKerberosAuditEventBuilder auditEventBuilder = DestroyPrincipalKerberosAuditEvent.builder()\n      .withTimestamp(System.currentTimeMillis())\n      .withRequestId(getHostRoleCommand().getRequestId())\n      .withTaskId(getHostRoleCommand().getTaskId())\n      .withPrincipal(evaluatedPrincipal);\n\n    try {\n\n      try {\n        operationHandler.removePrincipal(evaluatedPrincipal);\n      } catch (KerberosOperationException e) {\n        message = String.format(\"Failed to remove identity for %s from the KDC - %s\", evaluatedPrincipal, e.getMessage());\n        LOG.warn(message);\n        actionLog.writeStdErr(message);\n        auditEventBuilder.withReasonOfFailure(message);\n      }\n\n      try {\n        KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);\n\n        if (principalEntity != null) {\n          String cachedKeytabPath = principalEntity.getCachedKeytabPath();\n\n          kerberosPrincipalDAO.remove(principalEntity);\n\n        // If a cached  keytabs file exists for this principal, delete it.\n        if (cachedKeytabPath != null) {\n          if (!new File(cachedKeytabPath).delete()) {\n            LOG.debug(String.format(\"Failed to remove cached keytab for %s\", evaluatedPrincipal));\n          }\n        }\n      }\n\n      // delete Ambari server keytab\n      String hostName = identityRecord.get(KerberosIdentityDataFileReader.HOSTNAME);\n      if (hostName != null && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {\n        String keytabFilePath = identityRecord.get(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH);\n        if (keytabFilePath != null) {\n          if (!new File(keytabFilePath).delete()) {\n            LOG.debug(String.format(\"Failed to remove ambari keytab for %s\", evaluatedPrincipal));\n          }\n        }\n      }\n    } catch (Throwable t) {\n        message = String.format(\"Failed to remove identity for %s from the Ambari database - %s\", evaluatedPrincipal, t.getMessage());\n        LOG.warn(message);\n        actionLog.writeStdErr(message);\n        auditEventBuilder.withReasonOfFailure(message);\n      }\n    } finally {\n      auditLog(auditEventBuilder.build());\n    }\n\n    // There is no reason to fail this task if an identity was not removed. The cluster will work\n    // just fine if this cleanup process fails.\n    return null;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request\n   * @return\n   * @throws AmbariException\n   * @throws InterruptedException\n   */\n  @Override\n  public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException {\n    String dataDirectoryPath = getCommandParameterValue(DATA_DIRECTORY);\n\n    // Set the ServiceComponentHost from a transitional state to the desired endpoint state\n    Map<String, Host> hosts = getClusters().getHostsForCluster(getClusterName());\n    if ((hosts != null) && !hosts.isEmpty()) {\n      Cluster cluster = getCluster();\n      for (String hostname : hosts.keySet()) {\n        List<ServiceComponentHost> serviceComponentHosts = cluster.getServiceComponentHosts(hostname);\n\n        for (ServiceComponentHost sch : serviceComponentHosts) {\n          SecurityState securityState = sch.getSecurityState();\n          if (securityState.isTransitional()) {\n            String message = String.format(\"Setting securityState for %s/%s on host %s to state %s\",\n                sch.getServiceName(), sch.getServiceComponentName(), sch.getHostName(),\n                sch.getDesiredSecurityState().toString());\n            LOG.info(message);\n            actionLog.writeStdOut(message);\n\n            sch.setSecurityState(sch.getDesiredSecurityState());\n            ChangeSecurityStateKerberosAuditEvent auditEvent = ChangeSecurityStateKerberosAuditEvent.builder()\n              .withTimestamp(System.currentTimeMillis())\n              .withService(sch.getServiceName())\n              .withComponent(sch.getServiceComponentName())\n              .withHostName(sch.getHostName())\n              .withState(sch.getDesiredSecurityState().toString())\n              .build();\n            auditLog(auditEvent);\n          }\n        }\n      }\n    }\n\n    // Make sure this is a relevant directory. We don't want to accidentally allow _ANY_ directory\n    // to be deleted.\n    if ((dataDirectoryPath != null) && dataDirectoryPath.contains(\"/\" + DATA_DIRECTORY_PREFIX)) {\n      File dataDirectory = new File(dataDirectoryPath);\n      File dataDirectoryParent = dataDirectory.getParentFile();\n\n      // Make sure this directory has a parent and it is writeable, else we wont be able to\n      // delete the directory\n      if ((dataDirectoryParent != null) && dataDirectory.isDirectory() &&\n          dataDirectoryParent.isDirectory() && dataDirectoryParent.canWrite()) {\n        try {\n          FileUtils.deleteDirectory(dataDirectory);\n        } catch (IOException e) {\n          // We should log this exception, but don't let it fail the process since if we got to this\n          // KerberosServerAction it is expected that the the overall process was a success.\n          String message = String.format(\"The data directory (%s) was not deleted due to an error condition - {%s}\",\n              dataDirectory.getAbsolutePath(), e.getMessage());\n          LOG.warn(message, e);\n        }\n      }\n    }\n\n    return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n  }","id":5595,"modified_method":"/**\n   * @param requestSharedDataContext a Map to be used a shared data among all ServerActions related\n   *                                 to a given request\n   * @return\n   * @throws AmbariException\n   * @throws InterruptedException\n   */\n  @Override\n  public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException {\n    String dataDirectoryPath = getCommandParameterValue(DATA_DIRECTORY);\n\n    // Set the ServiceComponentHost from a transitional state to the desired endpoint state\n    Map<String, Host> hosts = getClusters().getHostsForCluster(getClusterName());\n    if ((hosts != null) && !hosts.isEmpty()) {\n      Cluster cluster = getCluster();\n      for (String hostname : hosts.keySet()) {\n        List<ServiceComponentHost> serviceComponentHosts = cluster.getServiceComponentHosts(hostname);\n\n        for (ServiceComponentHost sch : serviceComponentHosts) {\n          SecurityState securityState = sch.getSecurityState();\n          if (securityState.isTransitional()) {\n            String message = String.format(\"Setting securityState for %s/%s on host %s to state %s\",\n                sch.getServiceName(), sch.getServiceComponentName(), sch.getHostName(),\n                sch.getDesiredSecurityState().toString());\n            LOG.info(message);\n            actionLog.writeStdOut(message);\n\n            sch.setSecurityState(sch.getDesiredSecurityState());\n            ChangeSecurityStateKerberosAuditEvent auditEvent = ChangeSecurityStateKerberosAuditEvent.builder()\n              .withTimestamp(System.currentTimeMillis())\n              .withService(sch.getServiceName())\n              .withComponent(sch.getServiceComponentName())\n              .withHostName(sch.getHostName())\n              .withState(sch.getDesiredSecurityState().toString())\n              .withRequestId(getHostRoleCommand().getRequestId())\n              .withTaskId(getHostRoleCommand().getTaskId())\n              .build();\n            auditLog(auditEvent);\n          }\n        }\n      }\n    }\n\n    // Make sure this is a relevant directory. We don't want to accidentally allow _ANY_ directory\n    // to be deleted.\n    if ((dataDirectoryPath != null) && dataDirectoryPath.contains(\"/\" + DATA_DIRECTORY_PREFIX)) {\n      File dataDirectory = new File(dataDirectoryPath);\n      File dataDirectoryParent = dataDirectory.getParentFile();\n\n      // Make sure this directory has a parent and it is writeable, else we wont be able to\n      // delete the directory\n      if ((dataDirectoryParent != null) && dataDirectory.isDirectory() &&\n          dataDirectoryParent.isDirectory() && dataDirectoryParent.canWrite()) {\n        try {\n          FileUtils.deleteDirectory(dataDirectory);\n        } catch (IOException e) {\n          // We should log this exception, but don't let it fail the process since if we got to this\n          // KerberosServerAction it is expected that the the overall process was a success.\n          String message = String.format(\"The data directory (%s) was not deleted due to an error condition - {%s}\",\n              dataDirectory.getAbsolutePath(), e.getMessage());\n          LOG.warn(message, e);\n        }\n      }\n    }\n\n    return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns component name from the request\n   * @param request\n   * @return\n   */\n  private String getHostComponent(Request request) {\n    if (!request.getBody().getNamedPropertySets().isEmpty()) {\n      Set<Map<String, String>> set = (Set<Map<String, String>>) request.getBody().getNamedPropertySets().iterator().next().getProperties().get(\"host_components\");\n      if (set != null && !set.isEmpty()) {\n        return set.iterator().next().get(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);\n      }\n    }\n    return null;\n  }","id":5596,"modified_method":"/**\n   * Returns component name from the request\n   * @param request\n   * @return\n   */\n  private Set<String> getHostComponents(Request request) {\n    Set<String> components = new HashSet<>();\n    NamedPropertySet propertySet = Iterables.getFirst(request.getBody().getNamedPropertySets(), null);\n    if (propertySet != null && propertySet.getProperties().get(\"host_components\") instanceof Set) {\n      Set<Map<String, String>> set = (Set<Map<String, String>>) propertySet.getProperties().get(\"host_components\");\n      if (set != null && !set.isEmpty()) {\n        for(Map<String, String> element : set) {\n          components.add(element.get(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID));\n        }\n      }\n    }\n    return components;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    switch (request.getRequestType()) {\n      case DELETE:\n        return DeleteHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(request.getResource().getKeyValueMap().get(Resource.Type.Host))\n          .build();\n      case POST:\n        return AddHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(RequestAuditEventCreatorHelper.getNamedProperty(request, HostResourceProvider.HOST_NAME_PROPERTY_ID))\n          .build();\n      case QUERY_POST:\n        return AddComponentToHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(getHostNameFromQuery(request))\n          .withComponent(getHostComponent(request))\n          .build();\n      default:\n        return null;\n    }\n  }","id":5597,"modified_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    switch (request.getRequestType()) {\n      case DELETE:\n        return DeleteHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(request.getResource().getKeyValueMap().get(Resource.Type.Host))\n          .build();\n      case POST:\n        return AddHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(RequestAuditEventCreatorHelper.getNamedProperty(request, HostResourceProvider.HOST_NAME_PROPERTY_ID))\n          .build();\n      case QUERY_POST:\n        return AddComponentToHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(getHostNameFromQuery(request))\n          .withComponents(getHostComponents(request))\n          .build();\n      default:\n        return null;\n    }\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns hostname from the query string of the request\n   * @param request\n   * @return\n   */\n  private String getHostNameFromQuery(Request request) {\n    final String key = HostResourceProvider.HOST_NAME_PROPERTY_ID;\n    if (request.getBody().getQueryString().contains(key)) {\n      String q = request.getBody().getQueryString();\n      int startIndex = q.indexOf(key) + key.length() + 1;\n      int endIndex = q.indexOf(\"&\", startIndex) == -1 ? q.length() : q.indexOf(\"&\", startIndex);\n      return q.substring(startIndex, endIndex);\n    }\n    return null;\n  }","id":5598,"modified_method":"/**\n   * Returns hostname from the query string of the request\n   * @param request\n   * @return\n   */\n  private String getHostNameFromQuery(Request request) {\n    final String key = HostResourceProvider.HOST_NAME_PROPERTY_ID;\n    if (request.getURI().contains(key)) {\n      Pattern pattern = Pattern.compile(\".*\" + key + \"\\\\s*=\\\\s*([^&\\\\s]+).*\");\n      Matcher matcher = pattern.matcher(request.getURI());\n      if(matcher.find()) {\n        return matcher.group(1);\n      }\n    }\n    return null;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    Map<String, List<String>> users = getEntities(request, PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME);\n    Map<String, List<String>> groups = getEntities(request, PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME);\n\n    switch (request.getRequestType()) {\n      case PUT:\n        return ClusterPrivilegeChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withUsers(users)\n          .withGroups(groups)\n          .build();\n      case POST:\n        String role = users.isEmpty() ? (groups.isEmpty() ? null : groups.keySet().iterator().next()) : users.keySet().iterator().next();\n        return PrivilegeChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withRole(role)\n          .withGroup(groups.get(role) == null ? null : groups.get(role).get(0))\n          .withUser(users.get(role) == null ? null : users.get(role).get(0))\n          .withOperation((users.isEmpty() ? (groups.isEmpty() ? \"\" : \"Group \") : \"User \") + \"role change\")\n          .build();\n      default:\n        return null;\n    }\n  }","id":5599,"modified_method":"/**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    Map<String, List<String>> users = getEntities(request, PrincipalTypeEntity.USER_PRINCIPAL_TYPE_NAME);\n    Map<String, List<String>> groups = getEntities(request, PrincipalTypeEntity.GROUP_PRINCIPAL_TYPE_NAME);\n\n    switch (request.getRequestType()) {\n      case PUT:\n        return ClusterPrivilegeChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withUsers(users)\n          .withGroups(groups)\n          .build();\n      case POST:\n        String role = users.isEmpty() ? Iterables.getFirst(groups.keySet(), null) : Iterables.getFirst(users.keySet(), null);\n        return PrivilegeChangeRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withRole(role)\n          .withGroup(groups.get(role) == null ? null : groups.get(role).get(0))\n          .withUser(users.get(role) == null ? null : users.get(role).get(0))\n          .withOperation((users.isEmpty() ? (groups.isEmpty() ? \"\" : \"Group \") : \"User \") + \"role change\")\n          .build();\n      default:\n        return null;\n    }\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Assembles repositories from the request\n   * operating system -> list of repositories where the repository is a map of properties (repo_id, repo_name, base_url)\n   * @param request\n   * @return a map of repositories\n   */\n  private Map<String, List<Map<String, String>>> getRepos(Request request) {\n\n    Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();\n\n    if (!request.getBody().getPropertySets().isEmpty()) {\n      if (request.getBody().getPropertySets().iterator().next().get(\"operating_systems\") instanceof Set) {\n        Set<Object> set = (Set<Object>) request.getBody().getPropertySets().iterator().next().get(\"operating_systems\");\n\n        result = createResultForOperationSystems(set);\n      }\n    }\n    return result;\n  }","id":5600,"modified_method":"/**\n   * Assembles repositories from the request\n   * operating system -> list of repositories where the repository is a map of properties (repo_id, repo_name, base_url)\n   * @param request\n   * @return a map of repositories\n   */\n  private Map<String, List<Map<String, String>>> getRepos(Request request) {\n\n    Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();\n\n    Map<String, Object> first = Iterables.getFirst(request.getBody().getPropertySets(), null);\n\n    if (first != null && first.get(\"operating_systems\") instanceof Set) {\n      Set<Object> set = (Set<Object>) first.get(\"operating_systems\");\n      result = createResultForOperationSystems(set);\n    }\n    return result;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns a list of named properties from a request\n   * @param request\n   * @param propertyName\n   * @return\n   */\n  public static List<String> getNamedPropertyList(Request request, String propertyName) {\n    if (isValidList(request, propertyName)) {\n      List<String> list = (List<String>) request.getBody().getNamedPropertySets().iterator().next().getProperties().get(propertyName);\n      if (list != null) {\n        return list;\n      }\n    }\n    return Collections.emptyList();\n  }","id":5601,"modified_method":"/**\n   * Returns a list of named properties from a request\n   * @param request\n   * @param propertyName\n   * @return\n   */\n  public static List<String> getNamedPropertyList(Request request, String propertyName) {\n    NamedPropertySet first = Iterables.getFirst(request.getBody().getNamedPropertySets(), null);\n    if (first != null && first.getProperties().get(propertyName) instanceof List) {\n      List<String> list = (List<String>) first.getProperties().get(propertyName);\n      if (list != null) {\n        return list;\n      }\n    }\n    return Collections.emptyList();\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns a named property from a request\n   * @param request\n   * @param propertyName\n   * @return\n   */\n  public static String getNamedProperty(Request request, String propertyName) {\n    if (isValid(request, propertyName)) {\n      return String.valueOf(request.getBody().getNamedPropertySets().iterator().next().getProperties().get(propertyName));\n    }\n    return null;\n  }","id":5602,"modified_method":"/**\n   * Returns a named property from a request\n   * @param request\n   * @param propertyName\n   * @return\n   */\n  public static String getNamedProperty(Request request, String propertyName) {\n    NamedPropertySet first = Iterables.getFirst(request.getBody().getNamedPropertySets(), null);\n    if (first != null && first.getProperties().get(propertyName) instanceof String) {\n      return String.valueOf(first.getProperties().get(propertyName));\n    }\n    return null;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns the username from the request\n   * @param request\n   * @return\n   */\n  private String getUsername(Request request) {\n    if (!request.getBody().getPropertySets().isEmpty()) {\n      return String.valueOf(request.getBody().getPropertySets().iterator().next().get(UserResourceProvider.USER_USERNAME_PROPERTY_ID));\n    }\n    return null;\n  }","id":5603,"modified_method":"/**\n   * Returns the username from the request\n   * @param request\n   * @return\n   */\n  private String getUsername(Request request) {\n    Map<String, Object> first = Iterables.getFirst(request.getBody().getPropertySets(), null);\n    if (first != null) {\n      return String.valueOf(first.get(UserResourceProvider.USER_USERNAME_PROPERTY_ID));\n    }\n    return null;\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns if the request contains active property\n   * @param request\n   * @return\n   */\n  private boolean hasActive(Request request) {\n    return !request.getBody().getPropertySets().isEmpty() && request.getBody().getPropertySets().iterator().next().containsKey(UserResourceProvider.USER_ACTIVE_PROPERTY_ID);\n  }","id":5604,"modified_method":"/**\n   * Returns if the request contains active property\n   * @param request\n   * @return\n   */\n  private boolean hasActive(Request request) {\n    Map<String, Object> first = Iterables.getFirst(request.getBody().getPropertySets(), null);\n    return first != null && first.containsKey(UserResourceProvider.USER_ACTIVE_PROPERTY_ID);\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns if the request contains admin property\n   * @param request\n   * @return\n   */\n  private boolean hasAdmin(Request request) {\n    return !request.getBody().getPropertySets().isEmpty() && request.getBody().getPropertySets().iterator().next().containsKey(UserResourceProvider.USER_ADMIN_PROPERTY_ID);\n  }","id":5605,"modified_method":"/**\n   * Returns if the request contains admin property\n   * @param request\n   * @return\n   */\n  private boolean hasAdmin(Request request) {\n    Map<String, Object> first = Iterables.getFirst(request.getBody().getPropertySets(), null);\n    return first != null && first.containsKey(UserResourceProvider.USER_ADMIN_PROPERTY_ID);\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Returns if the request contains old password field\n   * @param request\n   * @return\n   */\n  private boolean hasOldPassword(Request request) {\n    return !request.getBody().getPropertySets().isEmpty() && request.getBody().getPropertySets().iterator().next().containsKey(UserResourceProvider.USER_OLD_PASSWORD_PROPERTY_ID);\n  }","id":5606,"modified_method":"/**\n   * Returns if the request contains old password field\n   * @param request\n   * @return\n   */\n  private boolean hasOldPassword(Request request) {\n    Map<String, Object> first = Iterables.getFirst(request.getBody().getPropertySets(), null);\n    return first != null && first.containsKey(UserResourceProvider.USER_OLD_PASSWORD_PROPERTY_ID);\n  }","commit_id":"af13ef73931bf672536199b944d4c3e26ad24ac4","url":"https://github.com/apache/ambari"},{"original_method":"public void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\tOsmPoint[] toUpload = points;\n\t\tProgressDialog dialog = ProgressImplementation.createProgressDialog(getActivity(),\n\t\t\t\tgetString(R.string.uploading), getString(R.string.local_openstreetmap_uploading),\n\t\t\t\tProgressDialog.STYLE_HORIZONTAL).getDialog();\n\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getActivity(),\n\t\t\t\tgetString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t@Override\n\t\t\tpublic void uploadUpdated(OsmPoint point) {\n\t\t\t\tsuper.uploadUpdated(point);\n\t\t\t\tif (DashOsmEditsFragment.this.isAdded()) {\n\t\t\t\t\tonOpenDash();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\tif (DashOsmEditsFragment.this.isAdded()) {\n\t\t\t\t\tonOpenDash();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(dialog,\n\t\t\t\tlistener, plugin, toUpload.length, closeChangeSet);\n\t\tuploadTask.execute(toUpload);\n\t\tdialog.show();\n\t}","id":5607,"modified_method":"public void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\tOsmPoint[] toUpload = points;\n\t\tProgressDialogFragment dialog = ProgressDialogFragment.createInstance(R.string.uploading,\n\t\t\t\tR.string.local_openstreetmap_uploading, ProgressDialog.STYLE_HORIZONTAL);\n\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getActivity(),\n\t\t\t\tgetString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t@Override\n\t\t\tpublic void uploadUpdated(OsmPoint point) {\n\t\t\t\tsuper.uploadUpdated(point);\n\t\t\t\tif (DashOsmEditsFragment.this.isAdded()) {\n\t\t\t\t\tonOpenDash();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\tif (DashOsmEditsFragment.this.isAdded()) {\n\t\t\t\t\tonOpenDash();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tdialog.show(getChildFragmentManager(), ProgressDialogFragment.TAG);\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(dialog,\n\t\t\t\tlistener, plugin, toUpload.length, closeChangeSet);\n\t\tuploadTask.execute(toUpload);\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public EditPOIMenuController(OsmandApplication app, MapActivity mapActivity, PointDescription pointDescription, OsmPoint osmPoint) {\n\t\tsuper(new EditPOIMenuBuilder(app, osmPoint), pointDescription, mapActivity);\n\t\tthis.osmPoint = osmPoint;\n\t\tplugin = OsmandPlugin.getPlugin(OsmEditingPlugin.class);\n\n\t\tpoiUploader = new ProgressDialogPoiUploader() {\n\t\t\t@Override\n\t\t\tpublic void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\t\t\tProgressDialog dialog = ProgressImplementation.createProgressDialog(\n\t\t\t\t\t\tgetMapActivity(),\n\t\t\t\t\t\tgetMapActivity().getString(R.string.uploading),\n\t\t\t\t\t\tgetMapActivity().getString(R.string.local_openstreetmap_uploading),\n\t\t\t\t\t\tProgressDialog.STYLE_HORIZONTAL).getDialog();\n\t\t\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getMapActivity(),\n\t\t\t\t\t\tgetMapActivity().getString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\t\t\tgetMapActivity().getContextMenu().close();\n\t\t\t\t\t\tOsmBugsLayer l = getMapActivity().getMapView().getLayerByClass(OsmBugsLayer.class);\n\t\t\t\t\t\tif(l != null) {\n\t\t\t\t\t\t\tl.clearCache();\n\t\t\t\t\t\t\tgetMapActivity().refreshMap();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\t\t\tdialog, listener, plugin, points.length, closeChangeSet);\n\t\t\t\tuploadTask.execute(points);\n\n\t\t\t\tdialog.show();\n\t\t\t}\n\t\t};\n\n\t\tleftTitleButtonController = new TitleButtonController() {\n\t\t\t@Override\n\t\t\tpublic void buttonPressed() {\n\t\t\t\tif (plugin != null) {\n\t\t\t\t\tSendPoiDialogFragment sendPoiDialogFragment = SendPoiDialogFragment.createInstance(new OsmPoint[]{getOsmPoint()});\n\t\t\t\t\tsendPoiDialogFragment.setPoiUploader(poiUploader);\n\t\t\t\t\tsendPoiDialogFragment.show(getMapActivity().getSupportFragmentManager(), SendPoiDialogFragment.TAG);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tleftTitleButtonController.caption = getMapActivity().getString(R.string.shared_string_upload);\n\t\tleftTitleButtonController.leftIconId = R.drawable.ic_action_export;\n\n\t\trightTitleButtonController = new TitleButtonController() {\n\t\t\t@Override\n\t\t\tpublic void buttonPressed() {\n\t\t\t\tAccessibleAlertBuilder bld = new AccessibleAlertBuilder(getMapActivity());\n\t\t\t\tbld.setMessage(R.string.recording_delete_confirm);\n\t\t\t\tbld.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tif (plugin != null) {\n\t\t\t\t\t\t\tboolean deleted = false;\n\t\t\t\t\t\t\tOsmPoint point = getOsmPoint();\n\t\t\t\t\t\t\tif (point instanceof OsmNotesPoint) {\n\t\t\t\t\t\t\t\tdeleted = plugin.getDBBug().deleteAllBugModifications((OsmNotesPoint) point);\n\t\t\t\t\t\t\t} else if (point instanceof OpenstreetmapPoint) {\n\t\t\t\t\t\t\t\tdeleted = plugin.getDBPOI().deletePOI((OpenstreetmapPoint) point);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (deleted) {\n\t\t\t\t\t\t\t\tgetMapActivity().getContextMenu().close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbld.setNegativeButton(R.string.shared_string_no, null);\n\t\t\t\tbld.show();\n\t\t\t}\n\t\t};\n\t\trightTitleButtonController.caption = getMapActivity().getString(R.string.shared_string_delete);\n\t\trightTitleButtonController.leftIconId = R.drawable.ic_action_delete_dark;\n\n\t\tif (osmPoint.getGroup() == OsmPoint.Group.POI) {\n\t\t\tif(osmPoint.getAction() == Action.DELETE) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_deleted_poi);\n\t\t\t} else if(osmPoint.getAction() == Action.MODIFY) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_modified_poi);\n\t\t\t} else/* if(osmPoint.getAction() == Action.CREATE) */{\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_created_poi);\n\t\t\t}\n\t\t\t\n\t\t} else if (osmPoint.getGroup() == OsmPoint.Group.BUG) {\n\t\t\tif(osmPoint.getAction() == Action.DELETE) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_removed_note);\n\t\t\t} else if(osmPoint.getAction() == Action.MODIFY) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_commented_note);\n\t\t\t} else if(osmPoint.getAction() == Action.REOPEN) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_reopened_note);\n\t\t\t} else/* if(osmPoint.getAction() == Action.CREATE) */{\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_created_note);\n\t\t\t}\n\t\t} else {\n\t\t\tpointTypeStr = \"\";\n\t\t}\n\t}","id":5608,"modified_method":"public EditPOIMenuController(OsmandApplication app, final MapActivity mapActivity, PointDescription pointDescription, OsmPoint osmPoint) {\n\t\tsuper(new EditPOIMenuBuilder(app, osmPoint), pointDescription, mapActivity);\n\t\tthis.osmPoint = osmPoint;\n\t\tplugin = OsmandPlugin.getPlugin(OsmEditingPlugin.class);\n\n\t\tpoiUploader = new ProgressDialogPoiUploader() {\n\t\t\t@Override\n\t\t\tpublic void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\t\t\tProgressDialogFragment dialog = ProgressDialogFragment.createInstance(\n\t\t\t\t\t\tR.string.uploading,\n\t\t\t\t\t\tR.string.local_openstreetmap_uploading,\n\t\t\t\t\t\tProgressDialog.STYLE_HORIZONTAL);\n\t\t\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getMapActivity(),\n\t\t\t\t\t\tgetMapActivity().getString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\t\t\tgetMapActivity().getContextMenu().close();\n\t\t\t\t\t\tOsmBugsLayer l = getMapActivity().getMapView().getLayerByClass(OsmBugsLayer.class);\n\t\t\t\t\t\tif(l != null) {\n\t\t\t\t\t\t\tl.clearCache();\n\t\t\t\t\t\t\tgetMapActivity().refreshMap();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tdialog.show(mapActivity.getSupportFragmentManager(), ProgressDialogFragment.TAG);\n\t\t\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\t\t\tdialog, listener, plugin, points.length, closeChangeSet);\n\t\t\t\tuploadTask.execute(points);\n\t\t\t}\n\t\t};\n\n\t\tleftTitleButtonController = new TitleButtonController() {\n\t\t\t@Override\n\t\t\tpublic void buttonPressed() {\n\t\t\t\tif (plugin != null) {\n\t\t\t\t\tSendPoiDialogFragment sendPoiDialogFragment = SendPoiDialogFragment.createInstance(new OsmPoint[]{getOsmPoint()});\n\t\t\t\t\tsendPoiDialogFragment.setPoiUploader(poiUploader);\n\t\t\t\t\tsendPoiDialogFragment.show(getMapActivity().getSupportFragmentManager(), SendPoiDialogFragment.TAG);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tleftTitleButtonController.caption = getMapActivity().getString(R.string.shared_string_upload);\n\t\tleftTitleButtonController.leftIconId = R.drawable.ic_action_export;\n\n\t\trightTitleButtonController = new TitleButtonController() {\n\t\t\t@Override\n\t\t\tpublic void buttonPressed() {\n\t\t\t\tAccessibleAlertBuilder bld = new AccessibleAlertBuilder(getMapActivity());\n\t\t\t\tbld.setMessage(R.string.recording_delete_confirm);\n\t\t\t\tbld.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tif (plugin != null) {\n\t\t\t\t\t\t\tboolean deleted = false;\n\t\t\t\t\t\t\tOsmPoint point = getOsmPoint();\n\t\t\t\t\t\t\tif (point instanceof OsmNotesPoint) {\n\t\t\t\t\t\t\t\tdeleted = plugin.getDBBug().deleteAllBugModifications((OsmNotesPoint) point);\n\t\t\t\t\t\t\t} else if (point instanceof OpenstreetmapPoint) {\n\t\t\t\t\t\t\t\tdeleted = plugin.getDBPOI().deletePOI((OpenstreetmapPoint) point);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (deleted) {\n\t\t\t\t\t\t\t\tgetMapActivity().getContextMenu().close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbld.setNegativeButton(R.string.shared_string_no, null);\n\t\t\t\tbld.show();\n\t\t\t}\n\t\t};\n\t\trightTitleButtonController.caption = getMapActivity().getString(R.string.shared_string_delete);\n\t\trightTitleButtonController.leftIconId = R.drawable.ic_action_delete_dark;\n\n\t\tif (osmPoint.getGroup() == OsmPoint.Group.POI) {\n\t\t\tif(osmPoint.getAction() == Action.DELETE) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_deleted_poi);\n\t\t\t} else if(osmPoint.getAction() == Action.MODIFY) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_modified_poi);\n\t\t\t} else/* if(osmPoint.getAction() == Action.CREATE) */{\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_created_poi);\n\t\t\t}\n\t\t\t\n\t\t} else if (osmPoint.getGroup() == OsmPoint.Group.BUG) {\n\t\t\tif(osmPoint.getAction() == Action.DELETE) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_removed_note);\n\t\t\t} else if(osmPoint.getAction() == Action.MODIFY) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_commented_note);\n\t\t\t} else if(osmPoint.getAction() == Action.REOPEN) {\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_reopened_note);\n\t\t\t} else/* if(osmPoint.getAction() == Action.CREATE) */{\n\t\t\t\tpointTypeStr = getMapActivity().getString(R.string.osm_edit_created_note);\n\t\t\t}\n\t\t} else {\n\t\t\tpointTypeStr = \"\";\n\t\t}\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\tProgressDialog dialog = ProgressImplementation.createProgressDialog(\n\t\t\t\tgetActivity(),\n\t\t\t\tgetString(R.string.uploading),\n\t\t\t\tgetString(R.string.local_openstreetmap_uploading),\n\t\t\t\tProgressDialog.STYLE_HORIZONTAL).getDialog();\n\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getActivity(),\n\t\t\t\tgetString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t@Override\n\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\tfor (OsmPoint osmPoint : loadErrorsMap.keySet()) {\n\t\t\t\t\tif (loadErrorsMap.get(osmPoint) == null) {\n\t\t\t\t\t\tlistAdapter.remove(osmPoint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlistAdapter.notifyDataSetChanged();\n\t\t\t}\n\t\t};\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\tdialog, listener, plugin, points.length, closeChangeSet);\n\t\tuploadTask.execute(points);\n\n\t\tdialog.show();\n\t}","id":5609,"modified_method":"public void showProgressDialog(OsmPoint[] points, boolean closeChangeSet) {\n\t\tProgressDialogFragment dialog = ProgressDialogFragment.createInstance(\n\t\t\t\tR.string.uploading,\n\t\t\t\tR.string.local_openstreetmap_uploading,\n\t\t\t\tProgressDialog.STYLE_HORIZONTAL);\n\t\tOsmEditsUploadListener listener = new OsmEditsUploadListenerHelper(getActivity(),\n\t\t\t\tgetString(R.string.local_openstreetmap_were_uploaded)) {\n\t\t\t@Override\n\t\t\tpublic void uploadEnded(Map<OsmPoint, String> loadErrorsMap) {\n\t\t\t\tsuper.uploadEnded(loadErrorsMap);\n\t\t\t\tfor (OsmPoint osmPoint : loadErrorsMap.keySet()) {\n\t\t\t\t\tif (loadErrorsMap.get(osmPoint) == null) {\n\t\t\t\t\t\tlistAdapter.remove(osmPoint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlistAdapter.notifyDataSetChanged();\n\t\t\t}\n\t\t};\n\t\tdialog.show(getActivity().getSupportFragmentManager(), ProgressDialogFragment.TAG);\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\tdialog, listener, plugin, points.length, closeChangeSet);\n\t\tuploadTask.execute(points);\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private static void showUploadItemsProgressDialog(Fragment fragment, OsmPoint[] toUpload) {\n\t\tFragmentActivity activity = fragment.getActivity();\n\t\tOsmEditingPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmEditingPlugin.class);\n\t\tOsmEditsUploadListenerHelper helper = new OsmEditsUploadListenerHelper(activity,\n\t\t\t\tactivity.getResources().getString(R.string.local_openstreetmap_were_uploaded));\n\n\t\tResources resources = activity.getResources();\n\t\tProgressDialog dialog = ProgressImplementation.createProgressDialog(\n\t\t\t\tactivity,\n\t\t\t\tresources.getString(R.string.uploading),\n\t\t\t\tresources.getString(R.string.local_openstreetmap_uploading),\n\t\t\t\tProgressDialog.STYLE_HORIZONTAL).getDialog();\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\tdialog, helper, plugin, toUpload.length, false);\n\t\tuploadTask.execute(toUpload);\n\n\t\tdialog.show();\n\t}","id":5610,"modified_method":"private static void showUploadItemsProgressDialog(Fragment fragment, OsmPoint[] toUpload) {\n\t\tFragmentActivity activity = fragment.getActivity();\n\t\tOsmEditingPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmEditingPlugin.class);\n\t\tOsmEditsUploadListenerHelper helper = new OsmEditsUploadListenerHelper(activity,\n\t\t\t\tactivity.getResources().getString(R.string.local_openstreetmap_were_uploaded));\n\n\t\tResources resources = activity.getResources();\n\t\tProgressDialogFragment dialog = ProgressDialogFragment.createInstance(\n\t\t\t\tR.string.uploading,\n\t\t\t\tR.string.local_openstreetmap_uploading,\n\t\t\t\tProgressDialog.STYLE_HORIZONTAL);\n\t\tdialog.show(activity.getSupportFragmentManager(), ProgressDialogFragment.TAG);\n\t\tUploadOpenstreetmapPointAsyncTask uploadTask = new UploadOpenstreetmapPointAsyncTask(\n\t\t\t\tdialog, helper, plugin, toUpload.length, false);\n\t\tuploadTask.execute(toUpload);\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onPreExecute() {\n\t\tinterruptUploading = false;\n\n\t\tprogress.setOnCancelListener(new DialogInterface.OnCancelListener() {\n\t\t\t@Override\n\t\t\tpublic void onCancel(DialogInterface dialog) {\n\t\t\t\tUploadOpenstreetmapPointAsyncTask.this.setInterruptUploading(true);\n\t\t\t}\n\t\t});\n\t\tprogress.setIndeterminate(false);\n\t\tprogress.setMax(listSize);\n\t\tprogress.setProgress(0);\n\t}","id":5611,"modified_method":"@Override\n\tprotected void onPreExecute() {\n\t\tinterruptUploading = false;\n\n\t\tprogress.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t@Override\n\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\tUploadOpenstreetmapPointAsyncTask.this.setInterruptUploading(true);\n\t\t\t}\n\t\t});\n\t\tprogress.setMax(listSize);\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onProgressUpdate(OsmPoint... points) {\n\t\tfor (OsmPoint p : points) {\n\t\t\tlistener.uploadUpdated(p);\n\t\t\tprogress.incrementProgressBy(1);\n\t\t}\n\t}","id":5612,"modified_method":"@Override\n\tprotected void onProgressUpdate(OsmPoint... points) {\n\t\tfor (OsmPoint p : points) {\n\t\t\tlistener.uploadUpdated(p);\n\t\t\tif (progress != null) {\n\t\t\t\tprogress.incrementProgressBy(1);\n\t\t\t}\n\t\t}\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onPostExecute(Map<OsmPoint, String> loadErrorsMap) {\n\t\tif (progress.isShowing()) {\n\t\t\tprogress.dismiss();\n\t\t}\n\t\tlistener.uploadEnded(loadErrorsMap);\n\t}","id":5613,"modified_method":"@Override\n\tprotected void onPostExecute(Map<OsmPoint, String> loadErrorsMap) {\n\t\tif (progress != null) {\n\t\t\tprogress.dismiss();\n\t\t}\n\t\tlistener.uploadEnded(loadErrorsMap);\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public UploadOpenstreetmapPointAsyncTask(ProgressDialog progress,\n\t\t\t\t\t\t\t\t\t\t\t OsmEditsUploadListener listener,\n\t\t\t\t\t\t\t\t\t\t\t OsmEditingPlugin plugin,\n\t\t\t\t\t\t\t\t\t\t\t int listSize,\n\t\t\t\t\t\t\t\t\t\t\t boolean closeChangeSet) {\n\t\tthis.progress = progress;\n\t\tthis.plugin = plugin;\n\t\tthis.remotepoi = plugin.getPoiModificationRemoteUtil();\n\t\tthis.remotebug = plugin.getOsmNotesRemoteUtil();\n\t\tthis.listSize = listSize;\n\t\tthis.listener = listener;\n\t\tthis.closeChangeSet = closeChangeSet;\n\t}","id":5614,"modified_method":"public UploadOpenstreetmapPointAsyncTask(ProgressDialogFragment progress,\n\t\t\t\t\t\t\t\t\t\t\t OsmEditsUploadListener listener,\n\t\t\t\t\t\t\t\t\t\t\t OsmEditingPlugin plugin,\n\t\t\t\t\t\t\t\t\t\t\t int listSize,\n\t\t\t\t\t\t\t\t\t\t\t boolean closeChangeSet) {\n\t\tthis.progress = progress;\n\t\tthis.plugin = plugin;\n\t\tthis.remotepoi = plugin.getPoiModificationRemoteUtil();\n\t\tthis.remotebug = plugin.getOsmNotesRemoteUtil();\n\t\tthis.listSize = listSize;\n\t\tthis.listener = listener;\n\t\tthis.closeChangeSet = closeChangeSet;\n\t}","commit_id":"29e88f41aca91114f0deb82c3f3755877dc43a86","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private static boolean parseAnnotationMemberValueInitializer(PsiBuilder builder) {\n    if (builder.getTokenType() == mAT) {\n      return !WRONGWAY.equals(Annotation.parse(builder));\n    }\n\n    //check\n    return !WRONGWAY.equals(ConditionalExpression.parse(builder)) && !ParserUtils.getToken(builder, mASSIGN);\n  }","id":5615,"modified_method":"public static boolean parseAnnotationMemberValueInitializer(PsiBuilder builder) {\n    if (builder.getTokenType() == mAT) {\n      return !WRONGWAY.equals(Annotation.parse(builder));\n    }\n\n    //check\n    return !WRONGWAY.equals(ConditionalExpression.parse(builder)) && !ParserUtils.getToken(builder, mASSIGN);\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker abMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      abMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    AnnotationMember.parse(builder);\n\n    IElementType sep = Separators.parse(builder);\n\n    while (!WRONGWAY.equals(sep)) {\n      AnnotationMember.parse(builder);\n\n      sep = Separators.parse(builder);\n    }\n\n    ParserUtils.waitNextRCurly(builder);\n\n    if (!ParserUtils.getToken(builder, mRCURLY)) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    abMarker.done(ANNOTATION_BLOCK);\n    return ANNOTATION_BLOCK;\n  }","id":5616,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker abMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      abMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    AnnotationMember.parse(builder);\n\n    IElementType sep = Separators.parse(builder);\n\n    while (!WRONGWAY.equals(sep)) {\n      AnnotationMember.parse(builder);\n\n      sep = Separators.parse(builder);\n    }\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    while (!builder.eof() && !ParserUtils.getToken(builder, mRCURLY)) {\n      AnnotationMember.parse(builder/*, className*/);\n\n      builder.advanceLexer();\n    }\n\n    abMarker.done(ANNOTATION_BLOCK);\n    return ANNOTATION_BLOCK;\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    if (!ParserUtils.getToken(builder, mAT)) {\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, kINTERFACE)) {\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, mIDENT)) {\n      return WRONGWAY;\n    }\n\n    if (WRONGWAY.equals(AnnotationBlock.parse(builder))) {\n      return WRONGWAY;\n    }\n    return ANNOTATION_BLOCK;\n  }","id":5617,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    if (!ParserUtils.getToken(builder, mAT)) {\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, kINTERFACE)) {\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, mIDENT)) {\n      builder.error(GraphBundle.message(\"annotation.definition.qualified.name.expected\"));\n      return WRONGWAY;\n    }\n\n    if (WRONGWAY.equals(AnnotationBlock.parse(builder))) {\n      return ANNOTATION_BLOCK;\n    }\n\n    return ANNOTATION_DEFINITION;\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      GroovyElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n\n    PsiBuilder.Marker varDefMarker = builder.mark();\n\n    //typized var definition\n    //todo: check for upper case type specification \n    if (WRONGWAY.equals(TypeSpec.parse(builder))) {\n      varDefMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    GroovyElementType varDef = VariableDefinitions.parse(builder, true);\n    if (!WRONGWAY.equals(varDef)) {\n      varDefMarker.done(varDef);\n      return varDef;\n    }\n    varDefMarker.rollbackTo();\n\n    return WRONGWAY;\n  }","id":5618,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    GroovyElementType typeDef = TypeDefinition.parse(builder);\n\n    if (!WRONGWAY.equals(typeDef)) {\n      typeDeclStartMarker.drop();\n      return typeDef;\n    } else {\n      typeDeclStartMarker.rollbackTo();\n    }\n\n    PsiBuilder.Marker declMarker = builder.mark();\n\n    //typized var definition\n    GroovyElementType declaration = Declaration.parse(builder, true, true);\n    if (!WRONGWAY.equals(declaration)) {\n      declMarker.drop();\n      return declaration;\n    } else {\n      declMarker.rollbackTo();\n    }\n\n    return WRONGWAY;\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder, boolean isInClass) {\n    PsiBuilder.Marker declmMarker = builder.mark();\n    //allows error messages\n    IElementType modifiers = Modifiers.parse(builder);\n\n    if (!WRONGWAY.equals(modifiers)) {\n\n      PsiBuilder.Marker checkMarker = builder.mark(); //point to begin of type or variable\n\n      if (WRONGWAY.equals(TypeSpec.parse(builder, false))) { //if type wasn't recognized trying parse VaribleDeclaration\n        checkMarker.rollbackTo();\n\n        GroovyElementType varDecl = VariableDefinitions.parse(builder, isInClass);\n\n        if (WRONGWAY.equals(varDecl)) {\n          builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        } else {\n          declmMarker.done(varDecl);\n          return varDecl;\n        }\n\n      } else {  //type was recognezed\n        GroovyElementType varDeclarationTop = VariableDefinitions.parse(builder, isInClass);\n\n        if (WRONGWAY.equals(varDeclarationTop)) {\n          checkMarker.rollbackTo();\n\n          GroovyElementType varDecl = VariableDefinitions.parse(builder, isInClass);\n\n          if (WRONGWAY.equals(varDecl)) {\n            builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n            declmMarker.rollbackTo();\n            return WRONGWAY;\n          } else {\n            declmMarker.done(varDecl);\n            return varDecl;\n          }\n        } else {\n          checkMarker.drop();\n          declmMarker.done(varDeclarationTop);\n          return varDeclarationTop;\n        }\n      }\n    } else {\n\n      //if definition starts with lower case letter than it can be just call expression\n\n      if (!builder.eof()\n          && !TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())\n          && builder.getTokenText() != null\n          && Character.isLowerCase(builder.getTokenText().charAt(0)) &&\n          (ParserUtils.lookAhead(builder, mIDENT, mIDENT) || ParserUtils.lookAhead(builder, mIDENT, mLPAREN))) {\n        //call expression\n        return WRONGWAY;\n      }\n\n      if (!ParserUtils.lookAhead(builder, mIDENT, mLPAREN)) {\n        //type specification starts with upper case letter\n        if (WRONGWAY.equals(TypeSpec.parse(builder, true))) {\n          builder.error(GroovyBundle.message(\"type.specification.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        }\n      }\n\n      GroovyElementType varDef = VariableDefinitions.parse(builder, isInClass);\n      if (varDef != WRONGWAY) {\n        declmMarker.done(varDef);\n        return varDef;\n      }\n\n      declmMarker.rollbackTo();\n      return WRONGWAY;\n    }\n  }","id":5619,"modified_method":"public static GroovyElementType parse(PsiBuilder builder, boolean isInClass) {\n    return parse(builder, isInClass, false);\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n    if (elem.equals(LABEL)) return new GrLabelImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n    if (elem.equals(MODIFIERS)) return new GrModifierListImpl(node);\n    if (elem.equals(ANNOTATION)) return new GrAnnotationImpl(node);\n    if (elem.equals(ANNOTATION_ARGUMENTS)) return new GrAnnotationArgumentsImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIR)) return new GrAnnotationMemberValuePairImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIRS)) return new GrAnnotationMemberValuePairsImpl(node);\n\n    //throws\n    if (elem.equals(THROW_CLAUSE)) return new GrThrowClauseImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(LABELED_STATEMENT)) return new GrLabeledStatementImpl(node);\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(FOR_IN_CLAUSE)) return new GrForInClauseImpl(node);\n    if (elem.equals(FOR_TRADITIONAL_CLAUSE)) return new GrTraditionalForClauseImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(TRY_BLOCK_STATEMENT)) return new GrTryCatchStmtImpl(node);\n    if (elem.equals(CATCH_CLAUSE)) return new GrCatchClauseImpl(node);\n    if (elem.equals(FINALLY_CLAUSE)) return new GrFinallyClauseImpl(node);\n    if (elem.equals(SYNCHRONIZED_STATEMENT)) return new GrSynchroStmtImpl(node);\n    if (elem.equals(SWITCH_STATEMENT)) return new GrSwitchStatementImpl(node);\n    if (elem.equals(CASE_LABEL)) return new GrCaseLabelImpl(node);\n    if (elem.equals(CASE_BLOCK)) return new GrCaseBlockImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION) || elem.equals(VARIABLE_DEFINITION_ERROR))\n      return new GrVariableDeclarationImpl(node);\n    if (elem.equals(VARIABLE)) return new GrVariableImpl(node);\n\n    if (elem.equals(FIELD)) return new GrFieldImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION) || elem.equals(CLASS_DEFINITION_ERROR)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION) || elem.equals(INTERFACE_DEFINITION_ERROR))\n      return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION) || elem.equals(ENUM_DEFINITION_ERROR)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION) || elem.equals(ANNOTATION_DEFINITION_ERROR))\n      return new GrAnnotationTypeDefinitionImpl(node);\n\n    if (elem.equals(REFERENCE_ELEMENT)) return new GrTypeOrPackageReferenceElementImpl(node);\n    if (elem.equals(CLASS_TYPE_ELEMENT)) return new GrClassTypeElementImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //bodies\n    if (elem.equals(CLASS_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n//    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(EXPLICIT_CONSTRUCTOR)) return new GrConstructorInvocationImpl(node);\n\n    //enum\n    if (elem.equals(ENUM_CONSTANTS)) return new GrEnumConstantsImpl(node);\n    if (elem.equals(ENUM_CONSTANT)) return new GrEnumConstantImpl(node);\n    if (elem.equals(ENUM_CONSTANT_BODY)) return new GrEnumConstantBodyImpl(node);\n    if (elem.equals(ENUM_CONSTANT_MEMBER)) return new GrEnumConstantMemberImpl(node);\n\n    //members\n//    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n//    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n//    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n//    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorDefinitionImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //Branch statements\n    if (elem.equals(RETURN_STATEMENT)) return new GrReturnStmtImpl(node);\n    if (elem.equals(THROW_STATEMENT)) return new GrThrowStmtImpl(node);\n    if (elem.equals(ASSERT_STATEMENT)) return new GrAssertStmtImpl(node);\n    if (elem.equals(BREAK_STATEMENT)) return new GrBreakStmtImpl(node);\n    if (elem.equals(CONTINUE_STATEMENT)) return new GrContinueStmtImpl(node);\n\n    //expressions\n    if (elem.equals(CALL_EXPRESSION)) return new GrApplicationExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgumentListImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExpressionImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(RANGE_EXPRESSION)) return new GrRangeExprImpl(node);\n    if (elem.equals(COMPOSITE_SHIFT_SIGN)) return new GrOperationSignImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExpressionImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeElementImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExpressionImpl(node);\n    if (elem.equals(THIS_REFERENCE_EXPRESSION)) return new GrThisReferenceExpressionImpl(node);\n    if (elem.equals(SUPER_REFERENCE_EXPRESSION)) return new GrSuperReferenceExpressionImpl(node);\n    if (elem.equals(PARENTHESIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n    if (elem.equals(NEW_EXPRESSION)) return new GrNewExpressionImpl(node);\n    if (elem.equals(ARRAY_DECLARATOR)) return new GrArrayDeclarationImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentListImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrNamedArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n//    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":5620,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n    if (elem.equals(LABEL)) return new GrLabelImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n    if (elem.equals(MODIFIERS)) return new GrModifierListImpl(node);\n    if (elem.equals(ANNOTATION)) return new GrAnnotationImpl(node);\n    if (elem.equals(ANNOTATION_ARGUMENTS)) return new GrAnnotationArgumentsImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIR)) return new GrAnnotationMemberValuePairImpl(node);\n    if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIRS)) return new GrAnnotationMemberValuePairsImpl(node);\n\n    if (elem.equals(DEFAULT_ANNOTATION_VALUE)) return new GrDefaultAnnotationValueImpl(node);\n    \n    //throws\n    if (elem.equals(THROW_CLAUSE)) return new GrThrowClauseImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(LABELED_STATEMENT)) return new GrLabeledStatementImpl(node);\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(FOR_IN_CLAUSE)) return new GrForInClauseImpl(node);\n    if (elem.equals(FOR_TRADITIONAL_CLAUSE)) return new GrTraditionalForClauseImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(TRY_BLOCK_STATEMENT)) return new GrTryCatchStmtImpl(node);\n    if (elem.equals(CATCH_CLAUSE)) return new GrCatchClauseImpl(node);\n    if (elem.equals(FINALLY_CLAUSE)) return new GrFinallyClauseImpl(node);\n    if (elem.equals(SYNCHRONIZED_STATEMENT)) return new GrSynchroStmtImpl(node);\n    if (elem.equals(SWITCH_STATEMENT)) return new GrSwitchStatementImpl(node);\n    if (elem.equals(CASE_LABEL)) return new GrCaseLabelImpl(node);\n    if (elem.equals(CASE_BLOCK)) return new GrCaseBlockImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION) || elem.equals(VARIABLE_DEFINITION_ERROR))\n      return new GrVariableDeclarationImpl(node);\n    if (elem.equals(VARIABLE)) return new GrVariableImpl(node);\n\n    if (elem.equals(FIELD)) return new GrFieldImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION) || elem.equals(CLASS_DEFINITION_ERROR)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION) || elem.equals(INTERFACE_DEFINITION_ERROR))\n      return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION) || elem.equals(ENUM_DEFINITION_ERROR)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION) || elem.equals(ANNOTATION_DEFINITION_ERROR))\n      return new GrAnnotationTypeDefinitionImpl(node);\n    if (elem.equals(DEFAULT_ANNOTATION_MEMBER)) return new GrDefaultAnnotationMemberImpl(node);\n\n    if (elem.equals(REFERENCE_ELEMENT)) return new GrTypeOrPackageReferenceElementImpl(node);\n    if (elem.equals(CLASS_TYPE_ELEMENT)) return new GrClassTypeElementImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //bodies\n    if (elem.equals(CLASS_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrTypeDefinitionBodyImpl(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n//    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(EXPLICIT_CONSTRUCTOR)) return new GrConstructorInvocationImpl(node);\n\n    //enum\n    if (elem.equals(ENUM_CONSTANTS)) return new GrEnumConstantsImpl(node);\n    if (elem.equals(ENUM_CONSTANT)) return new GrEnumConstantImpl(node);\n    if (elem.equals(ENUM_CONSTANT_BODY)) return new GrEnumConstantBodyImpl(node);\n    if (elem.equals(ENUM_CONSTANT_MEMBER)) return new GrEnumConstantMemberImpl(node);\n\n    //members\n//    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n//    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n//    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n//    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorDefinitionImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //Branch statements\n    if (elem.equals(RETURN_STATEMENT)) return new GrReturnStmtImpl(node);\n    if (elem.equals(THROW_STATEMENT)) return new GrThrowStmtImpl(node);\n    if (elem.equals(ASSERT_STATEMENT)) return new GrAssertStmtImpl(node);\n    if (elem.equals(BREAK_STATEMENT)) return new GrBreakStmtImpl(node);\n    if (elem.equals(CONTINUE_STATEMENT)) return new GrContinueStmtImpl(node);\n\n    //expressions\n    if (elem.equals(CALL_EXPRESSION)) return new GrApplicationExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgumentListImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExpressionImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(RANGE_EXPRESSION)) return new GrRangeExprImpl(node);\n    if (elem.equals(COMPOSITE_SHIFT_SIGN)) return new GrOperationSignImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExpressionImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeElementImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExpressionImpl(node);\n    if (elem.equals(THIS_REFERENCE_EXPRESSION)) return new GrThisReferenceExpressionImpl(node);\n    if (elem.equals(SUPER_REFERENCE_EXPRESSION)) return new GrSuperReferenceExpressionImpl(node);\n    if (elem.equals(PARENTHESIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n    if (elem.equals(NEW_EXPRESSION)) return new GrNewExpressionImpl(node);\n    if (elem.equals(ARRAY_DECLARATOR)) return new GrArrayDeclarationImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentListImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrNamedArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n//    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isInClass, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(builder.getTokenType() == mIDENT || builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL)) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL;\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n      }\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        /*ThrowClause.parse(builder);\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));*/\n        varMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      ThrowClause.parse(builder);\n\n      if (builder.getTokenType() == mLCURLY || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        OpenOrClosableBlock.parseOpenBlock(builder);\n      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass)))\n              return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n\n//          return VARIABLE_DEFINITION_OR_METHOD_CALL;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","id":5621,"modified_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isInClass, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(builder.getTokenType() == mIDENT || builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL)) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL;\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n//      if (!ParserUtils.getToken(builder, mRPAREN)) {\n//        builder.error(GroovyBundle.message(\"rparen.expected\"));\n//        varMarker.drop();\n//        return WRONGWAY;\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        /*ThrowClause.parse(builder);\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));*/\n        varMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      if (ParserUtils.lookAhead(builder, GroovyTokenTypes.kDEFAULT)) {\n        if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n          builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n        }\n\n        ParserUtils.getToken(builder, GroovyTokenTypes.kDEFAULT);\n        ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n        boolean b = AnnotationArguments.parseAnnotationMemberValueInitializer(builder);\n        if (b) {\n          varMarker.done(DEFAULT_ANNOTATION_VALUE);\n          return DEFAULT_ANNOTATION_MEMBER;\n        }\n        else {\n          varMarker.rollbackTo();\n          return WRONGWAY;\n        }\n      }\n\n      ThrowClause.parse(builder);\n\n      GroovyElementType openBlock = null;\n      if (builder.getTokenType() == mLCURLY || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        openBlock = OpenOrClosableBlock.parseOpenBlock(builder);\n      }\n\n//      if (isAnnotationMember && !NONE.equals(paramDeclList) && OPEN_BLOCK.equals(openBlock)) {\n//        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n//      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else\n\n    {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass)))\n              return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n\n//          return VARIABLE_DEFINITION_OR_METHOD_CALL;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","commit_id":"584e52b60cb0b3e59adfd85d0b548fdabef92acc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (DeclarationStart.parse(builder)) {\n      declMarker.rollbackTo();\n      return Declaration.parse(builder);\n    }\n\n    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","id":5622,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //constructor\n    PsiBuilder.Marker constructorMarker = builder.mark();\n    ModifiersOptional.parse(builder);\n\n    GroovyElementType constructorDef = ConstructorDefinition.parse(builder);\n\n    if (WRONGWAY.equals(constructorDef)) {\n      constructorMarker.rollbackTo();\n    } else {\n      constructorMarker.done(constructorDef);\n      return constructorDef;\n    }\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        return STATIC_COMPOUND_STATEMENT;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return WRONGWAY;\n      }\n    }\n\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      return COMPOUND_STATEMENT;\n    }\n\n    return WRONGWAY;\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder)\n  {\n    PsiBuilder.Marker internalTypeMarker = builder.mark();\n    PsiBuilder.Marker secondInternalTypeMarker;\n\n    if (!ParserUtils.getToken(builder, mIDENT))\n    {\n      internalTypeMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    TypeArguments.parse(builder);\n\n    secondInternalTypeMarker = internalTypeMarker.precede();\n    internalTypeMarker.done(CLASS_INTERFACE_TYPE);\n    internalTypeMarker = secondInternalTypeMarker;\n\n    while (ParserUtils.getToken(builder, mDOT))\n    {\n      if (!ParserUtils.getToken(builder, mIDENT))\n      {\n        internalTypeMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      TypeArguments.parse(builder);\n\n      secondInternalTypeMarker.done(CLASS_INTERFACE_TYPE);\n      secondInternalTypeMarker = internalTypeMarker.precede();\n    }\n\n    secondInternalTypeMarker.drop();\n\n    return CLASS_INTERFACE_TYPE;\n  }","id":5623,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    return parse(builder, false);\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker declmMarker = builder.mark();\n    //allows error messages\n    IElementType modifiers = Modifiers.parse(builder);\n\n    if (!WRONGWAY.equals(modifiers)) {\n\n      PsiBuilder.Marker checkMarker = builder.mark(); //point to begin of type or variable\n\n      if (WRONGWAY.equals(TypeSpec.parse(builder))) { //if type wasn't recognized trying poarse VaribleDeclaration\n        checkMarker.rollbackTo();\n\n        GroovyElementType varDecl = VariableDefinitions.parse(builder);\n        if (WRONGWAY.equals(varDecl)) {\n          builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        } else {\n          declmMarker.done(varDecl);\n          return varDecl;\n        }\n\n      } else {  //type was recognezed\n        GroovyElementType varDeclarationTop = VariableDefinitions.parse(builder);\n        if (WRONGWAY.equals(varDeclarationTop)) {\n          checkMarker.rollbackTo();\n\n          GroovyElementType varDecl = VariableDefinitions.parse(builder);\n          if (WRONGWAY.equals(varDecl)) {\n            builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n            declmMarker.rollbackTo();\n            return WRONGWAY;\n          } else {\n            declmMarker.done(varDecl);\n            return varDecl;\n          }\n        } else {\n          checkMarker.drop();\n          declmMarker.done(varDeclarationTop);\n          return varDeclarationTop;\n        }\n      }\n    } else {\n      if (WRONGWAY.equals(TypeSpec.parse(builder))) {\n        builder.error(GroovyBundle.message(\"type.specification.expected\"));\n        declmMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      GroovyElementType varDef = VariableDefinitions.parse(builder);\n      if (WRONGWAY.equals(varDef)) {\n        builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n        declmMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      declmMarker.done(varDef);\n      return varDef;\n    }\n  }","id":5624,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker declmMarker = builder.mark();\n    //allows error messages\n    IElementType modifiers = Modifiers.parse(builder);\n\n    if (!WRONGWAY.equals(modifiers)) {\n\n      PsiBuilder.Marker checkMarker = builder.mark(); //point to begin of type or variable\n\n      if (WRONGWAY.equals(TypeSpec.parse(builder, true))) { //if type wasn't recognized trying poarse VaribleDeclaration\n        checkMarker.rollbackTo();\n\n        GroovyElementType varDecl = VariableDefinitions.parse(builder);\n        if (WRONGWAY.equals(varDecl)) {\n          builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n          declmMarker.rollbackTo();\n          return WRONGWAY;\n        } else {\n          declmMarker.done(varDecl);\n          return varDecl;\n        }\n\n      } else {  //type was recognezed\n        GroovyElementType varDeclarationTop = VariableDefinitions.parse(builder);\n        if (WRONGWAY.equals(varDeclarationTop)) {\n          checkMarker.rollbackTo();\n\n          GroovyElementType varDecl = VariableDefinitions.parse(builder);\n          if (WRONGWAY.equals(varDecl)) {\n            builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n            declmMarker.rollbackTo();\n            return WRONGWAY;\n          } else {\n            declmMarker.done(varDecl);\n            return varDecl;\n          }\n        } else {\n          checkMarker.drop();\n          declmMarker.done(varDeclarationTop);\n          return varDeclarationTop;\n        }\n      }\n    } else {\n      if (WRONGWAY.equals(TypeSpec.parse(builder, true))) {\n        builder.error(GroovyBundle.message(\"type.specification.expected\"));\n        declmMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      GroovyElementType varDef = VariableDefinitions.parse(builder);\n      if (WRONGWAY.equals(varDef)) {\n        builder.error(GroovyBundle.message(\"variable.definitions.expected\"));\n        declmMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      declmMarker.done(varDef);\n      return varDef;\n    }\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker declStartMarker = builder.mark();\n    IElementType elementType;\n\n    //def\n    if (ParserUtils.getToken(builder, kDEF)) {\n      if (parseNextTokenInDeclaration(builder)) {\n        declStartMarker.rollbackTo();\n        return true;\n      } else {\n        declStartMarker.rollbackTo();\n        return false;\n      }\n    }\n\n    //Modifiers\n    elementType = Modifiers.parse(builder);\n    if (!WRONGWAY.equals(elementType)) {\n      if (parseNextTokenInDeclaration(builder)) {\n        declStartMarker.rollbackTo();\n        return true;\n      } else {\n        declStartMarker.rollbackTo();\n        return false;\n      }\n    }\n\n    //@IDENT\n    if (ParserUtils.getToken(builder, mAT)) {\n      declStartMarker.rollbackTo();\n      return ParserUtils.lookAhead(builder, mIDENT);\n    }\n\n    // (upperCaseIdent | builtInType | QulifiedTypeName)  {LBRACK balacedTokens RBRACK} IDENT\n    if (UpperCaseIdent.parse(builder) || !WRONGWAY.equals(BuiltInType.parse(builder)) || !WRONGWAY.equals(QualifiedTypeName.parse(builder))) {\n\n      IElementType balancedTokens;\n\n      do {\n        balancedTokens = parseBalancedTokensInBrackets(builder);\n      } while (!NONE.equals(balancedTokens) && !WRONGWAY.equals(balancedTokens));\n\n      //IDENT\n      if (ParserUtils.getToken(builder, mIDENT) && !ParserUtils.getToken(builder, mDOT)) {\n        declStartMarker.rollbackTo();\n        return true;\n      } else {\n        declStartMarker.rollbackTo();\n        return false;\n      }\n\n    } else {\n      declStartMarker.rollbackTo();\n      return false;\n    }\n  }","id":5625,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker declStartMarker = builder.mark();\n\n    if (!WRONGWAY.equals(Declaration.parse(builder))){\n      declStartMarker.rollbackTo();\n      return true;\n    } else {\n      declStartMarker.rollbackTo();\n      return false;\n    }\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (DeclarationStart.parse(builder)) {\n      declMarker.rollbackTo();\n      return Declaration.parse(builder);\n    }\n    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n    \n    return WRONGWAY;\n  }","id":5626,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    GroovyElementType declType = Declaration.parse(builder);\n    if (WRONGWAY.equals(declType)) {\n      declMarker.rollbackTo();\n    } else {\n      declMarker.drop();\n      return declType;\n    }\n\n    //declaration\n//    PsiBuilder.Marker declMarker = builder.mark();\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n//    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        return WRONGWAY;\n      }\n      return typeDef;\n    }\n    typeDeclStartMarker.rollbackTo();\n    \n    return WRONGWAY;\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kSYNCHRONIZED);\n    \n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n    if (StrictContextExpression.parse(builder).equals(WRONGWAY)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (ParserUtils.lookAhead(builder, mNLS)) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    GroovyElementType result = WRONGWAY;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseOpenBlock(builder);\n    } \n    if (result.equals(WRONGWAY) || result.equals(IMPORT_STATEMENT)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"block.expression.expected\"));\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    } else {\n      warn.drop();\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n  }","id":5627,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kSYNCHRONIZED);\n\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.drop();\n      return WRONGWAY;\n//      marker.done(SYNCHRONIZED_STATEMENT);\n//      return SYNCHRONIZED_STATEMENT;\n    }\n\n    if (StrictContextExpression.parse(builder).equals(WRONGWAY)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (ParserUtils.lookAhead(builder, mNLS)) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    GroovyElementType result = WRONGWAY;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseOpenBlock(builder);\n    }\n    if (result.equals(WRONGWAY) || result.equals(IMPORT_STATEMENT)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"block.expression.expected\"));\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    } else {\n      warn.drop();\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType parseClassOrInterfaceType(PsiBuilder builder)\n  {\n    PsiBuilder.Marker arrMarker = builder.mark();\n\n    if (WRONGWAY.equals(ClassOrInterfaceType.parse(builder)))\n    {\n      arrMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    if (mLBRACK.equals(builder.getTokenType()))\n    {\n      declarationBracketsParse(builder, arrMarker);\n    }\n    else\n    {\n      arrMarker.drop();\n    }\n    return TYPE_SPECIFICATION;\n  }","id":5628,"modified_method":"private static GroovyElementType parseClassOrInterfaceType(PsiBuilder builder, boolean isUpper) {\n    PsiBuilder.Marker arrMarker = builder.mark();\n\n    if (WRONGWAY.equals(ClassOrInterfaceType.parse(builder, isUpper))) {\n      arrMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    if (mLBRACK.equals(builder.getTokenType())) {\n      declarationBracketsParse(builder, arrMarker);\n    } else {\n      arrMarker.drop();\n    }\n    return TYPE_SPECIFICATION;\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder)\n  {\n    if (TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType()))\n    {\n      return parseBuiltInType(builder);\n    }\n    else if (ParserUtils.lookAhead(builder, mIDENT))\n    {\n      return parseClassOrInterfaceType(builder);\n    }\n    return WRONGWAY;\n  }","id":5629,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    return parse(builder, false);\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL);\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (eaten && ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n      }\n\n      boolean isEmptyParamDeclList = NONE.equals(paramDeclList);\n\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      if (!isStringName && isEmptyParamDeclList && ParserUtils.getToken(builder, kDEFAULT)) {\n        ParserUtils.getToken(builder, mNLS);\n\n        if (parseAnnotationMemberValueInitializer(builder)) {\n          varMarker.done(DEFAULT_ANNOTATION_MEMBER);\n          return DEFAULT_ANNOTATION_MEMBER;\n        }\n      }\n\n      ThrowClause.parse(builder);\n\n/*\n      //if there is no OpenOrClosableBlock, nls haven'to be eaten\n      PsiBuilder.Marker nlsMarker = builder.mark();\n      if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder, mLPAREN)) {\n        nlsMarker.rollbackTo();\n      } else {\n        nlsMarker.drop();\n      }\n*/\n      ParserUtils.getToken(builder, mNLS);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n      if (isEnumConstantMember) {\n//        varMarker.done(ENUM_CONSTANT_MEMBER);\n        varMarker.drop();\n        return ENUM_CONSTANT_MEMBER;\n      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      if (parseVariableDeclarator(builder)) {\n        while (ParserUtils.getToken(builder, mCOMMA)) {\n          ParserUtils.getToken(builder, mNLS);\n\n          parseVariableDeclarator(builder);\n        }\n\n        return VARIABLE_DEFINITION;\n      } else {\n        builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n        return WRONGWAY;\n      }\n    }\n  }","id":5630,"modified_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder, boolean isEnumConstantMember, boolean isAnnotationMember) {\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = ParserUtils.lookAhead(builder, mSTRING_LITERAL) || ParserUtils.lookAhead(builder, mGSTRING_LITERAL);\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (eaten && ParserUtils.getToken(builder, mLPAREN)) {\n      GroovyElementType paramDeclList = ParameterDeclarationList.parse(builder, mRPAREN);\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      if (isAnnotationMember && !NONE.equals(paramDeclList)) {\n        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n      }\n\n      boolean isEmptyParamDeclList = NONE.equals(paramDeclList);\n\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ParserUtils.waitNextRCurly(builder);\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      if (!isStringName && isEmptyParamDeclList && ParserUtils.getToken(builder, kDEFAULT)) {\n        ParserUtils.getToken(builder, mNLS);\n\n        if (parseAnnotationMemberValueInitializer(builder)) {\n          varMarker.done(DEFAULT_ANNOTATION_MEMBER);\n          return DEFAULT_ANNOTATION_MEMBER;\n        }\n      }\n\n      ThrowClause.parse(builder);\n\n\n      //if there is no OpenOrClosableBlock, nls haven'to be eaten\n      PsiBuilder.Marker nlsMarker = builder.mark();\n      if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder, mLPAREN)) {\n        nlsMarker.rollbackTo();\n      } else {\n        nlsMarker.drop();\n      }\n\n//      ParserUtils.getToken(builder, mNLS);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n//      if (isEnumConstantMember) {\n//        varMarker.done(ENUM_CONSTANT_MEMBER);\n//        varMarker.drop();\n//        return ENUM_CONSTANT_MEMBER;\n//      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      if (parseVariableDeclarator(builder)) {\n        while (ParserUtils.getToken(builder, mCOMMA)) {\n          ParserUtils.getToken(builder, mNLS);\n\n          parseVariableDeclarator(builder);\n        }\n\n        return VARIABLE_DEFINITION;\n      } else {\n        builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n        return WRONGWAY;\n      }\n    }\n  }","commit_id":"0b90f50066baba0b779bb3d1e0b5b534f408700f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private JCExpression transformMemberExpression(Tree.StaticMemberOrTypeExpression expr, JCExpression primaryExpr) {\n        JCExpression result = null;\n\n        // do not throw, an error will already have been reported\n        Declaration decl = expr.getDeclaration();\n        if (decl == null) {\n            return make().Erroneous(List.<JCTree>nil());\n        }\n        \n        if (decl instanceof Getter) {\n            // invoke the getter\n            if (decl.isToplevel()) {\n                result = make().Apply(\n                        List.<JCTree.JCExpression>nil(),\n                        makeSelect(makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getGetterName(decl.getName())),\n                        List.<JCTree.JCExpression>nil());\n            } else if (decl.isClassMember()) {\n                result =  make().Apply(List.<JCExpression>nil(), \n                        makeIdentOrSelect(primaryExpr, Util.getGetterName(decl.getName())),\n                        List.<JCExpression>nil());\n            } else {\n                // method local attr\n                JCExpression fn;\n                if (isRecursiveReference(expr)) {\n                    fn = makeIdentOrSelect(primaryExpr, Util.getGetterName(decl.getName()));\n                } else {\n                    fn = makeIdentOrSelect(primaryExpr, decl.getName() + \"$getter\", Util.getGetterName(decl.getName()));\n                }\n                result = make().Apply(List.<JCExpression>nil(), fn, List.<JCExpression>nil());\n            }\n        } else if (decl instanceof Value) {\n            if (decl.isToplevel()) {\n                // ERASURE\n                if (\"null\".equals(decl.getName())) {\n                    // FIXME this is a pretty brain-dead way to go about erase I think\n                    result = makeNull();\n                } else if (isBooleanTrue(decl)) {\n                    result = makeBoolean(true);\n                } else if (isBooleanFalse(decl)) {\n                    result = makeBoolean(false);\n                } else {\n                    // it's a toplevel attribute\n                    result = make().Apply(\n                            List.<JCTree.JCExpression>nil(),\n                            makeSelect(makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getGetterName(decl.getName())),\n                            List.<JCTree.JCExpression>nil());\n                }\n            } else if (Decl.isClassAttribute(decl)) {\n                // invoke the getter\n                result = make().Apply(List.<JCExpression>nil(), \n                       makeIdentOrSelect(primaryExpr, Util.getGetterName(decl.getName())),\n                       List.<JCExpression>nil());\n             } else if (decl.isCaptured() || decl.isShared()) {\n                 // invoke the qualified getter\n                 result = make().Apply(List.<JCExpression>nil(), \n                        makeIdentOrSelect(primaryExpr, decl.getName(), Util.getGetterName(decl.getName())),\n                        List.<JCExpression>nil());\n            }\n        } else if (decl instanceof Method) {\n            if (Decl.withinMethod(decl)) {\n                java.util.List<String> path = new LinkedList<String>();\n                if (!isRecursiveReference(expr)) {\n                    path.add(decl.getName());\n                }\n                path.add(Util.quoteMethodName(decl.getName()));\n                result = makeIdent(path);\n            } else if (decl.isToplevel()) {\n                java.util.List<String> path = new LinkedList<String>();\n                // FQN must start with empty ident (see https://github.com/ceylon/ceylon-compiler/issues/148)\n                if (!decl.getContainer().getQualifiedNameString().isEmpty()) {\n                    path.add(\"\");\n                \tpath.addAll(Arrays.asList(decl.getContainer().getQualifiedNameString().split(\"\\\\.\")));\n                } else {\n                    path.add(\"\");\n                }\n                // class\n                path.add(Util.quoteIfJavaKeyword(decl.getName()));\n                // method\n                path.add(Util.quoteMethodName(decl.getName()));\n                result = makeIdent(path);\n            } else {\n                result = makeIdentOrSelect(primaryExpr, Util.quoteMethodName(decl.getName()));\n            }\n        }\n        if (result == null) {\n            if (Util.isErasedAttribute(decl.getName())) {\n                result = make().Apply(null,\n                        makeIdentOrSelect(primaryExpr, Util.quoteMethodName(decl.getName())),\n                        List.<JCExpression>nil());\n            } else {\n                result = makeIdentOrSelect(primaryExpr, substitute(decl.getName()));\n            }\n        }\n        \n        return result;\n    }","id":5631,"modified_method":"private JCExpression transformMemberExpression(Tree.StaticMemberOrTypeExpression expr, JCExpression primaryExpr) {\n        JCExpression result = null;\n\n        // do not throw, an error will already have been reported\n        Declaration decl = expr.getDeclaration();\n        if (decl == null) {\n            return make().Erroneous(List.<JCTree>nil());\n        }\n        \n        if (decl instanceof Getter) {\n            // invoke the getter\n            if (decl.isToplevel()) {\n                result = makeGetter(makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getGetterName(decl.getName()));\n            } else if (decl.isClassMember()) {\n                result =  makeGetter(primaryExpr, Util.getGetterName(decl.getName()));\n            } else {\n                // method local attr\n                if (isRecursiveReference(expr)) {\n                    result = makeGetter(primaryExpr, Util.getGetterName(decl.getName()));\n                } else {\n                    result = makeGetter(primaryExpr, decl.getName() + \"$getter\", Util.getGetterName(decl.getName()));\n                }\n            }\n        } else if (decl instanceof Value) {\n            if (decl.isToplevel()) {\n                // ERASURE\n                if (\"null\".equals(decl.getName())) {\n                    // FIXME this is a pretty brain-dead way to go about erase I think\n                    result = makeNull();\n                } else if (isBooleanTrue(decl)) {\n                    result = makeBoolean(true);\n                } else if (isBooleanFalse(decl)) {\n                    result = makeBoolean(false);\n                } else {\n                    // it's a toplevel attribute\n                    result = makeGetter(makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getGetterName(decl.getName()));\n                }\n            } else if (Decl.isClassAttribute(decl)) {\n                // invoke the getter\n                result = makeGetter(primaryExpr, Util.getGetterName(decl.getName()));\n             } else if (decl.isCaptured() || decl.isShared()) {\n                 // invoke the qualified getter\n                 result = makeGetter(primaryExpr, decl.getName(), Util.getGetterName(decl.getName()));\n            }\n        } else if (decl instanceof Method) {\n            if (Decl.withinMethod(decl)) {\n                java.util.List<String> path = new LinkedList<String>();\n                if (!isRecursiveReference(expr)) {\n                    path.add(decl.getName());\n                }\n                path.add(Util.quoteMethodName(decl.getName()));\n                result = makeIdent(path);\n            } else if (decl.isToplevel()) {\n                java.util.List<String> path = new LinkedList<String>();\n                // FQN must start with empty ident (see https://github.com/ceylon/ceylon-compiler/issues/148)\n                if (!decl.getContainer().getQualifiedNameString().isEmpty()) {\n                    path.add(\"\");\n                \tpath.addAll(Arrays.asList(decl.getContainer().getQualifiedNameString().split(\"\\\\.\")));\n                } else {\n                    path.add(\"\");\n                }\n                // class\n                path.add(Util.quoteIfJavaKeyword(decl.getName()));\n                // method\n                path.add(Util.quoteMethodName(decl.getName()));\n                result = makeIdent(path);\n            } else {\n                result = makeIdentOrSelect(primaryExpr, Util.quoteMethodName(decl.getName()));\n            }\n        }\n        if (result == null) {\n            if (Util.isErasedAttribute(decl.getName())) {\n                result = makeGetter(primaryExpr, Util.quoteMethodName(decl.getName()));\n            } else {\n                result = makeIdentOrSelect(primaryExpr, substitute(decl.getName()));\n            }\n        }\n        \n        return result;\n    }","commit_id":"1e32e0e5cfefe361a4f226d7c74280ae53a8f5e5","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"JCExpression transformAssignment(Node op, Term leftTerm, JCExpression expr, JCExpression rhs) {\n        JCExpression result = null;\n\n        // FIXME: can this be anything else than a Primary?\n        TypedDeclaration decl = (TypedDeclaration) ((Tree.Primary)leftTerm).getDeclaration();\n\n        boolean variable = decl.isVariable();\n        \n        if (decl.isToplevel()) {\n            // must use top level setter\n            result = make().Apply(\n                    List.<JCTree.JCExpression>nil(),\n                    makeSelect(makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getSetterName(decl.getName())),\n                    List.of(rhs));\n        } else if ((decl instanceof Getter)) {\n            // must use the setter\n            if (Decl.withinMethod(decl)) {\n                result = at(op).Apply(List.<JCTree.JCExpression>nil(),\n                        makeIdentOrSelect(expr, decl.getName() + \"$setter\", Util.getSetterName(decl.getName())),\n                        List.<JCTree.JCExpression>of(rhs));\n            } else {\n                result = at(op).Apply(List.<JCTree.JCExpression>nil(),\n                        makeIdentOrSelect(expr, Util.getSetterName(decl.getName())),\n                        List.<JCTree.JCExpression>of(rhs));            \n            }\n        } else if (variable && (Decl.isClassAttribute(decl))) {\n            // must use the setter\n            result = at(op).Apply(List.<JCTree.JCExpression>nil(),\n                    makeIdentOrSelect(expr, Util.getSetterName(decl.getName())), \n                    List.<JCTree.JCExpression>of(rhs));\n        } else if (variable && (decl.isCaptured() || decl.isShared())) {\n            // must use the qualified setter\n            result = at(op).Apply(List.<JCTree.JCExpression>nil(),\n                    makeIdentOrSelect(expr, decl.getName(), Util.getSetterName(decl.getName())), \n                    List.<JCTree.JCExpression>of(rhs));\n        } else {\n            result = at(op).Assign(makeIdentOrSelect(expr, decl.getName()), rhs);\n        }\n        \n        return result;\n    }","id":5632,"modified_method":"JCExpression transformAssignment(Node op, Term leftTerm, JCExpression expr, JCExpression rhs) {\n        JCExpression result = null;\n\n        // FIXME: can this be anything else than a Primary?\n        TypedDeclaration decl = (TypedDeclaration) ((Tree.Primary)leftTerm).getDeclaration();\n\n        boolean variable = decl.isVariable();\n        \n        at(op);\n        if (decl.isToplevel()) {\n            // must use top level setter\n            result = makeSetter(rhs, makeFQIdent(decl.getContainer().getQualifiedNameString()), Util.quoteIfJavaKeyword(decl.getName()), Util.getSetterName(decl.getName()));\n        } else if ((decl instanceof Getter)) {\n            // must use the setter\n            if (Decl.withinMethod(decl)) {\n                result = makeSetter(rhs, makeIdentOrSelect(expr, decl.getName() + \"$setter\", Util.getSetterName(decl.getName())));\n            } else {\n                result = makeSetter(rhs, makeIdentOrSelect(expr, Util.getSetterName(decl.getName())));            \n            }\n        } else if (variable && (Decl.isClassAttribute(decl))) {\n            // must use the setter\n            result = makeSetter(rhs, makeIdentOrSelect(expr, Util.getSetterName(decl.getName())));\n        } else if (variable && (decl.isCaptured() || decl.isShared())) {\n            // must use the qualified setter\n            result = makeSetter(rhs, makeIdentOrSelect(expr, decl.getName(), Util.getSetterName(decl.getName())));\n        } else {\n            result = at(op).Assign(makeIdentOrSelect(expr, decl.getName()), rhs);\n        }\n        \n        return result;\n    }","commit_id":"1e32e0e5cfefe361a4f226d7c74280ae53a8f5e5","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Test\n    public void testFacetNumeric() throws ElasticsearchException, IOException {\n        assertAcked(prepareCreate(\"test\").addMapping(\"type\", jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"byte\").field(\"type\", \"byte\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"short\").field(\"type\", \"short\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"integer\").field(\"type\", \"integer\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"long\").field(\"type\", \"long\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"float\").field(\"type\", \"float\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"double\").field(\"type\", \"double\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .endObject().endObject().endObject()));\n        ensureGreen();\n\n        for (int i = 0; i < 100; i++) {\n            client().prepareIndex(\"test\", \"type\", \"\" + i).setSource(jsonBuilder().startObject()\n                    .field(\"name\", \"\" + i)\n                    .field(\"multiValued\", \"\" + i, \"\" + (90 + i % 10))\n                    .field(\"byte\", i)\n                    .field(\"short\", i + Byte.MAX_VALUE)\n                    .field(\"integer\", i + Short.MAX_VALUE)\n                    .field(\"long\", i + Integer.MAX_VALUE)\n                    .field(\"float\", (float) i)\n                    .field(\"double\", (double) i)\n                    .endObject()).execute().actionGet();\n        }\n\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"type\", \"\" + (i + 100)).setSource(jsonBuilder().startObject()\n                    .field(\"foo\", \"\" + i)\n                    .endObject()).execute().actionGet();\n        }\n\n        String[] execHint = new String[]{\"map\", null};\n        for (String hint : execHint) {\n\n            flushAndRefresh();\n            SearchResponse searchResponse = client().prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(termsFacet(\"double\").executionHint(hint).field(\"double\").size(10))\n                    .addFacet(termsFacet(\"float\").executionHint(hint).field(\"float\").size(10))\n                    .addFacet(termsFacet(\"integer\").executionHint(hint).field(\"integer\").size(10))\n                    .addFacet(termsFacet(\"long\").executionHint(hint).field(\"long\").size(10))\n                    .addFacet(termsFacet(\"short\").executionHint(hint).field(\"short\").size(10))\n                    .addFacet(termsFacet(\"byte\").executionHint(hint).field(\"byte\").size(10))\n                    .addFacet(termsFacet(\"termFacet\").executionHint(hint).field(\"name\").size(10))\n                    .addFacet(termsFacet(\"termFacetRegex\").executionHint(hint).field(\"multiValued\").regex(\"9\\\\d\").size(20))\n                    .addFacet(termsFacet(\"termFacetScript\").executionHint(hint).field(\"multiValued\").script(\"Integer.toHexString(Integer.parseInt(term))\").size(10))\n                    .addFacet(termsFacet(\"termFacetScriptRegex\").executionHint(hint).field(\"multiValued\").script(\"Integer.toHexString(Integer.parseInt(term))\").regex(\"9\\\\d\").size(20))\n\n                    .execute().actionGet();\n\n            assertThat(searchResponse.getHits().getTotalHits(), equalTo(110l));\n            TermsFacet facet = searchResponse.getFacets().facet(\"termFacet\");\n            assertThat(facet.getName(), equalTo(\"termFacet\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"termFacetRegex\");\n            assertThat(facet.getName(), equalTo(\"termFacetRegex\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            int count = 99;\n            for (Entry entry : facet) {\n                assertThat(Integer.parseInt(entry.getTerm().string()), equalTo(count--));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"termFacetScriptRegex\");\n            assertThat(facet.getName(), equalTo(\"termFacetScriptRegex\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            count = 99;\n            for (Entry entry : facet) {\n                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"termFacetScript\");\n            assertThat(facet.getName(), equalTo(\"termFacetScript\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            count = 99;\n            for (Entry entry : facet) {\n                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"double\");\n            assertThat(facet.getName(), equalTo(\"double\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"float\");\n            assertThat(facet.getName(), equalTo(\"float\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"long\");\n            assertThat(facet.getName(), equalTo(\"long\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"integer\");\n            assertThat(facet.getName(), equalTo(\"integer\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"short\");\n            assertThat(facet.getName(), equalTo(\"short\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n        }\n    }","id":5633,"modified_method":"@Test\n    public void testFacetNumeric() throws ElasticsearchException, IOException {\n        assertAcked(prepareCreate(\"test\").addMapping(\"type\", jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"byte\").field(\"type\", \"byte\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"short\").field(\"type\", \"short\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"integer\").field(\"type\", \"integer\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"long\").field(\"type\", \"long\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"float\").field(\"type\", \"float\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .startObject(\"double\").field(\"type\", \"double\").startObject(\"fielddata\").field(\"format\", maybeDocValues() ? \"doc_values\" : null).endObject().endObject()\n                .endObject().endObject().endObject()));\n        ensureGreen();\n\n        for (int i = 0; i < 100; i++) {\n            client().prepareIndex(\"test\", \"type\", \"\" + i).setSource(jsonBuilder().startObject()\n                    .field(\"name\", \"\" + i)\n                    .field(\"multiValued\", \"\" + i, \"\" + (90 + i % 10))\n                    .field(\"byte\", i)\n                    .field(\"short\", i + Byte.MAX_VALUE)\n                    .field(\"integer\", i + Short.MAX_VALUE)\n                    .field(\"long\", i + Integer.MAX_VALUE)\n                    .field(\"float\", (float) i)\n                    .field(\"double\", (double) i)\n                    .endObject()).execute().actionGet();\n        }\n\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"type\", \"\" + (i + 100)).setSource(jsonBuilder().startObject()\n                    .field(\"foo\", \"\" + i)\n                    .endObject()).execute().actionGet();\n        }\n        int shardSize = numberOfShards() > 5 ? 20 : 10;\n        String[] execHint = new String[]{\"map\", null};\n        for (String hint : execHint) {\n\n            flushAndRefresh();\n            SearchResponse searchResponse = client().prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(termsFacet(\"double\").shardSize(shardSize).executionHint(hint).field(\"double\").size(10))\n                    .addFacet(termsFacet(\"float\").shardSize(shardSize).executionHint(hint).field(\"float\").size(10))\n                    .addFacet(termsFacet(\"integer\").shardSize(shardSize).executionHint(hint).field(\"integer\").size(10))\n                    .addFacet(termsFacet(\"long\").shardSize(shardSize).executionHint(hint).field(\"long\").size(10))\n                    .addFacet(termsFacet(\"short\").shardSize(shardSize).executionHint(hint).field(\"short\").size(10))\n                    .addFacet(termsFacet(\"byte\").shardSize(shardSize).executionHint(hint).field(\"byte\").size(10))\n                    .addFacet(termsFacet(\"termFacet\").shardSize(shardSize).executionHint(hint).field(\"name\").size(10))\n                    .addFacet(termsFacet(\"termFacetRegex\").shardSize(shardSize).executionHint(hint).field(\"multiValued\").regex(\"9\\\\d\").size(20))\n                    .addFacet(termsFacet(\"termFacetScript\").shardSize(shardSize).executionHint(hint).field(\"multiValued\").script(\"Integer.toHexString(Integer.parseInt(term))\").size(10))\n                    .addFacet(termsFacet(\"termFacetScriptRegex\").shardSize(shardSize).executionHint(hint).field(\"multiValued\").script(\"Integer.toHexString(Integer.parseInt(term))\").regex(\"9\\\\d\").size(20))\n\n                    .execute().actionGet();\n\n            assertThat(searchResponse.getHits().getTotalHits(), equalTo(110l));\n            TermsFacet facet = searchResponse.getFacets().facet(\"termFacet\");\n            assertThat(facet.getName(), equalTo(\"termFacet\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"termFacetRegex\");\n            assertThat(facet.getName(), equalTo(\"termFacetRegex\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            int count = 99;\n            for (Entry entry : facet) {\n                assertThat(Integer.parseInt(entry.getTerm().string()), equalTo(count--));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"termFacetScriptRegex\");\n            assertThat(facet.getName(), equalTo(\"termFacetScriptRegex\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            count = 99;\n            for (Entry entry : facet) {\n                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"termFacetScript\");\n            assertThat(facet.getName(), equalTo(\"termFacetScript\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(190l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            count = 99;\n            for (Entry entry : facet) {\n                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));\n                assertThat(entry.getCount(), equalTo(10));\n            }\n\n            facet = searchResponse.getFacets().facet(\"double\");\n            assertThat(facet.getName(), equalTo(\"double\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"float\");\n            assertThat(facet.getName(), equalTo(\"float\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"long\");\n            assertThat(facet.getName(), equalTo(\"long\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"integer\");\n            assertThat(facet.getName(), equalTo(\"integer\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n\n            facet = searchResponse.getFacets().facet(\"short\");\n            assertThat(facet.getName(), equalTo(\"short\"));\n            assertThat(facet.getEntries().size(), equalTo(10));\n            assertThat(facet.getTotalCount(), equalTo(100l));\n            assertThat(facet.getOtherCount(), equalTo(90l));\n            assertThat(facet.getMissingCount(), equalTo(10l));\n        }\n    }","commit_id":"af4c112907a8968ec7cad6fe73c1d2948a474a33","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected void moveDependentsToTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tint oldStatus = thread.getStatus();\n\n\t\t\t\tif (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthread.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\tthread.getThreadId(), oldStatus);\n\n\t\t\t\tmbThreadLocalService.moveDependentsToTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tif (category.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint oldStatus = category.getStatus();\n\n\t\t\t\tcategory.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\tcategory.getCategoryId(), oldStatus);\n\n\t\t\t\tmoveDependentsToTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","id":5634,"modified_method":"protected void moveDependentsToTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tint oldStatus = thread.getStatus();\n\n\t\t\t\tif (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthread.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\tif (oldStatus != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\t\tthread.getThreadId(), oldStatus);\n\t\t\t\t}\n\n\t\t\t\tmbThreadLocalService.moveDependentsToTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tif (category.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint oldStatus = category.getStatus();\n\n\t\t\t\tcategory.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\tif (oldStatus != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\t\tcategory.getCategoryId(), oldStatus);\n\t\t\t\t}\n\n\t\t\t\tmoveDependentsToTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"a3593faf765eb89cc7cb41d1e6fbb5bb8c12a7bf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void restoreDependentFromTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBThread.class.getName(), thread.getThreadId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\t\tthread.getThreadId());\n\n\t\t\t\tthread.setStatus(trashVersion.getStatus());\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t\tmbThreadLocalService.restoreDependentsFromTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBCategory.class.getName(), category.getCategoryId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\t\tcategory.getCategoryId());\n\n\t\t\t\tcategory.setStatus(trashVersion.getStatus());\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t\trestoreDependentFromTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","id":5635,"modified_method":"protected void restoreDependentFromTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBThread.class.getName(), thread.getThreadId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\t\tthread.getThreadId());\n\n\t\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t\t}\n\n\t\t\t\tthread.setStatus(oldStatus);\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t\t}\n\n\t\t\t\tmbThreadLocalService.restoreDependentsFromTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBCategory.class.getName(), category.getCategoryId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\t\tcategory.getCategoryId());\n\n\t\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t\t}\n\n\t\t\t\tcategory.setStatus(oldStatus);\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t\t}\n\n\t\t\t\trestoreDependentFromTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"a3593faf765eb89cc7cb41d1e6fbb5bb8c12a7bf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreDependentsFromTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tTrashVersion trashVersion = trashVersionLocalService.fetchVersion(\n\t\t\t\ttrashEntryId, MBMessage.class.getName(),\n\t\t\t\tmessage.getMessageId());\n\n\t\t\tint oldStatus = trashVersion.getStatus();\n\n\t\t\tmessage.setStatus(oldStatus);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), true);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","id":5636,"modified_method":"@Override\n\tpublic void restoreDependentsFromTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tTrashVersion trashVersion = trashVersionLocalService.fetchVersion(\n\t\t\t\ttrashEntryId, MBMessage.class.getName(),\n\t\t\t\tmessage.getMessageId());\n\n\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t}\n\n\t\t\tmessage.setStatus(oldStatus);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), true);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t}\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","commit_id":"a3593faf765eb89cc7cb41d1e6fbb5bb8c12a7bf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void moveDependentsToTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint oldStatus = message.getStatus();\n\n\t\t\tmessage.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), false);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\tint status = oldStatus;\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tstatus = WorkflowConstants.STATUS_DRAFT;\n\t\t\t}\n\n\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\ttrashEntryId, MBMessage.class.getName(), message.getMessageId(),\n\t\t\t\tstatus);\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\n\t\t\t// Workflow\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tmessage.getCompanyId(), message.getGroupId(),\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","id":5637,"modified_method":"@Override\n\tpublic void moveDependentsToTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint oldStatus = message.getStatus();\n\n\t\t\tmessage.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), false);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\tint status = oldStatus;\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tstatus = WorkflowConstants.STATUS_DRAFT;\n\t\t\t}\n\n\t\t\tif (oldStatus != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\ttrashEntryId, MBMessage.class.getName(),\n\t\t\t\t\tmessage.getMessageId(), status);\n\t\t\t}\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\n\t\t\t// Workflow\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tmessage.getCompanyId(), message.getGroupId(),\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","commit_id":"a3593faf765eb89cc7cb41d1e6fbb5bb8c12a7bf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Tests if all given input parameters for the HTML Import are valid, i.e. that all the \n     * given folders do exist. <p>\n     * \n     * @throws CmsIllegalArgumentException if some parameters are not valid\n     */\n    public void checkParameters() throws CmsIllegalArgumentException {\n\n        // check the input directory\n        File inputDir = new File(m_inputDir);\n        if (!inputDir.exists() || inputDir.isFile()) {\n            // the input directory is not valid\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_INPUTDIR_1,\n                m_inputDir));\n        }\n\n        // check the destination directory        \n        try {\n            m_cmsObject.readFolder(m_destinationDir);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the folder does not exist\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_DESTDIR_1,\n                m_destinationDir), e);\n        }\n\n        // check the image gallery\n        try {\n            m_cmsObject.readFolder(m_imageGallery);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the folder does not exist\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_DESTDIR_1,\n                m_imageGallery), e);\n        }\n\n        // check the link gallery\n        try {\n            m_cmsObject.readFolder(m_linkGallery);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the folder does not exist\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_LINKGALLERY_1,\n                m_linkGallery), e);\n\n        }\n\n        // check the download gallery\n        if (!isExternal(m_downloadGallery)) {\n            try {\n                m_cmsObject.readFolder(m_downloadGallery);\n            } catch (CmsException e) {\n                // an excpetion is thrown if the folder does not exist\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_DOWNGALLERY_1,\n                    m_downloadGallery), e);\n            }\n        }\n\n        // check the template\n        try {\n            m_cmsObject.readResource(m_template, CmsResourceFilter.ALL);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the template does not exist\n            if (!isValidElement()) {\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_TEMPLATE_1,\n                    m_template), e);\n            }\n        }\n\n        // check the element\n        if (!isValidElement()) {\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_INVALID_ELEM_2,\n                m_element,\n                m_template));\n        }\n\n        // check if we are in an offline project\n        if (m_cmsObject.getRequestContext().currentProject().isOnlineProject()) {\n            throw new CmsIllegalArgumentException(\n                Messages.get().container(Messages.GUI_HTMLIMPORT_CONSTRAINT_OFFLINE_0));\n        }\n    }","id":5638,"modified_method":"/**\n     * Tests if all given input parameters for the HTML Import are valid, i.e. that all the \n     * given folders do exist. <p>\n     * \n     * @throws CmsIllegalArgumentException if some parameters are not valid\n     */\n    public void checkParameters() throws CmsIllegalArgumentException {\n\n        // check the input directory\n        File inputDir = new File(m_inputDir);\n        if (!inputDir.exists() || inputDir.isFile()) {\n            // the input directory is not valid\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_INPUTDIR_1,\n                m_inputDir));\n        }\n\n        // check the destination directory        \n        try {\n            m_cmsObject.readFolder(m_destinationDir);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the folder does not exist\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_DESTDIR_1,\n                m_destinationDir), e);\n        }\n\n        // check the image gallery\n        // only if flag for leaving images at original location is off\n        if (!m_leaveImagesMode) {\n            try {\n                CmsFolder folder = m_cmsObject.readFolder(m_imageGallery);\n                // check if folder is a image gallery\n                String name = OpenCms.getResourceManager().getResourceType(folder.getTypeId()).getTypeName();\n                if (!name.equals(\"imagegallery\")) {\n                    throw new CmsIllegalArgumentException(Messages.get().container(\n                        Messages.GUI_HTMLIMPORT_IMGGALLERY_2,\n                        m_imageGallery));\n                }\n            } catch (CmsException e) {\n                // an excpetion is thrown if the folder does not exist\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_IMGGALLERY_1,\n                    m_imageGallery), e);\n            }\n        }\n\n        // check the link gallery\n        try {\n            CmsFolder folder = m_cmsObject.readFolder(m_linkGallery);\n            // check if folder is a link gallery\n            String name = OpenCms.getResourceManager().getResourceType(folder.getTypeId()).getTypeName();\n            if (!name.equals(\"linkgallery\")) {\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_LINKGALLERY_2,\n                    m_linkGallery));\n            }\n        } catch (CmsException e) {\n            // an excpetion is thrown if the folder does not exist\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_LINKGALLERY_1,\n                m_linkGallery), e);\n        }\n\n        // check the download gallery\n        if ((!isExternal(m_downloadGallery)) && (!m_leaveDownloadsMode)) {\n            try {\n                CmsFolder folder = m_cmsObject.readFolder(m_downloadGallery);\n                // check if folder is a download gallery\n                String name = OpenCms.getResourceManager().getResourceType(folder.getTypeId()).getTypeName();\n                if (!name.equals(\"downloadgallery\")) {\n                    throw new CmsIllegalArgumentException(Messages.get().container(\n                        Messages.GUI_HTMLIMPORT_DOWNGALLERY_2,\n                        m_downloadGallery));\n                }\n            } catch (CmsException e) {\n                // an excpetion is thrown if the folder does not exist\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_DOWNGALLERY_1,\n                    m_downloadGallery), e);\n            }\n        }\n\n        // check the template\n        try {\n            m_cmsObject.readResource(m_template, CmsResourceFilter.ALL);\n        } catch (CmsException e) {\n            // an excpetion is thrown if the template does not exist\n            if (!isValidElement()) {\n                throw new CmsIllegalArgumentException(Messages.get().container(\n                    Messages.GUI_HTMLIMPORT_TEMPLATE_1,\n                    m_template), e);\n            }\n        }\n\n        // check the element\n        if (!isValidElement()) {\n            throw new CmsIllegalArgumentException(Messages.get().container(\n                Messages.GUI_HTMLIMPORT_INVALID_ELEM_2,\n                m_element,\n                m_template));\n        }\n\n        // check if we are in an offline project\n        if (m_cmsObject.getRequestContext().currentProject().isOnlineProject()) {\n            throw new CmsIllegalArgumentException(\n                Messages.get().container(Messages.GUI_HTMLIMPORT_CONSTRAINT_OFFLINE_0));\n        }\n    }","commit_id":"940803beb5a386b41791aa19061a3c251850cfca","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates new HtmlImport Object with http request parameters.<p>\n     * \n     * @param cms the current CmsJspActionElement  \n     * @param request the http servlet request\n     */\n    public CmsHtmlImport(CmsJspActionElement cms, HttpServletRequest request) {\n\n        this(\n            cms,\n            request.getParameter(\"inputDir\"),\n            request.getParameter(\"destinationDir\"),\n            request.getParameter(\"imageGallery\"),\n            request.getParameter(\"linkGallery\"),\n            request.getParameter(\"downloadGallery\"),\n            request.getParameter(\"template\"),\n            request.getParameter(\"element\"),\n            request.getParameter(\"locale\"),\n            request.getParameter(\"encoding\"),\n            request.getParameter(\"startPattern\"),\n            request.getParameter(\"endPattern\"),\n            request.getParameter(\"overwrite\"));\n    }","id":5639,"modified_method":"/**\n     * Creates new HtmlImport Object with http request parameters.<p>\n     * \n     * @param cms the current CmsJspActionElement  \n     * @param request the http servlet request\n     */\n    public CmsHtmlImport(CmsJspActionElement cms, HttpServletRequest request) {\n\n        this(\n            cms,\n            request.getParameter(\"inputDir\"),\n            request.getParameter(\"destinationDir\"),\n            request.getParameter(\"imageGallery\"),\n            request.getParameter(\"linkGallery\"),\n            request.getParameter(\"downloadGallery\"),\n            request.getParameter(\"template\"),\n            request.getParameter(\"element\"),\n            request.getParameter(\"locale\"),\n            request.getParameter(\"encoding\"),\n            request.getParameter(\"startPattern\"),\n            request.getParameter(\"endPattern\"),\n            request.getParameter(\"overwrite\"),\n            request.getParameter(\"leaveimages\"),\n            request.getParameter(\"leavedownloads\"),\n            request);\n    }","commit_id":"940803beb5a386b41791aa19061a3c251850cfca","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the destinationDir.<p>\n     *\n     * @return the destinationDir\n     */\n    public String getDestinationDir() {\n\n        return m_destinationDir.substring(0, m_destinationDir.length() - 1);\n    }","id":5640,"modified_method":"/**\n     * Returns the destinationDir.<p>\n     *\n     * @return the destinationDir\n     */\n    public String getDestinationDir() {\n\n        return m_destinationDir;\n//        return m_destinationDir.substring(0, m_destinationDir.length() - 1);\n    }","commit_id":"940803beb5a386b41791aa19061a3c251850cfca","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Gets a valid VfsName form a given name in the real filesystem.<p>\n     * \n     * This name will ater be used for all link translations during the HTML-parsing process.\n     * @param relativeName the name in the real fielsystem, relative to the start folder\n     * @param name the name of the file\n     * @param isFile flag to indicate that the resource is a file\n     * \n     * @return a valid name in the VFS\n     * \n     * @throws Exception if something goes wrong\n     */\n    private String getVfsName(String relativeName, String name, boolean isFile) throws Exception {\n\n        // first translate all fileseperators to the valid \"/\" in OpenCms\n        String vfsName = relativeName.replace('\\\\', '/');\n        // the resource is a file\n        if (isFile) {\n            // we must check if it might be copied into a gallery. this can be done by checking the\n            // file extension\n            int filetype = getFileType(name);\n\n            // there is no name before the \".extension\"\n            if (name.indexOf(\".\") == 0) {\n                name = \"unknown\" + name;\n                int dot = relativeName.lastIndexOf(\".\");\n\n                relativeName = relativeName.substring(0, dot) + name;\n            }\n\n            // depending on the filetype, the resource must be moved into a speical folder in \n            // OpenCms:\n            // images -> move into image gallery\n            // binary -> move into download gallery\n            // plain -> move into destination folder\n            // other -> move into download gallery\n            if (CmsResourceTypeImage.getStaticTypeId() == filetype) {\n                // move to image gallery\n                // as the image gallery is \"flat\", we must use the file name and not the complete\n                // relative name\n                vfsName = m_imageGallery + name;\n            } else if (CmsResourceTypePlain.getStaticTypeId() == filetype) {\n                // move to destination folder\n                //vfsName=m_destinationDir+relativeName;\n\n                // we have to check if there is a folder with the same name but without extension\n                // if so, we will move the file into the folder and name it \"index.html\"\n                String folderName = relativeName;\n                if (folderName.indexOf(\".\") > 0) {\n                    folderName = folderName.substring(0, folderName.indexOf(\".\"));\n                }\n                folderName = m_inputDir + \"\\\\\" + folderName;\n                File folder = new File(folderName);\n\n                if ((folder != null) && (folder.isDirectory())) {\n                    vfsName = m_destinationDir + relativeName.substring(0, relativeName.indexOf(\".\")) + \"/index.html\";\n                    // System.err.println(\"MOVING \"+ relativeName + \" -> \" + name.substring(0,name.indexOf(\".\"))+\"/index.html\");\n                } else {\n                    // move to destination folder\n                    vfsName = m_destinationDir + relativeName;\n                }\n\n            } else {\n                // everything else will be moved to the download gallery.\n                // as the download gallery is \"flat\", we must use the file name and not the complete\n                // relative name\n                vfsName = m_downloadGallery + name;\n            }\n            // now we have the filename in the VFS. its possible that a file with the same name\n            // is already existing, in this case, we have to adjust the filename.        \n            return validateFilename(vfsName);\n        } else {\n            // folders are always moved to the destination folder\n            vfsName = m_destinationDir + vfsName + \"/\";\n            return vfsName;\n        }\n    }","id":5641,"modified_method":"/**\n     * Gets a valid VfsName form a given name in the real filesystem.<p>\n     * \n     * This name will ater be used for all link translations during the HTML-parsing process.\n     * @param relativeName the name in the real fielsystem, relative to the start folder\n     * @param name the name of the file\n     * @param isFile flag to indicate that the resource is a file\n     * \n     * @return a valid name in the VFS\n     * \n     * @throws Exception if something goes wrong\n     */\n    private String getVfsName(String relativeName, String name, boolean isFile) throws Exception {\n\n        // first translate all fileseperators to the valid \"/\" in OpenCms\n        String vfsName = relativeName.replace('\\\\', '/');\n        // the resource is a file\n        if (isFile) {\n            // we must check if it might be copied into a gallery. this can be done by checking the\n            // file extension\n            int filetype = getFileType(name);\n\n            // there is no name before the \".extension\"\n            if (name.indexOf(\".\") == 0) {\n                name = \"unknown\" + name;\n                int dot = relativeName.lastIndexOf(\".\");\n\n                relativeName = relativeName.substring(0, dot) + name;\n            }\n\n            // depending on the filetype, the resource must be moved into a special folder in \n            // OpenCms:\n            // images -> move into image gallery, if flag to leave at original location is off\n            // binary -> move into download gallery, if flag to leaave at original location is off\n            // plain -> move into destination folder\n            // other -> move into download gallery, if flag to leaave at original location is off\n            if ((CmsResourceTypeImage.getStaticTypeId() == filetype) && (!m_leaveImagesMode)) {\n\n                // move to image gallery\n                // as the image gallery is \"flat\", we must use the file name and not the complete\n                // relative name\n                vfsName = m_imageGallery + name;\n            } else if ((CmsResourceTypePlain.getStaticTypeId() == filetype) \n                    || (m_leaveImagesMode) \n                    || (m_leaveDownloadsMode)) {\n                // move to destination folder\n                //vfsName=m_destinationDir+relativeName;\n\n                // we have to check if there is a folder with the same name but without extension\n                // if so, we will move the file into the folder and name it \"index.html\"\n                String folderName = relativeName;\n                if (folderName.indexOf(\".\") > 0) {\n                    folderName = folderName.substring(0, folderName.indexOf(\".\"));\n                }\n                folderName = m_inputDir + \"\\\\\" + folderName;\n                File folder = new File(folderName);\n\n                if ((folder != null) && (folder.isDirectory())) {\n                    vfsName = m_destinationDir + relativeName.substring(0, relativeName.indexOf(\".\")) + \"/index.html\";\n                    // System.err.println(\"MOVING \"+ relativeName + \" -> \" + name.substring(0,name.indexOf(\".\"))+\"/index.html\");\n                } else {\n                    // move to destination folder\n                    vfsName = m_destinationDir + relativeName;\n                }\n\n            } else {\n                // everything else will be moved to the download gallery.\n                // as the download gallery is \"flat\", we must use the file name and not the complete\n                // relative name\n                vfsName = m_downloadGallery + name;\n            }\n            // now we have the filename in the VFS. its possible that a file with the same name\n            // is already existing, in this case, we have to adjust the filename.        \n            return validateFilename(vfsName);\n        } else {\n            // folders are always moved to the destination folder\n            vfsName = m_destinationDir + vfsName + \"/\";\n            return vfsName;\n        }\n    }","commit_id":"940803beb5a386b41791aa19061a3c251850cfca","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Constructor, creates a new HtmlImport.<p>\n     * \n     * @param cms the current CmsJspActionElement \n     * @param inputDir the input directory in the \"real\" file system \n     * @param destinationDir the destination directory in the OpenCms VFS\n     * @param imageGallery the image gallery name\n     * @param linkGallery the external link gallery name\n     * @param downloadGallery the download gallery name\n     * @param template the template use for all pages\n     * @param element the element property use for all pages\n     * @param locale the full locale name \n     * @param encoding encoding used for importing all pages\n     * @param startPattern the start pattern definition for content extracting\n     * @param endPattern the end pattern definition for content extracting \n     * @param overwrite the overwrite mode\n     */\n    public CmsHtmlImport(\n        CmsJspActionElement cms,\n        String inputDir,\n        String destinationDir,\n        String imageGallery,\n        String linkGallery,\n        String downloadGallery,\n        String template,\n        String element,\n        String locale,\n        String encoding,\n        String startPattern,\n        String endPattern,\n        String overwrite) {\n\n        if (inputDir == null) {\n            inputDir = \"\";\n        }\n        if (destinationDir == null) {\n            destinationDir = \"/\";\n        }\n        if (imageGallery == null) {\n            imageGallery = \"\";\n        }\n        if (linkGallery == null) {\n            linkGallery = \"\";\n        }\n        if (downloadGallery == null) {\n            downloadGallery = \"\";\n        }\n        if (template == null) {\n            template = \"\";\n        }\n        if (element == null) {\n            element = \"body\";\n        }\n        if (encoding == null) {\n            encoding = \"\";\n        }\n        if (startPattern == null) {\n            startPattern = \"\";\n        }\n        if (endPattern == null) {\n            endPattern = \"\";\n        }\n        if (overwrite == null) {\n            overwrite = \"checked\";\n        }\n\n        // store all member variables\n        m_cms = cms;\n        m_cmsObject = m_cms.getCmsObject();\n        m_locale = CmsLocaleManager.getLocale(locale);\n        if (m_locale == null) {\n            m_locale = m_cms.getRequestContext().getLocale();\n        }\n        // body element should be set by html-form\n        m_inputDir = inputDir.trim();\n\n        // cut of a trailing '/' or '\\'\n        if (m_inputDir.endsWith(\"/\") || m_inputDir.endsWith(\"\\\\\")) {\n            m_inputDir = m_inputDir.substring(0, m_inputDir.length() - 1);\n        }\n\n        m_destinationDir = destinationDir.trim();\n        if (!m_destinationDir.endsWith(\"/\")) {\n            m_destinationDir += \"/\";\n        }\n\n        m_imageGallery = imageGallery.trim();\n        if (!m_imageGallery.endsWith(\"/\")) {\n            m_imageGallery += \"/\";\n        }\n        m_linkGallery = linkGallery.trim();\n        if (!m_linkGallery.endsWith(\"/\")) {\n            m_linkGallery += \"/\";\n        }\n        m_downloadGallery = downloadGallery.trim();\n        if (!m_downloadGallery.endsWith(\"/\")) {\n            m_downloadGallery += \"/\";\n        }\n\n        m_template = template;\n        m_element = element;\n        m_inputEncoding = encoding;\n\n        if (CmsStringUtil.isEmpty(m_inputEncoding)) {\n            m_inputEncoding = CmsEncoder.ENCODING_ISO_8859_1;\n        }\n        m_startPattern = startPattern;\n        m_endPattern = endPattern;\n\n        m_overwrite = overwrite.trim();\n        if (m_overwrite.equals(\"checked\")) {\n            m_overwriteMode = true;\n        } else {\n            m_overwriteMode = false;\n        }\n\n        // create all other required member objects\n        m_fileIndex = new HashMap();\n        m_externalLinks = new HashSet();\n        m_imageInfo = new HashMap();\n        m_extensions = OpenCms.getResourceManager().getExtensionMapping();\n        m_htmlConverter = new CmsHtmlImportConverter(this, false);\n        m_baseUrl = null;\n        try {\n            m_baseUrl = new URL(\"file://\");\n        } catch (MalformedURLException e) {\n            // this won't happen\n        }\n    }","id":5642,"modified_method":"/**\n     * Constructor, creates a new HtmlImport.<p>\n     * \n     * @param cms the current CmsJspActionElement \n     * @param inputDir the input directory in the \"real\" file system \n     * @param destinationDir the destination directory in the OpenCms VFS\n     * @param imageGallery the image gallery name\n     * @param linkGallery the external link gallery name\n     * @param downloadGallery the download gallery name\n     * @param template the template use for all pages\n     * @param element the element property use for all pages\n     * @param locale the full locale name \n     * @param encoding encoding used for importing all pages\n     * @param startPattern the start pattern definition for content extracting\n     * @param endPattern the end pattern definition for content extracting \n     * @param overwrite the overwrite mode\n     * @param leaveImages flag if images are left in original location\n     * @param leaveDownloads flag if downloads are left in original location\n     */\n    public CmsHtmlImport(\n        CmsJspActionElement cms,\n        String inputDir,\n        String destinationDir,\n        String imageGallery,\n        String linkGallery,\n        String downloadGallery,\n        String template,\n        String element,\n        String locale,\n        String encoding,\n        String startPattern,\n        String endPattern,\n        String overwrite,\n        String leaveImages,\n        String leaveDownloads,\n        HttpServletRequest request\n        ) {\n\n        if (inputDir == null) {\n            inputDir = \"\";\n        }\n        if (destinationDir == null) {\n            destinationDir = \"\";\n        }\n        if (imageGallery == null) {\n            imageGallery = \"\";\n        }\n        if (linkGallery == null) {\n            linkGallery = \"\";\n        }\n        if (downloadGallery == null) {\n            downloadGallery = \"\";\n        }\n        if (template == null) {\n            template = \"\";\n        }\n        if (element == null) {\n            element = \"body\";\n        }\n        if (encoding == null) {\n            encoding = \"\";\n        }\n        if (startPattern == null) {\n            startPattern = \"\";\n        }\n        if (endPattern == null) {\n            endPattern = \"\";\n        }\n        if (overwrite == null) {\n            overwrite = \"\";\n        }\n        String action = request.getParameter(\"action\");\n        if (action == null) {\n            overwrite = \"checked\";\n        }        \n        if (leaveImages == null) {\n            leaveImages = \"\";\n        }\n        if (leaveDownloads == null) {\n            leaveDownloads = \"\";\n        }\n\n        // store all member variables\n        m_cms = cms;\n        m_cmsObject = m_cms.getCmsObject();\n        m_locale = CmsLocaleManager.getLocale(locale);\n        if (m_locale == null) {\n            m_locale = m_cms.getRequestContext().getLocale();\n        }\n        // body element should be set by html-form\n        m_inputDir = inputDir.trim();\n\n        // cut of a trailing '/' or '\\'\n        if (m_inputDir.endsWith(\"/\") || m_inputDir.endsWith(\"\\\\\")) {\n            m_inputDir = m_inputDir.substring(0, m_inputDir.length() - 1);\n        }\n\n        m_destinationDir = destinationDir.trim();\n        if ((!m_destinationDir.equals(\"\")) && (!m_destinationDir.endsWith(\"/\"))) {\n            m_destinationDir += \"/\";\n        }\n\n        m_imageGallery = imageGallery.trim();\n        if ((!m_imageGallery.equals(\"\")) && (!m_imageGallery.endsWith(\"/\"))) {\n            m_imageGallery += \"/\";\n        }\n        \n        m_linkGallery = linkGallery.trim();\n        if ((!m_linkGallery.equals(\"\")) && (!m_linkGallery.endsWith(\"/\"))) {\n            m_linkGallery += \"/\";\n        }\n        \n        m_downloadGallery = downloadGallery.trim();\n        if ((!m_downloadGallery.equals(\"\")) && (!m_downloadGallery.endsWith(\"/\"))) {\n            m_downloadGallery += \"/\";\n        }\n\n        m_template = template;\n        m_element = element;\n        m_inputEncoding = encoding;\n\n        if (CmsStringUtil.isEmpty(m_inputEncoding)) {\n            m_inputEncoding = CmsEncoder.ENCODING_ISO_8859_1;\n        }\n        m_startPattern = startPattern;\n        m_endPattern = endPattern;\n\n        m_overwrite = overwrite.trim();\n        if (m_overwrite.equals(\"checked\")) {\n            m_overwriteMode = true;\n        } else {\n            m_overwriteMode = false;\n        }\n\n        m_leaveImages = leaveImages.trim();\n        if (m_leaveImages.equals(\"checked\")) {\n            m_leaveImagesMode = true;\n        } else {\n            m_leaveImagesMode = false;\n        }\n        \n        m_leaveDownloads = leaveDownloads.trim();\n        if (m_leaveDownloads.equals(\"checked\")) {\n            m_leaveDownloadsMode = true;\n        } else {\n            m_leaveDownloadsMode = false;\n        }\n        \n        // create all other required member objects\n        m_fileIndex = new HashMap();\n        m_externalLinks = new HashSet();\n        m_imageInfo = new HashMap();\n        m_extensions = OpenCms.getResourceManager().getExtensionMapping();\n        m_htmlConverter = new CmsHtmlImportConverter(this, false);\n        m_baseUrl = null;\n        try {\n            m_baseUrl = new URL(\"file://\");\n        } catch (MalformedURLException e) {\n            // this won't happen\n        }\n    }","commit_id":"940803beb5a386b41791aa19061a3c251850cfca","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public static Span tokensToSpan(List<Token> tokens, Options options) {\n    if (options.isDebug()) {\n      System.out.println(\"Chronic.tokensToSpan: \" + tokens);\n    }\n\n    // maybe it's a specific date\n    Map<Handler.HandlerType, List<Handler>> definitions = Handler.definitions(options);\n    for (Handler handler : definitions.get(Handler.HandlerType.DATE)) {\n      if (handler.isCompatible(options) && handler.match(tokens, definitions)) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: date \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : tokens) {\n          if (token.getTag(Separator.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // I guess it's not a specific date, maybe it's just an anchor\n    for (Handler handler : definitions.get(Handler.HandlerType.ANCHOR)) {\n      if (handler.isCompatible(options) && handler.match(tokens, definitions)) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: anchor \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : tokens) {\n          if (token.getTag(Separator.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // not an anchor, perhaps it's an arrow\n    for (Handler handler : definitions.get(Handler.HandlerType.ARROW)) {\n      if (handler.isCompatible(options) && handler.match(tokens, definitions)) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: arrow \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : tokens) {\n          if (token.getTag(SeparatorAt.class) == null && token.getTag(SeparatorSlashOrDash.class) == null && token.getTag(SeparatorComma.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // not an arrow, let's hope it's a narrow\n    for (Handler handler : definitions.get(Handler.HandlerType.NARROW)) {\n      if (handler.isCompatible(options) && handler.match(tokens, definitions)) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: narrow \" + handler);\n        }\n        //List<Token> goodTokens = new LinkedList<Token>();\n        //for (Token token : tokens) {\n        //if (token.getTag(Separator.class) == null) {\n        //  goodTokens.add(token);\n        //}\n        //}\n        return handler.getHandler().handle(tokens, options);\n      }\n    }\n\n    // I guess you're out of luck!\n    if (options.isDebug()) {\n      System.out.println(\"Chronic.tokensToSpan: none\");\n    }\n    return null;\n  }","id":5643,"modified_method":"public static Span tokensToSpan(List<Token> tokens, Options options) {\n    if (options.isDebug()) {\n      System.out.println(\"Chronic.tokensToSpan: \" + tokens);\n    }\n\n    Range range = null;\n    // maybe it's a specific date\n    Map<Handler.HandlerType, List<Handler>> definitions = Handler.definitions(options);\n    for (Handler handler : definitions.get(Handler.HandlerType.DATE)) {\n      if (handler.isCompatible(options) && (range = handler.matchCount(tokens, definitions)) != null) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: date \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : range.subList(tokens)) {\n          if (token.getTag(Separator.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // I guess it's not a specific date, maybe it's just an anchor\n    for (Handler handler : definitions.get(Handler.HandlerType.ANCHOR)) {\n      if (handler.isCompatible(options) && (range = handler.matchCount(tokens, definitions)) != null) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: anchor \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : range.subList(tokens)) {\n          if (token.getTag(Separator.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // not an anchor, perhaps it's an arrow\n    for (Handler handler : definitions.get(Handler.HandlerType.ARROW)) {\n      if (handler.isCompatible(options) && (range = handler.matchCount(tokens, definitions)) != null) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: arrow \" + handler);\n        }\n        List<Token> goodTokens = new LinkedList<Token>();\n        for (Token token : range.subList(tokens)) {\n          if (token.getTag(SeparatorAt.class) == null && token.getTag(SeparatorSlashOrDash.class) == null && token.getTag(SeparatorComma.class) == null) {\n            goodTokens.add(token);\n          }\n        }\n        return handler.getHandler().handle(goodTokens, options);\n      }\n    }\n\n    // not an arrow, let's hope it's a narrow\n    for (Handler handler : definitions.get(Handler.HandlerType.NARROW)) {\n      if (handler.isCompatible(options) && (range = handler.matchCount(tokens, definitions)) != null) {\n        if (options.isDebug()) {\n          System.out.println(\"Chronic.tokensToSpan: narrow \" + handler);\n        }\n        //List<Token> goodTokens = new LinkedList<Token>();\n        //for (Token token : tokens) {\n        //if (token.getTag(Separator.class) == null) {\n        //  goodTokens.add(token);\n        //}\n        //}\n        return handler.getHandler().handle(range.subList(tokens), options);\n      }\n    }\n\n    // I guess you're out of luck!\n    if (options.isDebug()) {\n      System.out.println(\"Chronic.tokensToSpan: none\");\n    }\n    return null;\n  }","commit_id":"b7d08563ec68e1602a04d432356ab1fd817bd426","url":"https://github.com/wocommunity/wonder"},{"original_method":"public boolean match(List<Token> tokens, Map<Handler.HandlerType, List<Handler>> definitions) {\n    // System.out.println(\"Handler.match: \" + this);\n    int tokenIndex = 0;\n    for (HandlerPattern pattern : _patterns) {\n      boolean optional = pattern.isOptional();\n      if (pattern instanceof TagPattern) {\n        boolean match = (tokenIndex < tokens.size() && tokens.get(tokenIndex).getTags(((TagPattern) pattern).getTagClass()).size() > 0);\n        // System.out.println(\"Handler.match:   \" + pattern + \"=\" + match);\n        if (!match && !optional) {\n          return false;\n        }\n        if (match) {\n          tokenIndex++;\n        }\n        // next if !match && optional ?\n      }\n      else if (pattern instanceof HandlerTypePattern) {\n        if (optional && tokenIndex == tokens.size()) {\n          return true;\n        }\n        List<Handler> subHandlers = definitions.get(((HandlerTypePattern) pattern).getType());\n        for (Handler subHandler : subHandlers) {\n          if (subHandler.match(tokens.subList(tokenIndex, tokens.size()), definitions)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n    if (tokenIndex != tokens.size()) {\n      return false;\n    }\n    return true;\n  }","id":5644,"modified_method":"public boolean match(List<Token> tokens, Map<Handler.HandlerType, List<Handler>> definitions) {\n    return matchCount(tokens, definitions) != null;\n  }","commit_id":"b7d08563ec68e1602a04d432356ab1fd817bd426","url":"https://github.com/wocommunity/wonder"},{"original_method":"public static synchronized Map<Handler.HandlerType, List<Handler>> definitions(Options options) {\n    Map<Handler.HandlerType, List<Handler>> definitions = _definitions;\n    \n    // MS: technically we can't cache any longer because endian precendence mucks with the settings ...\n    List<EndianPrecedence> defaultEndianPrecedences = Arrays.asList(EndianPrecedence.Middle, EndianPrecedence.Little);\n    if (definitions == null || (options.getEndianPrecedence() != null && !options.getEndianPrecedence().equals(defaultEndianPrecedences))) {\n      List<EndianPrecedence> endianPrecendence = options.getEndianPrecedence();\n      if (endianPrecendence == null) {\n        endianPrecendence = defaultEndianPrecedences;\n      }\n\n      // ensure the endian precedence is exactly two elements long\n      if (endianPrecendence.size() != 2) {\n        throw new IllegalArgumentException(\"More than two elements specified for endian precedence array: \" + endianPrecendence + \".\");\n      }\n\n      Map<EndianPrecedence, Handler> endianHandlers = new HashMap<EndianPrecedence, Handler>();\n      // handler for dd/mm/yyyy\n      endianHandlers.put(EndianPrecedence.Little, new Handler(new SdSmSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n\n      // handler for mm/dd/yyyy\n      endianHandlers.put(EndianPrecedence.Middle, new Handler(new SmSdSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n\n      // ensure we have valid endian values\n      // MS: generics guarantee this for us \n\n      definitions = new HashMap<Handler.HandlerType, List<Handler>>();\n\n      List<Handler> timeHandlers = new LinkedList<Handler>();\n      timeHandlers.add(new Handler(null, new TagPattern(RepeaterTime.class), new TagPattern(Grabber.class, true), new TagPattern(RepeaterDayPortion.class, true)));\n      definitions.put(Handler.HandlerType.TIME, timeHandlers);\n\n      List<Handler> dateHandlers = new LinkedList<Handler>();\n      dateHandlers.add(new Handler(new RdnRmnSdTTzSyHandler(), new TagPattern(RepeaterDayName.class), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(RepeaterTime.class), new TagPattern(SeparatorSlashOrDash.class, true), new TagPattern(TimeZone.class), new TagPattern(ScalarYear.class)));\n      // DIFF: We add scalar year as a standalone match\n      dateHandlers.add(new Handler(new SyHandler(), new TagPattern(ScalarYear.class)));\n      // DIFF: We add an optional comma to MDY\n      dateHandlers.add(new Handler(new RmnSdSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorComma.class, true), new TagPattern(ScalarYear.class)));\n      dateHandlers.add(new Handler(new RmnSdSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorComma.class, true), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new RmnSdHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      for (EndianPrecedence precedence : endianPrecendence) {\n        dateHandlers.add(endianHandlers.get(precedence));\n      }\n      dateHandlers.add(new Handler(new RmnSdOnHandler(), new TagPattern(RepeaterTime.class), new TagPattern(RepeaterDayPortion.class, true), new TagPattern(SeparatorOn.class, true), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class)));\n      dateHandlers.add(new Handler(new RmnOdHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(OrdinalDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new RmnOdOnHandler(), new TagPattern(RepeaterTime.class), new TagPattern(RepeaterDayPortion.class, true), new TagPattern(SeparatorOn.class, true), new TagPattern(RepeaterMonthName.class), new TagPattern(OrdinalDay.class)));\n      dateHandlers.add(new Handler(new RmnSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarYear.class)));\n      dateHandlers.add(new Handler(new SdRmnSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SmSdSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SdSmSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SySmSdHandler(), new TagPattern(ScalarYear.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      // DIFF: We make 05/06 interpret as month/day before month/year\n      dateHandlers.add(new Handler(new SmSdHandler(), false, new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SmSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class)));\n      definitions.put(Handler.HandlerType.DATE, dateHandlers);\n\n      // tonight at 7pm\n      List<Handler> anchorHandlers = new LinkedList<Handler>();\n      anchorHandlers.add(new Handler(new RHandler(), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class), new TagPattern(SeparatorAt.class, true), new TagPattern(Repeater.class, true), new TagPattern(Repeater.class, true)));\n      // DIFF: Add support for \"next\" and \"last\" grabbers\n      anchorHandlers.add(new Handler(new RHandler(), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class), new TagPattern(Repeater.class), new TagPattern(SeparatorAt.class, true), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class, true), new TagPattern(Repeater.class, true)));\n      anchorHandlers.add(new Handler(new RGRHandler(), new TagPattern(Repeater.class), new TagPattern(Grabber.class), new TagPattern(Repeater.class)));\n      definitions.put(Handler.HandlerType.ANCHOR, anchorHandlers);\n\n      // 3 weeks from now, in 2 months\n      List<Handler> arrowHandlers = new LinkedList<Handler>();\n      arrowHandlers.add(new Handler(new SRPHandler(), new TagPattern(Scalar.class), new TagPattern(Repeater.class), new TagPattern(Pointer.class)));\n      arrowHandlers.add(new Handler(new PSRHandler(), new TagPattern(Pointer.class), new TagPattern(Scalar.class), new TagPattern(Repeater.class)));\n      arrowHandlers.add(new Handler(new SRPAHandler(), new TagPattern(Scalar.class), new TagPattern(Repeater.class), new TagPattern(Pointer.class), new HandlerTypePattern(Handler.HandlerType.ANCHOR)));\n      definitions.put(Handler.HandlerType.ARROW, arrowHandlers);\n\n      // 3rd week in march\n      List<Handler> narrowHandlers = new LinkedList<Handler>();\n      narrowHandlers.add(new Handler(new ORSRHandler(), new TagPattern(Ordinal.class), new TagPattern(Repeater.class), new TagPattern(SeparatorIn.class), new TagPattern(Repeater.class)));\n      narrowHandlers.add(new Handler(new ORGRHandler(), new TagPattern(Ordinal.class), new TagPattern(Repeater.class), new TagPattern(Grabber.class), new TagPattern(Repeater.class)));\n      definitions.put(Handler.HandlerType.NARROW, narrowHandlers);\n      \n      if (_definitions == null) {\n        _definitions = definitions;\n      }\n    }\n    return definitions;\n  }","id":5645,"modified_method":"public static synchronized Map<Handler.HandlerType, List<Handler>> definitions(Options options) {\n    Map<Handler.HandlerType, List<Handler>> definitions = _definitions;\n    \n    // MS: technically we can't cache any longer because endian precendence mucks with the settings ...\n    List<EndianPrecedence> defaultEndianPrecedences = Arrays.asList(EndianPrecedence.Middle, EndianPrecedence.Little);\n    if (definitions == null || (options.getEndianPrecedence() != null && !options.getEndianPrecedence().equals(defaultEndianPrecedences))) {\n      List<EndianPrecedence> endianPrecendence = options.getEndianPrecedence();\n      if (endianPrecendence == null) {\n        endianPrecendence = defaultEndianPrecedences;\n      }\n\n      // ensure the endian precedence is exactly two elements long\n      if (endianPrecendence.size() != 2) {\n        throw new IllegalArgumentException(\"More than two elements specified for endian precedence array: \" + endianPrecendence + \".\");\n      }\n\n      Map<EndianPrecedence, Handler> endianHandlers = new HashMap<EndianPrecedence, Handler>();\n      // handler for dd/mm/yyyy\n      endianHandlers.put(EndianPrecedence.Little, new Handler(new SdSmSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n\n      // handler for mm/dd/yyyy\n      endianHandlers.put(EndianPrecedence.Middle, new Handler(new SmSdSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n\n      // ensure we have valid endian values\n      // MS: generics guarantee this for us \n\n      definitions = new HashMap<Handler.HandlerType, List<Handler>>();\n\n      List<Handler> timeHandlers = new LinkedList<Handler>();\n      timeHandlers.add(new Handler(null, new TagPattern(RepeaterTime.class), new TagPattern(Grabber.class, true), new TagPattern(RepeaterDayPortion.class, true)));\n      definitions.put(Handler.HandlerType.TIME, timeHandlers);\n\n      List<Handler> dateHandlers = new LinkedList<Handler>();\n      dateHandlers.add(new Handler(new RdnRmnSdTTzSyHandler(), new TagPattern(RepeaterDayName.class), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(RepeaterTime.class), new TagPattern(SeparatorSlashOrDash.class, true), new TagPattern(TimeZone.class), new TagPattern(ScalarYear.class)));\n      // DIFF: We add scalar year as a standalone match\n      dateHandlers.add(new Handler(new SyHandler(), new TagPattern(ScalarYear.class)));\n      // DIFF: We add an optional comma to MDY\n      dateHandlers.add(new Handler(new RmnSdSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorComma.class, true), new TagPattern(ScalarYear.class)));\n      dateHandlers.add(new Handler(new RmnSdSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorComma.class, true), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new RmnSdHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      for (EndianPrecedence precedence : endianPrecendence) {\n        dateHandlers.add(endianHandlers.get(precedence));\n      }\n      dateHandlers.add(new Handler(new RmnSdOnHandler(), new TagPattern(RepeaterTime.class), new TagPattern(RepeaterDayPortion.class, true), new TagPattern(SeparatorOn.class, true), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarDay.class)));\n      dateHandlers.add(new Handler(new RmnOdHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(OrdinalDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new RmnOdOnHandler(), new TagPattern(RepeaterTime.class), new TagPattern(RepeaterDayPortion.class, true), new TagPattern(SeparatorOn.class, true), new TagPattern(RepeaterMonthName.class), new TagPattern(OrdinalDay.class)));\n      dateHandlers.add(new Handler(new RmnSyHandler(), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarYear.class)));\n      dateHandlers.add(new Handler(new SdRmnSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(RepeaterMonthName.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SmSdSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SdSmSyHandler(), new TagPattern(ScalarDay.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      dateHandlers.add(new Handler(new SySmSdHandler(), new TagPattern(ScalarYear.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      // DIFF: We make 05/06 interpret as month/day before month/year\n      dateHandlers.add(new Handler(new SmSdHandler(), false, new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class), new TagPattern(SeparatorAt.class, true), new HandlerTypePattern(Handler.HandlerType.TIME, true)));\n      // DIFF: Also, we support a leading time -- for 5pm 2/10\n      dateHandlers.add(new Handler(new SmSdHandler(), false, new HandlerTypePattern(Handler.HandlerType.TIME, true), new TagPattern(SeparatorOn.class, true), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarDay.class)));\n      dateHandlers.add(new Handler(new SmSyHandler(), new TagPattern(ScalarMonth.class), new TagPattern(SeparatorSlashOrDash.class), new TagPattern(ScalarYear.class)));\n      definitions.put(Handler.HandlerType.DATE, dateHandlers);\n\n      // tonight at 7pm\n      List<Handler> anchorHandlers = new LinkedList<Handler>();\n      anchorHandlers.add(new Handler(new RHandler(), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class), new TagPattern(SeparatorAt.class, true), new TagPattern(Repeater.class, true), new TagPattern(Repeater.class, true)));\n      // DIFF: Add support for \"next\" and \"last\" grabbers\n      anchorHandlers.add(new Handler(new RHandler(), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class), new TagPattern(Repeater.class), new TagPattern(SeparatorAt.class, true), new TagPattern(Grabber.class, true), new TagPattern(Repeater.class, true), new TagPattern(Repeater.class, true)));\n      anchorHandlers.add(new Handler(new RGRHandler(), new TagPattern(Repeater.class), new TagPattern(Grabber.class), new TagPattern(Repeater.class)));\n      definitions.put(Handler.HandlerType.ANCHOR, anchorHandlers);\n\n      // 3 weeks from now, in 2 months\n      List<Handler> arrowHandlers = new LinkedList<Handler>();\n      arrowHandlers.add(new Handler(new SRPHandler(), new TagPattern(Scalar.class), new TagPattern(Repeater.class), new TagPattern(Pointer.class)));\n      arrowHandlers.add(new Handler(new PSRHandler(), new TagPattern(Pointer.class), new TagPattern(Scalar.class), new TagPattern(Repeater.class)));\n      arrowHandlers.add(new Handler(new SRPAHandler(), new TagPattern(Scalar.class), new TagPattern(Repeater.class), new TagPattern(Pointer.class), new HandlerTypePattern(Handler.HandlerType.ANCHOR)));\n      definitions.put(Handler.HandlerType.ARROW, arrowHandlers);\n\n      // 3rd week in march\n      List<Handler> narrowHandlers = new LinkedList<Handler>();\n      narrowHandlers.add(new Handler(new ORSRHandler(), new TagPattern(Ordinal.class), new TagPattern(Repeater.class), new TagPattern(SeparatorIn.class), new TagPattern(Repeater.class)));\n      narrowHandlers.add(new Handler(new ORGRHandler(), new TagPattern(Ordinal.class), new TagPattern(Repeater.class), new TagPattern(Grabber.class), new TagPattern(Repeater.class)));\n      definitions.put(Handler.HandlerType.NARROW, narrowHandlers);\n      \n      if (_definitions == null) {\n        _definitions = definitions;\n      }\n    }\n    return definitions;\n  }","commit_id":"b7d08563ec68e1602a04d432356ab1fd817bd426","url":"https://github.com/wocommunity/wonder"},{"original_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<CloudStackImageStoreDriverImpl, DownloadAnswer> callback,\n    \t\tCreateContext<CreateCmdResult> context) {\n    \tDownloadAnswer answer = callback.getResult();\n    \tDataObject obj = context.data;\n    \tDataStore store = obj.getDataStore();\n\n    \tTemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n    \tupdateBuilder.setDownloadPercent(answer.getDownloadPct());\n    \tupdateBuilder.setDownloadState(answer.getDownloadStatus());\n    \tupdateBuilder.setLastUpdated(new Date());\n    \tupdateBuilder.setErrorString(answer.getErrorString());\n    \tupdateBuilder.setJobId(answer.getJobId());\n    \tupdateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n    \tupdateBuilder.setInstallPath(answer.getInstallPath());\n    \tupdateBuilder.setSize(answer.getTemplateSize());\n    \tupdateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n    \t_templateStoreDao.update(store.getId(), updateBuilder);\n\n    \tAsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n    \tif (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n    \t\t\tanswer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n    \t\t\tanswer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n    \t\tCreateCmdResult result = new CreateCmdResult(null, null);\n    \t\tresult.setSucess(false);\n    \t\tresult.setResult(answer.getErrorString());\n    \t\tcaller.complete(result);\n    \t} else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n    \t\tif (answer.getCheckSum() != null) {\n    \t\t\tVMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n    \t\t\ttemplateDaoBuilder.setChecksum(answer.getCheckSum());\n    \t\t\ttemplateDao.update(obj.getId(), templateDaoBuilder);\n    \t\t}\n\n\n    \t\tCreateCmdResult result = new CreateCmdResult(null, null);\n    \t\tcaller.complete(result);\n    \t}\n    \treturn null;\n    }","id":5646,"modified_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<CloudStackImageStoreDriverImpl, DownloadAnswer> callback,\n    \t\tCreateContext<CreateCmdResult> context) {\n    \tDownloadAnswer answer = callback.getResult();\n    \tDataObject obj = context.data;\n    \tDataStore store = obj.getDataStore();\n\n    \tTemplateDataStoreVO tmpltStoreVO = _templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());\n        if (tmpltStoreVO != null) {\n            TemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n            updateBuilder.setDownloadPercent(answer.getDownloadPct());\n            updateBuilder.setDownloadState(answer.getDownloadStatus());\n            updateBuilder.setLastUpdated(new Date());\n            updateBuilder.setErrorString(answer.getErrorString());\n            updateBuilder.setJobId(answer.getJobId());\n            updateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n            updateBuilder.setInstallPath(answer.getInstallPath());\n            updateBuilder.setSize(answer.getTemplateSize());\n            updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n            _templateStoreDao.update(tmpltStoreVO.getId(), updateBuilder);\n        }\n\n    \tAsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n    \tif (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n    \t\t\tanswer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n    \t\t\tanswer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n    \t\tCreateCmdResult result = new CreateCmdResult(null, null);\n    \t\tresult.setSucess(false);\n    \t\tresult.setResult(answer.getErrorString());\n    \t\tcaller.complete(result);\n    \t} else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n    \t\tif (answer.getCheckSum() != null) {\n    \t\t\tVMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n    \t\t\ttemplateDaoBuilder.setChecksum(answer.getCheckSum());\n    \t\t\ttemplateDao.update(obj.getId(), templateDaoBuilder);\n    \t\t}\n\n\n    \t\tCreateCmdResult result = new CreateCmdResult(null, null);\n    \t\tcaller.complete(result);\n    \t}\n    \treturn null;\n    }","commit_id":"70f866156ffda99d5e769219bfaa46734842fcd7","url":"https://github.com/apache/cloudstack"},{"original_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<S3ImageStoreDriverImpl, DownloadAnswer> callback,\n            CreateContext<CreateCmdResult> context) {\n        DownloadAnswer answer = callback.getResult();\n        DataObject obj = context.data;\n        DataStore store = obj.getDataStore();\n\n        TemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n        updateBuilder.setDownloadPercent(answer.getDownloadPct());\n        updateBuilder.setDownloadState(answer.getDownloadStatus());\n        updateBuilder.setLastUpdated(new Date());\n        updateBuilder.setErrorString(answer.getErrorString());\n        updateBuilder.setJobId(answer.getJobId());\n        updateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n        updateBuilder.setInstallPath(answer.getInstallPath());\n        updateBuilder.setSize(answer.getTemplateSize());\n        updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n        _templateStoreDao.update(store.getId(), updateBuilder);\n\n        AsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n        if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            result.setSucess(false);\n            result.setResult(answer.getErrorString());\n            caller.complete(result);\n        } else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n            if (answer.getCheckSum() != null) {\n                VMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n                templateDaoBuilder.setChecksum(answer.getCheckSum());\n                templateDao.update(obj.getId(), templateDaoBuilder);\n            }\n\n\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            caller.complete(result);\n        }\n        return null;\n    }","id":5647,"modified_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<S3ImageStoreDriverImpl, DownloadAnswer> callback,\n            CreateContext<CreateCmdResult> context) {\n        DownloadAnswer answer = callback.getResult();\n        DataObject obj = context.data;\n        DataStore store = obj.getDataStore();\n\n        TemplateDataStoreVO tmpltStoreVO = _templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());\n        if (tmpltStoreVO != null) {\n            TemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n            updateBuilder.setDownloadPercent(answer.getDownloadPct());\n            updateBuilder.setDownloadState(answer.getDownloadStatus());\n            updateBuilder.setLastUpdated(new Date());\n            updateBuilder.setErrorString(answer.getErrorString());\n            updateBuilder.setJobId(answer.getJobId());\n            updateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n            updateBuilder.setInstallPath(answer.getInstallPath());\n            updateBuilder.setSize(answer.getTemplateSize());\n            updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n            _templateStoreDao.update(tmpltStoreVO.getId(), updateBuilder);\n        }\n\n        AsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n        if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            result.setSucess(false);\n            result.setResult(answer.getErrorString());\n            caller.complete(result);\n        } else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n            if (answer.getCheckSum() != null) {\n                VMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n                templateDaoBuilder.setChecksum(answer.getCheckSum());\n                templateDao.update(obj.getId(), templateDaoBuilder);\n            }\n\n\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            caller.complete(result);\n        }\n        return null;\n    }","commit_id":"70f866156ffda99d5e769219bfaa46734842fcd7","url":"https://github.com/apache/cloudstack"},{"original_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<SwiftImageStoreDriverImpl, DownloadAnswer> callback,\n            CreateContext<CreateCmdResult> context) {\n        DownloadAnswer answer = callback.getResult();\n        DataObject obj = context.data;\n        DataStore store = obj.getDataStore();\n\n        TemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n        updateBuilder.setDownloadPercent(answer.getDownloadPct());\n        updateBuilder.setDownloadState(answer.getDownloadStatus());\n        updateBuilder.setLastUpdated(new Date());\n        updateBuilder.setErrorString(answer.getErrorString());\n        updateBuilder.setJobId(answer.getJobId());\n        updateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n        updateBuilder.setInstallPath(answer.getInstallPath());\n        updateBuilder.setSize(answer.getTemplateSize());\n        updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n        _templateStoreDao.update(store.getId(), updateBuilder);\n\n        AsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n        if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            result.setSucess(false);\n            result.setResult(answer.getErrorString());\n            caller.complete(result);\n        } else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n            if (answer.getCheckSum() != null) {\n                VMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n                templateDaoBuilder.setChecksum(answer.getCheckSum());\n                templateDao.update(obj.getId(), templateDaoBuilder);\n            }\n\n\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            caller.complete(result);\n        }\n        return null;\n    }","id":5648,"modified_method":"protected Void createAsyncCallback(AsyncCallbackDispatcher<SwiftImageStoreDriverImpl, DownloadAnswer> callback,\n            CreateContext<CreateCmdResult> context) {\n        DownloadAnswer answer = callback.getResult();\n        DataObject obj = context.data;\n        DataStore store = obj.getDataStore();\n\n        TemplateDataStoreVO tmpltStoreVO = _templateStoreDao.findByStoreTemplate(store.getId(),obj.getId());\n        if (tmpltStoreVO != null) {\n            TemplateDataStoreVO updateBuilder = _templateStoreDao.createForUpdate();\n            updateBuilder.setDownloadPercent(answer.getDownloadPct());\n            updateBuilder.setDownloadState(answer.getDownloadStatus());\n            updateBuilder.setLastUpdated(new Date());\n            updateBuilder.setErrorString(answer.getErrorString());\n            updateBuilder.setJobId(answer.getJobId());\n            updateBuilder.setLocalDownloadPath(answer.getDownloadPath());\n            updateBuilder.setInstallPath(answer.getInstallPath());\n            updateBuilder.setSize(answer.getTemplateSize());\n            updateBuilder.setPhysicalSize(answer.getTemplatePhySicalSize());\n            _templateStoreDao.update(tmpltStoreVO.getId(), updateBuilder);\n        }\n\n        AsyncCompletionCallback<CreateCmdResult> caller = context.getParentCallback();\n\n        if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.ABANDONED ||\n                answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.UNKNOWN) {\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            result.setSucess(false);\n            result.setResult(answer.getErrorString());\n            caller.complete(result);\n        } else if (answer.getDownloadStatus() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {\n            if (answer.getCheckSum() != null) {\n                VMTemplateVO templateDaoBuilder = templateDao.createForUpdate();\n                templateDaoBuilder.setChecksum(answer.getCheckSum());\n                templateDao.update(obj.getId(), templateDaoBuilder);\n            }\n\n\n            CreateCmdResult result = new CreateCmdResult(null, null);\n            caller.complete(result);\n        }\n        return null;\n    }","commit_id":"70f866156ffda99d5e769219bfaa46734842fcd7","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n  public void removeApplication(AuthToken token, FlowIdentifier identifier) throws AppFabricServiceException {\n    Preconditions.checkNotNull(identifier, \"No application id provided.\");\n\n    Id.Account accountId = Id.Account.from(identifier.getAccountId());\n    final Id.Application appId = Id.Application.from(accountId, identifier.getApplicationId());\n\n    // Check if all are stopped.\n    Preconditions.checkState(!anyRunning(new Predicate<Id.Program>() {\n      @Override\n      public boolean apply(Id.Program programId) {\n        return programId.getApplication().equals(appId);\n      }\n    }, Type.values()), \"There are program still running for application \" + appId.getId());\n\n    // Delete the App from store\n    try {\n      store.removeApplication(appId);\n    } catch (OperationException e) {\n      throw Throwables.propagate(e);\n    }\n\n    // Remove the Program jar\n    Location appArchive = getApplicationLocation(appId);\n    try {\n      appArchive.delete();\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    // Reset metrics\n    try {\n      MetricsFrontendServiceImpl mfs = new MetricsFrontendServiceImpl(configuration);\n      mfs.clear(accountId.getId(), appId.getId());\n    } catch (Exception e) {\n      LOG.error(\"Fail to clear metrics for application \" + appId.getId() + \" for account \" + accountId);\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","id":5649,"modified_method":"@Override\n  public void removeApplication(AuthToken token, FlowIdentifier identifier) throws AppFabricServiceException {\n    Preconditions.checkNotNull(identifier, \"No application id provided.\");\n\n    Id.Account accountId = Id.Account.from(identifier.getAccountId());\n    final Id.Application appId = Id.Application.from(accountId, identifier.getApplicationId());\n\n    // Check if all are stopped.\n    Preconditions.checkState(!anyRunning(new Predicate<Id.Program>() {\n      @Override\n      public boolean apply(Id.Program programId) {\n        return programId.getApplication().equals(appId);\n      }\n    }, Type.values()), \"There are program still running for application \" + appId.getId());\n\n    // Delete the App from store\n    try {\n      store.removeApplication(appId);\n    } catch (OperationException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n\n    // Remove the Program jar\n    Location appArchive = getApplicationLocation(appId);\n    try {\n      appArchive.delete();\n    } catch (IOException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n\n    // Reset metrics\n    try {\n      MetricsFrontendServiceImpl mfs = new MetricsFrontendServiceImpl(configuration);\n      mfs.clear(accountId.getId(), appId.getId());\n    } catch (Exception e) {\n      LOG.error(\"Fail to clear metrics for application \" + appId.getId() + \" for account \" + accountId);\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Returns definition of a flow.\n   *\n   * @param id\n   */\n  @Override\n  public String getFlowDefinition(FlowIdentifier id)\n    throws AppFabricServiceException, TException {\n    if(id.getType() == EntityType.FLOW) {\n      FlowDefinitionImpl flowDef = getFlowDef(id);\n      return new Gson().toJson(flowDef);\n    } else if(id.getType() == EntityType.QUERY) {\n      QueryDefinitionImpl queryDef = getQueryDefn(id);\n      return new Gson().toJson(queryDef);\n    }\n    return null;\n  }","id":5650,"modified_method":"/**\n   * Returns definition of a flow.\n   *\n   * @param id\n   */\n  @Override\n  public String getFlowDefinition(FlowIdentifier id)\n    throws AppFabricServiceException, TException {\n    try {\n      if(id.getType() == EntityType.FLOW) {\n        FlowDefinitionImpl flowDef = getFlowDef(id);\n        return new Gson().toJson(flowDef);\n      } else if(id.getType() == EntityType.QUERY) {\n        QueryDefinitionImpl queryDef = getQueryDefn(id);\n        return new Gson().toJson(queryDef);\n      }\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n    return null;\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Stops a Program\n   *\n   * @param token\n   * @param identifier\n   */\n  @Override\n  public RunIdentifier stop(AuthToken token, FlowIdentifier identifier)\n    throws AppFabricServiceException, TException {\n    ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n    Preconditions.checkNotNull(runtimeInfo, \"Unable to find runtime info for %s\", identifier);\n\n    try {\n      ProgramController controller = runtimeInfo.getController();\n      RunId runId = controller.getRunId();\n      controller.stop().get();\n      store.setStop(runtimeInfo.getProgramId(), runId.getId(), System.currentTimeMillis() /1000,\n                    runtimeInfo.getController().getState().toString());\n      return new RunIdentifier(runId.getId());\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw Throwables.propagate(e);\n    }\n  }","id":5651,"modified_method":"/**\n   * Stops a Program\n   *\n   * @param token\n   * @param identifier\n   */\n  @Override\n  public RunIdentifier stop(AuthToken token, FlowIdentifier identifier)\n    throws AppFabricServiceException, TException {\n    try {\n      ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n      Preconditions.checkNotNull(runtimeInfo, \"Unable to find runtime info for %s\", identifier);\n      ProgramController controller = runtimeInfo.getController();\n      RunId runId = controller.getRunId();\n      controller.stop().get();\n      store.setStop(runtimeInfo.getProgramId(), runId.getId(), System.currentTimeMillis() /1000,\n                    runtimeInfo.getController().getState().toString());\n      return new RunIdentifier(runId.getId());\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Set number of instance of a flowlet.\n   *\n   * @param token\n   * @param identifier\n   * @param flowletId\n   * @param instances\n   */\n  @Override\n  public void setInstances(AuthToken token, FlowIdentifier identifier, String flowletId, short instances)\n    throws AppFabricServiceException, TException {\n    ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n    Preconditions.checkNotNull(runtimeInfo, \"Unable to find runtime info for %s\", identifier);\n\n    try {\n      runtimeInfo.getController().command(\"instances\", ImmutableMap.of(flowletId, (int) instances)).get();\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw Throwables.propagate(e);\n    }\n\n    // storing the info about instances count after increasing the count of running flowlets: even if it fails, we\n    // can at least set instances count for this session\n    try {\n      store.setFlowletInstances(Id.Program.from(identifier.getAccountId(), identifier.getApplicationId(),\n                                                identifier.getFlowId()), flowletId, instances);\n    } catch (OperationException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw Throwables.propagate(e);\n    }\n  }","id":5652,"modified_method":"/**\n   * Set number of instance of a flowlet.\n   *\n   * @param token\n   * @param identifier\n   * @param flowletId\n   * @param instances\n   */\n  @Override\n  public void setInstances(AuthToken token, FlowIdentifier identifier, String flowletId, short instances)\n    throws AppFabricServiceException, TException {\n    ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(identifier);\n    Preconditions.checkNotNull(runtimeInfo, \"Unable to find runtime info for %s\", identifier);\n\n    try {\n      runtimeInfo.getController().command(\"instances\", ImmutableMap.of(flowletId, (int) instances)).get();\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n\n    // storing the info about instances count after increasing the count of running flowlets: even if it fails, we\n    // can at least set instances count for this session\n    try {\n      store.setFlowletInstances(Id.Program.from(identifier.getAccountId(), identifier.getApplicationId(),\n                                                identifier.getFlowId()), flowletId, instances);\n    } catch (OperationException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Starts a Program\n   *\n   * @param token\n   * @param descriptor\n   */\n  @Override\n  public RunIdentifier start(AuthToken token, FlowDescriptor descriptor)\n    throws AppFabricServiceException, TException {\n\n    FlowIdentifier id = descriptor.getIdentifier();\n    Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n    try {\n      Program program = store.loadProgram(programId, entityTypeToType(id));\n      // TODO: User arguments\n      ProgramRuntimeService.RuntimeInfo runtimeInfo =\n        runtimeService.run(program, new SimpleProgramOptions(id.getFlowId(),\n                                                             new BasicArguments(),\n                                                             new BasicArguments()));\n      store.setStart(programId, runtimeInfo.getController().getRunId().getId(),\n                     System.currentTimeMillis()/1000);\n      return new RunIdentifier(runtimeInfo.getController().getRunId().toString());\n\n    } catch (IOException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw Throwables.propagate(e);\n    }\n  }","id":5653,"modified_method":"/**\n   * Starts a Program\n   *\n   * @param token\n   * @param descriptor\n   */\n  @Override\n  public RunIdentifier start(AuthToken token, FlowDescriptor descriptor)\n    throws AppFabricServiceException, TException {\n\n    FlowIdentifier id = descriptor.getIdentifier();\n    Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n    try {\n      Program program = store.loadProgram(programId, entityTypeToType(id));\n      // TODO: User arguments\n      ProgramRuntimeService.RuntimeInfo runtimeInfo =\n        runtimeService.run(program, new SimpleProgramOptions(id.getFlowId(),\n                                                             new BasicArguments(),\n                                                             new BasicArguments()));\n      store.setStart(programId, runtimeInfo.getController().getRunId().getId(),\n                     System.currentTimeMillis()/1000);\n      return new RunIdentifier(runtimeInfo.getController().getRunId().toString());\n\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Returns run information for a given flow id.\n   *\n   * @param id of the program.\n   */\n  @Override\n  public List<FlowRunRecord> getFlowHistory(FlowIdentifier id) throws AppFabricServiceException, TException {\n    List<RunRecord> log;\n    Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n    try {\n      log = store.getRunHistory(programId);\n    } catch(OperationException e) {\n      throw  new AppFabricServiceException(\"Unable to retrieve application for \" +\n                                           id.toString() + e.getMessage());\n    }\n    List<FlowRunRecord> history = new ArrayList<FlowRunRecord>();\n    for (RunRecord runRecord : log) {\n      history.add(new FlowRunRecord(runRecord.getPid(), runRecord.getStartTs(),\n                                    runRecord.getStopTs(),runRecord.getEndStatus())\n      );\n    }\n    return history;\n  }","id":5654,"modified_method":"/**\n   * Returns run information for a given flow id.\n   *\n   * @param id of the program.\n   */\n  @Override\n  public List<FlowRunRecord> getFlowHistory(FlowIdentifier id) throws AppFabricServiceException, TException {\n    List<RunRecord> log;\n    try {\n      Id.Program programId = Id.Program.from(id.getAccountId(), id.getApplicationId(), id.getFlowId());\n      try {\n        log = store.getRunHistory(programId);\n      } catch(OperationException e) {\n        throw  new AppFabricServiceException(\"Unable to retrieve application for \" +\n                                             id.toString() + e.getMessage());\n      }\n      List<FlowRunRecord> history = new ArrayList<FlowRunRecord>();\n      for (RunRecord runRecord : log) {\n        history.add(new FlowRunRecord(runRecord.getPid(), runRecord.getStartTs(),\n                                      runRecord.getStopTs(),runRecord.getEndStatus())\n        );\n      }\n      return history;\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Checks the status of a Program\n   *\n   * @param token\n   * @param id\n   */\n  @Override\n  public FlowStatus status(AuthToken token, FlowIdentifier id)\n    throws AppFabricServiceException, TException {\n\n    ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(id);\n\n    int version = 1;  // FIXME, how to get version?\n    if (runtimeInfo == null) {\n      return new FlowStatus(id.getApplicationId(), id.getFlowId(),\n                            version, null, ProgramController.State.STOPPED.toString());\n    }\n\n    Id.Program programId = runtimeInfo.getProgramId();\n    RunIdentifier runId = new RunIdentifier(runtimeInfo.getController().getRunId().getId());\n\n    // NOTE: This was a temporary hack done to map the status to something that is\n    // UI friendly. Internal states of program controller are reasonable and hence\n    // no point in changing them.\n    String status = controllerStateToString(runtimeInfo.getController().getState());\n    return new FlowStatus(programId.getApplicationId(), programId.getId(), version, runId, status);\n  }","id":5655,"modified_method":"/**\n   * Checks the status of a Program\n   *\n   * @param token\n   * @param id\n   */\n  @Override\n  public FlowStatus status(AuthToken token, FlowIdentifier id)\n    throws AppFabricServiceException, TException {\n\n    try {\n      ProgramRuntimeService.RuntimeInfo runtimeInfo = findRuntimeInfo(id);\n\n      int version = 1;  // FIXME, how to get version?\n      if (runtimeInfo == null) {\n        return new FlowStatus(id.getApplicationId(), id.getFlowId(),\n                              version, null, ProgramController.State.STOPPED.toString());\n      }\n\n      Id.Program programId = runtimeInfo.getProgramId();\n      RunIdentifier runId = new RunIdentifier(runtimeInfo.getController().getRunId().getId());\n\n      // NOTE: This was a temporary hack done to map the status to something that is\n      // UI friendly. Internal states of program controller are reasonable and hence\n      // no point in changing them.\n      String status = controllerStateToString(runtimeInfo.getController().getState());\n      return new FlowStatus(programId.getApplicationId(), programId.getId(), version, runId, status);\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Initializes deployment of resources from the client.\n   * <p>\n   *   Upon receiving a request to initialize an upload with auth-token and resource information,\n   *   we create a unique identifier for the upload and also create directories needed for storing\n   *   the uploading archive. At this point the upload has not yet begun. The bytes of the archive\n   *   are still on the client machine. An session id is returned back to client - which will use\n   *   the session id provided to upload the chunks.\n   * <\/p>\n   * <p>\n   *   <i>Note:<\/i> As the state of upload are transient they are not being persisted on the server.\n   * <\/p>\n   *\n   * @param info ResourceInfo\n   * @return ResourceIdentifier instance containing the resource id and\n   * resource version.\n   */\n  @Override\n  public ResourceIdentifier init(AuthToken token, ResourceInfo info) throws AppFabricServiceException {\n    ResourceIdentifier identifier = new ResourceIdentifier( info.getAccountId(), \"appId\", \"resourceId\", 1);\n\n    try {\n      if(sessions.containsKey(info.getAccountId())) {\n        throw new AppFabricServiceException(\"An upload is already in progress for this account.\");\n      }\n      Location uploadDir = locationFactory.create(archiveDir + \"/\" + info.getAccountId());\n      if(! uploadDir.exists() && ! uploadDir.mkdirs()) {\n        LOG.warn(\"Unable to create directory '{}'\", uploadDir.getName());\n      }\n      Location archive = uploadDir.append(info.getFilename());\n      SessionInfo sessionInfo = new SessionInfo(identifier, info, archive, DeployStatus.REGISTERED);\n      sessions.put(info.getAccountId(), sessionInfo);\n      return identifier;\n    } catch (IOException e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw Throwables.propagate(e);\n    }\n  }","id":5656,"modified_method":"/**\n   * Initializes deployment of resources from the client.\n   * <p>\n   *   Upon receiving a request to initialize an upload with auth-token and resource information,\n   *   we create a unique identifier for the upload and also create directories needed for storing\n   *   the uploading archive. At this point the upload has not yet begun. The bytes of the archive\n   *   are still on the client machine. An session id is returned back to client - which will use\n   *   the session id provided to upload the chunks.\n   * <\/p>\n   * <p>\n   *   <i>Note:<\/i> As the state of upload are transient they are not being persisted on the server.\n   * <\/p>\n   *\n   * @param info ResourceInfo\n   * @return ResourceIdentifier instance containing the resource id and\n   * resource version.\n   */\n  @Override\n  public ResourceIdentifier init(AuthToken token, ResourceInfo info) throws AppFabricServiceException {\n    ResourceIdentifier identifier = new ResourceIdentifier( info.getAccountId(), \"appId\", \"resourceId\", 1);\n\n    try {\n      if(sessions.containsKey(info.getAccountId())) {\n        throw new AppFabricServiceException(\"An upload is already in progress for this account.\");\n      }\n      Location uploadDir = locationFactory.create(archiveDir + \"/\" + info.getAccountId());\n      if(! uploadDir.exists() && ! uploadDir.mkdirs()) {\n        LOG.warn(\"Unable to create directory '{}'\", uploadDir.getName());\n      }\n      Location archive = uploadDir.append(info.getFilename());\n      SessionInfo sessionInfo = new SessionInfo(identifier, info, archive, DeployStatus.REGISTERED);\n      sessions.put(info.getAccountId(), sessionInfo);\n      return identifier;\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Returns run information for a given flow id.\n   *\n   * @param id\n   */\n  @Override\n  public void stopAll(String id) throws AppFabricServiceException, TException {\n    // FIXME: Is id application id?\n    List<ListenableFuture<?>> futures = Lists.newLinkedList();\n    for (Type type : Type.values()) {\n      for (Map.Entry<RunId, ProgramRuntimeService.RuntimeInfo> entry : runtimeService.list(type).entrySet()) {\n        ProgramRuntimeService.RuntimeInfo runtimeInfo = entry.getValue();\n        if (runtimeInfo.getProgramId().getApplicationId().equals(id)) {\n          futures.add(runtimeInfo.getController().stop());\n        }\n      }\n    }\n    if (!futures.isEmpty()) {\n      try {\n        Futures.successfulAsList(futures).get();\n      } catch (Exception e) {\n        throw Throwables.propagate(e);\n      }\n    }\n  }","id":5657,"modified_method":"/**\n   * Returns run information for a given flow id.\n   *\n   * @param id\n   */\n  @Override\n  public void stopAll(String id) throws AppFabricServiceException, TException {\n    // FIXME: Is id application id?\n    try {\n      List<ListenableFuture<?>> futures = Lists.newLinkedList();\n      for (Type type : Type.values()) {\n        for (Map.Entry<RunId, ProgramRuntimeService.RuntimeInfo> entry : runtimeService.list(type).entrySet()) {\n          ProgramRuntimeService.RuntimeInfo runtimeInfo = entry.getValue();\n          if (runtimeInfo.getProgramId().getApplicationId().equals(id)) {\n            futures.add(runtimeInfo.getController().stop());\n          }\n        }\n      }\n      if (!futures.isEmpty()) {\n        try {\n          Futures.successfulAsList(futures).get();\n        } catch (Exception e) {\n          LOG.warn(StackTraceUtil.toStringStackTrace(e));\n          throw new AppFabricServiceException(e.getMessage());\n        }\n      }\n    } catch (Exception e) {\n      LOG.warn(StackTraceUtil.toStringStackTrace(e));\n      throw new AppFabricServiceException(e.getMessage());\n    }\n  }","commit_id":"3beb77c673cae7390ecd61aaa226ca367895febd","url":"https://github.com/caskdata/cdap"},{"original_method":"public Indent getChildIndent() {\n    final IElementType elementType = myNode.getElementType();\n    if (elementType == ElementType.XML_DOCUMENT || elementType == ElementType.XML_PROLOG) {\n      return new Indent(Indent.Type.NONE, 0,0);\n    } else {\n      return elementType == ElementType.XML_TAG ? new Indent(Indent.Type.NORMAL, 1, 0) : null;\n    }\n  }","id":5658,"modified_method":"public Indent getChildIndent() {\n    final IElementType elementType = myNode.getElementType();\n    final Formatter formatter = getFormatter();\n    if (elementType == ElementType.XML_DOCUMENT || elementType == ElementType.XML_PROLOG) {\n      return formatter.getNoneIndent();\n    } else {\n      return elementType == ElementType.XML_TAG ? formatter.getNormalIndent(1) : null;\n    }\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SpaceProperty getSpaceProperty(Block child1, Block child2) {\n    final IElementType elementType = myNode.getElementType();\n    final IElementType type1 = ((XmlBlock)child1).myNode.getElementType();\n    final IElementType type2 = ((XmlBlock)child2).myNode.getElementType();\n\n    if ((type2 == ElementType.XML_TAG || type2 == ElementType.XML_END_TAG_START || type2 == ElementType.XML_TEXT) && mySettings.XML_KEEP_WHITESPACES) {\n      return new SpaceProperty(0,0,0,0,true);\n    }\n\n    if (elementType == ElementType.XML_TAG) {\n      return getSpacesInsideTag(type1, type2);\n\n    } else if (elementType == ElementType.XML_TEXT) {\n      return getSpacesInsideText(type1, type2);\n\n    } else if (elementType == ElementType.XML_ATTRIBUTE) {\n      return getSpacesInsideAttribute(type1, type2);\n    }\n\n    return myDefaultProperty;\n  }","id":5659,"modified_method":"public SpaceProperty getSpaceProperty(Block child1, Block child2) {\n    final IElementType elementType = myNode.getElementType();\n    final IElementType type1 = ((XmlBlock)child1).myNode.getElementType();\n    final IElementType type2 = ((XmlBlock)child2).myNode.getElementType();\n\n    if ((type2 == ElementType.XML_TAG || type2 == ElementType.XML_END_TAG_START || type2 == ElementType.XML_TEXT) && mySettings.XML_KEEP_WHITESPACES) {\n      return getFormatter().getReadOnlySpace();\n    }\n\n    if (elementType == ElementType.XML_TAG) {\n      return getSpacesInsideTag(type1, type2);\n\n    } else if (elementType == ElementType.XML_TEXT) {\n      return getSpacesInsideText(type1, type2);\n\n    } else if (elementType == ElementType.XML_ATTRIBUTE) {\n      return getSpacesInsideAttribute(type1, type2);\n    }\n\n    return myDefaultSpaceProperty;\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private SpaceProperty getSpacesInsideAttribute(final IElementType type1, final IElementType type2) {\n    if (type1 == ElementType.XML_EQ || type2 == ElementType.XML_EQ) {\n      int spaces = mySettings.XML_SPACE_AROUND_EQUALITY_IN_ATTRINUTE ? 1 : 0;\n      return new SpaceProperty(spaces, spaces, 0, getMaxLine(), false);\n    } else {\n      return myDefaultProperty;\n    }\n  }","id":5660,"modified_method":"private SpaceProperty getSpacesInsideAttribute(final IElementType type1, final IElementType type2) {\n    if (type1 == ElementType.XML_EQ || type2 == ElementType.XML_EQ) {\n      int spaces = mySettings.XML_SPACE_AROUND_EQUALITY_IN_ATTRINUTE ? 1 : 0;\n      return getFormatter().createSpaceProperty(spaces, spaces, 0, getMaxLine());\n    } else {\n      return myDefaultSpaceProperty;\n    }\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public XmlBlock(final ASTNode node, final Wrap wrap, final Alignment alignment, CodeStyleSettings settings, XmlBlock parent) {\n    myNode = node;\n    myWrap = wrap;\n    myAlignment = alignment;\n    mySettings = settings;\n    myParent = parent;\n    myDefaultProperty = new SpaceProperty(0, Integer.MAX_VALUE, 0, getMaxLine(), false);\n  }","id":5661,"modified_method":"public XmlBlock(final ASTNode node, final Wrap wrap, final Alignment alignment, CodeStyleSettings settings, XmlBlock parent) {\n    myNode = node;\n    myWrap = wrap;\n    myAlignment = alignment;\n    mySettings = settings;\n    myParent = parent;\n    myDefaultSpaceProperty = getFormatter().createSpaceProperty(0, Integer.MAX_VALUE, 0, getMaxLine());\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private List<Block> buildChildren() {\n    final ArrayList<Block> result = new ArrayList<Block>();\n    if (myNode.getElementType() == ElementType.XML_TEXT && mySettings.XML_KEEP_WHITESPACES) {\n      return result;\n    }\n    if (myNode instanceof CompositeElement) {\n      ChameleonTransforming.transformChildren(myNode);\n      ASTNode child = myNode.getFirstChildNode();\n      final Wrap tagWrap = new Wrap(Wrap.Type.WRAP_ALWAYS,true);\n      final Wrap attrWrap = new Wrap(getWrapType(mySettings.XML_ATTRIBUTE_WRAP), false);\n      final Wrap textWrap = new Wrap(getWrapType(mySettings.XML_TEXT_WRAP), true);\n      final Alignment attrAlignment = new Alignment(Alignment.Type.NORMAL);\n      final Alignment textAlignment = new Alignment(Alignment.Type.NORMAL);\n      while (child != null) {\n        if (!containsWhiteSpacesOnly(child) && child.getTextLength() > 0){\n          Wrap wrap = chooseWrap(child, tagWrap, attrWrap, textWrap);\n          Alignment alignment = chooseAlignment(child, attrAlignment, textAlignment);\n          result.add(new XmlBlock(child, wrap, alignment, mySettings, this));\n        }\n        child = child.getTreeNext();\n      }\n    }\n    return result;\n  }","id":5662,"modified_method":"private List<Block> buildChildren() {\n    final ArrayList<Block> result = new ArrayList<Block>();\n    if (myNode.getElementType() == ElementType.XML_TEXT && mySettings.XML_KEEP_WHITESPACES) {\n      return result;\n    }\n    if (myNode instanceof CompositeElement) {\n      ChameleonTransforming.transformChildren(myNode);\n      ASTNode child = myNode.getFirstChildNode();\n      final Formatter formatter = getFormatter();\n      final Wrap tagWrap = formatter.createWrap(Wrap.Type.WRAP_ALWAYS, true);\n      final Wrap attrWrap = formatter.createWrap(getWrapType(mySettings.XML_ATTRIBUTE_WRAP), false);\n      final Wrap textWrap = formatter.createWrap(getWrapType(mySettings.XML_TEXT_WRAP), true);\n      final Alignment attrAlignment = formatter.createAlignment();\n      final Alignment textAlignment = formatter.createAlignment();\n      while (child != null) {\n        if (!containsWhiteSpacesOnly(child) && child.getTextLength() > 0){\n          Wrap wrap = chooseWrap(child, tagWrap, attrWrap, textWrap);\n          Alignment alignment = chooseAlignment(child, attrAlignment, textAlignment);\n          result.add(new XmlBlock(child, wrap, alignment, mySettings, this));\n        }\n        child = child.getTreeNext();\n      }\n    }\n    return result;\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private SpaceProperty getSpacesInsideTag(final IElementType type1, final IElementType type2) {\n    if (isXmlTagName(type1, type2)){\n      final int spaces = mySettings.XML_SPACE_AROUND_TAG_NAME ? 1 : 0;\n      return new SpaceProperty(spaces, spaces, 0, getMaxLine(), false);\n    } else if (type2 == ElementType.XML_ATTRIBUTE) {\n      return new SpaceProperty(1, 1, 0, getMaxLine(), false);\n    } else if (type2 == ElementType.XML_TEXT && type1 == ElementType.XML_TAG) {\n      return new SpaceProperty(0, 0, 1, getMaxLine(), false);\n    } else if (type1 == ElementType.XML_TEXT && type2 == ElementType.XML_END_TAG_START) {\n      return new SpaceProperty(0, 0, 0, getMaxLine(), false);\n    } else if (type1 == ElementType.XML_TAG_END && type2 == ElementType.XML_END_TAG_START) {\n      return new SpaceProperty(0, 0, 0, getMaxLine(), false);\n    } else if (type2 == ElementType.XML_TEXT && type1 == ElementType.XML_TAG_END) {\n      return new SpaceProperty(0, 0, 0, getMaxLine(), false);\n    } else {\n      return myDefaultProperty;\n    }\n  }","id":5663,"modified_method":"private SpaceProperty getSpacesInsideTag(final IElementType type1, final IElementType type2) {\n    if (isXmlTagName(type1, type2)){\n      final int spaces = mySettings.XML_SPACE_AROUND_TAG_NAME ? 1 : 0;\n      return getFormatter().createSpaceProperty(spaces, spaces, 0, getMaxLine());\n    } else if (type2 == ElementType.XML_ATTRIBUTE) {\n      return getFormatter().createSpaceProperty(1, 1, 0, getMaxLine());\n    } else if (type2 == ElementType.XML_TEXT && type1 == ElementType.XML_TAG) {\n      return getFormatter().createSpaceProperty(0, 0, 1, getMaxLine());\n    } else if (type1 == ElementType.XML_TEXT && type2 == ElementType.XML_END_TAG_START) {\n      return getFormatter().createSpaceProperty(0, 0, 0, getMaxLine());\n    } else if (type1 == ElementType.XML_TAG_END && type2 == ElementType.XML_END_TAG_START) {\n      return getFormatter().createSpaceProperty(0, 0, 0, getMaxLine());\n    } else if (type2 == ElementType.XML_TEXT && type1 == ElementType.XML_TAG_END) {\n      return getFormatter().createSpaceProperty(0, 0, 0, getMaxLine());\n    } else {\n      return myDefaultSpaceProperty;\n    }\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private SpaceProperty getSpacesInsideText(final IElementType type1, final IElementType type2) {\n    if (type1 == ElementType.XML_DATA_CHARACTERS && type2 == ElementType.XML_DATA_CHARACTERS) {\n      return new SpaceProperty(1, 1, 0, getMaxLine(), false);\n    } else {\n      return myDefaultProperty;\n    }\n  }","id":5664,"modified_method":"private SpaceProperty getSpacesInsideText(final IElementType type1, final IElementType type2) {\n    if (type1 == ElementType.XML_DATA_CHARACTERS && type2 == ElementType.XML_DATA_CHARACTERS) {\n      return getFormatter().createSpaceProperty(1, 1, 0, getMaxLine());\n    } else {\n      return myDefaultSpaceProperty;\n    }\n  }","commit_id":"5b34460685bc6f938ff26f75328bb2ef05cb1d67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected <T> T invoke(ClientRequest req) {\n        return super.invoke(req, getPartitionKey());\n    }","id":5665,"modified_method":"protected <T> T invoke(ClientMessage req) {\n        return super.invoke(req, getPartitionKey());\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Iterator<E> iterator() {\n        IteratorRequest request = new IteratorRequest(name);\n        PortableCollection result = invoke(request);\n        Collection<Data> coll = result.getCollection();\n        return new QueueIterator<E>(coll.iterator(), getContext().getSerializationService(), false);\n    }","id":5666,"modified_method":"public Iterator<E> iterator() {\n        ClientMessage request = QueueIteratorParameters.encode(name);\n        ClientMessage response = invoke(request);\n        DataCollectionResultParameters resultParameters = DataCollectionResultParameters.decode(response);\n        Collection<Data> resultCollection = resultParameters.result;\n        return new QueueIterator<E>(resultCollection.iterator(), getContext().getSerializationService(), false);\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n        PollRequest request = new PollRequest(name, unit.toMillis(timeout));\n        return invokeInterruptibly(request);\n    }","id":5667,"modified_method":"public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n        ClientMessage request = QueuePollParameters.encode(name);\n        ClientMessage response = invokeInterruptibly(request);\n        GenericResultParameters resultParameters = GenericResultParameters.decode(response);\n        return toObject(resultParameters.result);\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public E peek() {\n        PeekRequest request = new PeekRequest(name);\n        return invoke(request);\n    }","id":5668,"modified_method":"public E peek() {\n        ClientMessage request = QueuePeekParameters.encode(name);\n        ClientMessage response = invoke(request);\n        GenericResultParameters resultParameters = GenericResultParameters.decode(response);\n        return toObject(resultParameters.result);\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Object[] toArray() {\n        IteratorRequest request = new IteratorRequest(name);\n        PortableCollection result = invoke(request);\n        Collection<Data> coll = result.getCollection();\n        int i = 0;\n        Object[] array = new Object[coll.size()];\n        for (Data data : coll) {\n            array[i++] = getContext().getSerializationService().toObject(data);\n        }\n        return array;\n    }","id":5669,"modified_method":"public Object[] toArray() {\n        ClientMessage request = QueueIteratorParameters.encode(name);\n        ClientMessage response = invoke(request);\n        DataCollectionResultParameters resultParameters = DataCollectionResultParameters.decode(response);\n        Collection<Data> resultCollection = resultParameters.result;\n        int i = 0;\n        Object[] array = new Object[resultCollection.size()];\n        for (Data data : resultCollection) {\n            array[i++] = toObject(data);\n        }\n        return array;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean removeAll(Collection<?> c) {\n        CompareAndRemoveRequest request = new CompareAndRemoveRequest(name, getDataList(c), false);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5670,"modified_method":"public boolean removeAll(Collection<?> c) {\n        ClientMessage request = QueueCompareAndRemoveAllParameters.encode(name, getDataList(c));\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean remove(Object o) {\n        Data data = getContext().getSerializationService().toData(o);\n        RemoveRequest request = new RemoveRequest(name, data);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5671,"modified_method":"public boolean remove(Object o) {\n        Data data = toData(o);\n        ClientMessage request = QueueRemoveParameters.encode(name, data);\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean retainAll(Collection<?> c) {\n        CompareAndRemoveRequest request = new CompareAndRemoveRequest(name, getDataList(c), true);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5672,"modified_method":"public boolean retainAll(Collection<?> c) {\n        ClientMessage request = QueueCompareAndRetainAllParameters.encode(name, getDataList(c));\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"protected <T> T invokeInterruptibly(ClientRequest req) throws InterruptedException {\n        return super.invokeInterruptibly(req, getPartitionKey());\n    }","id":5673,"modified_method":"protected <T> T invokeInterruptibly(ClientMessage req) throws InterruptedException {\n        return super.invokeInterruptibly(req, getPartitionKey());\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean addAll(Collection<? extends E> c) {\n        AddAllRequest request = new AddAllRequest(name, getDataList(c));\n        Boolean result = invoke(request);\n        return result;\n    }","id":5674,"modified_method":"public boolean addAll(Collection<? extends E> c) {\n        ClientMessage request = QueueAddAllParameters.encode(name, getDataList(c));\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public <T> T[] toArray(T[] ts) {\n        IteratorRequest request = new IteratorRequest(name);\n        PortableCollection result = invoke(request);\n        Collection<Data> coll = result.getCollection();\n        int size = coll.size();\n        if (ts.length < size) {\n            ts = (T[]) java.lang.reflect.Array.newInstance(ts.getClass().getComponentType(), size);\n        }\n        int i = 0;\n        for (Data data : coll) {\n            ts[i++] = (T) getContext().getSerializationService().toObject(data);\n        }\n        return ts;\n    }","id":5675,"modified_method":"public <T> T[] toArray(T[] ts) {\n        ClientMessage request = QueueIteratorParameters.encode(name);\n        ClientMessage response = invoke(request);\n        DataCollectionResultParameters resultParameters = DataCollectionResultParameters.decode(response);\n        Collection<Data> resultCollection = resultParameters.result;\n        int size = resultCollection.size();\n        if (ts.length < size) {\n            ts = (T[]) java.lang.reflect.Array.newInstance(ts.getClass().getComponentType(), size);\n        }\n        int i = 0;\n        for (Data data : resultCollection) {\n            ts[i++] = (T) toObject(data);\n        }\n        return ts;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private List<Data> getDataList(Collection<?> objects) {\n        List<Data> dataList = new ArrayList<Data>(objects.size());\n        for (Object o : objects) {\n            dataList.add(getContext().getSerializationService().toData(o));\n        }\n        return dataList;\n    }","id":5676,"modified_method":"private List<Data> getDataList(Collection<?> objects) {\n        List<Data> dataList = new ArrayList<Data>(objects.size());\n        for (Object o : objects) {\n            dataList.add(toData(o));\n        }\n        return dataList;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public int drainTo(Collection<? super E> c, int maxElements) {\n        DrainRequest request = new DrainRequest(name, maxElements);\n        PortableCollection result = invoke(request);\n        Collection<Data> coll = result.getCollection();\n        for (Data data : coll) {\n            E e = getContext().getSerializationService().toObject(data);\n            c.add(e);\n        }\n        return coll.size();\n    }","id":5677,"modified_method":"public int drainTo(Collection<? super E> c, int maxElements) {\n        ClientMessage request = QueueDrainToMaxSizeParameters.encode(name, maxElements);\n        ClientMessage response = invoke(request);\n        DataCollectionResultParameters resultParameters = DataCollectionResultParameters.decode(response);\n        Collection<Data> resultCollection = resultParameters.result;\n        for (Data data : resultCollection) {\n            E e = toObject(data);\n            c.add(e);\n        }\n        return resultCollection.size();\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean contains(Object o) {\n        final Collection<Data> list = new ArrayList<Data>(1);\n        list.add(getContext().getSerializationService().toData(o));\n        ContainsRequest request = new ContainsRequest(name, list);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5678,"modified_method":"public boolean contains(Object o) {\n        Data data = toData(o);\n        ClientMessage request = QueueContainsParameters.encode(name, data);\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public int size() {\n        SizeRequest request = new SizeRequest(name);\n        Integer result = invoke(request);\n        return result;\n    }","id":5679,"modified_method":"public int size() {\n        ClientMessage request = QueueSizeParameters.encode(name);\n        ClientMessage response = invoke(request);\n        IntResultParameters resultParameters = IntResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {\n        Data data = getContext().getSerializationService().toData(e);\n        OfferRequest request = new OfferRequest(name, unit.toMillis(timeout), data);\n        final Boolean result = invokeInterruptibly(request);\n        return result;\n    }","id":5680,"modified_method":"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {\n        Data data = toData(e);\n        ClientMessage request = QueueOfferParameters.encode(name, data, unit.toMillis(timeout));\n        ClientMessage response = invokeInterruptibly(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean removeItemListener(String registrationId) {\n        final RemoveListenerRequest request = new RemoveListenerRequest(name, registrationId);\n        return stopListening(request, registrationId);\n    }","id":5681,"modified_method":"public boolean removeItemListener(String registrationId) {\n        ClientMessage request = QueueRemoveListenerParameters.encode(name, registrationId);\n        return stopListening(request, registrationId);\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean isEmpty() {\n        IsEmptyRequest request = new IsEmptyRequest(name);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5682,"modified_method":"public boolean isEmpty() {\n        ClientMessage request = QueueIsEmptyParameters.encode(name);\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean containsAll(Collection<?> c) {\n        List<Data> list = getDataList(c);\n        ContainsRequest request = new ContainsRequest(name, list);\n        Boolean result = invoke(request);\n        return result;\n    }","id":5683,"modified_method":"public boolean containsAll(Collection<?> c) {\n        ClientMessage request = QueueContainsAllParameters.encode(name, getDataList(c));\n        ClientMessage response = invoke(request);\n        BooleanResultParameters resultParameters = BooleanResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void clear() {\n        ClearRequest request = new ClearRequest(name);\n        invoke(request);\n    }","id":5684,"modified_method":"public void clear() {\n        ClientMessage request = QueueClearParameters.encode(name);\n        invoke(request);\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public int remainingCapacity() {\n        RemainingCapacityRequest request = new RemainingCapacityRequest(name);\n        Integer result = invoke(request);\n        return result;\n    }","id":5685,"modified_method":"public int remainingCapacity() {\n        ClientMessage request = QueueRemainingCapacityParameters.encode(name);\n        ClientMessage response = invoke(request);\n        IntResultParameters resultParameters = IntResultParameters.decode(response);\n        return resultParameters.result;\n    }","commit_id":"dd748932a3572330dd679c9ea272bde07a6a8c97","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     * Retrieve the value of the property by its name\n     *\n     * @param property is the name of the property to look at\n     * @return the value of the property\n     */\n    public Object getProperty(String property) {\n        try {\n            Object value = result.get(property);\n            if (value != null)\n                return value;\n            // if property exists and value is null, return null\n            if (result.containsKey(property))\n                return null;\n            // with some databases/drivers, the columns names are stored uppercase.\n            String propertyUpper = property.toUpperCase();\n            value = result.get(propertyUpper);\n            if (value != null)\n                return value;\n            // if property exists and value is null, return null\n            if (result.containsKey(propertyUpper)) \n                return null;\n            throw new MissingPropertyException(property, GroovyRowResult.class);\n        }\n        catch (Exception e) {\n            throw new MissingPropertyException(property, GroovyRowResult.class, e);\n        }\n    }","id":5686,"modified_method":"/**\n     * Retrieve the value of the property by its name\n     *\n     * @param property is the name of the property to look at\n     * @return the value of the property\n     */\n    public Object getProperty(String property) {\n        try {\n            // try to match with exact case first for efficiency\n            Object value = result.get(property);\n            if (value != null || result.containsKey(property))\n                return value;\n            // now try again ignoring case to cater for how some databases/drivers store column names.\n            value = getPropertyIgnoringCase(property);\n            if (value != null || containsKey(property))\n                return value;\n            throw new MissingPropertyException(property, GroovyRowResult.class);\n        }\n        catch (Exception e) {\n            throw new MissingPropertyException(property, GroovyRowResult.class, e);\n        }\n    }","commit_id":"08d558d55d3fefd3d834d9ba1e7f66ecb59f4560","url":"https://github.com/apache/groovy"},{"original_method":"public boolean containsKey(Object key) {\n        return result.containsKey(key);\n    }","id":5687,"modified_method":"public boolean containsKey(Object key) {\n        // first look for exact case for efficiency\n        if (result.containsKey(key)) return true;\n        // now try again ignoring case\n        for (Object next : result.keySet()) {\n            if (!(next instanceof String) && !(key instanceof String || key instanceof GString))\n                continue;\n            if (key.toString().equalsIgnoreCase((String) next)) {\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"08d558d55d3fefd3d834d9ba1e7f66ecb59f4560","url":"https://github.com/apache/groovy"},{"original_method":"public Object get(Object property) {\n        if (property instanceof String)\n            return getProperty((String)property);\n        else\n            return null;\n    }","id":5688,"modified_method":"public Object get(Object property) {\n        if (property instanceof String)\n            return getProperty((String)property);\n        return null;\n    }","commit_id":"08d558d55d3fefd3d834d9ba1e7f66ecb59f4560","url":"https://github.com/apache/groovy"},{"original_method":"protected boolean isValidStructureField(\n\t\tlong groupId, String ddmStructureKey, String contentField) {\n\n\t\tif (contentField.equals(JournalFeedConstants.WEB_CONTENT_DESCRIPTION) ||\n\t\t\tcontentField.equals(JournalFeedConstants.RENDERED_WEB_CONTENT)) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\t\tgroupId,\n\t\t\t\tclassNameLocalService.getClassNameId(JournalArticle.class),\n\t\t\t\tddmStructureKey);\n\n\t\t\tDDMForm ddmForm = ddmStructure.getDDMForm();\n\n\t\t\tMap<String, DDMFormField> ddmFormFieldsMap =\n\t\t\t\tddmForm.getDDMFormFieldsMap(true);\n\n\t\t\treturn ddmFormFieldsMap.containsKey(contentField);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\treturn false;\n\t}","id":5689,"modified_method":"protected boolean isValidStructureField(\n\t\tlong groupId, String ddmStructureKey, String contentField) {\n\n\t\tif (contentField.equals(JournalFeedConstants.WEB_CONTENT_DESCRIPTION) ||\n\t\t\tcontentField.equals(JournalFeedConstants.RENDERED_WEB_CONTENT)) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tDDMStructure ddmStructure = ddmStructureLocalService.getStructure(\n\t\t\t\tgroupId,\n\t\t\t\tclassNameLocalService.getClassNameId(JournalArticle.class),\n\t\t\t\tddmStructureKey);\n\n\t\t\tDDMForm ddmForm = ddmStructure.getDDMForm();\n\n\t\t\tMap<String, DDMFormField> ddmFormFieldsMap =\n\t\t\t\tddmForm.getDDMFormFieldsMap(false);\n\n\t\t\tif (ddmFormFieldsMap.containsKey(contentField)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint selectAndRadioFieldsCounter = 0;\n\n\t\t\t\tfor (DDMFormField ddmFormField : ddmFormFieldsMap.values()) {\n\t\t\t\t\tString ddmFormFieldType = ddmFormField.getType();\n\n\t\t\t\t\tif (ddmFormFieldType.equals(\"select\") ||\n\t\t\t\t\t\tddmFormFieldType.equals(\"radio\")) {\n\n\t\t\t\t\t\tselectAndRadioFieldsCounter++;\n\n\t\t\t\t\t\tDDMFormFieldOptions ddmFormFieldOptions =\n\t\t\t\t\t\t\tddmFormField.getDDMFormFieldOptions();\n\n\t\t\t\t\t\tfor (String optionValue :\n\t\t\t\t\t\t\tddmFormFieldOptions.getOptionsValues()) {\n\n\t\t\t\t\t\t\tLocale locale =\n\t\t\t\t\t\t\t\tLocaleThreadLocal.getThemeDisplayLocale();\n\n\t\t\t\t\t\t\tString optionLabel =\n\t\t\t\t\t\t\t\tddmFormFieldOptions.\n\t\t\t\t\t\t\t\t\tgetOptionLabels(optionValue).\n\t\t\t\t\t\t\t\t\t\tgetString(locale);\n\n\t\t\t\t\t\t\tString optionLabelFormatted =\n\t\t\t\t\t\t\t\toptionLabel + StringPool.UNDERLINE +\n\t\t\t\t\t\t\t\t\tselectAndRadioFieldsCounter;\n\n\t\t\t\t\t\t\tif (optionLabelFormatted.equals(contentField)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\treturn false;\n\t}","commit_id":"e4cc02105513264c65e4c572a4b3a77919cad58b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public EventVariableResolverFactory(ParserConfiguration parserConfiguration,\n                                        MuleContext muleContext,\n                                        MuleEvent event)\n    {\n        super(parserConfiguration, muleContext, event.getMessage());\n        addFinalVariable(\"flow\", new FlowContext(event.getFlowConstruct()));\n    }","id":5690,"modified_method":"public EventVariableResolverFactory(MuleEvent event)\n    {\n        this.event = event;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public GlobalVariableResolverFactory(MVELExpressionLanguage el,\n                                         MVELExpressionLanguageContext parent,\n                                         ParserConfiguration parserConfiguration,\n                                         MuleContext muleContext,\n                                         Collection<ExpressionLanguageExtension> expressionLanguageExtensions)\n    {\n        super(parserConfiguration, muleContext);\n        this.parent = parent;\n        for (ExpressionLanguageExtension extension : expressionLanguageExtensions)\n        {\n            extension.configureContext(parent);\n        }\n        for (Entry<String, String> alias : el.aliases.entrySet())\n        {\n            addAlias(alias.getKey(), alias.getValue());\n        }\n        for (Entry<String, Function> function : el.globalFunctions.entrySet())\n        {\n            addFinalVariable(function.getKey(), new FunctionInstance(function.getValue()));\n        }\n    }","id":5691,"modified_method":"public GlobalVariableResolverFactory(MVELExpressionLanguage el,\n                                         ParserConfiguration parserConfiguration,\n                                         MuleContext muleContext,\n                                         Collection<ExpressionLanguageExtension> expressionLanguageExtensions,\n                                         VariableResolverFactory... context)\n    {\n        super(parserConfiguration, muleContext);\n        for (VariableResolverFactory mvelExpressionLanguageContext : context)\n        {\n            addChildContext(mvelExpressionLanguageContext);\n        }\n        for (ExpressionLanguageExtension extension : expressionLanguageExtensions)\n        {\n            extension.configureContext(this);\n        }\n        for (Entry<String, String> alias : el.aliases.entrySet())\n        {\n            addAlias(alias.getKey(), alias.getValue());\n        }\n        for (Entry<String, Function> function : el.globalFunctions.entrySet())\n        {\n            addFinalVariable(function.getKey(), new FunctionInstance(function.getValue()));\n        }\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public MVELExpressionExecutor(ParserConfiguration parserConfiguration)\n    {\n        this.parserConfiguration = parserConfiguration;\n        System.setProperty(\"mvel2.compiler.allow_override_all_prophandling\", \"true\");\n        // Use reflective optimizer rather than default to avoid concurrency issues with JIT complication.\n        // See MULE-6630\n        OptimizerFactory.setDefaultOptimizer(OptimizerFactory.SAFE_REFLECTIVE);\n    }","id":5692,"modified_method":"public MVELExpressionExecutor(ParserConfiguration parserConfiguration)\n    {\n        this.parserConfiguration = parserConfiguration;\n        System.setProperty(\"mvel2.compiler.allow_override_all_prophandling\", \"true\");\n        // Use reflective optimizer rather than default to avoid concurrency issues with JIT complication.\n        // See MULE-6630\n        OptimizerFactory.setDefaultOptimizer(\"ASM\");\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"protected MVELExpressionLanguageContext createExpressionLanguageContext()\n    {\n        MVELExpressionLanguageContext factory = new MVELExpressionLanguageContext(parserConfiguration,\n            muleContext);\n        factory.appendFactory(new MVELExpressionLanguageContext(staticContext));\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_CONTEXT_INTERNAL_VARIABLE, muleContext);\n        return factory;\n    }","id":5693,"modified_method":"protected MVELExpressionLanguageContext createExpressionLanguageContext(Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext context = new MVELExpressionLanguageContext(parserConfiguration,\n            muleContext);\n        if (vars != null)\n        {\n            context.addChildContext(new CachedMapVariableResolverFactory(vars));\n        }\n        return context;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        return (T) evaluateInternal(expression, factory);\n    }","id":5694,"modified_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression)\n    {\n        return (T) evaluate(expression, (Map<String, Object>) null);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE, message);\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createMessageVariableResolverFactory(message));\n\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(message));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":5695,"modified_method":"@Override\n    @Deprecated\n    public <T> T evaluate(String expression, MuleMessage message, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext context = createExpressionLanguageContext(vars);\n        context.addChildContext(staticContext);\n        VariableResolverFactory messageResolverFactory = new MessageVariableResolverFactory(message);\n        context.addChildContext(messageResolverFactory);\n        if (useGlobalConfiguration)\n        {\n            if (autoResolveVariables)\n            {\n                context.addChildContext(createGlobalVariableResolverFactory(staticContext,\n                    messageResolverFactory, createVariableVariableResolverFactory(message)));\n            }\n            else\n            {\n                context.addChildContext(createGlobalVariableResolverFactory(staticContext,\n                    messageResolverFactory));\n            }\n        }\n        else if (autoResolveVariables)\n        {\n            context.addChildContext(createVariableVariableResolverFactory(message));\n        }\n        return evaluateInternal(expression, context);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":5696,"modified_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext context = createExpressionLanguageContext(vars);\n        context.addChildContext(staticContext);\n        if (useGlobalConfiguration)\n        {\n            context.addChildContext(createGlobalVariableResolverFactory(staticContext));\n        }\n        return (T) evaluateInternal(expression, context);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"protected VariableResolverFactory createEventVariableResolverFactory(MuleEvent event)\n    {\n        return new EventVariableResolverFactory(parserConfiguration, muleContext, event);\n    }","id":5697,"modified_method":"protected VariableResolverFactory createGlobalVariableResolverFactory(VariableResolverFactory... parents)\n    {\n        return new GlobalVariableResolverFactory(this, parserConfiguration, muleContext,\n            expressionLanguageExtensions, parents);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext factory = createExpressionLanguageContext();\n        factory.addPrivateVariable(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE,\n            event.getMessage());\n        if (vars != null)\n        {\n            factory.appendFactory(new CachedMapVariableResolverFactory(vars));\n        }\n        factory.appendFactory(createEventVariableResolverFactory(event));\n        if (useGlobalConfiguration)\n        {\n            factory.appendFactory(createGlobalVariableResolverFactory(factory));\n        }\n        if (autoResolveVariables)\n        {\n            factory.localFactory.appendFactory(createVariableVariableResolverFactory(event));\n        }\n        return (T) evaluateInternal(expression, factory);\n    }","id":5698,"modified_method":"@Override\n    public <T> T evaluate(String expression, MuleEvent event, Map<String, Object> vars)\n    {\n        MVELExpressionLanguageContext context = createExpressionLanguageContext(vars);\n        context.addChildContext(staticContext);\n        VariableResolverFactory eventResolverFactory = new EventVariableResolverFactory(event);\n        VariableResolverFactory messageResolverFactory = new MessageVariableResolverFactory(\n            event.getMessage());\n        context.addChildContext(messageResolverFactory);\n        context.addChildContext(eventResolverFactory);\n        if (useGlobalConfiguration)\n        {\n            if (autoResolveVariables)\n            {\n                context.addChildContext(createGlobalVariableResolverFactory(staticContext,\n                    messageResolverFactory, eventResolverFactory,\n                    createVariableVariableResolverFactory(event)));\n            }\n            else\n            {\n                context.addChildContext(createGlobalVariableResolverFactory(staticContext,\n                    messageResolverFactory, eventResolverFactory));\n            }\n        }\n        else if (autoResolveVariables)\n        {\n            context.addChildContext(createVariableVariableResolverFactory(event));\n        }\n        return evaluateInternal(expression, context);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public VariableResolver getVariableResolver(String name)\n    {\n        VariableResolver variableResolver = variableResolvers.get(name);\n        if (variableResolver == null)\n        {\n            variableResolver = nextFactory.getVariableResolver(name);\n        }\n        return variableResolver;\n    }","id":5699,"modified_method":"public VariableResolver getVariableResolver(String name)\n    {\n        VariableResolver variableResolver = variableResolvers.get(name);\n        if (variableResolver == null)\n        {\n            for (VariableResolverFactory child : children)\n            {\n                if (child.isResolveable(name))\n                {\n                    return child.getVariableResolver(name);\n                }\n            }\n            if (nextFactory != null)\n            {\n                return nextFactory.getVariableResolver(name);\n            }\n        }\n        return variableResolver;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public void addAlias(String alias, String expression)\n    {\n        addResolver(alias, new MuleAliasVariableResolver(alias, expression, getParentContext()));\n    }","id":5700,"modified_method":"@Override\n    public void addAlias(String alias, String expression)\n    {\n        addResolver(alias, new MuleAliasVariableResolver(alias, expression, this));\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public <T> void addPrivateVariable(String name, T value)\n    {\n        privateVariables.put(name, value);\n    }","id":5701,"modified_method":"@Override\n    public <T> void addPrivateVariable(String name, T value)\n    {\n        addFinalVariable(name, value);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public MVELExpressionLanguageContext(MVELExpressionLanguageContext context)\n    {\n        this.parserConfiguration = context.parserConfiguration;\n        this.muleContext = context.muleContext;\n        this.localFactory = context.localFactory;\n        this.nextFactory = context.nextFactory;\n        this.variableResolvers = context.variableResolvers;\n    }","id":5702,"modified_method":"public MVELExpressionLanguageContext(MVELExpressionLanguageContext context)\n    {\n        this.parserConfiguration = context.parserConfiguration;\n        this.muleContext = context.muleContext;\n        this.nextFactory = context.nextFactory;\n        this.variableResolvers = context.variableResolvers;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void addResolver(String name, VariableResolver vr)\n    {\n        if (this.getClass().equals(MVELExpressionLanguageContext.class))\n        {\n            localFactory.addResolver(name, vr);\n        }\n        else\n        {\n            variableResolvers.put(name, vr);\n        }\n    }","id":5703,"modified_method":"protected void addResolver(String name, VariableResolver vr)\n    {\n        variableResolvers.put(name, vr);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T getVariable(String name)\n    {\n        if (privateVariables.containsKey(name))\n        {\n            return (T) privateVariables.get(name);\n        }\n        else\n        {\n            VariableResolver resolver = getVariableResolver(name);\n            if (resolver != null)\n            {\n                return (T) resolver.getValue();\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }","id":5704,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T getVariable(String name)\n    {\n        VariableResolver resolver = getVariableResolver(name);\n        if (resolver != null)\n        {\n            return (T) resolver.getValue();\n        }\n        else\n        {\n            return null;\n        }\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public void appendFactory(VariableResolverFactory resolverFactory)\n    {\n        if (nextFactory instanceof InternalVariableResolverFactory)\n        {\n            setNextFactory(resolverFactory);\n            resolverFactory.setNextFactory(localFactory);\n        }\n        else\n        {\n            VariableResolverFactory vrf = nextFactory;\n            while (vrf.getNextFactory() != null\n                   && !(vrf.getNextFactory() instanceof InternalVariableResolverFactory))\n            {\n                vrf = vrf.getNextFactory();\n            }\n            vrf.setNextFactory(resolverFactory);\n            resolverFactory.setNextFactory(localFactory);\n        }\n    }","id":5705,"modified_method":"@Override\n    public void appendFactory(VariableResolverFactory resolverFactory)\n    {\n        if (nextFactory == null)\n        {\n            setNextFactory(resolverFactory);\n        }\n        else\n        {\n            VariableResolverFactory vrf = nextFactory;\n            while (vrf.getNextFactory() != null)\n            {\n                vrf = vrf.getNextFactory();\n            }\n            vrf.setNextFactory(resolverFactory);\n        }\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public MVELExpressionLanguageContext(ParserConfiguration parserConfiguration, MuleContext muleContext)\n    {\n        this.parserConfiguration = parserConfiguration;\n        this.muleContext = muleContext;\n        this.localFactory = new InternalVariableResolverFactory(Collections.<String, Object> emptyMap());\n        this.nextFactory = localFactory;\n    }","id":5706,"modified_method":"public MVELExpressionLanguageContext(ParserConfiguration parserConfiguration, MuleContext muleContext)\n    {\n        this.parserConfiguration = parserConfiguration;\n        this.muleContext = muleContext;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public boolean isTarget(String name)\n    {\n        return variableResolvers.containsKey(name);\n    }","id":5707,"modified_method":"@Override\n    public boolean isTarget(String name)\n    {\n        if (variableResolvers.containsKey(name))\n        {\n            return true;\n        }\n        else\n        {\n            for (VariableResolverFactory child : children)\n            {\n                if (child.isResolveable(name))\n                {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Before\n    public void before()\n    {\n        event = createMuleEvent();\n        // Warmup\n        for (int i = 0; i < 5000; i++)\n        {\n            muleContext.getExpressionLanguage().evaluate(mel, event);\n        }\n    }","id":5708,"modified_method":"@Before\n    public void before()\n    {\n        ((MVELExpressionLanguage)muleContext.getExpressionLanguage()).setAutoResolveVariables(false);\n        event = createMuleEvent();\n        // Warmup\n        for (int i = 0; i < 5000; i++)\n        {\n            muleContext.getExpressionLanguage().evaluate(mel, event);\n        }\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public MessageVariableResolverFactory(final ParserConfiguration parserConfiguration,\n                                          final MuleContext muleContext,\n                                          final MuleMessage message)\n    {\n        super(parserConfiguration, muleContext);\n\n        if (message != null)\n        {\n            addFinalVariable(\"message\", new MessageContext(message));\n\n            // We need payload top-level for compatibility with payload expression evaluator without ':'\n            addVariable(\"payload\", message.getPayload(), new VariableAssignmentCallback()\n            {\n                @Override\n                public void assignValue(String name, Object value, Object newValue)\n                {\n                    message.setPayload(newValue);\n                }\n            });\n\n            // Only add exception is present\n            if (message.getExceptionPayload() != null)\n            {\n                addFinalVariable(\"exception\", message.getExceptionPayload().getException());\n            }\n            else\n            {\n                addFinalVariable(\"exception\", null);\n            }\n\n            addFinalVariable(\"flowVars\", new MessagePropertyMapContext(message, PropertyScope.INVOCATION));\n            addFinalVariable(\"sessionVars\", new MessagePropertyMapContext(message, PropertyScope.SESSION));\n        }\n    }","id":5709,"modified_method":"public MessageVariableResolverFactory(MuleMessage message)\n    {\n        this.muleMessage = message;\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public void setValue(Object value)\n    {\n        MVELExpressionLanguageContext newContext = new MVELExpressionLanguageContext(context);\n        expression = expression + \"= ___value\";\n        newContext.addFinalVariable(\"___value\", value);\n        executor.execute(expression, newContext);\n    }","id":5710,"modified_method":"@Override\n    public void setValue(Object value)\n    {\n        expression = expression + \"= ___value\";\n        context.addFinalVariable(\"___value\", value);\n        executor.execute(expression, context);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"public StaticVariableResolverFactory(ParserConfiguration parserConfiguration, MuleContext muleContext)\n    {\n        super(parserConfiguration, muleContext);\n        addVariable(\"server\", new ServerContext());\n        addVariable(\"mule\", new MuleInstanceContext(muleContext));\n        addVariable(\"app\", new AppContext(muleContext));\n        declareFunction(\"regex\", new RegexExpressionLanguageFuntion());\n        declareFunction(\"dateTime\", new DateTimeExpressionLanguageFuntion());\n    }","id":5711,"modified_method":"public StaticVariableResolverFactory(ParserConfiguration parserConfiguration, MuleContext muleContext)\n    {\n        this.muleContext = muleContext;\n        regexFunction = new FunctionInstance(new MVELFunctionAdaptor(REGEX,\n            new RegexExpressionLanguageFuntion(), new ParserContext(parserConfiguration)));\n        dateTimeFunction = new FunctionInstance(new MVELFunctionAdaptor(REGEX,\n            new RegexExpressionLanguageFuntion(), new ParserContext(parserConfiguration)));\n\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@SuppressWarnings(\"deprecation\")\n    @Override\n    public VariableResolver getVariableResolver(String name)\n    {\n\n        if (message != null && message.getInvocationPropertyNames().contains(name))\n        {\n            return new FlowVariableVariableResolver(name);\n        }\n        else if (message != null && message.getSessionPropertyNames().contains(name))\n        {\n            return new SessionVariableVariableResolver(name);\n        }\n        else if (nextFactory != null)\n        {\n            return nextFactory.getVariableResolver(name);\n        }\n        else\n        {\n            return null;\n        }\n    }","id":5712,"modified_method":"@SuppressWarnings(\"deprecation\")\n    @Override\n    public VariableResolver getVariableResolver(String name)\n    {\n\n        if (message != null && message.getInvocationPropertyNames().contains(name))\n        {\n            return new FlowVariableVariableResolver(name);\n        }\n        else if (message != null && message.getSessionPropertyNames().contains(name))\n        {\n            return new SessionVariableVariableResolver(name);\n        }\n        else if (nextFactory.isResolveable(name))\n        {\n            return nextFactory.getVariableResolver(name);\n        }\n        else\n        {\n            return null;\n        }\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"@SuppressWarnings(\"deprecation\")\n    public boolean isTarget(String name)\n    {\n        if (message == null)\n        {\n            return isNextResolveable(name);\n        }\n        return message.getInvocationPropertyNames().contains(name)\n               || message.getSessionPropertyNames().contains(name) || isNextResolveable(name);\n    }","id":5713,"modified_method":"@SuppressWarnings(\"deprecation\")\n    public boolean isTarget(String name)\n    {\n        if (message == null)\n        {\n            return false;\n        }\n        return message.getInvocationPropertyNames().contains(name)\n               || message.getSessionPropertyNames().contains(name);\n    }","commit_id":"1a3a3ed22b2480faf2ccf9a677d956f0dee3a36f","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Removes a message whose seqno is equal to <code>next_to_remove<\/code>, increments the latter. Returns message\n     * that was removed, or null, if no message can be removed. Messages are thus removed in order.\n     */\n    public Message remove() {\n        long next=next_to_remove.get();\n        Segment segment=findSegment(next);\n        if(segment == null)\n            return null;\n        Message retval=segment.remove(next);\n        if(retval != null) {\n            next_to_remove.compareAndSet(next, next +1);\n            if(segment.allRemoved())\n                segments.remove(next / segment_capacity);\n        }\n        return retval;\n    }","id":5714,"modified_method":"/**\n     * Removes a message whose seqno is equal to <code>next_to_remove<\/code>, increments the latter. Returns message\n     * that was removed, or null, if no message can be removed. Messages are thus removed in order.\n     */\n    public Message remove() {\n        long next=next_to_remove.get();\n        Segment segment=current_remove_segment;\n        if(segment == null || !segment.contains(next)) {\n            segment=findSegment(next);\n            if(segment != null)\n                current_remove_segment=segment;\n        }\n        if(segment == null)\n            return null;\n        Message retval=segment.remove(next);\n        if(retval != null) {\n            next_to_remove.compareAndSet(next, next +1);\n            if(segment.allRemoved())\n                segments.remove(next / segment_capacity);\n        }\n        return retval;\n    }","commit_id":"d0b1c008b4d90dc3565d7a660e6561751790daf2","url":"https://github.com/belaban/JGroups"},{"original_method":"public AckReceiverWindow(long initial_seqno, int segment_capacity) {\n        next_to_remove=new AtomicLong(initial_seqno);\n        this.segment_capacity=segment_capacity;\n        long index=next_to_remove.get() / segment_capacity;\n        long first_seqno=(next_to_remove.get() / segment_capacity) * segment_capacity;\n        this.segments.put(index, new Segment(first_seqno, segment_capacity));\n        Segment initial_segment=findOrCreateSegment(next_to_remove.get());\n        current_segment=initial_segment;\n        for(long i=0; i < next_to_remove.get(); i++) {\n            initial_segment.add(i, TOMBSTONE);\n            initial_segment.remove(i);\n        }\n    }","id":5715,"modified_method":"public AckReceiverWindow(long initial_seqno, int segment_capacity) {\n        next_to_remove=new AtomicLong(initial_seqno);\n        this.segment_capacity=segment_capacity;\n        long index=next_to_remove.get() / segment_capacity;\n        long first_seqno=(next_to_remove.get() / segment_capacity) * segment_capacity;\n        this.segments.put(index, new Segment(first_seqno, segment_capacity));\n        Segment initial_segment=findOrCreateSegment(next_to_remove.get());\n        current_segment=initial_segment;\n        current_remove_segment=initial_segment;\n        for(long i=0; i < next_to_remove.get(); i++) {\n            initial_segment.add(i, TOMBSTONE);\n            initial_segment.remove(i);\n        }\n    }","commit_id":"d0b1c008b4d90dc3565d7a660e6561751790daf2","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Removes as many messages as possible (in sequence, without gaps)\n     * @param max Max number of messages to be removed\n     * @return Tuple<List<Message>,Long>: a tuple of the message list and the highest seqno removed\n     */\n    public Tuple<List<Message>,Long> removeMany(final int max) {\n        List<Message> list=new LinkedList<Message>(); // we remove msgs.size() messages *max*\n        Tuple<List<Message>,Long> retval=new Tuple<List<Message>,Long>(list, 0L);\n\n        int count=0;\n        boolean looping=true;\n        while(count < max && looping) {\n            long next=next_to_remove.get();\n            Segment segment=findSegment(next);\n            if(segment == null)\n                return retval;\n\n            long segment_id=next;\n            long end=segment.getEndIndex();\n            while(next < end && count < max) {\n                Message msg=segment.remove(next);\n                if(msg == null) {\n                    looping=false;\n                    break;\n                }\n                list.add(msg);\n                count++;\n                retval.setVal2(next);\n                next_to_remove.compareAndSet(next, ++next);\n                if(segment.allRemoved())\n                    segments.remove(segment_id / segment_capacity);\n            }\n        }\n\n        return retval;\n    }","id":5716,"modified_method":"/**\n     * Removes as many messages as possible (in sequence, without gaps)\n     * @param max Max number of messages to be removed\n     * @return Tuple<List<Message>,Long>: a tuple of the message list and the highest seqno removed\n     */\n    public Tuple<List<Message>,Long> removeMany(final int max) {\n        List<Message> list=new LinkedList<Message>(); // we remove msgs.size() messages *max*\n        Tuple<List<Message>,Long> retval=new Tuple<List<Message>,Long>(list, 0L);\n\n        int count=0;\n        boolean looping=true;\n        while(count < max && looping) {\n            long next=next_to_remove.get();\n            Segment segment=current_remove_segment;\n            if(segment == null || !segment.contains(next)) {\n                segment=findSegment(next);\n                if(segment != null)\n                    current_remove_segment=segment;\n            }\n            if(segment == null)\n                return retval;\n\n            long segment_id=next;\n            long end=segment.getEndIndex();\n            while(next < end && count < max) {\n                Message msg=segment.remove(next);\n                if(msg == null) {\n                    looping=false;\n                    break;\n                }\n                list.add(msg);\n                count++;\n                retval.setVal2(next);\n                next_to_remove.compareAndSet(next, ++next);\n                if(segment.allRemoved())\n                    segments.remove(segment_id / segment_capacity);\n            }\n        }\n\n        return retval;\n    }","commit_id":"d0b1c008b4d90dc3565d7a660e6561751790daf2","url":"https://github.com/belaban/JGroups"},{"original_method":"public AckReceiverWindow(long initial_seqno, int segment_capacity) {\n        next_to_remove=new AtomicLong(initial_seqno);\n        this.segment_capacity=segment_capacity;\n        long index=next_to_remove.get() / segment_capacity;\n        long first_seqno=(next_to_remove.get() / segment_capacity) * segment_capacity;\n        this.segments.put(index, new Segment(first_seqno, segment_capacity));\n        Segment initial_segment=findOrCreateSegment(next_to_remove.get());\n        current_segment=initial_segment;\n        for(long i=0; i < next_to_remove.get(); i++) {\n            initial_segment.add(i, TOMBSTONE);\n            initial_segment.remove(i);\n        }\n    }","id":5717,"modified_method":"public AckReceiverWindow(long initial_seqno, int segment_capacity) {\n        next_to_remove=new AtomicLong(initial_seqno);\n        this.segment_capacity=segment_capacity;\n        long index=next_to_remove.get() / segment_capacity;\n        long first_seqno=(next_to_remove.get() / segment_capacity) * segment_capacity;\n        this.segments.put(index, new Segment(first_seqno, segment_capacity));\n        Segment initial_segment=findOrCreateSegment(next_to_remove.get());\n        current_segment=initial_segment;\n        current_remove_segment=initial_segment;\n        for(long i=0; i < next_to_remove.get(); i++) {\n            initial_segment.add(i, TOMBSTONE);\n            initial_segment.remove(i);\n        }\n    }","commit_id":"eb82204dd765cfbb6b2bb789e334897921109e6f","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Removes a message whose seqno is equal to <code>next_to_remove<\/code>, increments the latter. Returns message\n     * that was removed, or null, if no message can be removed. Messages are thus removed in order.\n     */\n    public Message remove() {\n        long next=next_to_remove.get();\n        Segment segment=findSegment(next);\n        if(segment == null)\n            return null;\n        Message retval=segment.remove(next);\n        if(retval != null) {\n            next_to_remove.compareAndSet(next, next +1);\n            if(segment.allRemoved())\n                segments.remove(next / segment_capacity);\n        }\n        return retval;\n    }","id":5718,"modified_method":"/**\n     * Removes a message whose seqno is equal to <code>next_to_remove<\/code>, increments the latter. Returns message\n     * that was removed, or null, if no message can be removed. Messages are thus removed in order.\n     */\n    public Message remove() {\n        long next=next_to_remove.get();\n        Segment segment=current_remove_segment;\n        if(segment == null || !segment.contains(next)) {\n            segment=findSegment(next);\n            if(segment != null)\n                current_remove_segment=segment;\n        }\n        if(segment == null)\n            return null;\n        Message retval=segment.remove(next);\n        if(retval != null) {\n            next_to_remove.compareAndSet(next, next +1);\n            if(segment.allRemoved())\n                segments.remove(next / segment_capacity);\n        }\n        return retval;\n    }","commit_id":"eb82204dd765cfbb6b2bb789e334897921109e6f","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Removes as many messages as possible (in sequence, without gaps)\n     * @param max Max number of messages to be removed\n     * @return Tuple<List<Message>,Long>: a tuple of the message list and the highest seqno removed\n     */\n    public Tuple<List<Message>,Long> removeMany(final int max) {\n        List<Message> list=new LinkedList<Message>(); // we remove msgs.size() messages *max*\n        Tuple<List<Message>,Long> retval=new Tuple<List<Message>,Long>(list, 0L);\n\n        int count=0;\n        boolean looping=true;\n        while(count < max && looping) {\n            long next=next_to_remove.get();\n            Segment segment=findSegment(next);\n            if(segment == null)\n                return retval;\n\n            long segment_id=next;\n            long end=segment.getEndIndex();\n            while(next < end && count < max) {\n                Message msg=segment.remove(next);\n                if(msg == null) {\n                    looping=false;\n                    break;\n                }\n                list.add(msg);\n                count++;\n                retval.setVal2(next);\n                next_to_remove.compareAndSet(next, ++next);\n                if(segment.allRemoved())\n                    segments.remove(segment_id / segment_capacity);\n            }\n        }\n\n        return retval;\n    }","id":5719,"modified_method":"/**\n     * Removes as many messages as possible (in sequence, without gaps)\n     * @param max Max number of messages to be removed\n     * @return Tuple<List<Message>,Long>: a tuple of the message list and the highest seqno removed\n     */\n    public Tuple<List<Message>,Long> removeMany(final int max) {\n        List<Message> list=new LinkedList<Message>(); // we remove msgs.size() messages *max*\n        Tuple<List<Message>,Long> retval=new Tuple<List<Message>,Long>(list, 0L);\n\n        int count=0;\n        boolean looping=true;\n        while(count < max && looping) {\n            long next=next_to_remove.get();\n            Segment segment=current_remove_segment;\n            if(segment == null || !segment.contains(next)) {\n                segment=findSegment(next);\n                if(segment != null)\n                    current_remove_segment=segment;\n            }\n            if(segment == null)\n                return retval;\n\n            long segment_id=next;\n            long end=segment.getEndIndex();\n            while(next < end && count < max) {\n                Message msg=segment.remove(next);\n                if(msg == null) {\n                    looping=false;\n                    break;\n                }\n                list.add(msg);\n                count++;\n                retval.setVal2(next);\n                next_to_remove.compareAndSet(next, ++next);\n                if(segment.allRemoved())\n                    segments.remove(segment_id / segment_capacity);\n            }\n        }\n\n        return retval;\n    }","commit_id":"eb82204dd765cfbb6b2bb789e334897921109e6f","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\" + info.getThreadName() + \"\\\"\" +\n                \" Id=\" + info.getThreadId() + \" \" +\n                info.getThreadState());\n        if (info.getLockName() != null) {\n            sb.append(\" on \" + info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\" + info.getLockOwnerName() +\n                    \"\\\" Id=\" + info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        StackTraceElement[] stackTrace = info.getStackTrace();\n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \" + ste.toString());\n            sb.append('\\n');\n        }\n        sb.append('\\n');\n    }","id":5720,"modified_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\" + info.getThreadName() + \"\\\"\" +\n                \" Id=\" + info.getThreadId() + \" \" +\n                info.getThreadState());\n        if (info.getLockName() != null) {\n            sb.append(\" on \").append(info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\")\n                .append(info.getLockOwnerName())\n                .append(\"\\\" Id=\").append(info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        StackTraceElement[] stackTrace = info.getStackTrace();\n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \").append(ste.toString());\n            sb.append('\\n');\n        }\n        sb.append('\\n');\n    }","commit_id":"96110ada8af84a42c08644a5fb52d0697c349110","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public static void dumpThreadsToConsole() {\n    getInstance().dumpThreadsToFile(new OutputStreamWriter(System.err));\n  }","id":5721,"modified_method":"public static void dumpThreadsToConsole(String message) {\n    OutputStreamWriter writer = new OutputStreamWriter(System.err);\n    try {\n      writer.write(message);\n      writer.write(\"\\n\");\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    getInstance().dumpThreadsToFile(writer);\n  }","commit_id":"bc8fb854043e6c1b0de3486fee2638070b623eb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void dumpCallStack(final ThreadInfo info, final Writer f, final StackTraceElement[] stackTraceElements) {\n    try {\n      StringBuilder sb = new StringBuilder(\"\\\"\").append(info.getThreadName()).append(\"\\\"\");\n      sb.append(\" prio=0 tid=0x0 nid=0x0 Id=\").append(info.getThreadId());\n      sb.append(\"\\n\").append(\" java.lang.Thread.State: \").append(info.getThreadState()).append(\"\\n\");\n      if (info.getLockName() != null) {\n          sb.append(\" on \" + info.getLockName());\n      }\n      if (info.getLockOwnerName() != null) {\n          sb.append(\" owned by \\\"\" + info.getLockOwnerName() +\n                    \"\\\" Id=\" + info.getLockOwnerId());\n      }\n      if (info.isSuspended()) {\n          sb.append(\" (suspended)\");\n      }\n      if (info.isInNative()) {\n          sb.append(\" (in native)\");\n      }\n\n      f.write(sb + \"\\n\");\n      for (StackTraceElement element : stackTraceElements) {\n        f.write(\"\\tat \" + element.toString() + \"\\n\");\n      }\n      f.write(\"\\n\");\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":5722,"modified_method":"private static void dumpCallStack(final ThreadInfo info, final Writer f, final StackTraceElement[] stackTraceElements) {\n    try {\n      @NonNls StringBuilder sb = new StringBuilder(\"\\\"\").append(info.getThreadName()).append(\"\\\"\");\n      sb.append(\" prio=0 tid=0x0 nid=0x0 \").append(getReadableState(info.getThreadState())).append(\"\\n\");\n      sb.append(\"     java.lang.Thread.State: \").append(info.getThreadState()).append(\"\\n\");\n      if (info.getLockName() != null) {\n        sb.append(\" on \").append(info.getLockName());\n      }\n      if (info.getLockOwnerName() != null) {\n        sb.append(\" owned by \\\"\").append(info.getLockOwnerName()).append(\"\\\" Id=\").append(info.getLockOwnerId());\n      }\n      if (info.isSuspended()) {\n          sb.append(\" (suspended)\");\n      }\n      if (info.isInNative()) {\n          sb.append(\" (in native)\");\n      }\n\n      f.write(sb + \"\\n\");\n      for (StackTraceElement element : stackTraceElements) {\n        f.write(\"\\tat \" + element.toString() + \"\\n\");\n      }\n      f.write(\"\\n\");\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"bc8fb854043e6c1b0de3486fee2638070b623eb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void printThreadDump() {\n    PerformanceWatcher.dumpThreadsToConsole();\n  }","id":5723,"modified_method":"public static void printThreadDump() {\n    PerformanceWatcher.dumpThreadsToConsole(\"Thread dump:\");\n  }","commit_id":"bc8fb854043e6c1b0de3486fee2638070b623eb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\r\n     * @param desiredClass Java class representing the desired format\r\n     * @return Callback interface representing the desiredClass - or null\r\n     * if the return class isn't supported.\r\n     */\r\n    protected static ResultHolder getResultHolder(Class desiredClass) {\r\n        if (byte[].class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                ByteArrayOutputStream resultStream = new ByteArrayOutputStream();\r\n                StreamResult result = new StreamResult(resultStream);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return resultStream.toByteArray(); }\r\n            };\r\n        } else if (String.class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                StringWriter writer = new StringWriter();\r\n                StreamResult result = new StreamResult(writer);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return writer.getBuffer().toString(); }\r\n            };\r\n        } else if (org.w3c.dom.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DOMResult result = new DOMResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getNode(); }\r\n            };\r\n        } else if (org.dom4j.io.DocumentResult.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result; }\r\n            };\r\n        } else if (org.dom4j.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getDocument(); }\r\n            };\r\n        }\r\n        return null;\r\n    }","id":5724,"modified_method":"/**\r\n     * @param desiredClass Java class representing the desired format\r\n     * @return Callback interface representing the desiredClass - or null\r\n     * if the return class isn't supported (or is null).\r\n     */\r\n    protected static ResultHolder getResultHolder(Class desiredClass) {\r\n        if (desiredClass == null) return null;\r\n        if (byte[].class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                ByteArrayOutputStream resultStream = new ByteArrayOutputStream();\r\n                StreamResult result = new StreamResult(resultStream);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return resultStream.toByteArray(); }\r\n            };\r\n        } else if (String.class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                StringWriter writer = new StringWriter();\r\n                StreamResult result = new StreamResult(writer);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return writer.getBuffer().toString(); }\r\n            };\r\n        } else if (org.w3c.dom.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DOMResult result = new DOMResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getNode(); }\r\n            };\r\n        } else if (org.dom4j.io.DocumentResult.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result; }\r\n            };\r\n        } else if (org.dom4j.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getDocument(); }\r\n            };\r\n        }\r\n        return null;\r\n    }","commit_id":"d359f4625fa7a85dc93201716e7c50afc53f0296","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object doTransform(Object src, String encoding) throws TransformerException\n    {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            // If returnClass is not set, assume W3C DOM\n            // This is the original behaviour\n            ResultHolder holder = getResultHolder(returnClass != null ? returnClass : Document.class);\n\n            assert(sourceDoc != null);\n            assert(holder != null);\n\n            Transformer idTransformer = TransformerFactory.newInstance().newTransformer();\n            idTransformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n            idTransformer.transform(sourceDoc, holder.getResult());\n\n            Object result = holder.getResultObject();\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","id":5725,"modified_method":"public Object doTransform(Object src, String encoding) throws TransformerException\n    {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            if (sourceDoc == null) return null;\n            \n            // If returnClass is not set, assume W3C DOM\n            // This is the original behaviour\n            ResultHolder holder = getResultHolder(returnClass);\n            if (holder == null) holder = getResultHolder(Document.class); \n\n            assert(sourceDoc != null);\n            assert(holder != null);\n\n            Transformer idTransformer = TransformerFactory.newInstance().newTransformer();\n            idTransformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n            idTransformer.transform(sourceDoc, holder.getResult());\n\n            Object result = holder.getResultObject();\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","commit_id":"d359f4625fa7a85dc93201716e7c50afc53f0296","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Transform, using XSLT, a XML String to another String.\n     *\n     * @param src The source XML (String, byte[], DOM, etc.)\n     * @return The result String (or DOM)\n     */\n    public synchronized Object doTransform(Object src, String encoding) throws TransformerException {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            ResultHolder holder = getResultHolder(returnClass == null && src != null ? src.getClass() : returnClass);\n           \n            assert(sourceDoc != null);\n\n            DefaultErrorListener errorListener = new DefaultErrorListener(this);\n            transformer.setErrorListener(errorListener);\n            transformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Before transform: \" + convertToText(src));\n            }\n\n            transformer.transform(sourceDoc, holder.getResult());\n            Object result = holder.getResultObject(); \n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"After transform: \" + convertToText(result));\n            }\n\n            if(errorListener.isError()) {\n                throw errorListener.getException();\n            }\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","id":5726,"modified_method":"/**\n     * Transform, using XSLT, a XML String to another String.\n     *\n     * @param src The source XML (String, byte[], DOM, etc.)\n     * @return The result String (or DOM)\n     */\n    public synchronized Object doTransform(Object src, String encoding) throws TransformerException {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            if (sourceDoc == null) return null;\n            \n            ResultHolder holder = getResultHolder(returnClass);\n            if (holder == null) holder = getResultHolder(src.getClass()); \n           \n            DefaultErrorListener errorListener = new DefaultErrorListener(this);\n            transformer.setErrorListener(errorListener);\n            transformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Before transform: \" + convertToText(src));\n            }\n\n            transformer.transform(sourceDoc, holder.getResult());\n            Object result = holder.getResultObject(); \n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"After transform: \" + convertToText(result));\n            }\n\n            if(errorListener.isError()) {\n                throw errorListener.getException();\n            }\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","commit_id":"d359f4625fa7a85dc93201716e7c50afc53f0296","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\r\n     * @param desiredClass Java class representing the desired format\r\n     * @return Callback interface representing the desiredClass - or null\r\n     * if the return class isn't supported.\r\n     */\r\n    protected static ResultHolder getResultHolder(Class desiredClass) {\r\n        if (byte[].class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                ByteArrayOutputStream resultStream = new ByteArrayOutputStream();\r\n                StreamResult result = new StreamResult(resultStream);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return resultStream.toByteArray(); }\r\n            };\r\n        } else if (String.class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                StringWriter writer = new StringWriter();\r\n                StreamResult result = new StreamResult(writer);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return writer.getBuffer().toString(); }\r\n            };\r\n        } else if (org.w3c.dom.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DOMResult result = new DOMResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getNode(); }\r\n            };\r\n        } else if (org.dom4j.io.DocumentResult.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result; }\r\n            };\r\n        } else if (org.dom4j.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getDocument(); }\r\n            };\r\n        }\r\n        return null;\r\n    }","id":5727,"modified_method":"/**\r\n     * @param desiredClass Java class representing the desired format\r\n     * @return Callback interface representing the desiredClass - or null\r\n     * if the return class isn't supported (or is null).\r\n     */\r\n    protected static ResultHolder getResultHolder(Class desiredClass) {\r\n        if (desiredClass == null) return null;\r\n        if (byte[].class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                ByteArrayOutputStream resultStream = new ByteArrayOutputStream();\r\n                StreamResult result = new StreamResult(resultStream);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return resultStream.toByteArray(); }\r\n            };\r\n        } else if (String.class.equals(desiredClass)) {\r\n            return new ResultHolder() {\r\n                StringWriter writer = new StringWriter();\r\n                StreamResult result = new StreamResult(writer);\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return writer.getBuffer().toString(); }\r\n            };\r\n        } else if (org.w3c.dom.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DOMResult result = new DOMResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getNode(); }\r\n            };\r\n        } else if (org.dom4j.io.DocumentResult.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result; }\r\n            };\r\n        } else if (org.dom4j.Document.class.isAssignableFrom(desiredClass)) {\r\n            return new ResultHolder() {\r\n                DocumentResult result = new DocumentResult();\r\n                public Result getResult() { return result; }\r\n                public Object getResultObject() { return result.getDocument(); }\r\n            };\r\n        }\r\n        return null;\r\n    }","commit_id":"38a8dcb180fff675791deaafa9e01dd94492a673","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object doTransform(Object src, String encoding) throws TransformerException\n    {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            // If returnClass is not set, assume W3C DOM\n            // This is the original behaviour\n            ResultHolder holder = getResultHolder(returnClass != null ? returnClass : Document.class);\n\n            assert(sourceDoc != null);\n            assert(holder != null);\n\n            Transformer idTransformer = TransformerFactory.newInstance().newTransformer();\n            idTransformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n            idTransformer.transform(sourceDoc, holder.getResult());\n\n            Object result = holder.getResultObject();\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","id":5728,"modified_method":"public Object doTransform(Object src, String encoding) throws TransformerException\n    {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            if (sourceDoc == null) return null;\n            \n            // If returnClass is not set, assume W3C DOM\n            // This is the original behaviour\n            ResultHolder holder = getResultHolder(returnClass);\n            if (holder == null) holder = getResultHolder(Document.class); \n\n            assert(sourceDoc != null);\n            assert(holder != null);\n\n            Transformer idTransformer = TransformerFactory.newInstance().newTransformer();\n            idTransformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n            idTransformer.transform(sourceDoc, holder.getResult());\n\n            Object result = holder.getResultObject();\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","commit_id":"38a8dcb180fff675791deaafa9e01dd94492a673","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Transform, using XSLT, a XML String to another String.\n     *\n     * @param src The source XML (String, byte[], DOM, etc.)\n     * @return The result String (or DOM)\n     */\n    public synchronized Object doTransform(Object src, String encoding) throws TransformerException {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            ResultHolder holder = getResultHolder(returnClass == null && src != null ? src.getClass() : returnClass);\n           \n            assert(sourceDoc != null);\n\n            DefaultErrorListener errorListener = new DefaultErrorListener(this);\n            transformer.setErrorListener(errorListener);\n            transformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Before transform: \" + convertToText(src));\n            }\n\n            transformer.transform(sourceDoc, holder.getResult());\n            Object result = holder.getResultObject(); \n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"After transform: \" + convertToText(result));\n            }\n\n            if(errorListener.isError()) {\n                throw errorListener.getException();\n            }\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","id":5729,"modified_method":"/**\n     * Transform, using XSLT, a XML String to another String.\n     *\n     * @param src The source XML (String, byte[], DOM, etc.)\n     * @return The result String (or DOM)\n     */\n    public synchronized Object doTransform(Object src, String encoding) throws TransformerException {\n        try {\n            Source sourceDoc = getXmlSource(src);\n            if (sourceDoc == null) return null;\n            \n            ResultHolder holder = getResultHolder(returnClass);\n            if (holder == null) holder = getResultHolder(src.getClass()); \n           \n            DefaultErrorListener errorListener = new DefaultErrorListener(this);\n            transformer.setErrorListener(errorListener);\n            transformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Before transform: \" + convertToText(src));\n            }\n\n            transformer.transform(sourceDoc, holder.getResult());\n            Object result = holder.getResultObject(); \n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"After transform: \" + convertToText(result));\n            }\n\n            if(errorListener.isError()) {\n                throw errorListener.getException();\n            }\n            return result;\n        } catch (Exception e) {\n            throw new TransformerException(this, e);\n        }\n    }","commit_id":"38a8dcb180fff675791deaafa9e01dd94492a673","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong userId = MapUtil.getLong(taskContextMap, \"userId\");\n\t\tString fileName = MapUtil.getString(taskContextMap, \"fileName\");\n\n\t\tlong groupId = MapUtil.getLong(taskContextMap, \"groupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tlong[] layoutIds = GetterUtil.getLongValues(\n\t\t\ttaskContextMap.get(\"layoutIds\"));\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\n\t\tDate lastPublishDate = new Date();\n\n\t\tif (endDate != null) {\n\t\t\tlastPublishDate = endDate;\n\t\t}\n\n\t\tFile larFile = LayoutLocalServiceUtil.exportLayoutsAsFile(\n\t\t\tgroupId, privateLayout, layoutIds, parameterMap, startDate,\n\t\t\tendDate);\n\n\t\tBackgroundTaskLocalServiceUtil.addBackgroundTaskAttachment(\n\t\t\tuserId, backgroundTask.getBackgroundTaskId(), fileName, larFile);\n\n\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\tif (updateLastPublishDate) {\n\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\tgroupId, privateLayout, lastPublishDate);\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","id":5730,"modified_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong userId = MapUtil.getLong(taskContextMap, \"userId\");\n\t\tString fileName = MapUtil.getString(taskContextMap, \"fileName\");\n\n\t\tlong groupId = MapUtil.getLong(taskContextMap, \"groupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tlong[] layoutIds = GetterUtil.getLongValues(\n\t\t\ttaskContextMap.get(\"layoutIds\"));\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\n\t\tFile larFile = LayoutLocalServiceUtil.exportLayoutsAsFile(\n\t\t\tgroupId, privateLayout, layoutIds, parameterMap, startDate,\n\t\t\tendDate);\n\n\t\tBackgroundTaskLocalServiceUtil.addBackgroundTaskAttachment(\n\t\t\tuserId, backgroundTask.getBackgroundTaskId(), fileName, larFile);\n\n\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\tif (updateLastPublishDate) {\n\t\t\tDate lastPublishDate = endDate;\n\n\t\t\tif (lastPublishDate == null) {\n\t\t\t\tlastPublishDate = new Date();\n\t\t\t}\n\n\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\tgroupId, privateLayout, lastPublishDate);\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","commit_id":"a749c94e54dfbe43ae66ec86f318b8266a36acb5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong sourceGroupId = MapUtil.getLong(taskContextMap, \"groupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tMap<Long, Boolean> layoutIdMap = (Map<Long, Boolean>)taskContextMap.get(\n\t\t\t\"layoutIdMap\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tlong remoteGroupId = MapUtil.getLong(taskContextMap, \"remoteGroupId\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\t\tHttpPrincipal httpPrincipal = (HttpPrincipal)taskContextMap.get(\n\t\t\t\"httpPrincipal\");\n\n\t\tclearBackgroundTaskStatus(backgroundTask);\n\n\t\tlong stagingRequestId = 0;\n\n\t\tFile file = null;\n\t\tFileInputStream fileInputStream = null;\n\t\tMissingReferences missingReferences = null;\n\n\t\ttry {\n\t\t\tDate lastPublishDate = new Date();\n\n\t\t\tif (endDate != null) {\n\t\t\t\tlastPublishDate = endDate;\n\t\t\t}\n\n\t\t\tfile = exportLayoutsAsFile(\n\t\t\t\tsourceGroupId, privateLayout, layoutIdMap, parameterMap,\n\t\t\t\tremoteGroupId, startDate, endDate, httpPrincipal);\n\n\t\t\tString checksum = FileUtil.getMD5Checksum(file);\n\n\t\t\tfileInputStream = new FileInputStream(file);\n\n\t\t\tstagingRequestId = StagingServiceHttp.createStagingRequest(\n\t\t\t\thttpPrincipal, remoteGroupId, checksum);\n\n\t\t\tbyte[] bytes =\n\t\t\t\tnew byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];\n\n\t\t\tint i = 0;\n\n\t\t\twhile ((i = fileInputStream.read(bytes)) >= 0) {\n\t\t\t\tif (i < PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE) {\n\t\t\t\t\tbyte[] tempBytes = new byte[i];\n\n\t\t\t\t\tSystem.arraycopy(bytes, 0, tempBytes, 0, i);\n\n\t\t\t\t\tStagingServiceHttp.updateStagingRequest(\n\t\t\t\t\t\thttpPrincipal, stagingRequestId, file.getName(),\n\t\t\t\t\t\ttempBytes);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tStagingServiceHttp.updateStagingRequest(\n\t\t\t\t\t\thttpPrincipal, stagingRequestId, file.getName(), bytes);\n\t\t\t\t}\n\n\t\t\t\tbytes =\n\t\t\t\t\tnew byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];\n\t\t\t}\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"exported\");\n\n\t\t\tmissingReferences = StagingServiceHttp.validateStagingRequest(\n\t\t\t\thttpPrincipal, stagingRequestId, privateLayout, parameterMap);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"validated\");\n\n\t\t\tStagingServiceHttp.publishStagingRequest(\n\t\t\t\thttpPrincipal, stagingRequestId, privateLayout, parameterMap);\n\n\t\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\t\tsourceGroupId, privateLayout, lastPublishDate);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tStreamUtil.cleanUp(fileInputStream);\n\n\t\t\tFileUtil.delete(file);\n\n\t\t\tif (stagingRequestId > 0) {\n\t\t\t\tStagingServiceHttp.cleanUpStagingRequest(\n\t\t\t\t\thttpPrincipal, stagingRequestId);\n\t\t\t}\n\t\t}\n\n\t\treturn processMissingReferences(backgroundTask, missingReferences);\n\t}","id":5731,"modified_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong sourceGroupId = MapUtil.getLong(taskContextMap, \"groupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tMap<Long, Boolean> layoutIdMap = (Map<Long, Boolean>)taskContextMap.get(\n\t\t\t\"layoutIdMap\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tlong remoteGroupId = MapUtil.getLong(taskContextMap, \"remoteGroupId\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\t\tHttpPrincipal httpPrincipal = (HttpPrincipal)taskContextMap.get(\n\t\t\t\"httpPrincipal\");\n\n\t\tclearBackgroundTaskStatus(backgroundTask);\n\n\t\tlong stagingRequestId = 0;\n\n\t\tFile file = null;\n\t\tFileInputStream fileInputStream = null;\n\t\tMissingReferences missingReferences = null;\n\n\t\ttry {\n\t\t\tfile = exportLayoutsAsFile(\n\t\t\t\tsourceGroupId, privateLayout, layoutIdMap, parameterMap,\n\t\t\t\tremoteGroupId, startDate, endDate, httpPrincipal);\n\n\t\t\tString checksum = FileUtil.getMD5Checksum(file);\n\n\t\t\tfileInputStream = new FileInputStream(file);\n\n\t\t\tstagingRequestId = StagingServiceHttp.createStagingRequest(\n\t\t\t\thttpPrincipal, remoteGroupId, checksum);\n\n\t\t\tbyte[] bytes =\n\t\t\t\tnew byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];\n\n\t\t\tint i = 0;\n\n\t\t\twhile ((i = fileInputStream.read(bytes)) >= 0) {\n\t\t\t\tif (i < PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE) {\n\t\t\t\t\tbyte[] tempBytes = new byte[i];\n\n\t\t\t\t\tSystem.arraycopy(bytes, 0, tempBytes, 0, i);\n\n\t\t\t\t\tStagingServiceHttp.updateStagingRequest(\n\t\t\t\t\t\thttpPrincipal, stagingRequestId, file.getName(),\n\t\t\t\t\t\ttempBytes);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tStagingServiceHttp.updateStagingRequest(\n\t\t\t\t\t\thttpPrincipal, stagingRequestId, file.getName(), bytes);\n\t\t\t\t}\n\n\t\t\t\tbytes =\n\t\t\t\t\tnew byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];\n\t\t\t}\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"exported\");\n\n\t\t\tmissingReferences = StagingServiceHttp.validateStagingRequest(\n\t\t\t\thttpPrincipal, stagingRequestId, privateLayout, parameterMap);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"validated\");\n\n\t\t\tStagingServiceHttp.publishStagingRequest(\n\t\t\t\thttpPrincipal, stagingRequestId, privateLayout, parameterMap);\n\n\t\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tDate lastPublishDate = endDate;\n\n\t\t\t\tif (lastPublishDate == null) {\n\t\t\t\t\tlastPublishDate = new Date();\n\t\t\t\t}\n\n\t\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\t\tsourceGroupId, privateLayout, lastPublishDate);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tStreamUtil.cleanUp(fileInputStream);\n\n\t\t\tFileUtil.delete(file);\n\n\t\t\tif (stagingRequestId > 0) {\n\t\t\t\tStagingServiceHttp.cleanUpStagingRequest(\n\t\t\t\t\thttpPrincipal, stagingRequestId);\n\t\t\t}\n\t\t}\n\n\t\treturn processMissingReferences(backgroundTask, missingReferences);\n\t}","commit_id":"a749c94e54dfbe43ae66ec86f318b8266a36acb5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong userId = MapUtil.getLong(taskContextMap, \"userId\");\n\t\tlong targetGroupId = MapUtil.getLong(taskContextMap, \"targetGroupId\");\n\n\t\tStagingUtil.lockGroup(userId, targetGroupId);\n\n\t\tlong sourceGroupId = MapUtil.getLong(taskContextMap, \"sourceGroupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tlong[] layoutIds = GetterUtil.getLongValues(\n\t\t\ttaskContextMap.get(\"layoutIds\"));\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\n\t\tclearBackgroundTaskStatus(backgroundTask);\n\n\t\tFile file = null;\n\t\tMissingReferences missingReferences = null;\n\n\t\ttry {\n\t\t\tDate lastPublishDate = new Date();\n\n\t\t\tif (endDate != null) {\n\t\t\t\tlastPublishDate = endDate;\n\t\t\t}\n\n\t\t\tfile = LayoutLocalServiceUtil.exportLayoutsAsFile(\n\t\t\t\tsourceGroupId, privateLayout, layoutIds, parameterMap,\n\t\t\t\tstartDate, endDate);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"exported\");\n\n\t\t\tmissingReferences =\n\t\t\t\tLayoutLocalServiceUtil.validateImportLayoutsFile(\n\t\t\t\t\tuserId, targetGroupId, privateLayout, parameterMap, file);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"validated\");\n\n\t\t\tLayoutLocalServiceUtil.importLayouts(\n\t\t\t\tuserId, targetGroupId, privateLayout, parameterMap, file);\n\n\t\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\t\tsourceGroupId, privateLayout, lastPublishDate);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tFileUtil.delete(file);\n\n\t\t\tStagingUtil.unlockGroup(targetGroupId);\n\t\t}\n\n\t\treturn processMissingReferences(backgroundTask, missingReferences);\n\t}","id":5732,"modified_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tMap<String, Serializable> taskContextMap =\n\t\t\tbackgroundTask.getTaskContextMap();\n\n\t\tlong userId = MapUtil.getLong(taskContextMap, \"userId\");\n\t\tlong targetGroupId = MapUtil.getLong(taskContextMap, \"targetGroupId\");\n\n\t\tStagingUtil.lockGroup(userId, targetGroupId);\n\n\t\tlong sourceGroupId = MapUtil.getLong(taskContextMap, \"sourceGroupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\ttaskContextMap, \"privateLayout\");\n\t\tlong[] layoutIds = GetterUtil.getLongValues(\n\t\t\ttaskContextMap.get(\"layoutIds\"));\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)taskContextMap.get(\"parameterMap\");\n\t\tDate startDate = (Date)taskContextMap.get(\"startDate\");\n\t\tDate endDate = (Date)taskContextMap.get(\"endDate\");\n\n\t\tclearBackgroundTaskStatus(backgroundTask);\n\n\t\tFile file = null;\n\t\tMissingReferences missingReferences = null;\n\n\t\ttry {\n\t\t\tfile = LayoutLocalServiceUtil.exportLayoutsAsFile(\n\t\t\t\tsourceGroupId, privateLayout, layoutIds, parameterMap,\n\t\t\t\tstartDate, endDate);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"exported\");\n\n\t\t\tmissingReferences =\n\t\t\t\tLayoutLocalServiceUtil.validateImportLayoutsFile(\n\t\t\t\t\tuserId, targetGroupId, privateLayout, parameterMap, file);\n\n\t\t\tbackgroundTask = markBackgroundTask(backgroundTask, \"validated\");\n\n\t\t\tLayoutLocalServiceUtil.importLayouts(\n\t\t\t\tuserId, targetGroupId, privateLayout, parameterMap, file);\n\n\t\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tDate lastPublishDate = endDate;\n\n\t\t\t\tif (lastPublishDate == null) {\n\t\t\t\t\tlastPublishDate = new Date();\n\t\t\t\t}\n\n\t\t\t\tStagingUtil.updateLastPublishDate(\n\t\t\t\t\tsourceGroupId, privateLayout, lastPublishDate);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tFileUtil.delete(file);\n\n\t\t\tStagingUtil.unlockGroup(targetGroupId);\n\t\t}\n\n\t\treturn processMissingReferences(backgroundTask, missingReferences);\n\t}","commit_id":"a749c94e54dfbe43ae66ec86f318b8266a36acb5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static String _discoverPingbackServer(String targetUri) {\n\t\tString serverUri = null;\n\n\t\ttry {\n\t\t\tHttp.Options options = new Http.Options();\n\n\t\t\toptions.addHeader(\n\t\t\t\tHttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\t\toptions.setLocation(targetUri);\n\t\t\toptions.setHead(true);\n\n\t\t\tHttpUtil.URLtoByteArray(options);\n\n\t\t\tHttp.Response response = options.getResponse();\n\n\t\t\tserverUri = response.getHeader(\"X-Pingback\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Unable to call HEAD of \" + targetUri, e);\n\t\t}\n\n\t\tif (Validator.isNull(serverUri)) {\n\t\t\ttry {\n\t\t\t\tSource clientSource = new Source(\n\t\t\t\t\tHttpUtil.URLtoString(targetUri));\n\n\t\t\t\tList<StartTag> startTags = clientSource.getAllStartTags(\"link\");\n\n\t\t\t\tfor (StartTag startTag : startTags) {\n\t\t\t\t\tString rel = startTag.getAttributeValue(\"rel\");\n\n\t\t\t\t\tif (rel.equalsIgnoreCase(\"pingback\")) {\n\t\t\t\t\t\tString href = startTag.getAttributeValue(\"href\");\n\n\t\t\t\t\t\tserverUri = HtmlUtil.escape(href);\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(\"Unable to call GET of \" + targetUri, e);\n\t\t\t}\n\t\t}\n\n\t\treturn serverUri;\n\t}","id":5733,"modified_method":"private static String _discoverPingbackServer(String targetUri) {\n\t\tString serverUri = null;\n\n\t\ttry {\n\t\t\tHttp.Options options = new Http.Options();\n\n\t\t\tif (_HTTP_HEADER_VERSION_VERBOSITY_DEFAULT) {\n\t\t\t}\n\t\t\telse if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) {\n\t\t\t\toptions.addHeader(\n\t\t\t\t\tHttpHeaders.USER_AGENT, ReleaseInfo.getName());\n\t\t\t}\n\t\t\telse {\n\t\t\t\toptions.addHeader(\n\t\t\t\t\tHttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\t\t}\n\n\t\t\toptions.setLocation(targetUri);\n\t\t\toptions.setHead(true);\n\n\t\t\tHttpUtil.URLtoByteArray(options);\n\n\t\t\tHttp.Response response = options.getResponse();\n\n\t\t\tserverUri = response.getHeader(\"X-Pingback\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(\"Unable to call HEAD of \" + targetUri, e);\n\t\t}\n\n\t\tif (Validator.isNull(serverUri)) {\n\t\t\ttry {\n\t\t\t\tSource clientSource = new Source(\n\t\t\t\t\tHttpUtil.URLtoString(targetUri));\n\n\t\t\t\tList<StartTag> startTags = clientSource.getAllStartTags(\"link\");\n\n\t\t\t\tfor (StartTag startTag : startTags) {\n\t\t\t\t\tString rel = startTag.getAttributeValue(\"rel\");\n\n\t\t\t\t\tif (rel.equalsIgnoreCase(\"pingback\")) {\n\t\t\t\t\t\tString href = startTag.getAttributeValue(\"href\");\n\n\t\t\t\t\t\tserverUri = HtmlUtil.escape(href);\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(\"Unable to call GET of \" + targetUri, e);\n\t\t\t}\n\t\t}\n\n\t\treturn serverUri;\n\t}","commit_id":"d01af6da6443be28effc8f8ff56f5634a36125ee","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static boolean sendTrackback(\n\t\t\tString trackback, Map<String, String> parts)\n\t\tthrows Exception {\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Pinging trackback \" + trackback);\n\t\t}\n\n\t\tHttp.Options options = new Http.Options();\n\n\t\toptions.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\toptions.setLocation(trackback);\n\t\toptions.setParts(parts);\n\t\toptions.setPost(true);\n\n\t\tString xml = HttpUtil.URLtoString(options);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(xml);\n\t\t}\n\n\t\tString error = xml;\n\n\t\tXMLStreamReader xmlStreamReader = null;\n\n\t\ttry {\n\t\t\tXMLInputFactory xmlInputFactory =\n\t\t\t\tStAXReaderUtil.getXMLInputFactory();\n\n\t\t\txmlStreamReader = xmlInputFactory.createXMLStreamReader(\n\t\t\t\tnew UnsyncStringReader(xml));\n\n\t\t\txmlStreamReader.nextTag();\n\t\t\txmlStreamReader.nextTag();\n\n\t\t\tString name = xmlStreamReader.getLocalName();\n\n\t\t\tif (name.equals(\"error\")) {\n\t\t\t\tint status = GetterUtil.getInteger(\n\t\t\t\t\txmlStreamReader.getElementText(), 1);\n\n\t\t\t\tif (status == 0) {\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\"Trackback accepted\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\txmlStreamReader.nextTag();\n\n\t\t\t\tname = xmlStreamReader.getLocalName();\n\n\t\t\t\tif (name.equals(\"message\")) {\n\t\t\t\t\terror = xmlStreamReader.getElementText();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (xmlStreamReader != null) {\n\t\t\t\ttry {\n\t\t\t\t\txmlStreamReader.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_log.error(\n\t\t\t\"Error while pinging trackback at \" + trackback + \": \" + error);\n\n\t\treturn false;\n\t}","id":5734,"modified_method":"public static boolean sendTrackback(\n\t\t\tString trackback, Map<String, String> parts)\n\t\tthrows Exception {\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Pinging trackback \" + trackback);\n\t\t}\n\n\t\tHttp.Options options = new Http.Options();\n\n\t\tif (_HTTP_HEADER_VERSION_VERBOSITY_DEFAULT) {\n\t\t}\n\t\telse if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) {\n\t\t\toptions.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getName());\n\t\t}\n\t\telse {\n\t\t\toptions.addHeader(\n\t\t\t\tHttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\t}\n\t\toptions.setLocation(trackback);\n\t\toptions.setParts(parts);\n\t\toptions.setPost(true);\n\n\t\tString xml = HttpUtil.URLtoString(options);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(xml);\n\t\t}\n\n\t\tString error = xml;\n\n\t\tXMLStreamReader xmlStreamReader = null;\n\n\t\ttry {\n\t\t\tXMLInputFactory xmlInputFactory =\n\t\t\t\tStAXReaderUtil.getXMLInputFactory();\n\n\t\t\txmlStreamReader = xmlInputFactory.createXMLStreamReader(\n\t\t\t\tnew UnsyncStringReader(xml));\n\n\t\t\txmlStreamReader.nextTag();\n\t\t\txmlStreamReader.nextTag();\n\n\t\t\tString name = xmlStreamReader.getLocalName();\n\n\t\t\tif (name.equals(\"error\")) {\n\t\t\t\tint status = GetterUtil.getInteger(\n\t\t\t\t\txmlStreamReader.getElementText(), 1);\n\n\t\t\t\tif (status == 0) {\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\"Trackback accepted\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\txmlStreamReader.nextTag();\n\n\t\t\t\tname = xmlStreamReader.getLocalName();\n\n\t\t\t\tif (name.equals(\"message\")) {\n\t\t\t\t\terror = xmlStreamReader.getElementText();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (xmlStreamReader != null) {\n\t\t\t\ttry {\n\t\t\t\t\txmlStreamReader.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_log.error(\n\t\t\t\"Error while pinging trackback at \" + trackback + \": \" + error);\n\n\t\treturn false;\n\t}","commit_id":"d01af6da6443be28effc8f8ff56f5634a36125ee","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Response doExecuteMethod(\n\t\t\tString url, String methodName, Object[] arguments)\n\t\tthrows Exception {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"XML-RPC invoking \" + methodName + \" \");\n\n\t\t\tif (arguments != null) {\n\t\t\t\tfor (int i = 0; i < arguments.length; i++) {\n\t\t\t\t\tsb.append(arguments[i]);\n\n\t\t\t\t\tif (i < arguments.length - 1) {\n\t\t\t\t\t\tsb.append(\", \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_log.debug(sb.toString());\n\t\t}\n\n\t\tString requestXML = XmlRpcParser.buildMethod(methodName, arguments);\n\n\t\tHttp.Options options = new Http.Options();\n\n\t\toptions.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\toptions.setBody(requestXML, ContentTypes.TEXT_XML, StringPool.UTF8);\n\t\toptions.setLocation(url);\n\t\toptions.setPost(true);\n\n\t\tString responseXML = HttpUtil.URLtoString(options);\n\n\t\treturn XmlRpcParser.parseResponse(responseXML);\n\t}","id":5735,"modified_method":"protected Response doExecuteMethod(\n\t\t\tString url, String methodName, Object[] arguments)\n\t\tthrows Exception {\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"XML-RPC invoking \" + methodName + \" \");\n\n\t\t\tif (arguments != null) {\n\t\t\t\tfor (int i = 0; i < arguments.length; i++) {\n\t\t\t\t\tsb.append(arguments[i]);\n\n\t\t\t\t\tif (i < arguments.length - 1) {\n\t\t\t\t\t\tsb.append(\", \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_log.debug(sb.toString());\n\t\t}\n\n\t\tString requestXML = XmlRpcParser.buildMethod(methodName, arguments);\n\n\t\tHttp.Options options = new Http.Options();\n\n\t\tif (_HTTP_HEADER_VERSION_VERBOSITY_DEFAULT) {\n\t\t}\n\t\telse if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) {\n\t\t\toptions.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getName());\n\t\t}\n\t\telse {\n\t\t\toptions.addHeader(\n\t\t\t\tHttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo());\n\t\t}\n\n\t\toptions.setBody(requestXML, ContentTypes.TEXT_XML, StringPool.UTF8);\n\t\toptions.setLocation(url);\n\t\toptions.setPost(true);\n\n\t\tString responseXML = HttpUtil.URLtoString(options);\n\n\t\treturn XmlRpcParser.parseResponse(responseXML);\n\t}","commit_id":"d01af6da6443be28effc8f8ff56f5634a36125ee","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private boolean needprocessMVBasedQueryFix() {\n        // Check valiad cases first\n\n        Table mvTable = tableList.get(0);\n        String mvTableName = mvTable.getTypeName();\n        Table srcTable = mvTable.getMaterializer();\n        if (srcTable == null) {\n            return false;\n        }\n\n        if (tableList.size() != 1) {\n            String errorMsg = String.format(\"Unsupported query joined with materialized table %s\", mvTableName);\n            throw new PlanningErrorException(errorMsg);\n        }\n\n        Column partitionCol = srcTable.getPartitioncolumn();\n        if (partitionCol == null) {\n            return false;\n        }\n        String partitionColName = partitionCol.getName();\n        MaterializedViewInfo mvInfo = srcTable.getViews().get(mvTableName);\n\n        // Justify whether partition column is in group by column list or not\n        boolean partitionColInGroupbyCols = false;\n        String complexGroupbyJson = mvInfo.getGroupbyexpressionsjson();\n        if (complexGroupbyJson.length() > 0) {\n            List<AbstractExpression> mvComplexGroupbyCols = null;\n            try {\n                mvComplexGroupbyCols =\n                        AbstractExpression.fromJSONArrayString(complexGroupbyJson, m_db);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            mvFixInfo.numOfGroupByColumns = mvComplexGroupbyCols.size();\n\n            for (AbstractExpression expr: mvComplexGroupbyCols) {\n                if (expr instanceof TupleValueExpression) {\n                    TupleValueExpression tve = (TupleValueExpression) expr;\n                    if (tve.getColumnName().equals(partitionColName)) {\n                        partitionColInGroupbyCols = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            CatalogMap<ColumnRef> mvSimpleGroupbyCols = mvInfo.getGroupbycols();\n            mvFixInfo.numOfGroupByColumns = mvSimpleGroupbyCols.size();\n\n            for (ColumnRef colRef: mvSimpleGroupbyCols) {\n                if (colRef.getColumn().getName().equals(partitionColName)) {\n                    partitionColInGroupbyCols = true;\n                    break;\n                }\n            }\n        }\n        if (partitionColInGroupbyCols) {\n            // Group by columns contain partition column from source table.\n            // Then, query on mv table will have duplicates from each partition.\n            // There is no need to fix this case, so just return.\n            return false;\n        }\n\n        if (!isGrouped() && hasAggregateExpression) {\n            if (displayColumns.size() == 1) {\n                // TODO(xin): optimize it later.\n                // currently, do not fix COUNT(*) query.\n                if (displayColumns.get(0).expression.getExpressionType()\n                        == ExpressionType.AGGREGATE_COUNT_STAR) {\n                    return false;\n                }\n            }\n        }\n\n        mvFixInfo.mvTable = mvTable;\n        mvFixInfo.mayNeedFixMVBasedDistributedQuery = true;\n        return true;\n    }","id":5736,"modified_method":"private boolean needprocessMVBasedQueryFix() {\n        // Check valiad cases first\n\n        Table mvTable = tableList.get(0);\n        String mvTableName = mvTable.getTypeName();\n        Table srcTable = mvTable.getMaterializer();\n        if (srcTable == null) {\n            return false;\n        }\n\n//        if (tableList.size() != 1) {\n//            String errorMsg = String.format(\"Unsupported query joined with materialized table %s\", mvTableName);\n//            //throw new PlanningErrorException(errorMsg);\n//        }\n//\n//        AbstractExpression whereExpr = getSingleTableFilterExpression();\n//        if (whereExpr != null) {\n//            String errorMsg = String.format(\"Unsupported query materialized table %s has filter on the table\", mvTableName);\n//            //throw new PlanningErrorException(errorMsg);\n//        }\n\n        Column partitionCol = srcTable.getPartitioncolumn();\n        if (partitionCol == null) {\n            return false;\n        }\n        String partitionColName = partitionCol.getName();\n        MaterializedViewInfo mvInfo = srcTable.getViews().get(mvTableName);\n\n        // Justify whether partition column is in group by column list or not\n        boolean partitionColInGroupbyCols = false;\n        String complexGroupbyJson = mvInfo.getGroupbyexpressionsjson();\n        if (complexGroupbyJson.length() > 0) {\n            List<AbstractExpression> mvComplexGroupbyCols = null;\n            try {\n                mvComplexGroupbyCols =\n                        AbstractExpression.fromJSONArrayString(complexGroupbyJson, m_db);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            mvFixInfo.numOfGroupByColumns = mvComplexGroupbyCols.size();\n\n            for (AbstractExpression expr: mvComplexGroupbyCols) {\n                if (expr instanceof TupleValueExpression) {\n                    TupleValueExpression tve = (TupleValueExpression) expr;\n                    if (tve.getColumnName().equals(partitionColName)) {\n                        partitionColInGroupbyCols = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            CatalogMap<ColumnRef> mvSimpleGroupbyCols = mvInfo.getGroupbycols();\n            mvFixInfo.numOfGroupByColumns = mvSimpleGroupbyCols.size();\n\n            for (ColumnRef colRef: mvSimpleGroupbyCols) {\n                if (colRef.getColumn().getName().equals(partitionColName)) {\n                    partitionColInGroupbyCols = true;\n                    break;\n                }\n            }\n        }\n        if (partitionColInGroupbyCols) {\n            // Group by columns contain partition column from source table.\n            // Then, query on mv table will have duplicates from each partition.\n            // There is no need to fix this case, so just return.\n            return false;\n        }\n\n        if (!isGrouped() && hasAggregateExpression) {\n            if (displayColumns.size() == 1) {\n                // TODO(xin): optimize it later.\n                // currently, do not fix COUNT(*) query.\n                if (displayColumns.get(0).expression.getExpressionType()\n                        == ExpressionType.AGGREGATE_COUNT_STAR) {\n                    return false;\n                }\n            }\n        }\n\n        mvFixInfo.mvTable = mvTable;\n        mvFixInfo.mayNeedFixMVBasedDistributedQuery = true;\n        return true;\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMultiPartitionMVBasedQuery_NoAggQuery() {\n//        CREATE VIEW V_P1 (V_A1, V_B1, V_CNT, V_SUM_C1, V_SUM_D1)\n//        AS SELECT A1, B1, COUNT(*), SUM(C1), COUNT(D1)\n//        FROM P1  GROUP BY A1, B1;\n\n        pns = compileToFragments(\"SELECT * FROM V_P1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3); // 5 (# of select) - 2 (# of group-by)\n\n        pns = compileToFragments(\"SELECT * FROM V_P1 order by V_A1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n        pns = compileToFragments(\"SELECT * FROM V_P1 order by V_A1, V_B1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n        pns = compileToFragments(\"SELECT * FROM V_P1 order by V_SUM_D1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n        pns = compileToFragments(\"SELECT * FROM V_P1 limit 1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n        pns = compileToFragments(\"SELECT * FROM V_P1 order by V_A1, V_B1 limit 1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n        pns = compileToFragments(\"SELECT v_sum_c1 FROM V_P1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n        pns = compileToFragments(\"SELECT v_sum_c1 FROM V_P1 order by v_sum_c1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n        pns = compileToFragments(\"SELECT v_sum_c1 FROM V_P1 order by v_sum_d1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n        pns = compileToFragments(\"SELECT v_sum_c1 FROM V_P1 limit 1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n        pns = compileToFragments(\"SELECT v_sum_c1 FROM V_P1 order by v_sum_c1 limit 1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n        // test distinct down.\n        pns = compileToFragments(\"SELECT distinct v_sum_c1 FROM V_P1 limit 1\");\n        checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n    }","id":5737,"modified_method":"public void testMultiPartitionMVBasedQuery_NoAggQuery() {\n//        CREATE VIEW V_P1 (V_A1, V_B1, V_CNT, V_SUM_C1, V_SUM_D1)\n//        AS SELECT A1, B1, COUNT(*), SUM(C1), COUNT(D1)\n//        FROM P1  GROUP BY A1, B1;\n\n        String[] tbs = {\"V_P1\", \"V_P1_ABS\"};\n        for (String tb: tbs) {\n            pns = compileToFragments(\"SELECT * FROM \" + tb);\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3); // 5 (# of select) - 2 (# of group-by)\n\n            pns = compileToFragments(\"SELECT * FROM \" + tb + \" order by V_A1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n            pns = compileToFragments(\"SELECT * FROM \" + tb + \" order by V_A1, V_B1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n            pns = compileToFragments(\"SELECT * FROM \" + tb + \" order by V_SUM_D1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n            pns = compileToFragments(\"SELECT * FROM \" + tb + \" limit 1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n            pns = compileToFragments(\"SELECT * FROM \" + tb + \" order by V_A1, V_B1 limit 1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 3);\n\n            pns = compileToFragments(\"SELECT v_sum_c1 FROM \" + tb + \"\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n            pns = compileToFragments(\"SELECT v_sum_c1 FROM \" + tb + \" order by v_sum_c1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n            pns = compileToFragments(\"SELECT v_sum_c1 FROM \" + tb + \" order by v_sum_d1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n            pns = compileToFragments(\"SELECT v_sum_c1 FROM \" + tb + \" limit 1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n            pns = compileToFragments(\"SELECT v_sum_c1 FROM \" + tb + \" order by v_sum_c1 limit 1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n\n            // test distinct down.\n            pns = compileToFragments(\"SELECT distinct v_sum_c1 FROM \" + tb + \" limit 1\");\n            checkMVReaggreateFeatureNoBottomAgg(pns, 2, 1);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void checkMVReaggreateFeatureAggPushdown(List<AbstractPlanNode> pns,\n            int numOfGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode,\n            int numOfGroupbyOfAggNode, int numAggsOfAggNode) {\n\n        checkMVReaggreateFeature(pns,\n                numOfGroupbyOfTopAggNode, numAggsOfTopAggNode,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                numOfGroupbyOfAggNode, numAggsOfAggNode,\n                true, false);\n    }","id":5738,"modified_method":"private void checkMVReaggreateFeatureAggPushdown(List<AbstractPlanNode> pns,\n            int numGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode,\n            int numGroupbyOfAggNode, int numAggsOfAggNode) {\n\n        checkMVReaggreateFeature(pns,\n                numGroupbyOfTopAggNode, numAggsOfTopAggNode,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                numGroupbyOfAggNode, numAggsOfAggNode,\n                true, false, true);\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void checkMVReaggreateFeatureAggPushdownFalse(List<AbstractPlanNode> pns,\n            int numOfGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode) {\n\n        checkMVReaggreateFeature(pns,\n                numOfGroupbyOfTopAggNode, numAggsOfTopAggNode,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                -1, -1, // never used these two numbers for this case.\n                false, false);\n    }","id":5739,"modified_method":"private void checkMVReaggreateFeatureAggPushdownFalse(List<AbstractPlanNode> pns,\n            int numGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode) {\n\n        checkMVReaggreateFeature(pns,\n                numGroupbyOfTopAggNode, numAggsOfTopAggNode,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                -1, -1, // never used these two numbers for this case.\n                false, false, true);\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void checkMVReaggreateFeatureNoBottomAgg(List<AbstractPlanNode> pns,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode) {\n        // the first '-1' indicates that there is no top aggregation node.\n        checkMVReaggreateFeature(pns, -1, -1,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                -1, -1, false, false);\n    }","id":5740,"modified_method":"private void checkMVReaggreateFeatureNoBottomAgg(List<AbstractPlanNode> pns,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode) {\n        // the first '-1' indicates that there is no top aggregation node.\n        checkMVReaggreateFeature(pns, -1, -1,\n                numGroupbyOfReaggNode, numAggsOfReaggNode,\n                -1, -1, false, false, true);\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void checkMVReaggreateFeature(List<AbstractPlanNode> pns,\n            int numOfGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode,\n            int numOfGroupbyOfAggNode, int numAggsOfAggNode,\n            boolean aggPushdown, boolean distinctPushdown) {\n\n        for (AbstractPlanNode apn: pns) {\n            System.out.println(apn.toExplainPlanString());\n        }\n        assertTrue(pns.size() == 2);\n        AbstractPlanNode p = pns.get(0);\n        assertTrue(p instanceof SendPlanNode);\n        p = p.getChild(0);\n\n        if (p instanceof LimitPlanNode) {\n            // No limit pushed down.\n            p = p.getChild(0);\n        }\n        assertTrue(p instanceof ProjectionPlanNode);\n        p = p.getChild(0);\n\n        if (p instanceof OrderByPlanNode) {\n            p = p.getChild(0);\n        }\n        if (p instanceof DistinctPlanNode) {\n            p = p.getChild(0);\n        }\n\n        HashAggregatePlanNode reAggNode = null;\n\n        // Indicates that there is no top aggregation node.\n        if (numOfGroupbyOfTopAggNode == -1 ) {\n            assertTrue(p instanceof HashAggregatePlanNode);\n            reAggNode = (HashAggregatePlanNode) p;\n\n            assertEquals(numGroupbyOfReaggNode, reAggNode.getGroExpressionTypes().size());\n            assertEquals(numAggsOfReaggNode, reAggNode.getAggregateTypes().size());\n\n            for (ExpressionType type: reAggNode.getAggregateTypes()) {\n                assertEquals(ExpressionType.AGGREGATE_SUM, type);\n            }\n            assertTrue(reAggNode.getChild(0) instanceof ReceivePlanNode);\n\n            p = pns.get(1).getChild(0);\n            if (distinctPushdown) {\n                assertTrue(p instanceof DistinctPlanNode);\n                p = p.getChild(0);\n            }\n            assertTrue(p instanceof AbstractScanPlanNode);\n        } else {\n            assertTrue(p instanceof AggregatePlanNode);\n            AggregatePlanNode topAggNode = (AggregatePlanNode) p;\n\n            assertEquals(numOfGroupbyOfTopAggNode, topAggNode.getGroExpressionTypes().size());\n            assertEquals(numAggsOfTopAggNode, topAggNode.getAggregateTypes().size());\n\n            assertTrue(p.getChild(0) instanceof HashAggregatePlanNode);\n            reAggNode = (HashAggregatePlanNode) p.getChild(0);\n\n            assertEquals(numGroupbyOfReaggNode, reAggNode.getGroExpressionTypes().size());\n            assertEquals(numAggsOfReaggNode, reAggNode.getAggregateTypes().size());\n\n            for (ExpressionType type: reAggNode.getAggregateTypes()) {\n                assertEquals(ExpressionType.AGGREGATE_SUM, type);\n            }\n            assertTrue(reAggNode.getChild(0) instanceof ReceivePlanNode);\n\n            // Test the second part\n            p = pns.get(1);\n            assertTrue(p instanceof SendPlanNode);\n            p = pns.get(1).getChild(0);\n\n            if (aggPushdown) {\n                assertTrue(p instanceof AggregatePlanNode);\n                AggregatePlanNode aggNode = (AggregatePlanNode) p;\n                assertEquals(numOfGroupbyOfAggNode, aggNode.getGroExpressionTypes().size());\n                assertEquals(numAggsOfAggNode, aggNode.getAggregateTypes().size());\n                p = p.getChild(0);\n            }\n\n            assertTrue(p instanceof AbstractScanPlanNode);\n        }\n    }","id":5741,"modified_method":"private void checkMVReaggreateFeature(List<AbstractPlanNode> pns,\n            int numGroupbyOfTopAggNode, int numAggsOfTopAggNode,\n            int numGroupbyOfReaggNode, int numAggsOfReaggNode,\n            int numGroupbyOfAggNode, int numAggsOfAggNode,\n            boolean aggPushdown, boolean distinctPushdown, boolean needFix) {\n\n        for (AbstractPlanNode apn: pns) {\n            System.out.println(apn.toExplainPlanString());\n        }\n        assertTrue(pns.size() == 2);\n        AbstractPlanNode p = pns.get(0);\n        assertTrue(p instanceof SendPlanNode);\n        p = p.getChild(0);\n\n        if (p instanceof LimitPlanNode) {\n            // No limit pushed down.\n            p = p.getChild(0);\n        }\n        if (needFix || !aggPushdown) {\n            // No projection node for no-need fixed group by query\n            assertTrue(p instanceof ProjectionPlanNode);\n            p = p.getChild(0);\n        }\n\n        if (p instanceof OrderByPlanNode) {\n            p = p.getChild(0);\n        }\n        if (p instanceof DistinctPlanNode) {\n            p = p.getChild(0);\n        }\n\n        HashAggregatePlanNode reAggNode = null;\n\n        // Indicates that there is no top aggregation node.\n        if (numGroupbyOfTopAggNode == -1 ) {\n            if (needFix) {\n                assertTrue(p instanceof HashAggregatePlanNode);\n                reAggNode = (HashAggregatePlanNode) p;\n\n                assertEquals(numGroupbyOfReaggNode, reAggNode.getGroExpressionTypes().size());\n                assertEquals(numAggsOfReaggNode, reAggNode.getAggregateTypes().size());\n\n                for (ExpressionType type: reAggNode.getAggregateTypes()) {\n                    assertEquals(ExpressionType.AGGREGATE_SUM, type);\n                }\n                p = p.getChild(0);\n            }\n            assertTrue(p instanceof ReceivePlanNode);\n\n            p = pns.get(1).getChild(0);\n            if (distinctPushdown) {\n                assertTrue(p instanceof DistinctPlanNode);\n                p = p.getChild(0);\n            }\n            assertTrue(p instanceof AbstractScanPlanNode);\n        } else {\n            assertTrue(p instanceof AggregatePlanNode);\n            AggregatePlanNode topAggNode = (AggregatePlanNode) p;\n\n            assertEquals(numGroupbyOfTopAggNode, topAggNode.getGroExpressionTypes().size());\n            assertEquals(numAggsOfTopAggNode, topAggNode.getAggregateTypes().size());\n            p = p.getChild(0);\n\n            if (needFix) {\n                assertTrue(p instanceof HashAggregatePlanNode);\n                reAggNode = (HashAggregatePlanNode) p;\n\n                assertEquals(numGroupbyOfReaggNode, reAggNode.getGroExpressionTypes().size());\n                assertEquals(numAggsOfReaggNode, reAggNode.getAggregateTypes().size());\n\n                for (ExpressionType type: reAggNode.getAggregateTypes()) {\n                    assertEquals(ExpressionType.AGGREGATE_SUM, type);\n                }\n                p = p.getChild(0);\n            }\n            assertTrue(p instanceof ReceivePlanNode);\n\n            // Test the second part\n            p = pns.get(1);\n            assertTrue(p instanceof SendPlanNode);\n            p = pns.get(1).getChild(0);\n\n            if (aggPushdown) {\n                assertTrue(p instanceof AggregatePlanNode);\n                AggregatePlanNode aggNode = (AggregatePlanNode) p;\n                assertEquals(numGroupbyOfAggNode, aggNode.getGroExpressionTypes().size());\n                assertEquals(numAggsOfAggNode, aggNode.getAggregateTypes().size());\n                p = p.getChild(0);\n            }\n            assertTrue(p instanceof AbstractScanPlanNode);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMultiPartitionMVBasedQuery_AggQuery() {\n//      CREATE VIEW V_P1 (V_A1, V_B1, V_CNT, V_SUM_C1, V_SUM_D1)\n//      AS SELECT A1, B1, COUNT(*), SUM(C1), COUNT(D1)\n//      FROM P1  GROUP BY A1, B1;\n\n        // Test set (1)\n        pns = compileToFragments(\"SELECT V_SUM_C1 FROM V_P1 GROUP by V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n        pns = compileToFragments(\"SELECT V_SUM_C1 FROM V_P1 GROUP by V_SUM_C1 \" +\n                \"ORDER BY V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n        pns = compileToFragments(\"SELECT V_SUM_C1 FROM V_P1 GROUP by V_SUM_C1 \" +\n                \"ORDER BY V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n        pns = compileToFragments(\"SELECT V_SUM_C1 FROM V_P1 GROUP by V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n        pns = compileToFragments(\"SELECT distinct V_SUM_C1 FROM V_P1 GROUP by V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n        // Test set (2)\n        pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM V_P1 GROUP by V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n        pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM V_P1 \" +\n                \"GROUP by V_SUM_C1 ORDER BY V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n        pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM V_P1 \" +\n                \"GROUP by V_SUM_C1 ORDER BY V_SUM_C1 limit 2\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n        // Distinct: No aggregation push down.\n        pns = compileToFragments(\"SELECT V_SUM_C1, sum(distinct V_CNT) \" +\n                \"FROM V_P1 GROUP by V_SUM_C1 ORDER BY V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdownFalse(pns, 3, 1, 2, 2);\n\n\n        // Test set (3)\n        pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM V_P1 \" +\n                \"GROUP BY V_A1,V_B1, V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n        pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM V_P1 \" +\n                \"GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1,V_B1, V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n        pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM V_P1 \" +\n                \"GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1,V_B1, V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n        pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM V_P1 \" +\n                \"GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1, V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n        // Distinct: No aggregation push down.\n        pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum( distinct V_SUM_D1) FROM V_P1 \" +\n                \"GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1, V_SUM_C1 LIMIT 5\");\n        checkMVReaggreateFeatureAggPushdownFalse(pns, 3, 1, 2, 2);\n\n    }","id":5742,"modified_method":"public void testMultiPartitionMVBasedQuery_AggQuery() {\n//      CREATE VIEW V_P1 (V_A1, V_B1, V_CNT, V_SUM_C1, V_SUM_D1)\n//      AS SELECT A1, B1, COUNT(*), SUM(C1), COUNT(D1)\n//      FROM P1  GROUP BY A1, B1;\n\n        String[] tbs = {\"V_P1\", \"V_P1_ABS\"};\n\n        for (String tb: tbs) {\n            // Test set (1)\n            pns = compileToFragments(\"SELECT V_SUM_C1 FROM \" + tb +\n                    \" GROUP by V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n            pns = compileToFragments(\"SELECT V_SUM_C1 FROM \" + tb +\n                    \" GROUP by V_SUM_C1 ORDER BY V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n            pns = compileToFragments(\"SELECT V_SUM_C1 FROM \" + tb + \" GROUP by V_SUM_C1 \" +\n                    \"ORDER BY V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n            pns = compileToFragments(\"SELECT V_SUM_C1 FROM \" + tb +\n                    \" GROUP by V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n            pns = compileToFragments(\"SELECT distinct V_SUM_C1 FROM \" + tb +\n                    \" GROUP by V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n            // Test set (2)\n            pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM \" + tb +\n                    \" GROUP by V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n            pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM \" + tb +\n                    \" GROUP by V_SUM_C1 ORDER BY V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n            pns = compileToFragments(\"SELECT V_SUM_C1, sum(V_CNT) FROM \" + tb +\n                    \" GROUP by V_SUM_C1 ORDER BY V_SUM_C1 limit 2\");\n            checkMVReaggreateFeatureAggPushdown(pns, 1, 1, 2, 2, 3, 1);\n\n            // Distinct: No aggregation push down.\n            pns = compileToFragments(\"SELECT V_SUM_C1, sum(distinct V_CNT) \" +\n                    \"FROM \" + tb + \" GROUP by V_SUM_C1 ORDER BY V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdownFalse(pns, 3, 1, 2, 2);\n\n\n            // Test set (3)\n            pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM \" + tb +\n                    \" GROUP BY V_A1,V_B1, V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n            pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM \" + tb +\n                    \" GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1,V_B1, V_SUM_C1\");\n            checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n            pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM \" + tb +\n                    \" GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1,V_B1, V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n            pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum(V_SUM_D1) FROM \" + tb +\n                    \" GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1, V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdown(pns, 3, 1, 2, 2, 3, 1);\n\n            // Distinct: No aggregation push down.\n            pns = compileToFragments(\"SELECT V_A1,V_B1, V_SUM_C1, sum( distinct V_SUM_D1) FROM \" +\n                    tb + \" GROUP BY V_A1,V_B1, V_SUM_C1 ORDER BY V_A1, V_SUM_C1 LIMIT 5\");\n            checkMVReaggreateFeatureAggPushdownFalse(pns, 3, 1, 2, 2);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMultiPartitionMVBasedQuery_AggQueryEdge() {\n        // TODO(xin):\n        // Fix it later.\n        pns = compileToFragments(\"SELECT count(*) FROM V_P1\");\n        for (AbstractPlanNode apn: pns) {\n            System.out.println(apn.toExplainPlanString());\n        }\n\n        //checkMVReaggreateFeatureAggPushdown(pns, 0, 1, 2, 1, 2, 1);\n\n\n    }","id":5743,"modified_method":"public void testMultiPartitionMVBasedQuery_AggQueryEdge() {\n        // TODO(xin):\n        // Fix it later.\n//        pns = compileToFragments(\"SELECT count(*) FROM V_P1\");\n//        for (AbstractPlanNode apn: pns) {\n//            System.out.println(apn.toExplainPlanString());\n//        }\n\n        //checkMVReaggreateFeatureAggPushdown(pns, 0, 1, 2, 1, 2, 1);\n\n\n        pns = compileToFragments(\"SELECT V_SUM_C1 FROM V_P1_ABS GROUP by V_SUM_C1\");\n        checkMVReaggreateFeatureAggPushdown(pns, 1, 0, 2, 1, 3, 0);\n\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMaterializedViewUpdateR3() throws Exception {\n        System.out.println(\"Test R3 update...\");\n\n        String orderbyStmt = \"V_R3_CNT, V_R3_sum_wage\";\n\n        Client client = this.getClient();\n        if (!isHSQL()) {\n            client.callProcedure(\"R3.insert\", 1,  10,  \"VoltDB\", \"VoltDB\");\n            client.callProcedure(\"R3.insert\", 2,  20,  \"IBM\", \"IBM\");\n            client.callProcedure(\"R3.insert\", 3,  30,  \"VoltDB\", \"VoltDB\");\n            client.callProcedure(\"R3.insert\", 4,  40,  \"Apple\", \"Apple\");\n            client.callProcedure(\"R3.insert\", 5,  50,  \"IBM\", \"IBM\");\n\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,70}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,70}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 2, 22, \"IBM\", \"IBM\", 2);\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,72}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,72}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 1, 10, \"IBM\", \"IBM\", 1);\n            verifyMVTestR3(client, new Object[][] {{\"Vo\",1,30},{\"Ap\",1,40},{\"IB\",3,82}},\n                    new Object[][] {{\"VoltDB\"+longStr,1,30},{\"Apple\"+longStr,1,40},\n                    {\"IBM\"+longStr,3,82}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 4, 40, \"VoltDB\", \"VoltDB\", 4);\n            verifyMVTestR3(client, new Object[][] {{\"Vo\",2,70}, {\"IB\",3,82}},\n                    new Object[][] {{\"VoltDB\"+longStr,2,70},{\"IBM\"+longStr,3,82}},\n                    orderbyStmt);\n        }\n    }","id":5744,"modified_method":"public void testMVUpdateR3() throws Exception {\n        System.out.println(\"Test R3 update...\");\n\n        String orderbyStmt = \"V_R3_CNT, V_R3_sum_wage\";\n\n        Client client = this.getClient();\n        if (!isHSQL()) {\n            client.callProcedure(\"R3.insert\", 1,  10,  \"VoltDB\", \"VoltDB\");\n            client.callProcedure(\"R3.insert\", 2,  20,  \"IBM\", \"IBM\");\n            client.callProcedure(\"R3.insert\", 3,  30,  \"VoltDB\", \"VoltDB\");\n            client.callProcedure(\"R3.insert\", 4,  40,  \"Apple\", \"Apple\");\n            client.callProcedure(\"R3.insert\", 5,  50,  \"IBM\", \"IBM\");\n\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,70}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,70}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 2, 22, \"IBM\", \"IBM\", 2);\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,72}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,72}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 1, 10, \"IBM\", \"IBM\", 1);\n            verifyMVTestR3(client, new Object[][] {{\"Vo\",1,30},{\"Ap\",1,40},{\"IB\",3,82}},\n                    new Object[][] {{\"VoltDB\"+longStr,1,30},{\"Apple\"+longStr,1,40},\n                    {\"IBM\"+longStr,3,82}}, orderbyStmt);\n\n            client.callProcedure(\"R3.update\", 4, 40, \"VoltDB\", \"VoltDB\", 4);\n            verifyMVTestR3(client, new Object[][] {{\"Vo\",2,70}, {\"IB\",3,82}},\n                    new Object[][] {{\"VoltDB\"+longStr,2,70},{\"IBM\"+longStr,3,82}},\n                    orderbyStmt);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public junit.framework.Test suite() throws Exception {\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder = new MultiConfigSuiteBuilder(\n                TestPlansGroupByComplexMaterializedViewSuite.class);\n        String literalSchema = null;\n        boolean success = true;\n        ByteArrayOutputStream capturer = new ByteArrayOutputStream();\n        PrintStream capturing = new PrintStream(capturer);\n        String captured = null;\n        String[] lines = null;\n\n\n        VoltProjectBuilder project0 = new VoltProjectBuilder();\n        project0.setCompilerDebugPrintStream(capturing);\n        literalSchema =\n                \"CREATE TABLE F ( \" +\n                \"F_PKEY INTEGER NOT NULL, \" +\n                \"F_D1   INTEGER NOT NULL, \" +\n                \"F_D2   INTEGER NOT NULL, \" +\n                \"F_D3   INTEGER NOT NULL, \" +\n                \"F_VAL1 INTEGER NOT NULL, \" +\n                \"F_VAL2 INTEGER NOT NULL, \" +\n                \"F_VAL3 INTEGER NOT NULL, \" +\n                \"PRIMARY KEY (F_PKEY) ); \" +\n\n                \"CREATE VIEW V0 (V_D1_PKEY, V_D2_PKEY, V_D3_PKEY, V_F_PKEY, CNT, SUM_V1, SUM_V2, SUM_V3) \" +\n                \"AS SELECT F_D1, F_D2, F_D3, F_PKEY, COUNT(*), SUM(F_VAL1)+1, SUM(F_VAL2), SUM(F_VAL3) \" +\n                \"FROM F  GROUP BY F_D1, F_D2, F_D3, F_PKEY;\"\n                ;\n        try {\n            project0.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project0);\n        assertFalse(success);\n        captured = capturer.toString(\"UTF-8\");\n        lines = captured.split(\"\\n\");\n\n        assertTrue(foundLineMatching(lines,\n                \".*V0.*Expressions with aggregate functions are not currently supported in views.*\"));\n\n        VoltProjectBuilder project1 = new VoltProjectBuilder();\n        project1.setCompilerDebugPrintStream(capturing);\n        literalSchema =\n                \"CREATE TABLE F ( \" +\n                \"F_PKEY INTEGER NOT NULL, \" +\n                \"F_D1   INTEGER NOT NULL, \" +\n                \"F_D2   INTEGER NOT NULL, \" +\n                \"F_D3   INTEGER NOT NULL, \" +\n                \"F_VAL1 INTEGER NOT NULL, \" +\n                \"F_VAL2 INTEGER NOT NULL, \" +\n                \"F_VAL3 INTEGER NOT NULL, \" +\n                \"PRIMARY KEY (F_PKEY) ); \" +\n\n                \"CREATE VIEW V1 (V_D1_PKEY, V_D2_PKEY, V_D3_PKEY, V_F_PKEY, CNT, SUM_V1, SUM_V2, SUM_V3) \" +\n                \"AS SELECT F_D1, F_D2, F_D3, F_PKEY, COUNT(*) + 1, SUM(F_VAL1), SUM(F_VAL2), SUM(F_VAL3) \" +\n                \"FROM F  GROUP BY F_D1, F_D2, F_D3, F_PKEY;\"\n                ;\n        try {\n            project1.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project1);\n        assertFalse(success);\n        captured = capturer.toString(\"UTF-8\");\n        lines = captured.split(\"\\n\");\n\n        // Real config for tests\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        literalSchema =\n                \"CREATE TABLE R1 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"PRIMARY KEY (id) );\" +\n\n                \"CREATE VIEW V_R1 (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT ABS(dept), count(*), SUM(wage) FROM R1 GROUP BY ABS(dept);\" +\n\n                \"CREATE VIEW V_R1_add (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage+id) FROM R1 GROUP BY dept;\" +\n\n                \"CREATE VIEW V_R1_multiply (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage*id) FROM R1 GROUP BY dept;\" +\n\n                \"CREATE VIEW V_R1_combine (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT ABS(dept), count(*), SUM(wage+id) FROM R1 GROUP BY ABS(dept);\" +\n\n                \"CREATE TABLE R2 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"tm TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) );\" +\n\n                \"CREATE VIEW V_R2 (V_R2_G1, V_R2_G2, V_R2_CNT, V_R2_sum_wage) \" +\n                \"AS SELECT truncate(month,tm), dept, count(*), SUM(wage) \" +\n                \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n\n                // R3 mv tests are mainly for memory concerns\n                \"CREATE TABLE R3 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"vshort VARCHAR(20),\" +\n                \"vlong VARCHAR(200),\" +\n                \"PRIMARY KEY (ID) );\" +\n\n                \"CREATE VIEW V_R3_test1 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT substring(vshort,0,2), count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY substring(vshort,0,2) ;\" +\n\n                \"CREATE VIEW V_R3_test2 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT vshort || '\" + longStr + \"', \" +\n                \"count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY vshort || '\" + longStr + \"';\" +\n\n                \"CREATE VIEW V_R3_test3 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT substring(vlong,0,2), count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY substring(vlong,0,2);\" +\n\n                \"CREATE VIEW V_R3_test4 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT vlong || '\" + longStr + \"', \" +\n                \"count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY vlong || '\" + longStr + \"';\" +\n\n\n                \"CREATE TABLE P1 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"PRIMARY KEY (id) );\" +\n                \"PARTITION TABLE P1 ON COLUMN id;\" +\n\n                \"CREATE VIEW V_P1 (V_P1_G1, V_P1_CNT, V_P1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage) FROM P1 GROUP BY dept;\" +\n                \"\"\n                ;\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        config = new LocalCluster(\"plansgroupby-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // Cluster\n        config = new LocalCluster(\"plansgroupby-cluster.jar\", 2, 3, 1, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        return builder;\n    }","id":5745,"modified_method":"static public junit.framework.Test suite() throws Exception {\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder = new MultiConfigSuiteBuilder(\n                TestPlansGroupByComplexMaterializedViewSuite.class);\n        String literalSchema = null;\n        boolean success = true;\n        ByteArrayOutputStream capturer = new ByteArrayOutputStream();\n        PrintStream capturing = new PrintStream(capturer);\n        String captured = null;\n        String[] lines = null;\n\n\n        VoltProjectBuilder project0 = new VoltProjectBuilder();\n        project0.setCompilerDebugPrintStream(capturing);\n        literalSchema =\n                \"CREATE TABLE F ( \" +\n                \"F_PKEY INTEGER NOT NULL, \" +\n                \"F_D1   INTEGER NOT NULL, \" +\n                \"F_D2   INTEGER NOT NULL, \" +\n                \"F_D3   INTEGER NOT NULL, \" +\n                \"F_VAL1 INTEGER NOT NULL, \" +\n                \"F_VAL2 INTEGER NOT NULL, \" +\n                \"F_VAL3 INTEGER NOT NULL, \" +\n                \"PRIMARY KEY (F_PKEY) ); \" +\n\n                \"CREATE VIEW V0 (V_D1_PKEY, V_D2_PKEY, V_D3_PKEY, V_F_PKEY, CNT, SUM_V1, SUM_V2, SUM_V3) \" +\n                \"AS SELECT F_D1, F_D2, F_D3, F_PKEY, COUNT(*), SUM(F_VAL1)+1, SUM(F_VAL2), SUM(F_VAL3) \" +\n                \"FROM F  GROUP BY F_D1, F_D2, F_D3, F_PKEY;\"\n                ;\n        try {\n            project0.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project0);\n        assertFalse(success);\n        captured = capturer.toString(\"UTF-8\");\n        lines = captured.split(\"\\n\");\n\n        assertTrue(foundLineMatching(lines,\n                \".*V0.*Expressions with aggregate functions are not currently supported in views.*\"));\n\n        VoltProjectBuilder project1 = new VoltProjectBuilder();\n        project1.setCompilerDebugPrintStream(capturing);\n        literalSchema =\n                \"CREATE TABLE F ( \" +\n                \"F_PKEY INTEGER NOT NULL, \" +\n                \"F_D1   INTEGER NOT NULL, \" +\n                \"F_D2   INTEGER NOT NULL, \" +\n                \"F_D3   INTEGER NOT NULL, \" +\n                \"F_VAL1 INTEGER NOT NULL, \" +\n                \"F_VAL2 INTEGER NOT NULL, \" +\n                \"F_VAL3 INTEGER NOT NULL, \" +\n                \"PRIMARY KEY (F_PKEY) ); \" +\n\n                \"CREATE VIEW V1 (V_D1_PKEY, V_D2_PKEY, V_D3_PKEY, V_F_PKEY, CNT, SUM_V1, SUM_V2, SUM_V3) \" +\n                \"AS SELECT F_D1, F_D2, F_D3, F_PKEY, COUNT(*) + 1, SUM(F_VAL1), SUM(F_VAL2), SUM(F_VAL3) \" +\n                \"FROM F  GROUP BY F_D1, F_D2, F_D3, F_PKEY;\"\n                ;\n        try {\n            project1.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project1);\n        assertFalse(success);\n        captured = capturer.toString(\"UTF-8\");\n        lines = captured.split(\"\\n\");\n\n        // Real config for tests\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        literalSchema =\n                \"CREATE TABLE R1 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"PRIMARY KEY (id) );\" +\n\n                \"CREATE VIEW V_R1 (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT ABS(dept), count(*), SUM(wage) FROM R1 GROUP BY ABS(dept);\" +\n\n                \"CREATE VIEW V_R1_add (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage+id) FROM R1 GROUP BY dept;\" +\n\n                \"CREATE VIEW V_R1_multiply (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage*id) FROM R1 GROUP BY dept;\" +\n\n                \"CREATE VIEW V_R1_combine (V_R1_G1, V_R1_CNT, V_R1_sum_wage) \" +\n                \"AS SELECT ABS(dept), count(*), SUM(wage+id) FROM R1 GROUP BY ABS(dept);\" +\n\n                \"CREATE TABLE R2 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"tm TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) );\" +\n\n                \"CREATE VIEW V_R2 (V_R2_G1, V_R2_G2, V_R2_CNT, V_R2_sum_wage) \" +\n                \"AS SELECT truncate(month,tm), dept, count(*), SUM(wage) \" +\n                \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n\n                // R3 mv tests are mainly for memory concerns\n                \"CREATE TABLE R3 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"vshort VARCHAR(20),\" +\n                \"vlong VARCHAR(200),\" +\n                \"PRIMARY KEY (ID) );\" +\n\n                \"CREATE VIEW V_R3_test1 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT substring(vshort,0,2), count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY substring(vshort,0,2) ;\" +\n\n                \"CREATE VIEW V_R3_test2 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT vshort || '\" + longStr + \"', \" +\n                \"count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY vshort || '\" + longStr + \"';\" +\n\n                \"CREATE VIEW V_R3_test3 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT substring(vlong,0,2), count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY substring(vlong,0,2);\" +\n\n                \"CREATE VIEW V_R3_test4 (V_R3_G1,V_R3_CNT, V_R3_sum_wage) \" +\n                \"AS SELECT vlong || '\" + longStr + \"', \" +\n                \"count(*), SUM(wage) \" +\n                \"FROM R3 GROUP BY vlong || '\" + longStr + \"';\" +\n\n\n                \"CREATE TABLE P1 ( \" +\n                \"id INTEGER DEFAULT '0' NOT NULL, \" +\n                \"wage INTEGER, \" +\n                \"dept INTEGER, \" +\n                \"PRIMARY KEY (id) );\" +\n                \"PARTITION TABLE P1 ON COLUMN id;\" +\n\n                \"CREATE VIEW V_P1 (V_P1_G1, V_P1_CNT, V_P1_sum_wage) \" +\n                \"AS SELECT dept, count(*), SUM(wage) FROM P1 GROUP BY dept;\" +\n\n                \"CREATE VIEW V_P1_ABS (V_P1_G1, V_P1_CNT, V_P1_sum_wage) \" +\n                \"AS SELECT abs(dept), count(*), SUM(wage) FROM P1 GROUP BY abs(dept);\" +\n                \"\"\n                ;\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        config = new LocalCluster(\"plansgroupby-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        config = new LocalCluster(\"plansgroupby-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // Cluster\n        config = new LocalCluster(\"plansgroupby-cluster.jar\", 2, 3, 1, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        return builder;\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMaterializedViewUpdateR2() throws Exception {\n        System.out.println(\"Test R2 update...\");\n\n        if (!isHSQL()) {\n            Client client = this.getClient();\n            client.callProcedure(\"R2.insert\", 1,  10,  1 , \"2013-06-11 02:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 2,  20,  1 , \"2013-07-12 03:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 3,  30,  1 , \"2013-07-14 05:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 4,  40,  2 , \"2013-08-13 04:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 5,  50,  2 , \"2013-09-15 06:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 6,  60,  2 , \"2013-08-16 02:00:00.123457\");\n\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n            long time1 = dateFormat.parse(\"2013-06-01 00:00:00.000\").getTime()*1000;\n            long time23 = dateFormat.parse(\"2013-07-01 00:00:00.000\").getTime()*1000;\n            long time46 = dateFormat.parse(\"2013-08-01 00:00:00.000\").getTime()*1000;\n            long time5 = dateFormat.parse(\"2013-09-01 00:00:00.000\").getTime()*1000;\n\n            String mvTable = \"V_R2\";\n            String orderbyStmt = mvTable+\"_G1, \" + mvTable + \"_G2\";\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            // ID, wage, dept, tm\n            // \"AS SELECT truncate(month,tm), dept count(*), SUM(wage) \" +\n            // \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n\n            client.callProcedure(\"R2.update\", 2, 19, 1, \"2013-07-12 03:00:00.123457\", 2);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 49},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.update\", 4, 41, -1, \"2013-08-13 04:00:00.123457\", 4);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 49},\n                    {time46, -1, 1, 41},\n                    {time46, 2, 1, 60},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.update\", 5, 56, 1, \"2013-06-11 02:01:00.123457\", 5);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 2, 66},\n                    {time23, 1, 2, 49},\n                    {time46, -1, 1, 41},\n                    {time46, 2, 1, 60}}, orderbyStmt);\n\n            client.callProcedure(\"@AdHoc\",\"Delete from R2\");\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n        }\n    }","id":5746,"modified_method":"public void testMVUpdateR2() throws Exception {\n        System.out.println(\"Test R2 update...\");\n\n        if (!isHSQL()) {\n            Client client = this.getClient();\n            client.callProcedure(\"R2.insert\", 1,  10,  1 , \"2013-06-11 02:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 2,  20,  1 , \"2013-07-12 03:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 3,  30,  1 , \"2013-07-14 05:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 4,  40,  2 , \"2013-08-13 04:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 5,  50,  2 , \"2013-09-15 06:00:00.123457\");\n            client.callProcedure(\"R2.insert\", 6,  60,  2 , \"2013-08-16 02:00:00.123457\");\n\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n            long time1 = dateFormat.parse(\"2013-06-01 00:00:00.000\").getTime()*1000;\n            long time23 = dateFormat.parse(\"2013-07-01 00:00:00.000\").getTime()*1000;\n            long time46 = dateFormat.parse(\"2013-08-01 00:00:00.000\").getTime()*1000;\n            long time5 = dateFormat.parse(\"2013-09-01 00:00:00.000\").getTime()*1000;\n\n            String mvTable = \"V_R2\";\n            String orderbyStmt = mvTable+\"_G1, \" + mvTable + \"_G2\";\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            // ID, wage, dept, tm\n            // \"AS SELECT truncate(month,tm), dept count(*), SUM(wage) \" +\n            // \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n\n            client.callProcedure(\"R2.update\", 2, 19, 1, \"2013-07-12 03:00:00.123457\", 2);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 49},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.update\", 4, 41, -1, \"2013-08-13 04:00:00.123457\", 4);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 49},\n                    {time46, -1, 1, 41},\n                    {time46, 2, 1, 60},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.update\", 5, 56, 1, \"2013-06-11 02:01:00.123457\", 5);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 2, 66},\n                    {time23, 1, 2, 49},\n                    {time46, -1, 1, 41},\n                    {time46, 2, 1, 60}}, orderbyStmt);\n\n            client.callProcedure(\"@AdHoc\",\"Delete from R2\");\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMVUpdateP1() throws Exception {\n        System.out.println(\"Test MV partition...\");\n\n        VoltTable vt = null;\n        Client client = this.getClient();\n\n        vt = client.callProcedure(\"@AdHoc\", \"Select count(*) from V_P1\").getResults()[0];\n        assertEquals(0, vt.asScalarLong());\n\n        String tb = \"P1.insert\";\n        client.callProcedure(tb, 1,  10,  1 );\n        client.callProcedure(tb, 2,  20,  3 );\n        client.callProcedure(tb, 6,  40,  3 );\n        client.callProcedure(tb, 4,  40,  1 );\n        client.callProcedure(tb, 5,  50,  1 );\n\n//        \"CREATE VIEW V_P1 (V_P1_G1, V_P1_CNT, V_P1_sum_wage) \" +\n//        \"AS SELECT dept, count(*), SUM(wage) FROM P1 GROUP BY dept;\" +\n\n        // TODO(xin): BUG\n//        vt = client.callProcedure(\"@AdHoc\", \"Select count(*) from V_P1\").getResults()[0];\n//        assertEquals(2, vt.asScalarLong());\n\n        vt = client.callProcedure(\"@AdHoc\", \"Select * from V_P1 ORDER BY V_P1_G1\").getResults()[0];\n        validateTableOfLongs(vt, new long[][]{{1,3,100},{3,2,60}});\n\n        vt = client.callProcedure(\"@AdHoc\",\n                \"Select V_P1_sum_wage from V_P1 ORDER BY V_P1_sum_wage\").getResults()[0];\n        validateTableOfLongs(vt, new long[][]{{60},{100}});\n\n        vt = client.callProcedure(\"@AdHoc\", \"Select V_P1_sum_wage as tag, sum(V_P1_CNT) \" +\n                \"from V_P1 group by V_P1_sum_wage order by tag\").getResults()[0];\n        validateTableOfLongs(vt, new long[][]{{60,2},{100,3}});\n\n        vt = client.callProcedure(\"@AdHoc\", \"Select V_P1_G1, V_P1_sum_wage, sum(V_P1_CNT) \" +\n                \"from V_P1 group by V_P1_G1, V_P1_sum_wage order by V_P1_G1 desc, V_P1_sum_wage\").getResults()[0];\n        validateTableOfLongs(vt, new long[][]{{3,60,2},{1,100,3}});\n\n    }","id":5747,"modified_method":"public void testMVUpdateR1() throws IOException, ProcCallException {\n        System.out.println(\"Test R1 update...\");\n\n        Client client = this.getClient();\n        String tb = \"R1.insert\";\n        client.callProcedure(tb, 1,  10,  -1 );\n        client.callProcedure(tb, 2,  20,  1 );\n        client.callProcedure(tb, 3,  30,  1 );\n        client.callProcedure(tb, 4,  40,  2 );\n        client.callProcedure(tb, 5,  50,  2 );\n\n        String mvTable = \"V_R1\";\n        String orderbyStmt = mvTable+\"_G1\";\n        // ID, wage, dept\n        // SELECT ABS(dept), count(*), SUM(wage) FROM R1 GROUP BY ABS(dept)\n\n        // Check the current contents in MVs\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 2, 90}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 2, 99}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 2, 410}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 2, 99}}, orderbyStmt);\n\n        // Test update\n        client.callProcedure(\"R1.update\", 2, 19, 1, 2);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 59}, {2, 2, 90}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 54}, {2, 2, 99}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 128}, {2, 2, 410}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 65}, {2, 2, 99}}, orderbyStmt);\n\n        client.callProcedure(\"R1.update\", 4, 41, -1, 4);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 4, 100}, {2, 1, 50}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 2, 56},{1, 2, 54}, {2, 1, 55}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 2, 174},{1, 2, 128}, {2, 1, 250}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 4, 110}, {2, 1, 55}}, orderbyStmt);\n\n        client.callProcedure(\"R1.update\", 5, 55, 1, 5);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 5, 155}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 2, 56},{1, 3, 114} }, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 2, 174},{1, 3, 403}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 5, 170}}, orderbyStmt);\n\n        client.callProcedure(\"@AdHoc\",\"Delete from R1\");\n        compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\", null, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\", null, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\", null, orderbyStmt);\n\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMaterializedViewInsertDeleteR2() throws Exception {\n        System.out.println(\"Test R2 insert and delete...\");\n        String mvTable = \"V_R2\";\n        String orderbyStmt = mvTable+\"_G1, \" + mvTable + \"_G2\";\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n        long time1 = dateFormat.parse(\"2013-06-01 00:00:00.000\").getTime()*1000;\n        long time23 = dateFormat.parse(\"2013-07-01 00:00:00.000\").getTime()*1000;\n        long time46 = dateFormat.parse(\"2013-08-01 00:00:00.000\").getTime()*1000;\n        long time5 = dateFormat.parse(\"2013-09-01 00:00:00.000\").getTime()*1000;\n\n\n        // ID, wage, dept, tm\n        // \"AS SELECT truncate(month,tm), dept count(*), SUM(wage) \" +\n        // \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n        Client client = this.getClient();\n\n        if (!isHSQL()) {\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n\n            // Start to insert\n            client.callProcedure(\"R2.insert\", 1,  10,  1 , \"2013-06-11 02:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time1, 1, 1, 10}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 2,  20,  1 , \"2013-07-12 03:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time1, 1, 1, 10}, {time23, 1, 1, 20}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 4,  40,  2 , \"2013-08-13 04:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 1, 20},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 3,  30,  1 , \"2013-07-14 05:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 5,  50,  2 , \"2013-09-15 06:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 6,  60,  2 , \"2013-08-16 02:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            // Start to delete\n            client.callProcedure(\"R2.delete\", 6);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 5);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 3);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 1, 20},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 1);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{ {time23, 1, 1, 20},{time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 2);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 4);\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n        }\n    }","id":5748,"modified_method":"public void testMVInsertDeleteR2() throws Exception {\n        System.out.println(\"Test R2 insert and delete...\");\n        String mvTable = \"V_R2\";\n        String orderbyStmt = mvTable+\"_G1, \" + mvTable + \"_G2\";\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n        long time1 = dateFormat.parse(\"2013-06-01 00:00:00.000\").getTime()*1000;\n        long time23 = dateFormat.parse(\"2013-07-01 00:00:00.000\").getTime()*1000;\n        long time46 = dateFormat.parse(\"2013-08-01 00:00:00.000\").getTime()*1000;\n        long time5 = dateFormat.parse(\"2013-09-01 00:00:00.000\").getTime()*1000;\n\n\n        // ID, wage, dept, tm\n        // \"AS SELECT truncate(month,tm), dept count(*), SUM(wage) \" +\n        // \"FROM R2 GROUP BY truncate(month,tm), dept;\" +\n        Client client = this.getClient();\n\n        if (!isHSQL()) {\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n\n            // Start to insert\n            client.callProcedure(\"R2.insert\", 1,  10,  1 , \"2013-06-11 02:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time1, 1, 1, 10}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 2,  20,  1 , \"2013-07-12 03:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time1, 1, 1, 10}, {time23, 1, 1, 20}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 4,  40,  2 , \"2013-08-13 04:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 1, 20},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 3,  30,  1 , \"2013-07-14 05:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 5,  50,  2 , \"2013-09-15 06:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.insert\", 6,  60,  2 , \"2013-08-16 02:00:00.123457\");\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 2, 100},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            // Start to delete\n            client.callProcedure(\"R2.delete\", 6);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40},\n                    {time5, 2, 1, 50}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 5);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 2, 50},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 3);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{\n                    {time1, 1, 1, 10},\n                    {time23, 1, 1, 20},\n                    {time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 1);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{ {time23, 1, 1, 20},{time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 2);\n            compareMVcontentsOfLongs(client, mvTable, new long [][]{{time46, 2, 1, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R2.delete\", 4);\n            compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMaterializedViewInsertDeleteR1() throws IOException, ProcCallException {\n        System.out.println(\"Test R1 insert and delete...\");\n        String mvTable = \"V_R1\";\n        String orderbyStmt = mvTable+\"_G1\";\n\n        // ID, wage, dept\n        // SELECT ABS(dept), count(*), SUM(wage) FROM R1 GROUP BY ABS(dept)\n        Client client = this.getClient();\n\n        compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 1,  10,  -1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 1, 10}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\", new long [][]{{-1, 1, 11}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\", new long [][]{{-1, 1, 10}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\", new long [][]{{1, 1, 11}}, orderbyStmt);\n\n\n        client.callProcedure(\"R1.insert\", 2,  20,  1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10}, {1, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\", new long [][]{{1, 2, 33}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 4,  40,  2 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 2, 33}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 3,  30,  1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 5,  50,  2 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 2, 90}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 2, 99}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 2, 410}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 2, 99}}, orderbyStmt);\n\n        // Start to delete\n        client.callProcedure(\"R1.delete\", 5);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 3);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 2, 33}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 1);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 1, 20}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 2);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 4);\n        compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n    }","id":5749,"modified_method":"public void testMVInsertDeleteR1() throws IOException, ProcCallException {\n        System.out.println(\"Test R1 insert and delete...\");\n        String mvTable = \"V_R1\";\n        String orderbyStmt = mvTable+\"_G1\";\n\n        // ID, wage, dept\n        // SELECT ABS(dept), count(*), SUM(wage) FROM R1 GROUP BY ABS(dept)\n        Client client = this.getClient();\n\n        compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 1,  10,  -1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 1, 10}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\", new long [][]{{-1, 1, 11}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\", new long [][]{{-1, 1, 10}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\", new long [][]{{1, 1, 11}}, orderbyStmt);\n\n\n        client.callProcedure(\"R1.insert\", 2,  20,  1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10}, {1, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\", new long [][]{{1, 2, 33}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 4,  40,  2 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 2, 33}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 3,  30,  1 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.insert\", 5,  50,  2 );\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 2, 90}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 2, 99}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 2, 410}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 2, 99}}, orderbyStmt);\n\n        // Start to delete\n        client.callProcedure(\"R1.delete\", 5);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 3, 60}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 2, 55}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 2, 130}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 3, 66}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 3);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 2, 30}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{-1, 1, 11},{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{-1, 1, 10},{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 2, 33}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 1);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{1, 1, 20}, {2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{1, 1, 40}, {2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{1, 1, 22}, {2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 2);\n        compareMVcontentsOfLongs(client, mvTable, new long [][]{{2, 1, 40}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_add\",\n                new long [][]{{2, 1, 44}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_multiply\",\n                new long [][]{{2, 1, 160}}, orderbyStmt);\n        compareMVcontentsOfLongs(client, mvTable+\"_combine\",\n                new long [][]{{2, 1, 44}}, orderbyStmt);\n\n        client.callProcedure(\"R1.delete\", 4);\n        compareMVcontentsOfLongs(client, mvTable, null, orderbyStmt);\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testMaterializedViewInsertDeleteR3() throws Exception {\n        System.out.println(\"Test R3 insert and delete...\");\n        String orderbyStmt = \"V_R3_CNT, V_R3_sum_wage\";\n        Client client = this.getClient();\n\n        if (!isHSQL()) {\n         // null result for initial mv tables\n            verifyMVTestR3(client, null, null, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 1,  10,  \"VoltDB\", \"VoltDB\");\n            verifyMVTestR3(client, new Object[][] {{\"Vo\", 1, 10}},\n                    new Object[][] {{\"VoltDB\"+longStr, 1, 10}}, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 2,  20,  \"IBM\", \"IBM\");\n            verifyMVTestR3(client, new Object[][] {{\"Vo\", 1, 10}, {\"IB\", 1, 20}},\n                    new Object[][] {{\"VoltDB\"+longStr, 1, 10}, {\"IBM\"+longStr, 1, 20}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 3,  30,  \"VoltDB\", \"VoltDB\");\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 2, 40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 2, 40}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 4,  40,  \"Apple\", \"Apple\");\n            verifyMVTestR3(client, new Object[][] {{\"IB\",1,20},{\"Ap\",1,40},{\"Vo\",2,40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"Apple\"+longStr,1,40},\n                    {\"VoltDB\"+longStr, 2, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 5,  50,  \"IBM\", \"IBM\");\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,70}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,70}}, orderbyStmt);\n\n            // Delete\n            client.callProcedure(\"R3.delete\", 5);\n            verifyMVTestR3(client, new Object[][] {{\"IB\",1,20},{\"Ap\",1,40},{\"Vo\",2,40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"Apple\"+longStr,1,40},\n                    {\"VoltDB\"+longStr, 2, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 4);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 2, 40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 2, 40}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 1);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 1, 30}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 1, 30}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 3);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}},orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 2);\n            verifyMVTestR3(client, null, null, orderbyStmt);\n        }\n    }","id":5750,"modified_method":"public void testMVInsertDeleteR3() throws Exception {\n        System.out.println(\"Test R3 insert and delete...\");\n        String orderbyStmt = \"V_R3_CNT, V_R3_sum_wage\";\n        Client client = this.getClient();\n\n        if (!isHSQL()) {\n         // null result for initial mv tables\n            verifyMVTestR3(client, null, null, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 1,  10,  \"VoltDB\", \"VoltDB\");\n            verifyMVTestR3(client, new Object[][] {{\"Vo\", 1, 10}},\n                    new Object[][] {{\"VoltDB\"+longStr, 1, 10}}, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 2,  20,  \"IBM\", \"IBM\");\n            verifyMVTestR3(client, new Object[][] {{\"Vo\", 1, 10}, {\"IB\", 1, 20}},\n                    new Object[][] {{\"VoltDB\"+longStr, 1, 10}, {\"IBM\"+longStr, 1, 20}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 3,  30,  \"VoltDB\", \"VoltDB\");\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 2, 40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 2, 40}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 4,  40,  \"Apple\", \"Apple\");\n            verifyMVTestR3(client, new Object[][] {{\"IB\",1,20},{\"Ap\",1,40},{\"Vo\",2,40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"Apple\"+longStr,1,40},\n                    {\"VoltDB\"+longStr, 2, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R3.insert\", 5,  50,  \"IBM\", \"IBM\");\n            verifyMVTestR3(client, new Object[][] {{\"Ap\",1,40},{\"Vo\",2,40},{\"IB\",2,70}},\n                    new Object[][] {{\"Apple\"+longStr,1,40}, {\"VoltDB\"+longStr, 2, 40},\n                    {\"IBM\"+longStr,2,70}}, orderbyStmt);\n\n            // Delete\n            client.callProcedure(\"R3.delete\", 5);\n            verifyMVTestR3(client, new Object[][] {{\"IB\",1,20},{\"Ap\",1,40},{\"Vo\",2,40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"Apple\"+longStr,1,40},\n                    {\"VoltDB\"+longStr, 2, 40}}, orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 4);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 2, 40}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 2, 40}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 1);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20},{\"Vo\", 1, 30}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}, {\"VoltDB\"+longStr, 1, 30}},\n                    orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 3);\n            verifyMVTestR3(client, new Object[][] {{\"IB\", 1, 20}},\n                    new Object[][] {{\"IBM\"+longStr, 1, 20}},orderbyStmt);\n\n            client.callProcedure(\"R3.delete\", 2);\n            verifyMVTestR3(client, null, null, orderbyStmt);\n        }\n    }","commit_id":"193afa6fbe0c57358f9f0aae61bb5a0952714d9c","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void actionPerformed(ActionEvent evt)\n                {\n                        JEditTextArea textArea = getTextArea(evt);\n                        int caret = textArea.getCaretPosition();\n                        if(caret == textArea.getDocumentLength())\n                        {\n                                textArea.getToolkit().beep();\n                                return;\n                        }\n\n                        if(select)\n                                textArea.select(textArea.getMarkPosition(),\n                                        caret + 1);\n                        else\n                                textArea.setCaretPosition(caret + 1);\n                }","id":5751,"modified_method":"public void actionPerformed(ActionEvent evt)\n                {\n                        JEditTextArea textArea = getTextArea(evt);\n                        int caret = textArea.getCaretPosition();\n                        if(caret == textArea.getDocumentLength())\n                        {\n                                textArea.getToolkit().beep();\n                                return;\n                        }\n\n                        if (select) {\n                          textArea.select(textArea.getMarkPosition(), caret+1);\n                        } else {\n                          int start = textArea.getSelectionStart();\n                          int end = textArea.getSelectionEnd();\n                          if (start != end) {\n                            textArea.select(end, end);\n                          } else {\n                            textArea.setCaretPosition(caret + 1);\n                          }\n                        }\n                }","commit_id":"c7059278fb3341cbe0a4582480947ad11b4eae52","url":"https://github.com/processing/processing"},{"original_method":"public void actionPerformed(ActionEvent evt)\n                {\n                        JEditTextArea textArea = getTextArea(evt);\n                        int caret = textArea.getCaretPosition();\n                        if(caret == 0)\n                        {\n                                textArea.getToolkit().beep();\n                                return;\n                        }\n\n                        if(select)\n                                textArea.select(textArea.getMarkPosition(),\n                                        caret - 1);\n                        else\n                                textArea.setCaretPosition(caret - 1);\n                }","id":5752,"modified_method":"public void actionPerformed(ActionEvent evt)\n                {\n                        JEditTextArea textArea = getTextArea(evt);\n                        int caret = textArea.getCaretPosition();\n                        if(caret == 0)\n                        {\n                                textArea.getToolkit().beep();\n                                return;\n                        }\n\n                        if (select) {\n                          textArea.select(textArea.getMarkPosition(), caret-1);\n                        } else {\n                          int start = textArea.getSelectionStart();\n                          int end = textArea.getSelectionEnd();\n                          if (start != end) {\n                            textArea.select(start, start);\n                          } else {\n                            textArea.setCaretPosition(caret - 1);\n                          }\n                        }\n                }","commit_id":"c7059278fb3341cbe0a4582480947ad11b4eae52","url":"https://github.com/processing/processing"},{"original_method":"public PdeTextAreaDefaults() {\n\n    inputHandler = new DefaultInputHandler();\n    inputHandler.addDefaultKeyBindings();\n\n    // use option on mac for things that are ctrl on windows/linux\n    String mod = Base.isMacOS() ? \"A\" : \"C\";\n\n    inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"S+DELETE\", InputHandler.DELETE);\n\n    inputHandler.addKeyBinding(\"BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"C+BACK_SPACE\", InputHandler.BACKSPACE_WORD);\n    inputHandler.addKeyBinding(\"DELETE\", InputHandler.DELETE);\n    inputHandler.addKeyBinding(\"C+DELETE\", InputHandler.DELETE_WORD);\n\n    inputHandler.addKeyBinding(\"ENTER\", InputHandler.INSERT_BREAK);\n    inputHandler.addKeyBinding(\"TAB\", InputHandler.INSERT_TAB);\n\n    inputHandler.addKeyBinding(\"INSERT\", InputHandler.OVERWRITE);\n    inputHandler.addKeyBinding(\"C+\\\\\", InputHandler.TOGGLE_RECT);\n\n    // beginning and ending of the current line\n    inputHandler.addKeyBinding(\"HOME\", InputHandler.HOME);\n    inputHandler.addKeyBinding(\"END\", InputHandler.END);\n\n    if (Base.isMacOS()) {\n      inputHandler.addKeyBinding(\"M+LEFT\", InputHandler.HOME);\n      inputHandler.addKeyBinding(\"M+RIGHT\", InputHandler.END);\n    }\n\n    inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_HOME);\n    inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_END);\n    inputHandler.addKeyBinding(mod + \"+HOME\", InputHandler.DOCUMENT_HOME);\n    inputHandler.addKeyBinding(mod + \"+END\", InputHandler.DOCUMENT_END);\n    inputHandler.addKeyBinding(mod + \"S+HOME\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(mod + \"S+END\", InputHandler.SELECT_DOC_END);\n\n    inputHandler.addKeyBinding(\"PAGE_UP\", InputHandler.PREV_PAGE);\n    inputHandler.addKeyBinding(\"PAGE_DOWN\", InputHandler.NEXT_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_UP\", InputHandler.SELECT_PREV_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_DOWN\", InputHandler.SELECT_NEXT_PAGE);\n\n    inputHandler.addKeyBinding(\"LEFT\", InputHandler.PREV_CHAR);\n    inputHandler.addKeyBinding(\"S+LEFT\", InputHandler.SELECT_PREV_CHAR);\n    inputHandler.addKeyBinding(mod + \"+LEFT\", InputHandler.PREV_WORD);\n    inputHandler.addKeyBinding(mod + \"S+LEFT\", InputHandler.SELECT_PREV_WORD);\n    inputHandler.addKeyBinding(\"RIGHT\", InputHandler.NEXT_CHAR);\n    inputHandler.addKeyBinding(\"S+RIGHT\", InputHandler.SELECT_NEXT_CHAR);\n    inputHandler.addKeyBinding(mod + \"+RIGHT\", InputHandler.NEXT_WORD);\n    inputHandler.addKeyBinding(mod + \"S+RIGHT\", InputHandler.SELECT_NEXT_WORD);\n    inputHandler.addKeyBinding(\"UP\", InputHandler.PREV_LINE);\n    inputHandler.addKeyBinding(mod + \"+UP\", InputHandler.PREV_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+UP\", InputHandler.SELECT_PREV_LINE);\n    inputHandler.addKeyBinding(\"DOWN\", InputHandler.NEXT_LINE);\n    inputHandler.addKeyBinding(mod + \"+DOWN\", InputHandler.NEXT_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+DOWN\", InputHandler.SELECT_NEXT_LINE);\n\n    inputHandler.addKeyBinding(mod + \"+ENTER\", InputHandler.REPEAT);\n\n    document = new SyntaxDocument();\n    editable = true;\n    electricScroll = 3;\n\n    cols = 80;\n    rows = 15;\n\n\n    // moved from SyntaxUtilities\n    //DEFAULTS.styles = SyntaxUtilities.getDefaultSyntaxStyles();\n\n    styles = new SyntaxStyle[Token.ID_COUNT];\n\n    // comments\n    styles[Token.COMMENT1] = Preferences.getStyle(\"comment1\");\n    styles[Token.COMMENT2] = Preferences.getStyle(\"comment2\");\n\n    // abstract, final, private\n    styles[Token.KEYWORD1] = Preferences.getStyle(\"keyword1\");\n\n    // beginShape, point, line\n    styles[Token.KEYWORD2] = Preferences.getStyle(\"keyword2\");\n\n    // byte, char, short, color\n    styles[Token.KEYWORD3] = Preferences.getStyle(\"keyword3\");\n\n    // constants: null, true, this, RGB, TWO_PI\n    styles[Token.LITERAL1] = Preferences.getStyle(\"literal1\");\n\n    // p5 built in variables: mouseX, width, pixels\n    styles[Token.LITERAL2] = Preferences.getStyle(\"literal2\");\n\n    // ??\n    styles[Token.LABEL] = Preferences.getStyle(\"label\");\n\n    // + - = /\n    styles[Token.OPERATOR] = Preferences.getStyle(\"operator\");\n\n    // area that's not in use by the text (replaced with tildes)\n    styles[Token.INVALID] = Preferences.getStyle(\"invalid\");\n\n\n    // moved from TextAreaPainter\n\n    font = Preferences.getFont(\"editor.font\");\n\n    fgcolor = Preferences.getColor(\"editor.fgcolor\");\n    bgcolor = Preferences.getColor(\"editor.bgcolor\");\n\n    caretVisible = true;\n    caretBlinks = Preferences.getBoolean(\"editor.caret.blink\");\n    caretColor = Preferences.getColor(\"editor.caret.color\");\n\n    selectionColor = Preferences.getColor(\"editor.selection.color\");\n\n    lineHighlight =\n      Preferences.getBoolean(\"editor.linehighlight\");\n    lineHighlightColor =\n      Preferences.getColor(\"editor.linehighlight.color\");\n\n    bracketHighlight =\n      Preferences.getBoolean(\"editor.brackethighlight\");\n    bracketHighlightColor =\n      Preferences.getColor(\"editor.brackethighlight.color\");\n\n    eolMarkers = Preferences.getBoolean(\"editor.eolmarkers\");\n    eolMarkerColor = Preferences.getColor(\"editor.eolmarkers.color\");\n\n    paintInvalid = Preferences.getBoolean(\"editor.invalid\");\n  }","id":5753,"modified_method":"public PdeTextAreaDefaults() {\n\n    inputHandler = new DefaultInputHandler();\n    inputHandler.addDefaultKeyBindings();\n\n    // use option on mac for things that are ctrl on windows/linux\n    String mod = Base.isMacOS() ? \"A\" : \"C\";\n\n    inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"S+DELETE\", InputHandler.DELETE);\n\n    inputHandler.addKeyBinding(\"BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"DELETE\", InputHandler.DELETE);\n    // the following two were changing for 0122 for better mac/pc compatability\n    inputHandler.addKeyBinding(mod+\"+BACK_SPACE\", InputHandler.BACKSPACE_WORD);\n    inputHandler.addKeyBinding(mod+\"+DELETE\", InputHandler.DELETE_WORD);\n\n    inputHandler.addKeyBinding(\"ENTER\", InputHandler.INSERT_BREAK);\n    inputHandler.addKeyBinding(\"TAB\", InputHandler.INSERT_TAB);\n\n    inputHandler.addKeyBinding(\"INSERT\", InputHandler.OVERWRITE);\n    inputHandler.addKeyBinding(\"C+\\\\\", InputHandler.TOGGLE_RECT);\n\n    // beginning and ending of the current line\n    /*\n    inputHandler.addKeyBinding(\"HOME\", InputHandler.HOME);\n    inputHandler.addKeyBinding(\"END\", InputHandler.END);\n    inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_HOME);\n    inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_END);\n    */\n\n    // for 0122, these have been changed for better compatability\n    // HOME and END now mean the beginning/end of the document\n    inputHandler.addKeyBinding(\"HOME\", InputHandler.DOCUMENT_HOME);\n    inputHandler.addKeyBinding(\"END\", InputHandler.DOCUMENT_END);\n    inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_DOC_END);\n\n    if (Base.isMacOS()) {\n      inputHandler.addKeyBinding(\"M+LEFT\", InputHandler.HOME);\n      inputHandler.addKeyBinding(\"M+RIGHT\", InputHandler.END);\n      inputHandler.addKeyBinding(\"M+S+LEFT\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"M+S+RIGHT\", InputHandler.SELECT_END);  // 0122\n    } else {\n      inputHandler.addKeyBinding(\"C+LEFT\", InputHandler.HOME);  // 0122\n      inputHandler.addKeyBinding(\"C+RIGHT\", InputHandler.END);  // 0122\n      inputHandler.addKeyBinding(\"C+S+HOME\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"C+S+END\", InputHandler.SELECT_END);  // 0122\n    }\n\n    inputHandler.addKeyBinding(\"PAGE_UP\", InputHandler.PREV_PAGE);\n    inputHandler.addKeyBinding(\"PAGE_DOWN\", InputHandler.NEXT_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_UP\", InputHandler.SELECT_PREV_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_DOWN\", InputHandler.SELECT_NEXT_PAGE);\n\n    inputHandler.addKeyBinding(\"LEFT\", InputHandler.PREV_CHAR);\n    inputHandler.addKeyBinding(\"S+LEFT\", InputHandler.SELECT_PREV_CHAR);\n    inputHandler.addKeyBinding(mod + \"+LEFT\", InputHandler.PREV_WORD);\n    inputHandler.addKeyBinding(mod + \"S+LEFT\", InputHandler.SELECT_PREV_WORD);\n    inputHandler.addKeyBinding(\"RIGHT\", InputHandler.NEXT_CHAR);\n    inputHandler.addKeyBinding(\"S+RIGHT\", InputHandler.SELECT_NEXT_CHAR);\n    inputHandler.addKeyBinding(mod + \"+RIGHT\", InputHandler.NEXT_WORD);\n    inputHandler.addKeyBinding(mod + \"S+RIGHT\", InputHandler.SELECT_NEXT_WORD);\n    inputHandler.addKeyBinding(\"UP\", InputHandler.PREV_LINE);\n    inputHandler.addKeyBinding(mod + \"+UP\", InputHandler.PREV_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+UP\", InputHandler.SELECT_PREV_LINE);\n    inputHandler.addKeyBinding(\"DOWN\", InputHandler.NEXT_LINE);\n    inputHandler.addKeyBinding(mod + \"+DOWN\", InputHandler.NEXT_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+DOWN\", InputHandler.SELECT_NEXT_LINE);\n\n    inputHandler.addKeyBinding(mod + \"+ENTER\", InputHandler.REPEAT);\n\n    document = new SyntaxDocument();\n    editable = true;\n    electricScroll = 3;\n\n    cols = 80;\n    rows = 15;\n\n\n    // moved from SyntaxUtilities\n    //DEFAULTS.styles = SyntaxUtilities.getDefaultSyntaxStyles();\n\n    styles = new SyntaxStyle[Token.ID_COUNT];\n\n    // comments\n    styles[Token.COMMENT1] = Preferences.getStyle(\"comment1\");\n    styles[Token.COMMENT2] = Preferences.getStyle(\"comment2\");\n\n    // abstract, final, private\n    styles[Token.KEYWORD1] = Preferences.getStyle(\"keyword1\");\n\n    // beginShape, point, line\n    styles[Token.KEYWORD2] = Preferences.getStyle(\"keyword2\");\n\n    // byte, char, short, color\n    styles[Token.KEYWORD3] = Preferences.getStyle(\"keyword3\");\n\n    // constants: null, true, this, RGB, TWO_PI\n    styles[Token.LITERAL1] = Preferences.getStyle(\"literal1\");\n\n    // p5 built in variables: mouseX, width, pixels\n    styles[Token.LITERAL2] = Preferences.getStyle(\"literal2\");\n\n    // ??\n    styles[Token.LABEL] = Preferences.getStyle(\"label\");\n\n    // + - = /\n    styles[Token.OPERATOR] = Preferences.getStyle(\"operator\");\n\n    // area that's not in use by the text (replaced with tildes)\n    styles[Token.INVALID] = Preferences.getStyle(\"invalid\");\n\n\n    // moved from TextAreaPainter\n\n    font = Preferences.getFont(\"editor.font\");\n\n    fgcolor = Preferences.getColor(\"editor.fgcolor\");\n    bgcolor = Preferences.getColor(\"editor.bgcolor\");\n\n    caretVisible = true;\n    caretBlinks = Preferences.getBoolean(\"editor.caret.blink\");\n    caretColor = Preferences.getColor(\"editor.caret.color\");\n\n    selectionColor = Preferences.getColor(\"editor.selection.color\");\n\n    lineHighlight =\n      Preferences.getBoolean(\"editor.linehighlight\");\n    lineHighlightColor =\n      Preferences.getColor(\"editor.linehighlight.color\");\n\n    bracketHighlight =\n      Preferences.getBoolean(\"editor.brackethighlight\");\n    bracketHighlightColor =\n      Preferences.getColor(\"editor.brackethighlight.color\");\n\n    eolMarkers = Preferences.getBoolean(\"editor.eolmarkers\");\n    eolMarkerColor = Preferences.getColor(\"editor.eolmarkers.color\");\n\n    paintInvalid = Preferences.getBoolean(\"editor.invalid\");\n  }","commit_id":"c7059278fb3341cbe0a4582480947ad11b4eae52","url":"https://github.com/processing/processing"},{"original_method":"public PdeTextAreaDefaults() {\n\n    inputHandler = new DefaultInputHandler();\n    //inputHandler.addDefaultKeyBindings();  // 0122\n\n    // use option on mac for things that are ctrl on windows/linux\n    String mod = Base.isMacOS() ? \"A\" : \"C\";\n\n    // right now, ctrl-up/down is select up/down, but mod should be\n    // used instead, because the mac expects it to be option(alt)\n\n    inputHandler.addKeyBinding(\"BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"DELETE\", InputHandler.DELETE);\n\n    //inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.BACKSPACE);\n    // for 0122, shift-backspace is delete\n    inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.DELETE);\n    inputHandler.addKeyBinding(\"S+DELETE\", InputHandler.DELETE);\n\n    // the following two were changing for 0122 for better mac/pc compatability\n    inputHandler.addKeyBinding(mod+\"+BACK_SPACE\", InputHandler.BACKSPACE_WORD);\n    inputHandler.addKeyBinding(mod+\"+DELETE\", InputHandler.DELETE_WORD);\n\n    // handled by listener, don't bother here\n    //inputHandler.addKeyBinding(\"ENTER\", InputHandler.INSERT_BREAK);\n    //inputHandler.addKeyBinding(\"TAB\", InputHandler.INSERT_TAB);\n\n    inputHandler.addKeyBinding(\"INSERT\", InputHandler.OVERWRITE);\n    // disabling for 0122, not sure what this does\n    //inputHandler.addKeyBinding(\"C+\\\\\", InputHandler.TOGGLE_RECT);\n\n    // for 0122, these have been changed for better compatability\n    // HOME and END now mean the beginning/end of the document\n    inputHandler.addKeyBinding(\"HOME\", InputHandler.DOCUMENT_HOME);\n    inputHandler.addKeyBinding(\"END\", InputHandler.DOCUMENT_END);\n    inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_DOC_END);\n\n    if (Base.isMacOS()) {\n      inputHandler.addKeyBinding(\"M+LEFT\", InputHandler.HOME);\n      inputHandler.addKeyBinding(\"M+RIGHT\", InputHandler.END);\n      inputHandler.addKeyBinding(\"MS+LEFT\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"MS+RIGHT\", InputHandler.SELECT_END);  // 0122\n    } else {\n      inputHandler.addKeyBinding(\"C+LEFT\", InputHandler.HOME);  // 0122\n      inputHandler.addKeyBinding(\"C+RIGHT\", InputHandler.END);  // 0122\n      inputHandler.addKeyBinding(\"CS+HOME\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"CS+END\", InputHandler.SELECT_END);  // 0122\n    }\n\n    inputHandler.addKeyBinding(\"PAGE_UP\", InputHandler.PREV_PAGE);\n    inputHandler.addKeyBinding(\"PAGE_DOWN\", InputHandler.NEXT_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_UP\", InputHandler.SELECT_PREV_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_DOWN\", InputHandler.SELECT_NEXT_PAGE);\n\n    inputHandler.addKeyBinding(\"LEFT\", InputHandler.PREV_CHAR);\n    inputHandler.addKeyBinding(\"S+LEFT\", InputHandler.SELECT_PREV_CHAR);\n    inputHandler.addKeyBinding(mod + \"+LEFT\", InputHandler.PREV_WORD);\n    inputHandler.addKeyBinding(mod + \"S+LEFT\", InputHandler.SELECT_PREV_WORD);\n    inputHandler.addKeyBinding(\"RIGHT\", InputHandler.NEXT_CHAR);\n    inputHandler.addKeyBinding(\"S+RIGHT\", InputHandler.SELECT_NEXT_CHAR);\n    inputHandler.addKeyBinding(mod + \"+RIGHT\", InputHandler.NEXT_WORD);\n    inputHandler.addKeyBinding(mod + \"S+RIGHT\", InputHandler.SELECT_NEXT_WORD);\n\n    inputHandler.addKeyBinding(\"UP\", InputHandler.PREV_LINE);\n    inputHandler.addKeyBinding(mod + \"+UP\", InputHandler.PREV_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+UP\", InputHandler.SELECT_PREV_LINE);\n    inputHandler.addKeyBinding(\"DOWN\", InputHandler.NEXT_LINE);\n    inputHandler.addKeyBinding(mod + \"+DOWN\", InputHandler.NEXT_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+DOWN\", InputHandler.SELECT_NEXT_LINE);\n\n    inputHandler.addKeyBinding(\"MS+UP\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"CS+UP\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"MS+DOWN\", InputHandler.SELECT_DOC_END);\n    inputHandler.addKeyBinding(\"CS+DOWN\", InputHandler.SELECT_DOC_END);\n\n    inputHandler.addKeyBinding(mod + \"+ENTER\", InputHandler.REPEAT);\n\n    document = new SyntaxDocument();\n    editable = true;\n    electricScroll = 3;\n\n    cols = 80;\n    rows = 15;\n\n\n    // moved from SyntaxUtilities\n    //DEFAULTS.styles = SyntaxUtilities.getDefaultSyntaxStyles();\n\n    styles = new SyntaxStyle[Token.ID_COUNT];\n\n    // comments\n    styles[Token.COMMENT1] = Preferences.getStyle(\"comment1\");\n    styles[Token.COMMENT2] = Preferences.getStyle(\"comment2\");\n\n    // abstract, final, private\n    styles[Token.KEYWORD1] = Preferences.getStyle(\"keyword1\");\n\n    // beginShape, point, line\n    styles[Token.KEYWORD2] = Preferences.getStyle(\"keyword2\");\n\n    // byte, char, short, color\n    styles[Token.KEYWORD3] = Preferences.getStyle(\"keyword3\");\n\n    // constants: null, true, this, RGB, TWO_PI\n    styles[Token.LITERAL1] = Preferences.getStyle(\"literal1\");\n\n    // p5 built in variables: mouseX, width, pixels\n    styles[Token.LITERAL2] = Preferences.getStyle(\"literal2\");\n\n    // ??\n    styles[Token.LABEL] = Preferences.getStyle(\"label\");\n\n    // + - = /\n    styles[Token.OPERATOR] = Preferences.getStyle(\"operator\");\n\n    // area that's not in use by the text (replaced with tildes)\n    styles[Token.INVALID] = Preferences.getStyle(\"invalid\");\n\n\n    // moved from TextAreaPainter\n\n    font = Preferences.getFont(\"editor.font\");\n\n    fgcolor = Preferences.getColor(\"editor.fgcolor\");\n    bgcolor = Preferences.getColor(\"editor.bgcolor\");\n\n    caretVisible = true;\n    caretBlinks = Preferences.getBoolean(\"editor.caret.blink\");\n    caretColor = Preferences.getColor(\"editor.caret.color\");\n\n    selectionColor = Preferences.getColor(\"editor.selection.color\");\n\n    lineHighlight =\n      Preferences.getBoolean(\"editor.linehighlight\");\n    lineHighlightColor =\n      Preferences.getColor(\"editor.linehighlight.color\");\n\n    bracketHighlight =\n      Preferences.getBoolean(\"editor.brackethighlight\");\n    bracketHighlightColor =\n      Preferences.getColor(\"editor.brackethighlight.color\");\n\n    eolMarkers = Preferences.getBoolean(\"editor.eolmarkers\");\n    eolMarkerColor = Preferences.getColor(\"editor.eolmarkers.color\");\n\n    paintInvalid = Preferences.getBoolean(\"editor.invalid\");\n  }","id":5754,"modified_method":"public PdeTextAreaDefaults() {\n\n    inputHandler = new DefaultInputHandler();\n    //inputHandler.addDefaultKeyBindings();  // 0122\n\n    // use option on mac for things that are ctrl on windows/linux\n    String mod = Base.isMacOS() ? \"A\" : \"C\";\n\n    // right now, ctrl-up/down is select up/down, but mod should be\n    // used instead, because the mac expects it to be option(alt)\n\n    inputHandler.addKeyBinding(\"BACK_SPACE\", InputHandler.BACKSPACE);\n    inputHandler.addKeyBinding(\"DELETE\", InputHandler.DELETE);\n\n    //inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.BACKSPACE);\n    // for 0122, shift-backspace is delete\n    inputHandler.addKeyBinding(\"S+BACK_SPACE\", InputHandler.DELETE);\n    inputHandler.addKeyBinding(\"S+DELETE\", InputHandler.DELETE);\n\n    // the following two were changing for 0122 for better mac/pc compatability\n    inputHandler.addKeyBinding(mod+\"+BACK_SPACE\", InputHandler.BACKSPACE_WORD);\n    inputHandler.addKeyBinding(mod+\"+DELETE\", InputHandler.DELETE_WORD);\n\n    // handled by listener, don't bother here\n    //inputHandler.addKeyBinding(\"ENTER\", InputHandler.INSERT_BREAK);\n    //inputHandler.addKeyBinding(\"TAB\", InputHandler.INSERT_TAB);\n\n    inputHandler.addKeyBinding(\"INSERT\", InputHandler.OVERWRITE);\n    // disabling for 0122, not sure what this does\n    //inputHandler.addKeyBinding(\"C+\\\\\", InputHandler.TOGGLE_RECT);\n\n    // for 0122, these have been changed for better compatability\n    // HOME and END now mean the beginning/end of the document\n    if (Base.isMacOS()) {\n      inputHandler.addKeyBinding(\"HOME\", InputHandler.DOCUMENT_HOME);\n      inputHandler.addKeyBinding(\"END\", InputHandler.DOCUMENT_END);\n      inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_DOC_HOME);\n      inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_DOC_END);\n    } else {\n      // for 0123 added the proper windows defaults\n      inputHandler.addKeyBinding(\"HOME\", InputHandler.HOME);\n      inputHandler.addKeyBinding(\"END\", InputHandler.END);\n      inputHandler.addKeyBinding(\"S+HOME\", InputHandler.SELECT_HOME);\n      inputHandler.addKeyBinding(\"S+END\", InputHandler.SELECT_END);\n      inputHandler.addKeyBinding(\"C+HOME\", InputHandler.DOCUMENT_HOME);\n      inputHandler.addKeyBinding(\"C+END\", InputHandler.DOCUMENT_END);\n      inputHandler.addKeyBinding(\"CS+HOME\", InputHandler.SELECT_DOC_HOME);\n      inputHandler.addKeyBinding(\"CS+END\", InputHandler.SELECT_DOC_END);\n    }\n\n    if (Base.isMacOS()) {\n      inputHandler.addKeyBinding(\"M+LEFT\", InputHandler.HOME);\n      inputHandler.addKeyBinding(\"M+RIGHT\", InputHandler.END);\n      inputHandler.addKeyBinding(\"MS+LEFT\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"MS+RIGHT\", InputHandler.SELECT_END);  // 0122\n    } else {\n      inputHandler.addKeyBinding(\"C+LEFT\", InputHandler.HOME);  // 0122\n      inputHandler.addKeyBinding(\"C+RIGHT\", InputHandler.END);  // 0122\n      inputHandler.addKeyBinding(\"CS+HOME\", InputHandler.SELECT_HOME); // 0122\n      inputHandler.addKeyBinding(\"CS+END\", InputHandler.SELECT_END);  // 0122\n    }\n\n    inputHandler.addKeyBinding(\"PAGE_UP\", InputHandler.PREV_PAGE);\n    inputHandler.addKeyBinding(\"PAGE_DOWN\", InputHandler.NEXT_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_UP\", InputHandler.SELECT_PREV_PAGE);\n    inputHandler.addKeyBinding(\"S+PAGE_DOWN\", InputHandler.SELECT_NEXT_PAGE);\n\n    inputHandler.addKeyBinding(\"LEFT\", InputHandler.PREV_CHAR);\n    inputHandler.addKeyBinding(\"S+LEFT\", InputHandler.SELECT_PREV_CHAR);\n    inputHandler.addKeyBinding(mod + \"+LEFT\", InputHandler.PREV_WORD);\n    inputHandler.addKeyBinding(mod + \"S+LEFT\", InputHandler.SELECT_PREV_WORD);\n    inputHandler.addKeyBinding(\"RIGHT\", InputHandler.NEXT_CHAR);\n    inputHandler.addKeyBinding(\"S+RIGHT\", InputHandler.SELECT_NEXT_CHAR);\n    inputHandler.addKeyBinding(mod + \"+RIGHT\", InputHandler.NEXT_WORD);\n    inputHandler.addKeyBinding(mod + \"S+RIGHT\", InputHandler.SELECT_NEXT_WORD);\n\n    inputHandler.addKeyBinding(\"UP\", InputHandler.PREV_LINE);\n    inputHandler.addKeyBinding(mod + \"+UP\", InputHandler.PREV_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+UP\", InputHandler.SELECT_PREV_LINE);\n    inputHandler.addKeyBinding(\"DOWN\", InputHandler.NEXT_LINE);\n    inputHandler.addKeyBinding(mod + \"+DOWN\", InputHandler.NEXT_LINE);  // p5\n    inputHandler.addKeyBinding(\"S+DOWN\", InputHandler.SELECT_NEXT_LINE);\n\n    inputHandler.addKeyBinding(\"MS+UP\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"CS+UP\", InputHandler.SELECT_DOC_HOME);\n    inputHandler.addKeyBinding(\"MS+DOWN\", InputHandler.SELECT_DOC_END);\n    inputHandler.addKeyBinding(\"CS+DOWN\", InputHandler.SELECT_DOC_END);\n\n    inputHandler.addKeyBinding(mod + \"+ENTER\", InputHandler.REPEAT);\n\n    document = new SyntaxDocument();\n    editable = true;\n    electricScroll = 3;\n\n    cols = 80;\n    rows = 15;\n\n\n    // moved from SyntaxUtilities\n    //DEFAULTS.styles = SyntaxUtilities.getDefaultSyntaxStyles();\n\n    styles = new SyntaxStyle[Token.ID_COUNT];\n\n    // comments\n    styles[Token.COMMENT1] = Preferences.getStyle(\"comment1\");\n    styles[Token.COMMENT2] = Preferences.getStyle(\"comment2\");\n\n    // abstract, final, private\n    styles[Token.KEYWORD1] = Preferences.getStyle(\"keyword1\");\n\n    // beginShape, point, line\n    styles[Token.KEYWORD2] = Preferences.getStyle(\"keyword2\");\n\n    // byte, char, short, color\n    styles[Token.KEYWORD3] = Preferences.getStyle(\"keyword3\");\n\n    // constants: null, true, this, RGB, TWO_PI\n    styles[Token.LITERAL1] = Preferences.getStyle(\"literal1\");\n\n    // p5 built in variables: mouseX, width, pixels\n    styles[Token.LITERAL2] = Preferences.getStyle(\"literal2\");\n\n    // ??\n    styles[Token.LABEL] = Preferences.getStyle(\"label\");\n\n    // + - = /\n    styles[Token.OPERATOR] = Preferences.getStyle(\"operator\");\n\n    // area that's not in use by the text (replaced with tildes)\n    styles[Token.INVALID] = Preferences.getStyle(\"invalid\");\n\n\n    // moved from TextAreaPainter\n\n    font = Preferences.getFont(\"editor.font\");\n\n    fgcolor = Preferences.getColor(\"editor.fgcolor\");\n    bgcolor = Preferences.getColor(\"editor.bgcolor\");\n\n    caretVisible = true;\n    caretBlinks = Preferences.getBoolean(\"editor.caret.blink\");\n    caretColor = Preferences.getColor(\"editor.caret.color\");\n\n    selectionColor = Preferences.getColor(\"editor.selection.color\");\n\n    lineHighlight =\n      Preferences.getBoolean(\"editor.linehighlight\");\n    lineHighlightColor =\n      Preferences.getColor(\"editor.linehighlight.color\");\n\n    bracketHighlight =\n      Preferences.getBoolean(\"editor.brackethighlight\");\n    bracketHighlightColor =\n      Preferences.getColor(\"editor.brackethighlight.color\");\n\n    eolMarkers = Preferences.getBoolean(\"editor.eolmarkers\");\n    eolMarkerColor = Preferences.getColor(\"editor.eolmarkers.color\");\n\n    paintInvalid = Preferences.getBoolean(\"editor.invalid\");\n  }","commit_id":"c1eb22ab04512c7bff810aeec8a0bbfd1b0ebd58","url":"https://github.com/processing/processing"},{"original_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"GRADLE_RUNTIME\")) {\n            Set<File> classpath = new LinkedHashSet<File>();\n            for (Module module : moduleRegistry.getModule(\"gradle-launcher\").getAllRequiredModules()) {\n                classpath.addAll(module.getClasspath());\n            }\n            return new DefaultClassPath(classpath);\n        }\n        if (name.equals(\"GRADLE_CORE\")) {\n            return new DefaultClassPath(moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath());\n        }\n        if (name.equals(\"COMMONS_CLI\")) {\n            return new DefaultClassPath(moduleRegistry.getExternalModule(\"commons-cli\").getClasspath());\n        }\n        if (name.equals(\"ANT\")) {\n            Set<File> classpath = new LinkedHashSet<File>();\n            classpath.addAll(moduleRegistry.getExternalModule(\"ant\").getClasspath());\n            classpath.addAll(moduleRegistry.getExternalModule(\"ant-launcher\").getClasspath());\n            return new DefaultClassPath(classpath);\n        }\n        if (name.equals(\"GROOVY\")) {\n            return new DefaultClassPath(moduleRegistry.getExternalModule(\"groovy-all\").getClasspath());\n        }\n\n        return null;\n    }","id":5755,"modified_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"GRADLE_RUNTIME\")) {\n            ClassPath classpath = new DefaultClassPath();\n            for (Module module : moduleRegistry.getModule(\"gradle-launcher\").getAllRequiredModules()) {\n                classpath = classpath.plus(module.getClasspath());\n            }\n            return classpath;\n        }\n        if (name.equals(\"GRADLE_CORE\")) {\n            return moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath();\n        }\n        if (name.equals(\"COMMONS_CLI\")) {\n            return moduleRegistry.getExternalModule(\"commons-cli\").getClasspath();\n        }\n        if (name.equals(\"ANT\")) {\n            ClassPath classpath = new DefaultClassPath();\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"ant\").getClasspath());\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"ant-launcher\").getClasspath());\n            return classpath;\n        }\n        if (name.equals(\"GROOVY\")) {\n            return moduleRegistry.getExternalModule(\"groovy-all\").getClasspath();\n        }\n\n        return null;\n    }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"public String startDaemon() {\n        DefaultModuleRegistry registry = new DefaultModuleRegistry();\n        Set<File> bootstrapClasspath = new LinkedHashSet<File>();\n        bootstrapClasspath.addAll(registry.getModule(\"gradle-launcher\").getImplementationClasspath());\n        if (registry.getGradleHome() == null) {\n            // Running from the classpath - chuck in everything we can find\n            bootstrapClasspath.addAll(registry.getFullClasspath());\n        }\n        if (bootstrapClasspath.isEmpty()) {\n            throw new IllegalStateException(\"Unable to construct a bootstrap classpath when starting the daemon\");\n        }\n\n        List<String> daemonArgs = new ArrayList<String>();\n        daemonArgs.add(daemonParameters.getEffectiveJavaExecutable());\n\n        List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs();\n        LOGGER.debug(\"Using daemon opts: {}\", daemonOpts);\n        daemonArgs.addAll(daemonOpts);\n        //Useful for debugging purposes - simply uncomment and connect to debug\n//        daemonArgs.add(\"-Xdebug\");\n//        daemonArgs.add(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006\");\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(GUtil.join(bootstrapClasspath, File.pathSeparator));\n        daemonArgs.add(GradleDaemon.class.getName());\n        daemonArgs.add(GradleVersion.current().getVersion());\n        daemonArgs.add(daemonDir.getBaseDir().getAbsolutePath());\n        daemonArgs.add(String.valueOf(daemonParameters.getIdleTimeout()));\n        daemonArgs.add(daemonParameters.getUid());\n\n        //all remaining arguments are daemon startup jvm opts.\n        //we need to pass them as *program* arguments to avoid problems with getInputArguments().\n        daemonArgs.addAll(daemonOpts);\n\n        startProcess(daemonArgs, daemonDir.getVersionedDir());\n\n        return daemonParameters.getUid();\n    }","id":5756,"modified_method":"public String startDaemon() {\n        DefaultModuleRegistry registry = new DefaultModuleRegistry();\n        Set<File> bootstrapClasspath = new LinkedHashSet<File>();\n        bootstrapClasspath.addAll(registry.getModule(\"gradle-launcher\").getImplementationClasspath().getAsFiles());\n        if (registry.getGradleHome() == null) {\n            // Running from the classpath - chuck in everything we can find\n            bootstrapClasspath.addAll(registry.getFullClasspath());\n        }\n        if (bootstrapClasspath.isEmpty()) {\n            throw new IllegalStateException(\"Unable to construct a bootstrap classpath when starting the daemon\");\n        }\n\n        List<String> daemonArgs = new ArrayList<String>();\n        daemonArgs.add(daemonParameters.getEffectiveJavaExecutable());\n\n        List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs();\n        LOGGER.debug(\"Using daemon opts: {}\", daemonOpts);\n        daemonArgs.addAll(daemonOpts);\n        //Useful for debugging purposes - simply uncomment and connect to debug\n//        daemonArgs.add(\"-Xdebug\");\n//        daemonArgs.add(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006\");\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(GUtil.join(bootstrapClasspath, File.pathSeparator));\n        daemonArgs.add(GradleDaemon.class.getName());\n        daemonArgs.add(GradleVersion.current().getVersion());\n        daemonArgs.add(daemonDir.getBaseDir().getAbsolutePath());\n        daemonArgs.add(String.valueOf(daemonParameters.getIdleTimeout()));\n        daemonArgs.add(daemonParameters.getUid());\n\n        //all remaining arguments are daemon startup jvm opts.\n        //we need to pass them as *program* arguments to avoid problems with getInputArguments().\n        daemonArgs.addAll(daemonOpts);\n\n        startProcess(daemonArgs, daemonDir.getVersionedDir());\n\n        return daemonParameters.getUid();\n    }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultModule(String name, Set<File> implementationClasspath, Set<File> runtimeClasspath, Set<Module> modules) {\n            this.name = name;\n            this.implementationClasspath = implementationClasspath;\n            this.runtimeClasspath = runtimeClasspath;\n            this.modules = modules;\n            this.classpath = GUtil.addSets(implementationClasspath, runtimeClasspath);\n        }","id":5757,"modified_method":"public DefaultModule(String name, Set<File> implementationClasspath, Set<File> runtimeClasspath, Set<Module> modules) {\n            this.name = name;\n            this.implementationClasspath = new DefaultClassPath(implementationClasspath);\n            this.runtimeClasspath = new DefaultClassPath(runtimeClasspath);\n            this.modules = modules;\n            this.classpath = new DefaultClassPath(GUtil.addSets(implementationClasspath, runtimeClasspath));\n        }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(GRADLE_API.name())) {\n            Set<File> classpath = new LinkedHashSet<File>();\n            Module core = moduleRegistry.getModule(\"gradle-core\");\n            for (Module module : core.getAllRequiredModules()) {\n                classpath.addAll(module.getClasspath());\n            }\n            classpath.addAll(moduleRegistry.getModule(\"gradle-core-impl\").getClasspath());\n            try {\n                classpath.addAll(moduleRegistry.getModule(\"gradle-tooling-api\").getImplementationClasspath());\n            } catch (UnknownModuleException e) {\n                // Ignore\n            }\n            for (Module pluginModule : pluginModuleRegistry.getPluginModules()) {\n                classpath.addAll(pluginModule.getClasspath());\n            }\n            return new DefaultClassPath(classpath);\n        }\n        if (name.equals(LOCAL_GROOVY.name())) {\n            return new DefaultClassPath(moduleRegistry.getExternalModule(\"groovy-all\").getClasspath());\n        }\n\n        return null;\n    }","id":5758,"modified_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(GRADLE_API.name())) {\n            ClassPath classpath = new DefaultClassPath();\n            Module core = moduleRegistry.getModule(\"gradle-core\");\n            for (Module module : core.getAllRequiredModules()) {\n                classpath = classpath.plus(module.getClasspath());\n            }\n            classpath = classpath.plus(moduleRegistry.getModule(\"gradle-core-impl\").getClasspath());\n            try {\n                classpath = classpath.plus(moduleRegistry.getModule(\"gradle-tooling-api\").getImplementationClasspath());\n            } catch (UnknownModuleException e) {\n                // Ignore\n            }\n            for (Module pluginModule : pluginModuleRegistry.getPluginModules()) {\n                classpath = classpath.plus(pluginModule.getClasspath());\n            }\n            return classpath;\n        }\n        if (name.equals(LOCAL_GROOVY.name())) {\n            return moduleRegistry.getExternalModule(\"groovy-all\").getClasspath();\n        }\n\n        return null;\n    }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"GRADLE_PLUGINS\")) {\n            Set<File> classpath = new LinkedHashSet<File>();\n            for (Module pluginModule : pluginModuleRegistry.getPluginModules()) {\n                classpath.addAll(pluginModule.getClasspath());\n            }\n            return new DefaultClassPath(classpath);\n        }\n        if (name.equals(\"GRADLE_CORE_IMPL\")) {\n            return new DefaultClassPath(moduleRegistry.getModule(\"gradle-core-impl\").getClasspath());\n        }\n\n        return null;\n    }","id":5759,"modified_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"GRADLE_PLUGINS\")) {\n            ClassPath classpath = new DefaultClassPath();\n            for (Module pluginModule : pluginModuleRegistry.getPluginModules()) {\n                classpath = classpath.plus(pluginModule.getClasspath());\n            }\n            return classpath;\n        }\n        if (name.equals(\"GRADLE_CORE_IMPL\")) {\n            return moduleRegistry.getModule(\"gradle-core-impl\").getClasspath();\n        }\n\n        return null;\n    }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"WORKER_PROCESS\")) {\n            // TODO - split out a logging project and use its classpath, instead of hardcoding logging dependencies here\n            Set<File> classpath = new LinkedHashSet<File>();\n            classpath.addAll(moduleRegistry.getModule(\"gradle-base-services\").getImplementationClasspath());\n            classpath.addAll(moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath());\n            classpath.addAll(moduleRegistry.getModule(\"gradle-cli\").getImplementationClasspath());\n            classpath.addAll(moduleRegistry.getModule(\"gradle-native\").getImplementationClasspath());\n            classpath.addAll(moduleRegistry.getExternalModule(\"slf4j-api\").getClasspath());\n            classpath.addAll(moduleRegistry.getExternalModule(\"logback-classic\").getClasspath());\n            classpath.addAll(moduleRegistry.getExternalModule(\"logback-core\").getClasspath());\n            classpath.addAll(moduleRegistry.getExternalModule(\"jul-to-slf4j\").getClasspath());\n            return new DefaultClassPath(classpath);\n        }\n        if (name.equals(\"WORKER_MAIN\")) {\n            synchronized (lock) {\n                if (workerClassPath == null) {\n                    PersistentCache cache = cacheRepository.cache(\"workerMain\").withInitializer(new CacheInitializer()).open();\n                    workerClassPath = new DefaultClassPath(Collections.singleton(classesDir(cache)));\n                }\n                return workerClassPath;\n            }\n        }\n\n        return null;\n    }","id":5760,"modified_method":"public ClassPath findClassPath(String name) {\n        if (name.equals(\"WORKER_PROCESS\")) {\n            // TODO - split out a logging project and use its classpath, instead of hardcoding logging dependencies here\n            ClassPath classpath = new DefaultClassPath();\n            classpath = classpath.plus(moduleRegistry.getModule(\"gradle-base-services\").getImplementationClasspath());\n            classpath = classpath.plus(moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath());\n            classpath = classpath.plus(moduleRegistry.getModule(\"gradle-cli\").getImplementationClasspath());\n            classpath = classpath.plus(moduleRegistry.getModule(\"gradle-native\").getImplementationClasspath());\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"slf4j-api\").getClasspath());\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"logback-classic\").getClasspath());\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"logback-core\").getClasspath());\n            classpath = classpath.plus(moduleRegistry.getExternalModule(\"jul-to-slf4j\").getClasspath());\n            return classpath;\n        }\n        if (name.equals(\"WORKER_MAIN\")) {\n            synchronized (lock) {\n                if (workerClassPath == null) {\n                    PersistentCache cache = cacheRepository.cache(\"workerMain\").withInitializer(new CacheInitializer()).open();\n                    workerClassPath = new DefaultClassPath(classesDir(cache));\n                }\n                return workerClassPath;\n            }\n        }\n\n        return null;\n    }","commit_id":"d3e9a60455525a7befbb6328d49c0b01f120afe0","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            SacrificeTargetCost cost = new SacrificeTargetCost(new TargetControlledCreaturePermanent());\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                cost.clearPaid();\r\n                Player player = game.getPlayer(playerId);\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Sacrifice a creature to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" sacrifices a creature to counter \" + spell.getIdName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5761,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            SacrificeTargetCost cost = new SacrificeTargetCost(new TargetControlledCreaturePermanent());\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                cost.clearPaid();\r\n                Player player = game.getPlayer(playerId);\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Sacrifice a creature to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" sacrifices a creature to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            PayLifeCost cost = new PayLifeCost(5);\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Pay 5 life to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" pays 5 life to counter \" + spell.getIdName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5762,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            PayLifeCost cost = new PayLifeCost(5);\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Pay 5 life to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" pays 5 life to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\n        this.cards.clear();\n        Player player = game.getPlayer(controllerId);\n        if (player == null) {\n            return false;\n        }\n        int amount = this.getTargets().get(0).getNumberOfTargets();\n        if (randomDiscard) {\n            this.cards.addAll(player.discard(amount, true, ability, game).getCards(game));\n        } else {\n            if (targets.choose(Outcome.Discard, controllerId, sourceId, game)) {\n                for (UUID targetId : targets.get(0).getTargets()) {\n                    Card card = player.getHand().get(targetId, game);\n                    if (card == null) {\n                        return false;\n                    }\n                    player.discard(card, ability, game);\n                    this.cards.add(card.copy());\n                }\n            }\n        }\n        paid = cards.size() >= amount;\n        return paid;\n    }","id":5763,"modified_method":"@Override\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\n        this.cards.clear();\n        this.targets.clear();\n        Player player = game.getPlayer(controllerId);\n        if (player == null) {\n            return false;\n        }\n        int amount = this.getTargets().get(0).getNumberOfTargets();\n        if (randomDiscard) {\n            this.cards.addAll(player.discard(amount, true, ability, game).getCards(game));\n        } else {\n            if (targets.choose(Outcome.Discard, controllerId, sourceId, game)) {\n                for (UUID targetId : targets.get(0).getTargets()) {\n                    Card card = player.getHand().get(targetId, game);\n                    if (card == null) {\n                        return false;\n                    }\n                    player.discard(card, ability, game);\n                    this.cards.add(card.copy());\n                }\n            }\n        }\n        paid = cards.size() >= amount;\n        return paid;\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public void clearPaid() {\n        super.clearPaid();\n        cards.clear();\n    }","id":5764,"modified_method":"@Override\n    public void clearPaid() {\n        super.clearPaid();\n        this.cards.clear();\n        this.targets.clear();\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n\r\n        StackObject spell = null;\r\n        for (StackObject objet : game.getStack()) {\r\n            if (objet instanceof Spell && objet.getSourceId().equals(source.getSourceId())) {\r\n                spell = objet;\r\n            }\r\n        }\r\n        if (spell != null) {\r\n            DiscardTargetCost cost = new DiscardTargetCost(new TargetCardInHand(3, 3, new FilterCard()));\r\n            for (UUID uuid : game.getPlayerList()) {\r\n                Player player = game.getPlayer(uuid);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(Outcome.Detriment, \"Discard three cards to counter \" + spell.getName() + \"?\", source, game)) {\r\n\r\n                    if (cost.pay(source, game, source.getSourceId(), uuid, false)) {\r\n                        game.informPlayers(player.getLogName() + \" discards 3 cards to counter \" + spell.getName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5765,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            DiscardTargetCost cost = new DiscardTargetCost(new TargetCardInHand(3, 3, new FilterCard()));\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Discard three cards to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), playerId, false)) {\r\n                        game.informPlayers(player.getLogName() + \" discards 3 cards to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"public CounterSourceEffect() {\r\n        super(Outcome.Detriment);\r\n    }","id":5766,"modified_method":"public CounterSourceEffect() {\r\n        super(Outcome.AIDontUseIt);\r\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                if (player.chooseUse(outcome, \"Pay half your life, rounded up to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    Integer amount = (int) Math.ceil(player.getLife() / 2f);\r\n                    player.loseLife(amount, game);\r\n                    game.informPlayers(player.getLogName() + \" pays half his or her life, rounded up to counter \" + spell.getIdName() + \".\");\r\n                    game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5767,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                if (player.chooseUse(outcome, \"Pay half your life, rounded up to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    Integer amount = (int) Math.ceil(player.getLife() / 2f);\r\n                    player.loseLife(amount, game);\r\n                    game.informPlayers(player.getLogName() + \" pays half his or her life, rounded up to counter \" + sourceObject.getIdName() + \".\");\r\n                    Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                    if (spell != null) {\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"12500464bed37dd453fe50c8f3ac3f8ded93f85c","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            SacrificeTargetCost cost = new SacrificeTargetCost(new TargetControlledCreaturePermanent());\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                cost.clearPaid();\r\n                Player player = game.getPlayer(playerId);\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Sacrifice a creature to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" sacrifices a creature to counter \" + spell.getIdName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5768,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            SacrificeTargetCost cost = new SacrificeTargetCost(new TargetControlledCreaturePermanent());\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                cost.clearPaid();\r\n                Player player = game.getPlayer(playerId);\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Sacrifice a creature to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" sacrifices a creature to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            PayLifeCost cost = new PayLifeCost(5);\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Pay 5 life to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" pays 5 life to counter \" + spell.getIdName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5769,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            PayLifeCost cost = new PayLifeCost(5);\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Pay 5 life to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), player.getId(), false)) {\r\n                        game.informPlayers(player.getLogName() + \" pays 5 life to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\n        this.cards.clear();\n        Player player = game.getPlayer(controllerId);\n        if (player == null) {\n            return false;\n        }\n        int amount = this.getTargets().get(0).getNumberOfTargets();\n        if (randomDiscard) {\n            this.cards.addAll(player.discard(amount, true, ability, game).getCards(game));\n        } else {\n            if (targets.choose(Outcome.Discard, controllerId, sourceId, game)) {\n                for (UUID targetId : targets.get(0).getTargets()) {\n                    Card card = player.getHand().get(targetId, game);\n                    if (card == null) {\n                        return false;\n                    }\n                    player.discard(card, ability, game);\n                    this.cards.add(card.copy());\n                }\n            }\n        }\n        paid = cards.size() >= amount;\n        return paid;\n    }","id":5770,"modified_method":"@Override\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\n        this.cards.clear();\n        this.targets.clear();\n        Player player = game.getPlayer(controllerId);\n        if (player == null) {\n            return false;\n        }\n        int amount = this.getTargets().get(0).getNumberOfTargets();\n        if (randomDiscard) {\n            this.cards.addAll(player.discard(amount, true, ability, game).getCards(game));\n        } else {\n            if (targets.choose(Outcome.Discard, controllerId, sourceId, game)) {\n                for (UUID targetId : targets.get(0).getTargets()) {\n                    Card card = player.getHand().get(targetId, game);\n                    if (card == null) {\n                        return false;\n                    }\n                    player.discard(card, ability, game);\n                    this.cards.add(card.copy());\n                }\n            }\n        }\n        paid = cards.size() >= amount;\n        return paid;\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public void clearPaid() {\n        super.clearPaid();\n        cards.clear();\n    }","id":5771,"modified_method":"@Override\n    public void clearPaid() {\n        super.clearPaid();\n        this.cards.clear();\n        this.targets.clear();\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"public CounterSourceEffect() {\r\n        super(Outcome.Detriment);\r\n    }","id":5772,"modified_method":"public CounterSourceEffect() {\r\n        super(Outcome.AIDontUseIt);\r\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n\r\n        StackObject spell = null;\r\n        for (StackObject objet : game.getStack()) {\r\n            if (objet instanceof Spell && objet.getSourceId().equals(source.getSourceId())) {\r\n                spell = objet;\r\n            }\r\n        }\r\n        if (spell != null) {\r\n            DiscardTargetCost cost = new DiscardTargetCost(new TargetCardInHand(3, 3, new FilterCard()));\r\n            for (UUID uuid : game.getPlayerList()) {\r\n                Player player = game.getPlayer(uuid);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(Outcome.Detriment, \"Discard three cards to counter \" + spell.getName() + \"?\", source, game)) {\r\n\r\n                    if (cost.pay(source, game, source.getSourceId(), uuid, false)) {\r\n                        game.informPlayers(player.getLogName() + \" discards 3 cards to counter \" + spell.getName() + \".\");\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5773,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            DiscardTargetCost cost = new DiscardTargetCost(new TargetCardInHand(3, 3, new FilterCard()));\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                cost.clearPaid();\r\n                if (cost.canPay(source, source.getSourceId(), player.getId(), game)\r\n                        && player.chooseUse(outcome, \"Discard three cards to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    if (cost.pay(source, game, source.getSourceId(), playerId, false)) {\r\n                        game.informPlayers(player.getLogName() + \" discards 3 cards to counter \" + sourceObject.getIdName() + \".\");\r\n                        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                        if (spell != null) {\r\n                            game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(source.getSourceId());\r\n        if (spell != null) {\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                if (player.chooseUse(outcome, \"Pay half your life, rounded up to counter \" + spell.getIdName() + \"?\", source, game)) {\r\n                    Integer amount = (int) Math.ceil(player.getLife() / 2f);\r\n                    player.loseLife(amount, game);\r\n                    game.informPlayers(player.getLogName() + \" pays half his or her life, rounded up to counter \" + spell.getIdName() + \".\");\r\n                    game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":5774,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        MageObject sourceObject = source.getSourceObject(game);\r\n        if (sourceObject != null) {\r\n            for (UUID playerId : game.getState().getPlayerList(source.getControllerId())) {\r\n                Player player = game.getPlayer(playerId);\r\n                if (player.chooseUse(outcome, \"Pay half your life, rounded up to counter \" + sourceObject.getIdName() + \"?\", source, game)) {\r\n                    Integer amount = (int) Math.ceil(player.getLife() / 2f);\r\n                    player.loseLife(amount, game);\r\n                    game.informPlayers(player.getLogName() + \" pays half his or her life, rounded up to counter \" + sourceObject.getIdName() + \".\");\r\n                    Spell spell = game.getStack().getSpell(source.getSourceId());\r\n                    if (spell != null) {\r\n                        game.getStack().counter(spell.getId(), source.getSourceId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"7e768e787a2d70d0e0734d920d1387d47a4ca7b5","url":"https://github.com/magefree/mage"},{"original_method":"protected String getAfterFileName() {\n        return getTestName(false) + \".kt.after\";\n    }","id":5775,"modified_method":"protected String afterFileName() {\n        return getTestName(false) + \".kt.after\";\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void doTest(CompletionType type, int time, @Nullable String lookupString, @Nullable String tailText, char completionChar) {\n        myFixture.configureByFile(getBeforeFileName());\n\n        if (lookupString != null || tailText != null) {\n            myFixture.complete(type, time);\n\n            LookupElement item = getExistentLookupElement(lookupString, tailText);\n            if (item != null) {\n                selectItem(item, completionChar);\n            }\n        }\n        else {\n            forceCompleteFirst(type, time);\n        }\n\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5776,"modified_method":"public void doTest(CompletionType type, int time, @Nullable String lookupString, @Nullable String tailText, char completionChar) {\n        myFixture.configureByFile(fileName());\n\n        if (lookupString != null || tailText != null) {\n            myFixture.complete(type, time);\n\n            LookupElement item = getExistentLookupElement(lookupString, tailText);\n            if (item != null) {\n                selectItem(item, completionChar);\n            }\n        }\n        else {\n            forceCompleteFirst(type, time);\n        }\n\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testSingleBrackets() {\n        myFixture.configureByFile(getBeforeFileName());\n        myFixture.type('(');\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5777,"modified_method":"public void testSingleBrackets() {\n        myFixture.configureByFile(fileName());\n        myFixture.type('(');\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testInsertFunctionWithBothParentheses() {\n        myFixture.configureByFile(getBeforeFileName());\n        myFixture.type(\"test()\");\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5778,"modified_method":"public void testInsertFunctionWithBothParentheses() {\n        myFixture.configureByFile(fileName());\n        myFixture.type(\"test()\");\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean isImportedWithKotlinDefault(ImportPath importPath) {\n        for (ImportPath defaultJetImport : DefaultModuleConfiguration.DEFAULT_JET_IMPORTS) {\n            if (QualifiedNamesUtil.isImported(defaultJetImport, importPath)) {\n                return true;\n            }\n        }\n        return false;\n    }","id":5779,"modified_method":"public static boolean isImportedWithKotlinDefault(ImportPath importPath) {\n        return QualifiedNamesUtil.isImported(DefaultModuleConfiguration.DEFAULT_JET_IMPORTS, importPath);\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean doNeedImport(@NotNull ImportPath importPath, @NotNull JetFile file, List<JetImportDirective> importDirectives) {\n        if (importPath.fqnPart().firstSegmentIs(JavaDescriptorResolver.JAVA_ROOT)) {\n            FqName withoutJavaRoot = QualifiedNamesUtil.withoutFirstSegment(importPath.fqnPart());\n            importPath = new ImportPath(withoutJavaRoot, importPath.isAllUnder(), importPath.getAlias());\n        }\n\n        if (isImportedByDefault(importPath, JetPsiUtil.getFQName(file))) {\n            return false;\n        }\n\n        if (!importDirectives.isEmpty()) {\n            // Check if import is already present\n            for (JetImportDirective directive : importDirectives) {\n                ImportPath existentImportPath = JetPsiUtil.getImportPath(directive);\n                if (existentImportPath != null && QualifiedNamesUtil.isImported(existentImportPath, importPath)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","id":5780,"modified_method":"public static boolean doNeedImport(@NotNull ImportPath importPath, @NotNull JetFile file, List<JetImportDirective> importDirectives) {\n        if (importPath.fqnPart().firstSegmentIs(JavaDescriptorResolver.JAVA_ROOT)) {\n            FqName withoutJavaRoot = QualifiedNamesUtil.withoutFirstSegment(importPath.fqnPart());\n            importPath = new ImportPath(withoutJavaRoot, importPath.isAllUnder(), importPath.getAlias());\n        }\n\n        if (isImportedByDefault(importPath, file)) {\n            return false;\n        }\n\n        if (!importDirectives.isEmpty()) {\n            // Check if import is already present\n            for (JetImportDirective directive : importDirectives) {\n                ImportPath existentImportPath = JetPsiUtil.getImportPath(directive);\n                if (existentImportPath != null && QualifiedNamesUtil.isImported(existentImportPath, importPath)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * Check that import is useless.\n     */\n    private static boolean isImportedByDefault(@NotNull ImportPath importPath, @NotNull FqName filePackageFqn) {\n        if (importPath.fqnPart().isRoot()) {\n            return true;\n        }\n\n        if (!importPath.isAllUnder() && !importPath.hasAlias()) {\n            // Single element import without .* and alias is useless\n            if (QualifiedNamesUtil.isOneSegmentFQN(importPath.fqnPart())) {\n                return true;\n            }\n\n            // There's no need to import a declaration from the package of current file\n            if (filePackageFqn.equals(importPath.fqnPart().parent())) {\n                return true;\n            }\n        }\n\n        if (isImportedWithKotlinDefault(importPath)) return true;\n        if (isImportedWithJavaDefault(importPath)) return true;\n\n        return false;\n    }","id":5781,"modified_method":"/**\n     * Check that import is useless.\n     */\n    private static boolean isImportedByDefault(@NotNull ImportPath importPath, @NotNull JetFile jetFile) {\n        if (importPath.fqnPart().isRoot()) {\n            return true;\n        }\n\n        if (!importPath.isAllUnder() && !importPath.hasAlias()) {\n            // Single element import without .* and alias is useless\n            if (QualifiedNamesUtil.isOneSegmentFQN(importPath.fqnPart())) {\n                return true;\n            }\n\n            // There's no need to import a declaration from the package of current file\n            if (JetPsiUtil.getFQName(jetFile).equals(importPath.fqnPart().parent())) {\n                return true;\n            }\n        }\n\n        if (isImportedWithKotlinDefault(importPath)) return true;\n\n        if (KotlinFrameworkDetector.isJsKotlinModule(jetFile)) {\n            return isImportedWithJsDefault(importPath);\n        }\n        else {\n            return isImportedWithJavaDefault(importPath);\n        }\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean isImportedWithJavaDefault(ImportPath importPath) {\n        for (ImportPath defaultJavaImport : JavaBridgeConfiguration.DEFAULT_JAVA_IMPORTS) {\n            if (QualifiedNamesUtil.isImported(defaultJavaImport, importPath)) {\n                return true;\n            }\n        }\n        return false;\n    }","id":5782,"modified_method":"public static boolean isImportedWithJavaDefault(ImportPath importPath) {\n        return QualifiedNamesUtil.isImported(JavaBridgeConfiguration.DEFAULT_JAVA_IMPORTS, importPath);\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        String fileText = FileUtil.loadFile(new File(getTestDataPath(), fileName()));\n        if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"RUNTIME\")) {\n            projectDescriptor = JetWithJdkAndRuntimeLightProjectDescriptor.INSTANCE;\n        }\n        else {\n            projectDescriptor = JetLightProjectDescriptor.INSTANCE;\n        }\n\n        super.setUp();\n\n        ((StartupManagerImpl) StartupManager.getInstance(getProject())).runPostStartupActivities();\n    }","id":5783,"modified_method":"@Override\n    protected void setUp() throws Exception {\n        String fileText = FileUtil.loadFile(new File(getTestDataPath(), fileName()));\n        if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"RUNTIME\")) {\n            projectDescriptor = JetWithJdkAndRuntimeLightProjectDescriptor.INSTANCE;\n        }\n        else if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"JS\")) {\n            projectDescriptor = JetStdJSProjectDescriptor.INSTANCE;\n        }\n        else {\n            projectDescriptor = JetLightProjectDescriptor.INSTANCE;\n        }\n\n        super.setUp();\n\n        ((StartupManagerImpl) StartupManager.getInstance(getProject())).runPostStartupActivities();\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected abstract String fileName();","id":5784,"modified_method":"protected String fileName() {\n        return getTestName(false) + \".kt\";\n    }","commit_id":"ddb7b54eee4a43c3f033e2ebade06d366ce4d3f6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testInsertFunctionWithBothParentheses() {\n        myFixture.configureByFile(getBeforeFileName());\n        myFixture.type(\"test()\");\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5785,"modified_method":"public void testInsertFunctionWithBothParentheses() {\n        myFixture.configureByFile(fileName());\n        myFixture.type(\"test()\");\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testSingleBrackets() {\n        myFixture.configureByFile(getBeforeFileName());\n        myFixture.type('(');\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5786,"modified_method":"public void testSingleBrackets() {\n        myFixture.configureByFile(fileName());\n        myFixture.type('(');\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void doTest(CompletionType type, int time, @Nullable String lookupString, @Nullable String tailText, char completionChar) {\n        myFixture.configureByFile(getBeforeFileName());\n\n        if (lookupString != null || tailText != null) {\n            myFixture.complete(type, time);\n\n            LookupElement item = getExistentLookupElement(lookupString, tailText);\n            if (item != null) {\n                selectItem(item, completionChar);\n            }\n        }\n        else {\n            forceCompleteFirst(type, time);\n        }\n\n        myFixture.checkResultByFile(getAfterFileName());\n    }","id":5787,"modified_method":"public void doTest(CompletionType type, int time, @Nullable String lookupString, @Nullable String tailText, char completionChar) {\n        myFixture.configureByFile(fileName());\n\n        if (lookupString != null || tailText != null) {\n            myFixture.complete(type, time);\n\n            LookupElement item = getExistentLookupElement(lookupString, tailText);\n            if (item != null) {\n                selectItem(item, completionChar);\n            }\n        }\n        else {\n            forceCompleteFirst(type, time);\n        }\n\n        myFixture.checkResultByFile(afterFileName());\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected String getAfterFileName() {\n        return getTestName(false) + \".kt.after\";\n    }","id":5788,"modified_method":"protected String afterFileName() {\n        return getTestName(false) + \".kt.after\";\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean isImportedWithKotlinDefault(ImportPath importPath) {\n        for (ImportPath defaultJetImport : DefaultModuleConfiguration.DEFAULT_JET_IMPORTS) {\n            if (QualifiedNamesUtil.isImported(defaultJetImport, importPath)) {\n                return true;\n            }\n        }\n        return false;\n    }","id":5789,"modified_method":"public static boolean isImportedWithKotlinDefault(ImportPath importPath) {\n        return QualifiedNamesUtil.isImported(DefaultModuleConfiguration.DEFAULT_JET_IMPORTS, importPath);\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n     * Check that import is useless.\n     */\n    private static boolean isImportedByDefault(@NotNull ImportPath importPath, @NotNull FqName filePackageFqn) {\n        if (importPath.fqnPart().isRoot()) {\n            return true;\n        }\n\n        if (!importPath.isAllUnder() && !importPath.hasAlias()) {\n            // Single element import without .* and alias is useless\n            if (QualifiedNamesUtil.isOneSegmentFQN(importPath.fqnPart())) {\n                return true;\n            }\n\n            // There's no need to import a declaration from the package of current file\n            if (filePackageFqn.equals(importPath.fqnPart().parent())) {\n                return true;\n            }\n        }\n\n        if (isImportedWithKotlinDefault(importPath)) return true;\n        if (isImportedWithJavaDefault(importPath)) return true;\n\n        return false;\n    }","id":5790,"modified_method":"/**\n     * Check that import is useless.\n     */\n    private static boolean isImportedByDefault(@NotNull ImportPath importPath, @NotNull JetFile jetFile) {\n        if (importPath.fqnPart().isRoot()) {\n            return true;\n        }\n\n        if (!importPath.isAllUnder() && !importPath.hasAlias()) {\n            // Single element import without .* and alias is useless\n            if (QualifiedNamesUtil.isOneSegmentFQN(importPath.fqnPart())) {\n                return true;\n            }\n\n            // There's no need to import a declaration from the package of current file\n            if (JetPsiUtil.getFQName(jetFile).equals(importPath.fqnPart().parent())) {\n                return true;\n            }\n        }\n\n        if (isImportedWithKotlinDefault(importPath)) return true;\n\n        if (KotlinFrameworkDetector.isJsKotlinModule(jetFile)) {\n            return isImportedWithJsDefault(importPath);\n        }\n        else {\n            return isImportedWithJavaDefault(importPath);\n        }\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean doNeedImport(@NotNull ImportPath importPath, @NotNull JetFile file, List<JetImportDirective> importDirectives) {\n        if (importPath.fqnPart().firstSegmentIs(JavaDescriptorResolver.JAVA_ROOT)) {\n            FqName withoutJavaRoot = QualifiedNamesUtil.withoutFirstSegment(importPath.fqnPart());\n            importPath = new ImportPath(withoutJavaRoot, importPath.isAllUnder(), importPath.getAlias());\n        }\n\n        if (isImportedByDefault(importPath, JetPsiUtil.getFQName(file))) {\n            return false;\n        }\n\n        if (!importDirectives.isEmpty()) {\n            // Check if import is already present\n            for (JetImportDirective directive : importDirectives) {\n                ImportPath existentImportPath = JetPsiUtil.getImportPath(directive);\n                if (existentImportPath != null && QualifiedNamesUtil.isImported(existentImportPath, importPath)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","id":5791,"modified_method":"public static boolean doNeedImport(@NotNull ImportPath importPath, @NotNull JetFile file, List<JetImportDirective> importDirectives) {\n        if (importPath.fqnPart().firstSegmentIs(JavaDescriptorResolver.JAVA_ROOT)) {\n            FqName withoutJavaRoot = QualifiedNamesUtil.withoutFirstSegment(importPath.fqnPart());\n            importPath = new ImportPath(withoutJavaRoot, importPath.isAllUnder(), importPath.getAlias());\n        }\n\n        if (isImportedByDefault(importPath, file)) {\n            return false;\n        }\n\n        if (!importDirectives.isEmpty()) {\n            // Check if import is already present\n            for (JetImportDirective directive : importDirectives) {\n                ImportPath existentImportPath = JetPsiUtil.getImportPath(directive);\n                if (existentImportPath != null && QualifiedNamesUtil.isImported(existentImportPath, importPath)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static boolean isImportedWithJavaDefault(ImportPath importPath) {\n        for (ImportPath defaultJavaImport : JavaBridgeConfiguration.DEFAULT_JAVA_IMPORTS) {\n            if (QualifiedNamesUtil.isImported(defaultJavaImport, importPath)) {\n                return true;\n            }\n        }\n        return false;\n    }","id":5792,"modified_method":"public static boolean isImportedWithJavaDefault(ImportPath importPath) {\n        return QualifiedNamesUtil.isImported(JavaBridgeConfiguration.DEFAULT_JAVA_IMPORTS, importPath);\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        String fileText = FileUtil.loadFile(new File(getTestDataPath(), fileName()));\n        if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"RUNTIME\")) {\n            projectDescriptor = JetWithJdkAndRuntimeLightProjectDescriptor.INSTANCE;\n        }\n        else {\n            projectDescriptor = JetLightProjectDescriptor.INSTANCE;\n        }\n\n        super.setUp();\n\n        ((StartupManagerImpl) StartupManager.getInstance(getProject())).runPostStartupActivities();\n    }","id":5793,"modified_method":"@Override\n    protected void setUp() throws Exception {\n        String fileText = FileUtil.loadFile(new File(getTestDataPath(), fileName()));\n        if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"RUNTIME\")) {\n            projectDescriptor = JetWithJdkAndRuntimeLightProjectDescriptor.INSTANCE;\n        }\n        else if (InTextDirectivesUtils.isDirectiveDefined(fileText, \"JS\")) {\n            projectDescriptor = JetStdJSProjectDescriptor.INSTANCE;\n        }\n        else {\n            projectDescriptor = JetLightProjectDescriptor.INSTANCE;\n        }\n\n        super.setUp();\n\n        ((StartupManagerImpl) StartupManager.getInstance(getProject())).runPostStartupActivities();\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected abstract String fileName();","id":5794,"modified_method":"protected String fileName() {\n        return getTestName(false) + \".kt\";\n    }","commit_id":"dc3d3952146bee4082b48ec87f5fd6e57a0534c9","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public String[] getDefaultReputationMethods()\n    {\n        String method =\n            getXWiki().Param(\"xwiki.ratings.reputation.defaultmethod\", RATING_REPUTATION_METHOD_DEFAULT);\n        method = getXWiki().getXWikiPreference(\"ratings_reputation_defaultmethod\", method, getXWikiContext());\n        method = getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION_METHOD, method);\n        return method.split(\",\");\n    }","id":5795,"modified_method":"public String[] getDefaultReputationMethods(String documentName)\n    {\n        String method =\n            getXWiki().Param(\"xwiki.ratings.reputation.defaultmethod\", RATING_REPUTATION_METHOD_DEFAULT);\n        method = getXWiki().getXWikiPreference(\"ratings_reputation_defaultmethod\", method, getXWikiContext());\n        method = getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION_METHOD, method);\n        return method.split(\",\");\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public boolean hasReputation()\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.reputation\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_reputation\", result, getXWikiContext());\n        return (getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION, result) == \"1\");\n    }","id":5796,"modified_method":"public boolean hasReputation(String documentName)\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.reputation\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_reputation\", result, getXWikiContext());\n        return (getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION, result) == \"1\");\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Retrieve configuration parameter from the current space's WebPreferences\n     * and fallback to XWiki.RatingsConfig if it does not exist\n     */\n    protected String getConfigParameter(String parameterName, String defaultValue)\n    {\n        try {\n            String space = getXWikiContext().getDoc().getSpace();\n            XWikiDocument spaceConfigDoc = getXWiki().getDocument(space + \".\" + RatingsManager.RATINGS_CONFIG_SPACE_PAGE, getXWikiContext());\n            XWikiDocument globalConfigDoc = getXWiki().getDocument(RatingsManager.RATINGS_CONFIG_GLOBAL_PAGE, getXWikiContext());\n            XWikiDocument configDoc = (spaceConfigDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME) == null) ? globalConfigDoc : spaceConfigDoc;\n\n            if (!configDoc.isNew() && configDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME) != null) {\n                BaseProperty prop = (BaseProperty) configDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME).get(parameterName);\n                String propValue = (prop == null) ? defaultValue : prop.getValue().toString();\n\n                return (propValue == \"\" ? defaultValue : propValue);\n            }\n        } catch(Exception e) {\n            LOGGER.error(\"Cannot read ratings config\", e);\n        }\n\n        return defaultValue;\n    }","id":5797,"modified_method":"/**\n     * Retrieve configuration parameter from the current space's WebPreferences\n     * and fallback to XWiki.RatingsConfig if it does not exist\n     */\n    protected String getConfigParameter(String documentName, String parameterName, String defaultValue)\n    {\n        try {\n            XWikiDocument sourceDoc = getXWiki().getDocument(documentName, getXWikiContext());\n            XWikiDocument spaceConfigDoc = getXWiki().getDocument(sourceDoc.getSpace(), RatingsManager.RATINGS_CONFIG_SPACE_PAGE, getXWikiContext());\n            XWikiDocument globalConfigDoc = getXWiki().getDocument(RatingsManager.RATINGS_CONFIG_GLOBAL_PAGE, getXWikiContext());\n            XWikiDocument configDoc = (spaceConfigDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME) == null) ? globalConfigDoc : spaceConfigDoc;\n\n            if (!configDoc.isNew() && configDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME) != null) {\n                BaseProperty prop = (BaseProperty) configDoc.getObject(RatingsManager.RATINGS_CONFIG_CLASSNAME).get(parameterName);\n                String propValue = (prop == null) ? defaultValue : prop.getValue().toString();\n\n                return (propValue == \"\" ? defaultValue : propValue);\n            }\n        } catch(Exception e) {\n            LOGGER.error(\"Cannot read ratings config\", e);\n        }\n\n        return defaultValue;\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void updateAverageRatings(String documentName, Rating rating, int oldVote)\n        throws RatingsException\n    {\n        String[] methods = getDefaultReputationMethods();\n        for (int i = 0; i < methods.length; i++) {\n            updateAverageRating(documentName, rating, oldVote, methods[i]);\n        }\n    }","id":5798,"modified_method":"public void updateAverageRatings(String documentName, Rating rating, int oldVote)\n        throws RatingsException\n    {\n        String[] methods = getDefaultReputationMethods(documentName);\n        for (int i = 0; i < methods.length; i++) {\n            updateAverageRating(documentName, rating, oldVote, methods[i]);\n        }\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRating getAverageRating(String documentName, String method, boolean create)\n        throws RatingsException\n    {\n        try {\n            if (isAverageRatingStored()) {\n                String className = getAverageRatingsClassName();\n                XWikiDocument doc = getXWikiContext().getWiki().getDocument(documentName, getXWikiContext());\n                BaseObject averageRatingObject =\n                    doc.getObject(className, RatingsManager.AVERAGERATING_CLASS_FIELDNAME_AVERAGEVOTE_METHOD, method,\n                        false);\n                if (averageRatingObject == null) {\n                    if (!create) {\n                        return calcAverageRating(documentName, method);\n                    }\n\n                    // initiate a new average rating object\n                    averageRatingObject = doc.newObject(className, getXWikiContext());\n                    averageRatingObject.setStringValue(RatingsManager.AVERAGERATING_CLASS_FIELDNAME_AVERAGEVOTE_METHOD,\n                        method);\n                }\n\n                return new StoredAverageRating(doc, averageRatingObject, getXWikiContext());\n            } else {\n                return calcAverageRating(documentName, method);\n            }\n        } catch (XWikiException e) {\n            throw new RatingsException(e);\n        }\n    }","id":5799,"modified_method":"public AverageRating getAverageRating(String documentName, String method, boolean create)\n        throws RatingsException\n    {\n        try {\n            if (isAverageRatingStored(documentName)) {\n                String className = getAverageRatingsClassName();\n                XWikiDocument doc = getXWikiContext().getWiki().getDocument(documentName, getXWikiContext());\n                BaseObject averageRatingObject =\n                    doc.getObject(className, RatingsManager.AVERAGERATING_CLASS_FIELDNAME_AVERAGEVOTE_METHOD, method,\n                        false);\n                if (averageRatingObject == null) {\n                    if (!create) {\n                        return calcAverageRating(documentName, method);\n                    }\n\n                    // initiate a new average rating object\n                    averageRatingObject = doc.newObject(className, getXWikiContext());\n                    averageRatingObject.setStringValue(RatingsManager.AVERAGERATING_CLASS_FIELDNAME_AVERAGEVOTE_METHOD,\n                        method);\n                }\n\n                return new StoredAverageRating(doc, averageRatingObject, getXWikiContext());\n            } else {\n                return calcAverageRating(documentName, method);\n            }\n        } catch (XWikiException e) {\n            throw new RatingsException(e);\n        }\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void updateAverageRating(String documentName, Rating rating, int oldVote, String method)\n        throws RatingsException\n    {\n        // we only update if we are in stored mode and if the vote changed\n        if (isAverageRatingStored() && oldVote != rating.getVote()) {\n            AverageRating aRating = calcAverageRating(documentName, method);\n            AverageRating averageRating = getAverageRating(documentName, method, true);\n            averageRating.setAverageVote(aRating.getAverageVote());\n            averageRating.setNbVotes(aRating.getNbVotes());\n            averageRating.save();\n            /*\n             * StoredAverageRating averageRating = (StoredAverageRating) getAverageRating(container, method, true,\n             * context); int diffTotal = rating.getVote() - oldVote; int diffNbVotes = (oldVote==0) ? 1 : 0; int\n             * oldNbVotes = averageRating.getNbVotes(); averageRating.setNbVotes(oldNbVotes + diffNbVotes);\n             * averageRating.setAverageVote((averageRating.getAverageVote()*oldNbVotes + diffTotal) / (oldNbVotes +\n             * diffNbVotes));\n             */\n        }\n    }","id":5800,"modified_method":"public void updateAverageRating(String documentName, Rating rating, int oldVote, String method)\n        throws RatingsException\n    {\n        // we only update if we are in stored mode and if the vote changed\n        if (isAverageRatingStored(documentName) && oldVote != rating.getVote()) {\n            AverageRating aRating = calcAverageRating(documentName, method);\n            AverageRating averageRating = getAverageRating(documentName, method, true);\n            averageRating.setAverageVote(aRating.getAverageVote());\n            averageRating.setNbVotes(aRating.getNbVotes());\n            averageRating.save();\n            /*\n             * StoredAverageRating averageRating = (StoredAverageRating) getAverageRating(container, method, true,\n             * context); int diffTotal = rating.getVote() - oldVote; int diffNbVotes = (oldVote==0) ? 1 : 0; int\n             * oldNbVotes = averageRating.getNbVotes(); averageRating.setNbVotes(oldNbVotes + diffNbVotes);\n             * averageRating.setAverageVote((averageRating.getAverageVote()*oldNbVotes + diffTotal) / (oldNbVotes +\n             * diffNbVotes));\n             */\n        }\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public boolean isAverageRatingStored()\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.averagerating.stored\", \"1\");\n        result = getXWiki().getXWikiPreference(\"ratings_averagerating_stored\", result, getXWikiContext());\n        return (getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORE_AVERAGE_RATING, result) == \"1\");\n    }","id":5801,"modified_method":"public boolean isAverageRatingStored(String documentName)\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.averagerating.stored\", \"1\");\n        result = getXWiki().getXWikiPreference(\"ratings_averagerating_stored\", result, getXWikiContext());\n        return (getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORE_AVERAGE_RATING, result) == \"1\");\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public boolean isReputationStored()\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.reputation.stored\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_reputation_stored\", result, getXWikiContext());\n        return (getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION_STORED, result) == \"1\");\n    }","id":5802,"modified_method":"public boolean isReputationStored(String documentName)\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.reputation.stored\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_reputation_stored\", result, getXWikiContext());\n        return (getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_REPUTATION_STORED, result) == \"1\");\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Generate page name from the container page We add Rating and getUniquePageName will add us a counter to our page\n     */\n    private String getPageName(String documentName) throws XWikiException\n    {\n        XWikiDocument doc = context.getWiki().getDocument(documentName, context);\n        String ratingsSpace = ratingsManager.getRatingsSpaceName();\n        boolean hasRatingsSpaceForeachSpace = ratingsManager.hasRatingsSpaceForeachSpace();\n        if (hasRatingsSpaceForeachSpace) {\n            return doc.getSpace() + ratingsSpace + \".\"\n                + getUniquePageName(ratingsSpace, doc.getName(), \"R\", true);\n        } else if (ratingsSpace == null) {\n            return doc.getSpace() + \".\" + getUniquePageName(doc.getSpace(), doc.getName() + \"R\", \"\", true);\n        } else {\n            return ratingsSpace + \".\"\n                + getUniquePageName(ratingsSpace, doc.getSpace() + \"_\" + doc.getName(), \"R\", true);\n        }\n    }","id":5803,"modified_method":"/**\n     * Generate page name from the container page We add Rating and getUniquePageName will add us a counter to our page\n     */\n    private String getPageName(String documentName) throws XWikiException\n    {\n        XWikiDocument doc = context.getWiki().getDocument(documentName, context);\n        String ratingsSpace = ratingsManager.getRatingsSpaceName(documentName);\n        boolean hasRatingsSpaceForeachSpace = ratingsManager.hasRatingsSpaceForeachSpace(documentName);\n        if (hasRatingsSpaceForeachSpace) {\n            return doc.getSpace() + ratingsSpace + \".\"\n                + getUniquePageName(ratingsSpace, doc.getName(), \"R\", true);\n        } else if (ratingsSpace == null) {\n            return doc.getSpace() + \".\" + getUniquePageName(doc.getSpace(), doc.getName() + \"R\", \"\", true);\n        } else {\n            return ratingsSpace + \".\"\n                + getUniquePageName(ratingsSpace, doc.getSpace() + \"_\" + doc.getName(), \"R\", true);\n        }\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public boolean hasRatingsSpaceForeachSpace()\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.separatepagemanager.ratingsspaceforeachspace\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_separatepagemanager_ratingsspaceforeachspace\", result, getXWikiContext());\n        return (getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORAGE_SEPARATE_SPACES, result) == \"1\");\n    }","id":5804,"modified_method":"public boolean hasRatingsSpaceForeachSpace(String documentName)\n    {\n        String result = getXWiki().Param(\"xwiki.ratings.separatepagemanager.ratingsspaceforeachspace\", \"0\");\n        result = getXWiki().getXWikiPreference(\"ratings_separatepagemanager_ratingsspaceforeachspace\", result, getXWikiContext());\n        return (getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORAGE_SEPARATE_SPACES, result) == \"1\");\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String getRatingsSpaceName()\n    {\n        String ratingsSpaceName = getXWiki().Param(\"xwiki.ratings.separatepagemanager.spacename\", \"\");\n        ratingsSpaceName =\n            getXWiki().getXWikiPreference(\"ratings_separatepagemanager_spacename\", ratingsSpaceName, getXWikiContext());\n        return getConfigParameter(RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORAGE_SPACE, ratingsSpaceName);\n    }","id":5805,"modified_method":"public String getRatingsSpaceName(String documentName)\n    {\n        String ratingsSpaceName = getXWiki().Param(\"xwiki.ratings.separatepagemanager.spacename\", \"\");\n        ratingsSpaceName =\n            getXWiki().getXWikiPreference(\"ratings_separatepagemanager_spacename\", ratingsSpaceName, getXWikiContext());\n        return getConfigParameter(documentName, RatingsManager.RATINGS_CONFIG_CLASS_FIELDNAME_STORAGE_SPACE, ratingsSpaceName);\n    }","commit_id":"9db43738c8ad9be9b22a184605e1850887318432","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public RatingsManager getRatingsManager() {\n        return ratingsManagerProvider.get();\n    }","id":5806,"modified_method":"public RatingsManager getRatingsManager(String documentName) {\n        return ratingsManagerProvider.get(documentName);\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void updateReputation(String documentName, Rating rating, int oldVote)\n    {\n        // we only update if we are in stored mode and if the vote changed\n        if (oldVote != rating.getVote()) {\n            // voter reputation. This will give points to the voter\n            try {\n                AverageRating voterRating =\n                    calcNewVoterReputation(rating.getAuthor(), documentName, rating, oldVote);\n                // we need to save this reputation if it has changed\n                try {\n                 getRatingsManager().updateUserReputation(rating.getAuthor(), voterRating);\n                } catch (RatingsException re) {\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while storing reputation for user \" + rating.getAuthor(), re);\n                    }                    \n                }\n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating voter reputation \" + rating.getAuthor() + \" for document \"\n                            + documentName, e);\n                    }\n                }\n            }\n\n            // author reputation. This will be giving points to the creator of a document or comment\n            try {\n                XWikiDocument doc = getXWiki().getDocument(documentName, getXWikiContext());\n                AverageRating authorRating = calcNewContributorReputation(doc.getCreator(), documentName, rating, oldVote);\n                // we need to save the author reputation\n                try {\n                    getRatingsManager().updateUserReputation(doc.getCreator(), authorRating);\n                } catch (RatingsException re) {\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while storing reputation for user \" + doc.getCreator(), re);\n                    }                    \n                }\n \n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating author reputation for document \"\n                            + documentName, e);\n                    }\n                }\n            } catch (XWikiException e) {\n                if (LOGGER.isErrorEnabled()) {\n                    LOGGER.error(\"Error while calculating author reputation for document \" + documentName,\n                        e);\n                }\n            }\n\n            // all authors reputation. This will be used to give points to all participants to a document\n            try {\n                Map<String, AverageRating> authorsRatings = calcNewAuthorsReputation(documentName, rating, oldVote);\n                // TODO this is not implemented yet\n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating authors reputation for document \"\n                            + documentName, e);\n                    }\n                }\n            } catch (XWikiException e) {\n                if (LOGGER.isErrorEnabled()) {\n                    LOGGER.error(\"Error while calculating authors for document \" + documentName, e);\n                }\n            }\n        }\n    }","id":5807,"modified_method":"public void updateReputation(String documentName, Rating rating, int oldVote)\n    {\n        // we only update if we are in stored mode and if the vote changed\n        if (oldVote != rating.getVote()) {\n            // voter reputation. This will give points to the voter\n            try {\n                AverageRating voterRating =\n                    calcNewVoterReputation(rating.getAuthor(), documentName, rating, oldVote);\n                // we need to save this reputation if it has changed\n                try {\n                 getRatingsManager(documentName).updateUserReputation(rating.getAuthor(), voterRating);\n                } catch (RatingsException re) {\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while storing reputation for user \" + rating.getAuthor(), re);\n                    }                    \n                }\n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating voter reputation \" + rating.getAuthor() + \" for document \"\n                            + documentName, e);\n                    }\n                }\n            }\n\n            // author reputation. This will be giving points to the creator of a document or comment\n            try {\n                XWikiDocument doc = getXWiki().getDocument(documentName, getXWikiContext());\n                AverageRating authorRating = calcNewContributorReputation(doc.getCreator(), documentName, rating, oldVote);\n                // we need to save the author reputation\n                try {\n                    getRatingsManager(documentName).updateUserReputation(doc.getCreator(), authorRating);\n                } catch (RatingsException re) {\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while storing reputation for user \" + doc.getCreator(), re);\n                    }                    \n                }\n \n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating author reputation for document \"\n                            + documentName, e);\n                    }\n                }\n            } catch (XWikiException e) {\n                if (LOGGER.isErrorEnabled()) {\n                    LOGGER.error(\"Error while calculating author reputation for document \" + documentName,\n                        e);\n                }\n            }\n\n            // all authors reputation. This will be used to give points to all participants to a document\n            try {\n                Map<String, AverageRating> authorsRatings = calcNewAuthorsReputation(documentName, rating, oldVote);\n                // TODO this is not implemented yet\n            } catch (ReputationException e) {\n                if (e.getCode() != ReputationException.ERROR_REPUTATION_NOT_IMPLEMENTED) {\n                    // we should log this error\n                    if (LOGGER.isErrorEnabled()) {\n                        LOGGER.error(\"Error while calculating authors reputation for document \"\n                            + documentName, e);\n                    }\n                }\n            } catch (XWikiException e) {\n                if (LOGGER.isErrorEnabled()) {\n                    LOGGER.error(\"Error while calculating authors for document \" + documentName, e);\n                }\n            }\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRatingApi getAverageRating(String fromsql, String wheresql)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get().getAverageRatingFromQuery(fromsql, wheresql));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5808,"modified_method":"public AverageRatingApi getAverageRating(String fromsql, String wheresql)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get(RatingsManager.RATINGS_CONFIG_GLOBAL_PAGE).getAverageRatingFromQuery(fromsql, wheresql));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRatingApi getUserReputation(String username)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get().getUserReputation(username));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5809,"modified_method":"public AverageRatingApi getUserReputation(String username)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get(RatingsManager.RATINGS_CONFIG_GLOBAL_PAGE).getUserReputation(username));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public RatingApi setRating(Document doc, String author, int vote)\n    {\n        // TODO protect this with programming rights\n        // and add a setRating(docName), not protected but for which the author is retrieved from getXWikiContext().\n        try {\n            return new RatingApi(ratingsManagerProvider.get().setRating(doc.getFullName(), author, vote));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5810,"modified_method":"public RatingApi setRating(Document doc, String author, int vote)\n    {\n        // TODO protect this with programming rights\n        // and add a setRating(docName), not protected but for which the author is retrieved from getXWikiContext().\n        try {\n            String documentName = doc.getFullName();\n            return new RatingApi(ratingsManagerProvider.get(documentName).setRating(documentName, author, vote));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRatingApi getAverageRating(Document doc, String method)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get().getAverageRating(doc.getFullName(), method));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5811,"modified_method":"public AverageRatingApi getAverageRating(Document doc, String method)\n    {\n        try {\n            String documentName = doc.getFullName();\n            return new AverageRatingApi(ratingsManagerProvider.get(documentName).getAverageRating(documentName, method));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public RatingApi getRating(Document doc, String author)\n    {\n        try {\n            Rating rating = ratingsManagerProvider.get().getRating(doc.getFullName(), author);\n            if (rating == null) {\n                return null;\n            }\n            return new RatingApi(rating);\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5812,"modified_method":"public RatingApi getRating(Document doc, String author)\n    {\n        try {\n            String documentName = doc.getFullName();\n            Rating rating = ratingsManagerProvider.get(documentName).getRating(documentName, author);\n            if (rating == null) {\n                return null;\n            }\n            return new RatingApi(rating);\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public List<RatingApi> getRatings(Document doc, int start, int count, boolean asc)\n    {\n        try {\n            return wrapRatings(ratingsManagerProvider.get().getRatings(doc.getFullName(), start, count, asc));\n        } catch (Exception e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5813,"modified_method":"public List<RatingApi> getRatings(Document doc, int start, int count, boolean asc)\n    {\n        try {\n            String documentName = doc.getFullName();\n            return wrapRatings(ratingsManagerProvider.get(documentName).getRatings(documentName, start, count, asc));\n        } catch (Exception e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRatingApi getAverageRating(Document doc)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get().getAverageRating(doc.getFullName()));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5814,"modified_method":"public AverageRatingApi getAverageRating(Document doc)\n    {\n        try {\n            String documentName = doc.getFullName();\n            return new AverageRatingApi(ratingsManagerProvider.get(documentName).getAverageRating(documentName));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AverageRatingApi getAverageRating(String fromsql, String wheresql, String method)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get().getAverageRatingFromQuery(fromsql, wheresql, method));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","id":5815,"modified_method":"public AverageRatingApi getAverageRating(String fromsql, String wheresql, String method)\n    {\n        try {\n            return new AverageRatingApi(ratingsManagerProvider.get(RatingsManager.RATINGS_CONFIG_GLOBAL_PAGE).getAverageRatingFromQuery(fromsql, wheresql, method));\n        } catch (Throwable e) {\n            getXWikiContext().put(\"exception\", e);\n            return null;\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Gets or calculates the user reputation.\n     *\n     * @param username Person to calculate the reputation for\n     * @param context context of the request\n     * @return AverageRating of the voter\n     */\n    public AverageRating getUserReputation(String username) throws ReputationException\n    {\n        try {\n            AverageRating aveRating =\n                getRatingsManager().getAverageRating(username, RatingsManager.RATING_REPUTATION_METHOD_AVERAGE);\n            float oldRep = aveRating.getAverageVote();\n            aveRating.setAverageVote(aveRating.getAverageVote() * 100 / getTotalReputation());\n            totalReputation += aveRating.getAverageVote() - oldRep;\n            return aveRating;\n        } catch (RatingsException e) {\n            throw new ReputationException(e);\n        }\n    }","id":5816,"modified_method":"/**\n     * Gets or calculates the user reputation.\n     *\n     * @param documentName the document which the ratings are for\n     * @param username Person to calculate the reputation for\n     * @param context context of the request\n     * @return AverageRating of the voter\n     */\n    public AverageRating getUserReputation(String documentName, String username) throws ReputationException\n    {\n        try {\n            AverageRating aveRating =\n                getRatingsManager(documentName).getAverageRating(username, RatingsManager.RATING_REPUTATION_METHOD_AVERAGE);\n            float oldRep = aveRating.getAverageVote();\n            aveRating.setAverageVote(aveRating.getAverageVote() * 100 / getTotalReputation());\n            totalReputation += aveRating.getAverageVote() - oldRep;\n            return aveRating;\n        } catch (RatingsException e) {\n            throw new ReputationException(e);\n        }\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Implemented. Authors will receive a simple reputation.\n     */\n    public AverageRating calcNewContributorReputation(String contributor, String documentName, Rating rating, int oldVote) throws ReputationException\n    {\n        String voter = rating.getAuthor();\n        float voterRep = getUserReputation(voter).getAverageVote();\n        float constantX = getConstantX();\n        float constantY = getConstantY();\n        AverageRating currentRep = getUserReputation(contributor);\n        currentRep.setAverageVote(currentRep.getAverageVote() + (rating.getVote() + constantX) * voterRep / constantY);\n        notimplemented();\n        return null;\n    }","id":5817,"modified_method":"/**\n     * Implemented. Authors will receive a simple reputation.\n     */\n    public AverageRating calcNewContributorReputation(String contributor, String documentName, Rating rating, int oldVote) throws ReputationException\n    {\n        String voter = rating.getAuthor();\n        float voterRep = getUserReputation(documentName, voter).getAverageVote();\n        float constantX = getConstantX();\n        float constantY = getConstantY();\n        AverageRating currentRep = getUserReputation(documentName, contributor);\n        currentRep.setAverageVote(currentRep.getAverageVote() + (rating.getVote() + constantX) * voterRep / constantY);\n        notimplemented();\n        return null;\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void onEvent(Event event, Object arg1, Object arg2)\n    {\n       UpdateRatingEvent ratingEvent = (UpdateRatingEvent) event;\n       reputationAlgorithm.get().updateReputation(ratingEvent.getDocumentName(), ratingEvent.getNewRating(), ratingEvent.getOldRating());\n    }","id":5818,"modified_method":"@Override\n    public void onEvent(Event event, Object arg1, Object arg2)\n    {\n       UpdateRatingEvent ratingEvent = (UpdateRatingEvent) event;\n       String documentName = ratingEvent.getDocumentName();\n       reputationAlgorithm.get(documentName).updateReputation(documentName, ratingEvent.getNewRating(), ratingEvent.getOldRating());\n    }","commit_id":"edd22e146958785530f1cd686755a933460fd4bb","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n\t * Returns a link to the previous key.\n\t * Previous key might be a link, if we're a simple newer version, or it might\n\t * be a wrapped key, if we're an interposed node key. \n\t * DKS TODO\n\t * @return\n\t * @throws IOException \n\t * @throws ContentNotReadyException \n\t * @throws ContentDecodingException\n\t */\n\tpublic Link getPreviousKey(long timeout) throws ContentNotReadyException, IOException {\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\tif (!hasPreviousKeyBlock())\n\t\t\treturn null;\n\t\tLinkObject previousKey = new LinkObject(getPreviousKeyBlockName(), _manager.handle());\n\t\tpreviousKey.waitForData(timeout); \n\t\tif (!previousKey.available()) {\n\t\t\tLog.info(\"Unexpected: no previous key link at \" + getPreviousKeyBlockName());\n\t\t\treturn null;\n\t\t}\n\t\treturn previousKey.link();\n\t}","id":5819,"modified_method":"/**\n\t * Returns a link to the previous key.\n\t * Previous key might be a link, if we're a simple newer version, or it might\n\t * be a wrapped key, if we're an interposed node key. \n\t * DKS TODO\n\t * @return\n\t * @throws IOException \n\t * @throws ContentNotReadyException \n\t * @throws ContentDecodingException\n\t */\n\tpublic Link getPreviousKey(long timeout) throws ContentNotReadyException, IOException {\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\tif (!hasPreviousKeyBlock())\n\t\t\treturn null;\n\t\tLinkObject previousKey = new LinkObject(getPreviousKeyBlockName(), _manager.handle());\n\t\tpreviousKey.waitForData(timeout); \n\t\tif (!previousKey.available()) {\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"Unexpected: no previous key link at {0}\", getPreviousKeyBlockName());\n\t\t\t}\t\n\t\t\treturn null;\n\t\t}\n\t\treturn previousKey.link();\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Returns the private key stored in the KeyDirectory. \n\t * The private key is wrapped in a wrapping key, which is itself wrapped.\n\t * So the unwrapping proceeds in two steps.\n\t * First, we unwrap the wrapping key for the private key.\n\t * Then, we unwrap the private key itself. \n\t * Relies on the caller, who presumably knows the public key, to add the result to the\n\t * cache.\n\t * @return\n\t * @throws AccessDeniedException \n\t * @throws ContentGoneException \n\t * @throws ContentNotReadyException \n\t * @throws InvalidKeyException \n\t * @throws ContentDecodingException\n\t * @throws IOException\n\t * @throws NoSuchAlgorithmException \n\t */\n\tpublic PrivateKey getPrivateKey() \n\t\t\tthrows AccessDeniedException, InvalidKeyException, \n\t\t\t\t\tContentNotReadyException, ContentGoneException, ContentDecodingException, \n\t\t\t\t\tIOException, NoSuchAlgorithmException {\n\t\tif (!hasPrivateKeyBlock()) { // checks hasChildren\n\t\t\tLog.info(\"No private key block exists with name \" + getPrivateKeyBlockName());\n\t\t\treturn null;\n\t\t}\n\t\tWrappedKeyObject wko = getPrivateKeyObject();\n\t\tif ((null == wko) || (null == wko.wrappedKey())) {\n\t\t\tLog.info(\"Cannot retrieve wrapped private key for \" + getPrivateKeyBlockName());\n\t\t\treturn null;\n\t\t}\n\t\t// This should throw AccessDeniedException...\n\t\tKey wrappingKey = getUnwrappedKey(wko.wrappedKey().wrappingKeyIdentifier());\n\t\tif (null == wrappingKey) {\n\t\t\tLog.info(\"Cannot get key to unwrap private key \" + getPrivateKeyBlockName());\n\t\t\tthrow new AccessDeniedException(\"Cannot get key to unwrap private key \" + getPrivateKeyBlockName());\n\t\t}\n\t\t\n\t\tKey unwrappedPrivateKey = wko.wrappedKey().unwrapKey(wrappingKey);\n\t\tif (!(unwrappedPrivateKey instanceof PrivateKey)) {\n\t\t\tLog.info(\"Unwrapped private key is not an instance of PrivateKey! Its an \" + unwrappedPrivateKey.getClass().getName());\n\t\t} else {\n\t\t\tLog.info(\"Unwrapped private key is a private key, in fact it's a \" + unwrappedPrivateKey.getClass().getName());\n\t\t}\n\t\treturn (PrivateKey)unwrappedPrivateKey;\n\t}","id":5820,"modified_method":"/**\n\t * Returns the private key stored in the KeyDirectory. \n\t * The private key is wrapped in a wrapping key, which is itself wrapped.\n\t * So the unwrapping proceeds in two steps.\n\t * First, we unwrap the wrapping key for the private key.\n\t * Then, we unwrap the private key itself. \n\t * Relies on the caller, who presumably knows the public key, to add the result to the\n\t * cache.\n\t * @return\n\t * @throws AccessDeniedException \n\t * @throws ContentGoneException \n\t * @throws ContentNotReadyException \n\t * @throws InvalidKeyException \n\t * @throws ContentDecodingException\n\t * @throws IOException\n\t * @throws NoSuchAlgorithmException \n\t */\n\tpublic PrivateKey getPrivateKey() \n\t\t\tthrows AccessDeniedException, InvalidKeyException, \n\t\t\t\t\tContentNotReadyException, ContentGoneException, ContentDecodingException, \n\t\t\t\t\tIOException, NoSuchAlgorithmException {\n\t\tif (!hasPrivateKeyBlock()) { // checks hasChildren\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"No private key block exists with name {0}\", getPrivateKeyBlockName());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tWrappedKeyObject wko = getPrivateKeyObject();\n\t\tif ((null == wko) || (null == wko.wrappedKey())) {\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"Cannot retrieve wrapped private key for {0}\", getPrivateKeyBlockName());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t// This should throw AccessDeniedException...\n\t\tKey wrappingKey = getUnwrappedKey(wko.wrappedKey().wrappingKeyIdentifier());\n\t\tif (null == wrappingKey) {\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"Cannot get key to unwrap private key {0}\", getPrivateKeyBlockName());\n\t\t\t}\n\t\t\tthrow new AccessDeniedException(\"Cannot get key to unwrap private key \" + getPrivateKeyBlockName());\n\t\t}\n\t\t\n\t\tKey unwrappedPrivateKey = wko.wrappedKey().unwrapKey(wrappingKey);\n\t\tif (!(unwrappedPrivateKey instanceof PrivateKey)) {\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"Unwrapped private key is not an instance of PrivateKey! Its an {0}\", unwrappedPrivateKey.getClass().getName());\n\t\t\t}\n\t\t} else {\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"Unwrapped private key is a private key, in fact it's a {0}\", unwrappedPrivateKey.getClass().getName());\n\t\t\t}\n\t\t}\n\t\treturn (PrivateKey)unwrappedPrivateKey;\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Writes a previous key block to the repository. \n\t * @param oldPrivateKeyWrappingKey\n\t * @param supersedingKeyName\n\t * @param newPrivateKeyWrappingKey\n\t * @throws InvalidKeyException \n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t */\n\tpublic void addPreviousKeyBlock(Key oldPrivateKeyWrappingKey,\n\t\t\t\t\t\t\t\t\tContentName supersedingKeyName, Key newPrivateKeyWrappingKey) \n\t\t\t\tthrows InvalidKeyException, ContentEncodingException, IOException {\n\t\t// DKS TODO -- do we need in the case of deletion of ACLs to allow for multiple previous key blocks simultaneously?\n\t\t// Then need to add previous key id to previous key block name.\n\t\tWrappedKey wrappedKey = WrappedKey.wrapKey(oldPrivateKeyWrappingKey, null, null, newPrivateKeyWrappingKey);\n\t\twrappedKey.setWrappingKeyIdentifier(newPrivateKeyWrappingKey);\n\t\twrappedKey.setWrappingKeyName(supersedingKeyName);\n\t\tWrappedKeyObject wko = new WrappedKeyObject(getPreviousKeyBlockName(), wrappedKey,SaveType.REPOSITORY,  _manager.handle());\n\t\twko.save();\n\t\tLog.finer(\"KeyDirectory addPreviousKeyBlock: old wrapping key is {0} and superseding key name is {1} and new wrapping key is {2}.\", \n\t\t\t\tDataUtils.printHexBytes(oldPrivateKeyWrappingKey.getEncoded()),\n\t\t\t\tsupersedingKeyName,\n\t\t\t\tDataUtils.printHexBytes(newPrivateKeyWrappingKey.getEncoded())\n\t\t\t\t);\n\t}","id":5821,"modified_method":"/**\n\t * Writes a previous key block to the repository. \n\t * @param oldPrivateKeyWrappingKey\n\t * @param supersedingKeyName\n\t * @param newPrivateKeyWrappingKey\n\t * @throws InvalidKeyException \n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t */\n\tpublic void addPreviousKeyBlock(Key oldPrivateKeyWrappingKey,\n\t\t\t\t\t\t\t\t\tContentName supersedingKeyName, Key newPrivateKeyWrappingKey) \n\t\t\t\tthrows InvalidKeyException, ContentEncodingException, IOException {\n\t\t// DKS TODO -- do we need in the case of deletion of ACLs to allow for multiple previous key blocks simultaneously?\n\t\t// Then need to add previous key id to previous key block name.\n\t\tWrappedKey wrappedKey = WrappedKey.wrapKey(oldPrivateKeyWrappingKey, null, null, newPrivateKeyWrappingKey);\n\t\twrappedKey.setWrappingKeyIdentifier(newPrivateKeyWrappingKey);\n\t\twrappedKey.setWrappingKeyName(supersedingKeyName);\n\t\tWrappedKeyObject wko = new WrappedKeyObject(getPreviousKeyBlockName(), wrappedKey,SaveType.REPOSITORY,  _manager.handle());\n\t\twko.save();\n\t\tif (Log.isLoggable(Level.FINER)) {\n\t\t\tLog.finer(\"KeyDirectory addPreviousKeyBlock: old wrapping key is {0} and superseding key name is {1} and new wrapping key is {2}.\", \n\t\t\t\t\tDataUtils.printHexBytes(oldPrivateKeyWrappingKey.getEncoded()),\n\t\t\t\t\tsupersedingKeyName,\n\t\t\t\t\tDataUtils.printHexBytes(newPrivateKeyWrappingKey.getEncoded())\n\t\t\t\t\t);\n\t\t}\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Writes a wrapped key block to the repository.\n\t * Eventually aggregate signing and repo stream operations at the very\n\t * least across writing paired objects and links, preferably across larger\n\t * swaths of data.\n\t * @param secretKeyToWrap either a node key, a data key, or a private key wrapping key\n\t * @param publicKeyName the name of the public key.\n\t * @param publicKey the public key.\n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t * @throws InvalidKeyException \n\t * @throws VersionMissingException \n\t * @throws VersionMissingException\n\t */\n\tpublic void addWrappedKeyBlock(Key secretKeyToWrap, \n\t\t\t\t\t\t\t\t   ContentName publicKeyName, PublicKey publicKey) \n\t\t\tthrows ContentEncodingException, IOException, InvalidKeyException, VersionMissingException {\n\t\tWrappedKey wrappedKey = WrappedKey.wrapKey(secretKeyToWrap, null, null, publicKey);\n\t\twrappedKey.setWrappingKeyIdentifier(publicKey);\n\t\twrappedKey.setWrappingKeyName(publicKeyName);\n\t\tWrappedKeyObject wko = \n\t\t\tnew WrappedKeyObject(getWrappedKeyNameForKeyID(WrappedKey.wrappingKeyIdentifier(publicKey)),\n\t\t\t\t\t\t\t\t wrappedKey,SaveType.REPOSITORY, _manager.handle());\n\t\twko.save();\n\t\tLinkObject lo = new LinkObject(getWrappedKeyNameForPrincipal(publicKeyName), new Link(wko.getVersionedName()), SaveType.REPOSITORY, _manager.handle());\n\t\tlo.save();\n\t\tLog.finer(\"KeyDirectory addWrappedKeyBlock: wrapped secret key {0} under public key named {1} whose id is {2} for key directory {3}\", \n\t\t\t\tDataUtils.printHexBytes(secretKeyToWrap.getEncoded()), publicKeyName, DataUtils.printHexBytes(publicKey.getEncoded()), this._namePrefix);\n\t}","id":5822,"modified_method":"/**\n\t * Writes a wrapped key block to the repository.\n\t * Eventually aggregate signing and repo stream operations at the very\n\t * least across writing paired objects and links, preferably across larger\n\t * swaths of data.\n\t * @param secretKeyToWrap either a node key, a data key, or a private key wrapping key\n\t * @param publicKeyName the name of the public key.\n\t * @param publicKey the public key.\n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t * @throws InvalidKeyException \n\t * @throws VersionMissingException \n\t * @throws VersionMissingException\n\t */\n\tpublic void addWrappedKeyBlock(Key secretKeyToWrap, \n\t\t\t\t\t\t\t\t   ContentName publicKeyName, PublicKey publicKey) \n\t\t\tthrows ContentEncodingException, IOException, InvalidKeyException, VersionMissingException {\n\t\tWrappedKey wrappedKey = WrappedKey.wrapKey(secretKeyToWrap, null, null, publicKey);\n\t\twrappedKey.setWrappingKeyIdentifier(publicKey);\n\t\twrappedKey.setWrappingKeyName(publicKeyName);\n\t\tWrappedKeyObject wko = \n\t\t\tnew WrappedKeyObject(getWrappedKeyNameForKeyID(WrappedKey.wrappingKeyIdentifier(publicKey)),\n\t\t\t\t\t\t\t\t wrappedKey,SaveType.REPOSITORY, _manager.handle());\n\t\twko.save();\n\t\tLinkObject lo = new LinkObject(getWrappedKeyNameForPrincipal(publicKeyName), new Link(wko.getVersionedName()), SaveType.REPOSITORY, _manager.handle());\n\t\tlo.save();\n\t\tif (Log.isLoggable(Level.FINER)) {\n\t\t\tLog.finer(\"KeyDirectory addWrappedKeyBlock: wrapped secret key {0} under public key named {1} whose id is {2} for key directory {3}\", \n\t\t\t\t\tDataUtils.printHexBytes(secretKeyToWrap.getEncoded()), publicKeyName, DataUtils.printHexBytes(publicKey.getEncoded()), this._namePrefix);\n\t\t}\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Unwrap and return the key wrapped in a wrapping key specified by its digest.\n\t * Find a copy of the key block in this directory that we can unwrap (either the private\n\t * key wrapping key block or a wrapped raw symmetric key). Chase superseding keys if\n\t * we have to. This mechanism should be generic, and should work for node keys\n\t * as well as private key wrapping keys in directories following this structure.\n\t * @return\n\t * @throws InvalidKeyException \n\t * @throws ContentDecodingException \n\t * @throws IOException \n\t * @throws NoSuchAlgorithmException \n\t */\n\tpublic Key getUnwrappedKey(byte [] expectedKeyID) \n\t\t\tthrows InvalidKeyException, ContentDecodingException, IOException, NoSuchAlgorithmException {\n\t\t\n\t\tif (expectedKeyID == null) Log.finer(\"KeyDirectory getUnwrappedKey: at {0} unwrapping key wihtout expectedKeyID\", this._namePrefix);\n\t\telse Log.finer(\"KeyDirectory getUnwrappedKey: at {0} unwrapping key with expectedKeyID {1} \", \n\t\t\t\tthis._namePrefix,\n\t\t\t\tDataUtils.printHexBytes(expectedKeyID));\n\n\t\tWrappedKeyObject wko = null;\n\t\tKey unwrappedKey = null;\n\t\tbyte [] retrievedKeyID = null;\n\t\t// Do we have one of the wrapping keys already in our cache?\n\t\t// (This list will be empty only if this key is GONE. If it is, we'll move on\n\t\t// to a superseding key below if there is one.)\n\t\t// Do we have one of the wrapping keys in our cache?\n\t\t\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\ttry {\n\t\t\t_keyIDLock.readLock().lock();\n\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the directory has {0} wrapping keys.\", _keyIDs.size());\n\t\t\tfor (byte [] keyid : _keyIDs) {\n\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the KD secret key is wrapped under a key whose id is {0}\", \n\t\t\t\t\t\tDataUtils.printHexBytes(keyid) );\n\t\t\t\tif (_manager.hasKey(keyid)) {\n\t\t\t\t\t// We have it, pull the block, unwrap the node key.\n\t\t\t\t\twko = getWrappedKeyForKeyID(keyid);\n\t\t\t\t\tif (null != wko.wrappedKey()) {\n\t\t\t\t\t\tunwrappedKey = wko.wrappedKey().unwrapKey(_manager.getKey(keyid));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t_keyIDLock.readLock().unlock();\n\t\t}\n\t\t\n\t\tif (null == unwrappedKey) {\n\t\t\t// Not in cache. Is it superseded?\n\t\t\tif (hasSupersededBlock()) {\n\t\t\t\t// OK, is the superseding key just a newer version of this key? If it is, roll\n\t\t\t\t// forward to the latest version and work back from there.\n\t\t\t\tWrappedKeyObject supersededKeyBlock = getSupersededWrappedKey();\n\t\t\t\tif (null != supersededKeyBlock) {\n\t\t\t\t\t// We could just walk up superseding key hierarchy, and then walk back with\n\t\t\t\t\t// decrypted keys. Or we could attempt to jump all the way to the end and then\n\t\t\t\t\t// walk back. Not sure there is a significant win in doing the latter, so start\n\t\t\t\t\t// with the former... have to touch intervening versions in both cases.\n\t\t\t\t\tLog.info(\"Attempting to retrieve key \" + getName() + \" by retrieving superseding key \" + supersededKeyBlock.wrappedKey().wrappingKeyName());\n\t\t\t\t\t\n\t\t\t\t\tKey unwrappedSupersedingKey = null;\n\t\t\t\t\tKeyDirectory supersedingKeyDirectory = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsupersedingKeyDirectory = new KeyDirectory(_manager, supersededKeyBlock.wrappedKey().wrappingKeyName(), _manager.handle());\n\t\t\t\t\t\tsupersedingKeyDirectory.waitForUpdates(SystemConfiguration.SHORT_TIMEOUT);\n\t\t\t\t\t\t// This wraps the key we actually want.\n\t\t\t\t\t\tunwrappedSupersedingKey = supersedingKeyDirectory.getUnwrappedKey(supersededKeyBlock.wrappedKey().wrappingKeyIdentifier());\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tsupersedingKeyDirectory.stopEnumerating();\n\t\t\t\t\t}\n\t\t\t\t\tif (null != unwrappedSupersedingKey) {\n\t\t\t\t\t\t_manager.addKey(supersedingKeyDirectory.getName(), unwrappedSupersedingKey);\n\t\t\t\t\t\tunwrappedKey = supersededKeyBlock.wrappedKey().unwrapKey(unwrappedSupersedingKey);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.info(\"Unable to retrieve superseding key \" + supersededKeyBlock.wrappedKey().wrappingKeyName());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// This is the current key. Enumerate principals and see if we can get a key to unwrap.\n\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: at latest version of key \" + getName() + \", attempting to unwrap.\");\n\t\t\t\t// Assumption: if this key was encrypted directly for me, I would have had a cache\n\t\t\t\t// hit already. The assumption is that I pre-load my cache with my own private key(s).\n\t\t\t\t// So I don't care about principal entries if I get here, I only care about groups.\n\t\t\t\t// Groups may come in three types: ones I know I am a member of, but don't have this\n\t\t\t\t// particular key version for, ones I don't know anything about, and ones I believe\n\t\t\t\t// I'm not a member of but someone might have added me.\n\t\t\t\tif (_manager.groupManager().haveKnownGroupMemberships()) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the directory has {0} principals.\", _principals.size());\n\t\t\t\t\t\tfor (String principal : _principals.keySet()) {\n\t\t\t\t\t\t\tif ((!_manager.groupManager().isGroup(principal)) || (!_manager.groupManager().amKnownGroupMember(principal))) {\n\t\t\t\t\t\t\t\t// On this pass, only do groups that I think I'm a member of. Do them\n\t\t\t\t\t\t\t\t// first as it is likely faster.\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// I know I am a member of this group, or at least I was last time I checked.\n\t\t\t\t\t\t\t// Attempt to get this version of the group private key as I don't have it in my cache.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tKey principalKey = _manager.groupManager().getVersionedPrivateKeyForGroup(this, principal);\n\t\t\t\t\t\t\t\tunwrappedKey = unwrapKeyForPrincipal(principal, principalKey);\n\t\t\t\t\t\t\t\tif (null == unwrappedKey)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} catch (AccessDeniedException aex) {\n\t\t\t\t\t\t\t\t// we're not a member\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (null == unwrappedKey) {\n\t\t\t\t\t// OK, we don't have any groups we know we are a member of. Do the other ones.\n\t\t\t\t\t// Slower, as we crawl the groups tree.\n\t\t\t\t\ttry{\n\t\t\t\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\t\t\t\tfor (String principal : _principals.keySet()) {\n\t\t\t\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the KD secret key is wrapped under the key of principal {0}\", \n\t\t\t\t\t\t\t\t\t\tprincipal);\n\t\t\t\t\t\t\t\tif ((!_manager.groupManager().isGroup(principal)) || (_manager.groupManager().amKnownGroupMember(principal))) {\n\t\t\t\t\t\t\t\t\t// On this pass, only do groups that I don't think I'm a member of.\n\t\t\t\t\t\t\t\t\tif (!_manager.groupManager().isGroup(principal)) Log.finer(\"KeyDirectory getUnwrappedKey: Principal {0} is not a group.\", principal);\n\t\t\t\t\t\t\t\t\tif (_manager.groupManager().amKnownGroupMember(principal)) Log.finer(\"KeyDirectory getUnwrappedKey: I am already known to be a member of the group {0} \", principal);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_manager.groupManager().amCurrentGroupMember(principal)) {\n\t\t\t\t\t\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: I am a member of group {0} \", principal);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tKey principalKey = _manager.groupManager().getVersionedPrivateKeyForGroup(this, principal);\n\t\t\t\t\t\t\t\t\t\tunwrappedKey = unwrapKeyForPrincipal(principal, principalKey);\n\t\t\t\t\t\t\t\t\t\tif (null == unwrappedKey) {\n\t\t\t\t\t\t\t\t\t\t\tLog.warning(\"Unexpected: we are a member of group \" + principal + \" but get a null key.\");\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (AccessDeniedException aex) {\n\t\t\t\t\t\t\t\t\t\tLog.warning(\"Unexpected: we are a member of group \" + principal + \" but get an access denied exception when we try to get its key: \" + aex.getMessage());\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse Log.info(\"KeyDirectory getUnwrappedKey: I am not a member of group {0} \", principal);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != unwrappedKey) {\n\t\t\t_manager.addKey(getName(), unwrappedKey);\n\n\t\t\tif (null != expectedKeyID) {\n\t\t\t\tretrievedKeyID = NodeKey.generateKeyID(unwrappedKey);\n\t\t\t\tif (!Arrays.areEqual(expectedKeyID, retrievedKeyID)) {\n\t\t\t\t\tLog.warning(\"Retrieved and decrypted wrapped key, but it was the wrong key. We wanted \" + \n\t\t\t\t\t\t\tDataUtils.printBytes(expectedKeyID) + \", we got \" + DataUtils.printBytes(retrievedKeyID));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// DKS TODO -- throw AccessDeniedException?\n\t\treturn unwrappedKey;\n\t}","id":5823,"modified_method":"/**\n\t * Unwrap and return the key wrapped in a wrapping key specified by its digest.\n\t * Find a copy of the key block in this directory that we can unwrap (either the private\n\t * key wrapping key block or a wrapped raw symmetric key). Chase superseding keys if\n\t * we have to. This mechanism should be generic, and should work for node keys\n\t * as well as private key wrapping keys in directories following this structure.\n\t * @return\n\t * @throws InvalidKeyException \n\t * @throws ContentDecodingException \n\t * @throws IOException \n\t * @throws NoSuchAlgorithmException \n\t */\n\tpublic Key getUnwrappedKey(byte [] expectedKeyID) \n\t\t\tthrows InvalidKeyException, ContentDecodingException, IOException, NoSuchAlgorithmException {\n\t\t\n\t\tif (Log.isLoggable(Level.FINER)) {\n\t\t\tif (expectedKeyID == null) {\n\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: at {0} unwrapping key wihtout expectedKeyID\", this._namePrefix);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: at {0} unwrapping key with expectedKeyID {1} \",\n\t\t\t\t\t\tthis._namePrefix,\n\t\t\t\t\t\tDataUtils.printHexBytes(expectedKeyID));\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tWrappedKeyObject wko = null;\n\t\tKey unwrappedKey = null;\n\t\tbyte [] retrievedKeyID = null;\n\t\t// Do we have one of the wrapping keys already in our cache?\n\t\t// (This list will be empty only if this key is GONE. If it is, we'll move on\n\t\t// to a superseding key below if there is one.)\n\t\t// Do we have one of the wrapping keys in our cache?\n\t\t\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\ttry {\n\t\t\t_keyIDLock.readLock().lock();\n\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the directory has {0} wrapping keys.\", _keyIDs.size());\n\t\t\t}\n\t\t\tfor (byte [] keyid : _keyIDs) {\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the KD secret key is wrapped under a key whose id is {0}\", \n\t\t\t\t\t\t\tDataUtils.printHexBytes(keyid) );\n\t\t\t\t}\n\t\t\t\tif (_manager.hasKey(keyid)) {\n\t\t\t\t\t// We have it, pull the block, unwrap the node key.\n\t\t\t\t\twko = getWrappedKeyForKeyID(keyid);\n\t\t\t\t\tif (null != wko.wrappedKey()) {\n\t\t\t\t\t\tunwrappedKey = wko.wrappedKey().unwrapKey(_manager.getKey(keyid));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t_keyIDLock.readLock().unlock();\n\t\t}\n\t\t\n\t\tif (null == unwrappedKey) {\n\t\t\t// Not in cache. Is it superseded?\n\t\t\tif (hasSupersededBlock()) {\n\t\t\t\t// OK, is the superseding key just a newer version of this key? If it is, roll\n\t\t\t\t// forward to the latest version and work back from there.\n\t\t\t\tWrappedKeyObject supersededKeyBlock = getSupersededWrappedKey();\n\t\t\t\tif (null != supersededKeyBlock) {\n\t\t\t\t\t// We could just walk up superseding key hierarchy, and then walk back with\n\t\t\t\t\t// decrypted keys. Or we could attempt to jump all the way to the end and then\n\t\t\t\t\t// walk back. Not sure there is a significant win in doing the latter, so start\n\t\t\t\t\t// with the former... have to touch intervening versions in both cases.\n\t\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\t\tLog.info(\"Attempting to retrieve key {0} by retrieving superseding key {1}\", \n\t\t\t\t\t\t\t\tgetName(), supersededKeyBlock.wrappedKey().wrappingKeyName());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tKey unwrappedSupersedingKey = null;\n\t\t\t\t\tKeyDirectory supersedingKeyDirectory = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsupersedingKeyDirectory = new KeyDirectory(_manager, supersededKeyBlock.wrappedKey().wrappingKeyName(), _manager.handle());\n\t\t\t\t\t\tsupersedingKeyDirectory.waitForUpdates(SystemConfiguration.SHORT_TIMEOUT);\n\t\t\t\t\t\t// This wraps the key we actually want.\n\t\t\t\t\t\tunwrappedSupersedingKey = supersedingKeyDirectory.getUnwrappedKey(supersededKeyBlock.wrappedKey().wrappingKeyIdentifier());\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tsupersedingKeyDirectory.stopEnumerating();\n\t\t\t\t\t}\n\t\t\t\t\tif (null != unwrappedSupersedingKey) {\n\t\t\t\t\t\t_manager.addKey(supersedingKeyDirectory.getName(), unwrappedSupersedingKey);\n\t\t\t\t\t\tunwrappedKey = supersededKeyBlock.wrappedKey().unwrapKey(unwrappedSupersedingKey);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\t\t\tLog.info(\"Unable to retrieve superseding key {0}\", supersededKeyBlock.wrappedKey().wrappingKeyName());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// This is the current key. Enumerate principals and see if we can get a key to unwrap.\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: at latest version of key {0}, attempting to unwrap.\", getName());\n\t\t\t\t}\n\t\t\t\t// Assumption: if this key was encrypted directly for me, I would have had a cache\n\t\t\t\t// hit already. The assumption is that I pre-load my cache with my own private key(s).\n\t\t\t\t// So I don't care about principal entries if I get here, I only care about groups.\n\t\t\t\t// Groups may come in three types: ones I know I am a member of, but don't have this\n\t\t\t\t// particular key version for, ones I don't know anything about, and ones I believe\n\t\t\t\t// I'm not a member of but someone might have added me.\n\t\t\t\tif (_manager.groupManager().haveKnownGroupMemberships()) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the directory has {0} principals.\", _principals.size());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (String principal : _principals.keySet()) {\n\t\t\t\t\t\t\tif ((!_manager.groupManager().isGroup(principal)) || (!_manager.groupManager().amKnownGroupMember(principal))) {\n\t\t\t\t\t\t\t\t// On this pass, only do groups that I think I'm a member of. Do them\n\t\t\t\t\t\t\t\t// first as it is likely faster.\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// I know I am a member of this group, or at least I was last time I checked.\n\t\t\t\t\t\t\t// Attempt to get this version of the group private key as I don't have it in my cache.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tKey principalKey = _manager.groupManager().getVersionedPrivateKeyForGroup(this, principal);\n\t\t\t\t\t\t\t\tunwrappedKey = unwrapKeyForPrincipal(principal, principalKey);\n\t\t\t\t\t\t\t\tif (null == unwrappedKey)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} catch (AccessDeniedException aex) {\n\t\t\t\t\t\t\t\t// we're not a member\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (null == unwrappedKey) {\n\t\t\t\t\t// OK, we don't have any groups we know we are a member of. Do the other ones.\n\t\t\t\t\t// Slower, as we crawl the groups tree.\n\t\t\t\t\ttry{\n\t\t\t\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\t\t\t\tfor (String principal : _principals.keySet()) {\n\t\t\t\t\t\t\t\tLog.info(\"KeyDirectory getUnwrappedKey: the KD secret key is wrapped under the key of principal {0}\", \n\t\t\t\t\t\t\t\t\t\tprincipal);\n\t\t\t\t\t\t\t\t// On this pass, only do groups that I don't think I'm a member of.\n\t\t\t\t\t\t\t\tif (!_manager.groupManager().isGroup(principal)) {\n\t\t\t\t\t\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: Principal {0} is not a group.\", principal);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_manager.groupManager().amKnownGroupMember(principal)) {\n\t\t\t\t\t\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: I am already known to be a member of the group {0} \", principal);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_manager.groupManager().amCurrentGroupMember(principal)) {\n\t\t\t\t\t\t\t\t\tLog.finer(\"KeyDirectory getUnwrappedKey: I am a member of group {0} \", principal);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tKey principalKey = _manager.groupManager().getVersionedPrivateKeyForGroup(this, principal);\n\t\t\t\t\t\t\t\t\t\tunwrappedKey = unwrapKeyForPrincipal(principal, principalKey);\n\t\t\t\t\t\t\t\t\t\tif (null == unwrappedKey) {\n\t\t\t\t\t\t\t\t\t\t\tLog.warning(\"Unexpected: we are a member of group {0} but get a null key.\", principal);\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (AccessDeniedException aex) {\n\t\t\t\t\t\t\t\t\t\tLog.warning(\"Unexpected: we are a member of group \" + principal + \" but get an access denied exception when we try to get its key: \" + aex.getMessage());\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse Log.info(\"KeyDirectory getUnwrappedKey: I am not a member of group {0} \", principal);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (null != unwrappedKey) {\n\t\t\t_manager.addKey(getName(), unwrappedKey);\n\n\t\t\tif (null != expectedKeyID) {\n\t\t\t\tretrievedKeyID = NodeKey.generateKeyID(unwrappedKey);\n\t\t\t\tif (!Arrays.areEqual(expectedKeyID, retrievedKeyID)) {\n\t\t\t\t\tLog.warning(\"Retrieved and decrypted wrapped key, but it was the wrong key. We wanted \" + \n\t\t\t\t\t\t\tDataUtils.printBytes(expectedKeyID) + \", we got \" + DataUtils.printBytes(retrievedKeyID));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// DKS TODO -- throw AccessDeniedException?\n\t\treturn unwrappedKey;\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Writes a link to a previous key to the repository. \n\t * @param previousKey\n\t * @param previousKeyPublisher\n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t */ \n\tpublic void addPreviousKeyLink(ContentName previousKey, PublisherID previousKeyPublisher) \n\t\t\t\tthrows ContentEncodingException, IOException {\n\t\t\n\t\tif (hasPreviousKeyBlock()) {\n\t\t\tLog.warning(\"Unexpected, already have previous key block : \" + getPreviousKeyBlockName());\n\t\t}\n\t\tLinkAuthenticator la = (null != previousKeyPublisher) ? new LinkAuthenticator(previousKeyPublisher) : null;\n\t\tLinkObject pklo = new LinkObject(getPreviousKeyBlockName(), new Link(previousKey,la), SaveType.REPOSITORY, _manager.handle());\n\t\tpklo.save();\n\t}","id":5824,"modified_method":"/**\n\t * Writes a link to a previous key to the repository. \n\t * @param previousKey\n\t * @param previousKeyPublisher\n\t * @throws ContentEncodingException \n\t * @throws IOException \n\t */ \n\tpublic void addPreviousKeyLink(ContentName previousKey, PublisherID previousKeyPublisher) \n\t\t\t\tthrows ContentEncodingException, IOException {\n\t\t\n\t\tif (hasPreviousKeyBlock()) {\n\t\t\tLog.warning(\"Unexpected, already have previous key block : {0}\", getPreviousKeyBlockName());\n\t\t}\n\t\tLinkAuthenticator la = (null != previousKeyPublisher) ? new LinkAuthenticator(previousKeyPublisher) : null;\n\t\tLinkObject pklo = new LinkObject(getPreviousKeyBlockName(), new Link(previousKey,la), SaveType.REPOSITORY, _manager.handle());\n\t\tpklo.save();\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Returns the wrapped key object corresponding to a specified principal.\n\t * @param principalName the principal.\n\t * @return the corresponding wrapped key object.\n\t * @throws IOException \n\t * @throws ContentNotReadyException\n\t * @throws ContentDecodingException \n\t */\n\tpublic WrappedKeyObject getWrappedKeyForPrincipal(String principalName) \n\t\tthrows ContentNotReadyException, ContentDecodingException, IOException {\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\t\n\t\tPrincipalInfo pi = null;\n\t\ttry{\n\t\t\t_principalsLock.readLock().lock();\n\t\t\tif (!_principals.containsKey(principalName)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpi = _principals.get(principalName);\n\t\t}finally{\n\t\t\t_principalsLock.readLock().unlock();\n\t\t}\n\t\tif (null == pi) {\n\t\t\tLog.info(\"No block available for principal: \" + principalName);\n\t\t\treturn null;\n\t\t}\n\t\tContentName principalLinkName = getWrappedKeyNameForPrincipal(pi);\n\t\t// This should be a link to the actual key block\n\t\t// TODO DKS should wait on link data...\n\t\tLinkObject principalLink = new LinkObject(principalLinkName, _manager.handle());\n\t\tLog.info(\"Retrieving wrapped key for principal \" + principalName + \" at \" + principalLink.getTargetName());\n\t\tContentName wrappedKeyName = principalLink.getTargetName();\n\t\treturn getWrappedKey(wrappedKeyName);\n\t}","id":5825,"modified_method":"/**\n\t * Returns the wrapped key object corresponding to a specified principal.\n\t * @param principalName the principal.\n\t * @return the corresponding wrapped key object.\n\t * @throws IOException \n\t * @throws ContentNotReadyException\n\t * @throws ContentDecodingException \n\t */\n\tpublic WrappedKeyObject getWrappedKeyForPrincipal(String principalName) \n\t\tthrows ContentNotReadyException, ContentDecodingException, IOException {\n\t\tif (!hasChildren()) {\n\t\t\tthrow new ContentNotReadyException(\"Need to call waitForData(); assuming directory known to be non-empty!\");\n\t\t}\n\t\t\n\t\tPrincipalInfo pi = null;\n\t\ttry{\n\t\t\t_principalsLock.readLock().lock();\n\t\t\tif (!_principals.containsKey(principalName)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpi = _principals.get(principalName);\n\t\t}finally{\n\t\t\t_principalsLock.readLock().unlock();\n\t\t}\n\t\tif (null == pi) {\n\t\t\tLog.info(\"No block available for principal: {0}\", principalName);\n\t\t\treturn null;\n\t\t}\n\t\tContentName principalLinkName = getWrappedKeyNameForPrincipal(pi);\n\t\t// This should be a link to the actual key block\n\t\t// TODO DKS should wait on link data...\n\t\tLinkObject principalLink = new LinkObject(principalLinkName, _manager.handle());\n\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\tLog.info(\"Retrieving wrapped key for principal {0} at {1}\", principalName, principalLink.getTargetName());\n\t\t}\n\t\tContentName wrappedKeyName = principalLink.getTargetName();\n\t\treturn getWrappedKey(wrappedKeyName);\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Unwrap the key wrapped under a specified principal, with a specified unwrapping key.\n\t * @param principal\n\t * @param unwrappingKey\n\t * @return\n\t * @throws ContentGoneException \n\t * @throws ContentNotReadyException \n\t * @throws ContentDecodingException\n\t * @throws InvalidKeyException \n\t * @throws IOException\n\t * @throws NoSuchAlgorithmException \n\t */\n\tprotected Key unwrapKeyForPrincipal(String principal, Key unwrappingKey) \n\t\t\tthrows InvalidKeyException, ContentNotReadyException, \n\t\t\t\t\tContentDecodingException, ContentGoneException, IOException, NoSuchAlgorithmException {\t\t\n\t\tKey unwrappedKey = null;\n\t\tif (null == unwrappingKey) {\n\t\t\tLog.info(\"Null unwrapping key. Cannot unwrap.\");\n\t\t\treturn null;\n\t\t}\n\t\tWrappedKeyObject wko = getWrappedKeyForPrincipal(principal); // checks hasChildren\n\t\tif (null != wko.wrappedKey()) {\n\t\t\tunwrappedKey = wko.wrappedKey().unwrapKey(unwrappingKey);\n\t\t} else {\n\t\t\ttry{\n\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\tLog.info(\"Unexpected: retrieved version \" + _principals.get(principal) + \" of \" + principal + \" group key, but cannot retrieve wrapped key object.\");\n\t\t\t}finally{\n\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t}\n\t\t}\n\t\treturn unwrappedKey;\n\t}","id":5826,"modified_method":"/**\n\t * Unwrap the key wrapped under a specified principal, with a specified unwrapping key.\n\t * @param principal\n\t * @param unwrappingKey\n\t * @return\n\t * @throws ContentGoneException \n\t * @throws ContentNotReadyException \n\t * @throws ContentDecodingException\n\t * @throws InvalidKeyException \n\t * @throws IOException\n\t * @throws NoSuchAlgorithmException \n\t */\n\tprotected Key unwrapKeyForPrincipal(String principal, Key unwrappingKey) \n\t\t\tthrows InvalidKeyException, ContentNotReadyException, \n\t\t\t\t\tContentDecodingException, ContentGoneException, IOException, NoSuchAlgorithmException {\t\t\n\t\tKey unwrappedKey = null;\n\t\tif (null == unwrappingKey) {\n\t\t\tLog.info(\"Null unwrapping key. Cannot unwrap.\");\n\t\t\treturn null;\n\t\t}\n\t\tWrappedKeyObject wko = getWrappedKeyForPrincipal(principal); // checks hasChildren\n\t\tif (null != wko.wrappedKey()) {\n\t\t\tunwrappedKey = wko.wrappedKey().unwrapKey(unwrappingKey);\n\t\t} else {\n\t\t\ttry{\n\t\t\t\t_principalsLock.readLock().lock();\n\t\t\t\tif (Log.isLoggable(Level.INFO)) {\n\t\t\t\t\tLog.info(\"Unexpected: retrieved version {0} of {1} group key, but cannot retrieve wrapped key object.\",\n\t\t\t\t\t\t\t_principals.get(principal), principal);\n\t\t\t\t}\n\t\t\t}finally{\n\t\t\t\t_principalsLock.readLock().unlock();\n\t\t\t}\n\t\t}\n\t\treturn unwrappedKey;\n\t}","commit_id":"6e804db9cff046a8476321282d164f972f0b3fce","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"protected void doUpdate(AnActionEvent e) {\n    IRefactoringTarget refTarget = myRefactoring.getRefactoringTarget();\n    boolean oneEntity = !refTarget.allowMultipleTargets();\n\n    Set entities;\n    if (refTarget.getTarget() == TargetType.NODE) {\n      entities = getNodes(e, oneEntity);\n    } else if (refTarget.getTarget() == TargetType.MODEL) {\n      entities = getModels(e, oneEntity);\n    } else if (refTarget.getTarget() == TargetType.MODULE) {\n      entities = getModules(e, oneEntity);\n    } else {\n      throw new IllegalArgumentException(\"Wrong refatctoring type\" + refTarget.getTarget().getClass().getName());\n    }\n\n    boolean enabled;\n    if (entities == null || entities.isEmpty()) {\n      enabled = false;\n    } else {\n      enabled = !(RefactoringUtil.getApplicability(myRefactoring, entities).lessThan(getMinApplicabilityLevel()));\n    }\n\n    setEnabledState(e.getPresentation(), enabled);\n  }","id":5827,"modified_method":"protected void doUpdate(AnActionEvent e) {\n    IRefactoringTarget refTarget = myRefactoring.getRefactoringTarget();\n    boolean oneEntity = !refTarget.allowMultipleTargets();\n    List entities;\n    switch (refTarget.getTarget()) {\n      case NODE:   entities = getNodes  (e, oneEntity);  break;\n      case MODEL:  entities = getModels (e, oneEntity);  break;\n      case MODULE: entities = getModules(e, oneEntity);  break;\n      default:\n        throw new IllegalArgumentException(\"Wrong refactoring type \" + refTarget.getTarget().getClass().getName());\n    }\n    boolean disabled = entities.isEmpty() || RefactoringUtil.getApplicability(myRefactoring, entities).lessThan(getMinApplicabilityLevel());\n    setEnabledState(e.getPresentation(), !disabled);\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private <T> Set<T> getEntities(boolean oneEntity, T single, List<T> list) {\n    Set<T> result = new HashSet<T>();\n\n    if (single != null) {\n      result.add(single);\n    }\n\n    if (oneEntity) {\n      if (list != null && !list.isEmpty() && !(list.size() == 1 && list.contains(single))) {\n        result.clear();\n      }\n    } else {\n      if (list != null) {\n        result.addAll(list);\n      }\n    }\n\n    return result;\n  }","id":5828,"modified_method":"@NotNull\n  private <T> List<T> getEntities(AnActionEvent e, boolean oneEntity, DataKey<T> singleKey, DataKey<List<T>> listKey) {\n    T single     = e.getData(singleKey);\n    List<T> list = e.getData(listKey);\n\n    List<T> res = new ArrayList<T>(list==null ? 1 : list.size()+1);\n\n    if (list != null) {\n      res.addAll(list);\n    }\n    if (single != null && !res.contains(single)) {\n      res.add(single);\n    }\n    if (oneEntity && res.size() > 1) {\n      res.clear();\n    }\n\n    return res;\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected void doExecute(AnActionEvent e) {\n    ModelAccess.instance().runWriteActionInCommand(new Runnable() {\n      public void run() {\n        SModelRepository.getInstance().saveAll();\n      }\n    });\n\n    boolean isOneTarget = !myRefactoring.getRefactoringTarget().allowMultipleTargets();\n\n    final RefactoringContext context = new RefactoringContext(myRefactoring);\n    context.setCurrentOperationContext(e.getData(MPSDataKeys.OPERATION_CONTEXT));\n\n    context.setSelectedNode(e.getData(MPSDataKeys.NODE));\n    context.setSelectedNodes(toList(getNodes(e, isOneTarget)));\n\n    context.setSelectedModel(e.getData(MPSDataKeys.CONTEXT_MODEL));\n    context.setSelectedModels(toList(getModels(e, isOneTarget)));\n\n    context.setSelectedModule(e.getData(MPSDataKeys.MODULE));\n    context.setSelectedModules(toList(getModules(e, isOneTarget)));\n\n    //noinspection ConstantConditions\n    context.setSelectedProject(e.getData(MPSDataKeys.PROJECT));\n    context.setCurrentScope(e.getData(MPSDataKeys.SCOPE));\n\n    new Thread() {\n      public void run() {\n        new RefactoringProcessor().execute(myRefactoring, context);\n      }\n    }.start();\n  }","id":5829,"modified_method":"protected void doExecute(AnActionEvent e) {\n    ModelAccess.instance().runWriteActionInCommand(new Runnable() {\n      public void run() {\n        SModelRepository.getInstance().saveAll();\n      }\n    });\n\n    boolean isOneTarget = !myRefactoring.getRefactoringTarget().allowMultipleTargets();\n\n    final RefactoringContext context = new RefactoringContext(myRefactoring);\n    context.setCurrentOperationContext(e.getData(MPSDataKeys.OPERATION_CONTEXT));\n\n    context.setSelectedNode(e.getData(MPSDataKeys.NODE));\n    context.setSelectedNodes(getNodes(e, isOneTarget));\n\n    context.setSelectedModel(e.getData(MPSDataKeys.CONTEXT_MODEL));\n    context.setSelectedModels(getModels(e, isOneTarget));\n\n    context.setSelectedModule(e.getData(MPSDataKeys.MODULE));\n    context.setSelectedModules(getModules(e, isOneTarget));\n\n    //noinspection ConstantConditions\n    context.setSelectedProject(e.getData(MPSDataKeys.PROJECT));\n    context.setCurrentScope(e.getData(MPSDataKeys.SCOPE));\n\n    new Thread() {\n      public void run() {\n        new RefactoringProcessor().execute(myRefactoring, context);\n      }\n    }.start();\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Set<SModelDescriptor> getModels(AnActionEvent e, boolean oneEntity) {\n    SModelDescriptor node = e.getData(MPSDataKeys.CONTEXT_MODEL);\n    List<SModelDescriptor> nodes = e.getData(MPSDataKeys.MODELS);\n    return getEntities(oneEntity, node, nodes);\n  }","id":5830,"modified_method":"@NotNull\n  private List<SModelDescriptor> getModels(AnActionEvent e, boolean oneEntity) {\n    return getEntities(e, oneEntity, MPSDataKeys.CONTEXT_MODEL, MPSDataKeys.MODELS);\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Set<SNode> getNodes(AnActionEvent e, boolean oneEntity) {\n    SNode node = e.getData(MPSDataKeys.NODE);\n    List<SNode> nodes = e.getData(MPSDataKeys.NODES);\n    return getEntities(oneEntity, node, nodes);\n  }","id":5831,"modified_method":"@NotNull\n  private List<SNode> getNodes(AnActionEvent e, boolean oneEntity) {\n    return getEntities(e, oneEntity, MPSDataKeys.NODE, MPSDataKeys.NODES);\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Set<IModule> getModules(AnActionEvent e, boolean oneEntity) {\n    IModule node = e.getData(MPSDataKeys.MODULE);\n    List<IModule> nodes = e.getData(MPSDataKeys.MODULES);\n    return getEntities(oneEntity, node, nodes);\n  }","id":5832,"modified_method":"@NotNull\n  private List<IModule> getModules(AnActionEvent e, boolean oneEntity) {\n    return getEntities(e, oneEntity, MPSDataKeys.MODULE, MPSDataKeys.MODULES);\n  }","commit_id":"71914e9114f2a7e8dbcad1f38bb3851e05db6a6e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String createDefaultRule(String ruleName,\r\n                                    String packageName) {\r\n        return createVersionedRule( null, ruleName, null, null );\r\n    }","id":5833,"modified_method":"public String createDefaultRule(String ruleName,\r\n                                    String packageName) {\r\n        return createVersionedRule( packageName,  new String[] { ruleName }, null, null, null );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public String createVersionedRule(String ruleName, String version) {\r\n        return createVersionedRule( null, ruleName, null, version );\r\n    }","id":5834,"modified_method":"public String createVersionedRule(String ruleName, String version) {\r\n        return createVersionedRule( null, new String[] { ruleName }, null, null, version );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void scan(KnowledgeAgent kagent) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        this.scanner.scan();\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );\r\n    }","id":5835,"modified_method":"public void scan(KnowledgeAgent kagent) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n                throw new RuntimeException(\"Unable to compile Knowledge\"+ event );\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        this.scanner.scan();\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public String createDefaultRule(String name) {\r\n        return createDefaultRule( name,\r\n                                  null );\r\n    }","id":5836,"modified_method":"public String createDefaultRule(String ruleName) {\r\n        return createDefaultRule( new String[] { ruleName },\r\n                                  null );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"void applyChangeSet(KnowledgeAgent kagent, String xml) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        kagent.applyChangeSet( ResourceFactory.newByteArrayResource( xml.getBytes() ) );\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );        \r\n    }","id":5837,"modified_method":"void applyChangeSet(KnowledgeAgent kagent, String xml) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n                throw new RuntimeException(\"Unable to compile Knowledge\"+ event );\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        kagent.applyChangeSet( ResourceFactory.newByteArrayResource( xml.getBytes() ) );\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );        \r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public String createAttributeRule(String ruleName,\r\n                                      String attribute) {\r\n        return createVersionedRule( null, ruleName, attribute, null );\r\n    }","id":5838,"modified_method":"public String createAttributeRule(String ruleName,\r\n                                      String attribute) {\r\n        return createVersionedRule( null, new String[] { ruleName }, attribute, null, null );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public String createVersionedRule(String packageName, String ruleName, String attribute, String version) {        \r\n        StringBuilder rule = new StringBuilder();\r\n        if ( StringUtils.isEmpty( packageName ) ) {\r\n            rule.append( \"package org.drools.test\\n\" );\r\n        } else {\r\n            rule.append( \"package \" );\r\n            rule.append( packageName );\r\n            rule.append( \"\\n\" );\r\n        }\r\n        rule.append( \"global java.util.List list\\n\" );\r\n        rule.append( \"rule \" );\r\n        rule.append( ruleName );\r\n        rule.append( \"\\n\" );\r\n        if ( !StringUtils.isEmpty( attribute ) ) {\r\n            rule.append( attribute +\"\\n\" );    \r\n        }\r\n        rule.append( \"when\\n\" );\r\n        rule.append( \"then\\n\" );\r\n        if ( StringUtils.isEmpty( version ) ) {\r\n            rule.append( \"list.add( drools.getRule().getName() );\\n\" );\r\n        } else {\r\n            rule.append(\"list.add( drools.getRule().getName()+\\\"-V\" + version + \"\\\");\\n\");\r\n        }\r\n        rule.append( \"end\\n\" );\r\n\r\n        return rule.toString();       \r\n    }","id":5839,"modified_method":"public String createVersionedRule(String packageName, String[] ruleNames, String attribute, String lhs, String version) {\r\n        return createVersionedRule( true, packageName, ruleNames, attribute, lhs, version );\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"void applyChangeSet(KnowledgeAgent kagent, Resource r) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        kagent.applyChangeSet( r );\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );        \r\n    }","id":5840,"modified_method":"void applyChangeSet(KnowledgeAgent kagent, Resource r) {\r\n        // Calls the Resource Scanner and sets up a listener and a latch so we can wait until it's finished processing, instead of using timers\r\n        final CountDownLatch latch = new CountDownLatch( 1 );\r\n        \r\n        KnowledgeAgentEventListener l = new KnowledgeAgentEventListener() {\r\n            \r\n            public void resourceCompilationFailed(ResourceCompilationFailedEvent event) {\r\n                throw new RuntimeException(\"Unable to compile Knowledge\"+ event );\r\n            }\r\n            \r\n            public void knowledgeBaseUpdated(KnowledgeBaseUpdatedEvent event) {\r\n            }\r\n            \r\n            public void beforeResourceProcessed(BeforeResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void beforeChangeSetProcessed(BeforeChangeSetProcessedEvent event) {                              \r\n            }\r\n            \r\n            public void beforeChangeSetApplied(BeforeChangeSetAppliedEvent event) {\r\n            }\r\n            \r\n            public void afterResourceProcessed(AfterResourceProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetProcessed(AfterChangeSetProcessedEvent event) {\r\n            }\r\n            \r\n            public void afterChangeSetApplied(AfterChangeSetAppliedEvent event) {\r\n                latch.countDown();\r\n            }\r\n        };        \r\n        \r\n        kagent.addEventListener( l );\r\n        \r\n        kagent.applyChangeSet( r );\r\n        \r\n        try {\r\n            latch.await( 10, TimeUnit.SECONDS );\r\n        } catch ( InterruptedException e ) {\r\n            throw new RuntimeException( \"Unable to wait for latch countdown\", e);\r\n        }\r\n        \r\n        if ( latch.getCount() > 0 ) {            \r\n            throw new RuntimeException( \"Event for KnowlegeBase update, due to scan, was never received\" );\r\n        }\r\n        \r\n        kagent.removeEventListener( l );        \r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAddModifyFunctionIncremental() throws Exception {\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"rule rule1 \\n\");\n        sb.append(\"when\\n\");\n        sb.append(\"then\\n\");\n        sb.append(\"function1 (list,\\\"rule1\\\");\\n\");\n        sb.append(\"end\\n\");\n\n        String rule1 = sb.toString();\n\n        File f1 = fileManager.newFile(\"rule1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule1.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n\n        KnowledgePackage knowledgePackage = kbase.getKnowledgePackage(\"org.drools.test\");\n\n        //the resource didn't compile because function1 doesn't exist\n        assertNull(knowledgePackage);\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        //we are going to add function1 now\n        String function1 = this.createCommonFunction(\"function1\", \"function1\");\n        output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(function1);\n        output.write(rule1);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(1, list.size());\n        assertTrue(list.contains(\"function1 from rule1\"));\n\n        //we are going to modify the definition of function1()\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        Thread.sleep(2000);\n\n        //we are going to modify function1 now\n        String function1V2 = this.createCommonFunction(\"function1\", \"function1-V2\");\n        output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(function1V2);\n        output.write(rule1);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(1, list.size());\n        assertTrue(list.contains(\"function1-V2 from rule1\"));\n\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5841,"modified_method":"public void FIXME_testAddModifyFunctionIncremental() throws Exception {\n        File f1 = fileManager.write( \"rule1.drl\",\n                                     createCustomRule( true, null, new String[] { \"rule1\" },\n                                                       null, \"String()\\n\", \"function1 (list,drools.getRule().getName());\\n\") );\n        \n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent( kbase, false );\n\n        try {\n            applyChangeSet( kagent,\n                            ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n            fail( \"Knowledge should fail to compile\" );\n        } catch (Exception e) {\n            \n        }\n        KnowledgePackage knowledgePackage = kbase.getKnowledgePackage( \"org.drools.test\" );\n\n        //the resource didn't compile because function1 doesn't exist\n        assertNull( knowledgePackage );\n\n        //we are going to add function1 now\n        String function1 = this.createCommonFunction( \"function1\",\n                                                      \"function1\" );\n        fileManager.write( \"rule1.drl\",\n                           function1 +\n                           createCustomRule( false, null, new String[] { \"rule1\" },\n                                             null, \"String()\\n\", \"function1 (list, drools.getRule().getName());\\n\") );\n        scan( kagent );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"function1 from rule1\" ) );\n        list.clear();\n\n        String function2 = this.createCommonFunction( \"function1\",\n                                                      \"function1-V2\" );\n        fileManager.write( \"rule1.drl\",\n                           function2 +\n                           createCustomRule( false, null, new String[] { \"rule1\" },\n                                             null, \"String()\\n\", \"function1 (list, drools.getRule().getName());\\n\") );        \n        \n        //we are going to modify the definition of function1()\n        //we are going to modify function1 now\n        scan( kagent );\n\n        ksession.fireAllRules();\n\n        // Rule 1 already existed as is, so should not cause data propagation\n        assertEquals( 0,\n                      list.size() );\n        \n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n        \n        assertEquals( 1,\n                      list.size() );\n        \n        System.out.println( list );\n        assertTrue( list.contains( \"function1-V2 from rule1\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testCompleteRuleScenario() throws Exception {\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n\n        String rule1 = this.createCommonRule(\"rule1\");\n        String rule1V2 = this.createCommonRule(\"rule1\", \"2\");\n        String rule1V3 = this.createCommonRule(\"rule1\", \"3\");\n        String rule2 = this.createCommonRule(\"rule2\");\n        String rule3 = this.createCommonRule(\"rule3\");\n        String rule3V2 = this.createCommonRule(\"rule3\",\"2\");\n        String rule4 = this.createCommonRule(\"rule4\");\n\n\n        File f1 = fileManager.newFile(\"rule1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule2);\n        output.close();\n\n        File f2 = fileManager.newFile(\"rule2.drl\");\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule3);\n        output.close();\n\n        File f3 = fileManager.newFile(\"rule3.drl\");\n        output = new BufferedWriter(new FileWriter(f3));\n        output.write(header);\n        output.write(rule1V2);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n\n        list.clear();\n\n        xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule3.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n\n        fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1-V2\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule3);\n        output.write(rule4);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"rule1-V2\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n        assertTrue(list.contains(\"rule4\"));\n\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        //removes rule1 from rules3.drl and add a new definition for rule3 in that file\n        output = new BufferedWriter(new FileWriter(f3));\n        output.write(header);\n        output.write(rule3V2);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3-V2\"));\n        assertTrue(list.contains(\"rule4\"));\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        //removes rule3 from rules3.drl\n        output = new BufferedWriter(new FileWriter(f3));\n        output.write(header);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule4\"));\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        //removes rule3 from rules3.drl\n        f3.delete();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule4\"));\n\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        //adds rules1-V3 definition to rules2.drl\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule1V3);\n        output.write(rule3);\n        output.write(rule4);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1-V3\"));\n        assertTrue(list.contains(\"rule2\"));\n        //rule3 doesn't reapear because it was not modified in the resource\n        //assertTrue(list.contains(\"rule3\"));\n        assertTrue(list.contains(\"rule4\"));\n\n        kagent.monitorResourceChangeEvents(false);\n\n    }","id":5842,"modified_method":"public void FIXME_testCompleteRuleScenario() throws Exception {\n        File f1 = fileManager.write( \"rule1.drl\",\n                                     createLhsRule( new String[]{\"rule1\", \"rule2\"},\n                                                    \"String()\\n\" ) );\n\n        File f2 = fileManager.write( \"rule2.drl\",\n                                     createLhsRule( \"rule3\",\n                                                    \"String()\\n\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                           xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        FactHandle h1 = ksession.insert( \"String1\" );\n\n        applyChangeSet( kagent,\n                        ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.fireAllRules();\n\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n\n        list.clear();\n\n        File f3 = fileManager.write( \"rule3.drl\",\n                                     createVersionedRule( null,\n                                                          new String[]{\"rule1\"},\n                                                          null,\n                                                          \"String()\\n\",\n                                                          \"2\" ) );\n        xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule3.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        fxml = fileManager.write( \"changeset.xml\",\n                                      xml );\n\n        applyChangeSet( kagent,\n                        ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        // Check as a result of old data against new rules\n        ksession.fireAllRules();\n        assertEquals( 1,\n                      list.size() );\n        \n        assertTrue( list.contains( \"rule1-V2\" ) );\n        list.clear();\n\n        // Check all rules are still there with new data\n        ksession.retract( h1 );\n        h1 = ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V2\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n        list.clear();\n\n        f2 = fileManager.write( \"rule2.drl\",\n                                createLhsRule( new String[]{\"rule3\",\n                                                            \"rule4\"},\n                                               \"String()\\n\" ) );\n        scan( kagent );\n\n        // Check as a result of old data against new rules\n        ksession.fireAllRules();\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule4\" ) );\n        list.clear();\n\n        // Check all rules are still there with new data\n        ksession.retract( h1 );\n        h1 = ksession.insert( \"String3\" );\n        ksession.fireAllRules();\n        assertEquals( 4,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V2\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n        list.clear();\n\n        f3 = fileManager.write( \"rule3.drl\",\n                                createVersionedRule( null,\n                                                     new String[]{\"rule3\"},\n                                                     null,\n                                                     \"String()\",\n                                                     \"2\" ) );\n\n        scan( kagent );\n\n        // Check as a result of old data against new rules\n        ksession.fireAllRules();\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule3-V2\" ) );\n        list.clear();\n\n        // !!! MDP this logic is wrong rule3 and rule3-v2 should both exist\n        //     rule3 is in rule2.drl and rule3-V2 is in rules3.drl\n\n        // Check all rules are still there with new data\n        ksession.retract( h1 );\n        h1 = ksession.insert( \"String4\" );\n        ksession.fireAllRules();\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3-V2\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n        list.clear();\n\n        this.fileManager.deleteFile( f3 );\n        scan( kagent );\n\n        // Check remaining rules are still there with new data\n        ksession.retract( h1 );\n        h1 = ksession.insert( \"String5\" );\n        ksession.fireAllRules();\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n        list.clear();\n\n        String str = createHeader( \"org.drools.test\" ) +\n                     createVersionedRule( false,\n                                          null,\n                                          new String[]{\"rule1\"},\n                                          null,\n                                          \"String()\\n\",\n                                          \"3\" ) +\n                     createVersionedRule( false,\n                                          null,\n                                          new String[]{\"rule3\", \"rule4\"},\n                                          null,\n                                          \"String()\\n\",\n                                          null );\n\n        System.out.println( str );\n\n        f2 = fileManager.write( \"rule2.drl\",\n                                str );\n        scan( kagent );\n\n        ksession.fireAllRules();\n\n        System.out.println( list );\n\n        // MDP the logic from this point is wrong. Rule3 was removed when added, so it should be in the list\n\n        //        File f3 = fileManager.write( \"rule3.drl\",\n        //                                     createVersionedRule( null,\n        //                                                          new String[]{\"rule1\"},\n        //                                                          null,\n        //                                                          \"String()\\n\",\n        //                                                          \"2\" ) );\n        //    \n        //            //adds rules1-V3 definition to rules2.drl\n        //            output = new BufferedWriter(new FileWriter(f2));\n        //            output.write(header);\n        //            output.write(rule1V3);\n        //            output.write(rule3);\n        //            output.write(rule4);\n        //            output.close();\n        //            System.gc();\n        //            Thread.sleep(3000);\n        //    \n        //            ksession = kbase.newStatefulKnowledgeSession();\n        //            list = new ArrayList<String>();\n        //            ksession.setGlobal(\"list\", list);\n        //            ksession.fireAllRules();\n        //            ksession.dispose();\n        //    \n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V3\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n        list.clear();\n        \n        ksession.retract( h1 );\n        h1 = ksession.insert( \"String5\" );    \n        ksession.fireAllRules();\n        \n        //rule3 doesn't reapear because it was not modified in the resource\n        //assertTrue(list.contains(\"rule3\"));\n        \n        \n        assertEquals( 4,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V3\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n        //    \n        //            kagent.monitorResourceChangeEvents(false);\n        ksession.dispose();\n        kagent.dispose();\n\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testMultipleRulesOnFilesUrlIncremental() throws Exception {\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n\n        String rule1 = \"\";\n        rule1 += \"rule rule1\\n\";\n        rule1 += \"when\\n\";\n        rule1 += \"then\\n\";\n        rule1 += \"list.add( drools.getRule().getName() );\\n\";\n        rule1 += \"end\\n\\n\";\n\n\n        String rule2 = \"\";\n        rule2 += \"rule rule2\\n\";\n        rule2 += \"when\\n\";\n        rule2 += \"then\\n\";\n        rule2 += \"list.add( drools.getRule().getName());\\n\";\n        rule2 += \"end\\n\";\n\n        String rule3 = \"\";\n        rule3 += \"rule rule3\\n\";\n        rule3 += \"when\\n\";\n        rule3 += \"then\\n\";\n        rule3 += \"list.add( drools.getRule().getName());\\n\";\n        rule3 += \"end\\n\";\n\n        String rule4 = \"\";\n        rule4 += \"rule rule4\\n\";\n        rule4 += \"when\\n\";\n        rule4 += \"then\\n\";\n        rule4 += \"list.add( drools.getRule().getName());\\n\";\n        rule4 += \"end\\n\";\n\n        String rule5 = \"\";\n        rule5 += \"rule rule5\\n\";\n        rule5 += \"when\\n\";\n        rule5 += \"then\\n\";\n        rule5 += \"list.add( drools.getRule().getName());\\n\";\n        rule5 += \"end\\n\";\n\n        File f1 = fileManager.newFile(\"rules1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule2);\n        output.close();\n\n        File f2 = fileManager.newFile(\"rules2.drl\");\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule3);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rules1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rules2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        ResourceChangeScannerConfiguration sconf = ResourceFactory.getResourceChangeScannerService().newResourceChangeScannerConfiguration();\n        sconf.setProperty(\"drools.resource.scanner.interval\", \"2\");\n        ResourceFactory.getResourceChangeScannerService().configure(sconf);\n\n        KnowledgeAgentConfiguration aconf = KnowledgeAgentFactory.newKnowledgeAgentConfiguration();\n        aconf.setProperty(\"drools.agent.scanDirectories\", \"true\");\n        aconf.setProperty(\"drools.agent.scanResources\", \"true\");\n        // Testing incremental build here\n        aconf.setProperty(\"drools.agent.newInstance\", \"false\");\n        KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent(\n                \"test agent\", kbase, aconf);\n\n        assertEquals(\"test agent\", kagent.getName());\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule4);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule4\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n\n        output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule5);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule5\"));\n        assertTrue(list.contains(\"rule4\"));\n\n        list.clear();\n\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5843,"modified_method":"public void testMultipleRulesOnFilesUrlIncremental() throws Exception {\n\n        File f1 = fileManager.write( \"rules1.drl\",\n                                     createLhsRule( new String[]{\"rule1\", \"rule2\"},\n                                                    \"String()\\n\" ) );\n\n        fileManager.write( \"rules2.drl\",\n                           createLhsRule( \"rule3\",\n                                          \"String()\\n\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rules1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rules2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = createKAgent( kbase,\n                                              false );\n\n        applyChangeSet( kagent,\n                        ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        FactHandle h1 = ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n\n        list.clear();\n        fileManager.write( \"rules2.drl\",\n                           createLhsRule( \"rule4\",\n                                          \"String()\\n\" ) );\n        scan( kagent );\n\n        // Use the same session for incremental build test\n        // Fact is still there, so should match against latest new rule\n        ksession.fireAllRules();\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule4\" ) );\n\n        list.clear();\n        ksession.retract( h1 );\n\n        ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n\n        list.clear();\n        fileManager.write( \"rules1.drl\",\n                           createLhsRule( new String[]{\"rule1\", \"rule5\"},\n                                          \"String()\\n\" ) );\n        scan( kagent );\n\n        // Fact is still there, so should match against latest new rule        \n        ksession.fireAllRules();\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule5\" ) );\n\n        ksession.retract( h1 );\n        list.clear();\n\n        ksession.insert( \"String3\" );\n        ksession.fireAllRules();\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule5\" ) );\n        assertTrue( list.contains( \"rule4\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testModifyPackageUrlIncremental() throws Exception {\n\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 = header + this.createCommonRule(\"rule1\");\n\n        String rule2 = header + this.createCommonRule(\"rule2\");\n\n        // Put just Rule1 in the first package\n        File pkg1 = fileManager.newFile(\"pkg1.pkg\");\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule1.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg, pkg1);\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/pkg1.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        Writer output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(1, list.size());\n        assertTrue(list.contains(\"rule1\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        String rule3 = header+this.createCommonRule(\"rule3\");\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule3.getBytes()),\n                ResourceType.DRL);\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule2.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg, pkg1);\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n\n        assertTrue(list.contains(\"rule3\"));\n        assertTrue(list.contains(\"rule2\"));\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5844,"modified_method":"public void testModifyPackageUrlIncremental() throws Exception {\n\n        // Put just Rule1 in the first package\n        File pkg1 = fileManager.newFile( \"pkg1.pkg\" );\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule1\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg,\n                      pkg1 );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = createKAgent( kbase,\n                                              false );\n        applyChangeSet( kagent,\n                        ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n\n        list.clear();\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule3\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule2\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg,\n                      pkg1 );\n\n        scan( kagent );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule3\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n        ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule3\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testModifyFileUrlIncremental() throws Exception {\n\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 =  this.createCommonRule(\"rule1\");\n\n        File f1 = fileManager.newFile(\"rule1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.close();\n\n        String rule2 = this.createCommonRule(\"rule2\");\n        \n        File f2 = fileManager.newFile(\"rule2.drl\");\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule2);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        String rule3 = this.createCommonRule(\"rule3\");\n\n        output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule3);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n\n        assertTrue(list.contains(\"rule3\"));\n        assertTrue(list.contains(\"rule2\"));\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5845,"modified_method":"public void testModifyFileUrlIncremental() throws Exception {\n        fileManager.write( \"rule1.drl\",\n                           createDefaultRule( \"rule1\" ) );\n\n        fileManager.write( \"rule2.drl\",\n                           createDefaultRule( \"rule2\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n\n        fileManager.write( \"rule1.drl\",\n                           createDefaultRule( \"rule3\" ) );\n\n        scan( kagent );\n\n        // Use the same session for incremental build test\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals( 1,\n                      list.size() );\n\n        assertTrue( list.contains( \"rule3\" ) );\n        ksession.dispose();\n\n        // Check rule2 is still there\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule3\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdatePackageUrlIncremental() throws Exception {\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 = header + this.createCommonRule(\"rule1\");\n\n        String rule2 = header + this.createCommonRule(\"rule2\");\n\n        // Add Rule1 and Rule2 in the first package\n        File pkg1 = fileManager.newFile(\"pkg1.pkg\");\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule1.getBytes()),\n                ResourceType.DRL);\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule2.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg, pkg1);\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/pkg1.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        Writer output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        String rule3 = header + this.createCommonRule(\"rule3\");\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule2.getBytes()),\n                ResourceType.DRL);\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule3.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg, pkg1);\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5846,"modified_method":"public void FIXME_testUpdatePackageUrlIncremental() throws Exception {\n\n        // Add Rule1 and Rule2 in the first package\n        File pkg1 = fileManager.newFile( \"pkg1.pkg\" );\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule1\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule2\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg,\n                      pkg1 );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createDefaultRule( \"rule2\" ).getBytes() ),\n                      ResourceType.DRL );\n        kbuilder.add( ResourceFactory.newByteArrayResource( createDefaultRule( \"rule3\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg,\n                      pkg1 );\n\n        scan( kagent );\n        ksession.fireAllRules();\n\n        // !!! MDP rule2 is not new, it should not have fired\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule3\" ) );\n\n        list.clear();\n        ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Tests that if we have two DRL files, where one file overwrites a rule in\n     * a prior file, that if we modify the first file that was overwritten, that\n     * it will gain precedence and overwrite the other.\n     *\n     * @throws Exception\n     */\n    public void testModifyFileUrlOverwriteIncremental() throws Exception {\n\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n\n        String rule1 = this.createCommonRule(\"rule1\");\n\n        String rule2 = this.createCommonRule(\"rule2\");\n\n        File f1 = fileManager.newFile(\"rule1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule2);\n        output.close();\n\n        String rule1v2 = this.createCommonRule(\"rule1\",\"2\");\n        \n        File f2 = fileManager.newFile(\"rule2.drl\");\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule1v2);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n        \n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1-V2\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        String rule1v3 = this.createCommonRule(\"rule1\",\"3\");\n\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule1v3);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1-V3\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        //Delete f2 now, rule1 should still fire if the indexing worked properly\n        list.clear();\n        f2.delete();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(1, list.size());\n        assertTrue(list.contains(\"rule2\"));\n\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5847,"modified_method":"/**\n     * Tests that if we have two DRL files, where one file overwrites a rule in\n     * a prior file, that if we modify the first file that was overwritten, that\n     * it will gain precedence and overwrite the other.\n     *\n     * @throws Exception\n     */\n    public void testModifyFileUrlOverwriteIncremental() throws Exception {\n        File f1 = fileManager.write( \"rule1.drl\",\n                                     createLhsRule( new String[]{\"rule1\", \"rule2\"},\n                                                    \"String()\\n\" ) );\n\n        File f2 = fileManager.write( \"rule2.drl\",\n                                     createVersionedRule( null,\n                                                          new String[]{\"rule1\"},\n                                                          null,\n                                                          \"String()\\n\",\n                                                          \"2\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V2\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n\n        File f3 = fileManager.write( \"rule2.drl\",\n                                     createVersionedRule( \"rule1\",\n                                                          \"3\" ) );\n\n        scan( kagent );\n\n        ksession.insert( \"String2\" );\n\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V3\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        //Delete f2 now, rule1 should still fire if the indexing worked properly\n        list.clear();\n        this.fileManager.deleteFile( f2 );\n\n        scan( kagent );\n\n        ksession.insert( \"String3\" );\n        ksession.fireAllRules();\n\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdatePackageUrlOverwriteIncremental() throws Exception {\n\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 = header + this.createCommonRule(\"rule1\");\n\n        String rule1v2 = header + this.createCommonRule(\"rule1\",\"2\");\n\n        String rule2 = header + this.createCommonRule(\"rule2\");\n\n        String rule3 = header + this.createCommonRule(\"rule3\");\n\n        // Add Rule1 and Rule2 in the first package\n        File pkgF1 = fileManager.newFile(\"pkg1.pkg\");\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule1.getBytes()),\n                ResourceType.DRL);\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule2.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        KnowledgePackage pkg1 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg1, pkgF1);\n\n        // Add Rule3 in the second package\n        File pkgF2 = fileManager.newFile(\"pkg2.pkg\");\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule3.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        KnowledgePackage pkg2 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg2, pkgF2);\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/pkg1.pkg' type='PKG' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/pkg2.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        Writer output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(3, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n        assertTrue(list.contains(\"rule3\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(rule1v2.getBytes()),\n                ResourceType.DRL);\n        if (kbuilder.hasErrors()) {\n            fail(kbuilder.getErrors().toString());\n        }\n        pkg2 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage(pkg2, pkgF2);\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n\n        assertTrue(list.contains(\"rule1-V2\"));\n        assertTrue(list.contains(\"rule2\"));\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5848,"modified_method":"public void testUpdatePackageUrlOverwriteIncremental() throws Exception {\n\n        // Add Rule1 and Rule2 in the first package\n        File pkgF1 = fileManager.newFile( \"pkg1.pkg\" );\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule1\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        kbuilder.add( ResourceFactory.newByteArrayResource( createLhsRule( \"rule2\",\n                                                                           \"String()\\n\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        KnowledgePackage pkg1 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg1,\n                      pkgF1 );\n\n        // Add Rule3 in the second package\n        File pkgF2 = fileManager.newFile( \"pkg2.pkg\" );\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createDefaultRule( \"rule3\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        KnowledgePackage pkg2 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg2,\n                      pkgF2 );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg2.pkg' type='PKG' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n\n        applyChangeSet( kagent,\n                        ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        FactHandle h1 = ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 3,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n\n        list.clear();\n\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add( ResourceFactory.newByteArrayResource( createVersionedRule( null,\n                                                                                 new String[]{\"rule1\"},\n                                                                                 null,\n                                                                                 \"String()\",\n                                                                                 \"2\" ).getBytes() ),\n                      ResourceType.DRL );\n        if ( kbuilder.hasErrors() ) {\n            fail( kbuilder.getErrors().toString() );\n        }\n        pkg2 = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\n        writePackage( pkg2,\n                      pkgF2 );\n\n        scan( kagent );\n\n        ksession.fireAllRules();\n\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule1-V2\" ) );\n        list.clear();\n\n        ksession.retract( h1 );\n        ksession.insert( \"String2\" );\n\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n\n        assertTrue( list.contains( \"rule1-V2\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRemoveFileUrlIncremental() throws Exception {\n\n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 = this.createCommonRule(\"rule1\");\n\n        File f1 = fileManager.newFile(\"rule1.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.close();\n\n        String rule2 = this.createCommonRule(\"rule2\");\n\n        File f2 = fileManager.newFile(\"rule2.drl\");\n        output = new BufferedWriter(new FileWriter(f2));\n        output.write(header);\n        output.write(rule2);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        list.clear();\n\n        // Delete the file so only rule 2 fires\n        f1.delete();\n        System.gc();\n        Thread.sleep(3000);\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(1, list.size());\n        assertTrue(list.contains(\"rule2\"));\n\n        //Delete f2 now, no rules should fire\n        list.clear();\n        f2.delete();\n        System.gc();\n        Thread.sleep(3000);\n\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(0, list.size());\n\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5849,"modified_method":"public void testRemoveFileUrlIncremental() throws Exception {\n        File f1 = fileManager.write( \"rule1.drl\",\n                                     createLhsRule( \"rule1\",\n                                                    \"String()\" ) );\n\n        File f2 = fileManager.write( \"rule2.drl\",\n                                     createLhsRule( \"rule2\",\n                                                    \"String()\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n\n        // Delete the file so only rule 2 fires\n        this.fileManager.deleteFile( f1 );\n        scan( kagent );\n\n        ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n\n        assertEquals( 1,\n                      list.size() );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        //Delete f2 now, no rules should fire\n        list.clear();\n\n        this.fileManager.deleteFile( f2 );\n        scan( kagent );\n\n        ksession.insert( \"String3\" );\n        ksession.fireAllRules();\n\n        assertEquals( 0,\n                      list.size() );\n\n        ksession.dispose();\n\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Creates two rules (rule1 and rule2) in a drl file. Then it modifies the\n     * drl file to change rule2 with rule3.\n     * @throws Exception\n     */\n    public void testMultipleRulesOnFileUrlIncremental() throws Exception {\n        \n        String header = \"\";\n        header += \"package org.drools.test\\n\";\n        header += \"global java.util.List list\\n\\n\";\n        \n        String rule1 = this.createCommonRule(\"rule1\");\n\n        String rule2 = this.createCommonRule(\"rule2\");\n\n        File f1 = fileManager.newFile(\"rules.drl\");\n        Writer output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule2);\n        output.close();\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\"+this.getPort()+\"/rules.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.newFile(\"changeset.xml\");\n        output = new BufferedWriter(new FileWriter(fxml));\n        output.write(xml);\n        output.close();\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent(kbase);\n\n        kagent.applyChangeSet(ResourceFactory.newUrlResource(fxml.toURI().toURL()));\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule2\"));\n\n        list.clear();\n\n        // have to sleep here as linux lastModified does not do milliseconds\n        // http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=1&t=019789\n        System.gc();\n        Thread.sleep(2000);\n\n        String rule3 = this.createCommonRule(\"rule3\");\n\n        output = new BufferedWriter(new FileWriter(f1));\n        output.write(header);\n        output.write(rule1);\n        output.write(rule3);\n        output.close();\n        System.gc();\n        Thread.sleep(3000);\n\n        // Use the same session for incremental build test\n        ksession = kbase.newStatefulKnowledgeSession();\n        ksession.setGlobal(\"list\", list);\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"rule1\"));\n        assertTrue(list.contains(\"rule3\"));\n\n        kagent.monitorResourceChangeEvents(false);\n    }","id":5850,"modified_method":"/**\n     * Creates two rules (rule1 and rule2) in a drl file. Then it modifies the\n     * drl file to change rule2 with rule3.\n     * @throws Exception\n     */\n    public void testMultipleRulesOnFileUrlIncremental() throws Exception {\n\n        File f1 = fileManager.write( \"rules.drl\",\n                                     createLhsRule( new String[]{\"rule1\", \"rule2\"},\n                                                    \"String()\\n\" ) );\n\n        String xml = \"\";\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\n        xml += \"    <add> \";\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rules.drl' type='DRL' />\";\n        xml += \"    <\/add> \";\n        xml += \"<\/change-set>\";\n        File fxml = fileManager.write( \"changeset.xml\",\n                                       xml );\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n\n        KnowledgeAgent kagent = this.createKAgent( kbase,\n                                                   false );\n\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\n\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n        List<String> list = new ArrayList<String>();\n        ksession.setGlobal( \"list\",\n                            list );\n        ksession.insert( \"String1\" );\n        ksession.fireAllRules();\n        ksession.dispose();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule2\" ) );\n\n        list.clear();\n\n        fileManager.write( \"rules.drl\",\n                            createLhsRule( new String[]{\"rule1\", \"rule3\"},\n                                           \"String()\\n\" ) );\n\n        scan( kagent );\n\n        // Use the same session for incremental build test\n        ksession.insert( \"String2\" );\n        ksession.fireAllRules();\n\n        assertEquals( 2,\n                      list.size() );\n        assertTrue( list.contains( \"rule1\" ) );\n        assertTrue( list.contains( \"rule3\" ) );\n\n        ksession.dispose();\n        kagent.dispose();\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testModifyPackageUrl() throws Exception {\r\n        String rule1 = this.createDefaultRule( \"rule1\" );\r\n\r\n        String rule2 = this.createDefaultRule( \"rule2\" );\r\n\r\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\r\n        writePackage( pkg,\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        rule1 = this.createDefaultRule( \"rule3\" );\r\n\r\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\r\n        writePackage( pkg,\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n\r\n        scan( kagent );\r\n\r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        kagent.dispose();\r\n    }","id":5851,"modified_method":"public void testModifyPackageUrl() throws Exception {\r\n        String rule1 = this.createDefaultRule( \"rule1\" );\r\n\r\n        String rule2 = this.createDefaultRule( \"rule2\" );\r\n\r\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n        KnowledgePackage pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\r\n        writePackage( pkg,\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        applyChangeSet( kagent, ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        rule1 = this.createDefaultRule( \"rule3\" );\r\n\r\n        kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n        pkg = (KnowledgePackage) kbuilder.getKnowledgePackages().iterator().next();\r\n        writePackage( pkg,\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n\r\n        scan( kagent );\r\n\r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        kagent.dispose();\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Tests that if we change a ChangeSet that is referenced by another change\r\n     * set or added by another ChangeSet, that the changes are picked up.\r\n     *\r\n     * @throws Exception\r\n     *             If an unexpected exception occurs.\r\n     */\r\n    public void testChangeSetInChangeSet() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n\r\n        String xml1 = \"\";\r\n        xml1 += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml1 += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml1 += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml1 += \"    <add> \";\r\n        xml1 += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml1 += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml1 += \"    <\/add> \";\r\n        xml1 += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset2.xml\",\r\n                                       xml1 );\r\n        String xml2 = \"\";\r\n        xml2 += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml2 += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml2 += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml2 += \"    <add> \";\r\n        xml2 += \"        <resource source='http://localhost:\" + this.getPort() + \"/changeset2.xml' type='CHANGE_SET' />\";\r\n        xml2 += \"    <\/add> \";\r\n        xml2 += \"<\/change-set>\";\r\n        File fxm2 = fileManager.write( \"changeset.xml\",\r\n                                       xml1 );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxm2.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n        \r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule3\" ) );        \r\n\r\n        scan(kagent);\r\n\r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        kagent.dispose();\r\n    }","id":5852,"modified_method":"/**\r\n     * Tests that if we change a ChangeSet that is referenced by another change\r\n     * set or added by another ChangeSet, that the changes are picked up.\r\n     *\r\n     * @throws Exception\r\n     *             If an unexpected exception occurs.\r\n     */\r\n    public void testChangeSetInChangeSet() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n\r\n        String xml1 = \"\";\r\n        xml1 += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml1 += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml1 += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml1 += \"    <add> \";\r\n        xml1 += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml1 += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml1 += \"    <\/add> \";\r\n        xml1 += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset2.xml\",\r\n                                       xml1 );\r\n        String xml2 = \"\";\r\n        xml2 += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml2 += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml2 += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml2 += \"    <add> \";\r\n        xml2 += \"        <resource source='http://localhost:\" + this.getPort() + \"/changeset2.xml' type='CHANGE_SET' />\";\r\n        xml2 += \"    <\/add> \";\r\n        xml2 += \"<\/change-set>\";\r\n        File fxm2 = fileManager.write( \"changeset.xml\",\r\n                                       xml1 );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        applyChangeSet( kagent, ResourceFactory.newUrlResource( fxm2.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n        \r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule3\" ) );        \r\n\r\n        scan(kagent);\r\n\r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        kagent.dispose();\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testModifyFileUrlWithStateless() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatelessKnowledgeSession ksession = kagent.newStatelessKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.execute( \"hello\" );\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule3\" ) );          \r\n        \r\n        scan(kagent);\r\n\r\n        ksession.execute( \"hello\" );\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        kagent.dispose();\r\n    }","id":5853,"modified_method":"public void testModifyFileUrlWithStateless() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        applyChangeSet( kagent, ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatelessKnowledgeSession ksession = kagent.newStatelessKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.execute( \"hello\" );\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule3\" ) );          \r\n        \r\n        scan(kagent);\r\n\r\n        ksession.execute( \"hello\" );\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        kagent.dispose();\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testModifyFileUrl() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n        \r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = createKAgent( kbase );\r\n\r\n        kagent.applyChangeSet( ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        this.fileManager.write( \"rule1.drl\", createDefaultRule( \"rule3\" ) );\r\n        \r\n        scan(kagent);\r\n        \r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        \r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        \r\n        kagent.dispose();\r\n    }","id":5854,"modified_method":"public void testModifyFileUrl() throws Exception {\r\n        fileManager.write( \"rule1.drl\",\r\n                           createDefaultRule( \"rule1\" ) );        \r\n        \r\n        fileManager.write( \"rule2.drl\",\r\n                           createDefaultRule( \"rule2\" ) );\r\n        \r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule1.drl' type='DRL' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/rule2.drl' type='DRL' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n\r\n        File fxml = fileManager.write( \"changeset.xml\",\r\n                                       xml );\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n        KnowledgeAgent kagent = createKAgent( kbase );\r\n\r\n        applyChangeSet( kagent, ResourceFactory.newUrlResource( fxml.toURI().toURL() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        this.fileManager.write( \"rule1.drl\", createDefaultRule( \"rule3\" ) );\r\n        \r\n        scan(kagent);\r\n        \r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        \r\n        assertTrue( list.contains( \"rule3\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n        \r\n        kagent.dispose();\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void FIXMEtestDeletePackageUrl() throws Exception {\r\n        String rule1 = this.createDefaultRule( \"rule1\",\r\n                                               \"org.drools.test1\" );\r\n\r\n        String rule2 = this.createDefaultRule( \"rule2\",\r\n                                               \"org.drools.test2\" );\r\n\r\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n\r\n        Map<String, KnowledgePackage> map = new HashMap<String, KnowledgePackage>();\r\n        for ( KnowledgePackage pkg : kbuilder.getKnowledgePackages() ) {\r\n            map.put( pkg.getName(),\r\n                     pkg );\r\n        }\r\n        writePackage( (KnowledgePackage) map.get( \"org.drools.test1\" ),\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n        writePackage( (KnowledgePackage) map.get( \"org.drools.test2\" ),\r\n                      fileManager.newFile( \"pkg2.pkg\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg2.pkg' type='PKG' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n\r\n        KnowledgeAgent kagent = this.createKAgent( kbase );\r\n\r\n        kagent.applyChangeSet( ResourceFactory.newByteArrayResource( xml.getBytes() ) );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <remove> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg2.pkg' type='PKG' />\";\r\n        xml += \"    <\/remove> \";\r\n        xml += \"<\/change-set>\";\r\n        \r\n        applyChangeSet( kagent, xml );\r\n        \r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 1,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        kagent.dispose();\r\n    }","id":5855,"modified_method":"public void FIXMEtestDeletePackageUrl() throws Exception {\r\n        String rule1 = this.createDefaultRule( \"rule1\",\r\n                                               \"org.drools.test1\" );\r\n\r\n        String rule2 = this.createDefaultRule( \"rule2\",\r\n                                               \"org.drools.test2\" );\r\n\r\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule1.getBytes() ),\r\n                      ResourceType.DRL );\r\n        kbuilder.add( ResourceFactory.newByteArrayResource( rule2.getBytes() ),\r\n                      ResourceType.DRL );\r\n        if ( kbuilder.hasErrors() ) {\r\n            fail( kbuilder.getErrors().toString() );\r\n        }\r\n\r\n        Map<String, KnowledgePackage> map = new HashMap<String, KnowledgePackage>();\r\n        for ( KnowledgePackage pkg : kbuilder.getKnowledgePackages() ) {\r\n            map.put( pkg.getName(),\r\n                     pkg );\r\n        }\r\n        writePackage( (KnowledgePackage) map.get( \"org.drools.test1\" ),\r\n                      fileManager.newFile( \"pkg1.pkg\" ) );\r\n        writePackage( (KnowledgePackage) map.get( \"org.drools.test2\" ),\r\n                      fileManager.newFile( \"pkg2.pkg\" ) );\r\n\r\n        String xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <add> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg1.pkg' type='PKG' />\";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg2.pkg' type='PKG' />\";\r\n        xml += \"    <\/add> \";\r\n        xml += \"<\/change-set>\";\r\n\r\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\r\n\r\n        KnowledgeAgent kagent = this.createKAgent( kbase, false );\r\n\r\n        applyChangeSet( kagent, ResourceFactory.newByteArrayResource( xml.getBytes() )  );\r\n\r\n        StatefulKnowledgeSession ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        List<String> list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 2,\r\n                      list.size() );\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        assertTrue( list.contains( \"rule2\" ) );\r\n\r\n        list.clear();\r\n\r\n        xml = \"\";\r\n        xml += \"<change-set xmlns='http://drools.org/drools-5.0/change-set'\";\r\n        xml += \"    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'\";\r\n        xml += \"    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >\";\r\n        xml += \"    <remove> \";\r\n        xml += \"        <resource source='http://localhost:\" + this.getPort() + \"/pkg2.pkg' type='PKG' />\";\r\n        xml += \"    <\/remove> \";\r\n        xml += \"<\/change-set>\";\r\n        \r\n        applyChangeSet( kagent, xml );\r\n        \r\n        ksession = kagent.getKnowledgeBase().newStatefulKnowledgeSession();\r\n        list = new ArrayList<String>();\r\n        ksession.setGlobal( \"list\",\r\n                            list );\r\n        ksession.fireAllRules();\r\n        ksession.dispose();\r\n\r\n        assertEquals( 1,\r\n                      list.size() );\r\n\r\n        assertTrue( list.contains( \"rule1\" ) );\r\n        kagent.dispose();\r\n    }","commit_id":"6870d3981d7861b8ecd2003bb204923a7e876bfe","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public BridgeTopologyLinkCandidate parseBFTEntry(BridgeTopologyLinkCandidate topologyLinkCandidate) {\n        for (BridgeTopologyLinkCandidate linkcandidate: bridgeTopologyPortCandidates) {\n            LOG.info(\"parseBFTEntry: checking node {}, port {}: mac {}\",linkcandidate.getBridgeTopologyPort().getNodeid(),linkcandidate.getBridgeTopologyPort().getBridgePort(), linkcandidate.getMacs());\n            // regola intersezione nulla non faccio niente\n        \tif (linkcandidate.intersectionNull(topologyLinkCandidate)) {\n        \t\tcontinue;\n        \t} \n\n        \tif (linkcandidate.getRole() == BridgePortRole.BACKBONE) {\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t}\n\n        \tif (topologyLinkCandidate.getRole() == BridgePortRole.BACKBONE) {\n        \t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n            \tlinkcandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t}\n\n           // regola della dipendenza assoluta direzione avanti\n        \tif (linkcandidate.strictContained(topologyLinkCandidate)) {\n                LOG.info(\"parseBFTEntry: adding target {} to node {}, backbone port {}\", linkcandidate.getBridgeTopologyPort().getNodeid(),\n                \t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid(),topologyLinkCandidate.getBridgeTopologyPort().getBridgePort());\n            \ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n            \ttopologyLinkCandidate.addTarget(linkcandidate.getBridgeTopologyPort().getNodeid());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n            \tlinkcandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t} \n        \t// regola della dipendenza assoluta direzione dietro\n        \tif (topologyLinkCandidate.strictContained(linkcandidate)) {\n                LOG.info(\"parseBFTEntry: adding target {} to node {},backbone port {}\", topologyLinkCandidate.getBridgeTopologyPort().getNodeid(),\n                \t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),linkcandidate.getBridgeTopologyPort().getBridgePort());\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \tlinkcandidate.addTarget(topologyLinkCandidate.getBridgeTopologyPort().getNodeid());\n            \tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n            \ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n        \t\tcontinue;\n        \t}\n        \t/* \n        \t * This class is designed to get the topology on one bridge forwarding table at a time\n        \t * so this means that the rules are written considering port1 belonging \n        \t * always to the same bridge.\n        \t * \n        \t * \n        \t * We assume the following:\n        \t * \n        \t * 1) there where no loops into the network (so there is a hierarchy)\n        \t * \n        \t * Corollary 1\n        \t * \n        \t * If exists there is only one backbone port from sw1 and sw2\n        \t * If exists there is only one backbone port from sw2 and sw1\n        \t * \n        \t * Corollary 2\n        \t * There is only one \"pseudo device\" containing the bridge\n        \t * \n        \t * Corollary 3\n        \t * on a backbone port two different mac address must belong to the same pseudo device\n        \t * \n        \t */\n        \t\n         \tif (linkcandidate.getLinkPortCandidate() == null) {\n        \t\tlinkcandidate.setLinkPortCandidate(topologyLinkCandidate.getBridgeTopologyPort());\n        \t\ttopologyLinkCandidate.setLinkPortCandidate(linkcandidate.getBridgeTopologyPort());\n        \t\tcontinue;\n        \t} \n\n        \tif (topologyLinkCandidate.getBridgeTopologyPort().getNodeid().intValue() == linkcandidate.getLinkPortCandidate().getNodeid().intValue()  \n        \t\t\t&& topologyLinkCandidate.getBridgeTopologyPort().getBridgePort().intValue() != linkcandidate.getLinkPortCandidate().getBridgePort().intValue()) {\n        \t\tlinkcandidate.removeMacs(linkcandidate.getLinkPortCandidate().getMacs());\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n            \ttopologyLinkCandidate.setLinkPortCandidate(null);\n            \tlinkcandidate.addTarget(topologyLinkCandidate.getBridgeTopologyPort().getNodeid());\n            \tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n            \tcontinue;\n        \t}\n        \t\n        \tif (linkcandidate.getBridgeTopologyPort().getNodeid().intValue() == topologyLinkCandidate.getLinkPortCandidate().getNodeid().intValue()\n        \t\t\t&& linkcandidate.getBridgeTopologyPort().getBridgePort().intValue() != topologyLinkCandidate.getLinkPortCandidate().getBridgePort().intValue()) {\n        \t\ttopologyLinkCandidate.removeMacs(topologyLinkCandidate.getLinkPortCandidate().getMacs());\n        \t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n        \t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n        \t\ttopologyLinkCandidate.addTarget(linkcandidate.getBridgeTopologyPort().getNodeid());\n        \t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n        \t\tcontinue;\n        \t}\n        }\n        return topologyLinkCandidate;\n\t}","id":5856,"modified_method":"public BridgeTopologyLinkCandidate parseBFTEntry(BridgeTopologyLinkCandidate topologyLinkCandidate) {\n    \t/* \n    \t * This class is designed to get the topology on one bridge forwarding table at a time\n    \t * so this means that the rules are written considering port1 belonging \n    \t * always to the same bridge.\n    \t * \n    \t * \n    \t * We assume the following:\n    \t * \n    \t * 1) there where no loops into the network (so there is a hierarchy)\n    \t * \n    \t * Corollary 1\n    \t * \n    \t * If exists there is only one backbone port from sw1 and sw2\n    \t * If exists there is only one backbone port from sw2 and sw1\n    \t * \n    \t * Corollary 2\n    \t * There is only one \"pseudo device\" containing the bridge\n    \t * \n    \t * Corollary 3\n    \t * on a backbone port two different mac address must belong to the same pseudo device\n    \t * \n    \t */\n        for (BridgeTopologyLinkCandidate linkcandidate: bridgeTopologyPortCandidates) {\n            LOG.info(\"parseBFTEntry: checking node {}, port {}: mac {}\",linkcandidate.getBridgeTopologyPort().getNodeid(),linkcandidate.getBridgeTopologyPort().getBridgePort(), linkcandidate.getMacs());\n\n            // regola intersezione nulla non faccio niente\n            // regola intersezione nulla non faccio niente\n        \tif (linkcandidate.getBridgeTopologyPort().getNodeid().intValue() ==\n        \t\t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid().intValue()) {\n        \t\tLOG.info(\"parseBFTEntry: rule 00: same node: do nothing\");\n        \t\tcontinue;\n        \t} \n        \tif (linkcandidate.intersectionNull(topologyLinkCandidate)) {\n        \t\tLOG.info(\"parseBFTEntry: rule 0: intesection null: do nothing\");\n        \t\tcontinue;\n        \t} \n\n        \tif (linkcandidate.getRole() == BridgePortRole.BACKBONE) {\n        \t\tLOG.info(\"parseBFTEntry: rule 1: found old backbone port: setting new port to DIRECT\");\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t}\n\n        \tif (topologyLinkCandidate.getRole() == BridgePortRole.BACKBONE) {\n        \t\tLOG.info(\"parseBFTEntry: rule 2: found new backbone port: setting old port to DIRECT\");\n        \t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n            \tlinkcandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t}\n\n           // regola della dipendenza assoluta direzione avanti\n        \tif (linkcandidate.strictContained(topologyLinkCandidate)) {\n                LOG.info(\"parseBFTEntry: rule 3: old contained in new: adding target {} to node {}, backbone port {}\", linkcandidate.getBridgeTopologyPort().getNodeid(),\n                \t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid(),topologyLinkCandidate.getBridgeTopologyPort().getBridgePort());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n            \ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n            \ttopologyLinkCandidate.addTarget(linkcandidate.getBridgeTopologyPort().getNodeid());\n            \tlinkcandidate.setRole(BridgePortRole.DIRECT);\n            \tcontinue;\n        \t} \n        \t// regola della dipendenza assoluta direzione dietro\n        \tif (topologyLinkCandidate.strictContained(linkcandidate)) {\n                LOG.info(\"parseBFTEntry: rule 4: new contained in old: adding target {} to node {},backbone port {}\", topologyLinkCandidate.getBridgeTopologyPort().getNodeid(),\n                \t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),linkcandidate.getBridgeTopologyPort().getBridgePort());\n            \tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \tlinkcandidate.addTarget(topologyLinkCandidate.getBridgeTopologyPort().getNodeid());\n            \ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n        \t\tcontinue;\n        \t}\n        \t\n         \tif (linkcandidate.getLinkPortCandidate() == null) {\n                LOG.info(\"parseBFTEntry: rule 5: no suitable data: setting candidate each other\");\n        \t\tlinkcandidate.setLinkPortCandidate(topologyLinkCandidate.getBridgeTopologyPort());\n        \t\ttopologyLinkCandidate.setLinkPortCandidate(linkcandidate.getBridgeTopologyPort());\n        \t\tcontinue;\n        \t} \n\n        \tif (linkcandidate.getBridgeTopologyPort().getNodeid().intValue() == topologyLinkCandidate.getLinkPortCandidate().getNodeid().intValue()\n        \t\t\t&& linkcandidate.getBridgeTopologyPort().getBridgePort().intValue() != topologyLinkCandidate.getLinkPortCandidate().getBridgePort().intValue()) {\n                LOG.info(\"parseBFTEntry: rule 6: old contained in new: adding target {} to node {}, backbone port {}\", linkcandidate.getBridgeTopologyPort().getNodeid(),\n                \t\ttopologyLinkCandidate.getBridgeTopologyPort().getNodeid(),topologyLinkCandidate.getBridgeTopologyPort().getBridgePort());\n           \t\ttopologyLinkCandidate.setRole(BridgePortRole.BACKBONE);\n        \t\ttopologyLinkCandidate.removeMacs(linkcandidate.getMacs());\n        \t\ttopologyLinkCandidate.addTarget(linkcandidate.getBridgeTopologyPort().getNodeid());\n        \t\t\n        \t\tlinkcandidate.setRole(BridgePortRole.DIRECT);\n        \t\tlinkcandidate.setLinkPortCandidate(null);\n        \t\tcontinue;\n        \t}\n\n        \tif (topologyLinkCandidate.getBridgeTopologyPort().getNodeid().intValue() == linkcandidate.getLinkPortCandidate().getNodeid().intValue()  \n        \t\t\t&& topologyLinkCandidate.getBridgeTopologyPort().getBridgePort().intValue() != linkcandidate.getLinkPortCandidate().getBridgePort().intValue()) {\n                LOG.info(\"parseBFTEntry: rule 7: new contained in old: adding target {} to node {},backbone port {}\", topologyLinkCandidate.getBridgeTopologyPort().getNodeid(),\n                \t\tlinkcandidate.getBridgeTopologyPort().getNodeid(),linkcandidate.getBridgeTopologyPort().getBridgePort());\n        \t\tlinkcandidate.setRole(BridgePortRole.BACKBONE);\n        \t\tlinkcandidate.removeMacs(topologyLinkCandidate.getMacs());\n            \tlinkcandidate.addTarget(topologyLinkCandidate.getBridgeTopologyPort().getNodeid());\n\t\n        \t\ttopologyLinkCandidate.setRole(BridgePortRole.DIRECT);\n            \ttopologyLinkCandidate.setLinkPortCandidate(null);\n            \tcontinue;\n        \t}\n\n        }\n        return topologyLinkCandidate;\n\t}","commit_id":"1f68a7ad97561b8eb1f57618d6a7f5364e5ec989","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row,\n        List<byte[]> columns, long timestamp) throws IOError {\n      try {\n        HTable table = getTable(tableName);\n        if (columns == null) {\n          Get get = new Get(row);\n          get.setTimeRange(Long.MIN_VALUE, timestamp);\n          Result result = table.get(get);\n          return ThriftUtilities.rowResultFromHBase(result.getRowResult());\n        }\n        byte[][] columnArr = columns.toArray(new byte[columns.size()][]);\n        Get get = new Get(row);\n        for(byte [] column : columnArr) {\n          byte [][] famAndQf = KeyValue.parseColumn(column);\n          get.addColumn(famAndQf[0], famAndQf[1]);\n        }\n        get.setTimeRange(Long.MIN_VALUE, timestamp);\n        Result result = table.get(get);\n        return ThriftUtilities.rowResultFromHBase(result.getRowResult());\n      } catch (IOException e) {\n        throw new IOError(e.getMessage());\n      }\n    }","id":5857,"modified_method":"public List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row,\n        List<byte[]> columns, long timestamp) throws IOError {\n      try {\n        HTable table = getTable(tableName);\n        if (columns == null) {\n          Get get = new Get(row);\n          get.setTimeRange(Long.MIN_VALUE, timestamp);\n          Result result = table.get(get);\n          return ThriftUtilities.rowResultFromHBase(result.getRowResult());\n        }\n        byte[][] columnArr = columns.toArray(new byte[columns.size()][]);\n        Get get = new Get(row);\n        for(byte [] column : columnArr) {\n          byte [][] famAndQf = KeyValue.parseColumn(column);\n          if (famAndQf[1] == null || famAndQf[1].length == 0) {\n              get.addFamily(famAndQf[0]);\n          } else {\n              get.addColumn(famAndQf[0], famAndQf[1]);\n          }\n        }\n        get.setTimeRange(Long.MIN_VALUE, timestamp);\n        Result result = table.get(get);\n        return ThriftUtilities.rowResultFromHBase(result.getRowResult());\n      } catch (IOException e) {\n        throw new IOError(e.getMessage());\n      }\n    }","commit_id":"e096368480561ceab703c58022bd9a7e310f69f0","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Adds an array of columns specified the old format, family:qualifier.\n   * <p>\n   * Overrides previous calls to addFamily for any families in the input.\n   * @param columns array of columns, formatted as <pre>family:qualifier<\/pre>\n   */\n  public Scan addColumns(byte [][] columns) {\n    for(int i=0; i<columns.length; i++) {\n      try {\n        byte [][] split = KeyValue.parseColumn(columns[i]);\n        addColumn(split[0], split[1]);\n      } catch(Exception e) {}\n    }\n    return this;\n  }","id":5858,"modified_method":"/**\n   * Adds an array of columns specified the old format, family:qualifier.\n   * <p>\n   * Overrides previous calls to addFamily for any families in the input.\n   * @param columns array of columns, formatted as <pre>family:qualifier<\/pre>\n   */\n  public Scan addColumns(byte [][] columns) {\n    for(int i=0; i<columns.length; i++) {\n      try {\n        byte [][] split = KeyValue.parseColumn(columns[i]);\n        if (split[1].length == 0) {\n          addFamily(split[0]);\n        } else {\n          addColumn(split[0], split[1]);\n        }\n      } catch(Exception e) {}\n    }\n    return this;\n  }","commit_id":"c92c02b5fcb7c5217bd5dadb3fad489e8b030f14","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @param column Old format column.\n   * @return This.\n   */\n  public Get addColumn(final byte [] column) {\n    if (column == null) return this;\n    byte [][] split = KeyValue.parseColumn(column);\n    addColumn(split[0], split[1]);\n    return this;\n  }","id":5859,"modified_method":"/**\n   * @param column Old format column.\n   * @return This.\n   */\n  public Get addColumn(final byte [] column) {\n    if (column == null) return this;\n    byte [][] split = KeyValue.parseColumn(column);\n    if (split.length > 1 && split[1] != null && split[1].length > 0) {\n      addColumn(split[0], split[1]);\n    } else {\n      addFamily(split[0]);\n    }\n    return this;\n  }","commit_id":"5db0a06b3f970765c51cad931b9c9778d33f6dce","url":"https://github.com/apache/hbase"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                if (parm.getParmName().equals(\"rancidGroupName\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","id":5860,"modified_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                log().debug(\"parm name: \" + parm.getParmName());\n                if (parm.getParmName().equals(\".1.3.6.1.4.1.31543.1.1.2.1.1.3\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","commit_id":"4a60b38a3a2144ca18b2cf8a803e2931f4fdec1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                if (parm.getParmName().equals(\"rancidGroupName\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","id":5861,"modified_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                log().debug(\"parm name: \" + parm.getParmName());\n                if (parm.getParmName().equals(\".1.3.6.1.4.1.31543.1.1.2.1.1.3\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","commit_id":"3fcd1f676a55f5d893be48caa2ef6c8edfd5c8c1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                if (parm.getParmName().equals(\"rancidGroupName\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","id":5862,"modified_method":"@EventHandler(uei = EventConstants.RANCID_GROUP_PROCESSING_COMPLETED_UEI)\n    public void handleRancidGroupProcessingCompleted(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.getParms() != null ) {\n            Iterator<Parm> ite = e.getParms().iterateParm();\n            while (ite.hasNext()) {\n                Parm parm = ite.next();\n                log().debug(\"parm name: \" + parm.getParmName());\n                if (parm.getParmName().equals(\".1.3.6.1.4.1.31543.1.1.2.1.1.3\")) {\n                    updateGroupConfiguration(parm.getValue().getContent());\n                    break;\n                }\n            }\n        }\n    }","commit_id":"cf7e9d7f7f5b0b02b2dd280a0e43e5767e54af3f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private MyApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","id":5863,"modified_method":"private TestApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testAutoCheckpointsOnManageApp() throws Exception {\n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        // Assert has expected entities and config\n        assertEquals(newApp.getId(), origApp.getId());\n        assertEquals(ImmutableList.copyOf(newApp.getChildren()), ImmutableList.of(newE));\n        assertEquals(newE.getId(), origE.getId());\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myval\");\n    }","id":5864,"modified_method":"@Test\n    public void testAutoCheckpointsOnManageApp() throws Exception {\n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        // Assert has expected entities and config\n        assertEquals(newApp.getId(), origApp.getId());\n        assertEquals(ImmutableList.copyOf(newApp.getChildren()), ImmutableList.of(newE));\n        assertEquals(newE.getId(), origE.getId());\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testPersistsOnExplicitCheckpointOfEntity() throws Exception {\n        origE.setConfig(MyEntity.MY_CONFIG, \"mynewval\");\n        origE.setAttribute(MyEntity.MY_SENSOR, \"mysensorval\");\n        \n        // Assert persisted the modified config/attributes\n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"mynewval\");\n        assertEquals(newE.getAttribute(MyEntity.MY_SENSOR), \"mysensorval\");\n    }","id":5865,"modified_method":"@Test\n    public void testPersistsOnExplicitCheckpointOfEntity() throws Exception {\n        origE.setConfig(MyEntity.MY_CONFIG, \"mynewval\");\n        origE.setAttribute(MyEntity.MY_SENSOR, \"mysensorval\");\n        \n        // Assert persisted the modified config/attributes\n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"mynewval\");\n        assertEquals(newE.getAttribute(MyEntity.MY_SENSOR), \"mysensorval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testAutoCheckpointsOnManageDynamicEntity() throws Exception {\n        final MyEntity origE2 = new MyEntityImpl(MutableMap.of(\"myconfig\", \"myval2\"), origApp);\n        Entities.manage(origE2);\n        \n        MyApplication newApp = rebind();\n        MyEntity newE2 = (MyEntity) Iterables.find(newApp.getChildren(), new Predicate<Entity>() {\n                @Override public boolean apply(@Nullable Entity input) {\n                    return origE2.getId().equals(input.getId());\n                }});\n        \n        // Assert has expected entities and config\n        assertEquals(newApp.getChildren().size(), 2); // expect equivalent of origE and origE2\n        assertEquals(newE2.getId(), origE2.getId());\n        assertEquals(newE2.getConfig(MyEntity.MY_CONFIG), \"myval2\");\n    }","id":5866,"modified_method":"@Test\n    public void testAutoCheckpointsOnManageDynamicEntity() throws Exception {\n        final MyEntity origE2 = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class).configure(\"myconfig\", \"myval2\"));\n        Entities.manage(origE2);\n        \n        TestApplication newApp = rebind();\n        MyEntity newE2 = (MyEntity) Iterables.find(newApp.getChildren(), new Predicate<Entity>() {\n                @Override public boolean apply(@Nullable Entity input) {\n                    return origE2.getId().equals(input.getId());\n                }});\n        \n        // Assert has expected entities and config\n        assertEquals(newApp.getChildren().size(), 2); // expect equivalent of origE and origE2\n        assertEquals(newE2.getId(), origE2.getId());\n        assertEquals(newE2.getConfig(MyEntity.MY_CONFIG), \"myval2\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testAutoCheckpointsOnUnmanageEntity() throws Exception {\n        Entities.unmanage(origE);\n        \n        MyApplication newApp = rebind();\n        \n        // Assert does not container unmanaged entity\n        assertEquals(ImmutableList.copyOf(newApp.getChildren()), Collections.emptyList());\n        assertNull(((EntityInternal)newApp).getManagementContext().getEntityManager().getEntity(origE.getId()));\n    }","id":5867,"modified_method":"@Test\n    public void testAutoCheckpointsOnUnmanageEntity() throws Exception {\n        Entities.unmanage(origE);\n        \n        TestApplication newApp = rebind();\n        \n        // Assert does not container unmanaged entity\n        assertEquals(ImmutableList.copyOf(newApp.getChildren()), Collections.emptyList());\n        assertNull(((EntityInternal)newApp).getManagementContext().getEntityManager().getEntity(origE.getId()));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = new MyApplicationImpl();\n        origE = new MyEntityImpl(MutableMap.of(\"myconfig\", \"myval\"), origApp);\n        Entities.startManagement(origApp, managementContext);\n    }","id":5868,"modified_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n        origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class).configure(\"myconfig\", \"myval\"));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresDynamicGroup() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        DynamicGroup origG = new DynamicGroupImpl(origApp, Predicates.instanceOf(MyEntity.class));\n        Entities.startManagement(origApp, managementContext);\n        \n        TestApplication newApp = rebind();\n        final DynamicGroup newG = (DynamicGroup) Iterables.find(newApp.getChildren(), Predicates.instanceOf(DynamicGroup.class));\n        final MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n\n        // Rebound group should contain same members as last time\n        assertGroupMemebers(newG, ImmutableSet.of(newE));\n\n        // And should detect new members that match the filter\n        final MyEntity newE2 = new MyEntityImpl(newApp);\n        Entities.manage(newE2);\n        \n        TestUtils.assertEventually(new Runnable() {\n            public void run() {\n                assertGroupMemebers(newG, ImmutableSet.of(newE, newE2));\n            }});\n    }","id":5869,"modified_method":"@Test\n    public void testRestoresDynamicGroup() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        DynamicGroup origG = origApp.createAndManageChild(EntitySpecs.spec(DynamicGroup.class)\n                .configure(DynamicGroup.ENTITY_FILTER, Predicates.instanceOf(MyEntity.class)));\n        \n        TestApplication newApp = rebind();\n        final DynamicGroup newG = (DynamicGroup) Iterables.find(newApp.getChildren(), Predicates.instanceOf(DynamicGroup.class));\n        final MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n\n        // Rebound group should contain same members as last time\n        assertGroupMemebers(newG, ImmutableSet.of(newE));\n\n        // And should detect new members that match the filter\n        final MyEntity newE2 = newApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        Entities.manage(newE2);\n        \n        TestUtils.assertEventually(new Runnable() {\n            public void run() {\n                assertGroupMemebers(newG, ImmutableSet.of(newE, newE2));\n            }});\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = new TestApplicationImpl();\n    }","id":5870,"modified_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups=\"Integration\") // takes more than 4 seconds, due to assertContinually calls\n    public void testSubscriptionAndPublishingOnlyActiveWhenEntityIsManaged() throws Exception {\n        MyLatchingEntityImpl.latching = false;\n        MyLatchingEntity origE = new MyLatchingEntityImpl(MutableMap.of(\"subscribe\", MyApplication.MY_SENSOR, \"publish\", \"myvaltopublish\"), origApp);\n        Entities.startManagement(origApp, managementContext);\n        MyLatchingEntityImpl.reset(); // after origE has been managed\n        MyLatchingEntityImpl.latching = true;\n\n        // Serialize and rebind, but don't yet manage the app\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        final LocalManagementContext newManagementContext = new LocalManagementContext();\n        Thread thread = new Thread() {\n            public void run() {\n                try {\n                    RebindTestUtils.rebind(newManagementContext, mementoDir, getClass().getClassLoader());\n                } catch (Exception e) {\n                    throw Throwables.propagate(e);\n                }\n            }\n        };\n        try {\n            thread.start();\n            final List<Object> events = new CopyOnWriteArrayList<Object>();\n            \n            newManagementContext.getSubscriptionManager().subscribe(null, MyLatchingEntityImpl.MY_SENSOR, new SensorEventListener<Object>() {\n                @Override public void onEvent(SensorEvent<Object> event) {\n                    events.add(event.getValue());\n                }});\n\n            // In entity's reconstruct, publishes events are queued, and subscriptions don't yet take effect\n            assertTrue(MyLatchingEntityImpl.reconstructStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            newManagementContext.getSubscriptionManager().publish(new BasicSensorEvent<String>(MyApplication.MY_SENSOR, null, \"myvaltooearly\"));\n            \n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(Collections.emptyList()));\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(events), Predicates.equalTo(Collections.emptyList()));\n            \n\n            // When the entity is notified of \"managing\", then subscriptions take effect (but missed events not delivered); \n            // published events remain queued\n            MyLatchingEntityImpl.reconstructContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.getCount() > 0);\n\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(events), Predicates.equalTo(Collections.emptyList()));\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(Collections.emptyList()));\n\n            newManagementContext.getSubscriptionManager().publish(new BasicSensorEvent<String>(MyApplication.MY_SENSOR, null, \"myvaltoreceive\"));\n            TestUtils.assertEventually(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(ImmutableList.of(\"myvaltoreceive\")));\n\n            // When the entity is notified of \"managed\", its events are only then delivered\n            MyLatchingEntityImpl.managingContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n\n            TestUtils.assertEventually(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(ImmutableList.of(\"myvaltoreceive\")));\n            \n            MyLatchingEntityImpl.managedContinuesLatch.countDown();\n            \n            thread.join(TIMEOUT_MS);\n            assertFalse(thread.isAlive());\n            \n        } finally {\n            thread.interrupt();\n            MyLatchingEntityImpl.reset();\n        }\n\n    }","id":5871,"modified_method":"@Test(groups=\"Integration\") // takes more than 4 seconds, due to assertContinually calls\n    public void testSubscriptionAndPublishingOnlyActiveWhenEntityIsManaged() throws Exception {\n        MyLatchingEntityImpl.latching = false;\n        MyLatchingEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyLatchingEntity.class)\n                .configure(\"subscribe\", TestApplication.MY_ATTRIBUTE)\n                .configure(\"publish\", \"myvaltopublish\"));\n        MyLatchingEntityImpl.reset(); // after origE has been managed\n        MyLatchingEntityImpl.latching = true;\n\n        // Serialize and rebind, but don't yet manage the app\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        final LocalManagementContext newManagementContext = new LocalManagementContext();\n        Thread thread = new Thread() {\n            public void run() {\n                try {\n                    RebindTestUtils.rebind(newManagementContext, mementoDir, getClass().getClassLoader());\n                } catch (Exception e) {\n                    throw Throwables.propagate(e);\n                }\n            }\n        };\n        try {\n            thread.start();\n            final List<Object> events = new CopyOnWriteArrayList<Object>();\n            \n            newManagementContext.getSubscriptionManager().subscribe(null, MyLatchingEntityImpl.MY_SENSOR, new SensorEventListener<Object>() {\n                @Override public void onEvent(SensorEvent<Object> event) {\n                    events.add(event.getValue());\n                }});\n\n            // In entity's reconstruct, publishes events are queued, and subscriptions don't yet take effect\n            assertTrue(MyLatchingEntityImpl.reconstructStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            newManagementContext.getSubscriptionManager().publish(new BasicSensorEvent<String>(TestApplication.MY_ATTRIBUTE, null, \"myvaltooearly\"));\n            \n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(Collections.emptyList()));\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(events), Predicates.equalTo(Collections.emptyList()));\n            \n\n            // When the entity is notified of \"managing\", then subscriptions take effect (but missed events not delivered); \n            // published events remain queued\n            MyLatchingEntityImpl.reconstructContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.getCount() > 0);\n\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(events), Predicates.equalTo(Collections.emptyList()));\n            TestUtils.assertContinuallyFromJava(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(Collections.emptyList()));\n\n            newManagementContext.getSubscriptionManager().publish(new BasicSensorEvent<String>(TestApplication.MY_ATTRIBUTE, null, \"myvaltoreceive\"));\n            TestUtils.assertEventually(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(ImmutableList.of(\"myvaltoreceive\")));\n\n            // When the entity is notified of \"managed\", its events are only then delivered\n            MyLatchingEntityImpl.managingContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n\n            TestUtils.assertEventually(Suppliers.ofInstance(MyLatchingEntityImpl.events), Predicates.equalTo(ImmutableList.of(\"myvaltoreceive\")));\n            \n            MyLatchingEntityImpl.managedContinuesLatch.countDown();\n            \n            thread.join(TIMEOUT_MS);\n            assertFalse(thread.isAlive());\n            \n        } finally {\n            thread.interrupt();\n            MyLatchingEntityImpl.reset();\n        }\n\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresEntitySensors() throws Exception {\n        AttributeSensor<String> myCustomAttribute = new BasicAttributeSensor<String>(String.class, \"my.custom.attribute\");\n        \n        MyEntity origE = new MyEntityImpl(origApp);\n        Entities.startManagement(origApp, managementContext);\n        origE.setAttribute(myCustomAttribute, \"myval\");\n        \n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getAttribute(myCustomAttribute), \"myval\");\n    }","id":5872,"modified_method":"@Test\n    public void testRestoresEntitySensors() throws Exception {\n        AttributeSensor<String> myCustomAttribute = new BasicAttributeSensor<String>(String.class, \"my.custom.attribute\");\n        \n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        origE.setAttribute(myCustomAttribute, \"myval\");\n        \n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getAttribute(myCustomAttribute), \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresConfigKeys() throws Exception {\n        TestEntity origE = new TestEntityImpl(origApp);\n        origE.setConfig(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(\"val1\", \"val2\"));\n        origE.setConfig(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(\"akey\", \"aval\"));\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_LIST_PLAIN), ImmutableList.of(\"val1\", \"val2\"));\n        assertEquals(newE.getConfig(TestEntity.CONF_MAP_PLAIN), ImmutableMap.of(\"akey\", \"aval\"));\n    }","id":5873,"modified_method":"@Test\n    public void testRestoresConfigKeys() throws Exception {\n        TestEntity origE = origApp.createAndManageChild(EntitySpecs.spec(TestEntity.class)\n                .configure(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(\"val1\", \"val2\"))\n                .configure(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(\"akey\", \"aval\")));\n        \n        TestApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_LIST_PLAIN), ImmutableList.of(\"val1\", \"val2\"));\n        assertEquals(newE.getConfig(TestEntity.CONF_MAP_PLAIN), ImmutableMap.of(\"akey\", \"aval\"));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testCanCustomizeRebind() throws Exception {\n        MyEntity2 origE = new MyEntity2Impl(MutableMap.of(\"myfield\", \"myval\"), origApp);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        \n        MyEntity2 newE = (MyEntity2) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity2.class));\n        assertEquals(newE.getMyfield(), \"myval\");\n    }","id":5874,"modified_method":"@Test\n    public void testCanCustomizeRebind() throws Exception {\n        MyEntity2 origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity2.class).configure(\"myfield\", \"myval\"));\n        \n        TestApplication newApp = rebind();\n        \n        MyEntity2 newE = (MyEntity2) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity2.class));\n        assertEquals(newE.getMyfield(), \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n        public void onManagementStarting() {\n            if (getConfig(SUBSCRIBE)) {\n                subscribe(getApplication(), MyApplication.MY_SENSOR, new SensorEventListener<String>() {\n                    @Override public void onEvent(SensorEvent<String> event) {\n                        events.add(event.getValue());\n                    }\n                });\n            }\n        }","id":5875,"modified_method":"@Override\n        public void onManagementStarting() {\n            if (getConfig(SUBSCRIBE)) {\n                subscribe(getApplication(), TestApplication.MY_ATTRIBUTE, new SensorEventListener<String>() {\n                    @Override public void onEvent(SensorEvent<String> event) {\n                        events.add(event.getValue());\n                    }\n                });\n            }\n        }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRebindPreservesGetConfigWithDefault() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        Entities.startManagement(origApp, managementContext);\n\n        assertNull(origE.getConfig(MyEntity.MY_CONFIG));\n        assertEquals(origE.getConfig(MyEntity.MY_CONFIG, \"mydefault\"), \"mydefault\");\n        \n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertNull(newE.getConfig(MyEntity.MY_CONFIG));\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG, \"mydefault\"), \"mydefault\");\n    }","id":5876,"modified_method":"@Test\n    public void testRebindPreservesGetConfigWithDefault() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n\n        assertNull(origE.getConfig(MyEntity.MY_CONFIG));\n        assertEquals(origE.getConfig(MyEntity.MY_CONFIG, \"mydefault\"), \"mydefault\");\n        \n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertNull(newE.getConfig(MyEntity.MY_CONFIG));\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG, \"mydefault\"), \"mydefault\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresEntityHierarchy() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        MyEntity origE2 = new MyEntityImpl(origE);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n\n        // Assert has expected config/fields\n        assertEquals(newApp.getId(), origApp.getId());\n        \n        assertEquals(newApp.getChildren().size(), 1);\n        MyEntity newE = (MyEntity) Iterables.get(newApp.getChildren(), 0);\n        assertEquals(newE.getId(), origE.getId());\n\n        assertEquals(newE.getChildren().size(), 1);\n        MyEntity newE2 = (MyEntity) Iterables.get(newE.getChildren(), 0);\n        assertEquals(newE2.getId(), origE2.getId());\n        \n        assertNotSame(origApp, newApp);\n        assertNotSame(origApp.getManagementContext(), newApp.getManagementContext());\n        assertNotSame(origE, newE);\n        assertNotSame(origE2, newE2);\n    }","id":5877,"modified_method":"@Test\n    public void testRestoresEntityHierarchy() throws Exception {\n        TestEntity origE = origApp.createAndManageChild(EntitySpecs.spec(TestEntity.class));\n        TestEntity origE2 = origE.createAndManageChild(EntitySpecs.spec(TestEntity.class));\n        \n        TestApplication newApp = rebind();\n\n        // Assert has expected config/fields\n        assertEquals(newApp.getId(), origApp.getId());\n        \n        assertEquals(newApp.getChildren().size(), 1);\n        TestEntity newE = (TestEntity) Iterables.get(newApp.getChildren(), 0);\n        assertEquals(newE.getId(), origE.getId());\n\n        assertEquals(newE.getChildren().size(), 1);\n        TestEntity newE2 = (TestEntity) Iterables.get(newE.getChildren(), 0);\n        assertEquals(newE2.getId(), origE2.getId());\n        \n        assertNotSame(origApp, newApp);\n        assertNotSame(origApp.getManagementContext(), newApp.getManagementContext());\n        assertNotSame(origE, newE);\n        assertNotSame(origE2, newE2);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private MyApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","id":5878,"modified_method":"private TestApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        return (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRebindPreservesInheritedConfig() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        origApp.setConfig(MyEntity.MY_CONFIG, \"myValInSuper\");\n        Entities.startManagement(origApp, managementContext);\n\n        // rebind: inherited config is preserved\n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        assertEquals(newApp.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        \n        // This config should be inherited by dynamically-added children of app\n        MyEntity newE2 = new MyEntityImpl(origApp);\n        Entities.manage(newE2);\n        \n        assertEquals(newE2.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        \n    }","id":5879,"modified_method":"@Test\n    public void testRebindPreservesInheritedConfig() throws Exception {\n        origApp.setConfig(MyEntity.MY_CONFIG, \"myValInSuper\");\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n\n        // rebind: inherited config is preserved\n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        assertEquals(newApp.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        \n        // This config should be inherited by dynamically-added children of app\n        MyEntity newE2 = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        Entities.manage(newE2);\n        \n        assertEquals(newE2.getConfig(MyEntity.MY_CONFIG), \"myValInSuper\");\n        \n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresListConfigKey() throws Exception {\n        TestEntity origE = new TestEntityImpl(origApp);\n        origE.setConfig(TestEntity.CONF_LIST_THING.subKey(), \"val1\");\n        origE.setConfig(TestEntity.CONF_LIST_THING.subKey(), \"val2\");\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_LIST_THING), ImmutableList.of(\"val1\", \"val2\"));\n    }","id":5880,"modified_method":"@Test\n    public void testRestoresListConfigKey() throws Exception {\n        TestEntity origE = origApp.createAndManageChild(EntitySpecs.spec(TestEntity.class)\n                .configure(TestEntity.CONF_LIST_THING.subKey(), \"val1\")\n                .configure(TestEntity.CONF_LIST_THING.subKey(), \"val2\"));\n        \n        TestApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_LIST_THING), ImmutableList.of(\"val1\", \"val2\"));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRebindsSubscriptions() throws Exception {\n        MyEntity2 origE = new MyEntity2Impl(MutableMap.of(\"subscribe\", true), origApp);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        MyEntity2 newE = (MyEntity2) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity2.class));\n        \n        newApp.setAttribute(MyApplication.MY_SENSOR, \"mysensorval\");\n        TestUtils.assertEventually(Suppliers.ofInstance(newE.getEvents()), Predicates.equalTo(ImmutableList.of(\"mysensorval\")));\n    }","id":5881,"modified_method":"@Test\n    public void testRebindsSubscriptions() throws Exception {\n        MyEntity2 origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity2.class).configure(\"subscribe\", true));\n        \n        TestApplication newApp = rebind();\n        MyEntity2 newE = (MyEntity2) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity2.class));\n        \n        newApp.setAttribute(TestApplication.MY_ATTRIBUTE, \"mysensorval\");\n        TestUtils.assertEventually(Suppliers.ofInstance(newE.getEvents()), Predicates.equalTo(ImmutableList.of(\"mysensorval\")));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresEntityConfig() throws Exception {\n        MyEntity origE = new MyEntityImpl(MutableMap.of(\"myconfig\", \"myval\"), origApp);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myval\");\n    }","id":5882,"modified_method":"@Test\n    public void testRestoresEntityConfig() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class).configure(\"myconfig\", \"myval\"));\n        \n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getConfig(MyEntity.MY_CONFIG), \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testHandlesReferencingOtherLocations() throws Exception {\n        MyLocation origLoc = new MyLocation();\n        MyEntityReffingOthers origE = new MyEntityReffingOthersImpl(\n                MutableMap.builder()\n                        .put(\"locationRef\", origLoc)\n                        .build(),\n                origApp);\n        origE.setAttribute(MyEntityReffingOthers.LOCATION_REF_SENSOR, origLoc);\n        Entities.startManagement(origApp, managementContext);\n        origApp.start(ImmutableList.of(origLoc));\n        \n        MyApplication newApp = rebind();\n        MyEntityReffingOthers newE = (MyEntityReffingOthers) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntityReffingOthers.class));\n        MyLocation newLoc = (MyLocation) Iterables.getOnlyElement(newApp.getLocations());\n        \n        assertAttributeEquals(newE, MyEntityReffingOthers.LOCATION_REF_SENSOR, newLoc);\n        assertConfigEquals(newE, MyEntityReffingOthers.LOCATION_REF_CONFIG, newLoc);\n    }","id":5883,"modified_method":"@Test\n    public void testHandlesReferencingOtherLocations() throws Exception {\n        MyLocation origLoc = new MyLocation();\n        MyEntityReffingOthers origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntityReffingOthers.class)\n                .configure(\"locationRef\", origLoc));\n        origE.setAttribute(MyEntityReffingOthers.LOCATION_REF_SENSOR, origLoc);\n        origApp.start(ImmutableList.of(origLoc));\n        \n        TestApplication newApp = rebind();\n        MyEntityReffingOthers newE = (MyEntityReffingOthers) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntityReffingOthers.class));\n        MyLocation newLoc = (MyLocation) Iterables.getOnlyElement(newApp.getLocations());\n        \n        assertAttributeEquals(newE, MyEntityReffingOthers.LOCATION_REF_SENSOR, newLoc);\n        assertConfigEquals(newE, MyEntityReffingOthers.LOCATION_REF_CONFIG, newLoc);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresMapConfigKey() throws Exception {\n        TestEntity origE = new TestEntityImpl(origApp);\n        origE.setConfig(TestEntity.CONF_MAP_THING.subKey(\"akey\"), \"aval\");\n        origE.setConfig(TestEntity.CONF_MAP_THING.subKey(\"bkey\"), \"bval\");\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_MAP_THING), ImmutableMap.of(\"akey\", \"aval\", \"bkey\", \"bval\"));\n    }","id":5884,"modified_method":"@Test\n    public void testRestoresMapConfigKey() throws Exception {\n        TestEntity origE = origApp.createAndManageChild(EntitySpecs.spec(TestEntity.class)\n                .configure(TestEntity.CONF_MAP_THING.subKey(\"akey\"), \"aval\")\n                .configure(TestEntity.CONF_MAP_THING.subKey(\"bkey\"), \"bval\"));\n        \n        TestApplication newApp = rebind();\n        final TestEntity newE = (TestEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(TestEntity.class));\n\n        assertEquals(newE.getConfig(TestEntity.CONF_MAP_THING), ImmutableMap.of(\"akey\", \"aval\", \"bkey\", \"bval\"));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresEntityIdAndDisplayName() throws Exception {\n        MyEntity origE = new MyEntityImpl(MutableMap.of(\"displayName\", \"mydisplayname\"), origApp);\n        String eId = origE.getId();\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getId(), eId);\n        assertEquals(newE.getDisplayName(), \"mydisplayname\");\n    }","id":5885,"modified_method":"@Test\n    public void testRestoresEntityIdAndDisplayName() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class).displayName(\"mydisplayname\"));\n        String eId = origE.getId();\n        \n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(newE.getId(), eId);\n        assertEquals(newE.getDisplayName(), \"mydisplayname\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public MyEntityReffingOthersImpl(Entity parent) {\n            super(parent);\n        }","id":5886,"modified_method":"public MyEntityReffingOthersImpl() {\n        }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresGroupMembers() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        MyEntity origE2 = new MyEntityImpl(origApp);\n        BasicGroup origG = new BasicGroupImpl(origApp);\n        origG.addMember(origE);\n        origG.addMember(origE2);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        \n        BasicGroup newG = (BasicGroup) Iterables.find(newApp.getChildren(), Predicates.instanceOf(BasicGroup.class));\n        Iterable<Entity> newEs = Iterables.filter(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(ImmutableSet.copyOf(newG.getMembers()), ImmutableSet.copyOf(newEs));\n    }","id":5887,"modified_method":"@Test\n    public void testRestoresGroupMembers() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        MyEntity origE2 = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        BasicGroup origG = origApp.createAndManageChild(EntitySpecs.spec(BasicGroup.class));\n        origG.addMember(origE);\n        origG.addMember(origE2);\n        \n        TestApplication newApp = rebind();\n        \n        BasicGroup newG = (BasicGroup) Iterables.find(newApp.getChildren(), Predicates.instanceOf(BasicGroup.class));\n        Iterable<Entity> newEs = Iterables.filter(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        assertEquals(ImmutableSet.copyOf(newG.getMembers()), ImmutableSet.copyOf(newEs));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testEntityManagementLifecycleAndVisibilityDuringRebind() throws Exception {\n        MyLatchingEntityImpl.latching = false;\n        MyLatchingEntity origE = new MyLatchingEntityImpl(origApp);\n        Entities.startManagement(origApp, managementContext);\n        MyLatchingEntityImpl.reset(); // after origE has been managed\n        MyLatchingEntityImpl.latching = true;\n        \n        // Serialize and rebind, but don't yet manage the app\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        final LocalManagementContext newManagementContext = new LocalManagementContext();\n        Thread thread = new Thread() {\n            public void run() {\n                try {\n                    RebindTestUtils.rebind(newManagementContext, mementoDir, getClass().getClassLoader());\n                } catch (Exception e) {\n                    throw Throwables.propagate(e);\n                }\n            }\n        };\n        try {\n            thread.start();\n            \n            assertTrue(MyLatchingEntityImpl.reconstructStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.getCount() > 0);\n            \n            MyLatchingEntityImpl.reconstructContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.getCount() > 0);\n            \n            MyLatchingEntityImpl.managingContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            MyLatchingEntityImpl.managedContinuesLatch.countDown();\n\n            thread.join(TIMEOUT_MS);\n            assertFalse(thread.isAlive());\n            \n        } finally {\n            thread.interrupt();\n            MyLatchingEntityImpl.reset();\n        }\n    }","id":5888,"modified_method":"@Test\n    public void testEntityManagementLifecycleAndVisibilityDuringRebind() throws Exception {\n        MyLatchingEntityImpl.latching = false;\n        MyLatchingEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyLatchingEntity.class));\n        MyLatchingEntityImpl.reset(); // after origE has been managed\n        MyLatchingEntityImpl.latching = true;\n        \n        // Serialize and rebind, but don't yet manage the app\n        RebindTestUtils.waitForPersisted(origApp);\n        RebindTestUtils.checkCurrentMementoSerializable(origApp);\n        final LocalManagementContext newManagementContext = new LocalManagementContext();\n        Thread thread = new Thread() {\n            public void run() {\n                try {\n                    RebindTestUtils.rebind(newManagementContext, mementoDir, getClass().getClassLoader());\n                } catch (Exception e) {\n                    throw Throwables.propagate(e);\n                }\n            }\n        };\n        try {\n            thread.start();\n            \n            assertTrue(MyLatchingEntityImpl.reconstructStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.getCount() > 0);\n            \n            MyLatchingEntityImpl.reconstructContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managingStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.getCount() > 0);\n            \n            MyLatchingEntityImpl.managingContinuesLatch.countDown();\n            assertTrue(MyLatchingEntityImpl.managedStartedLatch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origApp.getId()));\n            assertNotNull(newManagementContext.getEntityManager().getEntity(origE.getId()));\n            MyLatchingEntityImpl.managedContinuesLatch.countDown();\n\n            thread.join(TIMEOUT_MS);\n            assertFalse(thread.isAlive());\n            \n        } finally {\n            thread.interrupt();\n            MyLatchingEntityImpl.reset();\n        }\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod(alwaysRun=true)\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = new MyApplicationImpl();\n    }","id":5889,"modified_method":"@BeforeMethod(alwaysRun=true)\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresSimpleApp() throws Exception {\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        assertNotSame(newApp, origApp);\n        assertEquals(newApp.getId(), origApp.getId());\n    }","id":5890,"modified_method":"@Test\n    public void testRestoresSimpleApp() throws Exception {\n        TestApplication newApp = rebind();\n        assertNotSame(newApp, origApp);\n        assertEquals(newApp.getId(), origApp.getId());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRebindPersistsNullAttribute() throws Exception {\n        MyEntity origE = new MyEntityImpl(origApp);\n        origE.setAttribute(MyEntity.MY_SENSOR, null);\n        Entities.startManagement(origApp, managementContext);\n\n        assertNull(origE.getAttribute(MyEntity.MY_SENSOR));\n\n        MyApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertNull(newE.getAttribute(MyEntity.MY_SENSOR));\n    }","id":5891,"modified_method":"@Test\n    public void testRebindPersistsNullAttribute() throws Exception {\n        MyEntity origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        origE.setAttribute(MyEntity.MY_SENSOR, null);\n\n        assertNull(origE.getAttribute(MyEntity.MY_SENSOR));\n\n        TestApplication newApp = rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertNull(newE.getAttribute(MyEntity.MY_SENSOR));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testHandlesReferencingOtherEntities() throws Exception {\n        MyEntity origOtherE = new MyEntityImpl(origApp);\n        MyEntityReffingOthers origE = new MyEntityReffingOthersImpl(\n                MutableMap.builder()\n                        .put(\"entityRef\", origOtherE)\n                        .build(),\n                origApp);\n        origE.setAttribute(MyEntityReffingOthers.ENTITY_REF_SENSOR, origOtherE);\n        Entities.startManagement(origApp, managementContext);\n        \n        MyApplication newApp = rebind();\n        MyEntityReffingOthers newE = (MyEntityReffingOthers) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntityReffingOthers.class));\n        MyEntity newOtherE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertAttributeEquals(newE, MyEntityReffingOthers.ENTITY_REF_SENSOR, newOtherE);\n        assertConfigEquals(newE, MyEntityReffingOthers.ENTITY_REF_CONFIG, newOtherE);\n    }","id":5892,"modified_method":"@Test\n    public void testHandlesReferencingOtherEntities() throws Exception {\n        MyEntity origOtherE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n        MyEntityReffingOthers origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntityReffingOthers.class)\n                .configure(\"entityRef\", origOtherE));\n        origE.setAttribute(MyEntityReffingOthers.ENTITY_REF_SENSOR, origOtherE);\n        \n        TestApplication newApp = rebind();\n        MyEntityReffingOthers newE = (MyEntityReffingOthers) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntityReffingOthers.class));\n        MyEntity newOtherE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n        \n        assertAttributeEquals(newE, MyEntityReffingOthers.ENTITY_REF_SENSOR, newOtherE);\n        assertConfigEquals(newE, MyEntityReffingOthers.ENTITY_REF_CONFIG, newOtherE);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresLocationIdAndDisplayName() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"name\", \"mylocname\"));\n        origApp.start(ImmutableList.of(origLoc));\n        \n        MyApplication newApp = (MyApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.getId(), origLoc.getId());\n        assertEquals(newLoc.getName(), origLoc.getName());\n    }","id":5893,"modified_method":"@Test\n    public void testRestoresLocationIdAndDisplayName() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"name\", \"mylocname\"));\n        origApp.start(ImmutableList.of(origLoc));\n        \n        TestApplication newApp = (TestApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.getId(), origLoc.getId());\n        assertEquals(newLoc.getName(), origLoc.getName());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresAtomicLongWithSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myAtomicLong\", \"123\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        origLoc.myAtomicLong.incrementAndGet();\n        assertEquals(origLoc.myAtomicLong.get(), 124L);\n        ((EntityInternal)origApp).getManagementContext().getRebindManager().getChangeListener().onChanged(origLoc);\n        \n        MyApplication newApp = (MyApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        // should get _modified_ value, not the one in the config map\n        assertEquals(newLoc.myAtomicLong.get(), 124L);\n    }","id":5894,"modified_method":"@Test\n    public void testRestoresAtomicLongWithSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myAtomicLong\", \"123\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        origLoc.myAtomicLong.incrementAndGet();\n        assertEquals(origLoc.myAtomicLong.get(), 124L);\n        ((EntityInternal)origApp).getManagementContext().getRebindManager().getChangeListener().onChanged(origLoc);\n        \n        TestApplication newApp = (TestApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        // should get _modified_ value, not the one in the config map\n        assertEquals(newLoc.myAtomicLong.get(), 124L);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testSetsLocationOnEntities() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"name\", \"mylocname\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        MyApplication newApp = (MyApplication) rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n\n        assertEquals(newApp.getLocations().size(), 1, \"locs=\"+newE.getLocations());\n        assertTrue(Iterables.get(newApp.getLocations(), 0) instanceof MyLocation);\n        \n        assertEquals(newE.getLocations().size(), 1, \"locs=\"+newE.getLocations());\n        assertTrue(Iterables.get(newE.getLocations(), 0) instanceof MyLocation);\n    }","id":5895,"modified_method":"@Test\n    public void testSetsLocationOnEntities() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"name\", \"mylocname\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        TestApplication newApp = (TestApplication) rebind();\n        MyEntity newE = (MyEntity) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntity.class));\n\n        assertEquals(newApp.getLocations().size(), 1, \"locs=\"+newE.getLocations());\n        assertTrue(Iterables.get(newApp.getLocations(), 0) instanceof MyLocation);\n        \n        assertEquals(newE.getLocations().size(), 1, \"locs=\"+newE.getLocations());\n        assertTrue(Iterables.get(newE.getLocations(), 0) instanceof MyLocation);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testRestoresFieldsWithSetFromFlag() throws Exception {\n    \tMyLocation origLoc = new MyLocation(MutableMap.of(\"myfield\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        MyApplication newApp = (MyApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myfield, \"myval\");\n    }","id":5896,"modified_method":"@Test\n    public void testRestoresFieldsWithSetFromFlag() throws Exception {\n    \tMyLocation origLoc = new MyLocation(MutableMap.of(\"myfield\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        TestApplication newApp = (TestApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myfield, \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = new MyApplicationImpl();\n        origE = new MyEntityImpl(origApp);\n        Entities.startManagement(origApp, managementContext);\n    }","id":5897,"modified_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n        origE = origApp.createAndManageChild(EntitySpecs.spec(MyEntity.class));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testIgnoresTransientFieldsNotSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of());\n        origLoc.myTransientFieldNotSetFromFlag = \"myval\";\n        origApp.start(ImmutableList.of(origLoc));\n\n        MyApplication newApp = (MyApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n\n        // transient fields normally not persisted\n        assertEquals(newLoc.myTransientFieldNotSetFromFlag, null);\n    }","id":5898,"modified_method":"@Test\n    public void testIgnoresTransientFieldsNotSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of());\n        origLoc.myTransientFieldNotSetFromFlag = \"myval\";\n        origApp.start(ImmutableList.of(origLoc));\n\n        TestApplication newApp = (TestApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n\n        // transient fields normally not persisted\n        assertEquals(newLoc.myTransientFieldNotSetFromFlag, null);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testIgnoresStaticFieldsNotSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of());\n        origLoc.myStaticFieldNotSetFromFlag = \"myval\";\n        origApp.start(ImmutableList.of(origLoc));\n\n        RebindTestUtils.waitForPersisted(origApp);\n        MyLocation.myStaticFieldNotSetFromFlag = \"mynewval\";\n        MyApplication newApp = (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        // static fields normally not persisted (we see new value)\n        assertEquals(newLoc.myStaticFieldNotSetFromFlag, \"mynewval\");\n    }","id":5899,"modified_method":"@Test\n    public void testIgnoresStaticFieldsNotSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of());\n        origLoc.myStaticFieldNotSetFromFlag = \"myval\";\n        origApp.start(ImmutableList.of(origLoc));\n\n        RebindTestUtils.waitForPersisted(origApp);\n        MyLocation.myStaticFieldNotSetFromFlag = \"mynewval\";\n        TestApplication newApp = (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        // static fields normally not persisted (we see new value)\n        assertEquals(newLoc.myStaticFieldNotSetFromFlag, \"mynewval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testIgnoresTransientFieldsSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myTransientFieldSetFromFlag\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        MyApplication newApp = (MyApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myTransientFieldSetFromFlag, null);\n    }","id":5900,"modified_method":"@Test\n    public void testIgnoresTransientFieldsSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myTransientFieldSetFromFlag\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        TestApplication newApp = (TestApplication) rebind();\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myTransientFieldSetFromFlag, null);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private MyApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","id":5901,"modified_method":"private TestApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testCanCustomizeLocationRebind() throws Exception {\n        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(\"name\", \"mylocname\", \"myfield\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        MyApplication newApp = (MyApplication) rebind();\n        MyLocationCustomProps newLoc2 = (MyLocationCustomProps) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc2.getId(), origLoc.getId());\n        assertEquals(newLoc2.getName(), origLoc.getName());\n        assertEquals(newLoc2.rebound, true);\n        assertEquals(newLoc2.myfield, \"myval\");\n    }","id":5902,"modified_method":"@Test\n    public void testCanCustomizeLocationRebind() throws Exception {\n        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(\"name\", \"mylocname\", \"myfield\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        TestApplication newApp = (TestApplication) rebind();\n        MyLocationCustomProps newLoc2 = (MyLocationCustomProps) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc2.getId(), origLoc.getId());\n        assertEquals(newLoc2.getName(), origLoc.getName());\n        assertEquals(newLoc2.rebound, true);\n        assertEquals(newLoc2.myfield, \"myval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testIgnoresStaticFieldsSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myStaticFieldSetFromFlag\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        RebindTestUtils.waitForPersisted(origApp);\n        MyLocation.myStaticFieldSetFromFlag = \"mynewval\"; // not auto-checkpointed\n        MyApplication newApp = (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myStaticFieldSetFromFlag, \"mynewval\");\n    }","id":5903,"modified_method":"@Test\n    public void testIgnoresStaticFieldsSetFromFlag() throws Exception {\n        MyLocation origLoc = new MyLocation(MutableMap.of(\"myStaticFieldSetFromFlag\", \"myval\"));\n        origApp.start(ImmutableList.of(origLoc));\n\n        RebindTestUtils.waitForPersisted(origApp);\n        MyLocation.myStaticFieldSetFromFlag = \"mynewval\"; // not auto-checkpointed\n        TestApplication newApp = (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n        MyLocation newLoc = (MyLocation) Iterables.get(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.myStaticFieldSetFromFlag, \"mynewval\");\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n        origApp = new TestApplicationImpl();\n        Entities.startManagement(origApp, managementContext);\n    }","id":5904,"modified_method":"@BeforeMethod\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private MyApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (MyApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","id":5905,"modified_method":"private TestApplication rebind() throws Exception {\n        RebindTestUtils.waitForPersisted(origApp);\n        return (TestApplication) RebindTestUtils.rebind(mementoDir, getClass().getClassLoader());\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups=\"Integration\")\n    public void testMachineUsableAfterRebind() throws Exception {\n        origApp.start(ImmutableList.of(origLoc));\n\n        assertEquals(origLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n\n        MyApplication newApp = (MyApplication) rebind();\n        SshMachineLocation newLoc = (SshMachineLocation) Iterables.getOnlyElement(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n    }","id":5906,"modified_method":"@Test(groups=\"Integration\")\n    public void testMachineUsableAfterRebind() throws Exception {\n        origApp.start(ImmutableList.of(origLoc));\n\n        assertEquals(origLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n\n        TestApplication newApp = (TestApplication) rebind();\n        SshMachineLocation newLoc = (SshMachineLocation) Iterables.getOnlyElement(newApp.getLocations(), 0);\n        \n        assertEquals(newLoc.execScript(Collections.<String,Object>emptyMap(), \"mysummary\", ImmutableList.of(\"true\")), 0);\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@BeforeMethod(alwaysRun=true)\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = new MyApplicationImpl();\n        origLoc = new SshMachineLocation(MutableMap.of(\"address\", \"localhost\"));\n        Entities.startManagement(origApp, managementContext);\n    }","id":5907,"modified_method":"@BeforeMethod(alwaysRun=true)\n    public void setUp() throws Exception {\n        mementoDir = Files.createTempDir();\n        managementContext = RebindTestUtils.newPersistingManagementContext(mementoDir, classLoader, 1);\n        origApp = ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class), managementContext);\n        origLoc = new SshMachineLocation(MutableMap.of(\"address\", \"localhost\"));\n    }","commit_id":"7495e08a5719e1ba3c1527d0a6e0dbf86553fdbc","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public DetectFuture isServiceDetected(final InetAddress address, final DetectorMonitor monitor) {\n\n        final DetectFuture detectFuture = new DefaultDetectFuture(this);\n\n        try {\n            // Set this up here because it can throw an Exception, which we want\n            // to throw now, not in initializeSession\n            final SSLContext c = createClientSSLContext();\n\n            // Create an IoSessionInitializer that will configure this individual\n            // session. Previously, all this was done on a new Connector each time\n            // but that was leaking file handles all over the place. This way gives\n            // us per-connection settings without the overhead of creating new\n            // Connectors each time\n            IoSessionInitializer<ConnectFuture> init = new IoSessionInitializer<ConnectFuture>() {\n\n                public void initializeSession(IoSession session, ConnectFuture future) {\n                    // Add filters to the session\n                    if(isUseSSLFilter()) {\n                        final SslFilter filter = new SslFilter(c);\n                        filter.setUseClientMode(true);\n                        session.getFilterChain().addFirst(\"SSL\", filter);\n                    }\n                    session.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n                    session.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n                    session.getConfig().setIdleTime(IdleStatus.READER_IDLE, getIdleTime());\n                    // Give the session an IoHandler that will get everything delegated to it\n                    // by the SessionDelegateIoHandler\n                    session.setAttribute( IoHandler.class, createDetectorHandler(detectFuture) );\n                }\n            };\n\n            // Start communication\n            final InetSocketAddress socketAddress = new InetSocketAddress(address, getPort());\n            final ConnectFuture cf = m_connectionFactory.connect(socketAddress, init);\n            cf.addListener(retryAttemptListener(m_connectionFactory, detectFuture, socketAddress, init, getRetries() ));\n        } catch (KeyManagementException e) {\n            detectFuture.setException(e);\n        } catch (NoSuchAlgorithmException e) {\n            detectFuture.setException(e);\n        } catch (IOException e) {\n            detectFuture.setException(e);\n        } catch (Throwable e) {\n            detectFuture.setException(e);\n        }\n\n        return detectFuture;\n    }","id":5908,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public DetectFuture isServiceDetected(final InetAddress address, final DetectorMonitor monitor) {\n\n        final DetectFuture detectFuture = new DefaultDetectFuture(this);\n\n        try {\n            // Set this up here because it can throw an Exception, which we want\n            // to throw now, not in initializeSession\n            final SSLContext c = createClientSSLContext();\n\n            // Create an IoSessionInitializer that will configure this individual\n            // session. Previously, all this was done on a new Connector each time\n            // but that was leaking file handles all over the place. This way gives\n            // us per-connection settings without the overhead of creating new\n            // Connectors each time\n            IoSessionInitializer<ConnectFuture> init = new IoSessionInitializer<ConnectFuture>() {\n\n                public void initializeSession(IoSession session, ConnectFuture future) {\n                    // Add filters to the session\n                    if(isUseSSLFilter()) {\n                        final SslFilter filter = new SslFilter(c);\n                        filter.setUseClientMode(true);\n                        session.getFilterChain().addFirst(\"SSL\", filter);\n                    }\n                    session.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n                    session.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n                    session.getConfig().setIdleTime(IdleStatus.READER_IDLE, getIdleTime());\n                    // Give the session an IoHandler that will get everything delegated to it\n                    // by the SessionDelegateIoHandler\n                    session.setAttribute( IoHandler.class, createDetectorHandler(detectFuture) );\n                }\n            };\n\n            // Start communication\n            final InetSocketAddress socketAddress = new InetSocketAddress(address, getPort());\n            // Get an ephemeral port on the localhost interface\n            final InetSocketAddress localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), 0);\n            final ConnectFuture cf = m_connectionFactory.connect(socketAddress, localAddress, init);\n            cf.addListener(retryAttemptListener(m_connectionFactory, detectFuture, socketAddress, init, getRetries() ));\n        } catch (KeyManagementException e) {\n            detectFuture.setException(e);\n        } catch (NoSuchAlgorithmException e) {\n            detectFuture.setException(e);\n        } catch (IOException e) {\n            detectFuture.setException(e);\n        } catch (Throwable e) {\n            detectFuture.setException(e);\n        }\n\n        return detectFuture;\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Handles the retry attempts. Listens to see when the ConnectFuture is finished and checks if there was \n     * an exception thrown. If so, it then attempts a retry if there are more retries.\n     * \n     * @param connector\n     * @param detectFuture\n     * @param address\n     * @param retryAttempt\n     * @return IoFutureListener<ConnectFuture>\n     */\n    private IoFutureListener<ConnectFuture> retryAttemptListener(final ConnectionFactory connector, final DetectFuture detectFuture, final InetSocketAddress address, final IoSessionInitializer<ConnectFuture> init, final int retryAttempt) {\n        return new IoFutureListener<ConnectFuture>() {\n\n            public void operationComplete(ConnectFuture future) {\n                final Throwable cause = future.getException();\n               \n                if(cause instanceof IOException) {\n                    if(retryAttempt == 0) {\n                        LogUtils.infof(this, \"Service %s detected false\",getServiceName());\n                        detectFuture.setServiceDetected(false);\n                    }else {\n                        LogUtils.infof(this, \"Connection exception occurred %s for service %s, retrying attempt %d\", cause, getServiceName(), retryAttempt);\n                        // Connect without using a semaphore\n                        /*\n                        final ConnectFuture cf = m_connectionFactory.connect(address, init);\n                        cf.addListener(retryAttemptListener( m_connectionFactory, detectFuture, address, init, retryAttempt - 1));\n                        */\n                        future = connector.reConnect(address, init);\n                        future.addListener(retryAttemptListener(connector, detectFuture, address, init, retryAttempt - 1));\n                    }\n                }else if(cause instanceof Throwable) {\n                    LogUtils.infof(this, cause, \"Threw a Throwable and detection is false for service %s\", getServiceName());\n                    detectFuture.setServiceDetected(false);\n                } \n            }\n            \n        };\n    }","id":5909,"modified_method":"/**\n     * Handles the retry attempts. Listens to see when the ConnectFuture is finished and checks if there was \n     * an exception thrown. If so, it then attempts a retry if there are more retries.\n     * \n     * @param connector\n     * @param detectFuture\n     * @param address\n     * @param retryAttempt\n     * @return IoFutureListener<ConnectFuture>\n     */\n    private IoFutureListener<ConnectFuture> retryAttemptListener(final ConnectionFactory connector, final DetectFuture detectFuture, final InetSocketAddress address, final IoSessionInitializer<ConnectFuture> init, final int retryAttempt) {\n        return new IoFutureListener<ConnectFuture>() {\n\n            public void operationComplete(ConnectFuture future) {\n                final Throwable cause = future.getException();\n               \n                if(cause instanceof IOException) {\n                    if(retryAttempt == 0) {\n                        LogUtils.infof(this, \"Service %s detected false\",getServiceName());\n                        detectFuture.setServiceDetected(false);\n                    }else {\n                        LogUtils.infof(this, \"Connection exception occurred %s for service %s, retrying attempt %d\", cause, getServiceName(), retryAttempt);\n                        // Connect without using a semaphore\n                        /*\n                        final ConnectFuture cf = m_connectionFactory.connect(address, init);\n                        cf.addListener(retryAttemptListener( m_connectionFactory, detectFuture, address, init, retryAttempt - 1));\n                        */\n                        // Get an ephemeral port on the localhost interface\n                        final InetSocketAddress localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), 0);\n                        future = connector.reConnect(address, localAddress, init);\n                        future.addListener(retryAttemptListener(connector, detectFuture, address, init, retryAttempt - 1));\n                    }\n                }else if(cause instanceof Throwable) {\n                    LogUtils.infof(this, cause, \"Threw a Throwable and detection is false for service %s\", getServiceName());\n                    detectFuture.setServiceDetected(false);\n                } \n            }\n            \n        };\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSuccessServer() throws Throwable {\n        setUpServer();\n        final int port = m_server.getLocalPort();\n        final InetAddress address = m_server.getInetAddress();\n\n        final double connectionRate = 0.2;\n        \n        final long startTime = System.currentTimeMillis();\n\n        int i = 0;\n        while (i < 10000) {\n            long now = Math.max(System.currentTimeMillis(), 1);\n            double actualRate = ((double)i) / ((double)(now - startTime));\n            LogUtils.debugf(this, \"Expected Rate: %f Actual Rate: %f Events Sent: %d\", connectionRate, actualRate, i);\n            if (actualRate < connectionRate) {\n                setUp();\n                LogUtils.debugf(this, \"current loop: %d\", i);\n                assertNotNull(m_detector);\n\n                m_detector.setPort(port);\n\n                final DefaultDetectFuture future = (DefaultDetectFuture)m_detector.isServiceDetected(address, new NullDetectorMonitor());\n                future.addListener(new IoFutureListener<DetectFuture>() {\n                    public void operationComplete(final DetectFuture future) {\n                        m_detector.dispose();\n                    }\n                });\n\n                future.awaitUninterruptibly();\n                assertNotNull(future);\n                if (future.getException() != null) {\n                    LogUtils.debugf(this, future.getException(), \"got future exception\");\n                    throw future.getException();\n                }\n                LogUtils.debugf(this, \"got value: %s\", future.getObjectValue());\n                assertTrue(future.isServiceDetected());\n\n                i++;\n            } else {\n                Thread.sleep(5);\n            }\n        }\n    }","id":5910,"modified_method":"@Test\n    public void testSuccessServer() throws Throwable {\n        setUpServer();\n        final int port = m_server.getLocalPort();\n        final InetAddress address = m_server.getInetAddress();\n\n        final double connectionRate = 0.2;\n        \n        final long startTime = System.currentTimeMillis();\n\n        int i = 0;\n        while (i < 10000) {\n            long now = Math.max(System.currentTimeMillis(), 1);\n            double actualRate = ((double)i) / ((double)(now - startTime));\n            LogUtils.debugf(this, \"Expected Rate: %f Actual Rate: %f Events Sent: %d\", connectionRate, actualRate, i);\n            if (actualRate < connectionRate) {\n                setUp();\n                LogUtils.debugf(this, \"current loop: %d\", i);\n                assertNotNull(m_detector);\n\n                m_detector.setPort(port);\n\n                final DefaultDetectFuture future = (DefaultDetectFuture)m_detector.isServiceDetected(address, new NullDetectorMonitor());\n                /*\n                future.addListener(new IoFutureListener<DetectFuture>() {\n                    public void operationComplete(final DetectFuture future) {\n                        m_detector.dispose();\n                    }\n                });\n                */\n\n                future.awaitUninterruptibly();\n                assertNotNull(future);\n                if (future.getException() != null) {\n                    LogUtils.debugf(this, future.getException(), \"got future exception\");\n                    throw future.getException();\n                }\n                LogUtils.debugf(this, \"got value: %s\", future.getObjectValue());\n                assertTrue(future.isServiceDetected());\n\n                i++;\n            } else {\n                Thread.sleep(5);\n            }\n        }\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@BeforeClass\n    public static void beforeTest(){\n        System.setProperty(\"org.opennms.netmgt.provision.maxConcurrentConnectors\", \"2000\");\n    }","id":5911,"modified_method":"@BeforeClass\n    public static void beforeTest(){\n        System.setProperty(\"org.opennms.netmgt.provision.maxConcurrentConnectors\", \"2000\");\n        // Make sure that the ConnectionFactory reloads the system properties\n        ConnectionFactory.init();\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Repeat(10000)\n    public void testNoServerPresent() throws Exception {\n        m_detector.setPort(1999);\n        System.err.printf(\"Starting testNoServerPresent with detector: %s\\n\", m_detector);\n        \n        final DetectFuture future = m_detector.isServiceDetected(InetAddress.getLocalHost(), new NullDetectorMonitor());\n        future.addListener(new IoFutureListener<DetectFuture>() {\n\n            public void operationComplete(final DetectFuture future) {\n                m_detector.dispose();\n            }\n            \n        });\n        assertNotNull(future);\n        future.awaitUninterruptibly();\n        assertFalse(future.isServiceDetected());\n        \n        System.err.printf(\"Finished testNoServerPresent with detector: %s\\n\", m_detector);\n    }","id":5912,"modified_method":"@Test\n    @Repeat(10000)\n    public void testNoServerPresent() throws Exception {\n        m_detector.setPort(1999);\n        System.err.printf(\"Starting testNoServerPresent with detector: %s\\n\", m_detector);\n        \n        final DetectFuture future = m_detector.isServiceDetected(InetAddressUtils.getLocalHostAddress(), new NullDetectorMonitor());\n        /*\n        future.addListener(new IoFutureListener<DetectFuture>() {\n\n            public void operationComplete(final DetectFuture future) {\n                m_detector.dispose();\n            }\n            \n        });\n        */\n        assertNotNull(future);\n        future.awaitUninterruptibly();\n        assertFalse(future.isServiceDetected());\n        assertNull(future.getException());\n        \n        System.err.printf(\"Finished testNoServerPresent with detector: %s\\n\", m_detector);\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Create a new factory. Private because one should use {@link #getFactory(int)}\n     */\n    private ConnectionFactory(int timeoutInMillis) {\n        m_timeout = timeoutInMillis;\n        m_connector = getSocketConnector();\n    }","id":5913,"modified_method":"/**\n     * Create a new factory. Private because one should use {@link #getFactory(int)}\n     */\n    private ConnectionFactory(int timeoutInMillis) {\n        m_timeout = timeoutInMillis;\n        synchronized (m_connectorMutex) {\n            m_connector = getSocketConnector(m_timeout);\n        }\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Free up the resources used by a connection and connection factory.\n     * @param factory\n     * @param connection\n     */\n    public static void dispose(ConnectionFactory factory) {\n        if (s_availableConnections != null) {\n            s_availableConnections.release();\n        }\n\n        if (--factory.m_references <= 0) {\n            LogUtils.debugf(factory, \"Disposing of factory for interval %d\", factory.getTimeout());\n            Iterator<Entry<Integer, ConnectionFactory>> i = s_connectorPool.entrySet().iterator();\n            while(i.hasNext()) {\n                if(i.next().getValue() == factory) {\n                    i.remove();\n                }\n            }\n\n            synchronized (factory.m_connector) {\n                factory.m_connector.dispose();\n            }\n        }\n    }","id":5914,"modified_method":"/**\n     * Free up the resources used by a connection and connection factory.\n     * @param factory\n     * @param connection\n     */\n    public static void dispose(ConnectionFactory factory) {\n        if (s_availableConnections != null) {\n            s_availableConnections.release();\n        }\n\n        if (--factory.m_references <= 0) {\n            LogUtils.debugf(factory, \"Disposing of factory %s for interval %d\", factory, factory.m_timeout);\n            synchronized (s_connectorPool) {\n                Iterator<Entry<Integer, ConnectionFactory>> i = s_connectorPool.entrySet().iterator();\n                while(i.hasNext()) {\n                    if(i.next().getValue() == factory) {\n                        i.remove();\n                    }\n                }\n            }\n\n            synchronized (factory.m_connectorMutex) {\n                factory.m_connector.dispose(true);\n                /*\n                while(!factory.m_connector.isDisposed()) {\n                    try { Thread.sleep(10); } catch (InterruptedException e) {}\n                }\n                */\n            }\n        }\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Get a new ConnectionFactory. If there is already a Factory with the\n     * desired timeout, you will get that one; otherwise a new one is created.\n     * <p>\n     * If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may\n     * block until a connector is available.\n     * \n     * @param timeoutInMillis\n     * \t\tConnection timeout\n     * @return\n     * \t\tAn appropriate Factory\n     */\n    public static ConnectionFactory getFactory(int timeoutInMillis) {\n        ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);\n        if (factory == null) {\n            LogUtils.debugf(ConnectionFactory.class, \"Creating a ConnectionFactory for timeout %d, there are already %d factories\", timeoutInMillis, s_connectorPool.size());\n            ConnectionFactory newFactory = new ConnectionFactory(timeoutInMillis);\n            factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);\n            // If there was no previous value for the factory in the map...\n            if (factory == null) {\n                // ...then use the new value.\n                factory = newFactory;\n            } else {\n                LogUtils.debugf(ConnectionFactory.class, \"ConnectionFactory for timeout %d was already created in another thread!\", timeoutInMillis);\n            }\n        }\n        factory.m_references++;\n        return factory;\n    }","id":5915,"modified_method":"/**\n     * Get a new ConnectionFactory. If there is already a Factory with the\n     * desired timeout, you will get that one; otherwise a new one is created.\n     * <p>\n     * If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may\n     * block until a connector is available.\n     * \n     * @param timeoutInMillis\n     * \t\tConnection timeout\n     * @return\n     * \t\tAn appropriate Factory\n     */\n    public static ConnectionFactory getFactory(int timeoutInMillis) {\n        synchronized (s_connectorPool) {\n            ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);\n            if (factory == null) {\n                LogUtils.debugf(ConnectionFactory.class, \"Creating a ConnectionFactory for timeout %d, there are %d factories total\", timeoutInMillis, s_connectorPool.size());\n                ConnectionFactory newFactory = new ConnectionFactory(timeoutInMillis);\n                factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);\n                // If there was no previous value for the factory in the map...\n                if (factory == null) {\n                    // ...then use the new value.\n                    factory = newFactory;\n                } else {\n                    LogUtils.debugf(ConnectionFactory.class, \"ConnectionFactory for timeout %d was already created in another thread!\", timeoutInMillis);\n                    // Dispose of the new unused factory\n                    dispose(newFactory);\n                }\n            }\n            factory.m_references++;\n            return factory;\n        }\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Retry a connection. This does not consume a connection slot, so will not\n     * block or throw {@link InterruptedException}. Use only if you have already\n     * acquired a connection slot using {@link #connect(SocketAddress, IoSessionInitializer)}.\n     * \n     * @param destination\n     * @param init\n     * @return\n     */\n    public ConnectFuture reConnect(SocketAddress destination, IoSessionInitializer<? extends ConnectFuture> init) {\n        synchronized (m_connector) {\n            m_connector.dispose();\n            m_connector = getSocketConnector();\n            return m_connector.connect(destination, init);\n        }\n    }","id":5916,"modified_method":"/**\n     * Retry a connection. This does not consume a connection slot, so will not\n     * block or throw {@link InterruptedException}. Use only if you have already\n     * acquired a connection slot using {@link #connect(SocketAddress, IoSessionInitializer)}.\n     * \n     * @param remoteAddress\n     * @param init\n     * @return\n     */\n    public ConnectFuture reConnect(SocketAddress remoteAddress, SocketAddress localAddress, IoSessionInitializer<? extends ConnectFuture> init) {\n        synchronized (m_connectorMutex) {\n            m_connector.dispose(true);\n            /*\n            while(!m_connector.isDisposed()) {\n                try { Thread.sleep(10); } catch (InterruptedException e) {}\n            }\n            */\n            m_connector = getSocketConnector(m_timeout);\n            /*\n             * Use the 3-argument call to connect(). If you use the 2-argument version without\n             * the localhost port, the call will end up doing a name lookup which seems to fail\n             * intermittently in unit tests.\n             *\n             * @see http://issues.opennms.org/browse/NMS-5309\n             */\n            return m_connector.connect(remoteAddress, localAddress, init);\n        }\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections\n     * is set, this may block until a connection slot is available.\n     * <p>\n     * You must dispose both the ConnectionFactory and ConncetFuture when done\n     * by calling {@link #dispose(ConnectionFactory, ConnectFuture)}.\n     * \n     * @param destination\n     * \t\tDestination address\n     * @param init\n     * \t\tInitialiser for the IoSession\n     * @return\n     * \t\tConnectFuture from a Mina connect call\n     * @throws IOException \n     */\n    public ConnectFuture connect(SocketAddress destination, IoSessionInitializer<? extends ConnectFuture> init) throws IOException {\n        if (s_availableConnections != null) {\n            s_availableConnections.acquireUninterruptibly();\n        }\n        for (int retries = 0; retries < s_connectionExecutionRetries; retries++) { \n            try {\n                synchronized (m_connector) {\n                    return m_connector.connect(destination, init);\n                }\n            } catch (RejectedExecutionException e) {\n                LogUtils.debugf(this, \"Caught exception, retrying: %s\", e);\n                synchronized (m_connector) {\n                    m_connector.dispose();\n                    m_connector = getSocketConnector();\n                    try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                }\n            } catch (IllegalStateException e) {\n                LogUtils.debugf(this, \"Caught exception, retrying: %s\", e);\n                synchronized (m_connector) {\n                    m_connector.dispose();\n                    m_connector = getSocketConnector();\n                    try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                }\n            }\n        }\n        throw new IOException(\"Could not connect to socket because of excessive RejectedExecutionExceptions\");\n    }","id":5917,"modified_method":"/**\n     * Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections\n     * is set, this may block until a connection slot is available.\n     * <p>\n     * You must dispose both the ConnectionFactory and ConncetFuture when done\n     * by calling {@link #dispose(ConnectionFactory, ConnectFuture)}.\n     * \n     * @param remoteAddress\n     * \t\tDestination address\n     * @param init\n     * \t\tInitialiser for the IoSession\n     * @return\n     * \t\tConnectFuture from a Mina connect call\n     * @throws IOException \n     */\n    public ConnectFuture connect(SocketAddress remoteAddress, SocketAddress localAddress, IoSessionInitializer<? extends ConnectFuture> init) throws IOException {\n        if (s_availableConnections != null) {\n            s_availableConnections.acquireUninterruptibly();\n        }\n        for (int retries = 0; retries < s_connectionExecutionRetries; retries++) { \n            synchronized (m_connectorMutex) {\n                if (m_connector == null) {\n                    // Sanity check for null connector instance\n                    LogUtils.warnf(this, \"Found a null NioSocketConnector, creating a new one\");\n                    m_connector = getSocketConnector(m_timeout);\n                    continue;\n                } else if (m_connector.isDisposed() || m_connector.isDisposing()) {\n                    /*\n                     * There appears to be a bug in MINA that allows newly-created NioSocketConnectors\n                     * to internally reference an executor that is already shutting down. We need to\n                     * check for this state and recreate the connector if necessary.\n                     * \n                     * @see http://issues.opennms.org/browse/NMS-4846\n                     */\n                    LogUtils.warnf(this, \"Found a disposed NioSocketConnector, creating a new one\");\n                    m_connector = getSocketConnector(m_timeout);\n                    continue;\n                }\n                try {\n                    /*\n                     * Use the 3-argument call to connect(). If you use the 2-argument version without\n                     * the localhost port, the call will end up doing a name lookup which seems to fail\n                     * intermittently in unit tests.\n                     *\n                     * @see http://issues.opennms.org/browse/NMS-5309\n                     */\n                    return m_connector.connect(remoteAddress, localAddress, init);\n                } catch (Throwable e) {\n                    LogUtils.debugf(this, e, \"Caught exception on factory %s, retrying: %s\", this, e);\n                    m_connector.dispose(true);\n                    /*\n                    while(!m_connector.isDisposed()) {\n                        try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                    }\n                    */\n                    m_connector = getSocketConnector(m_timeout);\n                }\n            }\n        }\n        throw new IOException(\"Could not connect to socket because of excessive RejectedExecutionExceptions\");\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public long getTimeout() {\n        return m_timeout;\n    }","id":5918,"modified_method":"private static final NioSocketConnector getSocketConnector(long timeout) {\n        NioSocketConnector connector = new NioSocketConnector();\n        connector.setHandler(new SessionDelegateIoHandler());\n        connector.setConnectTimeoutMillis(timeout);\n        return connector;\n    }","commit_id":"ed68ec6ac437d70d9c8c28f553d472d0ed9cf96e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public DetectFuture isServiceDetected(final InetAddress address, final DetectorMonitor monitor) {\n\n        final DetectFuture detectFuture = new DefaultDetectFuture(this);\n\n        try {\n            // Set this up here because it can throw an Exception, which we want\n            // to throw now, not in initializeSession\n            final SSLContext c = createClientSSLContext();\n\n            // Create an IoSessionInitializer that will configure this individual\n            // session. Previously, all this was done on a new Connector each time\n            // but that was leaking file handles all over the place. This way gives\n            // us per-connection settings without the overhead of creating new\n            // Connectors each time\n            IoSessionInitializer<ConnectFuture> init = new IoSessionInitializer<ConnectFuture>() {\n\n                public void initializeSession(IoSession session, ConnectFuture future) {\n                    // Add filters to the session\n                    if(isUseSSLFilter()) {\n                        final SslFilter filter = new SslFilter(c);\n                        filter.setUseClientMode(true);\n                        session.getFilterChain().addFirst(\"SSL\", filter);\n                    }\n                    session.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n                    session.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n                    session.getConfig().setIdleTime(IdleStatus.READER_IDLE, getIdleTime());\n                    // Give the session an IoHandler that will get everything delegated to it\n                    // by the SessionDelegateIoHandler\n                    session.setAttribute( IoHandler.class, createDetectorHandler(detectFuture) );\n                }\n            };\n\n            // Start communication\n            final InetSocketAddress socketAddress = new InetSocketAddress(address, getPort());\n            final ConnectFuture cf = m_connectionFactory.connect(socketAddress, init);\n            cf.addListener(retryAttemptListener(m_connectionFactory, detectFuture, socketAddress, init, getRetries() ));\n        } catch (KeyManagementException e) {\n            detectFuture.setException(e);\n        } catch (NoSuchAlgorithmException e) {\n            detectFuture.setException(e);\n        } catch (IOException e) {\n            detectFuture.setException(e);\n        }\n\n        return detectFuture;\n    }","id":5919,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public DetectFuture isServiceDetected(final InetAddress address, final DetectorMonitor monitor) {\n\n        final DetectFuture detectFuture = new DefaultDetectFuture(this);\n\n        try {\n            // Set this up here because it can throw an Exception, which we want\n            // to throw now, not in initializeSession\n            final SSLContext c = createClientSSLContext();\n\n            // Create an IoSessionInitializer that will configure this individual\n            // session. Previously, all this was done on a new Connector each time\n            // but that was leaking file handles all over the place. This way gives\n            // us per-connection settings without the overhead of creating new\n            // Connectors each time\n            IoSessionInitializer<ConnectFuture> init = new IoSessionInitializer<ConnectFuture>() {\n\n                public void initializeSession(IoSession session, ConnectFuture future) {\n                    // Add filters to the session\n                    if(isUseSSLFilter()) {\n                        final SslFilter filter = new SslFilter(c);\n                        filter.setUseClientMode(true);\n                        session.getFilterChain().addFirst(\"SSL\", filter);\n                    }\n                    session.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n                    session.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n                    session.getConfig().setIdleTime(IdleStatus.READER_IDLE, getIdleTime());\n                    // Give the session an IoHandler that will get everything delegated to it\n                    // by the SessionDelegateIoHandler\n                    session.setAttribute( IoHandler.class, createDetectorHandler(detectFuture) );\n                }\n            };\n\n            // Start communication\n            final InetSocketAddress socketAddress = new InetSocketAddress(address, getPort());\n            // Get an ephemeral port on the localhost interface\n            final InetSocketAddress localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), 0);\n            final ConnectFuture cf = m_connectionFactory.connect(socketAddress, localAddress, init);\n            cf.addListener(retryAttemptListener(m_connectionFactory, detectFuture, socketAddress, init, getRetries() ));\n        } catch (KeyManagementException e) {\n            detectFuture.setException(e);\n        } catch (NoSuchAlgorithmException e) {\n            detectFuture.setException(e);\n        } catch (IOException e) {\n            detectFuture.setException(e);\n        }\n\n        return detectFuture;\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Handles the retry attempts. Listens to see when the ConnectFuture is finished and checks if there was \n     * an exception thrown. If so, it then attempts a retry if there are more retries.\n     * \n     * @param connector\n     * @param detectFuture\n     * @param address\n     * @param retryAttempt\n     * @return IoFutureListener<ConnectFuture>\n     */\n    private IoFutureListener<ConnectFuture> retryAttemptListener(final ConnectionFactory connector, final DetectFuture detectFuture, final InetSocketAddress address, final IoSessionInitializer<ConnectFuture> init, final int retryAttempt) {\n        return new IoFutureListener<ConnectFuture>() {\n\n            public void operationComplete(ConnectFuture future) {\n                final Throwable cause = future.getException();\n               \n                if(cause instanceof IOException) {\n                    if(retryAttempt == 0) {\n                        LogUtils.infof(this, \"Service %s detected false\",getServiceName());\n                        detectFuture.setServiceDetected(false);\n                    }else {\n                        LogUtils.infof(this, \"Connection exception occurred %s for service %s, retrying attempt %d\", cause, getServiceName(), retryAttempt);\n                        // Connect without using a semaphore\n                        /*\n                        final ConnectFuture cf = m_connectionFactory.connect(address, init);\n                        cf.addListener(retryAttemptListener( m_connectionFactory, detectFuture, address, init, retryAttempt - 1));\n                        */\n                        future = connector.reConnect(address, init);\n                        future.addListener(retryAttemptListener(connector, detectFuture, address, init, retryAttempt - 1));\n                    }\n                }else if(cause instanceof Throwable) {\n                    LogUtils.infof(this, cause, \"Threw a Throwable and detection is false for service %s\", getServiceName());\n                    detectFuture.setServiceDetected(false);\n                } \n            }\n            \n        };\n    }","id":5920,"modified_method":"/**\n     * Handles the retry attempts. Listens to see when the ConnectFuture is finished and checks if there was \n     * an exception thrown. If so, it then attempts a retry if there are more retries.\n     * \n     * @param connector\n     * @param detectFuture\n     * @param address\n     * @param retryAttempt\n     * @return IoFutureListener<ConnectFuture>\n     */\n    private IoFutureListener<ConnectFuture> retryAttemptListener(final ConnectionFactory connector, final DetectFuture detectFuture, final InetSocketAddress address, final IoSessionInitializer<ConnectFuture> init, final int retryAttempt) {\n        return new IoFutureListener<ConnectFuture>() {\n\n            public void operationComplete(ConnectFuture future) {\n                final Throwable cause = future.getException();\n               \n                if(cause instanceof IOException) {\n                    if(retryAttempt == 0) {\n                        LogUtils.infof(this, \"Service %s detected false\",getServiceName());\n                        detectFuture.setServiceDetected(false);\n                    }else {\n                        LogUtils.infof(this, \"Connection exception occurred %s for service %s, retrying attempt %d\", cause, getServiceName(), retryAttempt);\n                        // Connect without using a semaphore\n                        /*\n                        final ConnectFuture cf = m_connectionFactory.connect(address, init);\n                        cf.addListener(retryAttemptListener( m_connectionFactory, detectFuture, address, init, retryAttempt - 1));\n                        */\n                        // Get an ephemeral port on the localhost interface\n                        final InetSocketAddress localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), 0);\n                        future = connector.reConnect(address, localAddress, init);\n                        future.addListener(retryAttemptListener(connector, detectFuture, address, init, retryAttempt - 1));\n                    }\n                }else if(cause instanceof Throwable) {\n                    LogUtils.infof(this, cause, \"Threw a Throwable and detection is false for service %s\", getServiceName());\n                    detectFuture.setServiceDetected(false);\n                } \n            }\n            \n        };\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Repeat(10000)\n    public void testNoServerPresent() throws Exception {\n        m_detector.setPort(1999);\n        System.err.printf(\"Starting testNoServerPresent with detector: %s\\n\", m_detector);\n        \n        final DetectFuture future = m_detector.isServiceDetected(InetAddress.getLocalHost(), new NullDetectorMonitor());\n        future.addListener(new IoFutureListener<DetectFuture>() {\n\n            public void operationComplete(final DetectFuture future) {\n                m_detector.dispose();\n            }\n            \n        });\n        assertNotNull(future);\n        future.awaitUninterruptibly();\n        assertFalse(future.isServiceDetected());\n        \n        System.err.printf(\"Finished testNoServerPresent with detector: %s\\n\", m_detector);\n    }","id":5921,"modified_method":"@Test\n    @Repeat(10000)\n    public void testNoServerPresent() throws Exception {\n        m_detector.setPort(1999);\n        System.err.printf(\"Starting testNoServerPresent with detector: %s\\n\", m_detector);\n        \n        final DetectFuture future = m_detector.isServiceDetected(InetAddressUtils.getLocalHostAddress(), new NullDetectorMonitor());\n        /*\n        future.addListener(new IoFutureListener<DetectFuture>() {\n\n            public void operationComplete(final DetectFuture future) {\n                m_detector.dispose();\n            }\n            \n        });\n        */\n        assertNotNull(future);\n        future.awaitUninterruptibly();\n        assertFalse(future.isServiceDetected());\n        assertNull(future.getException());\n        \n        System.err.printf(\"Finished testNoServerPresent with detector: %s\\n\", m_detector);\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSuccessServer() throws Throwable {\n        setUpServer();\n        final int port = m_server.getLocalPort();\n        final InetAddress address = m_server.getInetAddress();\n\n        final double connectionRate = 0.2;\n        \n        final long startTime = System.currentTimeMillis();\n\n        int i = 0;\n        while (i < 10000) {\n            long now = Math.max(System.currentTimeMillis(), 1);\n            double actualRate = ((double)i) / ((double)(now - startTime));\n            LogUtils.debugf(this, \"Expected Rate: %f Actual Rate: %f Events Sent: %d\", connectionRate, actualRate, i);\n            if (actualRate < connectionRate) {\n                setUp();\n                LogUtils.debugf(this, \"current loop: %d\", i);\n                assertNotNull(m_detector);\n\n                m_detector.setPort(port);\n\n                final DefaultDetectFuture future = (DefaultDetectFuture)m_detector.isServiceDetected(address, new NullDetectorMonitor());\n                future.addListener(new IoFutureListener<DetectFuture>() {\n                    public void operationComplete(final DetectFuture future) {\n                        m_detector.dispose();\n                    }\n                });\n\n                future.awaitUninterruptibly();\n                assertNotNull(future);\n                if (future.getException() != null) {\n                    LogUtils.debugf(this, future.getException(), \"got future exception\");\n                    throw future.getException();\n                }\n                LogUtils.debugf(this, \"got value: %s\", future.getObjectValue());\n                assertTrue(future.isServiceDetected());\n\n                i++;\n            } else {\n                Thread.sleep(5);\n            }\n        }\n    }","id":5922,"modified_method":"@Test\n    public void testSuccessServer() throws Throwable {\n        setUpServer();\n        final int port = m_server.getLocalPort();\n        final InetAddress address = m_server.getInetAddress();\n\n        final double connectionRate = 0.2;\n        \n        final long startTime = System.currentTimeMillis();\n\n        int i = 0;\n        while (i < 10000) {\n            long now = Math.max(System.currentTimeMillis(), 1);\n            double actualRate = ((double)i) / ((double)(now - startTime));\n            LogUtils.debugf(this, \"Expected Rate: %f Actual Rate: %f Events Sent: %d\", connectionRate, actualRate, i);\n            if (actualRate < connectionRate) {\n                setUp();\n                LogUtils.debugf(this, \"current loop: %d\", i);\n                assertNotNull(m_detector);\n\n                m_detector.setPort(port);\n\n                final DefaultDetectFuture future = (DefaultDetectFuture)m_detector.isServiceDetected(address, new NullDetectorMonitor());\n                /*\n                future.addListener(new IoFutureListener<DetectFuture>() {\n                    public void operationComplete(final DetectFuture future) {\n                        m_detector.dispose();\n                    }\n                });\n                */\n\n                future.awaitUninterruptibly();\n                assertNotNull(future);\n                if (future.getException() != null) {\n                    LogUtils.debugf(this, future.getException(), \"got future exception\");\n                    throw future.getException();\n                }\n                LogUtils.debugf(this, \"got value: %s\", future.getObjectValue());\n                assertTrue(future.isServiceDetected());\n\n                i++;\n            } else {\n                Thread.sleep(5);\n            }\n        }\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@BeforeClass\n    public static void beforeTest(){\n        System.setProperty(\"org.opennms.netmgt.provision.maxConcurrentConnectors\", \"2000\");\n    }","id":5923,"modified_method":"@BeforeClass\n    public static void beforeTest(){\n        System.setProperty(\"org.opennms.netmgt.provision.maxConcurrentConnectors\", \"2000\");\n        // Make sure that the ConnectionFactory reloads the system properties\n        ConnectionFactory.init();\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Free up the resources used by a connection and connection factory.\n     * @param factory\n     * @param connection\n     */\n    public static void dispose(ConnectionFactory factory) {\n        if (s_availableConnections != null) {\n            s_availableConnections.release();\n        }\n\n        if (--factory.m_references <= 0) {\n            LogUtils.debugf(factory, \"Disposing of factory for interval %d\", factory.getTimeout());\n            Iterator<Entry<Integer, ConnectionFactory>> i = s_connectorPool.entrySet().iterator();\n            while(i.hasNext()) {\n                if(i.next().getValue() == factory) {\n                    i.remove();\n                }\n            }\n\n            synchronized (factory.m_connector) {\n                factory.m_connector.dispose();\n            }\n        }\n    }","id":5924,"modified_method":"/**\n     * Free up the resources used by a connection and connection factory.\n     * @param factory\n     * @param connection\n     */\n    public static void dispose(ConnectionFactory factory) {\n        if (s_availableConnections != null) {\n            s_availableConnections.release();\n        }\n\n        if (--factory.m_references <= 0) {\n            LogUtils.debugf(factory, \"Disposing of factory %s for interval %d\", factory, factory.m_timeout);\n            synchronized (s_connectorPool) {\n                Iterator<Entry<Integer, ConnectionFactory>> i = s_connectorPool.entrySet().iterator();\n                while(i.hasNext()) {\n                    if(i.next().getValue() == factory) {\n                        i.remove();\n                    }\n                }\n            }\n\n            synchronized (factory.m_connectorMutex) {\n                factory.m_connector.dispose(true);\n                /*\n                while(!factory.m_connector.isDisposed()) {\n                    try { Thread.sleep(10); } catch (InterruptedException e) {}\n                }\n                */\n            }\n        }\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Create a new factory. Private because one should use {@link #getFactory(int)}\n     */\n    private ConnectionFactory(int timeoutInMillis) {\n        m_timeout = timeoutInMillis;\n        m_connector = getSocketConnector();\n    }","id":5925,"modified_method":"/**\n     * Create a new factory. Private because one should use {@link #getFactory(int)}\n     */\n    private ConnectionFactory(int timeoutInMillis) {\n        m_timeout = timeoutInMillis;\n        synchronized (m_connectorMutex) {\n            m_connector = getSocketConnector(m_timeout);\n        }\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public long getTimeout() {\n        return m_timeout;\n    }","id":5926,"modified_method":"private static final NioSocketConnector getSocketConnector(long timeout) {\n        NioSocketConnector connector = new NioSocketConnector();\n        connector.setHandler(new SessionDelegateIoHandler());\n        connector.setConnectTimeoutMillis(timeout);\n        return connector;\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections\n     * is set, this may block until a connection slot is available.\n     * <p>\n     * You must dispose both the ConnectionFactory and ConncetFuture when done\n     * by calling {@link #dispose(ConnectionFactory, ConnectFuture)}.\n     * \n     * @param destination\n     * \t\tDestination address\n     * @param init\n     * \t\tInitialiser for the IoSession\n     * @return\n     * \t\tConnectFuture from a Mina connect call\n     * @throws IOException \n     */\n    public ConnectFuture connect(SocketAddress destination, IoSessionInitializer<? extends ConnectFuture> init) throws IOException {\n        if (s_availableConnections != null) {\n            s_availableConnections.acquireUninterruptibly();\n        }\n        for (int retries = 0; retries < s_connectionExecutionRetries; retries++) { \n            try {\n                synchronized (m_connector) {\n                    return m_connector.connect(destination, init);\n                }\n            } catch (RejectedExecutionException e) {\n                LogUtils.debugf(this, \"Caught exception, retrying: %s\", e);\n                synchronized (m_connector) {\n                    m_connector.dispose();\n                    m_connector = getSocketConnector();\n                    try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                }\n            } catch (IllegalStateException e) {\n                LogUtils.debugf(this, \"Caught exception, retrying: %s\", e);\n                synchronized (m_connector) {\n                    m_connector.dispose();\n                    m_connector = getSocketConnector();\n                    try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                }\n            }\n        }\n        throw new IOException(\"Could not connect to socket because of excessive RejectedExecutionExceptions\");\n    }","id":5927,"modified_method":"/**\n     * Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections\n     * is set, this may block until a connection slot is available.\n     * <p>\n     * You must dispose both the ConnectionFactory and ConncetFuture when done\n     * by calling {@link #dispose(ConnectionFactory, ConnectFuture)}.\n     * \n     * @param remoteAddress\n     * \t\tDestination address\n     * @param init\n     * \t\tInitialiser for the IoSession\n     * @return\n     * \t\tConnectFuture from a Mina connect call\n     * @throws IOException \n     */\n    public ConnectFuture connect(SocketAddress remoteAddress, SocketAddress localAddress, IoSessionInitializer<? extends ConnectFuture> init) throws IOException {\n        if (s_availableConnections != null) {\n            s_availableConnections.acquireUninterruptibly();\n        }\n        for (int retries = 0; retries < s_connectionExecutionRetries; retries++) { \n            synchronized (m_connectorMutex) {\n                if (m_connector == null) {\n                    // Sanity check for null connector instance\n                    LogUtils.warnf(this, \"Found a null NioSocketConnector, creating a new one\");\n                    m_connector = getSocketConnector(m_timeout);\n                    continue;\n                } else if (m_connector.isDisposed() || m_connector.isDisposing()) {\n                    /*\n                     * There appears to be a bug in MINA that allows newly-created NioSocketConnectors\n                     * to internally reference an executor that is already shutting down. We need to\n                     * check for this state and recreate the connector if necessary.\n                     * \n                     * @see http://issues.opennms.org/browse/NMS-4846\n                     */\n                    LogUtils.warnf(this, \"Found a disposed NioSocketConnector, creating a new one\");\n                    m_connector = getSocketConnector(m_timeout);\n                    continue;\n                }\n                try {\n                    /*\n                     * Use the 3-argument call to connect(). If you use the 2-argument version without\n                     * the localhost port, the call will end up doing a name lookup which seems to fail\n                     * intermittently in unit tests.\n                     *\n                     * @see http://issues.opennms.org/browse/NMS-5309\n                     */\n                    return m_connector.connect(remoteAddress, localAddress, init);\n                } catch (Throwable e) {\n                    LogUtils.debugf(this, e, \"Caught exception on factory %s, retrying: %s\", this, e);\n                    m_connector.dispose(true);\n                    /*\n                    while(!m_connector.isDisposed()) {\n                        try { Thread.sleep(10); } catch (InterruptedException ex) {}\n                    }\n                    */\n                    m_connector = getSocketConnector(m_timeout);\n                }\n            }\n        }\n        throw new IOException(\"Could not connect to socket because of excessive RejectedExecutionExceptions\");\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Retry a connection. This does not consume a connection slot, so will not\n     * block or throw {@link InterruptedException}. Use only if you have already\n     * acquired a connection slot using {@link #connect(SocketAddress, IoSessionInitializer)}.\n     * \n     * @param destination\n     * @param init\n     * @return\n     */\n    public ConnectFuture reConnect(SocketAddress destination, IoSessionInitializer<? extends ConnectFuture> init) {\n        synchronized (m_connector) {\n            m_connector.dispose();\n            m_connector = getSocketConnector();\n            return m_connector.connect(destination, init);\n        }\n    }","id":5928,"modified_method":"/**\n     * Retry a connection. This does not consume a connection slot, so will not\n     * block or throw {@link InterruptedException}. Use only if you have already\n     * acquired a connection slot using {@link #connect(SocketAddress, IoSessionInitializer)}.\n     * \n     * @param remoteAddress\n     * @param init\n     * @return\n     */\n    public ConnectFuture reConnect(SocketAddress remoteAddress, SocketAddress localAddress, IoSessionInitializer<? extends ConnectFuture> init) {\n        synchronized (m_connectorMutex) {\n            m_connector.dispose(true);\n            /*\n            while(!m_connector.isDisposed()) {\n                try { Thread.sleep(10); } catch (InterruptedException e) {}\n            }\n            */\n            m_connector = getSocketConnector(m_timeout);\n            /*\n             * Use the 3-argument call to connect(). If you use the 2-argument version without\n             * the localhost port, the call will end up doing a name lookup which seems to fail\n             * intermittently in unit tests.\n             *\n             * @see http://issues.opennms.org/browse/NMS-5309\n             */\n            return m_connector.connect(remoteAddress, localAddress, init);\n        }\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Get a new ConnectionFactory. If there is already a Factory with the\n     * desired timeout, you will get that one; otherwise a new one is created.\n     * <p>\n     * If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may\n     * block until a connector is available.\n     * \n     * @param timeoutInMillis\n     * \t\tConnection timeout\n     * @return\n     * \t\tAn appropriate Factory\n     */\n    public static ConnectionFactory getFactory(int timeoutInMillis) {\n        ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);\n        if (factory == null) {\n            LogUtils.debugf(ConnectionFactory.class, \"Creating a ConnectionFactory for timeout %d, there are already %d factories\", timeoutInMillis, s_connectorPool.size());\n            ConnectionFactory newFactory = new ConnectionFactory(timeoutInMillis);\n            factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);\n            // If there was no previous value for the factory in the map...\n            if (factory == null) {\n                // ...then use the new value.\n                factory = newFactory;\n            } else {\n                LogUtils.debugf(ConnectionFactory.class, \"ConnectionFactory for timeout %d was already created in another thread!\", timeoutInMillis);\n            }\n        }\n        factory.m_references++;\n        return factory;\n    }","id":5929,"modified_method":"/**\n     * Get a new ConnectionFactory. If there is already a Factory with the\n     * desired timeout, you will get that one; otherwise a new one is created.\n     * <p>\n     * If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may\n     * block until a connector is available.\n     * \n     * @param timeoutInMillis\n     * \t\tConnection timeout\n     * @return\n     * \t\tAn appropriate Factory\n     */\n    public static ConnectionFactory getFactory(int timeoutInMillis) {\n        synchronized (s_connectorPool) {\n            ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);\n            if (factory == null) {\n                LogUtils.debugf(ConnectionFactory.class, \"Creating a ConnectionFactory for timeout %d, there are %d factories total\", timeoutInMillis, s_connectorPool.size());\n                ConnectionFactory newFactory = new ConnectionFactory(timeoutInMillis);\n                factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);\n                // If there was no previous value for the factory in the map...\n                if (factory == null) {\n                    // ...then use the new value.\n                    factory = newFactory;\n                } else {\n                    LogUtils.debugf(ConnectionFactory.class, \"ConnectionFactory for timeout %d was already created in another thread!\", timeoutInMillis);\n                    // Dispose of the new unused factory\n                    dispose(newFactory);\n                }\n            }\n            factory.m_references++;\n            return factory;\n        }\n    }","commit_id":"633cec0a22a5348fdf62f6af57305f40a8d8dc22","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void execute(JobExecutionContext context)\n        throws JobExecutionException {\n            m_reportd.runReport(context.getJobDetail().getName());\n    }","id":5930,"modified_method":"public void execute(JobExecutionContext context)\n        throws JobExecutionException {\n            m_reportd.runReport((Report)context.getJobDetail().getJobDataMap().get(KEY));\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void buildReportSchedule() {\n\n        synchronized (m_lock) {\n            Iterator<Report> it = m_configDao.getReports().iterator();\n\n            while (it.hasNext()) {\n                Report report = it.next();\n                JobDetail detail = null;\n                Trigger trigger = null;\n\n                try {\n                    detail = new JobDetail(report.getReportName(), JOB_GROUP, ReportJob.class, false, false, false);\n                    detail.getJobDataMap().put(ReportJob.KEY, report.getReportTemplate());\n\n                    trigger = new CronTrigger(report.getReportName(), JOB_GROUP, report.getCronSchedule());\n                    trigger.setMisfireInstruction(CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING);\n                    getScheduler().scheduleJob(detail, trigger);\n\n                } catch (ParseException e) {\n                    LogUtils.errorf(this, \"buildReportSchedule: \"+e.getLocalizedMessage(), e);\n                } catch (SchedulerException e) {\n                    LogUtils.errorf(this, \"buildReportSchedule: \"+e.getLocalizedMessage(), e);\n                }\n            }\n        }\n    }","id":5931,"modified_method":"private void buildReportSchedule() {\n\n        synchronized (m_lock) {\n            Iterator<Report> it = m_configDao.getReports().iterator();\n\n            while (it.hasNext()) {\n                Report report = it.next();\n                JobDetail detail = null;\n                Trigger trigger = null;\n\n                try {\n                    detail = new JobDetail(report.getReportName(), JOB_GROUP, ReportJob.class, false, false, false);\n                    detail.getJobDataMap().put(ReportJob.KEY, report);\n                   \n\n                    trigger = new CronTrigger(report.getReportName(), JOB_GROUP, report.getCronSchedule());\n                    trigger.setMisfireInstruction(CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING);\n                    getScheduler().scheduleJob(detail, trigger);\n\n                } catch (ParseException e) {\n                    LogUtils.errorf(this, \"buildReportSchedule: \"+e.getLocalizedMessage(), e);\n                } catch (SchedulerException e) {\n                    LogUtils.errorf(this, \"buildReportSchedule: \"+e.getLocalizedMessage(), e);\n                }\n            }\n        }\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setReportService(DefaultReportService reportService) {\n        m_reportService = reportService;\n    }","id":5932,"modified_method":"public void setReportService(ReportService reportService) {\n        m_reportService = reportService;\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public DefaultReportService getReportService() {\n        return m_reportService;\n    }","id":5933,"modified_method":"public ReportService getReportService() {\n        return m_reportService;\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void runReport(String reportName, String[] reportEmailDestinations) {\n        LogUtils.debugf(this, \"reportd -- running job %s\", reportName );\n        m_reportService.runReport(reportName,reportEmailDestinations);\n        LogUtils.debugf(this,\"reportd -- done running job %s\",reportName);\n    }","id":5934,"modified_method":"public void runReport(Report report) {\n        LogUtils.debugf(this, \"reportd -- running job %s\", report.getReportName() );\n        m_reportService.runReport(report);\n        LogUtils.debugf(this,\"reportd -- done running job %s\",report.getReportName() );\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        // TODO Auto-generated method stub\n    }","id":5935,"modified_method":"public void afterPropertiesSet() throws Exception {\n        // TODO Auto-generated method stub\n        \n        Assert.isNotNull(m_eventForwarder, \"No Event Forwarder Set\");\n        Assert.isNotNull(m_reportScheduler, \"No Report Scheduler Set\");\n        Assert.isNotNull(m_reportService,\"No Report service set\");\n    }","commit_id":"280084c01aed76d6448d1a115a7d133cefc21b79","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public ConflictDialog() {\n\t\tsuper(tr(\"Conflict\"), \"conflict\", tr(\"Merging conflicts.\"), KeyEvent.VK_C, 100);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() >= 2)\n\t\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,2));\n\t\tJButton button = new JButton(tr(\"Resolve\"), ImageProvider.get(\"dialogs\", \"conflict\"));\n\t\tbutton.setToolTipText(tr(\"Open a merge dialog of all selected items in the list above.\"));\n\t\tbutton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t\tbutton.putClientProperty(\"help\", \"Dialog/Conflict/Resolve\");\n\t\tbuttonPanel.add(button);\n\n\t\tbutton = new JButton(tr(\"Select\"), ImageProvider.get(\"mapmode/selection/select\"));\n\t\tbutton.setToolTipText(tr(\"Set the selected elements on the map to the selected items in the list above.\"));\n\t\tbutton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tCollection<OsmPrimitive> sel = new LinkedList<OsmPrimitive>();\n\t\t\t\tfor (Object o : displaylist.getSelectedValues())\n\t\t\t\t\tsel.add((OsmPrimitive)o);\n\t\t\t\tMain.ds.setSelected(sel);\n\t\t\t}\n\t\t});\n\t\tbutton.putClientProperty(\"help\", \"Dialog/Conflict/Select\");\n\t\tbuttonPanel.add(button);\n\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tDataSet.selListeners.add(new SelectionChangedListener(){\n\t\t\tpublic void selectionChanged(Collection<? extends OsmPrimitive> newSelection) {\n\t\t\t\tdisplaylist.clearSelection();\n\t\t\t\tfor (OsmPrimitive osm : newSelection) {\n\t\t\t\t\tif (conflicts.containsKey(osm)) {\n\t\t\t\t\t\tint pos = model.indexOf(osm);\n\t\t\t\t\t\tdisplaylist.addSelectionInterval(pos, pos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdisplaylist.getSelectionModel().addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\t\tMain.map.mapView.repaint();\n\t\t\t}\n\t\t});\n\t}","id":5936,"modified_method":"public ConflictDialog() {\n\t\tsuper(tr(\"Conflict\"), \"conflict\", tr(\"Merging conflicts.\"), KeyEvent.VK_C, 100);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() >= 2)\n\t\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,2));\n\t\tbuttonPanel.add(new SideButton(marktr(\"Resolve\"), \"conflict\", \"Conflict\",\n\t\ttr(\"Open a merge dialog of all selected items in the list above.\"), new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t}));\n\n\t\tbuttonPanel.add(new SideButton(marktr(\"Select\"), \"select\", \"Conflict\",\n\t\ttr(\"Set the selected elements on the map to the selected items in the list above.\"), new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tCollection<OsmPrimitive> sel = new LinkedList<OsmPrimitive>();\n\t\t\t\tfor (Object o : displaylist.getSelectedValues())\n\t\t\t\t\tsel.add((OsmPrimitive)o);\n\t\t\t\tMain.ds.setSelected(sel);\n\t\t\t}\n\t\t}));\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tDataSet.selListeners.add(new SelectionChangedListener(){\n\t\t\tpublic void selectionChanged(Collection<? extends OsmPrimitive> newSelection) {\n\t\t\t\tdisplaylist.clearSelection();\n\t\t\t\tfor (OsmPrimitive osm : newSelection) {\n\t\t\t\t\tif (conflicts.containsKey(osm)) {\n\t\t\t\t\t\tint pos = model.indexOf(osm);\n\t\t\t\t\t\tdisplaylist.addSelectionInterval(pos, pos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdisplaylist.getSelectionModel().addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\t\tMain.map.mapView.repaint();\n\t\t\t}\n\t\t});\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"public HistoryDialog() {\n\t\tsuper(tr(\"History\"), \"history\", tr(\"Display the history of all selected items.\"), KeyEvent.VK_H, 150);\n\t\thistoryPane.setVisible(false);\n\t\tnotLoaded.setVisible(true);\n\t\tnotLoaded.setHorizontalAlignment(JLabel.CENTER);\n\n\t\thistory.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\treturn super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n\t\t\t}\n\t\t});\n\t\tdata.setColumnIdentifiers(new Object[]{tr(\"Object\"),tr(\"Date\"),\"\"});\n\t\thistory.getColumnModel().getColumn(0).setPreferredWidth(200);\n\t\thistory.getColumnModel().getColumn(1).setPreferredWidth(200);\n\t\thistory.getColumnModel().getColumn(2).setPreferredWidth(20);\n\t\tfinal TableCellRenderer oldRenderer = history.getTableHeader().getDefaultRenderer();\n\t\thistory.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tJComponent c = (JComponent)oldRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n\t\t\t\tif (!value.equals(\"\"))\n\t\t\t\t\treturn c;\n\t\t\t\tJLabel l = new JLabel(ImageProvider.get(\"misc\",\"showhide\"));\n\t\t\t\tl.setForeground(c.getForeground());\n\t\t\t\tl.setBackground(c.getBackground());\n\t\t\t\tl.setFont(c.getFont());\n\t\t\t\tl.setBorder(c.getBorder());\n\t\t\t\tl.setOpaque(true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\n\t\tJPanel centerPanel = new JPanel(new GridBagLayout());\n\t\tcenterPanel.add(notLoaded, GBC.eol().fill(GBC.BOTH));\n\t\tcenterPanel.add(historyPane, GBC.eol().fill(GBC.BOTH));\n\t\tadd(centerPanel, BorderLayout.CENTER);\n\n\t\tJPanel buttons = new JPanel(new GridLayout(1,2));\n\t\tbuttons.add(reloadButton);\n\t\tbuttons.add(revertButton);\n\t\tadd(buttons, BorderLayout.SOUTH);\n\n\t\treloadButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\treload();\n\t\t\t}\n\t\t});\n\t\treloadButton.setToolTipText(tr(\"Reload all currently selected objects and refresh the list.\"));\n\t\treloadButton.putClientProperty(\"help\", \"Dialog/History/Reload\");\n\t\t\n\t\trevertButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Not implemented yet.\"));\n\t\t\t}\n\t\t});\n\t\trevertButton.setToolTipText(tr(\"Revert the state of all currently selected objects to the version selected in the history list.\"));\n\t\trevertButton.putClientProperty(\"help\", \"Dialog/History/Revert\");\n\t\t\n\t\tDataSet.selListeners.add(this);\n\t}","id":5937,"modified_method":"public HistoryDialog() {\n\t\tsuper(tr(\"History\"), \"history\", tr(\"Display the history of all selected items.\"), KeyEvent.VK_H, 150);\n\t\thistoryPane.setVisible(false);\n\t\tnotLoaded.setVisible(true);\n\t\tnotLoaded.setHorizontalAlignment(JLabel.CENTER);\n\n\t\thistory.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\treturn super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n\t\t\t}\n\t\t});\n\t\tdata.setColumnIdentifiers(new Object[]{tr(\"Object\"),tr(\"Date\"),\"\"});\n\t\thistory.getColumnModel().getColumn(0).setPreferredWidth(200);\n\t\thistory.getColumnModel().getColumn(1).setPreferredWidth(200);\n\t\thistory.getColumnModel().getColumn(2).setPreferredWidth(20);\n\t\tfinal TableCellRenderer oldRenderer = history.getTableHeader().getDefaultRenderer();\n\t\thistory.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tJComponent c = (JComponent)oldRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n\t\t\t\tif (!value.equals(\"\"))\n\t\t\t\t\treturn c;\n\t\t\t\tJLabel l = new JLabel(ImageProvider.get(\"misc\",\"showhide\"));\n\t\t\t\tl.setForeground(c.getForeground());\n\t\t\t\tl.setBackground(c.getBackground());\n\t\t\t\tl.setFont(c.getFont());\n\t\t\t\tl.setBorder(c.getBorder());\n\t\t\t\tl.setOpaque(true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\n\t\tJPanel centerPanel = new JPanel(new GridBagLayout());\n\t\tcenterPanel.add(notLoaded, GBC.eol().fill(GBC.BOTH));\n\t\tcenterPanel.add(historyPane, GBC.eol().fill(GBC.BOTH));\n\t\tadd(centerPanel, BorderLayout.CENTER);\n\n\t\tJPanel buttons = new JPanel(new GridLayout(1,2));\n\t\tbuttons.add(new SideButton(marktr(\"Reload\"), \"refresh\", \"History\", tr(\"Reload all currently selected objects and refresh the list.\"),\n\t\tnew ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\treload();\n\t\t\t}\n\t\t}));\n\t\tbuttons.add(new SideButton(marktr(\"Revert\"), \"revert\", \"History\",\n\t\ttr(\"Revert the state of all currently selected objects to the version selected in the history list.\"), new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Not implemented yet.\"));\n\t\t\t}\n\t\t}));\n\t\tadd(buttons, BorderLayout.SOUTH);\n\n\t\tDataSet.selListeners.add(this);\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Create an layerlist and attach it to the given mapView.\n\t */\n\tpublic LayerListDialog(MapFrame mapFrame) {\n\t\tsuper(tr(\"Layers\"), \"layerlist\", tr(\"Open a list of all loaded layers.\"), KeyEvent.VK_L, 100);\n\t\tinstance = new JList(model);\n\t\tlistScrollPane = new JScrollPane(instance);\n\t\tadd(listScrollPane, BorderLayout.CENTER);\n\t\tinstance.setBackground(UIManager.getColor(\"Button.background\"));\n\t\tinstance.setCellRenderer(new DefaultListCellRenderer(){\n\t\t\t@Override public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n\t\t\t\tLayer layer = (Layer)value;\n\t\t\t\tJLabel label = (JLabel)super.getListCellRendererComponent(list,\n\t\t\t\t\t\tlayer.name, index, isSelected, cellHasFocus);\n\t\t\t\tIcon icon = layer.getIcon();\n\t\t\t\tif (!layer.visible)\n\t\t\t\t\ticon = ImageProvider.overlay(icon, \"overlay/invisible\", OverlayPosition.SOUTHEAST);\n\t\t\t\tlabel.setIcon(icon);\n\t\t\t\tlabel.setToolTipText(layer.getToolTipText());\n\t\t\t\treturn label;\n\t\t\t}\n\t\t});\n\n\t\tfinal MapView mapView = mapFrame.mapView;\n\n\t\tCollection<Layer> data = mapView.getAllLayers();\n\t\tfor (Layer l : data)\n\t\t\tmodel.addElement(l);\n\n\t\tinstance.setSelectedValue(mapView.getActiveLayer(), true);\n\t\tinstance.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\tinstance.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\t\tif (instance.getModel().getSize() == 0)\n\t\t\t\t\treturn;\n\t\t\t\tif (instance.getSelectedIndex() == -1)\n\t\t\t\t\tinstance.setSelectedIndex(e.getFirstIndex());\n\t\t\t\tmapView.setActiveLayer((Layer)instance.getSelectedValue());\n\t\t\t}\n\t\t});\n\t\tLayer.listeners.add(this);\n\n\t\tinstance.addMouseListener(new MouseAdapter(){\n\t\t\tprivate void openPopup(MouseEvent e) {\n\t\t\t\tPoint p = listScrollPane.getMousePosition();\n\t\t\t\tif (p == null)\n\t\t\t\t\treturn; // user is faster than swing with mouse movement\n\t\t\t\tint index = instance.locationToIndex(e.getPoint());\n\t\t\t\tLayer layer = (Layer)instance.getModel().getElementAt(index);\n\t\t\t\tLayerListPopup menu = new LayerListPopup(instance, layer);\n\t\t\t\tmenu.show(listScrollPane, p.x, p.y-3);\n\t\t\t}\n\t\t\t@Override public void mousePressed(MouseEvent e) {\n\t\t\t\tif (e.isPopupTrigger())\n\t\t\t\t\topenPopup(e);\n\t\t\t}\n\t\t\t@Override public void mouseReleased(MouseEvent e) {\n\t\t\t\tif (e.isPopupTrigger())\n\t\t\t\t\topenPopup(e);\n\t\t\t}\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() == 2) {\n\t\t\t\t\tint index = instance.locationToIndex(e.getPoint());\n\t\t\t\t\tLayer layer = (Layer)instance.getModel().getElementAt(index);\n\t\t\t\t\tString current = Main.pref.get(\"marker.show \"+layer.name,\"show\");\n\t\t\t\t\tMain.pref.put(\"marker.show \"+layer.name, current.equalsIgnoreCase(\"show\") ? \"hide\" : \"show\");\n\t\t\t\t\tlayer.visible = !layer.visible;\n\t\t\t\t\tMain.map.mapView.repaint();\n\t\t\t\t\tinstance.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\t\t// Buttons\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1, 5));\n\n\t\tActionListener upDown = new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tLayer l = (Layer)instance.getSelectedValue();\n\t\t\t\tint sel = instance.getSelectedIndex();\n\t\t\t\tint selDest = e.getActionCommand().equals(\"up\") ? sel-1 : sel+1;\n\t\t\t\tmapView.moveLayer(l, selDest);\n\t\t\t\tmodel.set(sel, model.get(selDest));\n\t\t\t\tmodel.set(selDest, l);\n\t\t\t\tinstance.setSelectedIndex(selDest);\n\t\t\t\tupdateButtonEnabled();\n\t\t\t\tmapView.repaint();\n\t\t\t}\n\t\t};\n\n\t\tupButton.setToolTipText(tr(\"Move the selected layer one row up.\"));\n\t\tupButton.addActionListener(upDown);\n\t\tupButton.setActionCommand(\"up\");\n\t\tupButton.putClientProperty(\"help\", \"Dialog/LayerList/Up\");\n\t\tbuttonPanel.add(upButton);\n\n\t\tdownButton.setToolTipText(tr(\"Move the selected layer one row down.\"));\n\t\tdownButton.addActionListener(upDown);\n\t\tdownButton.setActionCommand(\"down\");\n\t\tdownButton.putClientProperty(\"help\", \"Dialog/LayerList/Down\");\n\t\tbuttonPanel.add(downButton);\n\n\t\tJButton showHideButton = new JButton(new ShowHideLayerAction(null));\n\t\tshowHideButton.setText(\"\");\n\t\tbuttonPanel.add(showHideButton);\n\n\t\tJButton deleteButton = new JButton(deleteAction);\n\t\tdeleteButton.setText(\"\");\n\t\tbuttonPanel.add(deleteButton);\n\n\t\tmergeButton.setToolTipText(tr(\"Merge the layer directly below into the selected layer.\"));\n\t\tmergeButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tLayer lTo = (Layer)instance.getSelectedValue();\n\t\t\t\tLayer lFrom = (Layer)model.get(instance.getSelectedIndex()+1);\n\t\t\t\tlTo.mergeFrom(lFrom);\n\t\t\t\tmapView.removeLayer(lFrom);\n\t\t\t\tupdateButtonEnabled();\n\t\t\t\tmapView.repaint();\n\t\t\t}\n\t\t});\n\t\tmergeButton.putClientProperty(\"help\", \"Dialog/LayerList/Merge\");\n\t\tbuttonPanel.add(mergeButton);\n\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tupdateButtonEnabled();\n\t}","id":5938,"modified_method":"/**\n\t * Create an layerlist and attach it to the given mapView.\n\t */\n\tpublic LayerListDialog(MapFrame mapFrame) {\n\t\tsuper(tr(\"Layers\"), \"layerlist\", tr(\"Open a list of all loaded layers.\"), KeyEvent.VK_L, 100);\n\t\tinstance = new JList(model);\n\t\tlistScrollPane = new JScrollPane(instance);\n\t\tadd(listScrollPane, BorderLayout.CENTER);\n\t\tinstance.setBackground(UIManager.getColor(\"Button.background\"));\n\t\tinstance.setCellRenderer(new DefaultListCellRenderer(){\n\t\t\t@Override public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n\t\t\t\tLayer layer = (Layer)value;\n\t\t\t\tJLabel label = (JLabel)super.getListCellRendererComponent(list,\n\t\t\t\t\t\tlayer.name, index, isSelected, cellHasFocus);\n\t\t\t\tIcon icon = layer.getIcon();\n\t\t\t\tif (!layer.visible)\n\t\t\t\t\ticon = ImageProvider.overlay(icon, \"overlay/invisible\", OverlayPosition.SOUTHEAST);\n\t\t\t\tlabel.setIcon(icon);\n\t\t\t\tlabel.setToolTipText(layer.getToolTipText());\n\t\t\t\treturn label;\n\t\t\t}\n\t\t});\n\n\t\tfinal MapView mapView = mapFrame.mapView;\n\n\t\tCollection<Layer> data = mapView.getAllLayers();\n\t\tfor (Layer l : data)\n\t\t\tmodel.addElement(l);\n\n\t\tinstance.setSelectedValue(mapView.getActiveLayer(), true);\n\t\tinstance.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\tinstance.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\t\tif (instance.getModel().getSize() == 0)\n\t\t\t\t\treturn;\n\t\t\t\tif (instance.getSelectedIndex() == -1)\n\t\t\t\t\tinstance.setSelectedIndex(e.getFirstIndex());\n\t\t\t\tmapView.setActiveLayer((Layer)instance.getSelectedValue());\n\t\t\t}\n\t\t});\n\t\tLayer.listeners.add(this);\n\n\t\tinstance.addMouseListener(new MouseAdapter(){\n\t\t\tprivate void openPopup(MouseEvent e) {\n\t\t\t\tPoint p = listScrollPane.getMousePosition();\n\t\t\t\tif (p == null)\n\t\t\t\t\treturn; // user is faster than swing with mouse movement\n\t\t\t\tint index = instance.locationToIndex(e.getPoint());\n\t\t\t\tLayer layer = (Layer)instance.getModel().getElementAt(index);\n\t\t\t\tLayerListPopup menu = new LayerListPopup(instance, layer);\n\t\t\t\tmenu.show(listScrollPane, p.x, p.y-3);\n\t\t\t}\n\t\t\t@Override public void mousePressed(MouseEvent e) {\n\t\t\t\tif (e.isPopupTrigger())\n\t\t\t\t\topenPopup(e);\n\t\t\t}\n\t\t\t@Override public void mouseReleased(MouseEvent e) {\n\t\t\t\tif (e.isPopupTrigger())\n\t\t\t\t\topenPopup(e);\n\t\t\t}\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() == 2) {\n\t\t\t\t\tint index = instance.locationToIndex(e.getPoint());\n\t\t\t\t\tLayer layer = (Layer)instance.getModel().getElementAt(index);\n\t\t\t\t\tString current = Main.pref.get(\"marker.show \"+layer.name,\"show\");\n\t\t\t\t\tMain.pref.put(\"marker.show \"+layer.name, current.equalsIgnoreCase(\"show\") ? \"hide\" : \"show\");\n\t\t\t\t\tlayer.visible = !layer.visible;\n\t\t\t\t\tMain.map.mapView.repaint();\n\t\t\t\t\tinstance.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\t\t// Buttons\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1, 5));\n\n\t\tActionListener upDown = new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tLayer l = (Layer)instance.getSelectedValue();\n\t\t\t\tint sel = instance.getSelectedIndex();\n\t\t\t\tint selDest = e.getActionCommand().equals(\"up\") ? sel-1 : sel+1;\n\t\t\t\tmapView.moveLayer(l, selDest);\n\t\t\t\tmodel.set(sel, model.get(selDest));\n\t\t\t\tmodel.set(selDest, l);\n\t\t\t\tinstance.setSelectedIndex(selDest);\n\t\t\t\tupdateButtonEnabled();\n\t\t\t\tmapView.repaint();\n\t\t\t}\n\t\t};\n\n\t\tupButton = new SideButton(\"up\", \"LayerList\", tr(\"Move the selected layer one row up.\"), upDown);\n\t\tbuttonPanel.add(upButton);\n\n \t\tdownButton = new SideButton(\"down\", \"LayerList\", tr(\"Move the selected layer one row down.\"), upDown);\n\t\tbuttonPanel.add(downButton);\n\n\t\tbuttonPanel.add(new SideButton(new ShowHideLayerAction(null)));\n\t\tbuttonPanel.add(new SideButton(deleteAction));\n\n\t\tmergeButton = new SideButton(\"Merge\", \"mergedown\", \"LayerList\", tr(\"Merge the layer directly below into the selected layer.\"),\n\t\tnew ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tLayer lTo = (Layer)instance.getSelectedValue();\n\t\t\t\tLayer lFrom = (Layer)model.get(instance.getSelectedIndex()+1);\n\t\t\t\tlTo.mergeFrom(lFrom);\n\t\t\t\tmapView.removeLayer(lFrom);\n\t\t\t\tupdateButtonEnabled();\n\t\t\t\tmapView.repaint();\n\t\t\t}\n\t\t});\n\t\tmergeButton.setText(null);\n\t\tbuttonPanel.add(mergeButton);\n\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tupdateButtonEnabled();\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Create a new PropertiesDialog\n\t */\n\tpublic PropertiesDialog(MapFrame mapFrame) {\n\t\tsuper(tr(\"Properties/Memberships\"), \"propertiesdialog\", tr(\"Properties for selected objects.\"), KeyEvent.VK_P, 150);\n\n\t\t// ---------------------------------------\n\t\t// This drop-down is really deprecated but we offer people a chance to \n\t\t// activate it if they really want. Presets should be used from the \n\t\t// menu.\n\t\tif (TaggingPresetPreference.taggingPresets.size() > 0 && \n\t\t\t\tMain.pref.getBoolean(\"taggingpresets.in-properties-dialog\", false)) {\n\t\t\tVector<ActionListener> allPresets = new Vector<ActionListener>();\n\t\t\tfor (final TaggingPreset p : TaggingPresetPreference.taggingPresets)\n\t\t\t\tallPresets.add(new ForwardActionListener(this, p));\n\n\t\t\tTaggingPreset empty = new TaggingPreset();\n\t\t\t// empty.setName(\"this drop-down will be removed soon\");\n\t\t\tallPresets.add(0, new ForwardActionListener(this, empty));\n\t\t\ttaggingPresets.setModel(new DefaultComboBoxModel(allPresets));\n\t\t\tJPanel north = new JPanel(new GridBagLayout());\n\t\t\tnorth.add(getComponent(0),GBC.eol().fill(GBC.HORIZONTAL));\n\t\t\tnorth.add(taggingPresets,GBC.eol().fill(GBC.HORIZONTAL));\n\t\t\tadd(north, BorderLayout.NORTH);\n\t\t}\n\t\ttaggingPresets.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tTaggingPreset preset = ((ForwardActionListener)taggingPresets.getSelectedItem()).preset;\n\t\t\t\tpreset.actionPerformed(e);\n\t\t\t\ttaggingPresets.setSelectedItem(null);\n\t\t\t}\n\t\t});\n\t\ttaggingPresets.setRenderer(new TaggingCellRenderer());\n\n\t\t// setting up the properties table\n\t\t\n\t\tpropertyData.setColumnIdentifiers(new String[]{tr(\"Key\"),tr(\"Value\")});\n\t\tpropertyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\n\t\tpropertyTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tComponent c = super.getTableCellRendererComponent(table, value, isSelected, false, row, column);\n\t\t\t\tif (c instanceof JLabel) {\n\t\t\t\t\tString str = null;\n\t\t\t\t\tswitch (column) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tstr = (String) value;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tMap<String, Integer> v = (Map<String,Integer>) value;\n\t\t\t\t\t\tif (v.size()!=1) {\n\t\t\t\t\t\t\tstr=tr(\"<different>\");\n\t\t\t\t\t\t\tc.setFont(c.getFont().deriveFont(Font.ITALIC));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr=v.entrySet().iterator().next().getKey();\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t((JLabel)c).setText(str);\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// setting up the membership table\n\t\t\n\t\tmembershipData.setColumnIdentifiers(new String[]{tr(\"Member Of\"),tr(\"Role\")});\n\t\tmembershipTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\t\n\t\tmembershipTable.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tComponent c = super.getTableCellRendererComponent(table, value, isSelected, false, row, column);\n\t\t\t\tif (c instanceof JLabel) {\n\t\t\t\t\tnameVisitor.visit((Relation)value);\n\t\t\t\t\t((JLabel)c).setText(nameVisitor.name);\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// combine both tables and wrap them in a scrollPane\n\t\tJPanel bothTables = new JPanel();\n\t\tbothTables.setLayout(new GridBagLayout());\n\t\tbothTables.add(propertyTable.getTableHeader(), GBC.eol().fill(GBC.HORIZONTAL));\n\t\tbothTables.add(propertyTable, GBC.eol().fill(GBC.BOTH));\n\t\tbothTables.add(membershipTable.getTableHeader(), GBC.eol().fill(GBC.HORIZONTAL));\n\t\tbothTables.add(membershipTable, GBC.eol().fill(GBC.BOTH));\n\t\t\n\t\tDblClickWatch dblClickWatch = new DblClickWatch();\n\t\tpropertyTable.addMouseListener(dblClickWatch);\n\t\tmembershipTable.addMouseListener(dblClickWatch);\n\t\tJScrollPane scrollPane = new JScrollPane(bothTables);\n\t\tscrollPane.addMouseListener(dblClickWatch);\n\t\tadd(scrollPane, BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,3));\n\t\tActionListener buttonAction = new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tint row = membershipTable.getSelectedRow();\n\t\t\t\tif (e.getActionCommand().equals(\"Add\"))\n\t\t\t\t\tadd();\n\t\t\t\telse if(row >= 0)\n\t\t\t\t{\n\t\t\t\t\tif (e.getActionCommand().equals(\"Edit\"))\n\t\t\t\t\t\tmembershipEdit(row);\n\t\t\t\t\telse if (e.getActionCommand().equals(\"Delete\")) {\n\t\t\t\t\t\tRelation cur = (Relation)membershipData.getValueAt(row, 0);\n\t\t\t\t\t\tNameVisitor n = new NameVisitor();\n\t\t\t\t\t\tcur.visit(n);\n\t\t\t\t\t\tif(JOptionPane.showConfirmDialog(Main.parent, tr(\"Really delete selection from relation {0}?\", n.name),\n\t\t\t\t\t\ttr(\"Change relation\"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRelation rel = new Relation(cur);\n\t\t\t\t\t\t\tCollection<OsmPrimitive> sel = Main.ds.getSelected();\n\t\t\t\t\t\t\tfor (RelationMember rm : cur.members) {\n\t\t\t\t\t\t\t\tfor (OsmPrimitive osm : sel) {\n\t\t\t\t\t\t\t\t\tif (rm.member == osm)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tRelationMember mem = new RelationMember();\n\t\t\t\t\t\t\t\t\t\tmem.role = rm.role;\n\t\t\t\t\t\t\t\t\t\tmem.member = rm.member;\n\t\t\t\t\t\t\t\t\t\trel.members.remove(mem);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tMain.main.undoRedo.add(new ChangeCommand(cur, rel));\n\t\t\t\t\t\t\tselectionChanged(sel); // update whole table\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint sel = propertyTable.getSelectedRow();\n\t\t\t\t\tif (e.getActionCommand().equals(\"Edit\")) {\n\t\t\t\t\t\tif(propertyTable.getRowCount() == 1)\n\t\t\t\t\t\t\tsel = 0;\n\t\t\t\t\t\tif (sel == -1)\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select the row to edit.\"));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpropertyEdit(sel);\n\t\t\t\t\t} else if (e.getActionCommand().equals(\"Delete\")) {\n\t\t\t\t\t\tif (sel == -1)\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select the row to delete.\"));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdelete(sel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tbuttonPanel.add(createButton(marktr(\"Add\"),tr(\"Add a new key/value pair to all objects\"), KeyEvent.VK_A, buttonAction));\n\t\tbuttonPanel.add(createButton(marktr(\"Edit\"),tr( \"Edit the value of the selected key for all objects\"), KeyEvent.VK_E, buttonAction));\n\t\tbuttonPanel.add(createButton(marktr(\"Delete\"),tr(\"Delete the selected key in all objects\"), KeyEvent.VK_D, buttonAction));\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tDataSet.selListeners.add(this);\n\t}","id":5939,"modified_method":"/**\n\t * Create a new PropertiesDialog\n\t */\n\tpublic PropertiesDialog(MapFrame mapFrame) {\n\t\tsuper(tr(\"Properties/Memberships\"), \"propertiesdialog\", tr(\"Properties for selected objects.\"), KeyEvent.VK_P, 150);\n\n\t\t// ---------------------------------------\n\t\t// This drop-down is really deprecated but we offer people a chance to \n\t\t// activate it if they really want. Presets should be used from the \n\t\t// menu.\n\t\tif (TaggingPresetPreference.taggingPresets.size() > 0 && \n\t\t\t\tMain.pref.getBoolean(\"taggingpresets.in-properties-dialog\", false)) {\n\t\t\tVector<ActionListener> allPresets = new Vector<ActionListener>();\n\t\t\tfor (final TaggingPreset p : TaggingPresetPreference.taggingPresets)\n\t\t\t\tallPresets.add(new ForwardActionListener(this, p));\n\n\t\t\tTaggingPreset empty = new TaggingPreset();\n\t\t\t// empty.setName(\"this drop-down will be removed soon\");\n\t\t\tallPresets.add(0, new ForwardActionListener(this, empty));\n\t\t\ttaggingPresets.setModel(new DefaultComboBoxModel(allPresets));\n\t\t\tJPanel north = new JPanel(new GridBagLayout());\n\t\t\tnorth.add(getComponent(0),GBC.eol().fill(GBC.HORIZONTAL));\n\t\t\tnorth.add(taggingPresets,GBC.eol().fill(GBC.HORIZONTAL));\n\t\t\tadd(north, BorderLayout.NORTH);\n\t\t}\n\t\ttaggingPresets.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tTaggingPreset preset = ((ForwardActionListener)taggingPresets.getSelectedItem()).preset;\n\t\t\t\tpreset.actionPerformed(e);\n\t\t\t\ttaggingPresets.setSelectedItem(null);\n\t\t\t}\n\t\t});\n\t\ttaggingPresets.setRenderer(new TaggingCellRenderer());\n\n\t\t// setting up the properties table\n\t\t\n\t\tpropertyData.setColumnIdentifiers(new String[]{tr(\"Key\"),tr(\"Value\")});\n\t\tpropertyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\n\t\tpropertyTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer(){\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tComponent c = super.getTableCellRendererComponent(table, value, isSelected, false, row, column);\n\t\t\t\tif (c instanceof JLabel) {\n\t\t\t\t\tString str = null;\n\t\t\t\t\tswitch (column) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tstr = (String) value;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tMap<String, Integer> v = (Map<String,Integer>) value;\n\t\t\t\t\t\tif (v.size()!=1) {\n\t\t\t\t\t\t\tstr=tr(\"<different>\");\n\t\t\t\t\t\t\tc.setFont(c.getFont().deriveFont(Font.ITALIC));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr=v.entrySet().iterator().next().getKey();\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t((JLabel)c).setText(str);\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// setting up the membership table\n\t\t\n\t\tmembershipData.setColumnIdentifiers(new String[]{tr(\"Member Of\"),tr(\"Role\")});\n\t\tmembershipTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\t\n\t\tmembershipTable.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {\n\t\t\t@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\tComponent c = super.getTableCellRendererComponent(table, value, isSelected, false, row, column);\n\t\t\t\tif (c instanceof JLabel) {\n\t\t\t\t\tnameVisitor.visit((Relation)value);\n\t\t\t\t\t((JLabel)c).setText(nameVisitor.name);\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// combine both tables and wrap them in a scrollPane\n\t\tJPanel bothTables = new JPanel();\n\t\tbothTables.setLayout(new GridBagLayout());\n\t\tbothTables.add(propertyTable.getTableHeader(), GBC.eol().fill(GBC.HORIZONTAL));\n\t\tbothTables.add(propertyTable, GBC.eol().fill(GBC.BOTH));\n\t\tbothTables.add(membershipTable.getTableHeader(), GBC.eol().fill(GBC.HORIZONTAL));\n\t\tbothTables.add(membershipTable, GBC.eol().fill(GBC.BOTH));\n\t\t\n\t\tDblClickWatch dblClickWatch = new DblClickWatch();\n\t\tpropertyTable.addMouseListener(dblClickWatch);\n\t\tmembershipTable.addMouseListener(dblClickWatch);\n\t\tJScrollPane scrollPane = new JScrollPane(bothTables);\n\t\tscrollPane.addMouseListener(dblClickWatch);\n\t\tadd(scrollPane, BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,3));\n\t\tActionListener buttonAction = new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tint row = membershipTable.getSelectedRow();\n\t\t\t\tif (e.getActionCommand().equals(\"Add\"))\n\t\t\t\t\tadd();\n\t\t\t\telse if(row >= 0)\n\t\t\t\t{\n\t\t\t\t\tif (e.getActionCommand().equals(\"Edit\"))\n\t\t\t\t\t\tmembershipEdit(row);\n\t\t\t\t\telse if (e.getActionCommand().equals(\"Delete\")) {\n\t\t\t\t\t\tRelation cur = (Relation)membershipData.getValueAt(row, 0);\n\t\t\t\t\t\tNameVisitor n = new NameVisitor();\n\t\t\t\t\t\tcur.visit(n);\n\t\t\t\t\t\tif(JOptionPane.showConfirmDialog(Main.parent, tr(\"Really delete selection from relation {0}?\", n.name),\n\t\t\t\t\t\ttr(\"Change relation\"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRelation rel = new Relation(cur);\n\t\t\t\t\t\t\tCollection<OsmPrimitive> sel = Main.ds.getSelected();\n\t\t\t\t\t\t\tfor (RelationMember rm : cur.members) {\n\t\t\t\t\t\t\t\tfor (OsmPrimitive osm : sel) {\n\t\t\t\t\t\t\t\t\tif (rm.member == osm)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tRelationMember mem = new RelationMember();\n\t\t\t\t\t\t\t\t\t\tmem.role = rm.role;\n\t\t\t\t\t\t\t\t\t\tmem.member = rm.member;\n\t\t\t\t\t\t\t\t\t\trel.members.remove(mem);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tMain.main.undoRedo.add(new ChangeCommand(cur, rel));\n\t\t\t\t\t\t\tselectionChanged(sel); // update whole table\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint sel = propertyTable.getSelectedRow();\n\t\t\t\t\tif (e.getActionCommand().equals(\"Edit\")) {\n\t\t\t\t\t\tif(propertyTable.getRowCount() == 1)\n\t\t\t\t\t\t\tsel = 0;\n\t\t\t\t\t\tif (sel == -1)\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select the row to edit.\"));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpropertyEdit(sel);\n\t\t\t\t\t} else if (e.getActionCommand().equals(\"Delete\")) {\n\t\t\t\t\t\tif (sel == -1)\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select the row to delete.\"));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdelete(sel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tbuttonPanel.add(new SideButton(marktr(\"Add\"),\"add\",\"Properties\",tr(\"Add a new key/value pair to all objects\"), KeyEvent.VK_A, buttonAction));\n\t\tbuttonPanel.add(new SideButton(marktr(\"Edit\"),\"edit\",\"Properties\",tr(\"Edit the value of the selected key for all objects\"), KeyEvent.VK_E, buttonAction));\n\t\tbuttonPanel.add(new SideButton(marktr(\"Delete\"),\"delete\",\"Properties\",tr(\"Delete the selected key in all objects\"), KeyEvent.VK_D, buttonAction));\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\n\t\tDataSet.selListeners.add(this);\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"public RelationListDialog() {\n\t\tsuper(tr(\"Relations\"), \"relationlist\", tr(\"Open a list of all relations.\"), KeyEvent.VK_R, 150);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() < 2)\n\t\t\t\t\treturn;\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toEdit != null)\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\n\t\t\t}\n\t\t});\n\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridBagLayout());\n\t\t\n\t\tbuttonPanel.add(createButton(marktr(\"New\"), \"addrelation\", tr(\"Create a new relation\"), -1, new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// call relation editor with null argument to create new relation\n\t\t\t\tnew RelationEditor(null).setVisible(true);\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(createButton(marktr(\"Select\"), \"select\", tr(\"Select this relation\"), -1, new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// replace selection with the relation from the list\n\t\t\t\tMain.ds.setSelected((Relation)displaylist.getSelectedValue());\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(createButton(marktr(\"Edit\"), \"edit\", tr( \"Open an editor for the selected relation\"), -1, new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toEdit != null)\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\t\t\t\t\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(createButton(\" \", \"delete\", tr(\"Delete the selected relation\"), -1, new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tRelation toDelete = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toDelete != null) {\n\t\t\t\t\tMain.main.undoRedo.add(\n\t\t\t\t\t\tnew DeleteCommand(Collections.singleton(toDelete)));\n\t\t\t\t}\n\t\t\t}\n\t\t}), GBC.eol());\n\t\tLayer.listeners.add(this);\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\t}","id":5940,"modified_method":"public RelationListDialog() {\n\t\tsuper(tr(\"Relations\"), \"relationlist\", tr(\"Open a list of all relations.\"), KeyEvent.VK_R, 150);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() < 2)\n\t\t\t\t\treturn;\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toEdit != null)\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\n\t\t\t}\n\t\t});\n\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,4));\n\t\t\n\t\tbuttonPanel.add(new SideButton(marktr(\"New\"), \"addrelation\", \"Selection\", tr(\"Create a new relation\"), new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// call relation editor with null argument to create new relation\n\t\t\t\tnew RelationEditor(null).setVisible(true);\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(new SideButton(marktr(\"Select\"), \"select\", \"Selection\", tr(\"Select this relation\"), new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// replace selection with the relation from the list\n\t\t\t\tMain.ds.setSelected((Relation)displaylist.getSelectedValue());\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(new SideButton(marktr(\"Edit\"), \"edit\", \"Selection\", tr( \"Open an editor for the selected relation\"), new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tRelation toEdit = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toEdit != null)\n\t\t\t\t\tnew RelationEditor(toEdit).setVisible(true);\t\t\t\t\n\t\t\t}\n\t\t}), GBC.std());\n\t\t\n\t\tbuttonPanel.add(new SideButton(marktr(\"Delete\"), \"delete\", \"Selection\", tr(\"Delete the selected relation\"), new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tRelation toDelete = (Relation) displaylist.getSelectedValue();\n\t\t\t\tif (toDelete != null) {\n\t\t\t\t\tMain.main.undoRedo.add(\n\t\t\t\t\t\tnew DeleteCommand(Collections.singleton(toDelete)));\n\t\t\t\t}\n\t\t\t}\n\t\t}), GBC.eol());\n\t\tLayer.listeners.add(this);\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"public SelectionListDialog() {\n\t\tsuper(tr(\"Current Selection\"), \"selectionlist\", tr(\"Open a selection list window.\"), KeyEvent.VK_E, 150);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() < 2)\n\t\t\t\t\treturn;\n\t\t\t\tupdateMap();\n\t\t\t}\n\t\t});\n\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,2));\n\n\t\tbuttonPanel.add(createButton(\"Select\", \"mapmode/selection/select\", \"Set the selected elements on the map to the selected items in the list above.\", new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tupdateMap();\n\t\t\t}\n\t\t}));\n\n\t\tbuttonPanel.add(createButton(\"Reload\", \"dialogs/refresh\", \"Refresh the selection list.\", new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tselectionChanged(Main.ds.getSelected());\n            }\n\t\t}));\n\n\t\tbuttonPanel.add(createButton(\"Search\", \"dialogs/search\", \"Search for objects.\", Main.main.menu.search));\n\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\t\tselectionChanged(Main.ds.getSelected());\n\n\t\tDataSet.selListeners.add(this);\n\t}","id":5941,"modified_method":"public SelectionListDialog() {\n\t\tsuper(tr(\"Current Selection\"), \"selectionlist\", tr(\"Open a selection list window.\"), KeyEvent.VK_E, 150);\n\t\tdisplaylist.setCellRenderer(new OsmPrimitivRenderer());\n\t\tdisplaylist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\t\tdisplaylist.addMouseListener(new MouseAdapter(){\n\t\t\t@Override public void mouseClicked(MouseEvent e) {\n\t\t\t\tif (e.getClickCount() < 2)\n\t\t\t\t\treturn;\n\t\t\t\tupdateMap();\n\t\t\t}\n\t\t});\n\n\t\tadd(new JScrollPane(displaylist), BorderLayout.CENTER);\n\n\t\tJPanel buttonPanel = new JPanel(new GridLayout(1,2));\n\n\t\tbuttonPanel.add(new SideButton(marktr(\"Select\"), \"select\", \"SelectionList\",\n\t\ttr(\"Set the selected elements on the map to the selected items in the list above.\"), new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tupdateMap();\n\t\t\t}\n\t\t}));\n\n\t\tbuttonPanel.add(new SideButton(marktr(\"Reload\"), \"refresh\", \"SelectionList\", tr(\"Refresh the selection list.\"), new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tselectionChanged(Main.ds.getSelected());\n            }\n\t\t}));\n\n\t\tbuttonPanel.add(new SideButton(marktr(\"Search\"), \"search\", \"SelectionList\", tr(\"Search for objects.\"), Main.main.menu.search));\n\n\t\tadd(buttonPanel, BorderLayout.SOUTH);\n\t\tselectionChanged(Main.ds.getSelected());\n\n\t\tDataSet.selListeners.add(this);\n\t}","commit_id":"c0e19419972e45fb23adcdf3e9d4dd56e3560745","url":"https://github.com/openstreetmap/josm"},{"original_method":"public <T> T unwrap(Class<T> cls) {\n        Object x = extensions.get(cls);\n        if (x != null)\n            return (T) x;\n\n        final EntityManager underlyingEntityManager = getEntityManager();\n\n        // postinvocation is currently used specifically for closing transactional entity manager not running in tx\n        // check if we should skip the post invocation notification.\n        if (unwrapClassNamesThatShouldSkipPostInvocationStep.contains(cls.getName())) {\n            return underlyingEntityManager.unwrap(cls);\n        }\n\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.unwrap(cls);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5942,"modified_method":"public <T> T unwrap(Class<T> cls) {\n        Object x = extensions.get(cls);\n        if (x != null)\n            return (T) x;\n         return getEntityManager().unwrap(cls);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void refresh(Object entity, LockModeType lockMode) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.refresh(entity, lockMode);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5943,"modified_method":"public void refresh(Object entity, LockModeType lockMode) {\n        transactionIsRequired();\n        getEntityManager().refresh(entity, lockMode);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Query createNativeQuery(String sqlString, String resultSetMapping) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Query result = null;\n        try {\n            result = underlyingEntityManager.createNativeQuery(sqlString, resultSetMapping);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5944,"modified_method":"public Query createNativeQuery(String sqlString, String resultSetMapping) {\n        return getEntityManager().createNativeQuery(sqlString, resultSetMapping);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public boolean isOpen() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        boolean result = false;\n        try {\n            result = underlyingEntityManager.isOpen();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5945,"modified_method":"public boolean isOpen() {\n        return getEntityManager().isOpen();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        TypedQuery<T> result = null;\n        try {\n            result = underlyingEntityManager.createQuery(criteriaQuery);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5946,"modified_method":"public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {\n        return getEntityManager().createQuery(criteriaQuery);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void clear() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.clear();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5947,"modified_method":"public void clear() {\n        getEntityManager().clear();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public CriteriaBuilder getCriteriaBuilder() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        CriteriaBuilder result = null;\n        try {\n            result = underlyingEntityManager.getCriteriaBuilder();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5948,"modified_method":"public CriteriaBuilder getCriteriaBuilder() {\n        return getEntityManager().getCriteriaBuilder();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T find(Class<T> entityClass, Object primaryKey) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.find(entityClass, primaryKey);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5949,"modified_method":"public <T> T find(Class<T> entityClass, Object primaryKey) {\n        return getEntityManager().find(entityClass, primaryKey);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T getReference(Class<T> entityClass, Object primaryKey) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.getReference(entityClass, primaryKey);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5950,"modified_method":"public <T> T getReference(Class<T> entityClass, Object primaryKey) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        T result = getEntityManager().getReference(entityClass, primaryKey);\n        detachNonTxInvocation(underlyingEntityManager);\n        return result;\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.refresh(entity, lockMode, properties);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5951,"modified_method":"public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {\n        transactionIsRequired();\n        getEntityManager().refresh(entity, lockMode, properties);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void detach(Object entity) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.detach(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5952,"modified_method":"public void detach(Object entity) {\n        getEntityManager().detach(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public boolean contains(Object entity) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        boolean result = false;\n        try {\n            result = underlyingEntityManager.contains(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5953,"modified_method":"public boolean contains(Object entity) {\n        return getEntityManager().contains(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Object getDelegate() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Object result = null;\n        try {\n            result = underlyingEntityManager.getDelegate();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5954,"modified_method":"public Object getDelegate() {\n        return getEntityManager().getDelegate();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void refresh(Object entity, Map<String, Object> properties) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.refresh(entity, properties);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5955,"modified_method":"public void refresh(Object entity, Map<String, Object> properties) {\n        transactionIsRequired();\n        getEntityManager().refresh(entity, properties);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        TypedQuery<T> result = null;\n        try {\n            result = underlyingEntityManager.createNamedQuery(name, resultClass);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5956,"modified_method":"public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {\n        return getEntityManager().createNamedQuery(name, resultClass);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public EntityManagerFactory getEntityManagerFactory() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        EntityManagerFactory result = null;\n        try {\n            result = underlyingEntityManager.getEntityManagerFactory();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5957,"modified_method":"public EntityManagerFactory getEntityManagerFactory() {\n        return getEntityManager().getEntityManagerFactory();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.lock(entity, lockMode, properties);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5958,"modified_method":"public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {\n        getEntityManager().lock(entity, lockMode, properties);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Query createQuery(String ejbqlString) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Query result = null;\n        try {\n            result = underlyingEntityManager.createQuery(ejbqlString);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5959,"modified_method":"public Query createQuery(String ejbqlString) {\n        return getEntityManager().createQuery(ejbqlString);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.find(entityClass, primaryKey, lockMode);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5960,"modified_method":"public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        T result = underlyingEntityManager.find(entityClass, primaryKey, lockMode);\n        detachNonTxInvocation(underlyingEntityManager);\n        return result;\n\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public LockModeType getLockMode(Object entity) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        LockModeType result = null;\n        try {\n            result = underlyingEntityManager.getLockMode(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5961,"modified_method":"public LockModeType getLockMode(Object entity) {\n        return getEntityManager().getLockMode(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void setProperty(String propertyName, Object value) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.setProperty(propertyName, value);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5962,"modified_method":"public void setProperty(String propertyName, Object value) {\n        getEntityManager().setProperty(propertyName, value);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Map<String, Object> getProperties() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Map<String, Object> result = null;\n        try {\n            result = underlyingEntityManager.getProperties();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5963,"modified_method":"public Map<String, Object> getProperties() {\n        return getEntityManager().getProperties();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void persist(Object entity) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.persist(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5964,"modified_method":"public void persist(Object entity) {\n        transactionIsRequired();\n        getEntityManager().persist(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Query createNativeQuery(String sqlString) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Query result = null;\n        try {\n            result = underlyingEntityManager.createNativeQuery(sqlString);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5965,"modified_method":"public Query createNativeQuery(String sqlString) {\n        return getEntityManager().createNativeQuery(sqlString);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.find(entityClass, primaryKey, properties);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5966,"modified_method":"public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        T result = underlyingEntityManager.find(entityClass, primaryKey, properties);\n        detachNonTxInvocation(underlyingEntityManager);\n        return result;\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void close() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.close();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5967,"modified_method":"public void close() {\n        getEntityManager().close();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void joinTransaction() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.joinTransaction();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5968,"modified_method":"public void joinTransaction() {\n        getEntityManager().joinTransaction();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            result = underlyingEntityManager.find(entityClass, primaryKey, lockMode, properties);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5969,"modified_method":"public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        T result = underlyingEntityManager.find(entityClass, primaryKey, lockMode, properties);\n        detachNonTxInvocation(underlyingEntityManager);\n        return result;\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void refresh(Object entity) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.refresh(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5970,"modified_method":"public void refresh(Object entity) {\n        transactionIsRequired();\n        getEntityManager().refresh(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public Query createNativeQuery(String sqlString, Class resultClass) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Query result = null;\n        try {\n            result = underlyingEntityManager.createNativeQuery(sqlString, resultClass);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5971,"modified_method":"@SuppressWarnings(\"unchecked\")\n    public Query createNativeQuery(String sqlString, Class resultClass) {\n        return getEntityManager().createNativeQuery(sqlString, resultClass);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void flush() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.flush();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5972,"modified_method":"public void flush() {\n        getEntityManager().flush();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public FlushModeType getFlushMode() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        FlushModeType result = null;\n        try {\n            result = underlyingEntityManager.getFlushMode();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5973,"modified_method":"public FlushModeType getFlushMode() {\n        return getEntityManager().getFlushMode();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public EntityTransaction getTransaction() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        EntityTransaction result = null;\n        try {\n            result = underlyingEntityManager.getTransaction();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5974,"modified_method":"public EntityTransaction getTransaction() {\n        return getEntityManager().getTransaction();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void remove(Object entity) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            transactionIsRequired();\n            underlyingEntityManager.remove(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5975,"modified_method":"public void remove(Object entity) {\n        transactionIsRequired();\n        getEntityManager().remove(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Metamodel getMetamodel() {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Metamodel result = null;\n        try {\n            result = underlyingEntityManager.getMetamodel();\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5976,"modified_method":"public Metamodel getMetamodel() {\n        return getEntityManager().getMetamodel();\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Query createNamedQuery(String name) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        Query result = null;\n        try {\n            result = underlyingEntityManager.createNamedQuery(name);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5977,"modified_method":"public Query createNamedQuery(String name) {\n        return getEntityManager().createNamedQuery(name);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void setFlushMode(FlushModeType flushMode) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.setFlushMode(flushMode);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5978,"modified_method":"public void setFlushMode(FlushModeType flushMode) {\n        getEntityManager().setFlushMode(flushMode);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void lock(Object entity, LockModeType lockMode) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        try {\n            underlyingEntityManager.lock(entity, lockMode);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n    }","id":5979,"modified_method":"public void lock(Object entity, LockModeType lockMode) {\n        getEntityManager().lock(entity, lockMode);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> T merge(T entity) {\n        EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        T result = null;\n        try {\n            transactionIsRequired();\n            result = underlyingEntityManager.merge(entity);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5980,"modified_method":"public <T> T merge(T entity) {\n        transactionIsRequired();\n        return getEntityManager().merge(entity);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {\n        final EntityManager underlyingEntityManager = getEntityManager();\n        RuntimeException exceptionWasAlreadyThrown=null;\n        TypedQuery<T> result = null;\n        try {\n            result = underlyingEntityManager.createQuery(qlString, resultClass);\n        } catch(RuntimeException re) {\n            exceptionWasAlreadyThrown = re;\n        } finally {\n            postInvocation(underlyingEntityManager, exceptionWasAlreadyThrown);\n        }\n        return result;\n    }","id":5981,"modified_method":"public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {\n        return getEntityManager().createQuery(qlString, resultClass);\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void postInvocation(\n        EntityManager underlyingEntityManager, RuntimeException exceptionWasAlreadyThrown) {\n        if (exceptionWasAlreadyThrown != null) {\n            throw exceptionWasAlreadyThrown;\n        }\n    }","id":5982,"modified_method":"protected void detachNonTxInvocation(EntityManager underlyingEntityManager) {\n        if ( ! this.isExtendedPersistenceContext() && ! this.isInTx()) {\n            underlyingEntityManager.clear();\n        }\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerInterceptors(AbstractComponentDescription componentDescription, AnnotationInstance annotation) {\n        if (componentDescription instanceof StatefulComponentDescription && isExtendedPersistenceContext(annotation)) {\n            componentDescription.addPostConstructInterceptorFactory(new SFSBCreateInterceptorFactory());\n            componentDescription.addPreDestroyInterceptorFactory(new SFSBDestroyInterceptorFactory());\n            componentDescription.addInterceptorFactory(SFSBInvocationInterceptorFactory.getInstance());\n        }\n    }","id":5983,"modified_method":"private void registerInterceptors(AbstractComponentDescription componentDescription, AnnotationInstance annotation) {\n        // Register our listeners on SFSB that will be created\n        if (componentDescription instanceof StatefulComponentDescription && isExtendedPersistenceContext(annotation)) {\n            componentDescription.addPostConstructInterceptorFactory(new SFSBCreateInterceptorFactory());\n            componentDescription.addPreDestroyInterceptorFactory(new SFSBDestroyInterceptorFactory());\n            componentDescription.addInterceptorFactory(SFSBInvocationInterceptorFactory.getInstance());\n        }\n        // register interceptor on stateful/stateless SB with transactional entity manager.\n        if (!isExtendedPersistenceContext(annotation) &&\n            (componentDescription instanceof  StatefulComponentDescription ||\n            componentDescription instanceof StatelessComponentDescription)) {\n            componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance());\n        }\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public ManagedReference getReference() {\n            PersistenceUnitService service = (PersistenceUnitService)deploymentUnit.getServiceRegistry().getRequiredService(puServiceName).getValue();\n            EntityManagerFactory emf = service.getEntityManagerFactory();\n            EntityManager entityManager;\n\n            if (type.equals(PersistenceContextType.TRANSACTION)) {\n                entityManager = new TransactionScopedEntityManager(unitName, properties, emf);\n                if (log.isDebugEnabled())\n                    log.debug(\"created new TransactionScopedEntityManager for unit name=\" + unitName);\n            }\n            else {\n                // handle PersistenceContextType.EXTENDED\n                EntityManager entityManager1 = SFSBCallStack.findPersistenceContext(unitName);\n                if (entityManager1 == null) {\n                    entityManager1 = emf.createEntityManager(properties);\n                    entityManager = new ExtendedEntityManager(unitName, entityManager1);\n                    if (log.isDebugEnabled())\n                        log.debug(\"created new ExtendedEntityManager for unit name=\" + unitName);\n\n                }\n                else {\n                    entityManager = entityManager1;\n                    if (log.isDebugEnabled())\n                        log.debug(\"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=\" + unitName);\n                }\n\n                // register the EntityManager on TL so that SFSBCreateInterceptor will see it.\n                // this is important for creating a new XPC or inheriting existing XPC from SFSBCallStack\n                SFSBXPCMap.RegisterPersistenceContext(entityManager);\n\n            }\n\n            if (! ENTITY_MANAGER_CLASS.equals(injectionTypeName)) { // inject non-standard wrapped class (e.g. org.hibernate.Session)\n                Class extensionClass;\n                try {\n                    extensionClass = this.getClass().getClassLoader().loadClass(injectionTypeName);\n                } catch (ClassNotFoundException e) {\n                    throw new RuntimeException(\"couldn't load \" + injectionTypeName + \" from JPA modules classloader\", e);\n                }\n                Object targetValueToInject = entityManager.unwrap(extensionClass);\n                return new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));\n            }\n\n            return new ValueManagedReference(new ImmediateValue<Object>(entityManager));\n        }","id":5984,"modified_method":"@Override\n        public ManagedReference getReference() {\n            PersistenceUnitService service = (PersistenceUnitService)deploymentUnit.getServiceRegistry().getRequiredService(puServiceName).getValue();\n            EntityManagerFactory emf = service.getEntityManagerFactory();\n            EntityManager entityManager;\n            boolean isExtended;\n            if (type.equals(PersistenceContextType.TRANSACTION)) {\n                isExtended = false;\n                entityManager = new TransactionScopedEntityManager(unitName, properties, emf);\n                if (log.isDebugEnabled())\n                    log.debug(\"created new TransactionScopedEntityManager for unit name=\" + unitName);\n            }\n            else {\n                // handle PersistenceContextType.EXTENDED\n                isExtended = true;\n                EntityManager entityManager1 = SFSBCallStack.findPersistenceContext(unitName);\n                if (entityManager1 == null) {\n                    entityManager1 = emf.createEntityManager(properties);\n                    entityManager = new ExtendedEntityManager(unitName, entityManager1);\n                    if (log.isDebugEnabled())\n                        log.debug(\"created new ExtendedEntityManager for unit name=\" + unitName);\n\n                }\n                else {\n                    entityManager = entityManager1;\n                    if (log.isDebugEnabled())\n                        log.debug(\"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=\" + unitName);\n                }\n\n                // register the EntityManager on TL so that SFSBCreateInterceptor will see it.\n                // this is important for creating a new XPC or inheriting existing XPC from SFSBCallStack\n                SFSBXPCMap.RegisterPersistenceContext(entityManager);\n\n            }\n\n            if (! ENTITY_MANAGER_CLASS.equals(injectionTypeName)) { // inject non-standard wrapped class (e.g. org.hibernate.Session)\n                Class extensionClass;\n                try {\n                    extensionClass = this.getClass().getClassLoader().loadClass(injectionTypeName);\n                } catch (ClassNotFoundException e) {\n                    throw new RuntimeException(\"couldn't load \" + injectionTypeName + \" from JPA modules classloader\", e);\n                }\n                boolean skipAutoCloseAfterUnwrap = skipEntityManagerCloseFor.contains(injectionTypeName);\n                if (!skipAutoCloseAfterUnwrap && !isExtended) {\n                    NonTxEmCloser.pushCall();   // create thread local to hold underlying entity manager that unwrap will create\n                }\n                Object targetValueToInject = entityManager.unwrap(extensionClass);\n                if (!skipAutoCloseAfterUnwrap && !isExtended) {\n                    NonTxEmCloser.popCall();    // close entity manager that unwrap created\n                }\n\n                return new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));\n            }\n\n            return new ValueManagedReference(new ImmediateValue<Object>(entityManager));\n        }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected EntityManager getEntityManager() {\n        EntityManager result = null;\n\n        isInTx = TransactionUtil.getInstance().isInTx();\n\n        // try to get EM from XPC and return it if puScopedName is found\n        if (isInTx && (result = SFSBCallStack.findPersistenceContext(puScopedName)) != null) {\n\n\n            // 7.6.3.1 throw EJBException if a different persistence context is already joined to the\n            // transaction (with the same puScopedName).\n            EntityManager existing = TransactionUtil.getInstance().getTransactionScopedEntityManager(puScopedName);\n            if (existing != null && existing != result) {       // should be enough to test if not the same object\n                throw new EJBException(\n                    \"Found extended persistence context in SFSB invocation call stack but that cannot be used \" +\n                    \"because the transaction already has a transactional context associated with it.  \" +\n                    \"This can be avoided by changing application code, either eliminate the extended \" +\n                    \"persistence context or the transactional context.  See JPA spec 2.0 section 7.6.3.1.  \" +\n                    \"Scoped persistence unit name=\" +puScopedName +\n                    \", persistence context already in transaction =\" + existing +\n                    \", extended persistence context =\" + result) ;\n            }\n            else if( existing == null) {\n                // JPA 7.9.1 join the transaction if not already done.\n                TransactionUtil.getInstance().registerExtendedWithTransaction(puScopedName, result);\n            }\n        } else {\n            if (isInTx) {\n                result = TransactionUtil.getInstance().getOrCreateTransactionScopedEntityManager(emf, puScopedName, properties);\n            } else {\n                result = EntityManagerUtil.createEntityManager(emf, properties);\n            }\n        }\n        return result;\n    }","id":5985,"modified_method":"@Override\n    protected EntityManager getEntityManager() {\n        EntityManager result = null;\n\n        isInTx = TransactionUtil.getInstance().isInTx();\n\n        // try to get EM from XPC and return it if puScopedName is found\n        if (isInTx && (result = SFSBCallStack.findPersistenceContext(puScopedName)) != null) {\n\n\n            // 7.6.3.1 throw EJBException if a different persistence context is already joined to the\n            // transaction (with the same puScopedName).\n            EntityManager existing = TransactionUtil.getInstance().getTransactionScopedEntityManager(puScopedName);\n            if (existing != null && existing != result) {       // should be enough to test if not the same object\n                throw new EJBException(\n                    \"Found extended persistence context in SFSB invocation call stack but that cannot be used \" +\n                    \"because the transaction already has a transactional context associated with it.  \" +\n                    \"This can be avoided by changing application code, either eliminate the extended \" +\n                    \"persistence context or the transactional context.  See JPA spec 2.0 section 7.6.3.1.  \" +\n                    \"Scoped persistence unit name=\" +puScopedName +\n                    \", persistence context already in transaction =\" + existing +\n                    \", extended persistence context =\" + result) ;\n            }\n            else if( existing == null) {\n                // JPA 7.9.1 join the transaction if not already done.\n                TransactionUtil.getInstance().registerExtendedWithTransaction(puScopedName, result);\n            }\n        } else {\n            if (isInTx) {\n                result = TransactionUtil.getInstance().getOrCreateTransactionScopedEntityManager(emf, puScopedName, properties);\n            } else {\n                result = NonTxEmCloser.get(puScopedName);\n                if (result == null) {\n                    result = EntityManagerUtil.createEntityManager(emf, properties);\n                    NonTxEmCloser.add(puScopedName, result);\n                }\n            }\n        }\n        return result;\n    }","commit_id":"283ecdc3388b0e2c67e8c3031370b824a05b6f85","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void addFromDependencyDescriptor(List<Dependency> mavenDependencies, ModuleDependency dependency, String scope,\n            Set<Configuration> configurations) {\n        mavenDependencies.add(createMavenDependencyFromDependencyDescriptor(dependency, scope, configurations));\n    }","id":5986,"modified_method":"private void addFromDependencyDescriptor(List<Dependency> mavenDependencies, ModuleDependency dependency, String scope,\n            Set<Configuration> configurations) {\n        mavenDependencies.addAll(createMavenDependencyFromDependencyDescriptor(dependency, scope, configurations));\n    }","commit_id":"6de43a5f9114276152cd375fa842a4b6520c89aa","url":"https://github.com/gradle/gradle"},{"original_method":"private void addFromArtifactDescriptor(List<Dependency> mavenDependencies, ModuleDependency dependency, String scope,\n            Set<Configuration> configurations) {\n        for (DependencyArtifact artifact : dependency.getArtifacts()) {\n            mavenDependencies.add(createMavenDependencyFromArtifactDescriptor(dependency, artifact, scope, configurations));\n        }\n    }","id":5987,"modified_method":"private void addFromArtifactDescriptor(List<Dependency> mavenDependencies, ModuleDependency dependency, String scope,\n            Set<Configuration> configurations) {\n        for (DependencyArtifact artifact : dependency.getArtifacts()) {\n            mavenDependencies.addAll(createMavenDependencyFromArtifactDescriptor(dependency, artifact, scope, configurations));\n        }\n    }","commit_id":"6de43a5f9114276152cd375fa842a4b6520c89aa","url":"https://github.com/gradle/gradle"},{"original_method":"private Dependency createMavenDependency(ModuleDependency dependency, String name, String type, String scope, String classifier,\n            Set<Configuration> configurations) {\n        Dependency mavenDependency =  new Dependency();\n        mavenDependency.setGroupId(dependency.getGroup());\n        if (dependency instanceof ProjectDependency) {\n            ProjectDependency projectDependency = (ProjectDependency) dependency;\n            mavenDependency.setArtifactId(determineProjectDependencyArtifactId(projectDependency));\n            final String artifactId = determineProjectDependencyArtifactId((ProjectDependency) dependency);\n            PublishArtifactSet configurationArtifacts = projectDependency.getProjectConfiguration().getArtifacts();\n            if (configurationArtifacts.size() > 0) {\n                Object[] matchingArtifacts = configurationArtifacts.matching(new Spec<PublishArtifact>() {\n                    public boolean isSatisfiedBy(PublishArtifact element) {\n                        return element.getName().equals(artifactId);\n                    }\n                }).toArray();\n\n                PublishArtifact artifactToPublish;\n                if (matchingArtifacts.length > 0) {\n                    artifactToPublish = (PublishArtifact) matchingArtifacts[0];\n                    if (artifactToPublish.getClassifier() != null) {\n                        classifier = artifactToPublish.getClassifier();\n                    }\n                }\n            }\n        } else {\n            mavenDependency.setArtifactId(name);\n        }\n        mavenDependency.setVersion(mapToMavenSyntax(dependency.getVersion()));\n        mavenDependency.setType(type);\n        mavenDependency.setScope(scope);\n        mavenDependency.setClassifier(classifier);\n        mavenDependency.setExclusions(getExclusions(dependency, configurations));\n        return mavenDependency;\n    }","id":5988,"modified_method":"private List<Dependency> createMavenDependency(ModuleDependency dependency, String name, String type, String scope, String classifier,\n                                                   Set<Configuration> configurations) {\n        List<Dependency> mavenDependencies = new ArrayList<Dependency>();\n\n        if (dependency instanceof ProjectDependency) {\n            ProjectDependency projectDependency = (ProjectDependency) dependency;\n            final String artifactId = determineProjectDependencyArtifactId((ProjectDependency) dependency);\n\n            Configuration dependencyConfig = projectDependency.getProjectConfiguration();\n            for(PublishArtifact artifactToPublish : dependencyConfig.getAllArtifacts()) {\n                Dependency mavenDependency =  new Dependency();\n                mavenDependency.setArtifactId(artifactId);\n                mavenDependency.setClassifier(artifactToPublish.getClassifier());\n                mavenDependencies.add(mavenDependency);\n            }\n        } else {\n            Dependency mavenDependency =  new Dependency();\n            mavenDependency.setArtifactId(name);\n            mavenDependency.setClassifier(classifier);\n            mavenDependencies.add(mavenDependency);\n        }\n\n        for(Dependency mavenDependency : mavenDependencies) {\n            mavenDependency.setGroupId(dependency.getGroup());\n            mavenDependency.setVersion(mapToMavenSyntax(dependency.getVersion()));\n            mavenDependency.setType(type);\n            mavenDependency.setScope(scope);\n            mavenDependency.setExclusions(getExclusions(dependency, configurations));\n        }\n\n        return mavenDependencies;\n    }","commit_id":"6de43a5f9114276152cd375fa842a4b6520c89aa","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        final Model model = ModelUtils.getRawModel(this.project);\n\n        final File outputFile = new File(this.project.getBuild().getDirectory() + File.separatorChar + \"slingstart.txt\");\n        outputFile.getParentFile().mkdirs();\n        Writer writer = null;\n        try {\n\n            writer = new FileWriter(outputFile);\n            ModelWriter.write(writer, model);\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Unable to write model to \" + outputFile, e);\n        } finally {\n            IOUtils.closeQuietly(writer);\n        }\n\n        // if this project is a partial bundle list, it's the main artifact\n        if ( project.getPackaging().equals(BuildConstants.PACKAGING_PARTIAL_SYSTEM) ) {\n            project.getArtifact().setFile(outputFile);\n        } else {\n            // otherwise attach it as an additional artifact\n            projectHelper.attachArtifact(project, BuildConstants.PACKAGING_PARTIAL_SYSTEM, BuildConstants.CLASSIFIER_PARTIAL_SYSTEM, outputFile);\n        }\n    }","id":5989,"modified_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        final Model model = ProjectHelper.getRawModel(this.project);\n\n        // write the model\n        final File outputFile = new File(this.project.getBuild().getDirectory() + File.separatorChar + BuildConstants.MODEL_ARTIFACT_NAME);\n        outputFile.getParentFile().mkdirs();\n\n        Writer writer = null;\n        try {\n\n\n            writer = new FileWriter(outputFile);\n            ModelWriter.write(writer, model);\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Unable to write model to \" + outputFile, e);\n        } finally {\n            IOUtils.closeQuietly(writer);\n        }\n\n        // if this project is a partial bundle list, it's the main artifact\n        if ( project.getPackaging().equals(BuildConstants.PACKAGING_PARTIAL_SYSTEM) ) {\n            project.getArtifact().setFile(outputFile);\n        } else {\n            // otherwise attach it as an additional artifact\n            projectHelper.attachArtifact(project, BuildConstants.PACKAGING_PARTIAL_SYSTEM,\n                    BuildConstants.CLASSIFIER_PARTIAL_SYSTEM, outputFile);\n        }\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"private static String nodeValue(final Xpp3Dom config, final String name, final String defaultValue) {\n        final Xpp3Dom node = (config == null ? null : config.getChild(name));\n        if (node != null) {\n            return node.getValue();\n        } else {\n            return defaultValue;\n        }\n    }","id":5990,"modified_method":"private static String nodeValue(final Plugin plugin, final String name, final String defaultValue) {\n        final Xpp3Dom config = plugin == null ? null : (Xpp3Dom)plugin.getConfiguration();\n        final Xpp3Dom node = (config == null ? null : config.getChild(name));\n        if (node != null) {\n            return node.getValue();\n        } else {\n            return defaultValue;\n        }\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    public void afterProjectsRead(final MavenSession session) throws MavenExecutionException {\n        log.debug(\"Searching for slingstart projects...\");\n        for (final MavenProject project : session.getProjects()) {\n            for (Plugin plugin : project.getBuild().getPlugins()) {\n                if (plugin.getArtifactId().equals(PLUGIN_ID)) {\n                    log.debug(\"Found potential slingstart project: \" + project);\n                    try {\n                        addDependencies(artifactHandlerManager, resolver, log,\n                                session, project, plugin);\n                    } catch (final Exception e) {\n                        throw new MavenExecutionException(\"Unable to determine plugin-based dependencies for project \" + project, e);\n                    }\n                }\n            }\n        }\n    }","id":5991,"modified_method":"@Override\n    public void afterProjectsRead(final MavenSession session) throws MavenExecutionException {\n        final Environment env = new Environment();\n        env.artifactHandlerManager = artifactHandlerManager;\n        env.resolver = resolver;\n        env.logger = logger;\n        env.session = session;\n\n        logger.debug(\"Searching for \" + BuildConstants.PACKAGING_SLINGSTART + \"/\" + BuildConstants.PACKAGING_PARTIAL_SYSTEM + \" projects...\");\n\n        for (final MavenProject project : session.getProjects()) {\n            if ( project.getPackaging().equals(BuildConstants.PACKAGING_SLINGSTART)\n                 || project.getPackaging().equals(BuildConstants.PACKAGING_PARTIAL_SYSTEM)) {\n                logger.debug(\"Found \" + project.getPackaging() + \" project: \" + project);\n                // search plugin configuration (optional)\n                final ProjectInfo info = new ProjectInfo();\n                for (Plugin plugin : project.getBuild().getPlugins()) {\n                    if (plugin.getArtifactId().equals(PLUGIN_ID)) {\n                        info.plugin = plugin;\n                        break;\n                    }\n                }\n                info.project = project;\n                env.modelProjects.put(project.getGroupId() + \":\" + project.getArtifactId(), info);\n            }\n        }\n\n        addDependencies(env);\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"private static File getSlingstartArtifact(final ArtifactHandlerManager artifactHandlerManager,\n            final ArtifactResolver resolver,\n            final MavenProject project,\n            final MavenSession session,\n            final Dependency d)\n    throws MavenExecutionException {\n        final Artifact prjArtifact = new DefaultArtifact(d.getGroupId(),\n                d.getArtifactId(),\n                VersionRange.createFromVersion(d.getVersion()),\n                Artifact.SCOPE_PROVIDED,\n                d.getType(),\n                d.getClassifier(),\n                artifactHandlerManager.getArtifactHandler(d.getType()));\n        try {\n            resolver.resolve(prjArtifact, project.getRemoteArtifactRepositories(), session.getLocalRepository());\n        } catch (final ArtifactResolutionException e) {\n            throw new MavenExecutionException(\"Unable to get artifact for \" + d, e);\n        } catch (final ArtifactNotFoundException e) {\n            throw new MavenExecutionException(\"Unable to get artifact for \" + d, e);\n        }\n        return prjArtifact.getFile();\n    }","id":5992,"modified_method":"private static File resolveSlingstartArtifact(final Environment env,\n            final MavenProject project,\n            final Dependency d)\n    throws MavenExecutionException {\n        final Artifact prjArtifact = new DefaultArtifact(d.getGroupId(),\n                d.getArtifactId(),\n                VersionRange.createFromVersion(d.getVersion()),\n                Artifact.SCOPE_PROVIDED,\n                d.getType(),\n                d.getClassifier(),\n                env.artifactHandlerManager.getArtifactHandler(d.getType()));\n        try {\n            env.resolver.resolve(prjArtifact, project.getRemoteArtifactRepositories(), env.session.getLocalRepository());\n        } catch (final ArtifactResolutionException e) {\n            throw new MavenExecutionException(\"Unable to get artifact for \" + d, e);\n        } catch (final ArtifactNotFoundException e) {\n            throw new MavenExecutionException(\"Unable to get artifact for \" + d, e);\n        }\n        return prjArtifact.getFile();\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"public static void addDependencies(final ArtifactHandlerManager artifactHandlerManager,\n            final ArtifactResolver resolver,\n            final Logger log,\n            final MavenSession session,\n            final MavenProject project,\n            final Plugin plugin)\n    throws Exception {\n        // get all projects of the current build\n        final Map<String, MavenProject> projectMap = new HashMap<String, MavenProject>();\n        for (final MavenProject p : session.getProjects()) {\n            projectMap.put(p.getGroupId() + \":\" + p.getArtifactId() + \":\" + p.getVersion(), p);\n        }\n\n        // check dependent projects first: slingstart or partial system\n        final List<Object> allDependencies = new ArrayList<Object>();\n        final List<File> resolvedModelDependencies = new ArrayList<File>();\n        for(final Dependency d : project.getDependencies() ) {\n            if ( d.getType().equals(BuildConstants.PACKAGING_SLINGSTART)\n              || d.getType().equals(BuildConstants.PACKAGING_PARTIAL_SYSTEM)) {\n                // if it's a project from the current reactor build, we can't resolve it right now\n                final String key = d.getGroupId() + \":\" + d.getArtifactId() + \":\" + d.getVersion();\n                if ( projectMap.containsKey(key) ) {\n                    allDependencies.add(key + \":\" + (d.getClassifier() != null ? d.getClassifier() : \"\")\n                                            + \":\" + (d.getType() != null ? d.getType() : \"\"));\n                } else {\n                    // \"external\" dependency, we can already resolve it\n                    final File modelFile = getSlingstartArtifact(artifactHandlerManager, resolver, project, session, d);\n                    resolvedModelDependencies.add(modelFile);\n                    allDependencies.add(modelFile);\n                }\n            }\n        }\n\n        // read local model\n        final String directory = nodeValue((Xpp3Dom) plugin.getConfiguration(),\n                \"modelDirectory\", new File(project.getBasedir(), \"src/main/provisioning\").getAbsolutePath());\n        final Model model = ModelUtils.readFullModel(new File(directory), resolvedModelDependencies, project, session, log);\n\n        ModelUtils.storeModelInfo(project, model, allDependencies);\n\n        // we have to create an effective model to add the dependencies\n        final Model effectiveModel = ModelUtility.getEffectiveModel(model, null);\n\n        if ( project.getPackaging().equals(BuildConstants.PACKAGING_SLINGSTART ) ) {\n            // start with base artifact\n            final ModelUtils.SearchResult result = ModelUtils.findBaseArtifact(effectiveModel);\n            if ( result.artifact != null ) {\n                final String[] classifiers = new String[] {null, BuildConstants.CLASSIFIER_APP, BuildConstants.CLASSIFIER_WEBAPP};\n                for(final String c : classifiers) {\n                    final Dependency dep = new Dependency();\n                    dep.setGroupId(result.artifact.getGroupId());\n                    dep.setArtifactId(result.artifact.getArtifactId());\n                    dep.setVersion(result.artifact.getVersion());\n                    dep.setType(result.artifact.getType());\n                    dep.setClassifier(c);\n                    if ( BuildConstants.CLASSIFIER_WEBAPP.equals(c) ) {\n                        dep.setType(BuildConstants.TYPE_WAR);\n                    }\n                    dep.setScope(Artifact.SCOPE_PROVIDED);\n\n                    log.debug(\"- adding dependency \" + dep);\n                    project.getDependencies().add(dep);\n                }\n            }\n        }\n        addDependenciesFromModel(project, effectiveModel, log);\n    }","id":5993,"modified_method":"/**\n     * Add all dependencies from the model\n     * @param project The project\n     * @param model The model\n     * @param log The logger\n     * @throws MavenExecutionException\n     */\n    private static void addDependenciesFromModel(\n            final Environment env,\n            final ProjectInfo info)\n    throws MavenExecutionException {\n        if ( info.project.getPackaging().equals(BuildConstants.PACKAGING_SLINGSTART ) ) {\n            // add base artifact if defined in current model\n            final org.apache.sling.provisioning.model.Artifact baseArtifact = ModelUtils.findBaseArtifact(info.model);\n\n            final String[] classifiers = new String[] {null, BuildConstants.CLASSIFIER_APP, BuildConstants.CLASSIFIER_WEBAPP};\n            for(final String c : classifiers) {\n                final Dependency dep = new Dependency();\n                dep.setGroupId(baseArtifact.getGroupId());\n                dep.setArtifactId(baseArtifact.getArtifactId());\n                dep.setVersion(baseArtifact.getVersion());\n                dep.setType(baseArtifact.getType());\n                dep.setClassifier(c);\n                if ( BuildConstants.CLASSIFIER_WEBAPP.equals(c) ) {\n                    dep.setType(BuildConstants.TYPE_WAR);\n                }\n                dep.setScope(Artifact.SCOPE_PROVIDED);\n\n                info.project.getDependencies().add(dep);\n                env.logger.debug(\"- adding base dependency \" + ModelUtils.toString(dep));\n            }\n        }\n\n        for(final Feature feature : info.model.getFeatures()) {\n            // skip launchpad feature\n            if ( feature.getName().equals(ModelConstants.FEATURE_LAUNCHPAD) ) {\n                continue;\n            }\n            for(final RunMode runMode : feature.getRunModes()) {\n                for(final ArtifactGroup group : runMode.getArtifactGroups()) {\n                    for(final org.apache.sling.provisioning.model.Artifact a : group) {\n                        final Dependency dep = new Dependency();\n                        dep.setGroupId(a.getGroupId());\n                        dep.setArtifactId(a.getArtifactId());\n                        dep.setVersion(a.getVersion());\n                        dep.setType(a.getType());\n                        dep.setClassifier(a.getClassifier());\n\n                        dep.setScope(Artifact.SCOPE_PROVIDED);\n\n                        env.logger.debug(\"- adding dependency \" + ModelUtils.toString(dep));\n                        info.project.getDependencies().add(dep);\n                    }\n                }\n            }\n        }\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"public static SearchResult findBaseArtifact(final Model model) throws MojoExecutionException {\n        final SearchResult result = new SearchResult();\n        final Feature base = model.getFeature(ModelConstants.FEATURE_LAUNCHPAD);\n        if ( base == null ) {\n            result.errorMessage = \"No launchpad feature found.\";\n        } else {\n            // get global run mode\n            final RunMode runMode = base.getRunMode();\n            if ( runMode == null ) {\n                result.errorMessage = \"No global run mode found in launchpad feature.\";\n            } else {\n                if ( runMode.getArtifactGroups().isEmpty() ) {\n                    result.errorMessage = \"No base artifacts defined.\";\n                } else if ( runMode.getArtifactGroups().size() > 1 ) {\n                    result.errorMessage = \"Base run mode should only have a single start level.\";\n                } else {\n                    org.apache.sling.provisioning.model.Artifact firstArtifact = null;\n                    for(final org.apache.sling.provisioning.model.Artifact a : runMode.getArtifactGroups().get(0)) {\n                        if ( firstArtifact == null ) {\n                            firstArtifact = a;\n                        } else {\n                            result.errorMessage = \"Base run mode should contain exactly one artifact.\";\n                            break;\n                        }\n                    }\n                    if ( firstArtifact == null ) {\n                        result.errorMessage = \"No base artifacts defined.\";\n                    }\n                    if ( result.errorMessage == null ) {\n                        result.artifact = firstArtifact;\n                    }\n                }\n            }\n        }\n        return result;\n    }","id":5994,"modified_method":"public static org.apache.sling.provisioning.model.Artifact findBaseArtifact(final Model model)\n    throws MavenExecutionException {\n        final Feature base = model.getFeature(ModelConstants.FEATURE_LAUNCHPAD);\n        if ( base == null ) {\n            throw new MavenExecutionException(\"No launchpad feature found.\", (File)null);\n        } else {\n            // get global run mode\n            final RunMode runMode = base.getRunMode();\n            if ( runMode == null ) {\n                throw new MavenExecutionException(\"No global run mode found in launchpad feature.\", (File)null);\n            } else {\n                if ( runMode.getArtifactGroups().isEmpty() ) {\n                    throw new MavenExecutionException(\"No base artifacts defined.\", (File)null);\n                } else if ( runMode.getArtifactGroups().size() > 1 ) {\n                    throw new MavenExecutionException(\"Base run mode should only have a single start level.\", (File)null);\n                } else {\n                    org.apache.sling.provisioning.model.Artifact firstArtifact = null;\n                    for(final org.apache.sling.provisioning.model.Artifact a : runMode.getArtifactGroups().get(0)) {\n                        if ( firstArtifact == null ) {\n                            firstArtifact = a;\n                        } else {\n                            throw new MavenExecutionException(\"Base run mode should contain exactly one artifact.\", (File)null);\n                        }\n                    }\n                    if ( firstArtifact == null ) {\n                        throw new MavenExecutionException(\"No base artifacts defined.\", (File)null);\n                    }\n                    return firstArtifact;\n                }\n            }\n        }\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"/**\n     * Return the base artifact\n     */\n    private Artifact getBaseArtifact(final Model model, final String classifier, final String type) throws MojoExecutionException {\n        final ModelUtils.SearchResult result = ModelUtils.findBaseArtifact(model);\n        if ( result.errorMessage != null ) {\n            throw new MojoExecutionException(result.errorMessage);\n        }\n        final org.apache.sling.provisioning.model.Artifact baseArtifact = result.artifact;\n\n        final Artifact a = ModelUtils.getArtifact(this.project,  this.mavenSession, this.artifactHandlerManager, this.resolver,\n                baseArtifact.getGroupId(),\n                baseArtifact.getArtifactId(),\n                baseArtifact.getVersion(),\n                type,\n                classifier);\n        if (a == null) {\n            throw new MojoExecutionException(\n                    String.format(\"Project doesn't have a base dependency of groupId %s and artifactId %s\",\n                            baseArtifact.getGroupId(), baseArtifact.getArtifactId()));\n        }\n        return a;\n    }","id":5995,"modified_method":"/**\n     * Return the base artifact\n     */\n    private Artifact getBaseArtifact(final Model model, final String classifier, final String type) throws MojoExecutionException {\n        try {\n            final org.apache.sling.provisioning.model.Artifact baseArtifact = ModelUtils.findBaseArtifact(model);\n\n            final Artifact a = ModelUtils.getArtifact(this.project,  this.mavenSession, this.artifactHandlerManager, this.resolver,\n                    baseArtifact.getGroupId(),\n                    baseArtifact.getArtifactId(),\n                    baseArtifact.getVersion(),\n                    type,\n                    classifier);\n            if (a == null) {\n                throw new MojoExecutionException(\n                        String.format(\"Project doesn't have a base dependency of groupId %s and artifactId %s\",\n                                baseArtifact.getGroupId(), baseArtifact.getArtifactId()));\n            }\n            return a;\n        } catch ( final MavenExecutionException mee) {\n            throw new MojoExecutionException(mee.getMessage(), mee.getCause());\n        }\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        final Model model = ModelUtils.getEffectiveModel(this.project);\n\n        this.prepareGlobal(model);\n        this.prepareStandaloneApp(model);\n        this.prepareWebapp(model);\n    }","id":5996,"modified_method":"@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        final Model model = ProjectHelper.getEffectiveModel(this.project);\n\n        this.prepareGlobal(model);\n        this.prepareStandaloneApp(model);\n        this.prepareWebapp(model);\n    }","commit_id":"8db939c2cbeb1eac6e0f4df46d1a5a0bc84e2942","url":"https://github.com/apache/sling"},{"original_method":"@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = splitReader.nextKeyValue();\n    if (hasNext) {\n      // splitreader doesn't increment these metrics, need to do it ourselves.\n      context.getSystemMapperMetrics().gauge(\"store.reads\", 1, dataSetName);\n      context.getSystemMapperMetrics().gauge(\"store.ops\", 1, dataSetName);\n    }\n    return hasNext;\n  }","id":5997,"modified_method":"@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = splitReader.nextKeyValue();\n    if (hasNext) {\n      // splitreader doesn't increment these metrics, need to do it ourselves.\n      context.getSystemMapperMetrics().gauge(\"store.reads\", 1, dataSetName);\n      context.getSystemMapperMetrics().gauge(\"store.ops\", 1, dataSetName);\n      dataSetMetrics.gauge(\"dataset.store.reads\", 1, dataSetName);\n      dataSetMetrics.gauge(\"dataset.store.ops\", 1, dataSetName);\n    }\n    return hasNext;\n  }","commit_id":"6e532337da452d88ca9d817b727ff17a687b82c0","url":"https://github.com/caskdata/cdap"},{"original_method":"public DataSetRecordReader(final SplitReader<KEY, VALUE> splitReader,\n                             BasicMapReduceContext context, String dataSetName) {\n    this.splitReader = splitReader;\n    this.context = context;\n    this.dataSetName = dataSetName;\n  }","id":5998,"modified_method":"public DataSetRecordReader(final SplitReader<KEY, VALUE> splitReader,\n                             BasicMapReduceContext context, String dataSetName) {\n    this.splitReader = splitReader;\n    this.context = context;\n    this.dataSetName = dataSetName;\n    this.dataSetMetrics = context.getMetricsCollectionService().getCollector(\n      MetricsScope.REACTOR, Constants.Metrics.DATASET_CONTEXT, \"0\");\n  }","commit_id":"6e532337da452d88ca9d817b727ff17a687b82c0","url":"https://github.com/caskdata/cdap"},{"original_method":"private void reportContinuuityStats() throws IOException, InterruptedException {\n    Counters counters = jobConf.getCounters();\n    // metrics scoped to mapper and reducer tasks\n    for (MetricsScope scope : MetricsScope.values()) {\n      String group = \"continuuity.mapper.\" + scope.name();\n      reportContinuuityStats(counters.getGroup(group),\n                             context.getSystemMapperMetrics(scope), scope, previousMapStats);\n\n      group = \"continuuity.reducer.\" + scope.name();\n      reportContinuuityStats(counters.getGroup(group),\n                             context.getSystemReducerMetrics(scope), scope, previousReduceStats);\n    }\n\n    // also any other metrics (including dataset metrics)\n    for (String group : counters.getGroupNames()) {\n      if (group.startsWith(\"continuuity.\")) {\n        String scopePart = group.substring(group.lastIndexOf(\".\") + 1);\n        // last one should be scope\n        MetricsScope scope;\n        try {\n          scope = MetricsScope.valueOf(scopePart);\n        } catch (IllegalArgumentException e) {\n          // SHOULD NEVER happen, simply skip if happens\n          continue;\n        }\n        reportContinuuityStats(counters.getGroup(group),\n                               context.getSystemMetrics(scope), scope, previousReduceStats);\n      }\n    }\n  }","id":5999,"modified_method":"private void reportContinuuityStats() throws IOException, InterruptedException {\n    Counters counters = jobConf.getCounters();\n    for (String group : counters.getGroupNames()) {\n      if (group.startsWith(\"continuuity.\")) {\n        String[] parts = group.split(\"\\\\.\");\n        String scopePart = parts[parts.length - 1];\n        // last one should be scope\n        MetricsScope scope;\n        try {\n          scope = MetricsScope.valueOf(scopePart);\n        } catch (IllegalArgumentException e) {\n          // SHOULD NEVER happen, simply skip if happens\n          continue;\n        }\n\n        String programPart = parts[1];\n        if (programPart.equals(\"mapper\")) {\n          reportContinuuityStats(counters.getGroup(group), context.getSystemMetrics(scope), scope, previousMapStats);\n        } else if (programPart.equals(\"reducer\")) {\n          reportContinuuityStats(counters.getGroup(group), context.getSystemMetrics(scope), scope, previousReduceStats);\n        } else {\n          reportContinuuityStats(counters.getGroup(group), context.getSystemMetrics(scope), scope, previousSystemStats);\n        }\n      }\n    }\n  }","commit_id":"6e532337da452d88ca9d817b727ff17a687b82c0","url":"https://github.com/caskdata/cdap"}]